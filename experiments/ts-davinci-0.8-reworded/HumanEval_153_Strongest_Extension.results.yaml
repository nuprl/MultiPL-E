language: ts
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjs0dny3f.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjs0dny3f.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength: number = 0, strongest_extension:\
    \ string = \"\";\n    extensions.forEach(function (extension) {\n        let current_strength:\
    \ number = 0;\n        extension.split(\"\").forEach(function (char) {\n     \
    \       if (char.match(/[A-Z]/)) {\n                current_strength++;\n    \
    \        } else if (char.match(/[a-z]/)) {\n                current_strength--;\n\
    \            }\n        });\n        if (current_strength > strength) {\n    \
    \        strength = current_strength;\n            strongest_extension = extension;\n\
    \        }\n    });\n    return `${class_name}.${strongest_extension}`;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpumf0vo10.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpumf0vo10.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let all_extensions = extensions.map(ext\
    \ => ext.toLowerCase())\n    let strengths = all_extensions.map(ext => ext.match(/[A-Z]/g).length\
    \ - ext.match(/[a-z]/g).length)\n    let max = Math.max(...strengths)\n    let\
    \ index = strengths.indexOf(max)\n    return class_name + \".\" + extensions[index]\n\
    }\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]))\n\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprgsz5thy.js:19\n    let strengths = all_extensions.map(ext => ext.match(/[A-Z]/g).length\
    \ - ext.match(/[a-z]/g).length);\n                                           \
    \                      ^\n\nTypeError: Cannot read properties of null (reading\
    \ 'length')\n    at /tmp/tmprgsz5thy.js:19:66\n    at Array.map (<anonymous>)\n\
    \    at Strongest_Extension (/tmp/tmprgsz5thy.js:19:36)\n    at Object.<anonymous>\
    \ (/tmp/tmprgsz5thy.js:24:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0]\n\
    \    let maximum = strength(strongest)\n    extensions.forEach(extension => {\n\
    \        let strengthVal = strength(extension)\n        if (strengthVal > maximum)\
    \ {\n            maximum = strengthVal\n            strongest = extension\n  \
    \      }\n    })\n    return class_name + \".\" + strongest\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9lin3p9u.ts(19,19): error TS2304: Cannot find name ''strength''.

    ../../../../tmp/tmp9lin3p9u.ts(21,27): error TS2304: Cannot find name ''strength''.

    '
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result: [string, number] =\
    \ [extensions[0], 0];\n    let extension_strength: [string, number][] = [];\n\
    \    extensions.forEach(extension => {\n        let strength: number = 0;\n  \
    \      for (let char of extension) {\n            if (char >= 'A' && char <= 'Z')\
    \ strength++;\n            else if (char >= 'a' && char <= 'z') strength--;\n\
    \        }\n        extension_strength.push([extension, strength]);\n    });\n\
    \    extension_strength.forEach(extension => {\n        if (extension[1] > result[1])\
    \ result = extension;\n    });\n    return class_name + '.' + result[0];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4hsre16b.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4hsre16b.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ \"\";\n  let strongest_strength: number = -1000;\n  for (let i: number = 0;\
    \ i < extensions.length; i++) {\n    let strength: number = get_strength(extensions[i]);\n\
    \    if (strength > strongest_strength) {\n      strongest_strength = strength;\n\
    \      strongest_extension = extensions[i];\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp1ro_qme5.ts(21,28): error TS2304: Cannot find name ''get_strength''.

    '
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let strongest_strength = (() => {\n        let upper = extensions[0].match(/[A-Z]/g);\n\
    \        let lower = extensions[0].match(/[a-z]/g);\n        return upper.length\
    \ - lower.length;\n    })();\n    for (let i = 1; i < extensions.length; i++)\
    \ {\n        let strength = (() => {\n            let upper = extensions[i].match(/[A-Z]/g);\n\
    \            let lower = extensions[i].match(/[a-z]/g);\n            return upper.length\
    \ - lower.length;\n        })();\n        if (strength > strongest_strength) {\n\
    \            strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu_apx3mq.js:22\n        return upper.length - lower.length;\n \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at /tmp/tmpu_apx3mq.js:22:22\n    at Strongest_Extension (/tmp/tmpu_apx3mq.js:23:7)\n\
    \    at test (/tmp/tmpu_apx3mq.js:41:22)\n    at Object.<anonymous> (/tmp/tmpu_apx3mq.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strong_ext = extensions[0]\n\
    \  for (let i = 1; i < extensions.length; i++) {\n    if (strength(extensions[i])\
    \ > strength(strong_ext)) {\n      strong_ext = extensions[i]\n    }\n  }\n  return\
    \ class_name + \".\" + strong_ext\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0jwuyfq3.ts(20,9): error TS2304: Cannot find name ''strength''.

    ../../../../tmp/tmp0jwuyfq3.ts(20,35): error TS2304: Cannot find name ''strength''.

    '
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjs0dny3f.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjs0dny3f.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strong_numerator: number = 0;\n    let strong_denominator: number = 0;\n\
    \    extensions.forEach(extension => {\n        let cap: number = 0;\n       \
    \ let sm: number = 0;\n        extension.split('').forEach(letter => {\n     \
    \       if (letter == letter.toUpperCase()) {\n                cap++;\n      \
    \      } else {\n                sm++;\n            }\n        });\n        let\
    \ strength: number = cap - sm;\n        if (strength > strong_numerator / strong_denominator)\
    \ {\n            strongest = extension;\n            strong_numerator = cap;\n\
    \            strong_denominator = sm;\n        }\n    });\n    return class_name\
    \ + '.' + strongest;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp6qhbywi8.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6qhbywi8.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return class_name + \".\" + extensions.sort((x,\
    \ y) => {\n        const cap_x = x.replace(/[^A-Z]/g, \"\").length;\n        const\
    \ sm_x = x.replace(/[^a-z]/g, \"\").length;\n        const cap_y = y.replace(/[^A-Z]/g,\
    \ \"\").length;\n        const sm_y = y.replace(/[^a-z]/g, \"\").length;\n   \
    \     const result = (cap_x - sm_x) - (cap_y - sm_y);\n        return result ==\
    \ 0 ? 1 : result;\n    })[0];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmppumpaetq.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmppumpaetq.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = -1;\n    for (let i\
    \ = 0; i < extensions.length; i++) {\n        let strength: number = extensions[i].split(\"\
    \").filter(c => c.match(/[A-Z]/)).length - extensions[i].split(\"\").filter(c\
    \ => c.match(/[a-z]/)).length;\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\nconsole.log(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Slices.

    '
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_score = 0;\n    let curr_score\
    \ = 0;\n    let max_index = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        for (let j = 0; j < extensions[i].length; j++) {\n            if\
    \ (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                curr_score\
    \ += 1;\n            } else {\n                curr_score -= 1;\n            }\n\
    \        }\n        if (curr_score > max_score) {\n            max_score = curr_score;\n\
    \            max_index = i;\n        }\n        curr_score = 0;\n    }\n    return\
    \ `${class_name}.${extensions[max_index]}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpt091o16v.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt091o16v.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let temp: string;\n    let strength:\
    \ number;\n    let max_strength: number = 0;\n    let max_strength_index: number\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        temp = extensions[i];\n\
    \        strength = 0;\n        for (let j = 0; j < temp.length; j++) {\n    \
    \        if (temp[j] >= 'A' && temp[j] <= 'Z') {\n                strength++;\n\
    \            }\n            else if (temp[j] >= 'a' && temp[j] <= 'z') {\n   \
    \             strength--;\n            }\n        }\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            max_strength_index = i;\n\
    \        }\n    }\n    return `${class_name}.${extensions[max_strength_index]}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpntkldzrg.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpntkldzrg.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let myDict: { [k: string]: number\
    \ } = {};\n    let strongest = 0;\n    let strongestName = \"\";\n    for (let\
    \ item of extensions) {\n        let uppercase = 0;\n        let lowercase = 0;\n\
    \        for (let char of item) {\n            if (char === char.toUpperCase())\
    \ {\n                uppercase++;\n            } else {\n                lowercase++;\n\
    \            }\n        }\n        let strength = uppercase - lowercase;\n   \
    \     myDict[item] = strength;\n        if (strength > strongest) {\n        \
    \    strongest = strength;\n            strongestName = item;\n        }\n   \
    \ }\n    return class_name + \".\" + strongestName;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpdmlatnjc.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdmlatnjc.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_ext: string;\n  \
    \  let strongest_strength: number = 0;\n    let strength: number;\n    let class_name_ext:\
    \ string;\n    let uppercase_count: number;\n    let lowercase_count: number;\n\
    \    let x: number;\n    for (let ext of extensions) {\n        uppercase_count\
    \ = 0;\n        lowercase_count = 0;\n        for (x = 0; x < ext.length; x++)\
    \ {\n            if (ext[x] >= 'A' && ext[x] <= 'Z')\n                uppercase_count++;\n\
    \            else if (ext[x] >= 'a' && ext[x] <= 'z')\n                lowercase_count++;\n\
    \        }\n        strength = uppercase_count - lowercase_count;\n        if\
    \ (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_ext = ext;\n        }\n    }\n    class_name_ext = class_name\
    \ + \".\" + strongest_ext;\n    return class_name_ext;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.undefined'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp28qhs8mx.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmp28qhs8mx.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.undefined',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongestValue: number = 0;\n    extensions.forEach(extension => {\n\
    \        let cap = extension.replace(/[^A-Z]/g, \"\").length;\n        let sm\
    \ = extension.replace(/[^a-z]/g, \"\").length;\n        let strength = cap - sm;\n\
    \        if (strength > strongestValue) {\n            strongest = extension;\n\
    \            strongestValue = strength;\n        }\n    });\n    return class_name\
    \ + \".\" + strongest;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpa1c_ylxt.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa1c_ylxt.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let class_with_extension: string\
    \ = \"\";\n    let strength: number = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension_strength: number = (extensions[i].match(/[A-Z]/g)||[]).length\
    \ - (extensions[i].match(/[a-z]/g)||[]).length;\n        if (extension_strength\
    \ >= strength) {\n            strength = extension_strength;\n            class_with_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return class_with_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__HAHA.-_-'\n\
    \nshould loosely deep-equal\n\n'__HAHA.123'\n    at test (/tmp/tmpv3mb9tyw.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv3mb9tyw.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__HAHA.-_-',\n\
    \  expected: '__HAHA.123',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let _ext = {};\n    let _max =\
    \ -1;\n    let _max_name = \"\";\n    extensions.forEach(e => {\n        let cap\
    \ = 0;\n        let sm = 0;\n        for (let i = 0; i < e.length; i++) {\n  \
    \          if (e[i] >= 'A' && e[i] <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        let _strength\
    \ = cap - sm;\n        if (_strength > _max) {\n            _max = _strength;\n\
    \            _max_name = e;\n        }\n    });\n    return class_name + \".\"\
    \ + _max_name;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp_4pq1t11.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_4pq1t11.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  // your code here\n  let strongest\
    \ = null;\n  let strongest_name = \"\";\n  for (let ext of extensions) {\n   \
    \ let lower = ext.toLowerCase();\n    let upper = ext.toUpperCase();\n    let\
    \ up_count = 0;\n    let low_count = 0;\n    for (let i = 0; i < ext.length; i++)\
    \ {\n      if (ext[i] === upper[i]) {\n        up_count++;\n      } else {\n \
    \       low_count++;\n      }\n    }\n    let difference = up_count - low_count;\n\
    \    if (strongest === null || difference > strongest) {\n      strongest = difference;\n\
    \      strongest_name = ext;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpo5xxp6j2.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo5xxp6j2.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = getStrength(strongest);\n    for (let i\
    \ = 1; i < extensions.length; i++) {\n        let strength: number = getStrength(extensions[i]);\n\
    \        if (strength > strongest_strength) {\n            strongest = extensions[i];\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp8_m8m7u6.ts(19,38): error TS2304: Cannot find name ''getStrength''.

    ../../../../tmp/tmp8_m8m7u6.ts(21,32): error TS2304: Cannot find name ''getStrength''.

    '
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength = extensions.map(ext\
    \ => ({\n        name: ext,\n        strength: ext.split('').reduce((total, letter)\
    \ => total + (letter === letter.toUpperCase() ? 1 : -1), 0)\n    })).sort((a,\
    \ b) => {\n        if (a.strength !== b.strength) {\n            return b.strength\
    \ - a.strength;\n        }\n        return a.name.localeCompare(b.name);\n   \
    \ });\n    return class_name + '.' + strength[0].name;\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\nconsole.log(Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpzj0r1i0n.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzj0r1i0n.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    Slices.SErviNGSliCes

    '
  timestamp: 1660335011
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let extension_name: string = \"\"\
    ;\n  let max_strength: number = -Infinity;\n  extensions.forEach((extension: string):\
    \ void => {\n    let CAP: number = 0;\n    let SM: number = 0;\n    extension.split(\"\
    \").forEach((letter: string): void => {\n      if (letter.match(/[A-Z]/)) {\n\
    \        CAP++;\n      } else if (letter.match(/[a-z]/)) {\n        SM++;\n  \
    \    }\n    });\n    let strength: number = CAP - SM;\n    if (strength > max_strength)\
    \ {\n      max_strength = strength;\n      extension_name = extension;\n    }\n\
    \  });\n  return `${class_name}.${extension_name}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335011
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return class_name + \".\" + extensions.sort((a,\
    \ b) => {\n        let aStr = a.split(\"\").filter(x => /[A-Z]/.test(x)).length\
    \ - a.split(\"\").filter(x => /[a-z]/.test(x)).length;\n        let bStr = b.split(\"\
    \").filter(x => /[A-Z]/.test(x)).length - b.split(\"\").filter(x => /[a-z]/.test(x)).length;\n\
    \        return aStr > bStr ? -1 : aStr < bStr ? 1 : 0;\n    })[0];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335011
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // your code here\n    let strongestExtension:\
    \ string = extensions[0];\n    let strength: number = 0;\n    for (let i: number\
    \ = 0; i < extensions.length; i++) {\n        let CAP: number = 0;\n        let\
    \ SM: number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (isUpperCase(extensions[i][j])) {\n                CAP++;\n\
    \            } else {\n                SM++;\n            }\n        }\n     \
    \   if (CAP - SM > strength) {\n            strength = CAP - SM;\n           \
    \ strongestExtension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongestExtension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpsqwhuaby.ts(25,17): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1660335014
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_strength = -999;\n\
    \    let strongest_extension = '';\n    for (let ext of extensions) {\n      \
    \  let CAP = ext.split('').filter(char => char === char.toUpperCase()).length;\n\
    \        let SM = ext.split('').filter(char => char === char.toLowerCase()).length;\n\
    \        let strength = CAP - SM;\n        if (strength > strongest_strength)\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = ext;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335014
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result = class_name + \".\"\
    \ + extensions[0];\n    let strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let power = 0;\n        for (let k = 0; k < extensions[i].length;\
    \ k++) {\n            if (extensions[i][k] == extensions[i][k].toUpperCase())\
    \ {\n                power += 1;\n            }\n            else {\n        \
    \        power -= 1;\n            }\n        }\n        if (power > strength)\
    \ {\n            strength = power;\n            result = class_name + \".\" +\
    \ extensions[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpngmjy9h3.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpngmjy9h3.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335014
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = {\n        name:\
    \ extensions[0],\n        strength: calculateStrength(extensions[0])\n    };\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        let strength = calculateStrength(extensions[i]);\n\
    \        if (strength > strongest.strength) {\n            strongest.name = extensions[i];\n\
    \            strongest.strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest.name;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpeqwnb1m6.ts(20,19): error TS2304: Cannot find name ''calculateStrength''.

    ../../../../tmp/tmpeqwnb1m6.ts(23,24): error TS2304: Cannot find name ''calculateStrength''.

    '
  timestamp: 1660335014
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -Infinity;\n\
    \    let strongest = \"\";\n    for (let e of extensions) {\n        let cap =\
    \ 0;\n        let sm = 0;\n        for (let c of e) {\n            if (c === c.toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        let strength = cap - sm;\n        if (strength\
    \ > max_strength) {\n            max_strength = strength;\n            strongest\
    \ = e;\n        }\n    }\n    return class_name + \".\" + strongest;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpykb130th.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpykb130th.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Write your code here.\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpneps_o3y.ts(17,73): error TS2355: A function whose declared
    type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660335014
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Your code goes here.\n    return\
    \ \"\";\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpakj_i1tz.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpakj_i1tz.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    const extensionsStrength: number[]\
    \ = extensions.map(e => {\n        let CAP = e.match(/[A-Z]/g)?.length || 0;\n\
    \        let SM = e.match(/[a-z]/g)?.length || 0;\n        return CAP - SM;\n\
    \    });\n    let maxStrength: number = Math.max(...extensionsStrength);\n   \
    \ let index: number = extensionsStrength.indexOf(maxStrength);\n    return `${class_name}.${extensions[index]}`;\n\
    }\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\n\
    console.log(Strongest_Extension(\"my_class\", [\"SErviNGSliCes\", \"Cheese\",\
    \ \"StuFfed\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'my_class.AA

    my_class.SErviNGSliCes

    '
  timestamp: 1660335015
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strenght = 0;\n    let\
    \ strongest_extension = '';\n    for (let i = 0; i < extensions.length; i++) {\n\
    \        let strenght = count_upper_case(extensions[i]) - count_lower_case(extensions[i]);\n\
    \        if (strenght > max_strenght) {\n            max_strenght = strenght;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + '.' + strongest_extension;\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjq79gc57.ts(21,24): error TS2304: Cannot find name ''count_upper_case''.

    ../../../../tmp/tmpjq79gc57.ts(21,58): error TS2304: Cannot find name ''count_lower_case''.

    '
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_ext = extensions[0];\n\
    \  let max_cap = 0;\n  let min_sm = 0;\n  let strongest_strength = 0;\n  for (let\
    \ ext of extensions) {\n    let cap = 0;\n    let sm = 0;\n    for (let ch of\
    \ ext) {\n      if (ch >= 'A' && ch <= 'Z') {\n        cap++;\n      } else {\n\
    \        sm++;\n      }\n    }\n    let strength = cap - sm;\n    if (strength\
    \ > strongest_strength) {\n      strongest_strength = strength;\n      strongest_ext\
    \ = ext;\n    }\n  }\n  return class_name + \".\" + strongest_ext;\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpv9kbs1xu.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv9kbs1xu.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    if (extensions.length === 0) {\n\
    \        return class_name;\n    }\n    let strong_ext = extensions[0];\n    let\
    \ strong_num = calc_strength(extensions[0]);\n    extensions.forEach(element =>\
    \ {\n        let strength = calc_strength(element);\n        if (strength > strong_num)\
    \ {\n            strong_num = strength;\n            strong_ext = element;\n \
    \       }\n    });\n    return class_name + \".\" + strong_ext;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmphv8w8eir.ts(22,22): error TS2304: Cannot find name ''calc_strength''.

    ../../../../tmp/tmphv8w8eir.ts(24,24): error TS2304: Cannot find name ''calc_strength''.

    '
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = '';\n    let strongest_extension_score: number = 0;\n    let extension_score:\
    \ number = 0;\n    for (let extension of extensions) {\n        extension_score\
    \ = extension.replace(/[^A-Z]/g, '').length - extension.replace(/[^a-z]/g, '').length;\n\
    \        if (extension_score > strongest_extension_score) {\n            strongest_extension_score\
    \ = extension_score;\n            strongest_extension = extension;\n        }\n\
    \    }\n    return class_name + '.' + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgejh9o43.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgejh9o43.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return class_name + '.' + extensions[extensions.reduce((iMax,\
    \ x, i, arr) => x.replace(/[^A-Z]/g, '').length - x.replace(/[^a-z]/g, '').length\
    \ > arr[iMax].replace(/[^A-Z]/g, '').length - arr[iMax].replace(/[^a-z]/g, '').length\
    \ ? i : iMax, 0)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest: number = 0;\n  let\
    \ ext_name: string = \"\";\n  let result: string = \"\";\n  for (let ext of extensions)\
    \ {\n    let small_letters: number = ext.match(/[a-z]/g).length;\n    let capital_letters:\
    \ number = ext.match(/[A-Z]/g).length;\n    let strength: number = capital_letters\
    \ - small_letters;\n    if (strength > strongest) {\n      strongest = strength;\n\
    \      ext_name = ext;\n    }\n  }\n  result = class_name + \".\" + ext_name;\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpt3lvowhq.js:23\n        let capital_letters = ext.match(/[A-Z]/g).length;\n\
    \                                                 ^\n\nTypeError: Cannot read\
    \ properties of null (reading 'length')\n    at Strongest_Extension (/tmp/tmpt3lvowhq.js:23:50)\n\
    \    at test (/tmp/tmpt3lvowhq.js:37:22)\n    at Object.<anonymous> (/tmp/tmpt3lvowhq.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = 0;\n    let\
    \ max_ext = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n       \
    \ const ext = extensions[i];\n        let cap = 0;\n        let sm = 0;\n    \
    \    for (let j = 0; j < ext.length; j++) {\n            const char = ext[j];\n\
    \            if (char.toUpperCase() === char) {\n                cap++;\n    \
    \        } else {\n                sm++;\n            }\n        }\n        const\
    \ strength = cap - sm;\n        if (strength > max_strength) {\n            max_strength\
    \ = strength;\n            max_ext = ext;\n        }\n    }\n    return class_name\
    \ + \".\" + max_ext;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpomvegnhj.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpomvegnhj.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result = '';\n    let result_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let c of extension) {\n            if (c.match(/[A-Z]/)) {\n    \
    \            strength++;\n            } else if (c.match(/[a-z]/)) {\n       \
    \         strength--;\n            }\n        }\n        if (strength > result_strength)\
    \ {\n            result = extension;\n            result_strength = strength;\n\
    \        }\n    }\n    return class_name + '.' + result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp41lhzqz_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp41lhzqz_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let res = extensions.reduce((a,b)\
    \ => {\n        let res = 0\n        for (let c of b) {\n            if (c ===\
    \ c.toUpperCase()) {\n                res += 1\n            } else {\n       \
    \         res -= 1\n            }\n        }\n        return res > a.strength\
    \ ? {strength: res, name: b} : a\n    }, {strength: 0, name: extensions[0]})\n\
    \    return `${class_name}.${res.name}`\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpm1ooqlpo.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm1ooqlpo.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjs0dny3f.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjs0dny3f.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength = extensions.map(str\
    \ => str.split('').reduce((acc, val) => acc + (val.match(/[A-Z]/) ? 1 : -1), 0));\n\
    \    let max_strength = Math.max(...strength);\n    let i = strength.indexOf(max_strength);\n\
    \    return `${class_name}.${extensions[i]}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpvanq5rei.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvanq5rei.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongestExtension: string =\
    \ extensions[0];\n  let strongestStrength: number = 0;\n  for (let extension of\
    \ extensions) {\n    let currentStrength: number = 0;\n    for (let character\
    \ of extension) {\n      if (character.match(/[A-Z]/)) {\n        currentStrength\
    \ += 1;\n      } else if (character.match(/[a-z]/)) {\n        currentStrength\
    \ -= 1;\n      }\n    }\n    if (currentStrength > strongestStrength) {\n    \
    \  strongestStrength = currentStrength;\n      strongestExtension = extension;\n\
    \    }\n  }\n  return `${class_name}.${strongestExtension}`;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmptkp5lumj.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmptkp5lumj.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return class_name + \".\" + extensions[extensions.reduce((s,\
    \ cur, i) => {\n        let str = cur.replace(/[a-z]/g, \"\").length - cur.replace(/[A-Z]/g,\
    \ \"\").length;\n        if (str > s.str) return { str, i };\n        else return\
    \ s;\n    }, { str: Number.MIN_SAFE_INTEGER, i: 0 }).i];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = '';\n\
    \    let count_cap_strongest_extension = 0;\n    let count_sm_strongest_extension\
    \ = 0;\n    let count_cap_current_extension = 0;\n    let count_sm_current_extension\
    \ = 0;\n    extensions.forEach(extension => {\n        count_cap_current_extension\
    \ = 0;\n        count_sm_current_extension = 0;\n        extension.split('').forEach(letter\
    \ => {\n            if (letter.match(/[A-Z]/)) {\n                count_cap_current_extension++;\n\
    \            } else if (letter.match(/[a-z]/)) {\n                count_sm_current_extension++;\n\
    \            }\n        });\n        if (count_cap_current_extension - count_sm_current_extension\
    \ > count_cap_strongest_extension - count_sm_strongest_extension) {\n        \
    \    count_cap_strongest_extension = count_cap_current_extension;\n          \
    \  count_sm_strongest_extension = count_sm_current_extension;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return class_name + '.' + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpbkedg5fi.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbkedg5fi.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result: string = class_name\
    \ + '.' + extensions[0];\n    let CAP: number;\n    let SM: number;\n    let strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        CAP\
    \ = 0;\n        SM = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                CAP++;\n            } else {\n                SM++;\n       \
    \     }\n        }\n        if (CAP - SM > strength) {\n            strength =\
    \ CAP - SM;\n            result = class_name + '.' + extensions[i];\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpddwgjwzw.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpddwgjwzw.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335015
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strong: number = 0;\n    let\
    \ res: string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n   \
    \     let counter1: number = 0;\n        let counter2: number = 0;\n        for\
    \ (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ == extensions[i][j].toUpperCase()) {\n                counter1++;\n        \
    \    }\n            else {\n                counter2++;\n            }\n     \
    \   }\n        if (counter1 - counter2 > strong) {\n            strong = counter1\
    \ - counter2;\n            res = class_name + \".\" + extensions[i];\n       \
    \ }\n    }\n    return res;\n}\nconsole.log(Strongest_Extension(\"my_class\",\
    \ [\"AA\", \"Be\", \"CC\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp3467ku2c.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3467ku2c.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    '
  timestamp: 1660335015
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let bestRatio = -Infinity;\n  \
    \  let bestExt = \"\";\n    extensions.forEach(function (ext) {\n        let cap\
    \ = ext.match(/[A-Z]/g);\n        let sm = ext.match(/[a-z]/g);\n        let ratio\
    \ = cap === null ? 0 : cap.length;\n        ratio -= sm === null ? 0 : sm.length;\n\
    \        if (ratio > bestRatio) {\n            bestRatio = ratio;\n          \
    \  bestExt = ext;\n        }\n    });\n    return class_name + \".\" + bestExt;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335018
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = \"\";\n    let\
    \ strongest_strength = 0;\n    for (let extension of extensions) {\n        let\
    \ strength = 0;\n        for (let char of extension) {\n            if (char ===\
    \ char.toUpperCase()) {\n                strength++;\n            } else {\n \
    \               strength--;\n            }\n        }\n        if (strength >\
    \ strongest_strength) {\n            strongest = extension;\n            strongest_strength\
    \ = strength;\n        }\n    }\n    return class_name + \".\" + strongest;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpixhxtegs.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpixhxtegs.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335018
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = -1;\n    let\
    \ max_strength_extension = \"\";\n    extensions.forEach(element => {\n      \
    \  let strength = 0;\n        for (let index = 0; index < element.length; index++)\
    \ {\n            if (element[index] >= 'A' && element[index] <= 'Z')\n       \
    \         strength++;\n            else\n                strength--;\n       \
    \ }\n        if (strength > max_strength) {\n            max_strength = strength;\n\
    \            max_strength_extension = element;\n        }\n    });\n    return\
    \ class_name + \".\" + max_strength_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp4h_1zekr.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4h_1zekr.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335018
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var strength: number[] = [];\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var cap = 0;\n        var sm = 0;\n        for (var j = 0; j\
    \ < extensions[i].length; j++) {\n            if (letters.indexOf(extensions[i][j])\
    \ !== -1) {\n                sm += 1;\n            } else {\n                cap\
    \ += 1;\n            }\n        }\n        strength.push(cap - sm);\n    }\n \
    \   var index = 0;\n    var max = strength[0];\n    for (var i = 1; i < strength.length;\
    \ i++) {\n        if (strength[i] > max) {\n            max = strength[i];\n \
    \           index = i;\n        }\n    }\n    return class_name + \".\" + extensions[index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpepbf9vmc.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpepbf9vmc.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335018
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = \"\";\n    let strongest_extension_strength: number = 0;\n    extensions.forEach(element\
    \ => {\n        let strength: number = get_strength(element);\n        if (strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = element;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprl2uchkk.ts(21,32): error TS2304: Cannot find name ''get_strength''.

    '
  timestamp: 1660335017
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  return '';\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpinz7bky1.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpinz7bky1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335018
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = extensions[0];\n\
    \    let best_extension_strength = extension_strength(strongest_extension);\n\
    \    for (let i = 1; i < extensions.length; i++) {\n        const extension =\
    \ extensions[i];\n        const extension_strength = extension_strength(extension);\n\
    \        if (extension_strength > best_extension_strength) {\n            strongest_extension\
    \ = extension;\n            best_extension_strength = extension_strength;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp6kdez_0v.ts(19,35): error TS2304: Cannot find name ''extension_strength''.

    ../../../../tmp/tmp6kdez_0v.ts(22,36): error TS2448: Block-scoped variable ''extension_strength''
    used before its declaration.

    '
  timestamp: 1660335018
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let st_ext: number = 0;\n    let\
    \ st_ext_name: string = \"\";\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        const ext = extensions[i];\n        let cap = 0;\n        let sm\
    \ = 0;\n        for (let j = 0; j < ext.length; j++) {\n            if (ext[j]\
    \ === ext[j].toUpperCase()) {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        if (cap - sm > st_ext)\
    \ {\n            st_ext = cap - sm;\n            st_ext_name = ext;\n        }\n\
    \    }\n    return class_name + \".\" + st_ext_name;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpzgtkm868.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzgtkm868.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335018
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength_array: number[] =\
    \ [];\n    let pos: number = 0;\n    let max: number = 0;\n    let index: number\
    \ = 0;\n    let result: string = \"\";\n    extensions.forEach(element => {\n\
    \        strength_array.push(GetStrength(element));\n    });\n    strength_array.forEach(element\
    \ => {\n        if (element > max) {\n            max = element;\n           \
    \ index = pos;\n        }\n        pos++;\n    });\n    result = class_name +\
    \ \".\" + extensions[index];\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7fz7g3_y.ts(24,29): error TS2304: Cannot find name ''GetStrength''.

    '
  timestamp: 1660335018
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongestExtension = extensions[0];\n\
    \    let className = class_name.replace(/_/g, \"\");\n    for (let i = 1; i <\
    \ extensions.length; i++) {\n        if (Count_Upper_Case(strongestExtension)\
    \ - Count_Lower_Case(strongestExtension) < Count_Upper_Case(extensions[i]) - Count_Lower_Case(extensions[i]))\
    \ {\n            strongestExtension = extensions[i];\n        }\n    }\n    return\
    \ `${className}.${strongestExtension}`;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp5r8fdqux.ts(21,13): error TS2304: Cannot find name ''Count_Upper_Case''.

    ../../../../tmp/tmp5r8fdqux.ts(21,52): error TS2304: Cannot find name ''Count_Lower_Case''.

    ../../../../tmp/tmp5r8fdqux.ts(21,91): error TS2304: Cannot find name ''Count_Upper_Case''.

    ../../../../tmp/tmp5r8fdqux.ts(21,125): error TS2304: Cannot find name ''Count_Lower_Case''.

    '
  timestamp: 1660335018
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    const highScore: number = extensions.reduce((a,\
    \ e) => {\n        const score: number = e.split('').reduce((a, c) => a + ((c.toUpperCase()\
    \ === c) ? 1 : -1), 0);\n        return score > a ? score : a;\n    }, 0);\n \
    \   return class_name + '.' + extensions.find(e => {\n        const score: number\
    \ = e.split('').reduce((a, c) => a + ((c.toUpperCase() === c) ? 1 : -1), 0);\n\
    \        return score === highScore;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0qkpka5o.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0qkpka5o.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strong_ext: string = \"\";\n\
    \    let ext_strength: number = 0;\n    let upper: number = 0;\n    let lower:\
    \ number = 0;\n    let strength: number = 0;\n    for (let i: number = 0; i <\
    \ extensions.length; i++) {\n        upper = 0;\n        lower = 0;\n        for\
    \ (let j: number = 0; j < extensions[i].length; j++) {\n            if ((extensions[i].charCodeAt(j)\
    \ >= 65) && (extensions[i].charCodeAt(j) <= 90)) {\n                upper++;\n\
    \            }\n            if ((extensions[i].charCodeAt(j) >= 97) && (extensions[i].charCodeAt(j)\
    \ <= 122)) {\n                lower++;\n            }\n        }\n        strength\
    \ = upper - lower;\n        if (strength > ext_strength) {\n            ext_strength\
    \ = strength;\n            strong_ext = extensions[i];\n        }\n    }\n   \
    \ return class_name + \".\" + strong_ext;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpl_chwhgv.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl_chwhgv.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // ===>\n    var strength: number[]\
    \ = [];\n    for (var i = 0; i < extensions.length; i++) {\n        var count_lowercase:\
    \ number = 0;\n        var count_uppercase: number = 0;\n        for (var j =\
    \ 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                count_uppercase++;\n            }\n            else {\n \
    \               count_lowercase++;\n            }\n        }\n        strength.push(count_uppercase\
    \ - count_lowercase);\n    }\n    // Khi ch\u1EC9 c\xF3 1 extension\n    if (strength.length\
    \ == 1) {\n        return class_name + \".\" + extensions[0];\n    }\n    // Khi\
    \ c\xF3 nhi\u1EC1u h\u01A1n 1 extension\n    else {\n        var max: number =\
    \ strength[0];\n        var index: number = 0;\n        for (var i = 1; i < strength.length;\
    \ i++) {\n            if (max < strength[i]) {\n                max = strength[i];\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];\n    }\n}\nconsole.log(Strongest_Extension(\"Dwarves\"\
    , [\"DwarvesCLASS\", \"DwarvesDB\", \"DwarvesView\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\nconsole.log(Strongest_Extension(\"my_class\"\
    , [\"AA\", \"aB\", \"CC\"]));\nconsole.log(Strongest_Extension(\"Dwarves\", [\"\
    DwarvesView\", \"DwarvesCLASS\", \"DwarvesDB\"]));\nconsole.log(Strongest_Extension(\"\
    Dwarves\", [\"DwarvesView\", \"DwarvesCLASS\", \"DwarvesDB\", \"DwarvesDB2\"]));\n\
    console.log(Strongest_Extension(\"Dwarves\", [\"DwarvesCLASS\", \"DwarvesDB\"\
    , \"DwarvesView\", \"DwarvesView2\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpv2rg9s7s.js:61:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv2rg9s7s.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Dwarves.DwarvesCLASS

    my_class.AA

    my_class.AA

    Dwarves.DwarvesCLASS

    Dwarves.DwarvesCLASS

    Dwarves.DwarvesCLASS

    '
  timestamp: 1660335019
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest: string = \"\";\n \
    \ let strongest_cap_sm: number = 0;\n  extensions.forEach(element => {\n    let\
    \ cap_sm: number = count_cap_sm(element);\n    if (cap_sm > strongest_cap_sm)\
    \ {\n      strongest = element;\n      strongest_cap_sm = cap_sm;\n    }\n  });\n\
    \  return class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpnt1mr2rq.ts(21,26): error TS2304: Cannot find name ''count_cap_sm''.

    '
  timestamp: 1660335018
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength: number = 0;\n   \
    \ let ans: string = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n\
    \        let cap: number = 0;\n        let sm: number = 0;\n        for (let j\
    \ = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] >= 'A'\
    \ && extensions[i][j] <= 'Z') {\n                cap++;\n            }\n     \
    \       else {\n                sm++;\n            }\n        }\n        if (cap\
    \ - sm > strength) {\n            strength = cap - sm;\n            ans = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + ans;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp8m1ybi9h.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8m1ybi9h.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var result: { name: string, strength:\
    \ number } = { name: \"\", strength: 0 };\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var ext = extensions[i];\n        var strength = ext.match(/[A-Z]/g).length\
    \ - ext.match(/[a-z]/g).length;\n        if (strength > result.strength) {\n \
    \           result.name = ext;\n            result.strength = strength;\n    \
    \    }\n    }\n    return class_name + \".\" + result.name;\n}\n\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_ni69u5t.js:21\n        var strength = ext.match(/[A-Z]/g).length\
    \ - ext.match(/[a-z]/g).length;\n                                          ^\n\
    \nTypeError: Cannot read properties of null (reading 'length')\n    at Strongest_Extension\
    \ (/tmp/tmp_ni69u5t.js:21:43)\n    at test (/tmp/tmp_ni69u5t.js:33:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ni69u5t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let min = Number.MAX_VALUE;\n \
    \   let min_index = 0;\n    let min_name = '';\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        const strength = strength_of_extension(extensions[i]);\n   \
    \     if (strength < min) {\n            min = strength;\n            min_index\
    \ = i;\n            min_name = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + min_name;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0h0f70d1.ts(22,26): error TS2552: Cannot find name ''strength_of_extension''.
    Did you mean ''Strongest_Extension''?

    '
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    extensions.forEach(extension => {\n  \
    \      let caps = extension.match(/[A-Z]/g).length;\n        let sms = extension.match(/[a-z]/g).length;\n\
    \        let strength = caps - sms;\n        if (strength >= strongest_strength)\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph9y_nm6c.js:21\n        let caps = extension.match(/[A-Z]/g).length;\n\
    \                                            ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at /tmp/tmph9y_nm6c.js:21:45\n    at Array.forEach\
    \ (<anonymous>)\n    at Strongest_Extension (/tmp/tmph9y_nm6c.js:20:16)\n    at\
    \ test (/tmp/tmph9y_nm6c.js:35:22)\n    at Object.<anonymous> (/tmp/tmph9y_nm6c.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_extension: string = null;\n\
    \    let max_strength: number = 0;\n    extensions.forEach(extension => {\n  \
    \      let current_strength: number = 0;\n        for (let i = 0; i < extension.length;\
    \ i++) {\n            if (extension[i] === extension[i].toUpperCase()) {\n   \
    \             current_strength++;\n            } else {\n                current_strength--;\n\
    \            }\n        }\n        if (current_strength > max_strength) {\n  \
    \          max_strength = current_strength;\n            max_extension = extension;\n\
    \        }\n    });\n    return class_name + \".\" + max_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpzsh1834s.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzsh1834s.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_extension_strength = -1;\n    for (let extension of extensions)\
    \ {\n        let upper = extension.replace(/[^A-Z]/g, \"\").length;\n        let\
    \ lower = extension.replace(/[^a-z]/g, \"\").length;\n        let extension_strength\
    \ = upper - lower;\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let sortedExtensions = extensions.sort((a,\
    \ b) => \n    ((a.match(/[A-Z]/g) || []).length - (a.match(/[a-z]/g) || []).length)\
    \ - \n    ((b.match(/[A-Z]/g) || []).length - (b.match(/[a-z]/g) || []).length));\n\
    \    return class_name + \".\" + sortedExtensions[sortedExtensions.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__HAHA.-_-'\n\
    \nshould loosely deep-equal\n\n'__HAHA.123'\n    at test (/tmp/tmp61tszx3n.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp61tszx3n.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__HAHA.-_-',\n\
    \  expected: '__HAHA.123',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let temp: number[] = [];\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        let counter: number = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                counter++;\n        \
    \    }\n        }\n        temp.push(counter - extensions[i].length);\n    }\n\
    \    let max_value: number = temp[0];\n    let max_index: number = 0;\n    for\
    \ (let i = 0; i < temp.length; i++) {\n        if (temp[i] > max_value) {\n  \
    \          max_value = temp[i];\n            max_index = i;\n        }\n    }\n\
    \    return class_name + \".\" + extensions[max_index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpxn1jqovg.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxn1jqovg.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return \"\";\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpsg__9x89.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsg__9x89.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335019
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string;\n\
    \    let strongest_extension_strength: number = 0;\n    let current_extension_strength:\
    \ number;\n    for (let i = 0; i < extensions.length; i++) {\n        current_extension_strength\
    \ = extensions[i].replace(/[^A-Z]/g, \"\").length - extensions[i].replace(/[^a-z]/g,\
    \ \"\").length;\n        if (current_extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = current_extension_strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.undefined'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpivqj_lv5.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpivqj_lv5.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.undefined',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335021
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_strength = {\n        \"\
    strength\": -2,\n        \"strength_name\": null\n    };\n    for (let name of\
    \ extensions) {\n        let strength = 0;\n        for (let char of name) {\n\
    \            if (char == char.toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > max_strength.strength) {\n            max_strength.strength\
    \ = strength;\n            max_strength.strength_name = name;\n        }\n   \
    \ }\n    return class_name + \".\" + max_strength.strength_name;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp8n7u04aj.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8n7u04aj.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335021
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let cap: number = 0;\n    let sm:\
    \ number = 0;\n    let strength: number = 0;\n    let strongest: string = \"\"\
    ;\n    for (let i: number = 0; i < extensions.length; i++) {\n        cap = getCAP(extensions[i]);\n\
    \        sm = getSM(extensions[i]);\n        if (cap - sm > strength) {\n    \
    \        strength = cap - sm;\n            strongest = extensions[i];\n      \
    \  }\n    }\n    return `${class_name}.${strongest}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmppp0z066n.ts(23,15): error TS2304: Cannot find name ''getCAP''.

    ../../../../tmp/tmppp0z066n.ts(24,14): error TS2304: Cannot find name ''getSM''.

    '
  timestamp: 1660335021
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength_of_extensions: number[]\
    \ = [];\n    let strongest_extension_index: number = 0;\n    let strength_of_strongest_extension:\
    \ number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let CAP: number\
    \ = 0;\n    let SM: number = 0;\n    let extension_strength: number = 0;\n   \
    \ for (i = 0; i < extensions.length; i++) {\n        CAP = 0;\n        SM = 0;\n\
    \        for (j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                CAP += 1;\n          \
    \  }\n            else {\n                SM += 1;\n            }\n        }\n\
    \        extension_strength = CAP - SM;\n        strength_of_extensions.push(extension_strength);\n\
    \    }\n    for (i = 0; i < strength_of_extensions.length; i++) {\n        if\
    \ (strength_of_extensions[i] > strength_of_strongest_extension) {\n          \
    \  strength_of_strongest_extension = strength_of_extensions[i];\n            strongest_extension_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[strongest_extension_index];\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp28y9p9_8.js:51:12)\n\
    \    at Object.<anonymous> (/tmp/tmp28y9p9_8.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335021
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let maxStrength = -Infinity;\n  let\
    \ maxCap = -Infinity;\n  let maxSm = -Infinity;\n  let strongestExtension = '';\n\
    \  extensions.forEach(extension => {\n    let cap = extension.match(/[A-Z]/g);\n\
    \    let sm = extension.match(/[a-z]/g);\n    let strength = (cap ? cap.length\
    \ : 0) - (sm ? sm.length : 0);\n    if (strength > maxStrength) {\n      maxStrength\
    \ = strength;\n      maxCap = cap ? cap.length : 0;\n      maxSm = sm ? sm.length\
    \ : 0;\n      strongestExtension = extension;\n    } else if (strength === maxStrength)\
    \ {\n      if (cap ? cap.length : 0 > maxCap) {\n        maxStrength = strength;\n\
    \        maxCap = cap ? cap.length : 0;\n        maxSm = sm ? sm.length : 0;\n\
    \        strongestExtension = extension;\n      } else if (cap ? cap.length :\
    \ 0 === maxCap) {\n        if (sm ? sm.length : 0 < maxSm) {\n          maxStrength\
    \ = strength;\n          maxCap = cap ? cap.length : 0;\n          maxSm = sm\
    \ ? sm.length : 0;\n          strongestExtension = extension;\n        }\n   \
    \   }\n    }\n  });\n  return `${class_name}.${strongestExtension}`;\n}\n\nconsole.log(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Sp.Bb'\n\nshould\
    \ loosely deep-equal\n\n'Sp.671235'\n    at test (/tmp/tmptt2e1kvh.js:64:12)\n\
    \    at Object.<anonymous> (/tmp/tmptt2e1kvh.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Sp.Bb',\n\
    \  expected: 'Sp.671235',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Slices.SErviNGSliCes

    my_class.CC

    '
  timestamp: 1660335022
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max: number = -Infinity;\n\
    \    let strongest: string = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        const strength: number = extensions[i].replace(/[^A-Z]/g, \"\
    \").length - extensions[i].replace(/[^a-z]/g, \"\").length;\n        if (strength\
    \ > max) {\n            max = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\nconsole.log(Strongest_Extension(\"my_class\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"aBcDeFg\", \"aBcDeFgH\", \"aBc\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AAA\", \"aa\", \"aaaa\", \"aaaaa\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AAAAAA\", \"aaaaaa\", \"aaaaaA\", \"aaaa\", \"Aaaaa\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"wqerqw\", \"qewq\", \"qwqe\", \"qwq\", \"q\", \"qwqwqwq\", \"qwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwqwq\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmptgzqmchu.ts(34,265): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmptgzqmchu.ts(35,1): error TS1005: '','' expected.

    ../../../../tmp/tmptgzqmchu.ts(35,9): error TS1005: '','' expected.

    '
  timestamp: 1660335021
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extStr = extensions.map(ext\
    \ => {\n        let uppercase = ext.match(/[A-Z]/g) || [];\n        let lowercase\
    \ = ext.match(/[a-z]/g) || [];\n        return { ext, strength: uppercase.length\
    \ - lowercase.length };\n    });\n    let strongest = extStr.reduce((max, curr)\
    \ => {\n        return (curr.strength > max.strength) ? curr : max;\n    }, {\
    \ ext: \"\", strength: 0 });\n    return `${class_name}.${strongest.ext}`;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprn4nstbj.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmprn4nstbj.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: number = -Infinity;\n\
    \    let strongest_extension: string = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let SM: number = 0;\n        let CAP: number = 0;\n        for\
    \ (let char of extensions[i]) {\n            if (char.match(/[a-z]/i)) {\n   \
    \             if (char.match(/[A-Z]/i)) CAP++;\n                else SM++;\n \
    \           }\n        }\n        if (CAP - SM > strongest) {\n            strongest\
    \ = CAP - SM;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.nothing'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpa8bvja3c.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa8bvja3c.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.nothing',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result: string = class_name;\n\
    \    let strength: number = 0;\n    for (let extension of extensions) {\n    \
    \    let cap_count: number = 0;\n        let sm_count: number = 0;\n        for\
    \ (let c of extension) {\n            if (c === c.toUpperCase()) {\n         \
    \       cap_count++;\n            } else {\n                sm_count++;\n    \
    \        }\n        }\n        let extension_strength: number = cap_count - sm_count;\n\
    \        if (extension_strength > strength) {\n            strength = extension_strength;\n\
    \            result = `${class_name}.${extension}`;\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\"]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpd3rk7g5h.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd3rk7g5h.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    '
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength: number[] = [];\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let cap: number =\
    \ 0;\n        let sm: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        strength.push(cap - sm);\n    }\n    let highest:\
    \ number = strength[0];\n    let index: number = 0;\n    for (let i = 0; i < strength.length;\
    \ i++) {\n        if (strength[i] > highest) {\n            highest = strength[i];\n\
    \            index = i;\n        }\n    }\n    return class_name + \".\" + extensions[index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7u0hjc83.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7u0hjc83.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = [0, 0];\n    for\
    \ (let i = 0; i < extensions.length; i++) {\n        const CAP = extensions[i].replace(/[^A-Z]/g,\
    \ \"\").length;\n        const SM = extensions[i].replace(/[^a-z]/g, \"\").length;\n\
    \        const strength = CAP - SM;\n        if (strength > strongest[0]) {\n\
    \            strongest = [strength, i];\n        }\n    }\n    return `${class_name}.${extensions[strongest[1]]}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpdxhjs9cl.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdxhjs9cl.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335022
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strongest: number = -99999;\n\
    \    var strongest_index: number = -1;\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var current_extension: string = extensions[i];\n        var\
    \ current_strongest: number = 0;\n        for (var j = 0; j < current_extension.length;\
    \ j++) {\n            var current_char: string = current_extension[j];\n     \
    \       if (current_char.match(/[A-Z]/g)) {\n                current_strongest\
    \ += 1;\n            } else if (current_char.match(/[a-z]/g)) {\n            \
    \    current_strongest -= 1;\n            }\n        }\n        if (current_strongest\
    \ > strongest) {\n            strongest = current_strongest;\n            strongest_index\
    \ = i;\n        }\n    }\n    return class_name + \".\" + extensions[strongest_index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpjs0dny3f.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjs0dny3f.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335011
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strength = 0;\n    for (let extension of extensions) {\n        let\
    \ CAP = 0;\n        let SM = 0;\n        for (let letter of extension) {\n   \
    \         if (letter == letter.toUpperCase()) {\n                CAP++;\n    \
    \        } else {\n                SM++;\n            }\n        }\n        if\
    \ (CAP - SM > strength) {\n            strength = CAP - SM;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\n\
    console.log(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"]));\nconsole.log(Strongest_Extension(\"Totoro\", [\"a\",\"aa\",\"AAA\"\
    , \"Aaa\"]));\nconsole.log(Strongest_Extension(\"Totoro\", [\"AAA\",\"aa\",\"\
    a\", \"Aaa\"]));\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"BB\"\
    , \"Bb\"]));\nconsole.log(Strongest_Extension(\"my_class\", [\"BB\", \"BB\", \"\
    Bb\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgtc1gvuz.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgtc1gvuz.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    Slices.

    Totoro.AAA

    Totoro.AAA

    my_class.AA

    my_class.BB

    '
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strongest_extension: number\
    \ = -Infinity;\n    var strongest_extension_name: string = null;\n    for (var\
    \ i = 0; i < extensions.length; i++) {\n        var cap = 0;\n        var sm =\
    \ 0;\n        for (var j = 0; j < extensions[i].length; j++) {\n            if\
    \ (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   var strength = cap - sm;\n        if (strength > strongest_extension) {\n\
    \            strongest_extension = strength;\n            strongest_extension_name\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp5_z_awzk.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5_z_awzk.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335023
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Determine the strength of each\
    \ extension\n    var strength: number[] = [];\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var cap = 0;\n        var sm = 0;\n        for (var j = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        strength.push(cap - sm);\n    }\n    // Find the\
    \ strongest extension\n    var max: number = strength[0];\n    var max_index:\
    \ number = 0;\n    for (var i = 1; i < strength.length; i++) {\n        if (strength[i]\
    \ > max) {\n            max = strength[i];\n            max_index = i;\n     \
    \   }\n    }\n    return class_name + \".\" + extensions[max_index];\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxekbs0mb.js:50:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxekbs0mb.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    '
  timestamp: 1660335022
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = {val: -Infinity,\
    \ name: null};\n    for (let ext of extensions) {\n        let u = ext.replace(/[^A-Z]/g,\
    \ '').length;\n        let l = ext.replace(/[^a-z]/g, '').length;\n        let\
    \ val = u - l;\n        if (val > strongest.val) {\n            strongest.val\
    \ = val;\n            strongest.name = ext;\n        }\n    }\n    return class_name\
    \ + '.' + strongest.name;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335022
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = \"\";\n\
    \    let strongest_strength: number = 0;\n    for (let ext of extensions) {\n\
    \        let uppers: number = 0;\n        let lowers: number = 0;\n        for\
    \ (let letter of ext) {\n            if (letter.toUpperCase() === letter) {\n\
    \                uppers++;\n            } else {\n                lowers++;\n\
    \            }\n        }\n        let strength: number = uppers - lowers;\n \
    \       if (strength > strongest_strength) {\n            strongest = ext;\n \
    \           strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp406qsvi1.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp406qsvi1.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335023
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max_cap = 0;\n    let max_sm\
    \ = 0;\n    let max_strength = 0;\n    let max_strength_name = '';\n    for (let\
    \ extension of extensions) {\n        let cap = 0;\n        let sm = 0;\n    \
    \    for (let letter of extension) {\n            if (/[A-Z]/.test(letter)) {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        let strength = cap - sm;\n        if (strength > max_strength)\
    \ {\n            max_strength = strength;\n            max_strength_name = extension;\n\
    \        }\n    }\n    return class_name + '.' + max_strength_name;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp13ue7xro.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp13ue7xro.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335023
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string;\n\
    \    let strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let current_strength: number = 0;\n        for (let j: number\
    \ = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] >= 'A'\
    \ && extensions[i][j] <= 'Z') {\n                current_strength++;\n       \
    \     } else {\n                current_strength--;\n            }\n        }\n\
    \        if (current_strength > strength) {\n            strength = current_strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmphsyurf4v.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmphsyurf4v.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335022
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  //The first thing we will do is to\
    \ find the strongest extension.\n  let strongest: string = extensions[0];\n  let\
    \ strongest_strength: number = -1;\n  for (let i: number = 0; i < extensions.length;\
    \ i++) {\n    let strength: number = Math.floor(count_uppercase(extensions[i])\
    \ - count_lowercase(extensions[i]));\n    if (strength > strongest_strength) {\n\
    \      strongest = extensions[i];\n      strongest_strength = strength;\n    }\n\
    \  }\n  return class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpkn46y_rj.ts(22,39): error TS2304: Cannot find name ''count_uppercase''.

    ../../../../tmp/tmpkn46y_rj.ts(22,72): error TS2304: Cannot find name ''count_lowercase''.

    '
  timestamp: 1660335022
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Write your code here\n    const\
    \ strengths = extensions.map(ext => {\n        const capCount = ext.split('').filter(letter\
    \ => letter == letter.toUpperCase()).length;\n        const smCount = ext.split('').filter(letter\
    \ => letter == letter.toLowerCase()).length;\n        return capCount - smCount;\n\
    \    });\n    const maxStrength = Math.max(...strengths);\n    const index = strengths.indexOf(maxStrength);\n\
    \    return `${class_name}.${extensions[index]}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335023
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = \"\";\n    let\
    \ strongestStrength = 0;\n    for (let i = 0; i < extensions.length; i++) {\n\
    \        let ext = extensions[i];\n        let caps = 0;\n        let lowers =\
    \ 0;\n        for (let j = 0; j < ext.length; j++) {\n            let char = ext[j];\n\
    \            if (char >= \"A\" && char <= \"Z\") {\n                caps++;\n\
    \            } else {\n                lowers++;\n            }\n        }\n \
    \       let strength = caps - lowers;\n        if (strength > strongestStrength)\
    \ {\n            strongestStrength = strength;\n            strongest = ext;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpkh5gepmg.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkh5gepmg.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335023
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var first_extension: string = extensions[0];\n\
    \    var class_plus_extension: string = class_name + \".\" + first_extension;\n\
    \    var strongest_extension: string = first_extension;\n    var strongest_extension_strength:\
    \ number = (Strongest_Extension_Strength(first_extension));\n    for (var i: number\
    \ = 1; i < extensions.length; i++) {\n        var current_extension: string =\
    \ extensions[i];\n        var current_extension_strength: number = (Strongest_Extension_Strength(current_extension));\n\
    \        if (current_extension_strength > strongest_extension_strength) {\n  \
    \          strongest_extension = current_extension;\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_plus_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpt38m2i3d.ts(21,49): error TS2552: Cannot find name ''Strongest_Extension_Strength''.
    Did you mean ''strongest_extension_strength''?

    ../../../../tmp/tmpt38m2i3d.ts(24,51): error TS2552: Cannot find name ''Strongest_Extension_Strength''.
    Did you mean ''strongest_extension_strength''?

    '
  timestamp: 1660335022
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_mapping: {[key: string]:\
    \ number} = {};\n    let strongest_extension: string = \"\";\n    let strongest_val:\
    \ number = -2;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ curr_extension: string = extensions[i];\n        let curr_val: number = computeStrength(curr_extension);\n\
    \        extension_mapping[curr_extension] = curr_val;\n        if (curr_val >\
    \ strongest_val) {\n            strongest_val = curr_val;\n            strongest_extension\
    \ = curr_extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp1l_oxgaz.ts(23,32): error TS2304: Cannot find name ''computeStrength''.

    '
  timestamp: 1660335024
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result = {\n        str: \"\
    \",\n        strength: 0\n    };\n    extensions.forEach(ext => {\n        let\
    \ strength = 0;\n        for (let i = 0; i < ext.length; i++) {\n            if\
    \ (ext[i] === ext[i].toUpperCase()) {\n                strength++;\n         \
    \   } else {\n                strength--;\n            }\n        }\n        if\
    \ (result.strength < strength) {\n            result.str = ext;\n            result.strength\
    \ = strength;\n        }\n    });\n    return `${class_name}.${result.str}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_e2p4u8a.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_e2p4u8a.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_ext = '';\n    let\
    \ strongest_ext_strength = -Infinity;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let current_ext = extensions[i];\n        let current_ext_strength\
    \ = 0;\n        for (let j = 0; j < current_ext.length; j++) {\n            if\
    \ (current_ext[j] === current_ext[j].toUpperCase()) {\n                current_ext_strength++;\n\
    \            } else {\n                current_ext_strength--;\n            }\n\
    \        }\n        if (current_ext_strength > strongest_ext_strength) {\n   \
    \         strongest_ext = current_ext;\n            strongest_ext_strength = current_ext_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_ext;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpp7ncplci.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp7ncplci.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result: string = \"\";\n  \
    \  let best_strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let strength: number = 0;\n        for (let j: number = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                strength += 1;\n            } else {\n                strength\
    \ -= 1;\n            }\n        }\n        if (strength > best_strength) {\n \
    \           best_strength = strength;\n            result = class_name + \".\"\
    \ + extensions[i];\n        }\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpchjwywy_.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpchjwywy_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strg_ext: string = \"\";\n\
    \    let strongest: number = -100;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let ext: string = extensions[i];\n        let str: number =\
    \ 0;\n        for (let j: number = 0; j < ext.length; j++) {\n            let\
    \ l: string = ext[j];\n            if (l >= \"A\" && l <= \"Z\") {\n         \
    \       str += 1;\n            } else {\n                str -= 1;\n         \
    \   }\n        }\n        if (str > strongest) {\n            strongest = str;\n\
    \            strg_ext = ext;\n        }\n    }\n    return class_name + \".\"\
    \ + strg_ext;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmptxq7ezzh.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmptxq7ezzh.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let ext_strength = new Map<string,\
    \ number>();\n    let strongest_ext = \"\";\n    let strongest_strength = 0;\n\
    \    for (let e of extensions) {\n        let strength = 0;\n        for (let\
    \ i = 0; i < e.length; i++) {\n            if (e[i] === e[i].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        ext_strength.set(e, strength);\n        if\
    \ (strength > strongest_strength) {\n            strongest_ext = e;\n        \
    \    strongest_strength = strength;\n        }\n    }\n    return class_name +\
    \ \".\" + strongest_ext;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgrw6yzfz.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgrw6yzfz.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength = {};\n\
    \    let strongest_extension: string = \"\";\n    let strongest_strength: number\
    \ = 0;\n    let cap: number = 0;\n    let sm: number = 0;\n    for (let i = 0;\
    \ i < extensions.length; i++) {\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap - sm;\n        extension_strength[extensions[i]]\
    \ = strength;\n        cap = 0;\n        sm = 0;\n    }\n    for (let k in extension_strength)\
    \ {\n        if (extension_strength[k] > strongest_strength) {\n            strongest_strength\
    \ = extension_strength[k];\n            strongest_extension = k;\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}\n\nconsole.log(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpdki5uf81.js:52:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdki5uf81.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Slices.

    my_class.AA

    '
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest: string = extensions[0];\n\
    \  let strength: number = 0;\n  for (let ext of extensions) {\n    let uppercase:\
    \ number = 0;\n    let lowercase: number = 0;\n    for (let letter of ext) {\n\
    \      letter === letter.toUpperCase() ? uppercase++ : lowercase++;\n    }\n \
    \   if (uppercase - lowercase > strength) {\n      strength = uppercase - lowercase;\n\
    \      strongest = ext;\n    }\n  }\n  return `${class_name}.${strongest}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphtnyehcj.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmphtnyehcj.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strongest_extension = '';\n\
    \    var strength = 0;\n    for (var i = 0; i < extensions.length; i++) {\n  \
    \      var current_strength = 0;\n        var current_extension = extensions[i];\n\
    \        for (var j = 0; j < current_extension.length; j++) {\n            var\
    \ current_letter = current_extension[j];\n            if (current_letter.toUpperCase()\
    \ == current_letter) {\n                current_strength += 1;\n            }\
    \ else {\n                current_strength -= 1;\n            }\n        }\n \
    \       if (current_strength > strength) {\n            strength = current_strength;\n\
    \            strongest_extension = current_extension;\n        }\n    }\n    return\
    \ class_name + '.' + strongest_extension;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpl2_ijdx5.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl2_ijdx5.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = '';\n \
    \   let strength: number = 0;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let CAP: number = 0;\n        let SM: number = 0;\n        for (let\
    \ x = 0; x < extensions[i].length; x++) {\n            if (extensions[i][x] >=\
    \ 'A' && extensions[i][x] <= 'Z') {\n                CAP++;\n            } else\
    \ {\n                SM++;\n            }\n        }\n        if (CAP - SM > strength)\
    \ {\n            strength = CAP - SM;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + strongest;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp0wl6w814.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0wl6w814.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335025
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let ClassName = class_name;\n \
    \   let  max: number = 0;\n    let  max_string: string = \"\";\n    for (var i\
    \ = 0; i < extensions.length; i++) {\n        let CAP = 0;\n        let SM = 0;\n\
    \        let current = extensions[i];\n        for (var j = 0; j < current.length;\
    \ j++) {\n            if (current[j] === current[j].toUpperCase()) {\n       \
    \         CAP = CAP + 1;\n            }\n            else {\n                SM\
    \ = SM + 1;\n            }\n        }\n        if (CAP - SM > max) {\n       \
    \     max = CAP - SM;\n            max_string = current;\n        }\n    }\n \
    \   let res: string = ClassName + \".\" + max_string;\n    return res;\n}\nconsole.log(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4_vn2nn5.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4_vn2nn5.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Slices.

    my_class.AA

    '
  timestamp: 1660335026
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Your code here...\n    let aClass\
    \ = new Class(class_name);\n    let strongestExtension: Extension = null;\n  \
    \  for (let i = 0; i < extensions.length; i++) {\n        let anExtension = new\
    \ Extension(extensions[i]);\n        aClass.loadExtension(anExtension);\n    \
    \    if (strongestExtension == null || anExtension.getStrength() > strongestExtension.getStrength())\
    \ {\n            strongestExtension = anExtension;\n        }\n    }\n    return\
    \ aClass.getName() + \".\" + strongestExtension.getName();\n}\n\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpt8dvin08.ts(19,22): error TS2552: Cannot find name ''Class''.
    Did you mean ''aClass''?

    ../../../../tmp/tmpt8dvin08.ts(20,29): error TS2304: Cannot find name ''Extension''.

    ../../../../tmp/tmpt8dvin08.ts(22,31): error TS2552: Cannot find name ''Extension''.
    Did you mean ''anExtension''?

    '
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Your code here\n    let strongest:\
    \ number = 0;\n    let strongest_extension: string = '';\n    for (let i: number\
    \ = 0; i < extensions.length; i++) {\n        const extension: string = extensions[i];\n\
    \        let upper: number = 0;\n        let lower: number = 0;\n        for (let\
    \ j: number = 0; j < extension.length; j++) {\n            const c: string = extension[j];\n\
    \            if (c >= 'A' && c <= 'Z') {\n                upper++;\n         \
    \   } else if (c >= 'a' && c <= 'z') {\n                lower++;\n           \
    \ }\n        }\n        const strength: number = upper - lower;\n        if (strength\
    \ > strongest) {\n            strongest = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpm0je_jfp.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm0je_jfp.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest = '';\n  let strongestStr\
    \ = -Infinity;\n  for (let ext of extensions) {\n    let strength = 0;\n    for\
    \ (let char of ext) {\n      strength += char.toUpperCase() === char ? 1 : -1;\n\
    \    }\n    if (strength > strongestStr) {\n      strongestStr = strength;\n \
    \     strongest = ext;\n    }\n  }\n  return `${class_name}.${strongest}`;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpqb3m6mmd.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqb3m6mmd.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_index: number = 0;\n    let strongest_extension_value:\
    \ number = Number.MIN_VALUE;\n    let class_extension_strength: number;\n    for\
    \ (let i: number = 0; i < extensions.length; i++) {\n        class_extension_strength\
    \ = 0;\n        for (let x: number = 0; x < extensions[i].length; x++) {\n   \
    \         if (extensions[i][x] == extensions[i][x].toUpperCase()) {\n        \
    \        class_extension_strength++;\n            } else {\n                class_extension_strength--;\n\
    \            }\n        }\n        if (class_extension_strength > strongest_extension_value)\
    \ {\n            strongest_extension_value = class_extension_strength;\n     \
    \       strongest_extension_index = i;\n        }\n    }\n    return class_name\
    \ + \".\" + extensions[strongest_extension_index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpyz2_qsg4.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyz2_qsg4.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let cap: number = 0;\n  let sm: number\
    \ = 0;\n  let strength: number = 0;\n  let max: number = 0;\n  let ext: string\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    for (let j = 0;\
    \ j < extensions[i].length; j++) {\n      if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n        cap += 1;\n      } else {\n        sm += 1;\n      }\n    }\n   \
    \ strength = cap - sm;\n    if (strength > max) {\n      max = strength;\n   \
    \   ext = extensions[i];\n    }\n    cap = 0;\n    sm = 0;\n  }\n  return class_name\
    \ + \".\" + ext;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1xeh3mhp.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1xeh3mhp.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let c = 0;\n  let s = 0;\n  let max_ext:\
    \ string = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    for (let\
    \ j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n        c += 1;\n      } else {\n        s += 1;\n      }\n    }\n    if\
    \ (c - s > 0) {\n      max_ext = extensions[i];\n    }\n    c = 0;\n    s = 0;\n\
    \  }\n  return class_name + \".\" + max_ext;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Boku123.32145tggg'\n\
    \nshould loosely deep-equal\n\n'Boku123.YEs.WeCaNe'\n    at test (/tmp/tmp6sctt596.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6sctt596.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Boku123.32145tggg',\n\
    \  expected: 'Boku123.YEs.WeCaNe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: number = 0;\n  \
    \  let strongest_extension: string = \"\";\n    for (let extension of extensions)\
    \ {\n        let lower: number = extension.match(/[a-z]/g).length;\n        let\
    \ upper: number = extension.match(/[A-Z]/g).length;\n        let extension_strength:\
    \ number = upper - lower;\n        if (extension_strength > strongest) {\n   \
    \         strongest = extension_strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7hqqxjaf.js:22\n        let upper = extension.match(/[A-Z]/g).length;\n\
    \                                             ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at Strongest_Extension (/tmp/tmp7hqqxjaf.js:22:46)\n\
    \    at test (/tmp/tmp7hqqxjaf.js:35:22)\n    at Object.<anonymous> (/tmp/tmp7hqqxjaf.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = 0;\n    let strongest_extension\
    \ = \"\";\n    for (let extension of extensions) {\n        const extension_strength\
    \ = get_extension_strength(extension);\n        if (extension_strength > strongest)\
    \ {\n            strongest = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpowz7790i.ts(21,36): error TS2304: Cannot find name ''get_extension_strength''.

    '
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strengths: number[] = [];\n\
    \    for (let i: number = 0; i < extensions.length; i++) {\n        let CAP: number\
    \ = 0;\n        let SM: number = 0;\n        for (let j: number = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                CAP++;\n            } else {\n                SM++;\n   \
    \         }\n        }\n        strengths.push(CAP - SM);\n    }\n    let max:\
    \ number = Math.max(...strengths);\n    let ind: number = strengths.indexOf(max);\n\
    \    return class_name + \".\" + extensions[ind];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpc9irm8pj.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc9irm8pj.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: number = 0;\n  \
    \  let pos: number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n \
    \       let CAP: number = 0;\n        let SM: number = 0;\n        for (let j\
    \ = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] >= 'A'\
    \ && extensions[i][j] <= 'Z') {\n                CAP++;\n            } else {\n\
    \                SM++;\n            }\n        }\n        if (CAP - SM > strongest)\
    \ {\n            strongest = CAP - SM;\n            pos = i;\n        }\n    }\n\
    \    return class_name + \".\" + extensions[pos];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpzct3nb4k.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzct3nb4k.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strongest_extension = '';\n\
    \    var strength = 0;\n    for (let i = 0; i < extensions.length; i++) {\n  \
    \      var extension = extensions[i];\n        var CAP = 0;\n        var SM =\
    \ 0;\n        for (let j = 0; j < extension.length; j++) {\n            var char\
    \ = extension[j];\n            if (char === char.toUpperCase()) {\n          \
    \      CAP++;\n            } else {\n                SM++;\n            }\n  \
    \      }\n        var current_strength = CAP - SM;\n        if (current_strength\
    \ > strength) {\n            strength = current_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpn1aybht3.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn1aybht3.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let curr_str: number = 0;\n    let strongest_str: number = 0;\n    extensions.forEach(val\
    \ => {\n        curr_str = ((val.match(/[A-Z]/g) || []).length) - ((val.match(/[a-z]/g)\
    \ || []).length);\n        if (curr_str > strongest_str) {\n            strongest_str\
    \ = curr_str;\n            strongest = val;\n        }\n    });\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1uk4a9fo.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1uk4a9fo.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335026
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let ext_obj = {};\n  for (let ext\
    \ of extensions) {\n    let cap = ext.replace(/[^A-Z]/g, '').length;\n    let\
    \ sm = ext.replace(/[^a-z]/g, '').length;\n    ext_obj[ext] = cap - sm;\n  }\n\
    \  let max = Math.max(...Object.values(ext_obj));\n  let min = Math.min(...Object.values(ext_obj));\n\
    \  if (max === min) {\n    let max_ext = extensions[0];\n    return `${class_name}.${max_ext}`;\n\
    \  }\n  let max_ext = Object.keys(ext_obj).find(key => ext_obj[key] === max);\n\
    \  return `${class_name}.${max_ext}`;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpkex7sojm.ts(24,22): error TS2345: Argument of type ''unknown''
    is not assignable to parameter of type ''number''.

    ../../../../tmp/tmpkex7sojm.ts(25,22): error TS2345: Argument of type ''unknown''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660335027
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strength = 0;\n    var index\
    \ = 0;\n    var best_extension = \"\";\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        var current_extension = extensions[i];\n        var extension_strength\
    \ = 0;\n        for (var j = 0; j < current_extension.length; j++) {\n       \
    \     if (current_extension[j] === current_extension[j].toUpperCase()) {\n   \
    \             extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strength) {\n    \
    \        strength = extension_strength;\n            index = i;\n            best_extension\
    \ = current_extension;\n        }\n    }\n    return `${class_name}.${best_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_531fc23.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_531fc23.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335028
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension: string =\
    \ \"\";\n  let strongest_extension_strength: number = 0;\n  let current_extension_strength:\
    \ number = 0;\n  for (let i: number = 0; i < extensions.length; i++) {\n    current_extension_strength\
    \ = extension_strength(extensions[i]);\n    if (current_extension_strength > strongest_extension_strength)\
    \ {\n      strongest_extension_strength = current_extension_strength;\n      strongest_extension\
    \ = extensions[i];\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpv80petxb.ts(22,34): error TS2304: Cannot find name ''extension_strength''.

    '
  timestamp: 1660335028
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_ext = extensions[0]\n\
    \  let strength = 0\n  let str_ar = []\n  for (let ext of extensions) {\n    let\
    \ i = 0\n    for (let char of ext) {\n      if (char.match(/[A-Z]/)) i += 1\n\
    \      if (char.match(/[a-z]/)) i -= 1\n    }\n    str_ar.push(i)\n  }\n  let\
    \ max = str_ar.reduce((a, b) => {\n    return Math.max(a, b)\n  })\n  for (let\
    \ i = 0; i < str_ar.length; i++) {\n    if (str_ar[i] === max) {\n      strongest_ext\
    \ = extensions[i]\n      break\n    }\n  }\n  return class_name + \".\" + strongest_ext\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335028
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let output = class_name + \".\"\
    \ + extensions[0];\n    let strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j\
    \ < extensions[i].length; j++) {\n            let temp = extensions[i][j];\n \
    \           if (temp >= \"A\" && temp <= \"Z\") {\n                cap++;\n  \
    \          } else {\n                sm++;\n            }\n        }\n       \
    \ if (cap - sm > strength) {\n            strength = cap - sm;\n            output\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return output;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp5f65grja.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5f65grja.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335029
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_index = 0;\n  let strongest_strength\
    \ = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    const strength =\
    \ extensions[i].toUpperCase().length - extensions[i].length;\n    if (strength\
    \ > strongest_strength) {\n      strongest_index = i;\n      strongest_strength\
    \ = strength;\n    }\n  }\n  return `${class_name}.${extensions[strongest_index]}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpew72w1tz.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpew72w1tz.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335029
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest: string = \"\";\n \
    \ let cap: number = 0;\n  let sm: number = 0;\n  let strength: number = 0;\n \
    \ for (let i = 0; i < extensions.length; i++) {\n    let ext: string = extensions[i];\n\
    \    let cap_count: number = 0;\n    let sm_count: number = 0;\n    for (let j\
    \ = 0; j < ext.length; j++) {\n      if (ext[j] === ext[j].toUpperCase()) {\n\
    \        cap_count += 1;\n      } else {\n        sm_count += 1;\n      }\n  \
    \  }\n    if (cap_count - sm_count > strength) {\n      strongest = ext;\n   \
    \   cap = cap_count;\n      sm = sm_count;\n      strength = cap - sm;\n    }\n\
    \  }\n  return class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpa9rzuswp.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa9rzuswp.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335029
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = { strength:\
    \ -Infinity, name: \"\" };\n  let strength;\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    strength = caps_count(extensions[i]) - small_letters_count(extensions[i]);\n\
    \    if (strength > strongest_extension.strength) {\n      strongest_extension.strength\
    \ = strength;\n      strongest_extension.name = extensions[i];\n    }\n  }\n \
    \ return `${class_name}.${strongest_extension.name}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpwr08w1mi.ts(21,16): error TS2304: Cannot find name ''caps_count''.

    ../../../../tmp/tmpwr08w1mi.ts(21,44): error TS2304: Cannot find name ''small_letters_count''.

    '
  timestamp: 1660335029
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength = 0;\n    let answer\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let temp\
    \ = 0;\n        let caps = 0;\n        let smalls = 0;\n        for (let j = 0;\
    \ j < extensions[i].length; j++) {\n            if (isUpperCase(extensions[i][j]))\
    \ {\n                caps++;\n            } else {\n                smalls++;\n\
    \            }\n        }\n        temp = caps - smalls;\n        if (temp > strength)\
    \ {\n            strength = temp;\n            answer = extensions[i];\n     \
    \   }\n    }\n    return class_name + \".\" + answer;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpk0w7czmk.ts(25,17): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1660335029
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strongest_extension: string\
    \ = '';\n    var strongest_extension_strength: number = -Infinity;\n    var extension_strength:\
    \ number;\n    for (var extension of extensions) {\n        extension_strength\
    \ = extension.replace(/[^A-Z]/g, '').length - extension.replace(/[^a-z]/g, '').length;\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335029
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var name_counts: any = extensions.map(ext\
    \ => {\n        var upper = 0, lower = 0;\n        for (var i = 0; i < ext.length;\
    \ i++) {\n            var c = ext[i];\n            if (c >= 'A' && c <= 'Z') {\n\
    \                upper++;\n            } else if (c >= 'a' && c <= 'z') {\n  \
    \              lower++;\n            }\n        }\n        return {'extension':\
    \ ext, 'upper': upper, 'lower': lower, 'strength': (upper - lower)};\n    });\n\
    \    // console.log(name_counts);\n    name_counts.sort((a, b) => {\n        var\
    \ diff = a.strength - b.strength;\n        if (diff == 0) {\n            diff\
    \ = a.extension.localeCompare(b.extension);\n        }\n        return diff;\n\
    \    });\n    // console.log(name_counts);\n    return class_name + '.' + name_counts[name_counts.length\
    \ - 1].extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__HAHA.781345'\n\
    \nshould loosely deep-equal\n\n'__HAHA.123'\n    at test (/tmp/tmpqcjsjyyy.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqcjsjyyy.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__HAHA.781345',\n\
    \  expected: '__HAHA.123',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335029
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: number = -Infinity,\
    \ strong_ext: string;\n    for (let i = 0; i < extensions.length; i++) {\n   \
    \     let ext: string = extensions[i];\n        let strength: number = (ext.match(/[A-Z]/g)\
    \ || []).length - (ext.match(/[a-z]/g) || []).length;\n        if (strength >\
    \ strongest) {\n            strongest = strength;\n            strong_ext = ext;\n\
    \        }\n    }\n    return class_name + \".\" + strong_ext;\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335029
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let comp_array: Array<{name: string,\
    \ strength: number}> = [];\n    for (let i = 0; i < extensions.length; i++) {\n\
    \        let strength: number = 0;\n        for (let x = 0; x < extensions[i].length;\
    \ x++) {\n            if (extensions[i][x] >= 'A' && extensions[i][x] <= 'Z')\
    \ {\n                strength++;\n            } else if (extensions[i][x] >= 'a'\
    \ && extensions[i][x] <= 'z') {\n                strength--;\n            }\n\
    \        }\n        comp_array.push({name: extensions[i], strength: strength});\n\
    \    }\n    comp_array.sort((a, b) => b.strength - a.strength);\n    return class_name\
    \ + '.' + comp_array[0].name;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335029
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    const caps = (str: string) => Array.from(str).filter(char\
    \ => /[A-Z]/.test(char)).length;\n    const smalls = (str: string) => Array.from(str).filter(char\
    \ => /[a-z]/.test(char)).length;\n    const strengths = extensions.map(ext =>\
    \ caps(ext) - smalls(ext));\n    const min_strength = Math.min(...strengths);\n\
    \    const index = strengths.indexOf(min_strength);\n    return `${class_name}.${extensions[index]}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmppkf1f4_k.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmppkf1f4_k.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    //create a regex that matchs any\
    \ uppercase letters\n    const patt = /[A-Z]/g;\n    let max = -10;\n    let max_ext\
    \ = \"\";\n    //loop through the array of extensions and find the extension with\
    \ the most uppercase letters\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        //the exec method will return the first match of the uppercase letters\
    \ and reset to the begining of the string\n        let result = patt.exec(extensions[i]);\n\
    \        let num_caps = 0;\n        //while there are more uppercase letters to\
    \ find, add 1 to num_caps\n        while (result) {\n            num_caps++;\n\
    \            result = patt.exec(extensions[i]);\n        }\n        //if the extension\
    \ has more uppercase letters than the last or if they have the same number of\
    \ uppercase letters\n        // and comes first in the array then set it as the\
    \ new max_ext\n        if (num_caps > max || (num_caps == max && extensions[i]\
    \ < max_ext)) {\n            max = num_caps;\n            max_ext = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + max_ext;\n}\n\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\nconsole.log(Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphxqx03pq.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmphxqx03pq.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    Slices.SErviNGSliCes

    '
  timestamp: 1660335029
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength = 0;\n    let ext_name\
    \ = extensions[0];\n    for (let i = 0; i < extensions.length; i++) {\n      \
    \  let upper_case = 0;\n        let lower_case = 0;\n        for (let j = 0; j\
    \ < extensions[i].length; j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z') {\n                upper_case++;\n            } else {\n           \
    \     lower_case++;\n            }\n        }\n        if (upper_case - lower_case\
    \ > strength) {\n            strength = upper_case - lower_case;\n           \
    \ ext_name = extensions[i];\n        }\n    }\n    return class_name + \".\" +\
    \ ext_name;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp9bt50f10.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9bt50f10.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest_extension = extensions[0];\n\
    \  let strongest_strength = 0;\n  extensions.forEach(extension => {\n    let num_cap\
    \ = extension.match(/[A-Z]/g).length;\n    let num_sm = extension.match(/[a-z]/g).length;\n\
    \    let strength = num_cap - num_sm;\n    if (strength > strongest_strength)\
    \ {\n      strongest_strength = strength;\n      strongest_extension = extension;\n\
    \    }\n  });\n  return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpegkpfkf4.js:21\n        let num_cap = extension.match(/[A-Z]/g).length;\n\
    \                                               ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at /tmp/tmpegkpfkf4.js:21:48\n    at Array.forEach\
    \ (<anonymous>)\n    at Strongest_Extension (/tmp/tmpegkpfkf4.js:20:16)\n    at\
    \ test (/tmp/tmpegkpfkf4.js:35:22)\n    at Object.<anonymous> (/tmp/tmpegkpfkf4.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_strength: number = 0;\n    for (let ext\
    \ of extensions) {\n        let strength: number = ext.split('').filter(char =>\
    \ char == char.toUpperCase()).length - ext.split('').filter(char => char == char.toLowerCase()).length;\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = ext;\n        }\n    }\n    return\
    \ class_name + '.' + strongest_extension;\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpeb976dic.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeb976dic.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    '
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var new_name: string = \"\";\n\
    \    var CAP = 0;\n    var SM = 0;\n    var result = 0;\n    for (var i = 0; i\
    \ < extensions.length; i++) {\n        var ext = extensions[i];\n        for (var\
    \ j = 0; j < ext.length; j++) {\n            if (ext[j] == ext[j].toUpperCase())\
    \ {\n                CAP++;\n            }\n            else {\n             \
    \   SM++;\n            }\n        }\n        if (result < CAP - SM) {\n      \
    \      result = CAP - SM;\n            new_name = ext;\n        }\n        CAP\
    \ = 0;\n        SM = 0;\n    }\n    return class_name + \".\" + new_name;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp12dfo3j_.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmp12dfo3j_.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let tempArr: number[] = [];\n \
    \   let tempStr: string = \"\";\n    let countCaps: number = 0;\n    let countSmall:\
    \ number = 0;\n    let tempObj: {\n        strength: number,\n        name: string\n\
    \    } = {\n        strength: 0,\n        name: \"\"\n    };\n    extensions.forEach(element\
    \ => {\n        for (let i = 0; i < element.length; i++) {\n            if (element[i]\
    \ === element[i].toUpperCase()) {\n                countCaps++;\n            }\
    \ else {\n                countSmall++;\n            }\n        }\n        tempArr.push(countCaps\
    \ - countSmall);\n        countCaps = 0;\n        countSmall = 0;\n    });\n \
    \   tempArr.forEach((element, index) => {\n        if (element > tempObj.strength)\
    \ {\n            tempObj.strength = element;\n            tempObj.name = extensions[index];\n\
    \        }\n    });\n    return `${class_name}.${tempObj.name}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp5k39tbt2.js:52:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5k39tbt2.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let className: string = class_name;\n\
    \    let strongestExtension: string = extensions[0];\n    let strongestStrength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extensionStrength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extensionStrength++;\n            } else {\n            \
    \    extensionStrength--;\n            }\n        }\n        if (extensionStrength\
    \ > strongestStrength) {\n            strongestStrength = extensionStrength;\n\
    \            strongestExtension = extensions[i];\n        }\n    }\n    return\
    \ className + \".\" + strongestExtension;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp5z6v79sa.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5z6v79sa.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = 0;\n\
    \    let strongest_extension_name = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let current_extension = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\n\
    \                current_extension += 1;\n            else\n                current_extension\
    \ -= 1;\n        }\n        if (current_extension > strongest_extension) {\n \
    \           strongest_extension = current_extension;\n            strongest_extension_name\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension_name;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxtdqbzau.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxtdqbzau.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335030
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strongest: number = 0;\n  \
    \  var strongest_extension: string = \"\";\n    var cap: number = 0;\n    var\
    \ sm: number = 0;\n    var strength: number = 0;\n    for (var extension of extensions)\
    \ {\n        for (var i: number = 0; i < extension.length; i++) {\n          \
    \  if (isUpperCase(extension[i])) {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength = cap -\
    \ sm;\n        if (strength > strongest) {\n            strongest = strength;\n\
    \            strongest_extension = extension;\n        }\n        cap = 0;\n \
    \       sm = 0;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0qj426b8.ts(25,17): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1660335030
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = '';\n    let strongestStrength\
    \ = 0;\n    extensions.forEach(function (ext) {\n        let cnt = 0;\n      \
    \  let cnt2 = 0;\n        for (let i = 0; i < ext.length; i++) {\n           \
    \ let ch = ext.charAt(i);\n            if (ch === ch.toUpperCase()) {\n      \
    \          cnt++;\n            } else {\n                cnt2++;\n           \
    \ }\n        }\n        let strength = cnt - cnt2;\n        if (strength > strongestStrength)\
    \ {\n            strongestStrength = strength;\n            strongest = ext;\n\
    \        }\n    });\n    return class_name + '.' + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpoutimqz3.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoutimqz3.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335031
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strong_ext = \"\";\n    let\
    \ strong_val = -1.1;\n\n    for (let i=0; i<extensions.length; i++) {\n      \
    \  let current_ext = extensions[i];\n        let current_val = Strength_Value(current_ext);\n\
    \        if (current_val > strong_val) {\n            strong_ext = current_ext;\n\
    \            strong_val = current_val;\n        }\n    }\n\n    return class_name\
    \ + \".\" + strong_ext;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpru3lgq7s.ts(23,27): error TS2304: Cannot find name ''Strength_Value''.

    '
  timestamp: 1660335031
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = '';\n\
    \    let strongest_extension_strength = 0;\n    extensions.forEach(function (extension)\
    \ {\n        let up = extension.replace(/[^A-Z]/g, '').length;\n        let low\
    \ = extension.replace(/[^a-z]/g, '').length;\n        let strength = up - low;\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return class_name + '.' + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpzwyapywt.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzwyapywt.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335032
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let capital_strength: number[]\
    \ = [],\n        lowercase_strength: number[] = [],\n        index: number = 0,\n\
    \        strongest_extension: string = extensions[0];\n    for (let i = 0; i <\
    \ extensions.length; i++) {\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')\
    \ {\n                capital_strength[i] = (capital_strength[i] || 0) + 1;\n \
    \           } else if (extensions[i][j] >= 'a' && extensions[i][j] <= 'z') {\n\
    \                lowercase_strength[i] = (lowercase_strength[i] || 0) + 1;\n \
    \           }\n        }\n    }\n    capital_strength.map((element, index) =>\
    \ capital_strength[index] = element - (lowercase_strength[index] || 0));\n   \
    \ for (let i = 0; i < capital_strength.length; i++) {\n        if (capital_strength[i]\
    \ < capital_strength[index]) {\n            index = i;\n        }\n    }\n   \
    \ return class_name + '.' + extensions[index];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.niNE'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpmy4mljkn.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmy4mljkn.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.niNE',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335032
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  if (extensions.length == 0) return\
    \ `${class_name}.NotFound`;\n  let strongest_extension = extensions[0];\n  let\
    \ strongest_extension_strength = findStrength(extensions[0]);\n  extensions.forEach(extension\
    \ => {\n    let strength = findStrength(extension);\n    if (strength > strongest_extension_strength)\
    \ {\n      strongest_extension = extension;\n      strongest_extension_strength\
    \ = strength;\n    }\n  });\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpe0qrs15e.ts(20,38): error TS2304: Cannot find name ''findStrength''.

    ../../../../tmp/tmpe0qrs15e.ts(22,20): error TS2304: Cannot find name ''findStrength''.

    '
  timestamp: 1660335032
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strong_ext: string = \"\";\n\
    \    let strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let cap: number = 0;\n        let sm: number = 0;\n        for\
    \ (let j: number = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= \"A\" && extensions[i][j] <= \"Z\") {\n                cap++;\n         \
    \   }\n            else {\n                sm++;\n            }\n        }\n \
    \       if (cap - sm > strength) {\n            strength = cap - sm;\n       \
    \     strong_ext = extensions[i];\n        }\n    }\n    return class_name + \"\
    .\" + strong_ext;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpq60apmgc.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq60apmgc.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335032
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // returns a list of extensions\
    \ with their strength\n    function get_strength(acc: [string, number][], extension:\
    \ string): [string, number][] {\n        // compute the strength of the current\
    \ extension\n        let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        return acc.concat([[extension, strength]]);\n    }\n    // gets the strongest\
    \ extension from a list of extensions and their strength\n    function get_strongest(acc:\
    \ [string, number], extension: [string, number]): [string, number] {\n       \
    \ // check if the strength of the current extension is stronger than the strongest\n\
    \        if (extension[1] > acc[1]) {\n            return extension;\n       \
    \ }\n        return acc;\n    }\n    // declare some variables to hold the strongest\
    \ extension and its strength\n    let strongest: [string, number] = [\"\", 0];\n\
    \    // populate the strongest variable with the strongest extension\n    strongest\
    \ = extensions.reduce(get_strength, []).reduce(get_strongest, [\"\", 0]);\n  \
    \  // return the class name concatenated with the strongest extension\n    return\
    \ class_name + \".\" + strongest[0];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeb9ntsiu.js:21\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n                                      \
    \          ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at get_strength (/tmp/tmpeb9ntsiu.js:21:49)\n    at Array.reduce (<anonymous>)\n\
    \    at Strongest_Extension (/tmp/tmpeb9ntsiu.js:35:28)\n    at test (/tmp/tmpeb9ntsiu.js:43:22)\n\
    \    at Object.<anonymous> (/tmp/tmpeb9ntsiu.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335032
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    if (extensions.length === 0) {\n\
    \        return `${class_name}.`;\n    }\n    let e_strength = 0;\n    let e_strongest:\
    \ string;\n    extensions.forEach((ext) => {\n        let c_count = 0;\n     \
    \   let s_count = 0;\n        ext.split('').forEach((c) => {\n            if (c\
    \ === c.toUpperCase()) {\n                c_count++;\n            } else {\n \
    \               s_count++;\n            }\n        });\n        let strength =\
    \ c_count - s_count;\n        if (strength > e_strength) {\n            e_strength\
    \ = strength;\n            e_strongest = ext;\n        }\n    });\n    return\
    \ `${class_name}.${e_strongest}`;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp43ng6i5h.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp43ng6i5h.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let ext = \".\";\n    let strength\
    \ = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < extensions.length; i++)\
    \ {\n        let str = extensions[i];\n        let caps = 0;\n        let smalls\
    \ = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (str[j]\
    \ >= 'A' && str[j] <= 'Z') {\n                caps++;\n            } else {\n\
    \                smalls++;\n            }\n        }\n        let tmp = caps -\
    \ smalls;\n        if (tmp > strength) {\n            strength = tmp;\n      \
    \      ext = str;\n        }\n    }\n    return class_name + \".\" + ext;\n}\n\
    console.log(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpaymje9n1.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaymje9n1.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Slices.SErviNGSliCes

    '
  timestamp: 1660335033
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return class_name + \".\" + Strongest_Extension_Helper(extensions).name;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpvpun932d.ts(18,31): error TS2304: Cannot find name ''Strongest_Extension_Helper''.

    '
  timestamp: 1660335033
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_strength: number = extension_strength(extensions[0]);\n\
    \    for (let i: number = 1; i < extensions.length; i++) {\n        let strength:\
    \ number = extension_strength(extensions[i]);\n        if (strength > strongest_strength)\
    \ {\n            strongest_extension = extensions[i];\n            strongest_strength\
    \ = strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpzllnhrgc.ts(19,38): error TS2304: Cannot find name ''extension_strength''.

    ../../../../tmp/tmpzllnhrgc.ts(21,32): error TS2304: Cannot find name ''extension_strength''.

    '
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let max: number = 0;\n    let max_str:\
    \ string = \"\";\n    for (let ext of extensions) {\n        let strength: number\
    \ = ext.split(\"\").reduce((sum, cur) => {\n            let cur_code: number =\
    \ cur.charCodeAt(0);\n            if (cur_code > 64 && cur_code < 91) {\n    \
    \            return sum + 1;\n            } else if (cur_code > 96 && cur_code\
    \ < 123) {\n                return sum - 1;\n            } else {\n          \
    \      return sum;\n            }\n        }, 0);\n        if (strength > max)\
    \ {\n            max = strength;\n            max_str = ext;\n        }\n    }\n\
    \    return class_name + \".\" + max_str;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7ofn0yus.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7ofn0yus.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let ext = extensions.reduce((acc:\
    \ string, value: string) => {\n        let upper = value.match(/[A-Z]/g);\n  \
    \      let lower = value.match(/[a-z]/g);\n        let upper_len = upper ? upper.length\
    \ : 0;\n        let lower_len = lower ? lower.length : 0;\n        let diff =\
    \ upper_len - lower_len;\n        return acc === \"\" || (diff > 0 && diff > acc.split(\"\
    .\")[1].length) ? class_name + \".\" + value : acc;\n    }, \"\");\n    return\
    \ ext === \"\" ? class_name : ext;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpz26_3p00.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz26_3p00.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = 0;\n    let strong_name\
    \ = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        const extension\
    \ = extensions[i];\n        let cap = 0;\n        let sm = 0;\n        for (let\
    \ j = 0; j < extension.length; j++) {\n            const char = extension[j];\n\
    \            if (char.match(/[A-Z]/)) {\n                cap++;\n            }\
    \ else if (char.match(/[a-z]/)) {\n                sm++;\n            }\n    \
    \    }\n        const strength = cap - sm;\n        if (strength > strongest)\
    \ {\n            strongest = strength;\n            strong_name = extension;\n\
    \        }\n    }\n    return `${class_name}.${strong_name}`;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp2n7nrh9n.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2n7nrh9n.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let weights: number[] = [];\n \
    \   for (let ext of extensions) {\n        let uppercase = 0;\n        let lowercase\
    \ = 0;\n        for (let c of ext) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                uppercase++;\n            } else if (c >= 'a' && c <= 'z') {\n\
    \                lowercase++;\n            }\n        }\n        weights.push(uppercase\
    \ - lowercase);\n    }\n    let pos = weights.indexOf(Math.max(...weights));\n\
    \    return class_name + \".\" + extensions[pos];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongestExtension = extensions[0];\n\
    \    let maxStrength = 0;\n    extensions.forEach(extension => {\n        let\
    \ uppercaseLetters = extension.split('').filter(letter => letter.toUpperCase()\
    \ === letter).length;\n        let lowercaseLetters = extension.split('').filter(letter\
    \ => letter.toLowerCase() === letter).length;\n        let currentStrength = uppercaseLetters\
    \ - lowercaseLetters;\n        if (currentStrength > maxStrength) {\n        \
    \    maxStrength = currentStrength;\n            strongestExtension = extension;\n\
    \        }\n    });\n    return `${class_name}.${strongestExtension}`;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpm_78ezd4.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm_78ezd4.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    //TODO: Write - Your - Code\n \
    \   return class_name + \".\" + extensions[0];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpxv5pglp7.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxv5pglp7.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var num_caps: number = 0;\n   \
    \ var num_sm: number = 0;\n    var class_with_extension: string = \"\";\n    var\
    \ extension_with_most_caps: string = \"\";\n    for (var i = 0; i < extensions.length;\
    \ i++) {\n        class_with_extension = class_name + \".\" + extensions[i];\n\
    \        for (var j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ == extensions[i][j].toUpperCase()) {\n                num_caps++;\n        \
    \    }\n            else {\n                num_sm++;\n            }\n       \
    \ }\n        if (num_caps - num_sm > 0) {\n            if (extension_with_most_caps\
    \ == \"\") {\n                extension_with_most_caps = extensions[i];\n    \
    \        }\n            else if (num_caps - num_sm > extensions[i].length) {\n\
    \                extension_with_most_caps = extensions[i];\n            }\n  \
    \      }\n        num_caps = 0;\n        num_sm = 0;\n    }\n    return class_name\
    \ + \".\" + extension_with_most_caps;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpie_velp0.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpie_velp0.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strong = \"\";\n  let max_strength\
    \ = -1;\n  extensions.forEach(ext => {\n    let strength = ext.match(/[A-Z]/g).length\
    \ - ext.match(/[a-z]/g).length;\n    if (strength > max_strength) {\n      max_strength\
    \ = strength;\n      strong = ext;\n    }\n  });\n  return `${class_name}.${strong}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp78f7g4x9.js:21\n        let strength = ext.match(/[A-Z]/g).length\
    \ - ext.match(/[a-z]/g).length;\n                                          ^\n\
    \nTypeError: Cannot read properties of null (reading 'length')\n    at /tmp/tmp78f7g4x9.js:21:43\n\
    \    at Array.forEach (<anonymous>)\n    at Strongest_Extension (/tmp/tmp78f7g4x9.js:20:16)\n\
    \    at test (/tmp/tmp78f7g4x9.js:33:22)\n    at Object.<anonymous> (/tmp/tmp78f7g4x9.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335033
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let filtered = extensions.filter(ext\
    \ => ext.length > 1)\n    let strengths = filtered.map(ext => {\n        let CAP\
    \ = 0\n        let SM = 0\n        ext.split('').forEach(letter => {\n       \
    \     if (letter.toUpperCase() === letter) {\n                CAP++\n        \
    \    } else {\n                SM++\n            }\n        })\n        return\
    \ CAP - SM\n    })\n    let max_strength = Math.max(...strengths)\n    let max_index\
    \ = strengths.indexOf(max_strength)\n    return class_name + '.' + filtered[max_index]\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpc861lq8d.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc861lq8d.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335034
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extensions_strengths: number[]\
    \ = [];\n    let strongest_extensions: string[] = [];\n    extensions.forEach(extension\
    \ => {\n        let capitals = extension.match(/[A-Z]/g).length;\n        let\
    \ smalls = extension.match(/[a-z]/g).length;\n        extensions_strengths.push(capitals\
    \ - smalls);\n    });\n    let highest_strength = Math.max(...extensions_strengths);\n\
    \    extensions_strengths.forEach((value, index) => {\n        if (value === highest_strength)\
    \ {\n            strongest_extensions.push(extensions[index]);\n        }\n  \
    \  });\n    return `${class_name}.${strongest_extensions[0]}`;\n}\nconsole.log(Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpf7010cwq.js:22\n        let smalls = extension.match(/[a-z]/g).length;\n\
    \                                              ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at /tmp/tmpf7010cwq.js:22:47\n    at Array.forEach\
    \ (<anonymous>)\n    at Strongest_Extension (/tmp/tmpf7010cwq.js:20:16)\n    at\
    \ Object.<anonymous> (/tmp/tmpf7010cwq.js:33:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335034
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let class_extension: string = \"\
    \";\n    let strength: number = 0;\n    let class_name_array: string[] = class_name.split(\"\
    \");\n    let class_name_size: number = class_name_array.length;\n    let class_name_length:\
    \ number = 0;\n    let class_name_upper_case: number = 0;\n    let class_name_lower_case:\
    \ number = 0;\n    let class_name_lower_case_array: string[] = [];\n    let class_name_upper_case_array:\
    \ string[] = [];\n    let extension_strength: number = 0;\n    let extension_strength_array:\
    \ number[] = [];\n    for (let i: number = 0; i < class_name_size; i++) {\n  \
    \      if (class_name_array[i] == class_name_array[i].toUpperCase()) {\n     \
    \       class_name_upper_case_array.push(class_name_array[i]);\n        } else\
    \ {\n            class_name_lower_case_array.push(class_name_array[i]);\n    \
    \    }\n    }\n    class_name_length = class_name_upper_case_array.length;\n \
    \   class_name_lower_case = class_name_lower_case_array.length;\n    class_name_upper_case\
    \ = class_name_upper_case_array.length;\n    let extension_size: number = extensions.length;\n\
    \    let extension_length: number = 0;\n    let extension_upper_case: number =\
    \ 0;\n    let extension_lower_case: number = 0;\n    let extension_lower_case_array:\
    \ string[] = [];\n    let extension_upper_case_array: string[] = [];\n    for\
    \ (let i: number = 0; i < extension_size; i++) {\n        extension_lower_case_array\
    \ = [];\n        extension_upper_case_array = [];\n        extension_length =\
    \ extensions[i].length;\n        for (let j: number = 0; j < extension_length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_upper_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpq196wyso.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660335034
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // let CAP: number = 0;\n    //\
    \ let SM: number = 0;\n    // let strength: number = 0;\n    // let maxStrength:\
    \ number = 0;\n    // let index: number = 0;\n    // let maxIndex: number = 0;\n\
    \    // let maxStr: string = '';\n    // for (let i = 0; i < extensions.length;\
    \ i++) {\n    //     CAP = extensions[i].match(/[A-Z]/g).length;\n    //     SM\
    \ = extensions[i].match(/[a-z]/g).length;\n    //     strength = CAP - SM;\n \
    \   //     if (strength > maxStrength) {\n    //         maxStrength = strength;\n\
    \    //         maxIndex = i;\n    //     }\n    // }\n    // maxStr = extensions[maxIndex];\n\
    \    // return class_name + '.' + maxStr;\n    return class_name + '.' + extensions.reduce((p,\
    \ c) =>\n        (c.match(/[A-Z]/g).length - c.match(/[a-z]/g).length) > (p.match(/[A-Z]/g).length\
    \ - p.match(/[a-z]/g).length) ? c : p);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1_j020n9.js:36\n    return class_name + '.' + extensions.reduce((p,\
    \ c) => (c.match(/[A-Z]/g).length - c.match(/[a-z]/g).length) > (p.match(/[A-Z]/g).length\
    \ - p.match(/[a-z]/g).length) ? c : p);\n                                    \
    \                                                                            \
    \                    ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at /tmp/tmp1_j020n9.js:36:133\n    at Array.reduce (<anonymous>)\n    at\
    \ Strongest_Extension (/tmp/tmp1_j020n9.js:36:42)\n    at test (/tmp/tmp1_j020n9.js:42:22)\n\
    \    at Object.<anonymous> (/tmp/tmp1_j020n9.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335034
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let result: string = \"\";\n  \
    \  let strongest_extension: string = \"\";\n    let max_strength: number = -1;\n\
    \    let strength: number = 0;\n    extensions.forEach(e => {\n        strength\
    \ = e.replace(/[^A-Z]/g, \"\").length - e.replace(/[^a-z]/g, \"\").length;\n \
    \       if (strength > max_strength) {\n            max_strength = strength;\n\
    \            strongest_extension = e;\n        }\n    });\n    result = class_name\
    \ + \".\" + strongest_extension;\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335035
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return \"my_class.AA\";\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'my_class.AA'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp491n1gl3.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp491n1gl3.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'my_class.AA',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335035
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return '';\n}\n\nexport {Strongest_Extension}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:3635) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpf7qmdj09.js:20\nexport { Strongest_Extension\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335036
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest: string = extensions[0];\n\
    \    let strongest_strength: number = 0;\n    for (let i: number = 0; i < extensions.length;\
    \ i++) {\n        let current_extension: string = extensions[i];\n        let\
    \ current_strength: number = current_extension.replace(/[^A-Z]/g, \"\").length\
    \ - current_extension.replace(/[^a-z]/g, \"\").length;\n        if (current_strength\
    \ > strongest_strength) {\n            strongest = current_extension;\n      \
    \      strongest_strength = current_strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfs6vskf1.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfs6vskf1.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335036
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = '';\n\
    \    let strength = 0;\n    extensions.forEach(extension => {\n        let extension_strength\
    \ = 0;\n        extension.split('').forEach(letter => {\n            if (letter\
    \ === letter.toUpperCase()) {\n                extension_strength++;\n       \
    \     } else {\n                extension_strength--;\n            }\n       \
    \ });\n        if (strength < extension_strength) {\n            strength = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    });\n    return\
    \ `${class_name}.${strongest_extension}`;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpa6nilbck.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa6nilbck.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335036
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = extensions[0];\n\
    \    let str_strongest = strength(strongest);\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let strength_ext = strength(extensions[i]);\n        if (strength_ext\
    \ > str_strongest) {\n            strongest = extensions[i];\n            str_strongest\
    \ = strength_ext;\n        }\n    }\n    return class_name + \".\" + strongest;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmprhhdhvaf.ts(19,25): error TS2304: Cannot find name ''strength''.

    ../../../../tmp/tmprhhdhvaf.ts(21,28): error TS2304: Cannot find name ''strength''.

    '
  timestamp: 1660335036
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength: number = -Infinity;\n\
    \    let strongest_extension: string = '';\n    for (let ext of extensions) {\n\
    \        let ext_strength: number = ext.split('').filter(c => /[A-Z]/.test(c)).length\
    \ - ext.split('').filter(c => /[a-z]/.test(c)).length;\n        if (ext_strength\
    \ > strength) {\n            strength = ext_strength;\n            strongest_extension\
    \ = ext;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335036
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let extension_strength: number[]\
    \ = [];\n    let strongest_extension: string = \"\";\n    for (let extension of\
    \ extensions) {\n        let cap: number = 0;\n        let sm: number = 0;\n \
    \       for (let letter of extension) {\n            if (letter == letter.toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        extension_strength.push(cap - sm);\n    }\n  \
    \  let max_strength: number = extension_strength[0];\n    let max_strength_index:\
    \ number = 0;\n    for (let i = 1; i < extension_strength.length; i++) {\n   \
    \     if (extension_strength[i] > max_strength) {\n            max_strength =\
    \ extension_strength[i];\n            max_strength_index = i;\n        }\n   \
    \ }\n    return class_name + \".\" + extensions[max_strength_index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpftngm4cy.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpftngm4cy.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335036
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  var strongest = 0;\n  var strongestName\
    \ = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let caps = 0;\n\
    \    let sm = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n     \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        caps++;\n\
    \      } else {\n        sm++;\n      }\n    }\n    if (caps - sm > strongest)\
    \ {\n      strongest = caps - sm;\n      strongestName = extensions[i];\n    }\n\
    \  }\n  return class_name + \".\" + strongestName;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp5h7cco3r.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5h7cco3r.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let results: number[] = [];\n  for\
    \ (let i = 0; i < extensions.length; i++) {\n    let cap: number = 0;\n    let\
    \ sm: number = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n    \
    \  if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        cap++;\n\
    \      } else {\n        sm++;\n      }\n    }\n    results.push(cap - sm);\n\
    \  }\n  let max: number = Math.max(...results);\n  let index: number = results.indexOf(max);\n\
    \  return `${class_name}.${extensions[index]}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpvpcqhd1j.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvpcqhd1j.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335036
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = 'A';\n\
    \    let strength = 0;\n    for (let extension of extensions) {\n        let temp_strength\
    \ = get_strength(extension);\n        if (temp_strength > strength) {\n      \
    \      strength = temp_strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmps7tlclvu.ts(21,29): error TS2304: Cannot find name ''get_strength''.

    '
  timestamp: 1660335036
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  const [strongest] = extensions.reduce((acc,\
    \ extension) => {\n    const str = extension.replace(/[^A-Z]/g, '').length - extension.replace(/[^a-z]/g,\
    \ '').length;\n    if (str > acc[0]) {\n      return [str, extension];\n    }\n\
    \    return acc;\n  }, [0, '']);\n  return `${class_name}.${strongest}`;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.2'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpdstosgdg.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdstosgdg.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.2',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335036
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strength: number[] = [];\n  let\
    \ char_arr: string[] = [];\n  let strong_extension: string = \"\";\n  let strong_index:\
    \ number = 0;\n  let strong_strength: number = 0;\n  let new_strength: number\
    \ = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    strength.push(getStrength(extensions[i]));\n\
    \  }\n  strong_strength = Math.max(...strength);\n  strong_index = strength.indexOf(strong_strength);\n\
    \  strong_extension = extensions[strong_index];\n  return class_name + \".\" +\
    \ strong_extension;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7gsg2bnq.ts(25,19): error TS2304: Cannot find name ''getStrength''.

    '
  timestamp: 1660335036
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongestExtension: string\
    \ = \"\";\n    let strongestExtensionStrength: number = 0;\n    for (let extension\
    \ of extensions) {\n        let strength: number = 0;\n        for (let letter\
    \ of extension) {\n            if (letter.match(/[A-Z]/)) {\n                strength++;\n\
    \            } else if (letter.match(/[a-z]/)) {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongestExtensionStrength)\
    \ {\n            strongestExtensionStrength = strength;\n            strongestExtension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongestExtension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpctknco2r.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpctknco2r.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strength: number = 0;\n   \
    \ let strong_extension: string = \"\";\n    extensions.forEach(extension => {\n\
    \        const extension_strength: number = (extension.split('').filter(char =>\
    \ char === char.toUpperCase()).length - extension.split('').filter(char => char\
    \ === char.toLowerCase()).length);\n        if (extension_strength > strength)\
    \ {\n            strength = extension_strength;\n            strong_extension\
    \ = extension;\n        }\n    });\n    return `${class_name}.${strong_extension}`;\n\
    }\n\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\n\
    console.log(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"]));\nconsole.log(Strongest_Extension(\"Testsn\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmptoc4947d.ts(32,633): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmptoc4947d.ts(33,1): error TS1005: '','' expected.

    ../../../../tmp/tmptoc4947d.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let result: string = class_name +\
    \ \".\" + extensions[0];\n  let strength: number = 0;\n  for (let i: number =\
    \ 0; i < extensions.length; i++) {\n    let current_strength: number = 0;\n  \
    \  let upper: number = 0;\n    let lower: number = 0;\n    for (let j: number\
    \ = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n        upper++;\n      } else {\n        lower++;\n      }\n    }\n    current_strength\
    \ = upper - lower;\n    if (current_strength > strength) {\n      strength = current_strength;\n\
    \      result = class_name + \".\" + extensions[i];\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_698kna7.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_698kna7.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    '
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Write your code here.\n    return\
    \ class_name;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi'\n\n\
    should loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmput_felwk.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmput_felwk.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return null;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpz6b1fhfq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz6b1fhfq.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let class_strength = 0;\n  let strongest_extension\
    \ = \"\";\n  let strongest_strength = 0;\n  for (let extension of extensions)\
    \ {\n    let strength = extension.split(\"\").reduce((sum, current) => {\n   \
    \   return current === current.toUpperCase() ? sum += 1 : sum -= 1;\n    }, 0);\n\
    \    if (strength > strongest_strength) {\n      strongest_strength = strength;\n\
    \      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfakwm4js.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfakwm4js.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension: string\
    \ = extensions[0];\n    let strongest_extension_strength: number = 0;\n    extensions.forEach(extension\
    \ => {\n        const strength: number = getStrength(extension);\n        if (strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = strength;\n        }\n    });\n  \
    \  return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpku1tm76m.ts(21,34): error TS2304: Cannot find name ''getStrength''.

    '
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest_extension = \"\"\
    ;\n    let strongest_strength = 0;\n    for (let extension of extensions) {\n\
    \        let cap = 0;\n        let sm = 0;\n        for (let letter of extension)\
    \ {\n            if (letter >= \"A\" && letter <= \"Z\") {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   let strength = cap - sm;\n        if (strength > strongest_strength) {\n \
    \           strongest_strength = strength;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpx7xhh8xb.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpx7xhh8xb.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    if (extensions.length === 0) {\n\
    \        return class_name;\n    }\n\n    let strongest_strength = 0;\n    let\
    \ strongest_strength_extension = \"\";\n    for (let i = 0; i < extensions.length;\
    \ i++) {\n        let extension = extensions[i];\n        let strength = 0;\n\
    \        for (let j = 0; j < extension.length; j++) {\n            if (extension[j]\
    \ === extension[j].toUpperCase()) {\n                strength++;\n           \
    \ } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_strength_extension = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_strength_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpvtltj2fz.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvtltj2fz.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335037
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    if (extensions.length === 0) return\
    \ `${class_name}.`;\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = getStrength(extensions[0]);\n    for (let i = 1; i < extensions.length; i++)\
    \ {\n        let curr_strength = getStrength(extensions[i]);\n        if (curr_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = curr_strength;\n        }\n    }\n\
    \    return `${class_name}.${strongest_extension}`;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjslejfgw.ts(20,40): error TS2304: Cannot find name ''getStrength''.

    ../../../../tmp/tmpjslejfgw.ts(22,29): error TS2304: Cannot find name ''getStrength''.

    '
  timestamp: 1660335037
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  // Write your code here\n  let strength\
    \ = 0;\n  let strongest_extension = \"\";\n  for (let i = 0; i < extensions.length;\
    \ i++) {\n    let cap = 0;\n    let sm = 0;\n    for (let j = 0; j < extensions[i].length;\
    \ j++) {\n      if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n  \
    \      cap += 1;\n      } else {\n        sm += 1;\n      }\n    }\n    let new_strength\
    \ = cap - sm;\n    if (new_strength > strength) {\n      strength = new_strength;\n\
    \      strongest_extension = extensions[i];\n    }\n  }\n  return class_name +\
    \ \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpqk5akkdx.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqk5akkdx.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335038
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongestExtension = '';\n\
    \    let strongestStrength = 0;\n    extensions.forEach(extension => {\n     \
    \   const strength = extension.split('').reduce((acc, curr) => {\n           \
    \ return acc + (curr === curr.toUpperCase() ? 1 : -1);\n        }, 0);\n     \
    \   if (strength > strongestStrength) {\n            strongestStrength = strength;\n\
    \            strongestExtension = extension;\n        }\n    });\n    return `${class_name}.${strongestExtension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgzg6lz3s.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgzg6lz3s.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335039
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strongest = { name: \"\", strength:\
    \ 0 };\n    extensions.forEach(ext => {\n        let upper = ext.split(\"\").filter(v\
    \ => v === v.toUpperCase()).length;\n        let lower = ext.split(\"\").filter(v\
    \ => v === v.toLowerCase()).length;\n        let strength = upper - lower;\n \
    \       if (strength > strongest.strength) {\n            strongest.name = ext;\n\
    \            strongest.strength = strength;\n        }\n    });\n    return `${class_name}.${strongest.name}`;\n\
    }\nconsole.log(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0agk7s4o.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0agk7s4o.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Slices.

    '
  timestamp: 1660335039
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    const ext = extensions.map(x =>\
    \ {\n        const CAP = /[A-Z]/g.test(x) ? x.match(/[A-Z]/g).length : 0;\n  \
    \      const SM = /[a-z]/g.test(x) ? x.match(/[a-z]/g).length : 0;\n        return\
    \ [CAP - SM, x]\n    }).sort((a, b) => b[0] - a[0]);\n    return class_name +\
    \ \".\" + ext[0][1];\n}\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\"]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmplkuaywnk.ts(22,23): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../tmp/tmplkuaywnk.ts(22,30): error TS2363: The right-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    '
  timestamp: 1660335038
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    //your code here\n    var maxIndex\
    \ = 0;\n    var maxValue = extensions[0].length;\n    extensions.forEach((x, i)\
    \ => {\n        var cap = x.match(/[A-Z]/g);\n        var small = x.match(/[a-z]/g);\n\
    \        var strength = (cap && cap.length || 0) - (small && small.length || 0);\n\
    \        if (strength > maxValue) {\n            maxValue = strength;\n      \
    \      maxIndex = i;\n        }\n    });\n    return class_name + \".\" + extensions[maxIndex];\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmpsraiq5i4.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsraiq5i4.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335039
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // Your code goes here\n    //\
    \ You must return the strongest extension's name.\n    var max_s = 0;\n    var\
    \ max_i = 0;\n    for (var i = 0; i < extensions.length; i++) {\n        var s\
    \ = 0;\n        for (var j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                s++;\n\
    \            } else {\n                s--;\n            }\n        }\n      \
    \  if (s > max_s) {\n            max_s = s;\n            max_i = i;\n        }\n\
    \    }\n    return class_name + \".\" + extensions[max_i];\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp_nfpwhaa.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_nfpwhaa.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335039
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    var strength: number[] = [];\n\
    \    var count: number = 0;\n    for (var i: number = 0; i < extensions.length;\
    \ i++) {\n        for (var j: number = 0; j < extensions[i].length; j++) {\n \
    \           if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n     \
    \           count++;\n            }\n        }\n        strength.push(count -\
    \ (extensions[i].length - count));\n        count = 0;\n    }\n    var max: number\
    \ = Math.max(...strength);\n    return class_name + \".\" + extensions[strength.indexOf(max)];\n\
    }\nconsole.log(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6t5zptqd.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6t5zptqd.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'my_class.AA

    '
  timestamp: 1660335039
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let counter_obj = {};\n    let\
    \ caps = 0;\n    let smalls = 0;\n    let class_name_arr = class_name.split(\"\
    \");\n    class_name_arr.forEach(char => {\n        if (char === char.toUpperCase())\
    \ {\n            caps++;\n        } else {\n            smalls++;\n        }\n\
    \    });\n    let strength = caps - smalls;\n    counter_obj[class_name] = strength;\n\
    \    for (let extension of extensions) {\n        let ext_arr = extension.split(\"\
    \");\n        let caps = 0;\n        let smalls = 0;\n        ext_arr.forEach(char\
    \ => {\n            if (char === char.toUpperCase()) {\n                caps++;\n\
    \            } else {\n                smalls++;\n            }\n        });\n\
    \        let ext_strength = caps - smalls;\n        counter_obj[extension] = ext_strength;\n\
    \    }\n    let sorted_counter_obj = Object.entries(counter_obj).sort((a, b) =>\
    \ {\n        if (a[1] === b[1]) {\n            return 1;\n        } else {\n \
    \           return b[1] - a[1];\n        }\n    });\n    let class_name_extension\
    \ = `${sorted_counter_obj[0][0]}.${sorted_counter_obj[1][0]}`;\n    return class_name_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpkia3du0a.ts(49,20): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../tmp/tmpkia3du0a.ts(49,27): error TS2363: The right-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    '
  timestamp: 1660335039
- exit_code: 0
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let class_ext = class_name;\n  let\
    \ str_ext: number[] = [];\n  let pos_ext: number[] = [];\n  let max_str: number\
    \ = -2;\n  for (let ext of extensions) {\n    let up_count: number = 0;\n    let\
    \ low_count: number = 0;\n    for (let char of ext) {\n      if (char.match(/[A-Z]/))\
    \ {\n        up_count += 1;\n      } else if (char.match(/[a-z]/)) {\n       \
    \ low_count += 1;\n      }\n    }\n    str_ext.push(up_count - low_count);\n \
    \   if (up_count - low_count > max_str) {\n      max_str = up_count - low_count;\n\
    \    }\n  }\n  for (let i = 0; i < str_ext.length; i++) {\n    if (str_ext[i]\
    \ === max_str) {\n      pos_ext.push(i);\n    }\n  }\n  if (pos_ext.length > 1)\
    \ {\n    class_ext += \".\" + extensions[pos_ext[0]];\n  } else {\n    class_ext\
    \ += \".\" + extensions[pos_ext[0]];\n  }\n  return class_ext;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660335039
- exit_code: 2
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    return class_name + \".\" + Get_Strongest_Extension(extensions);\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpevpbpq7r.ts(18,31): error TS2304: Cannot find name ''Get_Strongest_Extension''.

    '
  timestamp: 1660335039
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    let strong = 0;\n    let strongest_index\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let ext = extensions[i];\n\
    \        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j < ext.length;\
    \ j++) {\n            let char = ext[j];\n            if (char >= 'A' && char\
    \ <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        let strength = cap - sm;\n        if (strong\
    \ < strength) {\n            strong = strength;\n            strongest_index =\
    \ i;\n        }\n    }\n    return class_name + \".\" + extensions[strongest_index];\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Watashi.tEN'\n\
    \nshould loosely deep-equal\n\n'Watashi.eIGHt8OKe'\n    at test (/tmp/tmp_duaz2yo.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_duaz2yo.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n\
    \  expected: 'Watashi.eIGHt8OKe',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335039
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n  let strongest: string = \"\";\n \
    \ let strongestVal: number = 0;\n  extensions.forEach((extension) => {\n    let\
    \ cap: number = 0;\n    let sm: number = 0;\n    extension.split(\"\").forEach((letter)\
    \ => {\n      if (letter == letter.toUpperCase()) {\n        cap++;\n      } else\
    \ {\n        sm++;\n      }\n    });\n    let strength: number = cap - sm;\n \
    \   if (strength > strongestVal) {\n      strongest = extension;\n      strongestVal\
    \ = strength;\n    }\n  });\n  return `${class_name}.${strongest}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkiyu8nmh.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkiyu8nmh.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335039
- exit_code: 1
  program: "//You will be given the name of a class (a string) and an array of extensions.\n\
    // The extensions are to be used to load additional classes to the class. The\n\
    // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    // letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n// You should find the strongest extension and return a string in this \n\
    // format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
    \ with the same strength, you should\n// choose the one that comes first in the\
    \ array.\n// For example, if you are given \"Slices\" as the class and an array\
    \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name:\
    \ string, extensions: string[]): string {\n    // your code here\n    let uppercase:\
    \ string[] = [];\n    let lowercase: string[] = [];\n    let result: string =\
    \ \"\";\n    let strength: number = 0;\n    let high: number = 0;\n    let final_string:\
    \ string = \"\";\n    for (let index = 0; index < extensions.length; index++)\
    \ {\n        result = extensions[index];\n        for (let i = 0; i < result.length;\
    \ i++) {\n            let a = result.charAt(i);\n            if (a == a.toUpperCase())\
    \ {\n                uppercase.push(a);\n            }\n            else {\n \
    \               lowercase.push(a);\n            }\n        }\n        strength\
    \ = uppercase.length - lowercase.length;\n        if (strength > high) {\n   \
    \         high = strength;\n            final_string = result;\n        }\n  \
    \      uppercase = [];\n        lowercase = [];\n    }\n    return class_name\
    \ + \".\" + final_string;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\
    \nshould loosely deep-equal\n\n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprdrkieiy.js:51:12)\n\
    \    at Object.<anonymous> (/tmp/tmprdrkieiy.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660335039
