name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["  return decimal.toString(2);\n}\n", "  const binary = [];\n  for (let\
    \ i = 0; i < 8; i++) {\n    binary.push(Math.floor(decimal % 2));\n    decimal\
    \ = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary.reverse().join(\"\"\
    ) + \"db\";\n}\n", "    const binary: string = decimal.toString(2);\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    return `db${decimal.toString(2)}db`;\n\
    }\n", "    return 'db' + decimal.toString(2) + 'db';\n}\n", "  let result = \"\
    db\";\n  let remainder = 0;\n  while (decimal > 0) {\n    remainder = decimal\
    \ % 2;\n    decimal = Math.floor(decimal / 2);\n    result = result + remainder;\n\
    \  }\n  result = result + \"db\";\n  return result;\n}", "  return;\n}\n", " \
    \   let binary: string = \"\";\n    let i: number = 32;\n    while (i >= 0) {\n\
    \        let temp: number = decimal >> i;\n        if (temp & 1) {\n         \
    \   binary += \"1\";\n        } else {\n            binary += \"0\";\n       \
    \ }\n        i--;\n    }\n    binary = \"db\" + binary + \"db\";\n    return binary;\n\
    }\nconsole.log(decimal_to_binary(15));\n", "  return \"db\" + parseInt(decimal,\
    \ 10).toString(2) + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) +\
    \ \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   let result = '';\n    let number = decimal;\n    while (number > 0) {\n  \
    \      if (number % 2 === 0) {\n            result = '0' + result;\n        }\
    \ else {\n            result = '1' + result;\n        }\n        number = Math.floor(number\
    \ / 2);\n    }\n    return 'db' + result + 'db';\n}\n", "  return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "  return decimal.toString(2);\n}\n", "    let binary = decimal.toString(2);\n\
    \    return \"db\" + binary + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n",
  "  let binary = \"\";\n  binary += \"db\";\n  for (let i = 0; i < 6; i++) {\n  \
    \  if (decimal - Math.pow(2, 5 - i) >= 0) {\n      binary += \"1\";\n      decimal\
    \ -= Math.pow(2, 5 - i);\n    } else {\n      binary += \"0\";\n    }\n  }\n \
    \ binary += \"db\";\n  return binary;\n}\n", "  let binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = (decimal % 2).toString() + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "  if (decimal === 0) {\n    return \"\
    db0db\";\n  }\n  let bin = \"\";\n  for (let i = decimal; i > 0; i = Math.floor(i\
    \ / 2)) {\n    bin = (i % 2) + bin;\n  }\n  return \"db\" + bin + \"db\";\n}\n",
  "  let result = 'db';\n  let num = decimal;\n  do {\n    result += num % 2;\n  \
    \  num = Math.floor(num / 2);\n  } while (num > 0);\n  return result.split('').reverse().join('')\
    \ + 'db';\n}\n", "  let output = \"db\";\n  let dec = decimal;\n  while (dec >\
    \ 0) {\n    output += dec % 2;\n    dec = Math.floor(dec / 2);\n  }\n  output\
    \ += \"db\";\n  return output;\n}\n", "    var binary = \"\";\n    while (decimal\
    \ >= 1) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return \"db\" + binary + \"db\";\n}\n", "  let string = \"\
    db\";\n  while (decimal > 0) {\n    string += decimal % 2;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return string + \"db\";\n}\n", "  const binaryString = decimal.toString(2);\n\
    \  const binaryStringWithPadding = \"db\" + binaryString + \"db\";\n  return binaryStringWithPadding;\n\
    }\n", "    let result = '';\n    while (decimal) {\n        if (decimal % 2 ===\
    \ 0) {\n            result = '0' + result;\n        } else {\n            result\
    \ = '1' + result;\n        }\n        decimal = Math.floor(decimal / 2);\n   \
    \ }\n    if (result.length < 8) {\n        result = '0'.repeat(8 - result.length)\
    \ + result;\n    }\n    return 'db' + result + 'db';\n}\n", "    var binary =\
    \ \"\";\n    let remainder = decimal;\n    while (remainder != 0) {\n        binary\
    \ = remainder % 2 + binary;\n        remainder = Math.floor(remainder / 2);\n\
    \    }\n    let db = \"db\";\n    return db + binary + db;\n}\n\nconsole.log(decimal_to_binary(12));\n",
  "  if (decimal < 0) {\n    return \"db\" + decimal_to_binary(-decimal) + \"db\"\
    ;\n  } else if (decimal == 0) {\n    return \"db0db\";\n  } else {\n    return\
    \ \"db\" + decimal_to_binary(Math.floor(decimal / 2)) + (decimal % 2) + \"db\"\
    ;\n  }\n}\n", "  return 'db' + decimal.toString(2) + 'db';\n}\n", "  return `db${decimal.toString(2)}db`;\n\
    }\n", "  let db: string = \"db\";\n  return db + decimal.toString(2) + db;\n}\n",
  "    var s = \"db\";\n    for (var i = Math.floor(Math.log2(decimal)); i >= 0; i--)\
    \ {\n        if (decimal >= Math.pow(2, i)) {\n            s += \"1\";\n     \
    \       decimal -= Math.pow(2, i);\n        } else {\n            s += \"0\";\n\
    \        }\n    }\n    return s + \"db\";\n}\n", "  let result = \"db\";\n  while\
    \ (decimal > 0) {\n    result += decimal % 2;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return result + \"db\";\n}\n", "    const binaryString = decimal.toString(2);\n\
    \    return `db${binaryString}db`;\n}\n", "  const binary = decimal.toString(2);\n\
    \  return `db${binary}db`;\n}\n", "    // todo\n    return 'db' + decimal.toString(2)\
    \ + 'db';\n}\n\ndescribe('decimal_to_binary', () => {\n    it('should convert\
    \ to binary', () => {\n        assert.equal(decimal_to_binary(15), 'db1111db');\n\
    \        assert.equal(decimal_to_binary(32), 'db100000db');\n    });\n});\n",
  "    let arr: string[] = [];\n    let db = 'db';\n    while (decimal > 0) {\n  \
    \      arr.push(decimal % 2);\n        decimal = Math.floor(decimal / 2);\n  \
    \  }\n    arr.push(db);\n    arr.unshift(db);\n    return arr.reverse().join('');\n\
    }\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));",
  "  const binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n", "  return\
    \ \"db\" + decimal.toString(2) + \"db\";\n}\n", "    const result = []\n    while\
    \ (decimal > 0) {\n        result.push(decimal % 2)\n        decimal = Math.floor(decimal\
    \ / 2)\n    }\n    return 'db' + result.reverse().join('') + 'db'\n}\n", "   \
    \ var result: string = \"db\";\n    var n: number = Math.floor(decimal);\n   \
    \ var arr: number[] = [];\n    for (var i: number = 0; i < 8; i++) {\n       \
    \ arr.push(n % 2);\n        n = Math.floor(n / 2);\n    }\n    arr.reverse();\n\
    \    for (var i: number = 0; i < arr.length; i++) {\n        result += arr[i];\n\
    \    }\n    result += \"db\";\n    return result;\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));", "    let str = \"db\";\n    while (decimal\
    \ > 0) {\n        str += Math.floor(decimal % 2);\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return str + \"db\";\n}\n", "    let result = [];\n    let\
    \ quotient = decimal;\n    do {\n        result.push(quotient % 2 === 0 ? 0 :\
    \ 1);\n        quotient = quotient / 2;\n    } while (quotient >= 1);\n    return\
    \ `db${result.reverse().join('')}db`;\n}\n", "    var str: string = \"db\";\n\
    \    while (decimal > 0) {\n        var remainder: number = decimal % 2;\n   \
    \     decimal = Math.floor(decimal / 2);\n        str = str + remainder;\n   \
    \ }\n    return str + \"db\";\n}\nconsole.log(decimal_to_binary(decimal));", " \
    \   let binary = \"\";\n    while (decimal > 0) {\n        if (decimal % 2 ===\
    \ 0) {\n            binary = \"0\" + binary;\n        } else {\n            binary\
    \ = \"1\" + binary;\n        }\n        decimal = Math.floor(decimal / 2);\n \
    \   }\n    binary = \"db\" + binary + \"db\";\n    return binary;\n}\n", "   \
    \ return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  return 'db' + (decimal\
    \ >>> 0).toString(2) + 'db';\n}\n", "    let binary = decimal.toString(2);\n \
    \   return `db${binary}db`;\n}\nconsole.log(decimal_to_binary(15));\n", "  if\
    \ (decimal === 0) {\n    return \"db0db\";\n  }\n  let result = \"db\";\n  while\
    \ (decimal > 0) {\n    result += decimal % 2;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return result + \"db\";\n}\n", "  let binary: string = '';\n \
    \ while (decimal !== 0) {\n    if (decimal % 2 === 0) {\n      binary = '0' +\
    \ binary;\n    } else {\n      binary = '1' + binary;\n    }\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return 'db' + binary + 'db';\n}\n", "  let binary = '';\n  while\
    \ (decimal > 0) {\n    binary = decimal % 2 + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return 'db' + binary + 'db';\n}\n", "    return 'db' + decimal.toString(2)\
    \ + 'db';\n}\n", "    // result = \"db\";\n    // while (decimal > 0) {\n    //\
    \     if (decimal%2 == 0) {\n    //         result = result + \"0\";\n    // \
    \    } else {\n    //         result = result + \"1\";\n    //     }\n    // \
    \    decimal = Math.floor(decimal/2);\n    // }\n    // result = result + \"db\"\
    ;\n    // return result;\n    let result = [];\n    result.push(\"db\");\n   \
    \ while (decimal > 0) {\n        if (decimal%2 == 0) {\n            result.push(\"\
    0\");\n        } else {\n            result.push(\"1\");\n        }\n        decimal\
    \ = Math.floor(decimal/2);\n    }\n    result.push(\"db\");\n    return result.reverse().join(\"\
    \");\n}\n\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n\
    console.log(decimal_to_binary(26));\nconsole.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(56));\n\
    console.log(decimal_to_binary(67));\nconsole.log(decimal_to_binary(34));\nconsole.log(decimal_to_binary(86));\n\
    console.log(decimal_to_binary(35));\nconsole.log(decimal_to_binary(27));\nconsole.log(decimal_to_binary(45));\n\
    console.log(decimal_to_binary(3));\nconsole.log(decimal_to_binary(72));\nconsole.log(decimal_to_binary(18));\n\
    console.log(decimal_to_binary(98));\nconsole.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(84));\n\
    console.log(decimal_to_binary(18));\nconsole.log(decimal_to_binary(56));\nconsole.log(decimal_to_binary(32));\n\
    console.log(decimal_to_binary(59));\nconsole.log(decimal_to_binary(94));\nconsole.log(",
  "  let binary: string = \"\";\n  let remainder: number;\n  while (decimal >= 1)\
    \ {\n    remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n  \
    \  binary = String(remainder) + binary;\n  }\n  binary = \"db\" + binary + \"\
    db\";\n  return binary;\n}\n", "    const binary = (+decimal).toString(2);\n \
    \   return `db${binary}db`;\n}\n\n", "    let bin = '';\n    while (decimal >=\
    \ 1) {\n        bin = bin + (decimal % 2).toString();\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    bin = bin.split('').reverse().join('');\n    return `db${bin}db`;\n\
    }", "    let str = \"db\";\n    while (decimal >= 1) {\n        str += decimal\
    \ % 2;\n        decimal = Math.floor(decimal / 2);\n    }\n    str += \"db\";\n\
    \    return str.split(\"\").reverse().join(\"\");\n}\n", "  if (decimal < 0) {\n\
    \    return 'db' + decimal.toString(2) + 'db';\n  } else {\n    return 'db' +\
    \ decimal.toString(2) + 'db';\n  }\n}\n", "    let result = \"db\";\n    if (decimal\
    \ === 0) {\n        result += \"0\";\n    } else {\n        while (decimal > 0)\
    \ {\n            if (decimal % 2 === 0) {\n                result += \"0\";\n\
    \            } else {\n                result += \"1\";\n            }\n     \
    \       decimal = Math.floor(decimal / 2);\n        }\n    }\n    result += \"\
    db\";\n    return result;\n}\n", "    let result = `db`;\n    let binary = decimal.toString(2);\n\
    \    result += binary;\n    result += `db`;\n    return result;\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "    let result = 'db';\n    while (decimal\
    \ !== 0) {\n        result += decimal % 2;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return result.split('').reverse().join('') + 'db';\n}\n",
  "    var binary = \"\";\n    if (decimal === 0) {\n        return \"db00000000db\"\
    ;\n    }\n    while (decimal > 0) {\n        if (decimal % 2 === 0) {\n      \
    \      binary = \"0\" + binary;\n        } else {\n            binary = \"1\"\
    \ + binary;\n        }\n        decimal = Math.floor(decimal / 2);\n    }\n  \
    \  // If 8 chars not reached, add 0s\n    while (binary.length < 8) {\n      \
    \  binary = \"0\" + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n",
  "    let binary: string = \"\";\n    for (; decimal > 0; decimal /= 2) {\n     \
    \   binary = decimal % 2 + binary;\n    }\n    return `db${binary}db`;\n}\n",
  "  return 'db' + decimal.toString(2) + 'db';\n}\n", "    let result = \"db\";\n\
    \    let remainder = decimal;\n    while (remainder !== 0) {\n        if (remainder\
    \ % 2 === 0) {\n            result = \"0\" + result;\n        } else {\n     \
    \       result = \"1\" + result;\n        }\n        remainder = Math.floor(remainder\
    \ / 2);\n    }\n    return result + \"db\";\n}", "    const binary: number[] =\
    \ [];\n    let dbStr: string = 'db';\n    if (decimal > 0) {\n        let quotient:\
    \ number = Math.floor(decimal / 2);\n        let reminder: number = decimal %\
    \ 2;\n        binary.push(reminder);\n        while (quotient > 0) {\n       \
    \     reminder = quotient % 2;\n            quotient = Math.floor(quotient / 2);\n\
    \            binary.push(reminder);\n        }\n        const length: number =\
    \ binary.length;\n        for (let i: number = 0; i < length; i++) {\n       \
    \     dbStr += binary[length - i - 1];\n        }\n        dbStr += 'db';\n  \
    \  } else {\n        dbStr += '0db';\n    }\n    return dbStr;\n}\n\nconst str:\
    \ string = decimal_to_binary(15);\nconsole.log(str);\n", "    const binary: string\
    \ = decimal.toString(2);\n    const result: string = \"db\" + binary + \"db\"\
    ;\n    return result;\n}\n\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2).toString()\
    \ + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  binary = \"db\" +\
    \ binary + \"db\";\n  return binary;\n}\n", "    let binary: string = \"\";\n\
    \    let n = decimal;\n    do {\n        binary = (n % 2) + binary;\n        n\
    \ = Math.floor(n / 2);\n    } while (n > 0);\n    return \"db\" + \"0\".repeat(7\
    \ - binary.length) + binary + \"db\";\n}\n", "    const binary: string = (decimal\
    \ >>> 0).toString(2);\n    return `db${binary}db`;\n}\ndecimal_to_binary(15);\n",
  "    let result = \"db\";\n    let str = \"\";\n    while (decimal > 0) {\n    \
    \    if (decimal % 2 == 0) {\n            str = \"0\" + str;\n        } else {\n\
    \            str = \"1\" + str;\n        }\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    result += str + \"db\";\n    return result;\n}\n", "  let\
    \ binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2).toString()\
    \ + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary\
    \ + \"db\";\n}\n", "  let binary = 'db';\n  for (let i = 0; i < 8; i++) {\n  \
    \  const power = Math.pow(2, 7 - i);\n    if (decimal < power) {\n      binary\
    \ += '0';\n    } else {\n      binary += '1';\n      decimal -= power;\n    }\n\
    \  }\n  return binary + 'db';\n}\n", "    return decimal.toString(2)\n}\n", " \
    \ return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary_string\
    \ = '';\n    let binary_stack = [];\n    let binary_num = decimal;\n    let stack_top:\
    \ string;\n    while (binary_num >= 1) {\n        stack_top = (binary_num % 2).toString();\n\
    \        binary_stack.push(stack_top);\n        binary_num = Math.floor(binary_num\
    \ / 2);\n    }\n    while (binary_stack.length !== 0) {\n        binary_string\
    \ += binary_stack.pop();\n    }\n    return `db${binary_string}db`;\n}\n", " \
    \   let binary = \"\";\n    do {\n        binary = String(decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    } while (decimal > 0);\n    binary\
    \ = `db${binary}db`;\n    return binary;\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "  if (typeof decimal !== \"number\")\
    \ return \"Input must be of type number\";\n  let res = \"db\";\n  let binary\
    \ = parseInt(decimal, 10).toString(2);\n  while (binary.length < 8) {\n    binary\
    \ = \"0\" + binary;\n  }\n  return res + binary + \"db\";\n}\n", "  return 'db'\
    \ + decimal.toString(2) + 'db';\n}\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "    let binary: string = '';\n    while (decimal > 0) {\n        binary = (decimal\
    \ % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ 'db' + binary + 'db';\n}\n", "  return `db${decimal.toString(2)}db`;\n}\n\n\
    console.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n", " \
    \   let binary = 'db';\n    let num = decimal;\n    while (num) {\n        binary\
    \ += num % 2;\n        num = Math.floor(num / 2);\n    }\n    binary += 'db';\n\
    \    return binary.split('').reverse().join('');\n}\n", "  return (\n    'db'\
    \ +\n    decimal\n      .toString(2)\n      .split('')\n      .reverse()\n   \
    \   .join('')\n      .padEnd(8, '0')\n      .split('')\n      .reverse()\n   \
    \   .join('') +\n    'db'\n  );\n}\n", "  if (!decimal) {\n    return \"db0db\"\
    ;\n  }\n\n  let binary = \"\";\n  while (decimal) {\n    binary = (decimal % 2)\
    \ + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return \"db\" +\
    \ binary + \"db\";\n}\n", "  return \"db\" + decimal.toString(2) + \"db\";\n}\n",
  "    let result = \"db\";\n    let reminder = 0;\n    let result_reversed = '';\n\
    \    let is_end = false;\n    while (!is_end) {\n        reminder = decimal %\
    \ 2;\n        decimal = Math.floor(decimal / 2);\n        if (decimal === 0) {\n\
    \            is_end = true;\n        }\n        result += reminder;\n    }\n \
    \   result += \"db\";\n    // reverse string\n    for (let i = result.length -\
    \ 1; i >= 0; i--) {\n        result_reversed += result[i];\n    }\n    return\
    \ result_reversed;\n}\nconsole.log(decimal_to_binary(1));\nconsole.log(decimal_to_binary(3));\n\
    console.log(decimal_to_binary(4));\nconsole.log(decimal_to_binary(7));\nconsole.log(decimal_to_binary(9));\n\
    console.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(63));\n\
    console.log(decimal_to_binary(64));\nconsole.log(decimal_to_binary(79));\nconsole.log(decimal_to_binary(127));\n\
    console.log(decimal_to_binary(128));\nconsole.log(decimal_to_binary(255));\nconsole.log(decimal_to_binary(256));\n\
    console.log(decimal_to_binary(511));\nconsole.log(decimal_to_binary(512));\nconsole.log(decimal_to_binary(1023));\n\
    console.log(decimal_to_binary(1024));\nconsole.log(decimal_to_binary(2047));\n\
    console.log(decimal_to_binary(2048));\nconsole.log(decimal_to_binary(4095));\n\
    console.log(decimal_to_binary(4096));\nconsole.log(decimal_to_binary(8191));\n\
    console.log(decimal_to_binary(8192));\nconsole.log(decimal_to_binary(16383));",
  "  let binary = \"\";\n  let charNum = 0;\n  for (let i = 0; i < decimal; i++) {\n\
    \    charNum += 1;\n    binary += \"1\";\n    if (charNum == 8) {\n      binary\
    \ += \" \";\n      charNum = 0;\n    }\n  }\n  binary = \"db\" + binary + \"db\"\
    ;\n  return binary;\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n\
    }\n", "  const binary = decimal.toString(2);\n  return `db${binary}db`;\n}\n",
  "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}\n", "  let binaryString = \"db\";\n  if (decimal === 0) {\n   \
    \ return \"db0db\";\n  }\n  while (decimal > 0) {\n    if (decimal % 2 === 0)\
    \ {\n      binaryString += \"0\";\n    } else {\n      binaryString += \"1\";\n\
    \    }\n    decimal = Math.floor(decimal / 2);\n  }\n  binaryString += \"db\"\
    ;\n  return binaryString\n    .split(\"\")\n    .reverse()\n    .join(\"\");\n\
    }\n\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n\
    console.log(decimal_to_binary(0));\n", "    let myBinary = 'db';\n    for (let\
    \ n = decimal; n > 0; n /= 2) {\n        myBinary = myBinary + Math.floor(n %\
    \ 2);\n    }\n    return myBinary + 'db';\n}\n", "  return `db${decimal.toString(2)}db`;\n\
    }\n", "    return 'db' + parseInt(decimal, 10).toString(2) + 'db';\n}\n", "  \
    \  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  // Use the built-in\
    \ function `toString()` to convert an integer to a string.\n  // `toString()`\
    \ takes an optional parameter, representing the base you want\n  // to convert\
    \ to.\n  // (default is 10, meaning \"Decimal\", to convert to binary pass 2 as\
    \ the base)\n  // Returns a string.\n\n  // TODO: use `toString()` to convert\
    \ the `decimal` to a binary string\n  //       and add 'db' to the beginning and\
    \ end of the result\n\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n",
  "  let str = \"db\";\n  let num = 0;\n  while (decimal > 0) {\n    str += decimal\
    \ % 2;\n    decimal = Math.floor(decimal / 2);\n  }\n  str += \"db\";\n  return\
    \ str\n    .split(\"\")\n    .reverse()\n    .join(\"\");\n}\n", "    // Write\
    \ your code here.\n    let result: string = \"db\";\n    let remain: number =\
    \ 0;\n    while (decimal != 0) {\n        remain = decimal % 2;\n        decimal\
    \ = Math.floor(decimal / 2);\n        result = remain + result;\n    }\n    result\
    \ += \"db\";\n    return result;\n}\n", "  return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary: string = decimal.toString(2);\n    binary\
    \ = \"db\" + binary + \"db\";\n    return binary;\n}\n\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(28));\n", " \
    \   let binary: string = \"\";\n    binary = \"db\" + decimal.toString(2) + \"\
    db\";\n    return binary;\n}\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "  let binary = [];\n  while (decimal > 0) {\n    binary.unshift(decimal % 2);\n\
    \    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary.join(\"\
    \") + \"db\";\n}", "    const bin = decimal.toString(2);\n    return \"db\" +\
    \ bin + \"db\";\n}\n", "  return 'db' + parseInt(decimal.toString(2)) + 'db';\n\
    }\n", "    return `db${decimal.toString(2)}db`;\n}\n\nconsole.log(decimal_to_binary(32));\n",
  "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  const decimal_to_binary\
    \ = decimal.toString(2);\n  return `db${decimal_to_binary}db`;\n}\n", "  let result\
    \ = \"db\";\n  while (decimal !== 0) {\n    result += decimal % 2;\n    decimal\
    \ = Math.floor(decimal / 2);\n  }\n  return result + \"db\";\n}\n", "    return\
    \ (decimal) ? \"db\" + (+decimal).toString(2) + \"db\" : \"db0db\";\n}\n\n", " \
    \ return 'd' + decimal.toString(2) + 'b';\n}\n", "    const binary = []\n    while\
    \ (decimal > 0) {\n        binary.push(decimal % 2)\n        decimal = Math.floor(decimal\
    \ / 2)\n    }\n    return 'db' + binary.reverse().join('') + 'db'\n}\n", "  let\
    \ bin = \"\";\n  let num = decimal;\n  let mod: number;\n  while (num > 0) {\n\
    \    mod = num % 2;\n    num = Math.floor(num / 2);\n    bin = mod + bin;\n  }\n\
    \  return \"db\" + bin + \"db\";\n}\n", "    let binary: string = '';\n    while\
    \ (decimal >= 1) {\n        if (decimal % 2 === 0) {\n            binary = '0'\
    \ + binary;\n        } else {\n            binary = '1' + binary;\n        }\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    binary = 'db' + binary\
    \ + 'db';\n    return binary;\n}", "    const bin = (decimal >>> 0).toString(2);\n\
    \    return `db${bin}db`;\n}\n", "    //TODO\n    return;\n}\n", "    let result\
    \ = \"db\";\n    while (decimal > 0) {\n        result += String(decimal % 2);\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return result + \"db\"\
    ;\n}\n", "    const result = decimal.toString(2);\n    return `db${result}db`;\n\
    }\n", "  let binaryString = \"db\";\n  while (decimal > 0) {\n    binaryString\
    \ += decimal % 2;\n    decimal = Math.floor(decimal / 2);\n  }\n  binaryString\
    \ += \"db\";\n  return binaryString.split(\"\").reverse().join(\"\");\n}\n", " \
    \ return 'db' + decimal.toString(2) + 'db';\n}\n", "    return 'db' + decimal.toString(2)\
    \ + 'db';\n}\n", "  let result = \"db\";\n  let binary: number[] = [];\n  while\
    \ (decimal >= 1) {\n    binary.push(decimal % 2);\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  while (binary.length < 8) {\n    binary.push(0);\n  }\n  binary.reverse();\n\
    \  result += binary.join(\"\");\n  result += \"db\";\n  return result;\n}\n",
  "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    let final_number: string = \"\";\n    while (decimal != 0) {\n\
    \        binary += decimal % 2;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    final_number = \"db\" + binary.split(\"\").reverse().join(\"\") +\
    \ \"db\";\n    return final_number;\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));", "  const result = [];\n  while (decimal\
    \ > 0) {\n    result.unshift(decimal % 2);\n    decimal = Math.floor(decimal /\
    \ 2);\n  }\n  return `db${result.join(\"\")}db`;\n}\n\nconsole.log(decimal_to_binary(15));\n",
  "    // Good luck!\n    let binary = \"\";\n    if (decimal === 0) {\n        return\
    \ \"db00000db\";\n    }\n    while (decimal !== 0) {\n        let remainder =\
    \ decimal % 2;\n        decimal = (decimal - remainder) / 2;\n        binary =\
    \ remainder + binary;\n    }\n    return \"db\" + binary + \"db\";\n}\n", "  \
    \  let binary_list: string[] = []\n    let binary: string = 'db'\n    while (decimal\
    \ !== 0) {\n        binary_list.push(decimal % 2)\n        decimal = Math.floor(decimal\
    \ / 2)\n    }\n    binary_list.reverse()\n    for (let i = 0; i < binary_list.length;\
    \ i++) {\n        binary += binary_list[i]\n    }\n    binary += 'db'\n    return\
    \ binary\n}\nconsole.log(decimal_to_binary(15))\n\n", "    const isNegative =\
    \ decimal < 0;\n    const binary = (decimal >>> 0).toString(2);\n    return isNegative\
    \ ? \"db\" + binary + \"db\" : \"db\" + binary + \"db\";\n}\n", "  return '';\n\
    }\n", "    const bin = decimal.toString(2);\n    return 'db' + bin + 'db';\n}\n",
  "  let binary = \"\";\n  while (decimal > 0) {\n    binary = (decimal % 2).toString()\
    \ + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  binary = \"db\" +\
    \ binary + \"db\";\n  return binary;\n}\n", "  const remainders: number[] = [];\n\
    \  let quotient: number = decimal;\n  while (quotient !== 0) {\n    const remainder:\
    \ number = quotient % 2;\n    remainders.push(remainder);\n    quotient = Math.floor(quotient\
    \ / 2);\n  }\n  return 'db' + remainders.reverse().join('') + 'db';\n}\n", " \
    \   return \"db\" + decToBin(decimal) + \"db\";\n}\n", "    let binary = 'db';\n\
    \    while (decimal > 0) {\n        binary += decimal % 2;\n        decimal =\
    \ Math.floor(decimal / 2);\n    }\n    return binary + 'db';\n}\n", "  return\
    \ \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let remainders: string[]\
    \ = [];\n    let power: number = 0;\n    let binary: string = \"\";\n    let db:\
    \ string = \"db\";\n    while (decimal >= Math.pow(2, power)) {\n        remainders.push(decimal\
    \ % 2);\n        decimal = Math.floor(decimal / 2);\n        power++;\n    }\n\
    \    if (decimal > 0) {\n        remainders.push(decimal);\n    }\n    remainders.reverse();\n\
    \    remainders.forEach(function (element) {\n        binary += element.toString();\n\
    \    });\n    return db + binary + db;\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "    return decimal.toString(2);\n}\n\n\
    \n", "    let binary: string = \"\";\n    binary = \"db\" + decimal.toString(2)\
    \ + \"db\";\n    return binary;\n}\n", "  const result = decimal.toString(2);\n\
    \  return `db${result}db`;\n}\n", "    return decimal.toString(2);\n}\n", "  \
    \  // Good luck!\n    let newString = \"db\";\n    let isEven = true;\n    while\
    \ (decimal != 0) {\n        if (decimal % 2 === 0) {\n            newString +=\
    \ \"0\";\n        } else {\n            newString += \"1\";\n        }\n     \
    \   decimal = Math.floor(decimal / 2);\n    }\n    newString += \"db\";\n    return\
    \ newString;\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "  let binary: string = \"\";\n  for (let\
    \ i = 0; i < 8; i++) {\n    if (decimal >= Math.pow(2, 7 - i)) {\n      binary\
    \ += \"1\";\n      decimal -= Math.pow(2, 7 - i);\n    } else {\n      binary\
    \ += \"0\";\n    }\n  }\n  return `db${binary}db`;\n}\n", "    return `db${decimal.toString(2)}db`;\n\
    }\n", "    // a string with \"db\" in the beginning and end\n    let bin: string\
    \ = \"db\";\n    while (decimal > 0) {\n        if (decimal % 2) {\n         \
    \   bin += \"1\";\n        } else {\n            bin += \"0\";\n        }\n  \
    \      decimal = Math.floor(decimal / 2);\n    }\n    bin += \"db\";\n    return\
    \ bin;\n}\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2)\
    \ + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db'\
    \ + binary + 'db';\n}\n", "  let binary = decimal.toString(2);\n  let new_binary\
    \ = \"db\" + binary + \"db\";\n  return new_binary;\n}\n", "  const result = \"\
    db\" + decimal.toString(2) + \"db\";\n  return result;\n}\nconsole.log(decimal_to_binary(15));\n",
  "  let binaryString = \"db\";\n  let remaining = decimal;\n  let digit;\n  while\
    \ (remaining > 0) {\n    digit = remaining % 2;\n    binaryString = binaryString\
    \ + digit;\n    remaining = Math.floor(remaining / 2);\n  }\n  return binaryString\
    \ + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n", "    let decimalString\
    \ = decimal.toString();\n    let binaryString = \"\";\n    for (let i = 0; i <\
    \ decimalString.length; i++) {\n        switch (decimalString[i]) {\n        \
    \    case \"0\":\n                binaryString += \"0000\";\n                break;\n\
    \            case \"1\":\n                binaryString += \"0001\";\n        \
    \        break;\n            case \"2\":\n                binaryString += \"0010\"\
    ;\n                break;\n            case \"3\":\n                binaryString\
    \ += \"0011\";\n                break;\n            case \"4\":\n            \
    \    binaryString += \"0100\";\n                break;\n            case \"5\"\
    :\n                binaryString += \"0101\";\n                break;\n       \
    \     case \"6\":\n                binaryString += \"0110\";\n               \
    \ break;\n            case \"7\":\n                binaryString += \"0111\";\n\
    \                break;\n            case \"8\":\n                binaryString\
    \ += \"1000\";\n                break;\n            case \"9\":\n            \
    \    binaryString += \"1001\";\n                break;\n        }\n    }\n   \
    \ return \"db\" + binaryString + \"db\";\n}\n", "    let binary = (decimal >>>\
    \ 0).toString(2);\n    let len = 8 - binary.length;\n    for (let i = 0; i < len;\
    \ i++) {\n        binary = '0' + binary;\n    }\n    return 'db' + binary + 'db';\n\
    }\n", "    const binString = decimal.toString(2);\n    return `db${binString}db`;\n\
    }\n", "    let binary: number[] = [];\n    while (decimal > 0) {\n        binary.push(decimal\
    \ % 2);\n        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\"\
    \ + binary.reverse().join(\"\") + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));", "  return `db${decimal.toString(2)}db`;\n\
    }\n", "    const binary = decimal.toString(2);\n    return `db${binary}db`;\n}",
  "    let binary = [];\n    while (decimal > 0) {\n        binary.push(decimal %\
    \ 2);\n        decimal = Math.floor(decimal / 2);\n    }\n    binary.push('db');\n\
    \    binary.reverse();\n    binary.unshift('db');\n    return binary.join('');\n\
    }\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}", "    let binary\
    \ = \"\";\n    while (decimal !== 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    if (binary === \"\") {\n\
    \        binary = \"0\";\n    }\n    return \"db\" + binary + \"db\";\n}\n", " \
    \   return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}", "    let binary = '';\n    for (let i = 0; i < 8; i++) {\n  \
    \      binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    return 'db' + binary + 'db';\n}\n", "  return decimal.toString(2).padStart(8,\
    \ \"0\");\n}\n", "  const binary = decimal.toString(2);\n  return `db${binary}db`;\n\
    }\n", "    return `db${decimal.toString(2)}db`;\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "  let result = '';\n  while (decimal > 0) {\n    const rem\
    \ = decimal % 2;\n    result = rem + result;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return `db${result}db`;\n}\n", "  let binary = 'db';\n  const\
    \ binArr = [];\n  for (let i = decimal; i > 0; i = Math.floor(i / 2)) {\n    binArr.push(i\
    \ % 2);\n  }\n  binary += binArr.reverse().join('');\n  binary += 'db';\n  return\
    \ binary;\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}", "   \
    \ return decimal.toString(2);\n}\n", "  let string: string = 'db';\n  while (decimal\
    \ >= 1) {\n    if (decimal % 2 === 0) {\n      string += '0';\n    } else {\n\
    \      string += '1';\n    }\n    decimal = Math.floor(decimal / 2);\n  }\n  return\
    \ string + 'db';\n}\n", "  let bin: string = \"\";\n  while (decimal >= 1) {\n\
    \    if (decimal % 2) {\n      bin = \"1\" + bin;\n    } else {\n      bin = \"\
    0\" + bin;\n    }\n    decimal = Math.floor(decimal / 2);\n  }\n  bin = \"db\"\
    \ + bin + \"db\";\n  return bin;\n}\n", "  const result = [];\n  while (decimal\
    \ > 0) {\n    result.push(decimal % 2);\n    decimal = Math.floor(decimal / 2);\n\
    \  }\n  const finalResult = ['db'];\n  result.forEach(item => finalResult.push(item.toString()));\n\
    \  finalResult.push('db');\n  return finalResult.join('');\n}\n", "    return\
    \ 'db' + decimal.toString(2) + 'db';\n}\n", "    const binary: string = decimal.toString(2);\n\
    \    return `db${binary}db`;\n}\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  return decimal.toString(2);\n\
    }\n", "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  return \"db\"\
    \ + decimal.toString(2) + \"db\";\n}\n", "    let result = \"db\";\n    if (decimal\
    \ === 0) return result + 0 + \"db\";\n    while (decimal > 0) {\n        result\
    \ += (decimal % 2).toString();\n        decimal = Math.floor(decimal / 2);\n \
    \   }\n    return result + \"db\";\n}\n", "    let res = \"db\";\n    while (decimal\
    \ > 0) {\n        res += decimal % 2;\n        decimal = Math.floor(decimal /\
    \ 2);\n    }\n    return res + \"db\";\n}\n", "  if (decimal <= 0) {\n    return\
    \ \"db0db\";\n  }\n  let binary = \"\";\n  while (decimal > 0) {\n    binary =\
    \ (decimal % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return\
    \ \"db\" + binary + \"db\";\n}\n", "    let result = \"db\";\n    if (decimal\
    \ === 0) {\n        result += \"0db\";\n    } else {\n        while (decimal >\
    \ 0) {\n            result += decimal % 2;\n            decimal = Math.floor(decimal\
    \ / 2);\n        }\n        result += \"db\";\n    }\n    return result;\n}",
  "    let binary = \"\";\n    let i = decimal;\n    if (i == 0) {\n        binary\
    \ = \"db0db\";\n    } else {\n        binary = \"db\";\n        while (i != 0)\
    \ {\n            binary += i % 2;\n            i = Math.floor(i / 2);\n      \
    \  }\n        binary += \"db\";\n    }\n    return binary;\n}\n", "    return\
    \ `db${decimal.toString(2)}db`;\n}\n", "  let binary = '';\n  if (decimal > 0)\
    \ {\n    while (decimal > 0) {\n      binary = (decimal % 2) + binary;\n     \
    \ decimal = Math.floor(decimal / 2);\n    }\n  } else {\n    binary = '0';\n \
    \ }\n  return 'db' + binary + 'db';\n}\n", "  // step 1, convert to binary:\n\
    \  let binary = decimal.toString(2);\n  // step 2, add the 'db'\n  binary = 'db'\
    \ + binary + 'db';\n  return binary;\n}\n", "  let binary = decimal.toString(2);\n\
    \  return 'db' + binary + 'db';\n}\n", "    let binaryString = \"db\";\n    let\
    \ result = \"\";\n    while (decimal !== 0) {\n        result = (decimal % 2)\
    \ + result;\n        decimal = Math.floor(decimal / 2);\n    }\n    return binaryString\
    \ + result + binaryString;\n}\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "  const binary = [];\n  let num = decimal;\n  while (num > 0) {\n    binary.unshift(num\
    \ % 2);\n    num = Math.floor(num / 2);\n  }\n  return `db${binary.join(\"\")}db`;\n\
    }\n", "  let binary = \"\";\n  while (decimal > 0) {\n    if (decimal % 2 ===\
    \ 0) {\n      binary = \"0\" + binary;\n    } else {\n      binary = \"1\" + binary;\n\
    \    }\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n\
    }\n", "    return `db${decimal.toString(2)}db`;\n}\n\n", "    const pascal = decimal.toString(2);\n\
    \    return 'db' + pascal + 'db';\n}", "    const binary: string = '';\n    return\
    \ `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(32));\n", "    return 'db'\
    \ + decimal.toString(2) + 'db';\n}\n", "  let binary = \"\";\n  if (decimal >\
    \ 0) {\n    while (decimal > 0) {\n      binary = (decimal % 2) + binary;\n  \
    \    decimal = Math.floor(decimal / 2);\n    }\n  } else {\n    while (decimal\
    \ < 0) {\n      binary = (decimal % 2) + binary;\n      decimal = Math.floor(decimal\
    \ / 2);\n    }\n  }\n  return \"db\" + binary + \"db\";\n}\n", "  let binary:\
    \ string = '';\n  while (decimal > 0) {\n    binary = (decimal % 2).toString()\
    \ + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return `db${binary}db`;\n\
    }\n", "    return decimal.toString(2);\n}\n\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\nconsole.log(decimal_to_binary(233));", " \
    \   let result = \"db\";\n    while (decimal > 0) {\n        result += decimal\
    \ % 2;\n        decimal = Math.floor(decimal / 2);\n    }\n    return result +\
    \ \"db\";\n}", "  let binary = \"\";\n  while (decimal >= 1) {\n    binary = (decimal\
    \ % 2) + binary;\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"db\"\
    \ + binary + \"db\";\n}\n", "    return 'db' + decimal.toString(2) + 'db';\n}\n",
  "    let result = '';\n    let num = decimal;\n    if (num === 0) {\n        return\
    \ 'db0db';\n    }\n    while (num !== 0) {\n        result = result + num % 2;\n\
    \        num = num / 2;\n    }\n    return `db${result.split('').reverse().join('')}db`;\n\
    }\n", "  let binary: number[] = [];\n  while (decimal > 0) {\n    binary.push(decimal\
    \ % 2);\n    decimal = Math.floor(decimal / 2);\n  }\n  let result: string = \"\
    db\";\n  for (let i = binary.length - 1; i >= 0; i--) {\n    result += binary[i];\n\
    \  }\n  result += \"db\";\n  return result;\n}\nconsole.log(decimal_to_binary(15));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
