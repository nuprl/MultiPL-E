name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["  return decimal.toString(2);\n}\n", "  const binary = [];\n  for (let\
    \ i = 0; i < 8; i++) {\n    binary.push(Math.floor(decimal % 2));\n    decimal\
    \ = Math.floor(decimal / 2);\n  }\n  return \"db\" + binary.reverse().join(\"\"\
    ) + \"db\";\n}\n", "    const binary: string = decimal.toString(2);\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    return `db${decimal.toString(2)}db`;\n\
    }\n", "    return 'db' + decimal.toString(2) + 'db';\n}\n", "  let result = \"\
    db\";\n  let remainder = 0;\n  while (decimal > 0) {\n    remainder = decimal\
    \ % 2;\n    decimal = Math.floor(decimal / 2);\n    result = result + remainder;\n\
    \  }\n  result = result + \"db\";\n  return result;\n}", "  return;\n}\n", " \
    \   let binary: string = \"\";\n    let i: number = 32;\n    while (i >= 0) {\n\
    \        let temp: number = decimal >> i;\n        if (temp & 1) {\n         \
    \   binary += \"1\";\n        } else {\n            binary += \"0\";\n       \
    \ }\n        i--;\n    }\n    binary = \"db\" + binary + \"db\";\n    return binary;\n\
    }\nconsole.log(decimal_to_binary(15));\n", "  return \"db\" + parseInt(decimal,\
    \ 10).toString(2) + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) +\
    \ \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   let result = '';\n    let number = decimal;\n    while (number > 0) {\n  \
    \      if (number % 2 === 0) {\n            result = '0' + result;\n        }\
    \ else {\n            result = '1' + result;\n        }\n        number = Math.floor(number\
    \ / 2);\n    }\n    return 'db' + result + 'db';\n}\n", "  return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "  return decimal.toString(2);\n}\n", "    let binary = decimal.toString(2);\n\
    \    return \"db\" + binary + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n",
  "  let binary = \"\";\n  binary += \"db\";\n  for (let i = 0; i < 6; i++) {\n  \
    \  if (decimal - Math.pow(2, 5 - i) >= 0) {\n      binary += \"1\";\n      decimal\
    \ -= Math.pow(2, 5 - i);\n    } else {\n      binary += \"0\";\n    }\n  }\n \
    \ binary += \"db\";\n  return binary;\n}\n", "  let binary = \"\";\n  while (decimal\
    \ > 0) {\n    binary = (decimal % 2).toString() + binary;\n    decimal = Math.floor(decimal\
    \ / 2);\n  }\n  return \"db\" + binary + \"db\";\n}\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "  if (decimal === 0) {\n    return \"\
    db0db\";\n  }\n  let bin = \"\";\n  for (let i = decimal; i > 0; i = Math.floor(i\
    \ / 2)) {\n    bin = (i % 2) + bin;\n  }\n  return \"db\" + bin + \"db\";\n}\n",
  "  let result = 'db';\n  let num = decimal;\n  do {\n    result += num % 2;\n  \
    \  num = Math.floor(num / 2);\n  } while (num > 0);\n  return result.split('').reverse().join('')\
    \ + 'db';\n}\n", "  let output = \"db\";\n  let dec = decimal;\n  while (dec >\
    \ 0) {\n    output += dec % 2;\n    dec = Math.floor(dec / 2);\n  }\n  output\
    \ += \"db\";\n  return output;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
