language: ts
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let len: number = Object.keys(dict).length;\n\
    \    if (len > 0) {\n        let first_key = Object.keys(dict)[0];\n        let\
    \ lower_case = first_key.toLowerCase() === first_key;\n        for (let key in\
    \ dict) {\n            if (lower_case !== (key.toLowerCase() === key)) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdl7bi4bk.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdl7bi4bk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let all_lower: boolean = true;\n  \
    \  let all_upper: boolean = true;\n    let count: number = 0;\n    for (let key\
    \ in dict) {\n        count++;\n        if (key.toLowerCase() === key) {\n   \
    \         all_upper = false;\n        } else {\n            all_lower = false;\n\
    \        }\n    }\n    if (count === 0) {\n        return false;\n    }\n    return\
    \ all_lower || all_upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdyih2g5v.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdyih2g5v.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   const firstKey = keys[0];\n    const lowerFirstKey = firstKey.toLowerCase();\n\
    \    const upperFirstKey = firstKey.toUpperCase();\n    if(lowerFirstKey === firstKey){\n\
    \        return keys.every(key => key.toLowerCase() === key);\n    } else if(upperFirstKey\
    \ === firstKey){\n        return keys.every(key => key.toUpperCase() === key);\n\
    \    } else {\n        return false;\n    }\n}\nconst dict1 = {\"a\": \"apple\"\
    , \"b\": \"banana\"};\nconst dict2 = {\"a\": \"apple\", \"A\": \"banana\", \"\
    B\": \"banana\"};\nconst dict3 = {\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    };\nconst dict4 = {\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    };\nconst dict5 = {\"STATE\": \"NC\", \"ZIP\": \"12345\"};\nconsole.log(check_dict_case(dict1));\n\
    console.log(check_dict_case(dict2));\nconsole.log(check_dict_case(dict3));\nconsole.log(check_dict_case(dict4));\n\
    console.log(check_dict_case(dict5));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6afeez4n.ts(30,43): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ return false;\n    let _keys = Object.keys(dict);\n    let _isUpper = true;\n\
    \    let _isLower = true;\n    for(let i = 0; i < _keys.length; i++) {\n     \
    \   if(_keys[i].toUpperCase() !== _keys[i]) {\n            _isUpper = false;\n\
    \        }\n        if(_keys[i].toLowerCase() !== _keys[i]) {\n            _isLower\
    \ = false;\n        }\n    }\n    return _isUpper || _isLower;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\nconsole.log('\\n#9\\n');\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiod6gqqy.ts(32,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    Object.keys(dict).forEach(key => {\n        lowerCase = lowerCase\
    \ && key.toLowerCase() === key;\n        upperCase = upperCase && key.toUpperCase()\
    \ === key;\n    });\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpji07ugad.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpji07ugad.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let uppers = new Set();\n  let lowers\
    \ = new Set();\n  for (let key in dict) {\n    if (key.toUpperCase() == key) {\n\
    \      uppers.add(key);\n    } else if (key.toLowerCase() == key) {\n      lowers.add(key);\n\
    \    } else {\n      return false;\n    }\n  }\n  if (uppers.size > 0 && lowers.size\
    \ > 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpruusl7e9.ts(16,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpruusl7e9.ts(17,20): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    let\
    \ upper: boolean = false;\n    let lower: boolean = false;\n    let dict_keys:\
    \ string[] = Object.keys(dict);\n    for (let i = 0; i < dict_keys.length; i++)\
    \ {\n        let key = dict_keys[i];\n        if (key.toUpperCase() === key) {\n\
    \            upper = true;\n        } else if (key.toLowerCase() === key) {\n\
    \            lower = true;\n        } else {\n            result = false;\n  \
    \          break;\n        }\n    }\n    return (upper !== lower) ? result : false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isLowerCase: boolean = true;\n\
    \    let isUpperCase: boolean = true;\n    for (let k in dict) {\n        if (k.toLowerCase()\
    \ !== k) {\n            isLowerCase = false;\n        }\n        if (k.toUpperCase()\
    \ !== k) {\n            isUpperCase = false;\n        }\n    }\n    return isLowerCase\
    \ || isUpperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7qf8fr7w.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7qf8fr7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upperCase = new Set<string>();\n\
    \    let lowerCase = new Set<string>();\n    for (let k in dict) {\n        let\
    \ key = k.toString();\n        if (key.toUpperCase() === key) {\n            upperCase.add(key);\n\
    \        } else if (key.toLowerCase() === key) {\n            lowerCase.add(key);\n\
    \        } else {\n            return false;\n        }\n    }\n    if (upperCase.size\
    \ === 0 || lowerCase.size === 0) {\n        return true;\n    }\n    return false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8m9u5row.ts(16,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8m9u5row.ts(17,25): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let check_case: boolean = true;\n \
    \   if (dict.length > 0) {\n        let values: string[] = Object.values(dict);\n\
    \        let lower_case_values: string[] = values.map(value => value.toLowerCase());\n\
    \        let upper_case_values: string[] = values.map(value => value.toUpperCase());\n\
    \        for (let value of values) {\n            if (lower_case_values.includes(value)\
    \ && upper_case_values.includes(value)) {\n                check_case = false;\n\
    \            }\n        }\n    }\n    return check_case;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc9hpl09b.ts(17,9): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpc9hpl09b.ts(18,39): error TS2339: Property ''values'' does
    not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmpc9hpl09b.ts(22,35): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmpc9hpl09b.ts(22,72): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower = true;\n    let upper =\
    \ true;\n    if(Object.keys(dict).length === 0) {\n        return false;\n   \
    \ }\n    for(let key in dict) {\n        if(!isNaN(+key)) {\n            return\
    \ false;\n        }\n        if(key !== key.toLowerCase()) {\n            lower\
    \ = false;\n        }\n        if(key !== key.toUpperCase()) {\n            upper\
    \ = false;\n        }\n    }\n    return lower || upper;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let dict_k: string[] = Object.keys(dict);\n\
    \    if (dict_k.length == 0) {\n        return false;\n    }\n    let flag: boolean\
    \ = dict_k[0].toUpperCase() == dict_k[0];\n    for (let k of dict_k) {\n     \
    \   if (flag) {\n            if (k.toUpperCase() != k) {\n                return\
    \ false;\n            }\n        } else {\n            if (k.toLowerCase() !=\
    \ k) {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp67vtei39.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp67vtei39.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n\n    let upper: number = 0;\n    let lower:\
    \ number = 0;\n\n    for (let key in dict) {\n        if (typeof key !== \"string\"\
    ) {\n            return false;\n        }\n        if (key.toUpperCase() === key)\
    \ {\n            upper++;\n        } else if (key.toLowerCase() === key) {\n \
    \           lower++;\n        } else {\n            return false;\n        }\n\
    \    }\n\n    return upper === Object.keys(dict).length || lower === Object.keys(dict).length;\n\
    }\n\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return dict != null && Object.values(dict).every(value\
    \ => {\n        const str = value.toString();\n        const lowerStr = str.toLowerCase();\n\
    \        const upperStr = str.toUpperCase();\n        return str == lowerStr ||\
    \ str == upperStr;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgkgwds64.ts(16,35): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys_all_lower = true;\n    let\
    \ keys_all_upper = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase())\
    \ keys_all_lower = false;\n        if (key !== key.toUpperCase()) keys_all_upper\
    \ = false;\n    }\n    return keys_all_lower || keys_all_upper;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log();\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp12o3yrat.ts(26,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let response = true;\n    let keys:\
    \ string[] = Object.keys(dict);\n    if (keys.length === 0) {\n        return\
    \ false;\n    }\n    let first_key: string = keys[0];\n    if (first_key === first_key.toLowerCase())\
    \ {\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n                response = false;\n          \
    \  }\n        }\n    } else if (first_key === first_key.toUpperCase()) {\n   \
    \     for (let i = 0; i < keys.length; i++) {\n            if (keys[i] !== keys[i].toUpperCase())\
    \ {\n                response = false;\n            }\n        }\n    } else {\n\
    \        response = false;\n    }\n    return response;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfoncgai7.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfoncgai7.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerKeys = [];\n    let upperKeys\
    \ = [];\n    let temp: boolean = true;\n    let result: boolean = true;\n    if(!Object.keys(dict).length)\
    \ {\n        return false;\n    }\n    for(const i in dict) {\n        if(i ===\
    \ i.toUpperCase()) {\n            upperKeys.push(i);\n        }\n        else\
    \ if(i === i.toLowerCase()) {\n            lowerKeys.push(i);\n        }\n   \
    \     else {\n            return false;\n        }\n    }\n    if(!upperKeys.length)\
    \ {\n        return true;\n    }\n    if(!lowerKeys.length) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length < 1) return\
    \ false;\n    let isUpper = isUpperCase(Object.keys(dict)[0]);\n    for (let key\
    \ in dict) {\n        if (isUpperCase(key) !== isUpper) return false;\n    }\n\
    \    return true;\n}\n\nconsole.log(\"check_dict_case\");\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2v5wrcs2.ts(17,19): error TS2304: Cannot find name
    ''isUpperCase''.

    ../../../../../tmp/tmp2v5wrcs2.ts(19,13): error TS2304: Cannot find name ''isUpperCase''.

    ../../../../../tmp/tmp2v5wrcs2.ts(27,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf40d3m1f.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf40d3m1f.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
