language: ts
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let len: number = Object.keys(dict).length;\n\
    \    if (len > 0) {\n        let first_key = Object.keys(dict)[0];\n        let\
    \ lower_case = first_key.toLowerCase() === first_key;\n        for (let key in\
    \ dict) {\n            if (lower_case !== (key.toLowerCase() === key)) {\n   \
    \             return false;\n            }\n        }\n        return true;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdl7bi4bk.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdl7bi4bk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let all_lower: boolean = true;\n  \
    \  let all_upper: boolean = true;\n    let count: number = 0;\n    for (let key\
    \ in dict) {\n        count++;\n        if (key.toLowerCase() === key) {\n   \
    \         all_upper = false;\n        } else {\n            all_lower = false;\n\
    \        }\n    }\n    if (count === 0) {\n        return false;\n    }\n    return\
    \ all_lower || all_upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdyih2g5v.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdyih2g5v.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   const firstKey = keys[0];\n    const lowerFirstKey = firstKey.toLowerCase();\n\
    \    const upperFirstKey = firstKey.toUpperCase();\n    if(lowerFirstKey === firstKey){\n\
    \        return keys.every(key => key.toLowerCase() === key);\n    } else if(upperFirstKey\
    \ === firstKey){\n        return keys.every(key => key.toUpperCase() === key);\n\
    \    } else {\n        return false;\n    }\n}\nconst dict1 = {\"a\": \"apple\"\
    , \"b\": \"banana\"};\nconst dict2 = {\"a\": \"apple\", \"A\": \"banana\", \"\
    B\": \"banana\"};\nconst dict3 = {\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    };\nconst dict4 = {\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"\
    };\nconst dict5 = {\"STATE\": \"NC\", \"ZIP\": \"12345\"};\nconsole.log(check_dict_case(dict1));\n\
    console.log(check_dict_case(dict2));\nconsole.log(check_dict_case(dict3));\nconsole.log(check_dict_case(dict4));\n\
    console.log(check_dict_case(dict5));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6afeez4n.ts(30,43): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ return false;\n    let _keys = Object.keys(dict);\n    let _isUpper = true;\n\
    \    let _isLower = true;\n    for(let i = 0; i < _keys.length; i++) {\n     \
    \   if(_keys[i].toUpperCase() !== _keys[i]) {\n            _isUpper = false;\n\
    \        }\n        if(_keys[i].toLowerCase() !== _keys[i]) {\n            _isLower\
    \ = false;\n        }\n    }\n    return _isUpper || _isLower;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\nconsole.log('\\n#9\\n');\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiod6gqqy.ts(32,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    Object.keys(dict).forEach(key => {\n        lowerCase = lowerCase\
    \ && key.toLowerCase() === key;\n        upperCase = upperCase && key.toUpperCase()\
    \ === key;\n    });\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpji07ugad.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpji07ugad.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let uppers = new Set();\n  let lowers\
    \ = new Set();\n  for (let key in dict) {\n    if (key.toUpperCase() == key) {\n\
    \      uppers.add(key);\n    } else if (key.toLowerCase() == key) {\n      lowers.add(key);\n\
    \    } else {\n      return false;\n    }\n  }\n  if (uppers.size > 0 && lowers.size\
    \ > 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpruusl7e9.ts(16,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpruusl7e9.ts(17,20): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    let\
    \ upper: boolean = false;\n    let lower: boolean = false;\n    let dict_keys:\
    \ string[] = Object.keys(dict);\n    for (let i = 0; i < dict_keys.length; i++)\
    \ {\n        let key = dict_keys[i];\n        if (key.toUpperCase() === key) {\n\
    \            upper = true;\n        } else if (key.toLowerCase() === key) {\n\
    \            lower = true;\n        } else {\n            result = false;\n  \
    \          break;\n        }\n    }\n    return (upper !== lower) ? result : false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isLowerCase: boolean = true;\n\
    \    let isUpperCase: boolean = true;\n    for (let k in dict) {\n        if (k.toLowerCase()\
    \ !== k) {\n            isLowerCase = false;\n        }\n        if (k.toUpperCase()\
    \ !== k) {\n            isUpperCase = false;\n        }\n    }\n    return isLowerCase\
    \ || isUpperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7qf8fr7w.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7qf8fr7w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upperCase = new Set<string>();\n\
    \    let lowerCase = new Set<string>();\n    for (let k in dict) {\n        let\
    \ key = k.toString();\n        if (key.toUpperCase() === key) {\n            upperCase.add(key);\n\
    \        } else if (key.toLowerCase() === key) {\n            lowerCase.add(key);\n\
    \        } else {\n            return false;\n        }\n    }\n    if (upperCase.size\
    \ === 0 || lowerCase.size === 0) {\n        return true;\n    }\n    return false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8m9u5row.ts(16,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8m9u5row.ts(17,25): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let check_case: boolean = true;\n \
    \   if (dict.length > 0) {\n        let values: string[] = Object.values(dict);\n\
    \        let lower_case_values: string[] = values.map(value => value.toLowerCase());\n\
    \        let upper_case_values: string[] = values.map(value => value.toUpperCase());\n\
    \        for (let value of values) {\n            if (lower_case_values.includes(value)\
    \ && upper_case_values.includes(value)) {\n                check_case = false;\n\
    \            }\n        }\n    }\n    return check_case;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc9hpl09b.ts(17,9): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpc9hpl09b.ts(18,39): error TS2339: Property ''values'' does
    not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmpc9hpl09b.ts(22,35): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmpc9hpl09b.ts(22,72): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower = true;\n    let upper =\
    \ true;\n    if(Object.keys(dict).length === 0) {\n        return false;\n   \
    \ }\n    for(let key in dict) {\n        if(!isNaN(+key)) {\n            return\
    \ false;\n        }\n        if(key !== key.toLowerCase()) {\n            lower\
    \ = false;\n        }\n        if(key !== key.toUpperCase()) {\n            upper\
    \ = false;\n        }\n    }\n    return lower || upper;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let dict_k: string[] = Object.keys(dict);\n\
    \    if (dict_k.length == 0) {\n        return false;\n    }\n    let flag: boolean\
    \ = dict_k[0].toUpperCase() == dict_k[0];\n    for (let k of dict_k) {\n     \
    \   if (flag) {\n            if (k.toUpperCase() != k) {\n                return\
    \ false;\n            }\n        } else {\n            if (k.toLowerCase() !=\
    \ k) {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp67vtei39.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp67vtei39.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n\n    let upper: number = 0;\n    let lower:\
    \ number = 0;\n\n    for (let key in dict) {\n        if (typeof key !== \"string\"\
    ) {\n            return false;\n        }\n        if (key.toUpperCase() === key)\
    \ {\n            upper++;\n        } else if (key.toLowerCase() === key) {\n \
    \           lower++;\n        } else {\n            return false;\n        }\n\
    \    }\n\n    return upper === Object.keys(dict).length || lower === Object.keys(dict).length;\n\
    }\n\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return dict != null && Object.values(dict).every(value\
    \ => {\n        const str = value.toString();\n        const lowerStr = str.toLowerCase();\n\
    \        const upperStr = str.toUpperCase();\n        return str == lowerStr ||\
    \ str == upperStr;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgkgwds64.ts(16,35): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys_all_lower = true;\n    let\
    \ keys_all_upper = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase())\
    \ keys_all_lower = false;\n        if (key !== key.toUpperCase()) keys_all_upper\
    \ = false;\n    }\n    return keys_all_lower || keys_all_upper;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log();\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp12o3yrat.ts(26,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let response = true;\n    let keys:\
    \ string[] = Object.keys(dict);\n    if (keys.length === 0) {\n        return\
    \ false;\n    }\n    let first_key: string = keys[0];\n    if (first_key === first_key.toLowerCase())\
    \ {\n        for (let i = 0; i < keys.length; i++) {\n            if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n                response = false;\n          \
    \  }\n        }\n    } else if (first_key === first_key.toUpperCase()) {\n   \
    \     for (let i = 0; i < keys.length; i++) {\n            if (keys[i] !== keys[i].toUpperCase())\
    \ {\n                response = false;\n            }\n        }\n    } else {\n\
    \        response = false;\n    }\n    return response;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfoncgai7.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfoncgai7.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerKeys = [];\n    let upperKeys\
    \ = [];\n    let temp: boolean = true;\n    let result: boolean = true;\n    if(!Object.keys(dict).length)\
    \ {\n        return false;\n    }\n    for(const i in dict) {\n        if(i ===\
    \ i.toUpperCase()) {\n            upperKeys.push(i);\n        }\n        else\
    \ if(i === i.toLowerCase()) {\n            lowerKeys.push(i);\n        }\n   \
    \     else {\n            return false;\n        }\n    }\n    if(!upperKeys.length)\
    \ {\n        return true;\n    }\n    if(!lowerKeys.length) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822215
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length < 1) return\
    \ false;\n    let isUpper = isUpperCase(Object.keys(dict)[0]);\n    for (let key\
    \ in dict) {\n        if (isUpperCase(key) !== isUpper) return false;\n    }\n\
    \    return true;\n}\n\nconsole.log(\"check_dict_case\");\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2v5wrcs2.ts(17,19): error TS2304: Cannot find name
    ''isUpperCase''.

    ../../../../../tmp/tmp2v5wrcs2.ts(19,13): error TS2304: Cannot find name ''isUpperCase''.

    ../../../../../tmp/tmp2v5wrcs2.ts(27,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf40d3m1f.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf40d3m1f.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const firstChar = dict[Object.keys(dict)[0]][0];\n\
    \    let upperCase = firstChar === firstChar.toUpperCase();\n    let lowerCase\
    \ = firstChar === firstChar.toLowerCase();\n    if (upperCase || lowerCase) {\n\
    \        for (let i in dict) {\n            if (dict[i][0] !== dict[i][0].toUpperCase()\
    \ && upperCase) return false;\n            if (dict[i][0] !== dict[i][0].toLowerCase()\
    \ && lowerCase) return false;\n        }\n        return true;\n    }\n    return\
    \ false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppjgm11am.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppjgm11am.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (dict.length > 0) {\n    var lowercaseCount\
    \ = 0;\n    var uppercaseCount = 0;\n    var keys = Object.keys(dict);\n    keys.forEach(function(key)\
    \ {\n      if (key === key.toLowerCase()) {\n        lowercaseCount += 1;\n  \
    \    } else if (key === key.toUpperCase()) {\n        uppercaseCount += 1;\n \
    \     }\n    });\n    if (lowercaseCount === keys.length || uppercaseCount ===\
    \ keys.length) {\n      return true;\n    } else {\n      return false;\n    }\n\
    \  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6l44rz6q.ts(16,7): error TS2365: Operator ''>'' cannot
    be applied to types ''string'' and ''number''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let t1 = true\n    let t2 = true\n\
    \    for (let i in dict) {\n        if (i != i.toLowerCase()) {\n            t1\
    \ = false\n        }\n        if (i != i.toUpperCase()) {\n            t2 = false\n\
    \        }\n    }\n    return t1 || t2\n}\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", \"b\": \"banana\"}))\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}))\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}))\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}))\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppldk35w5.ts(30,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys: string[] = Object.keys(dict);\n\
    \    let first: string = keys[0];\n    if (first.toUpperCase() === first) {\n\
    \        return keys.every(isUpper);\n    } else {\n        return keys.every(isLower);\n\
    \    }\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\n\
    console.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"\
    apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp225mrxk.ts(19,27): error TS2304: Cannot find name
    ''isUpper''.

    ../../../../../tmp/tmpp225mrxk.ts(21,27): error TS2304: Cannot find name ''isLower''.

    ../../../../../tmp/tmpp225mrxk.ts(26,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isAllUpper = true;\n    let isAllLower\
    \ = true;\n    for (let key in dict) {\n        if (key != key.toUpperCase())\
    \ {\n            isAllUpper = false;\n        }\n        if (key != key.toLowerCase())\
    \ {\n            isAllLower = false;\n        }\n    }\n    return isAllUpper\
    \ || isAllLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmp684d5y.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmp684d5y.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let valid = true;\n    let lowerCase\
    \ = true;\n    let upperCase = true;\n    Object.keys(dict).forEach(k => {\n \
    \       lowerCase = lowerCase && k.toLowerCase() === k;\n        upperCase = upperCase\
    \ && k.toUpperCase() === k;\n    });\n    valid = valid && lowerCase || upperCase;\n\
    \    return valid;\n}\n\ntest(`${check_dict_case({'a': 'apple', 'b': 'banana'})}`,\
    \ `true`);\ntest(`${check_dict_case({'a': 'apple', 'A': 'banana', 'B': 'banana'})}`,\
    \ `false`);\ntest(`${check_dict_case({'a': 'apple', 8: 'banana', 'a': 'apple'})}`,\
    \ `false`);\ntest(`${check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})}`,\
    \ `false`);\ntest(`${check_dict_case({'STATE': 'NC', 'ZIP': '12345'})}`, `true`);\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9211fklz.ts(27,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmp9211fklz.ts(28,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp9211fklz.ts(29,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp9211fklz.ts(29,53): error TS2300: Duplicate identifier ''''a''''.

    ../../../../../tmp/tmp9211fklz.ts(30,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp9211fklz.ts(31,6): error TS2554: Expected 0 arguments, but
    got 2.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerKeys = Object.keys(dict).filter(key\
    \ => key.toLowerCase() === key);\n    let upperKeys = Object.keys(dict).filter(key\
    \ => key.toUpperCase() === key);\n    if (lowerKeys.length === Object.keys(dict).length\
    \ || upperKeys.length === Object.keys(dict).length) {\n        return true;\n\
    \    }\n    return false;\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"\
    b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\": \"\
    banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\":\
    \ \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmparr1fmgw.ts(25,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n    let allUpper = true;\n    let allLower\
    \ = true;\n    for (let key in dict) {\n        allUpper = allUpper && key ==\
    \ key.toUpperCase();\n        allLower = allLower && key == key.toLowerCase();\n\
    \    }\n    return allUpper || allLower;\n}\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl290dy72.ts(29,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let is_lower: boolean = true;\n   \
    \ let is_upper: boolean = true;\n    let keys = Object.keys(dict);\n    if (keys.length\
    \ === 0) {\n        return false;\n    }\n    for (let key of keys) {\n      \
    \  is_lower = is_lower && isLowerCase(key);\n        is_upper = is_upper && isUpperCase(key);\n\
    \    }\n    return is_lower || is_upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpff10mrja.ts(23,32): error TS2304: Cannot find name
    ''isLowerCase''.

    ../../../../../tmp/tmpff10mrja.ts(24,32): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let res = [];\n    for (const x in\
    \ dict) {\n        if (x === x.toUpperCase()) {\n            res.push(true);\n\
    \        } else {\n            res.push(false);\n        }\n    }\n    return\
    \ !res.includes(false);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp936413ry.ts(24,17): error TS2339: Property ''includes''
    does not exist on type ''any[]''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let lowerCase: boolean = true\n  let\
    \ upperCase: boolean = true\n  for (let key in dict) {\n    lowerCase = lowerCase\
    \ && key.toLowerCase() === key\n    upperCase = upperCase && key.toUpperCase()\
    \ === key\n  }\n  return lowerCase || upperCase\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}))\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}))\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}))\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}))\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fxf3h2z.ts(26,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (Object.keys(dict).length === 0) {\n\
    \    return false;\n  }\n  const match = Object.keys(dict).map(key => key.toLowerCase());\n\
    \  return Object.keys(dict).every((key, index) => key === match[index]);\n}\n\n\
    describe('check_dict_case()', () => {\n  it('should return true if all keys are\
    \ strings in lower case', () => {\n    const dict = {\n      a: 'apple',\n   \
    \   b: 'banana'\n    };\n    expect(check_dict_case(dict)).to.equal(true);\n \
    \ });\n  it('should return false if keys are strings in mixed case', () => {\n\
    \    const dict = {\n      a: 'apple',\n      A: 'banana',\n      B: 'banana'\n\
    \    };\n    expect(check_dict_case(dict)).to.equal(false);\n  });\n  it('should\
    \ return false if keys are mixed strings and non-strings', () => {\n    const\
    \ dict = {\n      a: 'apple',\n      8: 'banana',\n      a: 'apple'\n    };\n\
    \    expect(check_dict_case(dict)).to.equal(false);\n  });\n  it('should return\
    \ false if keys are strings in upper case', () => {\n    const dict = {\n    \
    \  NAME: 'JOHN',\n      AGE: '36',\n      CITY: 'HOUSTON'\n    };\n    expect(check_dict_case(dict)).to.equal(false);\n\
    \  });\n  it('should return true if keys are strings in upper case', () => {\n\
    \    const dict = {\n      STATE: 'NC',\n      ZIP: '12345'\n    };\n    expect(check_dict_case(dict)).to.equal(true);\n\
    \  });\n  it('should return false if object is empty', () => {\n    const dict\
    \ = {};\n    expect(check_dict_case(dict)).to.equal(false);\n  });\n});\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwhp_9k5p.ts(23,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(24,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(29,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpwhp_9k5p.ts(31,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(37,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpwhp_9k5p.ts(39,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(43,7): error TS2300: Duplicate identifier ''a''.

    ../../../../../tmp/tmpwhp_9k5p.ts(45,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpwhp_9k5p.ts(47,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(53,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpwhp_9k5p.ts(55,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(60,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpwhp_9k5p.ts(62,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpwhp_9k5p.ts(64,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys: string[] = Object.keys(dict);\n\
    \    let lowercaseKeys: string[] = keys.filter(x => x === x.toLowerCase());\n\
    \    let uppercaseKeys: string[] = keys.filter(x => x === x.toUpperCase());\n\
    \    if (lowercaseKeys.length == keys.length || uppercaseKeys.length == keys.length)\
    \ {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoz6xbdc_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoz6xbdc_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n    let retVal: boolean = true;\n    const\
    \ lowerCaseKeys: string[] = [];\n    const upperCaseKeys: string[] = [];\n   \
    \ for (let key in dict) {\n        if (key.toUpperCase() == key) {\n         \
    \   upperCaseKeys.push(key);\n        } else {\n            lowerCaseKeys.push(key);\n\
    \        }\n    }\n    if (lowerCaseKeys.length > 0 && upperCaseKeys.length >\
    \ 0) {\n        retVal = false;\n    }\n    return retVal;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptfwtzw1p.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptfwtzw1p.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp67vtei39.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp67vtei39.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let isAllUpper = true;\n    let isAllLower\
    \ = true;\n    for(let key in dict) {\n        if(typeof(key) === \"string\")\
    \ {\n            if(key !== key.toUpperCase()) {\n                isAllUpper =\
    \ false;\n            }\n            if(key !== key.toLowerCase()) {\n       \
    \         isAllLower = false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return isAllUpper || isAllLower;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp80c59_rs.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp80c59_rs.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let caseAllLower = true;\n    let caseAllUpper\
    \ = true;\n    for (let key in dict) {\n        let lowerKey = key.toLowerCase();\n\
    \        let upperKey = key.toUpperCase();\n        if (key !== lowerKey) {\n\
    \            caseAllLower = false;\n        }\n        if (key !== upperKey) {\n\
    \            caseAllUpper = false;\n        }\n    }\n    return caseAllLower\
    \ || caseAllUpper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbctd4s5l.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbctd4s5l.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let allLower: boolean = true;\n   \
    \ let allUpper: boolean = true;\n    for (let key in dict) {\n        allLower\
    \ = allLower && key.toLowerCase() === key;\n        allUpper = allUpper && key.toUpperCase()\
    \ === key;\n    }\n    return allLower || allUpper;\n}\n\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log(check_dict_case({}));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnm_y_czj.ts(27,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (Object.keys(dict).length == 0) {\n\
    \    return false;\n  }\n  for (let key in dict) {\n    if (key == key.toUpperCase())\
    \ {\n      for (let key2 in dict) {\n        if (key2 != key2.toUpperCase()) {\n\
    \          return false;\n        }\n      }\n    } else if (key == key.toLowerCase())\
    \ {\n      for (let key2 in dict) {\n        if (key2 != key2.toLowerCase()) {\n\
    \          return false;\n        }\n      }\n    } else {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let countLower = 0\n    let countUpper\
    \ = 0\n    let countNumber = 0\n    let countSpecial = 0\n    let keys = Object.keys(dict)\n\
    \    for (let key of keys) {\n        if (key === key.toLowerCase()) {\n     \
    \       countLower += 1\n        } else if (key === key.toUpperCase()) {\n   \
    \         countUpper += 1\n        } else if (isNaN(key as any)) {\n         \
    \   countSpecial += 1\n        } else {\n            countNumber += 1\n      \
    \  }\n    }\n    if (countLower === keys.length || countUpper === keys.length)\
    \ {\n        return true\n    } else {\n        return false\n    }\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}))\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}))\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}))\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}))\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp43pzkt3k.ts(40,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let islower = true;\n  let isupper =\
    \ true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n   \
    \   islower = false;\n    }\n    if (key.toUpperCase() !== key) {\n      isupper\
    \ = false;\n    }\n  }\n  return islower || isupper;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6b1mlhtm.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6b1mlhtm.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // code goes here\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5dlmro3v.ts(15,58): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result = true;\n    let lowercase\
    \ = true;\n    let uppercase = true;\n    for (let key in dict) {\n        if\
    \ (key !== key.toLowerCase()) {\n            lowercase = false;\n        }\n \
    \       if (key !== key.toUpperCase()) {\n            uppercase = false;\n   \
    \     }\n    }\n    if (lowercase && uppercase) {\n        result = false;\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7m6_iv9c.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7m6_iv9c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower = true;\n    let upper =\
    \ true;\n    for (let i in dict) {\n        if (i.toLowerCase() != i) {\n    \
    \        lower = false;\n        }\n        if (i.toUpperCase() != i) {\n    \
    \        upper = false;\n        }\n    }\n    return lower || upper;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo_2xn_8x.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo_2xn_8x.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015321
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let allLower = true;\n    let allUpper\
    \ = true;\n    for (let k in dict) {\n        allLower = allLower && (k.toLowerCase()\
    \ === k);\n        allUpper = allUpper && (k.toUpperCase() === k);\n    }\n  \
    \  return allLower || allUpper;\n}\n\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphyao434k.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphyao434k.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015323
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerCaseOnly = true;\n    let\
    \ upperCaseOnly = true;\n    Object.keys(dict).forEach(element => {\n        if\
    \ (element.toLowerCase() != element) {\n            lowerCaseOnly = false;\n \
    \       }\n        if (element.toUpperCase() != element) {\n            upperCaseOnly\
    \ = false;\n        }\n    });\n    return lowerCaseOnly || upperCaseOnly;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplxl8sa5l.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplxl8sa5l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015323
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys: string[] = Object.keys(dict);\n\
    \    let upper: boolean = is_upper(keys[0]);\n    for (let key of keys) {\n  \
    \      if (is_upper(key) != upper) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdd_x3tw0.ts(17,26): error TS2304: Cannot find name
    ''is_upper''.

    ../../../../../tmp/tmpdd_x3tw0.ts(19,13): error TS2304: Cannot find name ''is_upper''.

    '
  timestamp: 1660015323
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (Object.keys(dict).length === 0) return\
    \ false;\n  const keys = Object.keys(dict);\n  const upperKeys = keys.map(k =>\
    \ k.toUpperCase());\n  const lowerKeys = keys.map(k => k.toLowerCase());\n  return\
    \ keys.join() === upperKeys.join() || keys.join() === lowerKeys.join();\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxn__7sep.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxn__7sep.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015323
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    let\
    \ keySet: Set<string> = new Set<string>();\n    for (let key in dict) {\n    \
    \    if (typeof(key) === \"string\") {\n            let lower_case_key: string\
    \ = key.toLowerCase();\n            if (lower_case_key === key) {\n          \
    \      keySet.add(\"lower_case\");\n            } else {\n                keySet.add(\"\
    upper_case\");\n            }\n        } else {\n            result = false;\n\
    \            break;\n        }\n    }\n    if (keySet.size === 2) {\n        result\
    \ = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphm1e7dzd.ts(17,17): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmphm1e7dzd.ts(17,35): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015323
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   if (keys.length === 0) {\n        return false;\n    }\n    const lowerKeys\
    \ = keys.filter(key => key.toLowerCase() === key);\n    const upperKeys = keys.filter(key\
    \ => key.toUpperCase() === key);\n    return keys.length === lowerKeys.length\
    \ || keys.length === upperKeys.length;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphq3of7og.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphq3of7og.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length == 0) return\
    \ false;\n    let flag = false;\n    if (Object.keys(dict)[0] == Object.keys(dict)[0].toLowerCase())\
    \ flag = true;\n    for (let i = 0; i < Object.keys(dict).length; i++) {\n   \
    \     if(flag == true) {\n            if(Object.keys(dict)[i] != Object.keys(dict)[i].toLowerCase())\
    \ return false;\n        }\n        else {\n            if(Object.keys(dict)[i]\
    \ != Object.keys(dict)[i].toUpperCase()) return false;\n        }\n    }\n   \
    \ return true;\n}\n\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"\
    banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"\
    banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\"\
    , \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log(check_dict_case({}));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt3bdk7v3.ts(32,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015323
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ return false;\n    let keys = Object.keys(dict);\n    for (let key of keys)\
    \ {\n        if (key !== key.toLowerCase() && key !== key.toUpperCase()) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeozw3ioq.ts(27,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015323
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(dict.length == 0) {\n        return\
    \ false;\n    }\n    let allLower: boolean = true;\n    let allUpper: boolean\
    \ = true;\n    for(let key in dict) {\n        allLower = allLower && check_lower_case(key);\n\
    \        allUpper = allUpper && check_upper_case(key);\n    }\n    return allLower\
    \ || allUpper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpul7shi6v.ts(16,8): error TS2367: This condition will
    always return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpul7shi6v.ts(22,32): error TS2304: Cannot find name ''check_lower_case''.

    ../../../../../tmp/tmpul7shi6v.ts(23,32): error TS2304: Cannot find name ''check_upper_case''.

    '
  timestamp: 1660015323
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower_keys = new Set<string>();\n\
    \    let upper_keys = new Set<string>();\n    for (let key in dict) {\n      \
    \  if (key.toLowerCase() === key) {\n            lower_keys.add(key);\n      \
    \  } else if (key.toUpperCase() === key) {\n            upper_keys.add(key);\n\
    \        } else {\n            return false;\n        }\n    }\n    if (lower_keys.size\
    \ > 0 && upper_keys.size > 0) {\n        return false;\n    }\n    return true;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8w3kgvbn.ts(16,26): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8w3kgvbn.ts(17,26): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015323
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length < 1) {\n\
    \        return false;\n    }\n\n    let isUpper = false;\n    let isLower = false;\n\
    \n    for(let key in dict) {\n        if(key.toUpperCase() === key) {\n      \
    \      isUpper = true;\n        } else if(key.toLowerCase() === key) {\n     \
    \       isLower = true;\n        } else {\n            return false;\n       \
    \ }\n    }\n\n    return isUpper || isLower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc9blp_kg.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc9blp_kg.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let uppercase = true\n    let lowercase\
    \ = true\n    for (let i in dict) {\n        if (i === i.toUpperCase()) {\n  \
    \          lowercase = false\n        } else {\n            uppercase = false\n\
    \        }\n    }\n    return uppercase || lowercase\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3a_cggby.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3a_cggby.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015323
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upper = false;\n    let lower =\
    \ false;\n    for (let key in dict) {\n        let val = dict[key];\n        if\
    \ (key.toUpperCase() === key) {\n            upper = true;\n        } else if\
    \ (key.toLowerCase() === key) {\n            lower = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return upper !== lower;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // solution goes here\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjqh9ljfo.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjqh9ljfo.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const dictKeys = Object.keys(dict);\n\
    \    if (dictKeys.length === 0) {\n        return false;\n    }\n\n    const lowerCaseKeys\
    \ = dictKeys.filter(key => key.toLowerCase() === key);\n    const upperCaseKeys\
    \ = dictKeys.filter(key => key.toUpperCase() === key);\n\n    if (lowerCaseKeys.length\
    \ === dictKeys.length ||\n        upperCaseKeys.length === dictKeys.length) {\n\
    \        return true;\n    }\n\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppw0nhwb4.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppw0nhwb4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let dict_keys = Object.keys(dict);\n\
    \    let lower_case_keys = dict_keys.filter(key => key.toLowerCase() === key);\n\
    \    let upper_case_keys = dict_keys.filter(key => key.toUpperCase() === key);\n\
    \    if (lower_case_keys.length > 0 && upper_case_keys.length > 0) {\n       \
    \ return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw9_ipx80.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw9_ipx80.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let low = true\n    let up = true\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() != key) {\n      \
    \      low = false\n        }\n        if (key.toUpperCase() != key) {\n     \
    \       up = false\n        }\n    }\n    return low || up\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7z5c6kt8.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7z5c6kt8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (Object.keys(dict).length == 0) {\n\
    \    return false;\n  }\n\n  const keys = Object.keys(dict);\n  const allLowerCase\
    \ = keys.filter(key => key == key.toLowerCase()).length == keys.length;\n  const\
    \ allUpperCase = keys.filter(key => key == key.toUpperCase()).length == keys.length;\n\
    \n  return allLowerCase || allUpperCase;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpinwme3me.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpinwme3me.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // let upper = true;\n    // let lower\
    \ = true;\n    // for (let key in dict) {\n    //     if (key != key.toUpperCase())\
    \ {\n    //         upper = false;\n    //     }\n    //     if (key != key.toLowerCase())\
    \ {\n    //         lower = false;\n    //     }\n    // }\n    // return upper\
    \ || lower;\n    let upper = true;\n    let lower = true;\n    for (let key in\
    \ dict) {\n        let c = key[0];\n        if (c != c.toUpperCase()) {\n    \
    \        upper = false;\n        }\n        if (c != c.toLowerCase()) {\n    \
    \        lower = false;\n        }\n    }\n    return upper || lower;\n}\n\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk8i58exy.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk8i58exy.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (Object.keys(dict).length == 0) return\
    \ false;\n  return Object.keys(dict).every(key => key == key.toLowerCase()) ||\n\
    \    Object.keys(dict).every(key => key == key.toUpperCase());\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvldmauot.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvldmauot.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // Empty object case\n    if (Object.keys(dict).length\
    \ == 0) return false;\n\n    // Start test\n    let isLower = true;\n    let isUpper\
    \ = true;\n    let isString = true;\n    Object.keys(dict).forEach(key => {\n\
    \        if (isLower) {\n            if (key.toLowerCase() != key) isLower = false;\n\
    \        }\n        if (isUpper) {\n            if (key.toUpperCase() != key)\
    \ isUpper = false;\n        }\n        if (isString) {\n            if (typeof(key)\
    \ != \"string\") isString = false;\n        }\n    });\n    return isLower ||\
    \ isUpper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzrm35l42.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzrm35l42.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   if (keys.length === 0) {\n        return false;\n    }\n    let is_upper =\
    \ keys[0].toUpperCase() === keys[0];\n    return keys.every(key => {\n       \
    \ if (is_upper) {\n            return key.toUpperCase() === key;\n        } else\
    \ {\n            return key.toLowerCase() === key;\n        }\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015324
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isUpper = false;\n    let isLower\
    \ = false;\n    let anyInt = false;\n    let allInt = true;\n    let isEmpty =\
    \ true;\n    for (let key in dict) {\n        isEmpty = false;\n        if (key.toLowerCase()\
    \ === key) {\n            isLower = true;\n        } else if (key.toUpperCase()\
    \ === key) {\n            isUpper = true;\n        } else {\n            anyInt\
    \ = true;\n        }\n        if (isNaN(parseInt(key))) {\n            allInt\
    \ = false;\n        }\n    }\n    if (isEmpty) {\n        return false;\n    }\n\
    \    if (isLower) {\n        return isUpper === false && anyInt === false;\n \
    \   } else if (isUpper) {\n        return anyInt === false;\n    } else {\n  \
    \      return allInt;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprnz3lmhq.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprnz3lmhq.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015324
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    let\
    \ isUpper: boolean = false;\n    let isLower: boolean = false;\n    if (Object.keys(dict).length\
    \ > 0) {\n        for (let key in dict) {\n            if (isLower && isUpper)\
    \ {\n                result = false;\n                break;\n            } else\
    \ if (key.toUpperCase() === key) {\n                isUpper = true;\n        \
    \    } else if (key.toLowerCase() === key) {\n                isLower = true;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        }\n    } else {\n        result = false;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let is_upper: boolean = false;\n  \
    \  let is_lower: boolean = false;\n    if(Object.keys(dict).length === 0) return\
    \ false;\n    Object.keys(dict).forEach(key => {\n        if(key.toUpperCase()\
    \ === key) is_upper = true;\n        if(key.toLowerCase() === key) is_lower =\
    \ true;\n    });\n    return is_upper && is_lower ? false : true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6ib8wqjs.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ib8wqjs.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let lowercase = true;\n  let uppercase\
    \ = true;\n  for (let key in dict) {\n    if (lowercase) {\n      lowercase =\
    \ lowercase && key === key.toLowerCase();\n    }\n    if (uppercase) {\n     \
    \ uppercase = uppercase && key === key.toUpperCase();\n    }\n  }\n  return lowercase\
    \ || uppercase;\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\"\
    , \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\"\
    : \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"\
    NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpie6o24km.ts(30,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n    let list = Object.keys(dict).map(key =>\
    \ {\n        return key.toLowerCase();\n    });\n    let list_str:string = list.toString();\n\
    \    let list_str_upper:string = list_str.toUpperCase();\n    if (list_str ===\
    \ list_str_upper) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw7yda9sl.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw7yda9sl.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upper: boolean = false;\n    let\
    \ lower: boolean = false;\n    for (let key in dict) {\n        if (typeof(key)\
    \ === \"string\") {\n            if (key === key.toUpperCase()) {\n          \
    \      upper = true;\n            } else if (key === key.toLowerCase()) {\n  \
    \              lower = true;\n            } else {\n                return false;\n\
    \            }\n        } else {\n            return false;\n        }\n    }\n\
    \    return upper === lower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_k6e0f2x.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_k6e0f2x.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let values = Object.values(dict);\n\
    \    let lowerCaseCheck: boolean = true;\n    let upperCaseCheck: boolean = true;\n\
    \    values.forEach(element => {\n        if(isNaN(Number(element)) && lowerCaseCheck\
    \ && element !== element.toLowerCase()) {\n            lowerCaseCheck = false;\n\
    \        }\n        if(isNaN(Number(element)) && upperCaseCheck && element !==\
    \ element.toUpperCase()) {\n            upperCaseCheck = false;\n        }\n \
    \   });\n    return lowerCaseCheck || upperCaseCheck;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe1lsrztv.ts(16,25): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let output: boolean = true;\n    let isUpperCase:\
    \ boolean = true;\n    let isLowerCase: boolean = true;\n    Object.keys(dict).forEach(key\
    \ => {\n        isUpperCase = isUpperCase && key === key.toUpperCase();\n    \
    \    isLowerCase = isLowerCase && key === key.toLowerCase();\n    });\n    output\
    \ = isUpperCase || isLowerCase;\n    return output;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd6d8dfi1.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd6d8dfi1.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // check if dictionary is empty\n \
    \   if (Object.keys(dict).length == 0) {\n        return false;\n    }\n\n   \
    \ // get first character of first key\n    let case_char = Object.keys(dict)[0][0];\n\
    \n    // if it's lowercase\n    if (case_char == case_char.toLowerCase()) {\n\
    \        // check if every key is lowercase\n        for (let key in dict) {\n\
    \            if (key.toLowerCase() != key) {\n                return false;\n\
    \            }\n        }\n    } else {\n        // check if every key is uppercase\n\
    \        for (let key in dict) {\n            if (key.toUpperCase() != key) {\n\
    \                return false;\n            }\n        }\n    }\n\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpea7_2tk1.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpea7_2tk1.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upperFlag = false;\n    let lowerFlag\
    \ = false;\n    for (let key in dict) {\n        if (key.toUpperCase() === key)\
    \ {\n            upperFlag = true;\n        } else if (key.toLowerCase() === key)\
    \ {\n            lowerFlag = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return upperFlag || lowerFlag;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl0ntw7t_.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl0ntw7t_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   return keys.length === 0 ? false : keys.every(key => {\n        const lowerCaseKey\
    \ = key.toLowerCase();\n        const upperCaseKey = key.toUpperCase();\n    \
    \    return Object.keys(dict).every(key => key === lowerCaseKey || key === upperCaseKey);\n\
    \    });\n}\n\nconst shouldBeTrue = [\n    {['']: ''},\n    {['']: '', 'a': 'apple'},\n\
    \    {'a': 'apple', 'b': 'banana'},\n    {'a': 'apple', 'B': 'banana', 'c': 'cranberry'},\n\
    \    {'aaa': 'apple', 'bbb': 'banana', 'ccc': 'cranberry'},\n    {'AAA': 'apple',\
    \ 'BBB': 'banana', 'CCC': 'cranberry'},\n    {'A': '', 'B': '', 'C': ''},\n  \
    \  {'A': '', 'B': '', 'C': '', '': ''},\n    {'A': '', 'B': '', 'C': '', '': '',\
    \ 'a': '', 'b': '', 'c': ''},\n    {STATE: 'NC', ZIP: '12345'},\n    {'STATE':\
    \ 'NC', 'ZIP': '12345'},\n    {'state': 'NC', 'zip': '12345'},\n    {'sTATE':\
    \ 'NC', 'zIP': '12345'},\n    {'S': 'NC', 'Z': '12345'},\n    {'S': 'NC', 'Z':\
    \ '12345', 'a': '', 'b': '', 'c': ''},\n    {'': '', 'state': 'NC', 'zip': '12345'},\n\
    \    {'state': 'NC', 'zip': '12345', '': ''},\n    {'sTATE': 'NC', 'zIP': '12345',\
    \ '': ''},\n    {'S': 'NC', 'Z': '12345', '': ''},\n    {'S': 'NC', 'Z': '12345',\
    \ 'A': '',\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu0tb2ww_.ts(45,13): error TS1005: '':'' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(45,20): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(45,25): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(46,7): error TS1005: '':'' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(46,38): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(49,10): error TS1005: '':'' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(49,17): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(50,7): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(50,34): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(51,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(51,70): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(52,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(52,86): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(53,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(53,85): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(54,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(54,86): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(55,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(55,68): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(56,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(56,74): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(57,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(57,40): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(60,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpu0tb2ww_.ts(60,7): error TS1005: '','' expected.

    '
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // first check is dict is empty\n \
    \   if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    //\
    \ get all keys from the dict object\n    let keys = Object.keys(dict);\n    //\
    \ get the first item from the keys array\n    let item = keys[0];\n    // get\
    \ the value of the first item from the dict\n    let itemValue = dict[item];\n\
    \    // now check if the value is a string\n    if (typeof itemValue !== 'string')\
    \ {\n        return false;\n    }\n    // if the value is a string, compare the\
    \ case of first \n    // item with all the other items in the keys array\n   \
    \ let comparisonResult = true;\n    keys.forEach( key => {\n        let keyValue\
    \ = dict[key];\n        if (typeof keyValue !== 'string') {\n            comparisonResult\
    \ = false;\n        }\n        if (itemValue.toLowerCase() === keyValue.toLowerCase())\
    \ {\n            comparisonResult = true;\n        } else {\n            comparisonResult\
    \ = false;\n        }\n    });\n    return comparisonResult;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcv2iqlt0.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcv2iqlt0.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerKeys = new Set(Object.keys(dict));\n\
    \    let upperKeys = new Set(Object.keys(dict));\n    let lower = new Set();\n\
    \    let upper = new Set();\n    for (let keys of lowerKeys) {\n        if (keys.toLowerCase()\
    \ === keys) {\n            lower.add(keys)\n        }\n    }\n    for (let keys\
    \ of upperKeys) {\n        if (keys.toUpperCase() === keys) {\n            upper.add(keys)\n\
    \        }\n    }\n    if (lower.size === Object.keys(dict).length || upper.size\
    \ === Object.keys(dict).length) {\n        return true;\n    }\n    return false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj8xlfhtg.ts(16,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpj8xlfhtg.ts(17,25): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmpj8xlfhtg.ts(18,21): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmpj8xlfhtg.ts(19,21): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015326
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isCaseSensitive: boolean = false;\n\
    \    let isCaseSensitiveUpper: boolean = false;\n    let isCaseSensitiveLower:\
    \ boolean = false;\n    for (const key in dict) {\n        if (key.toUpperCase()\
    \ === key) {\n            isCaseSensitiveUpper = true;\n        } else if (key.toLowerCase()\
    \ === key) {\n            isCaseSensitiveLower = true;\n        } else {\n   \
    \         isCaseSensitive = true;\n        }\n    }\n    return (isCaseSensitiveUpper\
    \ && !isCaseSensitiveLower) ||\n            (!isCaseSensitiveUpper && isCaseSensitiveLower)\
    \ && !isCaseSensitive;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let value: boolean = true;\n    for\
    \ (let key in dict) {\n        if (key === key.toUpperCase()) {\n            for\
    \ (let key in dict) {\n                if (key !== key.toUpperCase()) {\n    \
    \                value = false;\n                }\n            }\n        }\n\
    \        else if (key === key.toLowerCase()) {\n            for (let key in dict)\
    \ {\n                if (key !== key.toLowerCase()) {\n                    value\
    \ = false;\n                }\n            }\n        }\n        else {\n    \
    \        value = false;\n        }\n    }\n    return value;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1l_yy7d0.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1l_yy7d0.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // let allUpper = true;\n    // let\
    \ allLower = true;\n    let keyList = Object.keys(dict);\n    return keyList.every(k\
    \ => k === k.toUpperCase()) || keyList.every(k => k === k.toLowerCase());\n  \
    \  // return allUpper || allLower;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxhx6a2f1.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxhx6a2f1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    for (let key in dict) {\n        let match = key.match(/[a-z]/);\n\
    \        if (match) {\n            upperCase = false;\n        } else {\n    \
    \        lowerCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnfgktskl.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnfgktskl.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n\n    let isLowerCase: boolean = true;\n  \
    \  let isUpperCase: boolean = true;\n\n    for(let key in dict) {\n        if(key\
    \ !== key.toLowerCase()) {\n            isLowerCase = false;\n        }\n    \
    \    if(key !== key.toUpperCase()) {\n            isUpperCase = false;\n     \
    \   }\n    }\n\n    return isLowerCase || isUpperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmyhcz43q.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmyhcz43q.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n\n    let firstKey = Object.keys(dict)[0];\n\
    \    let firstKeyIsLower = firstKey.toLowerCase() == firstKey;\n\n    for (let\
    \ key in dict) {\n        if (firstKeyIsLower) {\n            if (key.toLowerCase()\
    \ != key) {\n                return false;\n            }\n        } else {\n\
    \            if (key.toUpperCase() != key) {\n                return false;\n\
    \            }\n        }\n    }\n\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5edolf04.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5edolf04.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let first_key = Object.keys(dict)[0];\n\
    \    let val = dict[first_key];\n    let lower = first_key.toLowerCase() === first_key;\n\
    \    if(!val) {\n        return false;\n    }\n    for(let key in dict) {\n  \
    \      if(dict[key].toLowerCase() === dict[key] !== lower) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu0lv80p8.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu0lv80p8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ let upper = [];\n    let lower = [];\n    for (let key of keys) {\n        if\
    \ (isNaN(Number(key))) {\n            if (key.toUpperCase() === key) {\n     \
    \           upper.push(key);\n            } else if (key.toLowerCase() === key)\
    \ {\n                lower.push(key);\n            }\n        }\n    }\n    return\
    \ lower.length === keys.length || upper.length === keys.length;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnvn95y3w.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnvn95y3w.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015326
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let values = Object.values(dict);\n\
    \    let keys = Object.keys(dict);\n    let is_upper = keys[0] === keys[0].toUpperCase();\n\
    \    let is_lower = keys[0] === keys[0].toLowerCase();\n    for (let i: number\
    \ = 0; i < keys.length; i++) {\n        if ((keys[i] === keys[i].toUpperCase()\
    \ && !is_upper) || (keys[i] === keys[i].toLowerCase() && !is_lower)) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxxb0osvf.ts(16,25): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1660015326
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower: boolean = false;\n    let\
    \ upper: boolean = false;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ === key) {\n            lower = true;\n        } else if (key.toUpperCase()\
    \ === key) {\n            upper = true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower || upper;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn5hx3v83.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn5hx3v83.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015327
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const capital_keys = Object.keys(dict).map(x\
    \ => x.toUpperCase());\n    const lower_keys = Object.keys(dict).map(x => x.toLowerCase());\n\
    \    const dict_keys = Object.keys(dict);\n    return dict_keys.length == 0 ?\
    \ false : dict_keys.every((x,i) => x == lower_keys[i]) ? true : dict_keys.every((x,i)\
    \ => x == capital_keys[i]) ? true : false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj_1jsjh4.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj_1jsjh4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015327
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let first_key = Object.keys(dict)[0];\n\
    \    let first_key_case = first_key.toUpperCase() === first_key ? true : false;\n\
    \    let ret_val = true;\n    if(Object.keys(dict).length === 0) {\n        ret_val\
    \ = false;\n    }\n    else {\n        Object.keys(dict).forEach(k => {\n    \
    \        let check_key_case = k.toUpperCase() === k ? true : false;\n        \
    \    if(check_key_case !== first_key_case) {\n                ret_val = false;\n\
    \            }\n        });\n    }\n    return ret_val;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpghks4an3.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpghks4an3.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015328
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n\n    const keys = Object.keys(dict);\n   \
    \ const lowercase = keys.every(key => key === key.toLowerCase());\n    const uppercase\
    \ = keys.every(key => key === key.toUpperCase());\n\n    return lowercase || uppercase;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpak_l4_t6.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpak_l4_t6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  // Your code here...\n  let isUpper =\
    \ false;\n  let isLower = false;\n  for (let key in dict) {\n    if (key.toUpperCase()\
    \ === key) {\n      isUpper = true;\n    } else if (key.toLowerCase() === key)\
    \ {\n      isLower = true;\n    }\n  }\n  return isUpper && isLower ? false :\
    \ true;\n}\n\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\"\
    , \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\"\
    : \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"\
    NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzlxb458k.ts(31,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015328
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict)\n    if\
    \ (keys.length > 0) {\n        let low_case_keys = keys.map(e => e.toLowerCase())\n\
    \        let up_case_keys = keys.map(e => e.toUpperCase())\n        if (low_case_keys.every(e\
    \ => e === low_case_keys[0]) || up_case_keys.every(e => e === up_case_keys[0]))\
    \ {\n            return true\n        }\n    }\n    return false\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeehkdcha.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeehkdcha.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const case_arr = Object.keys(dict).map(e\
    \ => e == e.toUpperCase() || e == e.toLowerCase());\n    if (case_arr.every(e\
    \ => e == true)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\n\
    console.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"\
    apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7rvtu2q0.ts(25,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015328
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    //Write your code here\n    return;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl0_km531.js:22:12)\n \
    \   at Object.<anonymous> (/tmp/tmpl0_km531.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // Your code goes here\n    var upCount\
    \ = 0;\n    var lowCount = 0;\n    for (var i in dict) {\n        if (i.toUpperCase()\
    \ == i) {\n            upCount += 1;\n        }\n        else if (i.toLowerCase()\
    \ == i) {\n            lowCount += 1;\n        }\n    }\n    return lowCount ==\
    \ Object.keys(dict).length || upCount == Object.keys(dict).length;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq9r7tetg.ts(31,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015328
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upper = 0;\n    let lower = 0;\n\
    \    for (let key in dict) {\n        let s = key.toString();\n        if (s.match(/[a-z]/))\
    \ {\n            lower += 1;\n        } else if (s.match(/[A-Z]/)) {\n       \
    \     upper += 1;\n        }\n    }\n    return (lower > 0 && upper == 0) || (lower\
    \ == 0 && upper > 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt_khz1cn.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt_khz1cn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let state: boolean = true;\n    if\
    \ (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let first_key\
    \ = Object.keys(dict)[0];\n    if (first_key.toUpperCase() === first_key) {\n\
    \        Object.keys(dict).forEach(key => {\n            if (key.toUpperCase()\
    \ !== key) {\n                state = false;\n            }\n        });\n   \
    \ } else {\n        Object.keys(dict).forEach(key => {\n            if (key.toLowerCase()\
    \ !== key) {\n                state = false;\n            }\n        });\n   \
    \ }\n    return state;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015328
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // if (Object.keys(dict).length ==\
    \ 0) {\n    //     return false;\n    // }\n\n    // let lower_keys = true;\n\
    \    // let upper_keys = true;\n    // Object.keys(dict).forEach(key => {\n  \
    \  //     if (key.toLowerCase() != key) {\n    //         lower_keys = false;\n\
    \    //     }\n    //     if (key.toUpperCase() != key) {\n    //         upper_keys\
    \ = false;\n    //     }\n    // })\n    // return lower_keys || upper_keys;\n\
    \n    if (Object.keys(dict).length == 0) {\n        return false;\n    }\n\n \
    \   let lower_keys = true;\n    let upper_keys = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() != key) {\n            lower_keys = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper_keys =\
    \ false;\n        }\n    }\n    return lower_keys || upper_keys;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp716_re1.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp716_re1.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ if (keys.length === 0) {\n        return false;\n    }\n    let firstKey = keys[0];\n\
    \    let allLower = firstKey === firstKey.toLowerCase();\n    let allUpper = firstKey\
    \ === firstKey.toUpperCase();\n    if (!allLower && !allUpper) {\n        return\
    \ false;\n    }\n    let result = true;\n    for (let key of keys) {\n       \
    \ if (allLower && key !== key.toLowerCase()) {\n            result = false;\n\
    \            break;\n        }\n        if (allUpper && key !== key.toUpperCase())\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015329
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower: boolean = true;\n    let\
    \ upper: boolean = true;\n    if (Object.keys(dict).length == 0) {\n        return\
    \ false;\n    }\n    Object.keys(dict).forEach(function(key) {\n        if (isNaN(Number(key)))\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false;\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false;\n            }\n        } else {\n            lower = false;\n    \
    \        upper = false;\n        }\n    });\n    return lower || upper;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let all_lower = false;\n    let all_upper\
    \ = false;\n    let first_key = Object.keys(dict)[0];\n    if (typeof first_key\
    \ === \"string\") {\n        all_lower = first_key === first_key.toLowerCase();\n\
    \        all_upper = first_key === first_key.toUpperCase();\n    }\n    let dict_keys\
    \ = Object.keys(dict);\n    for (let i = 0; i < dict_keys.length; i++) {\n   \
    \     let curr_key = dict_keys[i];\n        if (typeof curr_key === \"string\"\
    ) {\n            let curr_key_lower = curr_key === curr_key.toLowerCase();\n \
    \           let curr_key_upper = curr_key === curr_key.toUpperCase();\n      \
    \      if (all_lower && !curr_key_lower) {\n                return false;\n  \
    \          }\n            if (all_upper && !curr_key_upper) {\n              \
    \  return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdy85a8w1.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdy85a8w1.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const lowerKeys = Object.keys(dict).filter(key\
    \ => key === key.toLowerCase());\n    const upperKeys = Object.keys(dict).filter(key\
    \ => key === key.toUpperCase());\n    if (Object.keys(dict).length === 0) {\n\
    \        return false;\n    }\n    return (lowerKeys.length === Object.keys(dict).length\
    \ || upperKeys.length === Object.keys(dict).length);\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsmopw4e2.ts(25,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015329
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const upperKeys = Object.keys(dict).filter(\n\
    \        (k) => k.toUpperCase() === k);\n    const lowerKeys = Object.keys(dict).filter(\n\
    \        (k) => k.toLowerCase() === k);\n    return upperKeys.length === Object.keys(dict).length\n\
    \        || lowerKeys.length === Object.keys(dict).length;\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9_qm7lhy.ts(25,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015329
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let firstKey = dict[Object.keys(dict)[0]];\n\
    \    return Object.keys(dict).every(key => dict[key] === firstKey);\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjdszpc4b.ts(21,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let isUpper = true;\n  let isLower =\
    \ true;\n  let isFirst = true;\n  let numKeys = 0;\n  for (let key in dict) {\n\
    \    let isLowerKey = false;\n    let isUpperKey = false;\n    if (key.toLowerCase()\
    \ === key) {\n      isLowerKey = true;\n    }\n    if (key.toUpperCase() === key)\
    \ {\n      isUpperKey = true;\n    }\n    if (isFirst) {\n      isLower = isLowerKey;\n\
    \      isUpper = isUpperKey;\n      isFirst = false;\n    }\n    if (isLower)\
    \ {\n      isLower = isLowerKey;\n    }\n    if (isUpper) {\n      isUpper = isUpperKey;\n\
    \    }\n    numKeys++;\n  }\n  if (numKeys === 0) {\n    return false;\n  }\n\
    \  return isLower || isUpper;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsfhdq8xn.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsfhdq8xn.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // check if dictionary is empty.\n\
    \    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n   \
    \ // Assume dictionary is all lower case to start.\n    let is_all_lower = true;\n\
    \    // Go through each key and if key is not lower case, \n    // then assume\
    \ all keys are not lower case.\n    for (let key in dict) {\n        if (key !==\
    \ key.toLowerCase()) {\n            is_all_lower = false;\n            break;\n\
    \        }\n    }\n    // If dictionary is all lower case, return true.\n    if\
    \ (is_all_lower) {\n        return true;\n    }\n    // Assume all keys are upper\
    \ case.\n    let is_all_upper = true;\n    // Go through each key and if key is\
    \ not upper case,\n    // then assume all keys are not upper case.\n    for (let\
    \ key in dict) {\n        if (key !== key.toUpperCase()) {\n            is_all_upper\
    \ = false;\n            break;\n        }\n    }\n    // If all keys are upper\
    \ case, return true.\n    if (is_all_upper) {\n        return true;\n    }\n \
    \   // Return false if not all keys are either lower or upper case.\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo95rgcwj.js:56:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo95rgcwj.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const lowerCase = Object.keys(dict).every(key\
    \ => key === key.toLowerCase());\n    const upperCase = Object.keys(dict).every(key\
    \ => key === key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4w90ps1i.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4w90ps1i.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let isUpper = Object.keys(dict)[0] ===\
    \ Object.keys(dict)[0].toUpperCase();\n    let isLower = Object.keys(dict)[0]\
    \ === Object.keys(dict)[0].toLowerCase();\n    for (let key in dict) {\n     \
    \   if (isUpper && key !== key.toUpperCase()) {\n            return false;\n \
    \       }\n        if (isLower && key !== key.toLowerCase()) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvikphrt0.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvikphrt0.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return Object.keys(dict).every(k =>\
    \ k.toUpperCase() === k || k.toLowerCase() === k);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa9h8vwhk.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa9h8vwhk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowercaseKeys: number = 0;\n  \
    \  let uppercaseKeys: number = 0;\n    for (let k in dict) {\n        if (k.toLowerCase()\
    \ === k) {\n            lowercaseKeys += 1;\n        } else if (k.toUpperCase()\
    \ === k) {\n            uppercaseKeys += 1;\n        }\n    }\n    return (lowercaseKeys\
    \ === Object.keys(dict).length) || (uppercaseKeys === Object.keys(dict).length);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb4zbybui.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb4zbybui.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isLowerCase: boolean = true;\n\
    \    let isUpperCase: boolean = true;\n    let isEmpty: boolean = true;\n    for\
    \ (let key in dict) {\n        if (isLowerCase && key.toLowerCase() !== key) {\n\
    \            isLowerCase = false;\n        }\n        if (isUpperCase && key.toUpperCase()\
    \ !== key) {\n            isUpperCase = false;\n        }\n        isEmpty = false;\n\
    \    }\n    return isLowerCase || isUpperCase || isEmpty;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnuurz_xl.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnuurz_xl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015329
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let results: boolean[] = [];\n  let upperCase:\
    \ boolean[] = [];\n  let lowerCase: boolean[] = [];\n  if (dict === {}) {\n  \
    \  return false;\n  }\n  for (let key in dict) {\n    if (key === key.toUpperCase())\
    \ {\n      upperCase.push(true);\n    } else {\n      upperCase.push(false);\n\
    \    }\n    if (key === key.toLowerCase()) {\n      lowerCase.push(true);\n  \
    \  } else {\n      lowerCase.push(false);\n    }\n  }\n  for (let i = 0; i < upperCase.length;\
    \ i++) {\n    if (upperCase[i] === false && lowerCase[i] === false) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuer_dj4l.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuer_dj4l.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let all_upper = true;\n    let all_lower\
    \ = true;\n    for (let key in dict) {\n        if (key != key.toUpperCase())\
    \ {\n            all_upper = false;\n        }\n        if (key != key.toLowerCase())\
    \ {\n            all_lower = false;\n        }\n    }\n    return all_upper ||\
    \ all_lower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptab8nxm_.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptab8nxm_.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let res = false;\n    let keys: string[]\
    \ = Object.keys(dict);\n    for (let key of keys) {\n        if (key.toLowerCase()\
    \ === key || key.toUpperCase() === key) {\n            res = true;\n        }\
    \ else {\n            res = false;\n            break;\n        }\n    }\n   \
    \ return res;\n}\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\": \"\
    36\", \"City\": \"Houston\"}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg1fhbw1j.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg1fhbw1j.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    '
  timestamp: 1660015331
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    if(dict.size\
    \ < 1) {\n        return false;\n    }\n    Object.keys(dict).forEach(e => {\n\
    \        if(e != e.toUpperCase() && e != e.toLowerCase()) {\n            result\
    \ = false;\n        }\n    });\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcdi6y7wy.ts(17,8): error TS2365: Operator ''<'' cannot
    be applied to types ''string'' and ''number''.

    '
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowercase: boolean = true;\n  \
    \  let uppercase: boolean = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ != key) {\n            lowercase = false;\n        }\n        if (key.toUpperCase()\
    \ != key) {\n            uppercase = false;\n        }\n    }\n    return lowercase\
    \ || uppercase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4rm7x6gu.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4rm7x6gu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    const\
    \ keys = Object.keys(dict);\n    const values = Object.values(dict);\n    for\
    \ (let i = 0; i < keys.length; i++) {\n        if (!(keys[i].toLowerCase() ===\
    \ keys[i] || keys[i].toUpperCase() === keys[i])) {\n            result = false;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(check_dict_case({\"a\":\
    \ \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpplhblixf.ts(18,27): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmpplhblixf.ts(28,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n    let check_upper = true;\n    let check_lower\
    \ = true;\n    for (let key in dict) {\n        if (key.toUpperCase() != key)\
    \ {\n            check_upper = false;\n        }\n        if (key.toLowerCase()\
    \ != key) {\n            check_lower = false;\n        }\n    }\n    return check_upper\
    \ || check_lower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0e7zp31x.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0e7zp31x.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    //False if empty\n    if(Object.keys(dict).length\
    \ == 0) {\n        return false;\n    }\n    //check if in lowercase\n    let\
    \ keys = Object.keys(dict).map(k => k.toLowerCase());\n    if(JSON.stringify(keys)\
    \ == JSON.stringify(Object.keys(dict))) {\n        return true;\n    }\n\n   \
    \ //check if in uppercase\n    keys = Object.keys(dict).map(k => k.toUpperCase());\n\
    \    if(JSON.stringify(keys) == JSON.stringify(Object.keys(dict))) {\n       \
    \ return true;\n    }\n\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp70pundtt.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp70pundtt.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let check = true;\n    let test: string\
    \ = '';\n    if (Object.keys(dict).length === 0) {\n        return false;\n  \
    \  }\n    for (let k in dict) {\n        if (typeof(k) !== 'string') {\n     \
    \       return false;\n        }\n        if (test === '') {\n            test\
    \ = k;\n        }\n        if (test.toLowerCase() === k.toLowerCase()) {\n   \
    \         check = true;\n        } else {\n            check = false;\n      \
    \  }\n    }\n    return check;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcceq6pl3.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcceq6pl3.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let str_case:string = \"\"\n    for\
    \ (let key in dict) {\n        if (str_case == \"\") {\n            str_case =\
    \ key.toLowerCase() == key ? \"lower\" : \"upper\"\n        }\n        else {\n\
    \            let comp_case = key.toLowerCase() == key ? \"lower\" : \"upper\"\n\
    \            if (str_case != comp_case) {\n                return false\n    \
    \        }\n        }\n    }\n    return true\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpar1xt61j.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpar1xt61j.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let lower_case = false;\n    let upper_case\
    \ = false;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            lower_case = true;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            upper_case = true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case !== upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4exzb1ub.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4exzb1ub.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isUpper = true;\n    let isLower\
    \ = true;\n    for (let key in dict) {\n        if (isUpper) {\n            isUpper\
    \ = !key.toLowerCase().includes(key);\n        }\n        if (isLower) {\n   \
    \         isLower = !key.toUpperCase().includes(key);\n        }\n    }\n    return\
    \ isUpper || isLower;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp70pgf43h.ts(20,42): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp70pgf43h.ts(23,42): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   if (keys.length == 0) {\n        return false;\n    }\n\n    let lower = keys[0].toLowerCase()\
    \ == keys[0];\n    let upper = keys[0].toUpperCase() == keys[0];\n    for (let\
    \ i = 1; i < keys.length; i++) {\n        lower = lower && keys[i].toLowerCase()\
    \ == keys[i];\n        upper = upper && keys[i].toUpperCase() == keys[i];\n  \
    \  }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprsapfmug.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprsapfmug.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let low = true;\n    let up = true;\n\
    \    let result = false;\n    for (let key in dict) {\n        if (!key.match(/^[a-z]+$/))\
    \ {\n            low = false;\n        }\n        if (!key.match(/^[A-Z]+$/))\
    \ {\n            up = false;\n        }\n    }\n    if (low || up) {\n       \
    \ result = true;\n    }\n    return result;\n}\n\nexport {check_dict_case};\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3sno_zht.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3sno_zht.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if(Object.keys(dict).length === 0) {\n\
    \    return false;\n  }\n\n  for(let key in dict) {\n    if(key.toLowerCase()\
    \ === key && key.toUpperCase() === key) {\n      return false;\n    }\n  }\n\n\
    \  for(let key in dict) {\n    if(key === key.toLowerCase()) {\n      return Object.keys(dict).every(key\
    \ => key === key.toLowerCase());\n    } else {\n      return Object.keys(dict).every(key\
    \ => key === key.toUpperCase());\n    }\n  }\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // https://stackoverflow.com/questions/1673032/is-there-a-way-to-determine-the-case-sensitivity-of-a-javascript-string\n\
    \    let keyUpperCase = false;\n    let keyLowerCase = false;\n    for (let key\
    \ in dict) {\n        if (key.toUpperCase() === key) {\n            keyUpperCase\
    \ = true;\n        } else if (key.toLowerCase() === key) {\n            keyLowerCase\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return keyUpperCase === keyLowerCase;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdbpndyeg.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdbpndyeg.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015331
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (dict == {}) {\n        return false;\n\
    \    }\n    let keys = Object.keys(dict);\n    let vals = Object.values(dict);\n\
    \    let lowerCase = false;\n    let upperCase = false;\n    for (let index =\
    \ 0; index < keys.length; index++) {\n        let element = keys[index];\n   \
    \     if (element == element.toLowerCase()) {\n            lowerCase = true;\n\
    \        }\n        if (element == element.toUpperCase()) {\n            upperCase\
    \ = true;\n        }\n    }\n    if (lowerCase && upperCase) {\n        return\
    \ false;\n    }\n    return true;\n}\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\"\
    : \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\":\
    \ \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdkof13_n.ts(20,23): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmpdkof13_n.ts(39,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1660015331
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower = true;\n    let upper =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lower = false;\n        }\n        if (key.toUpperCase() !== key)\
    \ {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp56w_b39.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp56w_b39.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015332
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let low = true;\n  let high = true;\n\
    \  for (let i in dict) {\n    if (i != i.toLowerCase()) {\n      low = false;\n\
    \    }\n    if (i != i.toUpperCase()) {\n      high = false;\n    }\n  }\n  return\
    \ (low || high);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqk3kf9oq.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqk3kf9oq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015332
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n    let isLower = dict[Object.keys(dict)[0]].toLowerCase()\
    \ == dict[Object.keys(dict)[0]];\n    for (let i = 0; i < Object.keys(dict).length;\
    \ i++) {\n        if (isLower && dict[Object.keys(dict)[i]].toLowerCase() != dict[Object.keys(dict)[i]])\
    \ {\n            return false;\n        }\n        if (!isLower && dict[Object.keys(dict)[i]].toUpperCase()\
    \ != dict[Object.keys(dict)[i]]) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmply1pthlm.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmply1pthlm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015332
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf40d3m1f.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf40d3m1f.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822215
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // code goes here\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_93mxe4j.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_93mxe4j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015332
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const upCount = Object.keys(dict).filter(k\
    \ => k.toUpperCase() === k).length;\n    const lowCount = Object.keys(dict).filter(k\
    \ => k.toLowerCase() === k).length;\n    return upCount === 0 || lowCount ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy5cetm72.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy5cetm72.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015332
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    let upper = true;\n    let lower = true;\n\
    \    for (let key in dict) {\n        let keyValue = dict[key];\n        if (typeof\
    \ key !== \"string\") {\n            return false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n        if (key.toLowerCase()\
    \ !== key) {\n            lower = false;\n        }\n    }\n    return upper ||\
    \ lower;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpabjhqfkr.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpabjhqfkr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015332
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lc: boolean = true;\n    let uc:\
    \ boolean = true;\n    Object.keys(dict).forEach(key => {\n        lc = lc &&\
    \ key.toLowerCase() === key;\n        uc = uc && key.toUpperCase() === key;\n\
    \    });\n    return lc || uc;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphoblotc7.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphoblotc7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015333
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upper = true;\n    let lower =\
    \ true;\n    for (let key in dict) {\n        upper = upper && key.toUpperCase()\
    \ === key;\n        lower = lower && key.toLowerCase() === key;\n    }\n    return\
    \ lower || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu2vld3ju.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu2vld3ju.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015333
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (dict.length === 0) return false;\n\
    \    let out: number[] = [];\n    for (let key in dict) {\n        if (key.toUpperCase()\
    \ === key) {\n            out.push(1);\n        } else if (key.toLowerCase() ===\
    \ key) {\n            out.push(0);\n        } else {\n            return false;\n\
    \        }\n    }\n    if (out.includes(1) && out.includes(0)) {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaenp_6rl.ts(16,9): error TS2367: This condition will
    always return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpaenp_6rl.ts(27,13): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpaenp_6rl.ts(27,32): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015333
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerKeys = Object.keys(dict).filter(key\
    \ => key === key.toLowerCase());\n    let upperKeys = Object.keys(dict).filter(key\
    \ => key === key.toUpperCase());\n    return !(lowerKeys.length === 0 || upperKeys.length\
    \ === 0)\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\"\
    , \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\"\
    : \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"\
    NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd9nw10y4.ts(22,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015333
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let strUpper = true;\n    let strLower\
    \ = true;\n    let result = false;\n    Object.values(dict).forEach(element =>\
    \ {\n        if (typeof element !== \"string\") {\n            return;\n     \
    \   } else {\n            if (element.toUpperCase() === element) {\n         \
    \       strLower = false;\n            } else if (element.toLowerCase() === element)\
    \ {\n                strUpper = false;\n            } else {\n               \
    \ strLower = false;\n                strUpper = false;\n            }\n      \
    \  }\n    });\n    if (strUpper || strLower) {\n        result = true;\n    }\n\
    \    return result;\n}\nlet myDict = {\"a\": \"apple\", \"b\": \"banana\"};\n\
    console.log(check_dict_case(myDict));\nmyDict = {\"a\": \"apple\", \"A\": \"banana\"\
    , \"B\": \"banana\"};\nconsole.log(check_dict_case(myDict));\nmyDict = {\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"};\nconsole.log(check_dict_case(myDict));\n\
    myDict = {\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"};\nconsole.log(check_dict_case(myDict));\n\
    myDict = {\"STATE\": \"NC\", \"ZIP\": \"12345\"};\nconsole.log(check_dict_case(myDict));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp4xeryl5t.ts(19,12): error TS2339: Property 'values'\
    \ does not exist on type 'ObjectConstructor'.\n../../../../../tmp/tmp4xeryl5t.ts(40,25):\
    \ error TS2322: Type '{ \"a\": string; \"A\": string; \"B\": string; }' is not\
    \ assignable to type '{ \"a\": string; \"b\": string; }'.\n  Object literal may\
    \ only specify known properties, and '\"A\"' does not exist in type '{ \"a\":\
    \ string; \"b\": string; }'.\n../../../../../tmp/tmp4xeryl5t.ts(42,25): error\
    \ TS2322: Type '{ \"a\": string; 8: string; }' is not assignable to type '{ \"\
    a\": string; \"b\": string; }'.\n  Object literal may only specify known properties,\
    \ and '8' does not exist in type '{ \"a\": string; \"b\": string; }'.\n../../../../../tmp/tmp4xeryl5t.ts(42,38):\
    \ error TS2300: Duplicate identifier '\"a\"'.\n../../../../../tmp/tmp4xeryl5t.ts(44,11):\
    \ error TS2322: Type '{ \"Name\": string; \"Age\": string; \"City\": string; }'\
    \ is not assignable to type '{ \"a\": string; \"b\": string; }'.\n  Object literal\
    \ may only specify known properties, and '\"Name\"' does not exist in type '{\
    \ \"a\": string; \"b\": string; }'.\n../../../../../tmp/tmp4xeryl5t.ts(46,11):\
    \ error TS2322: Type '{ \"STATE\": string; \"ZIP\": string; }' is not assignable\
    \ to type '{ \"a\": string; \"b\": string; }'.\n  Object literal may only specify\
    \ known properties, and '\"STATE\"' does not exist in type '{ \"a\": string; \"\
    b\": string; }'.\n"
  timestamp: 1660015333
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let count = 0;\n    for (let key in\
    \ dict) {\n        count++;\n        if (count > 1) {\n            if (key.toLowerCase()\
    \ === key && dict[key].toLowerCase() === dict[key]) {\n                return\
    \ true;\n            } else if (key.toUpperCase() === key && dict[key].toUpperCase()\
    \ === dict[key]) {\n                return true;\n            } else {\n     \
    \           return false;\n            }\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxe64ax76.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxe64ax76.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015333
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let key_list: string[] = Object.keys(dict);\n\
    \    let is_upper: boolean = key_list[0].toUpperCase() === key_list[0];\n    let\
    \ is_valid: boolean = true;\n    for (let key of key_list) {\n        let is_string:\
    \ boolean = typeof key === \"string\";\n        let is_uppercase: boolean = key.toUpperCase()\
    \ === key;\n        if (is_upper !== is_uppercase || !is_string) {\n         \
    \   is_valid = false;\n            break;\n        }\n    }\n    return is_valid;\n\
    }\nconsole.log(`Should return true: ${check_dict_case({\"a\": \"apple\", \"b\"\
    : \"banana\"})}`);\nconsole.log(`Should return false: ${check_dict_case({\"a\"\
    : \"apple\", \"A\": \"banana\", \"B\": \"banana\"})}`);\nconsole.log(`Should return\
    \ false: ${check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })}`);\nconsole.log(`Should return false: ${check_dict_case({\"Name\": \"John\"\
    , \"Age\": \"36\", \"City\": \"Houston\"})}`);\nconsole.log(`Should return true:\
    \ ${check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})}`);\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkmnd1jyr.ts(31,81): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015334
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys: string[] = Object.keys(dict);\n\
    \    let lowerCase = keys.every(key => {\n        return typeof key === \"string\"\
    \ && key.toLowerCase() === key;\n    });\n    let upperCase = keys.every(key =>\
    \ {\n        return typeof key === \"string\" && key.toUpperCase() === key;\n\
    \    });\n    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplnlf_aal.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplnlf_aal.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerKey: string[] = [];\n    let\
    \ upperKey: string[] = [];\n    if (Object.keys(dict).length === 0) {\n      \
    \  return false;\n    } else {\n        for (let k in dict) {\n            if\
    \ (k === k.toLowerCase()) {\n                lowerKey.push(k);\n            }\
    \ else {\n                upperKey.push(k);\n            }\n        }\n      \
    \  if (lowerKey.length === 0 || upperKey.length === 0) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    }\n}\nlet dict1:\
    \ {[key: string]: string} = {\"a\": \"apple\", \"b\": \"banana\"};\nlet dict2:\
    \ {[key: string]: string} = {\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"\
    };\nlet dict3: {[key: string]: string} = {\"a\": \"apple\", 8: \"banana\", \"\
    a\": \"apple\"};\nlet dict4: {[key: string]: string} = {\"Name\": \"John\", \"\
    Age\": \"36\", \"City\": \"Houston\"};\nlet dict5: {[key: string]: string} = {\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"};\nlet dict6: {[key: string]: string} = {};\n\
    console.log(check_dict_case(dict1));\nconsole.log(check_dict_case(dict2));\nconsole.log(check_dict_case(dict3));\n\
    console.log(check_dict_case(dict4));\nconsole.log(check_dict_case(dict5));\nconsole.log(check_dict_case(dict6));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp864iskuf.ts(37,66): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict)\n    for\
    \ (let i = 0; i < keys.length; i++) {\n        if (isNaN(Number(keys[i]))) {\n\
    \            if (isLowerCase(keys[i])) {\n                for (let j = 0; j <\
    \ keys.length; j++) {\n                    if (!isLowerCase(keys[j])) {\n    \
    \                    return false\n                    }\n                }\n\
    \            } else if (isUpperCase(keys[i])) {\n                for (let j =\
    \ 0; j < keys.length; j++) {\n                    if (!isUpperCase(keys[j])) {\n\
    \                        return false\n                    }\n               \
    \ }\n            } else {\n                return false\n            }\n     \
    \   } else {\n            return false\n        }\n    }\n    return true\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3r6fo2z_.ts(19,17): error TS2304: Cannot find name
    ''isLowerCase''.

    ../../../../../tmp/tmp3r6fo2z_.ts(21,26): error TS2304: Cannot find name ''isLowerCase''.

    ../../../../../tmp/tmp3r6fo2z_.ts(25,24): error TS2304: Cannot find name ''isUpperCase''.

    ../../../../../tmp/tmp3r6fo2z_.ts(27,26): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isUpper = false;\n    let isLower\
    \ = false;\n    for (let key in dict) {\n        if (key.toUpperCase() === key)\
    \ {\n            isUpper = true;\n        } else if (key.toLowerCase() === key)\
    \ {\n            isLower = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return isUpper ^ isLower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkco2l382.ts(27,5): error TS2322: Type ''number''
    is not assignable to type ''boolean''.

    ../../../../../tmp/tmpkco2l382.ts(27,12): error TS2447: The ''^'' operator is
    not allowed for boolean types. Consider using ''!=='' instead.

    '
  timestamp: 1660015334
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // your code here\n    let ans: boolean\
    \ = true;\n    if (dict == {}) {\n        ans = false;\n    }\n    if (Object.keys(dict)[0]\
    \ == Object.keys(dict)[0].toUpperCase()) {\n        Object.keys(dict).forEach(function(element){\n\
    \            if (element.toUpperCase() != element) {\n                ans = false;\n\
    \            }\n        });\n    } else {\n        Object.keys(dict).forEach(function(element){\n\
    \            if (element.toLowerCase() != element) {\n                ans = false;\n\
    \            }\n        });\n    }\n    return ans;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpi3a_udqh.js:21\n    if (Object.keys(dict)[0] == Object.keys(dict)[0].toUpperCase())\
    \ {\n                                                    ^\n\nTypeError: Cannot\
    \ read properties of undefined (reading 'toUpperCase')\n    at check_dict_case\
    \ (/tmp/tmpi3a_udqh.js:21:53)\n    at test (/tmp/tmpi3a_udqh.js:46:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpi3a_udqh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015334
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ let boolean: boolean = true;\n    for (let i = 0; i < keys.length; i++) {\n\
    \        let key = keys[i];\n        if (key === key.toLowerCase()) {\n      \
    \      for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n\
    \                if (key !== key.toLowerCase()) {\n                    boolean\
    \ = false;\n                }\n            }\n        } else if (key === key.toUpperCase())\
    \ {\n            for (let i = 0; i < keys.length; i++) {\n                let\
    \ key = keys[i];\n                if (key !== key.toUpperCase()) {\n         \
    \           boolean = false;\n                }\n            }\n        } else\
    \ {\n            boolean = false;\n        }\n    }\n    return boolean;\n}\n\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpawa0quq9.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpawa0quq9.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015334
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ if (keys.length === 0) {\n        return false;\n    }\n    let isUpperCase\
    \ = keys[0] === keys[0].toUpperCase();\n    for (let key of keys) {\n        if\
    \ (isUpperCase && key !== key.toUpperCase()) {\n            return false;\n  \
    \      }\n        if (!isUpperCase && key !== key.toLowerCase()) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015334
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  let lowerCase: boolean = true;\n  let\
    \ upperCase: boolean = true;\n  for (let key in dict) {\n    if (key.toLowerCase()\
    \ !== key) {\n      lowerCase = false;\n    }\n    if (key.toUpperCase() !== key)\
    \ {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpih1ro9zq.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpih1ro9zq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length == 0) return\
    \ false;\n    let count = 0;\n    let flag: boolean = true;\n    let count_upper\
    \ = 0;\n    let count_lower = 0;\n    for(let key in dict) {\n        if(key.toUpperCase()\
    \ == key) {\n            count_upper++;\n        }\n        else if(key.toLowerCase()\
    \ == key) {\n            count_lower++;\n        }\n        else {\n         \
    \   count++;\n        }\n    }\n    return (count == 0) && (count_upper == Object.keys(dict).length\
    \ || count_lower == Object.keys(dict).length);\n}\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk_a4s9nr.ts(36,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015334
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let allLower = true;\n    let allUpper\
    \ = true;\n    for (let key in dict) {\n        if (typeof key === \"string\"\
    ) {\n            if (key !== key.toLowerCase()) {\n                allLower =\
    \ false;\n            }\n            if (key !== key.toUpperCase()) {\n      \
    \          allUpper = false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return allLower || allUpper;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_hfwy7pn.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_hfwy7pn.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // determine if every key is lowercase\n\
    \    let areAllKeysLowerCase = Object.keys(dict).every(key => key === key.toLowerCase());\n\
    \    let areAllKeysUpperCase = Object.keys(dict).every(key => key === key.toUpperCase());\n\
    \    return areAllKeysLowerCase || areAllKeysUpperCase;\n}\n\ntest(\"Test Case\
    \ 1\", () => {\n    const input = {\"a\": \"apple\", \"b\": \"banana\"};\n   \
    \ const result = check_dict_case(input);\n    expect(result).toBe(true);\n});\n\
    \ntest(\"Test Case 2\", () => {\n    const input = {\"a\": \"apple\", \"A\": \"\
    banana\", \"B\": \"banana\"};\n    const result = check_dict_case(input);\n  \
    \  expect(result).toBe(false);\n});\n\ntest(\"Test Case 3\", () => {\n    const\
    \ input = {\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"};\n    const result\
    \ = check_dict_case(input);\n    expect(result).toBe(false);\n});\n\ntest(\"Test\
    \ Case 4\", () => {\n    const input = {\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"};\n    const result = check_dict_case(input);\n    expect(result).toBe(false);\n\
    });\n\ntest(\"Test Case 5\", () => {\n    const input = {\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"};\n    const result = check_dict_case(input);\n    expect(result).toBe(true);\n\
    });\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphf3q7c_p.ts(22,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmphf3q7c_p.ts(25,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmphf3q7c_p.ts(28,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmphf3q7c_p.ts(31,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmphf3q7c_p.ts(34,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmphf3q7c_p.ts(35,47): error TS2300: Duplicate identifier ''"a"''.

    ../../../../../tmp/tmphf3q7c_p.ts(37,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmphf3q7c_p.ts(40,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmphf3q7c_p.ts(43,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmphf3q7c_p.ts(46,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmphf3q7c_p.ts(49,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keyArray: string[] = Object.keys(dict);\n\
    \    let valueArray: string[] = Object.values(dict);\n    let keyUpperCase = true;\n\
    \    let keyLowerCase = true;\n    for (let key of keyArray) {\n        if (!isUpperCase(key))\
    \ {\n            keyUpperCase = false;\n        }\n        if (!isLowerCase(key))\
    \ {\n            keyLowerCase = false;\n        }\n    }\n    if (keyUpperCase\
    \ || keyLowerCase) {\n        return true;\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyfopcp9p.ts(17,39): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmpyfopcp9p.ts(21,14): error TS2304: Cannot find name ''isUpperCase''.

    ../../../../../tmp/tmpyfopcp9p.ts(24,14): error TS2304: Cannot find name ''isLowerCase''.

    '
  timestamp: 1660015334
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   if (keys.length === 0) {\n        return false;\n    }\n    const lowerCaseKeys\
    \ = keys.filter(key => key.toLowerCase() === key);\n    const upperCaseKeys =\
    \ keys.filter(key => key.toUpperCase() === key);\n    return lowerCaseKeys.length\
    \ === keys.length || upperCaseKeys.length === keys.length;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxswf2ldz.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxswf2ldz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isLower = false;\n    let isUpper\
    \ = false;\n    for (let key in dict) {\n        if (key.toUpperCase() === key)\
    \ {\n            isUpper = true;\n        } else if (key.toLowerCase() === key)\
    \ {\n            isLower = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return (isLower && !isUpper) || (!isLower && isUpper);\n\
    }\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd7c_yelb.ts(31,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const upperKeys = Object.keys(dict).map(key\
    \ => key.toUpperCase());\n    const lowerKeys = Object.keys(dict).map(key => key.toLowerCase());\n\
    \    const values = Object.values(dict);\n    const isUpperCase = Object.keys(dict).every(key\
    \ => key === upperKeys[upperKeys.indexOf(key)]);\n    const isLowerCase = Object.keys(dict).every(key\
    \ => key === lowerKeys[lowerKeys.indexOf(key)]);\n    const allValuesAreStrings\
    \ = values.every(value => typeof value === 'string');\n    return (isUpperCase\
    \ || isLowerCase) && allValuesAreStrings;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprdhyf7s1.ts(18,27): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (dict == {}) {\n        return false;\n\
    \    }\n    var lower_dict = {};\n    var upper_dict = {};\n    for (var key in\
    \ dict) {\n        if (key === key.toLowerCase()) {\n            lower_dict[key]\
    \ = dict[key];\n        } else {\n            upper_dict[key] = dict[key];\n \
    \       }\n    }\n    if (Object.keys(lower_dict).length == 0 || Object.keys(upper_dict).length\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log(check_dict_case({}));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7ht4_nbh.ts(36,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015334
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let firstKey = dict[Object.keys(dict)[0]];\n\
    \    let firstKeyType = typeof firstKey;\n    let flag = false;\n    Object.keys(dict).forEach(key\
    \ => {\n        if(firstKeyType !== typeof dict[key]) {\n            flag = true;\n\
    \        }\n    });\n    if(flag) {\n        return false;\n    } else {\n   \
    \     let keys = Object.keys(dict);\n        let lowerKeys = keys.filter(key =>\
    \ key.toLowerCase() === key);\n        let upperKeys = keys.filter(key => key.toUpperCase()\
    \ === key);\n        if(lowerKeys.length === keys.length || upperKeys.length ===\
    \ keys.length) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    }\n}\n\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\"\
    : \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\":\
    \ \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log(check_dict_case({}));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuk6o0rty.ts(40,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015335
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // Your code here!\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    const isAllLower = Object.keys(dict).every(k\
    \ => {\n        return k.toLowerCase() === k;\n    });\n    const isAllUpper =\
    \ Object.keys(dict).every(k => {\n        return k.toUpperCase() === k;\n    });\n\
    \    return isAllLower || isAllUpper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnlph41z6.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnlph41z6.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ let case_set = new Set();\n    for (let key of keys) {\n        let case_type\
    \ = key.toUpperCase() === key ? 'upper' : 'lower';\n        case_set.add(case_type);\n\
    \    }\n    return case_set.size === 1;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppdom5smg.ts(17,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015335
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    let\
    \ lowerCaseKeys: number = 0;\n    let upperCaseKeys: number = 0;\n    for (let\
    \ key in dict) {\n        if (isNaN(Number(key))) {\n            if (key.toLowerCase()\
    \ === key) {\n                lowerCaseKeys++;\n            } else if (key.toUpperCase()\
    \ === key) {\n                upperCaseKeys++;\n            } else {\n       \
    \         result = false;\n            }\n        } else {\n            result\
    \ = false;\n        }\n    }\n    if (lowerCaseKeys > 0 && upperCaseKeys > 0)\
    \ {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1xj1b4mi.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1xj1b4mi.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    const\
    \ keys: string[] = Object.keys(dict);\n    const key = keys[0];\n    let isAllLowerCase:\
    \ boolean = true;\n    let isAllUpperCase: boolean = true;\n    if (key === undefined)\
    \ {\n        return false;\n    }\n    if (key !== key.toLowerCase()) {\n    \
    \    isAllLowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n  \
    \      isAllUpperCase = false;\n    }\n    for (const k of keys) {\n        if\
    \ (isAllLowerCase && k !== k.toLowerCase()) {\n            result = false;\n \
    \           break;\n        }\n        if (isAllUpperCase && k !== k.toUpperCase())\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp54kj_9j6.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp54kj_9j6.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // if dict is empty, return false\n\
    \    if(Object.keys(dict).length == 0) return false;\n    // create two arrays,\
    \ one for lowercase and one for uppercase\n    let lowercase: string[] = [];\n\
    \    let uppercase: string[] = [];\n    // traverse through dict object using\
    \ a for/in loop\n    for(let key in dict) {\n        // push the key to appropriate\
    \ array\n        if(key == key.toLowerCase()) lowercase.push(key);\n        else\
    \ uppercase.push(key);\n    }\n    // if one of the arrays is not empty, return\
    \ false\n    if(lowercase.length > 0 && uppercase.length > 0) return false;\n\
    \    // if we got here, then dict keys are either all lowercase or all uppercase,\
    \ so return true\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppc_cmipf.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppc_cmipf.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let result: boolean = true;\n    for\
    \ (let i in dict) {\n        if(isNaN(parseInt(i)) && dict[i] == dict[i].toUpperCase())\
    \ {\n            result = true;\n        }\n        else if(isNaN(parseInt(i))\
    \ && dict[i] == dict[i].toLowerCase()) {\n            result = true;\n       \
    \ }\n        else {\n            result = false;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy2u3egj6.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy2u3egj6.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n\n    let upper = Object.keys(dict).filter(k\
    \ => k === k.toUpperCase()).length;\n    let lower = Object.keys(dict).filter(k\
    \ => k === k.toLowerCase()).length;\n\n    return upper === Object.keys(dict).length\
    \ || lower === Object.keys(dict).length;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7cugc4cx.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7cugc4cx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upperCase: boolean = false;\n \
    \   let lowerCase: boolean = false;\n    if(Object.keys(dict).length === 0) {\n\
    \        return false;\n    }\n    for(let key in dict) {\n        if(typeof(key)\
    \ === \"string\") {\n            if(key.toUpperCase() === key) {\n           \
    \     upperCase = true;\n            }\n            if(key.toLowerCase() === key)\
    \ {\n                lowerCase = true;\n            }\n        }\n    }\n    if(upperCase\
    \ === true && lowerCase === true) {\n        return false;\n    }\n    return\
    \ true;\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\n\
    console.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"\
    apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\": \"36\"\
    , \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu5t86s20.ts(38,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length == 0)\
    \ {\n        return false;\n    }\n    let lowerCaseKeys = Object.keys(dict).every(k\
    \ => k.toLowerCase() == k);\n    let upperCaseKeys = Object.keys(dict).every(k\
    \ => k.toUpperCase() == k);\n    return lowerCaseKeys || upperCaseKeys;\n}\n\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpokc4srl_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpokc4srl_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let key_lower_cased: boolean = true;\n\
    \    let key_upper_cased: boolean = true;\n    if(Object.keys(dict).length < 1)\
    \ return false;\n    for(let i of Object.keys(dict)) {\n        if(i.toLowerCase()\
    \ !== i) key_lower_cased = false;\n        if(i.toUpperCase() !== i) key_upper_cased\
    \ = false;\n    }\n    return key_lower_cased || key_upper_cased;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjw4k_c10.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjw4k_c10.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let firstKey = Object.keys(dict)[0];\n\
    \    let firstKeyIsUpper = firstKey === firstKey.toUpperCase();\n    for (let\
    \ key in dict) {\n        if (key === key.toUpperCase() !== firstKeyIsUpper) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0thpim4f.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0thpim4f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015336
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let key: string;\n    let lowerCase:\
    \ boolean = true;\n    let upperCase: boolean = true;\n    if (dict.length ===\
    \ 0) {\n        return false;\n    }\n    for (key in dict) {\n        if (isNaN(Number(key)))\
    \ {\n            if (key.toLowerCase() === key) {\n                upperCase =\
    \ false;\n            } else if (key.toUpperCase() === key) {\n              \
    \  lowerCase = false;\n            } else {\n                return false;\n \
    \           }\n        } else {\n            return false;\n        }\n    }\n\
    \    return lowerCase || upperCase;\n}\n\nconsole.log(check_dict_case({\"a\":\
    \ \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\nconsole.log(check_dict_case({}));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyv_b4vlq.ts(19,9): error TS2367: This condition will
    always return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpyv_b4vlq.ts(40,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    // check if the given object is empty\n\
    \    if(Object.keys(dict).length === 0) {\n        return false;\n    }\n    //\
    \ check if all keys are in lower case, if not, check upper case\n    for(let key\
    \ in dict) {\n        if(key.toLowerCase() !== key) {\n            for(let key\
    \ in dict) {\n                if(key.toUpperCase() !== key) {\n              \
    \      return false;\n                }\n            }\n            return true;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0he_jp2z.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0he_jp2z.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015337
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let status: boolean = false;\n    if\
    \ (Object.keys(dict).length > 0) {\n        let keys: string[] = Object.keys(dict);\n\
    \        let vals: string[] = Object.values(dict);\n        let keys_lower: string[]\
    \ = keys.map(function(key) {\n            return key.toLowerCase();\n        });\n\
    \        let keys_upper: string[] = keys.map(function(key) {\n            return\
    \ key.toUpperCase();\n        });\n        if (keys.join(\"\") === keys_lower.join(\"\
    \") || keys.join(\"\") === keys_upper.join(\"\")) {\n            status = true;\n\
    \        }\n    }\n    return status;\n}\nlet dict: {[key: string]: string} =\
    \ {\"a\": \"apple\", \"b\": \"banana\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"STATE\": \"NC\", \"ZIP\": \"12345\"};\nconsole.log(check_dict_case(dict));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7zr6njor.ts(19,37): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmp7zr6njor.ts(36,36): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1660015336
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let flag: boolean = true;\n    if(Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    let keys: string[] = Object.keys(dict);\n\
    \    let upper_case_flag: boolean = keys[0].toUpperCase() === keys[0];\n    let\
    \ lower_case_flag: boolean = keys[0].toLowerCase() === keys[0];\n    for(let i:\
    \ number = 0; i < keys.length; i++) {\n        if(upper_case_flag) {\n       \
    \     if(keys[i].toUpperCase() !== keys[i]) {\n                flag = false;\n\
    \                break;\n            }\n        } else if(lower_case_flag) {\n\
    \            if(keys[i].toLowerCase() !== keys[i]) {\n                flag = false;\n\
    \                break;\n            }\n        } else {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015337
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n  if (Object.keys(dict).length === 0) {\n\
    \    return false;\n  }\n  let keyLowerCase: string[] = [];\n  let keyUpperCase:\
    \ string[] = [];\n  Object.keys(dict).forEach(function(key) {\n    if (key.toLowerCase()\
    \ === key) {\n      keyLowerCase.push(key);\n    } else {\n      keyUpperCase.push(key);\n\
    \    }\n  });\n  return keyLowerCase.length === Object.keys(dict).length || keyUpperCase.length\
    \ === Object.keys(dict).length;\n}\n\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\"\
    : \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\":\
    \ \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0is2sehn.ts(33,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015336
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let isLower = true;\n    let isUpper\
    \ = true;\n    for (let key in dict) {\n        if (!key.isUpperCase()) {\n  \
    \          isUpper = false;\n        }\n        if (!key.isLowerCase()) {\n  \
    \          isLower = false;\n        }\n    }\n    return isLower || isUpper;\n\
    }\n\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt6c5xh2z.ts(19,18): error TS2551: Property ''isUpperCase''
    does not exist on type ''string''. Did you mean ''toUpperCase''?

    ../../../../../tmp/tmpt6c5xh2z.ts(22,18): error TS2551: Property ''isLowerCase''
    does not exist on type ''string''. Did you mean ''toLowerCase''?

    ../../../../../tmp/tmpt6c5xh2z.ts(31,57): error TS2300: Duplicate identifier ''"a"''.

    '
  timestamp: 1660015336
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ if (keys.length === 0) return false;\n    let lowerCase = keys.every(isLowerCase);\n\
    \    let upperCase = keys.every(isUpperCase);\n    return lowerCase || upperCase;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwtg6alju.ts(18,32): error TS2552: Cannot find name
    ''isLowerCase''. Did you mean ''lowerCase''?

    ../../../../../tmp/tmpwtg6alju.ts(19,32): error TS2552: Cannot find name ''isUpperCase''.
    Did you mean ''upperCase''?

    '
  timestamp: 1660015336
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    const keys = Object.keys(dict);\n \
    \   if (keys.length === 0) return false;\n    const lower = keys.every(key =>\
    \ key.toLowerCase() === key);\n    const upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprap9olp9.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprap9olp9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015337
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerCase = true;\n    let upperCase\
    \ = true;\n    for (let key in dict) {\n        if (lowerCase && key != key.toLowerCase())\
    \ {\n            lowerCase = false;\n        }\n        if (upperCase && key !=\
    \ key.toUpperCase()) {\n            upperCase = false;\n        }\n    }\n   \
    \ return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwmvw5odq.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwmvw5odq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015337
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ return false;\n    const isUpper = Object.keys(dict).every(key => key === key.toUpperCase());\n\
    \    const isLower = Object.keys(dict).every(key => key === key.toLowerCase());\n\
    \    return isUpper || isLower;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpydrfcgnw.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpydrfcgnw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015337
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerCase = false;\n    let upperCase\
    \ = false;\n    for (let key in dict) {\n        if (dict[key] === dict[key].toLowerCase())\
    \ {\n            lowerCase = true;\n        } else if (dict[key] === dict[key].toUpperCase())\
    \ {\n            upperCase = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return lowerCase && upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1c98aikv.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1c98aikv.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015337
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let caps = true;\n    let noCaps =\
    \ true;\n    Object.keys(dict).forEach(key => {\n        if (key !== key.toUpperCase())\
    \ {\n            caps = false;\n        }\n        if (key !== key.toLowerCase())\
    \ {\n            noCaps = false;\n        }\n    });\n    return caps || noCaps;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw6a0cvl9.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw6a0cvl9.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower: boolean = false;\n    let\
    \ upper: boolean = false;\n    for (let i in dict) {\n        if (i.toLowerCase()\
    \ === i) {\n            lower = true;\n        } else if (i.toUpperCase() ===\
    \ i) {\n            upper = true;\n        } else {\n            return false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd6k368py.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd6k368py.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys: string[] = Object.keys(dict);\n\
    \    let lower_case: boolean = (keys[0] === keys[0].toLowerCase()) ? true : false;\n\
    \    for (let key of keys) {\n        if (lower_case) {\n            if (key !==\
    \ key.toLowerCase()) {\n                return false;\n            }\n       \
    \ } else {\n            if (key !== key.toUpperCase()) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr9bhkyzw.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr9bhkyzw.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let x = true;\n    let y = true;\n\
    \    let a = Object.keys(dict);\n    a.forEach(function(e) {\n        if (e.toUpperCase()\
    \ !== e) {\n            x = false;\n        } else {\n            y = false;\n\
    \        }\n    });\n    return x || y;\n}\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5zom1hh4.ts(30,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if (Object.keys(dict).length === 0)\
    \ {\n        return false;\n    }\n    const dict_lower = JSON.stringify(dict).toLowerCase();\n\
    \    const dict_upper = JSON.stringify(dict).toUpperCase();\n    return dict_lower\
    \ === JSON.stringify(dict) || dict_upper === JSON.stringify(dict);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt2ydiiq5.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt2ydiiq5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let is_all_upper: boolean = true;\n\
    \    let is_all_lower: boolean = true;\n    for (let key in dict) {\n        is_all_upper\
    \ = is_all_upper && (key === key.toUpperCase());\n        is_all_lower = is_all_lower\
    \ && (key === key.toLowerCase());\n    }\n    return is_all_upper || is_all_lower;\n\
    }\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy674eap7.ts(26,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015338
- exit_code: 0
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let is_case_sensitive = false;\n  \
    \  const keys = Object.keys(dict);\n    const is_empty = !keys.length;\n    if\
    \ (is_empty) {\n        return false;\n    }\n    for (let i = 0; i < keys.length;\
    \ i++) {\n        const key = keys[i];\n        const is_first_key = i === 0;\n\
    \        if (is_first_key) {\n            is_case_sensitive = key === key.toUpperCase();\n\
    \        } else {\n            if (is_case_sensitive) {\n                const\
    \ is_upper_case = key === key.toUpperCase();\n                if (!is_upper_case)\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                const is_lower_case = key === key.toLowerCase();\n      \
    \          if (!is_lower_case) {\n                    return false;\n        \
    \        }\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    if(Object.keys(dict).length === 0)\
    \ return false;\n    if(Object.keys(dict).every(function(elem){return elem ===\
    \ elem.toUpperCase()})) return true;\n    if(Object.keys(dict).every(function(elem){return\
    \ elem === elem.toLowerCase()})) return true;\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxazjt_ds.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxazjt_ds.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lowerCase: boolean = true;\n  \
    \  let upperCase: boolean = true;\n    if (dict.length === 0) {\n        return\
    \ false;\n    }\n    for (let key in dict) {\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n        if (key.toLowerCase()\
    \ !== key) {\n            lowerCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9mcwfr3r.ts(18,9): error TS2367: This condition will
    always return ''false'' since the types ''string'' and ''0'' have no overlap.

    '
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower_keys: string[] = [];\n  \
    \  let upper_keys: string[] = [];\n    let keys: string[] = Object.keys(dict);\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (keys[i].toLowerCase()\
    \ === keys[i]) {\n            lower_keys.push(keys[i]);\n        } else {\n  \
    \          upper_keys.push(keys[i]);\n        }\n    }\n    return (lower_keys.length\
    \ === keys.length || upper_keys.length === keys.length);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_v_irw5t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_v_irw5t.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let upperCase = false;\n    for (let\
    \ key in dict) {\n        if (typeof(key) !== \"string\") {\n            return\
    \ false;\n        }\n        if (key.toUpperCase() === key) {\n            upperCase\
    \ = true;\n        }\n        if (key.toLowerCase() === key) {\n            if\
    \ (upperCase) {\n                return false;\n            }\n        }\n   \
    \     else {\n            if (!upperCase) {\n                return false;\n \
    \           }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6zau5t_s.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6zau5t_s.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let lower = true;\n    let upper =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() != key) {\n\
    \            lower = false;\n        }\n        if (key.toUpperCase() != key)\
    \ {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkm3j3lai.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkm3j3lai.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015338
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ let upper = true;\n    let lower = true;\n    if (keys.length == 0) {\n    \
    \    return false;\n    }\n    keys.forEach(element => {\n        if (element.toUpperCase()\
    \ != element) {\n            upper = false;\n        }\n        if (element.toLowerCase()\
    \ != element) {\n            lower = false;\n        }\n    });\n    return upper\
    \ || lower;\n}\nconsole.log(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"\
    }));\nconsole.log(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\", 8: \"banana\"\
    , \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"Name\": \"John\", \"Age\"\
    : \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"STATE\": \"\
    NC\", \"ZIP\": \"12345\"}));\nconsole.log(check_dict_case({}));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps85qn1w3.ts(34,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015338
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let is_lower: boolean = true;\n   \
    \ let is_upper: boolean = true;\n    for (let key in dict) {\n        let value\
    \ = dict[key];\n        if (key != key.toLowerCase()) {\n            is_lower\
    \ = false;\n        }\n        if (key != key.toUpperCase()) {\n            is_upper\
    \ = false;\n        }\n    }\n    return is_lower || is_upper;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc7xyuu0d.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc7xyuu0d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015339
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ let upper = keys.some(key => key.toUpperCase() === key);\n    let lower = keys.some(key\
    \ => key.toLowerCase() === key);\n    if (upper && lower) {\n        return false;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphloi0afa.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphloi0afa.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015339
- exit_code: 1
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let flag: boolean = true;\n    if (Object.keys(dict).length\
    \ === 0) return false;\n    const check: string = Object.keys(dict)[0];\n    if\
    \ (check === check.toUpperCase()) {\n        Object.keys(dict).forEach(key =>\
    \ {\n            if (dict[key] !== dict[key].toUpperCase()) {\n              \
    \  flag = false;\n            }\n        });\n    } else {\n        Object.keys(dict).forEach(key\
    \ => {\n            if (dict[key] !== dict[key].toLowerCase()) {\n           \
    \     flag = false;\n            }\n        });\n    }\n    return flag;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmtt855o6.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmtt855o6.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015339
- exit_code: 2
  program: "//Given an object, return true if all keys are strings in lower \n// case\
    \ or all keys are strings in upper case, else return false.\n// The function should\
    \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
    apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
    a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict:\
    \ {[key: string]: string}): boolean {\n    let keys = Object.keys(dict);\n   \
    \ if(keys.length > 0) {\n        let first_key = keys[0];\n        let first_key_is_upper\
    \ = first_key.toUpperCase() === first_key;\n        let first_key_is_lower = first_key.toLowerCase()\
    \ === first_key;\n        if(first_key_is_upper || first_key_is_lower) {\n   \
    \         for(let key of keys) {\n                if(first_key_is_upper) {\n \
    \                   if(key.toUpperCase() !== key) {\n                        return\
    \ false;\n                    }\n                } else {\n                  \
    \  if(key.toLowerCase() !== key) {\n                        return false;\n  \
    \                  }\n                }\n            }\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", \"b\": \"banana\"}));\nconsole.log(check_dict_case({\"a\": \"apple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}));\nconsole.log(check_dict_case({\"a\"\
    : \"apple\", 8: \"banana\", \"a\": \"apple\"}));\nconsole.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\nconsole.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplg4ztiah.ts(41,57): error TS2300: Duplicate identifier
    ''"a"''.

    '
  timestamp: 1660015339
