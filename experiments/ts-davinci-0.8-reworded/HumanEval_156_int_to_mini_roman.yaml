name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["    let num = number;\n    let roman = \"\";\n    let romanNumerals\
    \ = [\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\"\
    , \"d\", \"cm\", \"m\"];\n    let values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900, 1000];\n    while (num > 0) {\n        for (let i = values.length\
    \ - 1; i >= 0; i--) {\n            if (num >= values[i]) {\n                roman\
    \ += romanNumerals[i];\n                num -= values[i];\n                break;\n\
    \            }\n        }\n    }\n    return roman;\n}\n", "    if (number < 1\
    \ || number > 1000) {\n        throw new Error(\"Input out of range\");\n    }\n\
    \    let str = \"\";\n    for (let i = 0; i < Math.floor(number / 100); i++) {\n\
    \        str += \"c\";\n    }\n    number %= 100;\n    if (number >= 90) {\n \
    \       str += \"xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n\
    \        str += \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n\
    \        str += \"xl\";\n        number -= 40;\n    }\n    for (let i = 0; i <\
    \ Math.floor(number / 10); i++) {\n        str += \"x\";\n    }\n    number %=\
    \ 10;\n    if (number >= 9) {\n        str += \"ix\";\n        number -= 9;\n\
    \    }\n    if (number >= 5) {\n        str += \"v\";\n        number -= 5;\n\
    \    }\n    if (number >= 4) {\n        str += \"iv\";\n        number -= 4;\n\
    \    }\n    for (let i = 0; i < number; i++) {\n        str += \"i\";\n    }\n\
    \    return str;\n}\n", "    let result: string = \"\";\n    let roman: string[]\
    \ = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"];\n    let i: number = number / 100;\n    number = number % 100;\n    let\
    \ x: number = number / 10;\n    number = number % 10;\n    let c: number = number;\n\
    \    for (let i: number = 0; i < i; i++) {\n        result += \"c\";\n    }\n\
    \    result += roman[x];\n    result += roman[c];\n    return result;\n}\nconsole.log(int_to_mini_roman(6));\n\
    console.log(int_to_mini_roman(19));\nconsole.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));\n",
  "    let result: string = \"\";\n    const length: number = number.toString().length;\n\
    \    const numArr: string[] = number.toString().split(\"\");\n    for (let i:\
    \ number = 0; i < length; i++) {\n        switch (numArr[i]) {\n            case\
    \ \"1\":\n                result += \"i\";\n                break;\n         \
    \   case \"2\":\n                result += \"ii\";\n                break;\n \
    \           case \"3\":\n                result += \"iii\";\n                break;\n\
    \            case \"4\":\n                result += \"iv\";\n                break;\n\
    \            case \"5\":\n                result += \"v\";\n                break;\n\
    \            case \"6\":\n                result += \"vi\";\n                break;\n\
    \            case \"7\":\n                result += \"vii\";\n               \
    \ break;\n            case \"8\":\n                result += \"viii\";\n     \
    \           break;\n            case \"9\":\n                result += \"ix\"\
    ;\n                break;\n            default:\n                break;\n    \
    \    }\n        if (numArr[i] != \"0\") {\n            switch (length - i) {\n\
    \                case 4:\n                    result += \"m\";\n             \
    \       break;\n                case 3:\n                    result += \"c\";\n\
    \                    break;\n                case 2:\n                    result\
    \ += \"x\";\n                    break;\n                default:\n          \
    \          break;\n            }\n        }\n    }\n    return result;\n}\n",
  "    let result: string = \"\";\n    const numbers: [number, string][] = [\n   \
    \     [900, \"cm\"],\n        [500, \"d\"],\n        [400, \"cd\"],\n        [100,\
    \ \"c\"],\n        [90, \"xc\"],\n        [50, \"l\"],\n        [40, \"xl\"],\n\
    \        [10, \"x\"],\n        [9, \"ix\"],\n        [5, \"v\"],\n        [4,\
    \ \"iv\"],\n        [1, \"i\"],\n    ];\n    for (const [num, letter] of numbers)\
    \ {\n        while (number >= num) {\n            result += letter;\n        \
    \    number -= num;\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = '';\n    let M = Math.floor(number / 1000);\n    let CD = Math.floor((number\
    \ % 1000) / 400);\n    let C = Math.floor((number % 400) / 100);\n    let XC =\
    \ Math.floor((number % 100) / 40);\n    let X = Math.floor((number % 40) / 10);\n\
    \    let IX = Math.floor((number % 10) / 9);\n    let V = Math.floor((number %\
    \ 9) / 5);\n    let IV = Math.floor((number % 5) / 4);\n    let I = Math.floor(number\
    \ % 4);\n    if (M > 0) result += 'm'.repeat(M);\n    if (CD > 0) result += 'cd';\n\
    \    if (C > 0) result += 'c'.repeat(C);\n    if (XC > 0) result += 'xc';\n  \
    \  if (X > 0) result += 'x'.repeat(X);\n    if (IX > 0) result += 'ix';\n    if\
    \ (V > 0) result += 'v'.repeat(V);\n    if (IV > 0) result += 'iv';\n    if (I\
    \ > 0) result += 'i'.repeat(I);\n    return result;\n}", "    let output = \"\"\
    ;\n    let quotient = 0;\n    let remainder = 0;\n    let counter = 0;\n    let\
    \ arabics = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let romans\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"];\n    do {\n        quotient = Math.floor(number / arabics[counter]);\n\
    \        remainder = number % arabics[counter];\n        for (let i = 0; i < quotient;\
    \ i++) {\n            output += romans[counter];\n        }\n        number =\
    \ remainder;\n        counter++;\n    } while (number > 0);\n    return output;\n\
    }\n", "  if (number < 1 || number > 1000) throw new Error(\"Number must be between\
    \ 1 and 1000 inclusive.\");\n  const converter = new RomanNumeralConverter(number);\n\
    \  return converter.convert();\n}\n", "  if (number > 1000 || number < 1) return\
    \ undefined;\n  const table = [\n    [1000, \"m\"],\n    [900, \"cm\"],\n    [500,\
    \ \"d\"],\n    [400, \"cd\"],\n    [100, \"c\"],\n    [90, \"xc\"],\n    [50,\
    \ \"l\"],\n    [40, \"xl\"],\n    [10, \"x\"],\n    [9, \"ix\"],\n    [5, \"v\"\
    ],\n    [4, \"iv\"],\n    [1, \"i\"],\n  ];\n  let result = \"\";\n  for (let\
    \ i = 0; i < table.length; i++) {\n    const [val, roman] = table[i];\n    const\
    \ times = Math.floor(number / val);\n    result += roman.repeat(times);\n    number\
    \ -= val * times;\n  }\n  return result;\n}\n", "    const roman: { [key: number]:\
    \ string } = {\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n   \
    \     50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"m\"\
    ,\n    };\n    if (number === 0) {\n        return \"\";\n    } else if (number\
    \ <= 3) {\n        return roman[1].repeat(number);\n    } else if (number ===\
    \ 4) {\n        return roman[1] + roman[5];\n    } else if (number === 5) {\n\
    \        return roman[5];\n    } else if (number <= 8) {\n        return roman[5]\
    \ + roman[1].repeat(number - 5);\n    } else if (number === 9) {\n        return\
    \ roman[1] + roman[10];\n    } else if (number <= 39) {\n        return roman[10].repeat(Math.floor(number\
    \ / 10)) + int_to_mini_roman(number % 10);\n    } else if (number <= 49) {\n \
    \       return roman[10] + roman[50] + int_to_mini_roman(number % 10);\n    }\
    \ else if (number <= 89) {\n        return roman[50] + roman[10].repeat(Math.floor((number\
    \ - 50) / 10)) + int_to_mini_roman(number % 10);\n    } else if (number <= 99)\
    \ {\n        return roman[10] + roman[100] + int_to_mini_roman(number % 10);\n\
    \    } else if (number <= 399) {\n        return roman[100].repeat(Math.floor(number\
    \ / 100)) + int_to_mini_roman(number % 100);\n    } else if (number <= 499) {\n\
    \        return roman[100] + roman[500] + int_to_mini_roman(number % 100);\n \
    \   } else if (number <= 899) {\n        return roman[500] + roman[100].repeat(Math.floor((number\
    \ - 500) / 100)) + int_to_mini_roman(number % 100);\n    } else if (", "    let\
    \ numerals = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n    ];\n    let values = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let result = \"\";\n    let\
    \ index = 0;\n    while (number > 0) {\n        if (number >= values[index]) {\n\
    \            result += numerals[index];\n            number -= values[index];\n\
    \        } else {\n            index++;\n        }\n    }\n    return result;\n\
    }\n", "    const romanNumbers: any = {\n        1: 'i',\n        2: 'ii',\n  \
    \      3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n      \
    \  7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n       \
    \ 20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n       \
    \ 60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n    \
    \    100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n\
    \        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dccc',\n\
    \        900: 'cm',\n        1000: 'm',\n    };\n    return String(number)\n \
    \       .split('')\n        .reverse()\n        .map((digit, index) => romanNumbers[digit\
    \ * Math.pow(10, index)])\n        .reverse()\n        .join('');\n}\n", "   \
    \ let num: string = \"\";\n    let numArr: number[] = [];\n    let miniromanArr:\
    \ string[] = [];\n    let miniroman: string = \"\";\n    num = number.toString();\n\
    \    //console.log(num);\n    for (let i: number = 0; i < num.length; i++) {\n\
    \        numArr.push(parseInt(num.charAt(i)));\n    }\n    //console.log(numArr);\n\
    \    for (let i: number = 0; i < numArr.length; i++) {\n        if (numArr[i]\
    \ === 0) {\n            miniromanArr.push(\"\");\n        } else if (numArr[i]\
    \ === 1) {\n            miniromanArr.push(\"i\");\n        } else if (numArr[i]\
    \ === 2) {\n            miniromanArr.push(\"ii\");\n        } else if (numArr[i]\
    \ === 3) {\n            miniromanArr.push(\"iii\");\n        } else if (numArr[i]\
    \ === 4) {\n            miniromanArr.push(\"iv\");\n        } else if (numArr[i]\
    \ === 5) {\n            miniromanArr.push(\"v\");\n        } else if (numArr[i]\
    \ === 6) {\n            miniromanArr.push(\"vi\");\n        } else if (numArr[i]\
    \ === 7) {\n            miniromanArr.push(\"vii\");\n        } else if (numArr[i]\
    \ === 8) {\n            miniromanArr.push(\"viii\");\n        } else if (numArr[i]\
    \ === 9) {\n            miniromanArr.push(\"ix\");\n        }\n    }\n    //console.log(miniromanArr);\n\
    \    for (let i: number = 0; i < miniromanArr.length; i++) {\n        if (miniromanArr.length\
    \ === 4) {\n            miniroman = miniromanArr[3] + miniromanArr[2] + miniromanArr[1]\
    \ + miniromanArr", "  let roman = '';\n  const numerals = [\n    [1000, 'm'],\n\
    \    [900, 'cm'],\n    [500, 'd'],\n    [400, 'cd'],\n    [100, 'c'],\n    [90,\
    \ 'xc'],\n    [50, 'l'],\n    [40, 'xl'],\n    [10, 'x'],\n    [9, 'ix'],\n  \
    \  [5, 'v'],\n    [4, 'iv'],\n    [1, 'i'],\n  ];\n  while (number) {\n    for\
    \ (let i = 0; i < numerals.length; i++) {\n      if (number >= numerals[i][0])\
    \ {\n        roman += numerals[i][1];\n        number -= numerals[i][0];\n   \
    \     break;\n      }\n    }\n  }\n  return roman;\n}\n", "  const stringified\
    \ = number.toString();\n  let result = '';\n  for (let i = 0; i < stringified.length;\
    \ i++) {\n    const digit = parseInt(stringified[i]);\n    const base = 10 **\
    \ (stringified.length - i - 1);\n    if (digit === 0) {\n      continue;\n   \
    \ } else if (digit < 4) {\n      result += MINI_ROMAN_NUMERALS[base].repeat(digit);\n\
    \    } else if (digit === 4) {\n      result += MINI_ROMAN_NUMERALS[base] + MINI_ROMAN_NUMERALS[base\
    \ * 5];\n    } else if (digit < 9) {\n      result += MINI_ROMAN_NUMERALS[base\
    \ * 5] + MINI_ROMAN_NUMERALS[base].repeat(digit - 5);\n    } else {\n      result\
    \ += MINI_ROMAN_NUMERALS[base] + MINI_ROMAN_NUMERALS[base * 10];\n    }\n  }\n\
    \  return result;\n}\n", "    let roman_numeral: string = '';\n    let roman_numerals:\
    \ string[] = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\n    let roman_numerals_units:\
    \ string[] = ['x', 'l', 'c', 'd', 'm'];\n    let roman_numerals_tens: string[]\
    \ = ['i', 'v', 'x', 'l', 'c'];\n    let roman_numerals_hundreds: string[] = ['i',\
    \ 'v', 'x'];\n    let roman_numerals_thousands: string[] = ['i', 'v'];\n    let\
    \ roman_numerals_ten_thousands: string[] = ['i'];\n    let value_units: number\
    \ = number % 10;\n    let value_tens: number = Math.floor(number / 10) % 10;\n\
    \    let value_hundreds: number = Math.floor(number / 100) % 10;\n    let value_thousands:\
    \ number = Math.floor(number / 1000) % 10;\n    let value_ten_thousands: number\
    \ = Math.floor(number / 10000) % 10;\n    let units: string = '', tens: string\
    \ = '', hundreds: string = '', thousands: string = '', ten_thousands: string =\
    \ '';\n    if (value_units < 4) {\n        for (let i = 0; i < value_units; i++)\
    \ {\n            units += roman_numerals_units[0];\n        }\n    } else if (value_units\
    \ == 4) {\n        units = roman_numerals_units[0] + roman_numerals_units[1];\n\
    \    } else if (value_units == 5) {\n        units = roman_numerals_units[1];\n\
    \    } else if (value_units > 5 && value_units < 9) {\n        units = roman_numerals_units[1];\n\
    \        for (let i = 0; i < value_units - 5; i++) {\n            units += roman_numerals_units[0];\n\
    \        }\n    } else if (value_", "    let roman = \"\";\n    let romanNumList\
    \ = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\",\n \
    \       \"x\", \"ix\", \"v\", \"iv\", \"i\",\n    ];\n    let decimalNumList =\
    \ [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i = 0;\
    \ i < decimalNumList.length; i++) {\n        while (number % decimalNumList[i]\
    \ < number) {\n            roman += romanNumList[i];\n            number -= decimalNumList[i];\n\
    \        }\n    }\n    return roman;\n}\n", "    const roman_numeral_lookup =\
    \ {\n        \"M\": 1000,\n        \"CM\": 900,\n        \"D\": 500,\n       \
    \ \"CD\": 400,\n        \"C\": 100,\n        \"XC\": 90,\n        \"L\": 50,\n\
    \        \"XL\": 40,\n        \"X\": 10,\n        \"IX\": 9,\n        \"V\": 5,\n\
    \        \"IV\": 4,\n        \"I\": 1\n    };\n    let roman_numeral_list = Object.keys(roman_numeral_lookup);\n\
    \    let result = \"\";\n    if (number < 1 || number > 1000) {\n        throw\
    \ new Error(\"Number is out of range.\");\n    }\n    for (let i = 0; i < roman_numeral_list.length;\
    \ i++) {\n        while (number >= roman_numeral_lookup[roman_numeral_list[i]])\
    \ {\n            result += roman_numeral_list[i];\n            number -= roman_numeral_lookup[roman_numeral_list[i]];\n\
    \        }\n    }\n    return result;\n}\n", "    let roman: string = '';\n  \
    \  if (number >= 100) {\n        const hundreds: number = Math.floor(number /\
    \ 100);\n        if (hundreds < 4) {\n            for (let i: number = 0; i <\
    \ hundreds; i++) {\n                roman += 'c';\n            }\n        } else\
    \ if (hundreds == 4) {\n            roman += 'cd';\n        } else if (hundreds\
    \ > 4 && hundreds < 9) {\n            roman += 'd';\n            for (let i: number\
    \ = 0; i < hundreds - 5; i++) {\n                roman += 'c';\n            }\n\
    \        } else if (hundreds == 9) {\n            roman += 'cm';\n        }\n\
    \        number -= hundreds * 100;\n    }\n    if (number >= 10) {\n        const\
    \ tens: number = Math.floor(number / 10);\n        if (tens < 4) {\n         \
    \   for (let i: number = 0; i < tens; i++) {\n                roman += 'x';\n\
    \            }\n        } else if (tens == 4) {\n            roman += 'xl';\n\
    \        } else if (tens > 4 && tens < 9) {\n            roman += 'l';\n     \
    \       for (let i: number = 0; i < tens - 5; i++) {\n                roman +=\
    \ 'x';\n            }\n        } else if (tens == 9) {\n            roman += 'xc';\n\
    \        }\n        number -= tens * 10;\n    }\n    if (number < 4) {\n     \
    \   for (let i: number = 0; i < number; i++) {\n            roman += 'i';\n  \
    \      }\n    } else if (number == 4) {\n        roman += 'iv';\n    } else if\
    \ (number > 4 && number < 9) {\n        roman += 'v';\n        for (let i: number\
    \ = 0; i < number - 5; i++) {\n            roman += 'i';\n        }\n    } else\
    \ if (number == 9) {\n        roman += 'ix';\n    }\n    return roman;\n}\n",
  "  let i = 0;\n  let answer = '';\n  while (number > 0) {\n    if (number % 5 ===\
    \ 4) {\n      answer = answer + Symbols[i];\n      number -= 1;\n    } else if\
    \ (number % 10 === 9) {\n      answer = answer + Symbols[i + 1];\n      number\
    \ -= 1;\n    } else {\n      const remainder = number % 5;\n      answer = answer\
    \ + Symbols[i].repeat(remainder);\n      number -= remainder;\n    }\n    number\
    \ = number / 10;\n    i += 2;\n  }\n  return answer.split('').reverse().join('');\n\
    }\n\nexport { int_to_mini_roman };", "    let result = \"\";\n    while (number\
    \ > 0) {\n        if (number >= 1000) {\n            result += \"m\";\n      \
    \      number -= 1000;\n        } else if (number >= 900) {\n            result\
    \ += \"cm\";\n            number -= 900;\n        } else if (number >= 500) {\n\
    \            result += \"d\";\n            number -= 500;\n        } else if (number\
    \ >= 400) {\n            result += \"cd\";\n            number -= 400;\n     \
    \   } else if (number >= 100) {\n            result += \"c\";\n            number\
    \ -= 100;\n        } else if (number >= 90) {\n            result += \"xc\";\n\
    \            number -= 90;\n        } else if (number >= 50) {\n            result\
    \ += \"l\";\n            number -= 50;\n        } else if (number >= 40) {\n \
    \           result += \"xl\";\n            number -= 40;\n        } else if (number\
    \ >= 10) {\n            result += \"x\";\n            number -= 10;\n        }\
    \ else if (number >= 9) {\n            result += \"ix\";\n            number -=\
    \ 9;\n        } else if (number >= 5) {\n            result += \"v\";\n      \
    \      number -= 5;\n        } else if (number >= 4) {\n            result +=\
    \ \"iv\";\n            number -= 4;\n        } else if (number >= 1) {\n     \
    \       result += \"i\";\n            number -= 1;\n        }\n    }\n    return\
    \ result;\n}\n", "  let result = '';\n  const numerals = [\n    [1, 'i'],\n  \
    \  [5, 'v'],\n    [10, 'x'],\n    [50, 'l'],\n    [100, 'c'],\n    [500, 'd'],\n\
    \    [1000, 'm'],\n  ];\n  const numeralsLen = numerals.length;\n  for (let i\
    \ = numeralsLen - 1; i >= 0; i--) {\n    const [currentNumeral, currentRoman]\
    \ = numerals[i];\n    if (currentNumeral <= number) {\n      const times = Math.floor(number\
    \ / currentNumeral);\n      result += currentRoman.repeat(times);\n      number\
    \ -= currentNumeral * times;\n    }\n  }\n  return result;\n}\n", "  const romans\
    \ = {\n    1: \"i\",\n    4: \"iv\",\n    5: \"v\",\n    9: \"ix\",\n    10: \"\
    x\",\n    40: \"xl\",\n    50: \"l\",\n    90: \"xc\",\n    100: \"c\",\n    400:\
    \ \"cd\",\n    500: \"d\",\n    900: \"cm\",\n    1000: \"m\"\n  };\n  let result\
    \ = \"\";\n  let reminder = number;\n  while (reminder > 0) {\n    const key =\
    \ Object.keys(romans).find(\n      numberKey => reminder >= parseInt(numberKey)\n\
    \    );\n    if (key) {\n      result += romans[key];\n      reminder -= parseInt(key);\n\
    \    }\n  }\n  return result;\n}\n\nexport function int_to_mini_roman_test() {\n\
    \  // One word per test. You have to determine how many tests are needed\n  const\
    \ test_tuples: Array<[number, string]> = [\n    [1, \"i\"],\n    [4, \"iv\"],\n\
    \    [5, \"v\"],\n    [9, \"ix\"],\n    [10, \"x\"],\n    [40, \"xl\"],\n    [50,\
    \ \"l\"],\n    [90, \"xc\"],\n    [100, \"c\"],\n    [400, \"cd\"],\n    [500,\
    \ \"d\"],\n    [900, \"cm\"],\n    [1000, \"m\"],\n    [19, \"xix\"],\n    [152,\
    \ \"clii\"],\n    [426, \"cdxxvi\"]\n  ];\n  test_tuples.forEach(tuple => {\n\
    \    const [input, expected] = tuple;\n    const actual = int_to_mini_roman(input);\n\
    \    if (actual === expected) {\n      console.log(`passed`);\n    } else {\n\
    \      console.log(`failed for ${input}`);\n    }\n  });\n}", "  if (!Number.isInteger(number)\
    \ || number <= 0 || number > 1000) {\n    throw Error(\"input must be an integer\
    \ between 1 and 1000\");\n  }\n  const numerals = {\n    1000: \"m\",\n    900:\
    \ \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\"\
    ,\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"\
    v\",\n    4: \"iv\",\n    1: \"i\",\n  };\n  let remaining_val = number;\n  let\
    \ roman_string = \"\";\n  while (remaining_val > 0) {\n    // For each entry in\
    \ numerals\n    for (const key of Object.keys(numerals)) {\n      const val =\
    \ Number(key);\n      // If the key is less than or equal to the remaining value\n\
    \      if (val <= remaining_val) {\n        // Subtract the key from the remaining\
    \ value\n        remaining_val -= val;\n        // And append the corresponding\
    \ roman numeral to the roman string\n        roman_string += numerals[key];\n\
    \        break;\n      }\n    }\n  }\n  return roman_string;\n}\n", "    let str\
    \ = '';\n    let pos = 1;\n    let digit;\n    let num = number;\n    while (num\
    \ > 0) {\n        digit = num % 10;\n        num = Math.floor(num / 10);\n   \
    \     switch (pos) {\n            case 1:\n                str = str + DIGIT_1[digit];\n\
    \                break;\n            case 2:\n                str = str + DIGIT_10[digit];\n\
    \                break;\n            case 3:\n                str = str + DIGIT_100[digit];\n\
    \                break;\n            case 4:\n                str = str + DIGIT_1000[digit];\n\
    \                break;\n        }\n        pos++;\n    }\n    return str;\n}\n",
  "  const numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v',\
    \ 'iv', 'i'];\n  const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n  let result = '';\n  for (let i = 0; i < values.length; i++) {\n\
    \    const k = values[i];\n    while (number >= k) {\n      result += numerals[i];\n\
    \      number -= k;\n    }\n  }\n  return result;\n}\n", "    return number.toString();\n\
    }\n", "    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1];\n    const numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let roman = \"\";\n    let\
    \ rem = number;\n    for (let i = 0; i < values.length; i++) {\n        while\
    \ (rem >= values[i]) {\n            roman += numerals[i];\n            rem -=\
    \ values[i];\n        }\n    }\n    return roman;\n}\n", "  return IntToMiniRoman(number);\n\
    }\n", "  //var number = prompt(\"Enter a number between 1 and 1000\", \"1\");\n\
    \  var numerals = [\n    { value: 1000, numeral: \"m\" },\n    { value: 900, numeral:\
    \ \"cm\" },\n    { value: 500, numeral: \"d\" },\n    { value: 400, numeral: \"\
    cd\" },\n    { value: 100, numeral: \"c\" },\n    { value: 90, numeral: \"xc\"\
    \ },\n    { value: 50, numeral: \"l\" },\n    { value: 40, numeral: \"xl\" },\n\
    \    { value: 10, numeral: \"x\" },\n    { value: 9, numeral: \"ix\" },\n    {\
    \ value: 5, numeral: \"v\" },\n    { value: 4, numeral: \"iv\" },\n    { value:\
    \ 1, numeral: \"i\" }\n  ];\n  var s = \"\";\n  while (number > 0) {\n    for\
    \ (var i = 0; i < numerals.length; i++) {\n      if (number >= numerals[i].value)\
    \ {\n        s += numerals[i].numeral;\n        number -= numerals[i].value;\n\
    \        break;\n      }\n    }\n  }\n  return s;\n}\n", "  const thousands =\
    \ Math.floor(number / 1000);\n  number %= 1000;\n  const hundreds = Math.floor(number\
    \ / 100);\n  number %= 100;\n  const tens = Math.floor(number / 10);\n  number\
    \ %= 10;\n  const units = number;\n\n  const ones = ['', 'i', 'ii', 'iii', 'iv',\
    \ 'v', 'vi', 'vii', 'viii', 'ix'];\n  const tensUp = ['', 'x', 'xx', 'xxx', 'xl',\
    \ 'l', 'lx', 'lxx', 'lxxx', 'xc'];\n  const hundsUp = ['', 'c', 'cc', 'ccc', 'cd',\
    \ 'd', 'dc', 'dcc', 'dccc', 'cm'];\n  const thousUp = ['', 'm', 'mm', 'mmm'];\n\
    \n  return thousUp[thousands] + hundsUp[hundreds] + tensUp[tens] + ones[units];\n\
    }\n", "    let result = '';\n    let digits = String(number).split('');\n    for\
    \ (let i = 0; i < digits.length; i++) {\n        let digit = parseInt(digits[i]);\n\
    \        result += mini_roman_digit(digit, i);\n    }\n    return result;\n}",
  "    const roman_keys = [\n        \"m\",\n        \"cm\",\n        \"d\",\n   \
    \     \"cd\",\n        \"c\",\n        \"xc\",\n        \"l\",\n        \"xl\"\
    ,\n        \"x\",\n        \"ix\",\n        \"v\",\n        \"iv\",\n        \"\
    i\",\n    ];\n    const roman_values = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    let roman_numeral = \"\";\n    if (number <= 0 || number\
    \ > 1000) {\n        return \"Invalid number\";\n    }\n    // Loop to get the\
    \ roman equivalent of the given number\n    for (let i = 0; i < roman_values.length;\
    \ i++) {\n        while (number >= roman_values[i]) {\n            roman_numeral\
    \ += roman_keys[i];\n            number -= roman_values[i];\n        }\n    }\n\
    \    return roman_numeral;\n}\n", "    const romanNumeralMapping: { [key: number]:\
    \ string } = {\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n   \
    \     50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"m\"\
    ,\n    };\n    let result = \"\";\n    const keys = Object.keys(romanNumeralMapping);\n\
    \    let keyIndex = keys.length - 1;\n    while (number > 0) {\n        const\
    \ currentKey = Number(keys[keyIndex]);\n        if (number === currentKey) {\n\
    \            result += romanNumeralMapping[currentKey];\n            number -=\
    \ currentKey;\n        } else if (number >= currentKey - (currentKey / 10)) {\n\
    \            const previousKey = Number(keys[keyIndex - 1]);\n            result\
    \ += romanNumeralMapping[previousKey] + romanNumeralMapping[currentKey];\n   \
    \         number -= currentKey - previousKey;\n        } else if (number >= currentKey\
    \ - (currentKey / 5)) {\n            const previousKey = Number(keys[keyIndex\
    \ - 2]);\n            result += romanNumeralMapping[previousKey] + romanNumeralMapping[currentKey];\n\
    \            number -= currentKey - previousKey;\n        } else if (number >=\
    \ currentKey - (currentKey / 2)) {\n            const previousKey = Number(keys[keyIndex\
    \ - 3]);\n            result += romanNumeralMapping[previousKey] + romanNumeralMapping[currentKey];\n\
    \            number -= currentKey - previousKey;\n        } else {\n         \
    \   const previousKey = Number(keys[keyIndex - 4]);\n            result += romanNumeralMapping[previousKey]\
    \ + romanNumeralMapping[currentKey];\n            number -= currentKey - previousKey;\n\
    \        }\n    }\n    return result;\n}\n\nexport { int_to_mini_roman };", " \
    \ const romanNumbers = [\n    {number: 1000, roman: 'm'},\n    {number: 900, roman:\
    \ 'cm'},\n    {number: 500, roman: 'd'},\n    {number: 400, roman: 'cd'},\n  \
    \  {number: 100, roman: 'c'},\n    {number: 90, roman: 'xc'},\n    {number: 50,\
    \ roman: 'l'},\n    {number: 40, roman: 'xl'},\n    {number: 10, roman: 'x'},\n\
    \    {number: 9, roman: 'ix'},\n    {number: 5, roman: 'v'},\n    {number: 4,\
    \ roman: 'iv'},\n    {number: 1, roman: 'i'},\n  ];\n  let output = '';\n  let\
    \ rest = number;\n  romanNumbers.forEach(romanNumber => {\n    while (rest >=\
    \ romanNumber.number) {\n      output += romanNumber.roman;\n      rest -= romanNumber.number;\n\
    \    }\n  });\n  return output;\n}\n", "    if (number < 1 || number > 1000) {\n\
    \        throw new Error('Number is out of range');\n    }\n    const symbols\
    \ = [\n        {value: 1000, symbol: 'm'},\n        {value: 900, symbol: 'cm'},\n\
    \        {value: 500, symbol: 'd'},\n        {value: 400, symbol: 'cd'},\n   \
    \     {value: 100, symbol: 'c'},\n        {value: 90, symbol: 'xc'},\n       \
    \ {value: 50, symbol: 'l'},\n        {value: 40, symbol: 'xl'},\n        {value:\
    \ 10, symbol: 'x'},\n        {value: 9, symbol: 'ix'},\n        {value: 5, symbol:\
    \ 'v'},\n        {value: 4, symbol: 'iv'},\n        {value: 1, symbol: 'i'}\n\
    \    ];\n    let roman = '';\n    let count = 0;\n    while (number > 0) {\n \
    \       if (number >= symbols[count].value) {\n            roman += symbols[count].symbol;\n\
    \            number -= symbols[count].value;\n        } else {\n            count++;\n\
    \        }\n    }\n    return roman;\n}\n", "    return [\"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"].reduce((acc, current, i) => {\n        const times = (number\
    \ % 10 ** (i + 1) - number % 10 ** i) / 10 ** i;\n        return acc + current.repeat(times);\n\
    \    }, \"\");\n}\n", "    let roman: string = \"\";\n    let i: number = 0;\n\
    \    let rest: number = number;\n    while (i < ROMAN_NUMERALS.length) {\n   \
    \     let div: number = Math.floor(rest / ROMAN_NUMERALS[i].value);\n        rest\
    \ = rest % ROMAN_NUMERALS[i].value;\n        if (div > 0) {\n            if (i\
    \ < 3) {\n                roman += ROMAN_NUMERALS[i].numerals.repeat(div);\n \
    \           } else {\n                roman += ROMAN_NUMERALS[i].numerals.repeat(1);\n\
    \                if (div > 1) {\n                    roman += ROMAN_NUMERALS[i\
    \ + 1].numerals.repeat(div - 1);\n                }\n            }\n        }\n\
    \        i++;\n    }\n    return roman;\n}\n", "    // TODO\n    throw new Error(\"\
    Method not implemented.\");\n}\n", "    return \"\";\n}\n\nconsole.log(int_to_mini_roman(19));\n\
    console.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));", " \
    \ // Your code here\n  let result = \"\";\n  if (number > 0 && number <= 1000)\
    \ {\n    const roman = {\n      M: 1000,\n      CM: 900,\n      D: 500,\n    \
    \  CD: 400,\n      C: 100,\n      XC: 90,\n      L: 50,\n      XL: 40,\n     \
    \ X: 10,\n      IX: 9,\n      V: 5,\n      IV: 4,\n      I: 1\n    };\n    while\
    \ (number > 0) {\n      let str = \"\";\n      for (let i in roman) {\n      \
    \  if (number >= roman[i]) {\n          number -= roman[i];\n          str = i;\n\
    \          break;\n        }\n      }\n      result += str;\n    }\n  }\n  return\
    \ result.toLowerCase();\n}\n", "  let roman = \"\";\n  const romanNumerals = {\n\
    \    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n\
    \    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I:\
    \ 1\n  };\n  for (let key in romanNumerals) {\n    while (number >= romanNumerals[key])\
    \ {\n      roman += key;\n      number -= romanNumerals[key];\n    }\n  }\n  return\
    \ roman.toLowerCase();\n}\n", "  let num = number;\n  let result = '';\n  // Reverse\
    \ order to make sure we don't apply higher values\n  // for all lower values e.g.\
    \ 14, 19, 54\n  for (let i = romans.length - 1; i >= 0; i--) {\n    const [rom,\
    \ numeral] = romans[i];\n    while (num >= rom) {\n      result += numeral;\n\
    \      num -= rom;\n    }\n  }\n  return result;\n}\n", "    //create a string\
    \ map of all the numbers\n    let roman = {\n        'M': 1000,\n        'CM':\
    \ 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC':\
    \ 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n\
    \        'V': 5,\n        'IV': 4,\n        'I': 1\n    };\n    let romanValue\
    \ = '';\n    for (let i in roman) {\n        //if the number is greater than the\
    \ roman value\n        while (number >= roman[i]) {\n            // add the roman\
    \ value onto the string value\n            romanValue += i;\n            //decrease\
    \ the number by the roman value\n            number -= roman[i];\n        }\n\
    \    }\n    return romanValue;\n}\n", "  let numbers = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1];\n  let roman = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  let romanized\
    \ = \"\";\n  for (let i = 0; i < numbers.length; i++) {\n    while (number >=\
    \ numbers[i]) {\n      romanized += roman[i];\n      number -= numbers[i];\n \
    \   }\n  }\n  return romanized;\n}\n", "  let result = '';\n  if (number < 1 ||\
    \ number > 1000) {\n    throw new Error('Number is not in range of 1 - 1000');\n\
    \  }\n  while (number > 0) {\n    if (number >= 1000) {\n      result += 'm';\n\
    \      number -= 1000;\n    } else if (number >= 900) {\n      result += 'cm';\n\
    \      number -= 900;\n    } else if (number >= 500) {\n      result += 'd';\n\
    \      number -= 500;\n    } else if (number >= 400) {\n      result += 'cd';\n\
    \      number -= 400;\n    } else if (number >= 100) {\n      result += 'c';\n\
    \      number -= 100;\n    } else if (number >= 90) {\n      result += 'xc';\n\
    \      number -= 90;\n    } else if (number >= 50) {\n      result += 'l';\n \
    \     number -= 50;\n    } else if (number >= 40) {\n      result += 'xl';\n \
    \     number -= 40;\n    } else if (number >= 10) {\n      result += 'x';\n  \
    \    number -= 10;\n    } else if (number >= 9) {\n      result += 'ix';\n   \
    \   number -= 9;\n    } else if (number >= 5) {\n      result += 'v';\n      number\
    \ -= 5;\n    } else if (number >= 4) {\n      result += 'iv';\n      number -=\
    \ 4;\n    } else if (number >= 1) {\n      result += 'i';\n      number -= 1;\n\
    \    }\n  }\n  return result;\n}\nconsole.log(int_to_mini_roman(19));\nconsole.log(int_to_mini_roman(152));\n\
    console.log(int_to_mini_roman(426));\n", "    // checks to see if input is valid\n\
    \    if (number < 1 || number > 1000) {\n        throw new Error(\"invalid input\"\
    );\n    }\n    const romanNumeral: string[] = [];\n    const ones = [\"i\", \"\
    ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    const tens\
    \ = [\"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"\
    ];\n    const hundreds = [\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"];\n    const thousands = [\"m\", \"mm\", \"mmm\"];\n    //\
    \ gets the ones, tens, hundreds, and thousands place\n    const numOnes = number\
    \ % 10;\n    const numTens = Math.floor(number / 10) % 10;\n    const numHundreds\
    \ = Math.floor(number / 100) % 10;\n    const numThousands = Math.floor(number\
    \ / 1000) % 10;\n    //checks to see what the number is in each place\n    //\
    \ if there is a number in that place then it adds that value to the array\n  \
    \  if (numThousands !== 0) {\n        romanNumeral.push(thousands[numThousands\
    \ - 1]);\n    }\n    if (numHundreds !== 0) {\n        romanNumeral.push(hundreds[numHundreds\
    \ - 1]);\n    }\n    if (numTens !== 0) {\n        romanNumeral.push(tens[numTens\
    \ - 1]);\n    }\n    if (numOnes !== 0) {\n        romanNumeral.push(ones[numOnes\
    \ - 1]);\n    }\n    // returns the array\n    return romanNumeral.join(\"\");\n\
    }\n\nexport { int_to_mini_roman };", "    if (number > 1000 || number < 1) {\n\
    \        return \"Bad input\";\n    }\n    let roman: string = \"\";\n    let\
    \ x = Math.floor(number / 100);\n    let y = Math.floor((number % 100) / 10);\n\
    \    let z = number % 10;\n    if (x === 1) {\n        roman += \"c\";\n    }\
    \ else if (x === 2) {\n        roman += \"cc\";\n    } else if (x === 3) {\n \
    \       roman += \"ccc\";\n    } else if (x === 4) {\n        roman += \"cd\"\
    ;\n    } else if (x === 5) {\n        roman += \"d\";\n    } else if (x === 6)\
    \ {\n        roman += \"dc\";\n    } else if (x === 7) {\n        roman += \"\
    dcc\";\n    } else if (x === 8) {\n        roman += \"dccc\";\n    } else if (x\
    \ === 9) {\n        roman += \"cm\";\n    }\n    if (y === 1) {\n        roman\
    \ += \"x\";\n    } else if (y === 2) {\n        roman += \"xx\";\n    } else if\
    \ (y === 3) {\n        roman += \"xxx\";\n    } else if (y === 4) {\n        roman\
    \ += \"xl\";\n    } else if (y === 5) {\n        roman += \"l\";\n    } else if\
    \ (y === 6) {\n        roman += \"lx\";\n    } else if (y === 7) {\n        roman\
    \ += \"lxx\";\n    } else if (y === 8) {\n        roman += \"lxxx\";\n    } else\
    \ if (y === 9) {\n        roman += \"xc\";\n    }\n    if (z === 1) {\n      \
    \  roman += \"i\";\n    } else if (z === 2) {\n        roman += \"ii\";\n    }\
    \ else if (z === 3) {\n        roman += \"iii\";\n    } else if (z === 4) {\n\
    \        roman += \"iv\";\n    } else if (z === 5) {\n        roman", "    const\
    \ thousands = number / 1000;\n    const hundreds = number % 1000 / 100;\n    const\
    \ tens = number % 100 / 10;\n    const ones = number % 10;\n    const result =\
    \ \"m\".repeat(thousands) + miniRomans(hundreds, \"c\", \"d\", \"m\") + miniRomans(tens,\
    \ \"x\", \"l\", \"c\") + miniRomans(ones, \"i\", \"v\", \"x\");\n    return result;\n\
    }\n", "    if (number < 1 || number > 1000) {\n        throw new Error(\"Number\
    \ must be between 1 and 1000\");\n    }\n    let roman = \"\";\n    let c = Math.floor(number\
    \ / 100);\n    let x = Math.floor((number % 100) / 10);\n    let i = Math.floor(number\
    \ % 10);\n    if (c === 1) {\n        roman += \"c\";\n    } else if (c === 2)\
    \ {\n        roman += \"cc\";\n    } else if (c === 3) {\n        roman += \"\
    ccc\";\n    } else if (c === 4) {\n        roman += \"cd\";\n    } else if (c\
    \ === 5) {\n        roman += \"d\";\n    } else if (c === 6) {\n        roman\
    \ += \"dc\";\n    } else if (c === 7) {\n        roman += \"dcc\";\n    } else\
    \ if (c === 8) {\n        roman += \"dccc\";\n    } else if (c === 9) {\n    \
    \    roman += \"cm\";\n    }\n    if (x === 1) {\n        roman += \"x\";\n  \
    \  } else if (x === 2) {\n        roman += \"xx\";\n    } else if (x === 3) {\n\
    \        roman += \"xxx\";\n    } else if (x === 4) {\n        roman += \"xl\"\
    ;\n    } else if (x === 5) {\n        roman += \"l\";\n    } else if (x === 6)\
    \ {\n        roman += \"lx\";\n    } else if (x === 7) {\n        roman += \"\
    lxx\";\n    } else if (x === 8) {\n        roman += \"lxxx\";\n    } else if (x\
    \ === 9) {\n        roman += \"xc\";\n    }\n    if (i === 1) {\n        roman\
    \ += \"i\";\n    } else if (i === 2) {\n        roman += \"ii\";\n    } else if\
    \ (i === 3) {\n        roman += \"iii\";\n    } else if (i === 4) {\n        roman\
    \ += \"iv\";\n    } else if (", "    if (number < 1 || number > 1000) {\n    \
    \    throw \"Wrong input\";\n    }\n    let result = \"\";\n    let keys = Object.keys(romanDictionary);\n\
    \    for (let i = 0; i < keys.length; i++) {\n        let value = keys[i];\n \
    \       let index = keys.length - i - 1;\n        while (number >= value) {\n\
    \            result += romanDictionary[value];\n            number -= value;\n\
    \        }\n    }\n    return result;\n}\n", "    let result = \"\";\n    if (number\
    \ >= 1 && number <= 3) {\n        result = Array(number).fill(\"i\").join(\"\"\
    );\n    } else if (number === 4) {\n        result = \"iv\";\n    } else if (number\
    \ >= 5 && number <= 8) {\n        let num_i = number - 5;\n        result = \"\
    v\" + Array(num_i).fill(\"i\").join(\"\");\n    } else if (number === 9) {\n \
    \       result = \"ix\";\n    } else if (number >= 10 && number <= 39) {\n   \
    \     let num_x = Math.floor(number / 10);\n        let num_i = number % 10;\n\
    \        result = Array(num_x).fill(\"x\").join(\"\") + int_to_mini_roman(num_i);\n\
    \    } else if (number >= 40 && number <= 49) {\n        let num_i = number -\
    \ 40;\n        result = \"xl\" + int_to_mini_roman(num_i);\n    } else if (number\
    \ >= 50 && number <= 89) {\n        let num_x = Math.floor((number - 50) / 10);\n\
    \        let num_i = number % 10;\n        result = \"l\" + Array(num_x).fill(\"\
    x\").join(\"\") + int_to_mini_roman(num_i);\n    } else if (number >= 90 && number\
    \ <= 99) {\n        let num_i = number - 90;\n        result = \"xc\" + int_to_mini_roman(num_i);\n\
    \    } else if (number >= 100 && number <= 399) {\n        let num_c = Math.floor(number\
    \ / 100);\n        let num_i = number % 100;\n        result = Array(num_c).fill(\"\
    c\").join(\"\") + int_to_mini_roman(num_i);\n    } else if (number >= 400 && number\
    \ <= 499) {\n        let num_i = number - 400;\n        result = \"cd\" + int_to_mini_roman(num_i);\n\
    \    } else if (number >= 500 && number <= 899) {\n        let num_c = Math.floor((number\
    \ - 500) / 100);\n", "  const x = 1;\n  const xx = 2;\n  const xxx = 3;\n  const\
    \ v = 5;\n  const vv = 10;\n  const vvv = 15;\n  const l = 50;\n  const ll = 100;\n\
    \  const lll = 150;\n  const d = 500;\n  const dd = 1000;\n  const ddd = 1500;\n\
    \  const m = 5000;\n  const mm = 10000;\n  const mmm = 15000;\n  switch (number)\
    \ {\n    case 1:\n      return \"i\";\n    case 2:\n      return \"ii\";\n   \
    \ case 3:\n      return \"iii\";\n    case 4:\n      return \"iv\";\n    case\
    \ 5:\n      return \"v\";\n    case 6:\n      return \"vi\";\n    case 7:\n  \
    \    return \"vii\";\n    case 8:\n      return \"viii\";\n    case 9:\n     \
    \ return \"ix\";\n    case 10:\n      return \"x\";\n    case 11:\n      return\
    \ \"xi\";\n    case 12:\n      return \"xii\";\n    case 13:\n      return \"\
    xiii\";\n    case 14:\n      return \"xiv\";\n    case 15:\n      return \"xv\"\
    ;\n    case 16:\n      return \"xvi\";\n    case 17:\n      return \"xvii\";\n\
    \    case 18:\n      return \"xviii\";\n    case 19:\n      return \"xix\";\n\
    \    case 20:\n      return \"xx\";\n    case 21:\n      return \"xxi\";\n   \
    \ case 22:\n      return \"xxii\";\n    case 23:\n      return \"xxiii\";\n  \
    \  case 24:\n      return \"xxiv\";\n    case 25:\n      return \"xxv\";\n   \
    \ case 26:\n      return \"xxvi\";\n    case 27:\n      return \"xxvii\";\n  \
    \  case 28:\n      return \"xxviii\";\n    case 29:\n      return \"xxix\";\n\
    \    case 30:\n      return \"xxx\";\n    case 31:\n      return \"xxxi\";\n \
    \   case 32:\n      return \"xxxii\";\n    case 33:\n      return \"xxxiii\";\n\
    \    case 34", "    let roman = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC:\
    \ 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 };\n    let answer = \"\"\
    ;\n    for (let i of Object.keys(roman)) {\n        let q = Math.floor(number\
    \ / roman[i]);\n        number -= q * roman[i];\n        answer += i.repeat(q);\n\
    \    }\n    return answer;\n}\n", "  const romans = [\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  const\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let result\
    \ = \"\";\n  let i = 0;\n  while (number > 0) {\n    if (number >= numbers[i])\
    \ {\n      result += romans[i];\n      number -= numbers[i];\n    } else {\n \
    \     i++;\n    }\n  }\n  return result;\n}\n", "    let mini_numeral: string\
    \ = \"\";\n    let left = 0;\n    let right = 0;\n    while (number > 0) {\n \
    \       left = number % 10;\n        right = Math.floor(number / 10);\n      \
    \  if (right > 0) {\n            mini_numeral = minify_decimal(left, right) +\
    \ mini_numeral;\n        } else {\n            mini_numeral = minify_singular(left)\
    \ + mini_numeral;\n        }\n        number = Math.floor(number / 10);\n    }\n\
    \    return mini_numeral;\n}", "    if (number < 1 || number > 1000) {\n     \
    \   throw new Error(\"number must be between 1 and 1000\");\n    }\n    const\
    \ symbol: { [key: string]: number } = {\n        M: 1000,\n        D: 500,\n \
    \       C: 100,\n        L: 50,\n        X: 10,\n        V: 5,\n        I: 1,\n\
    \    };\n    let result = \"\";\n    for (const k in symbol) {\n        const\
    \ numberOfLetters = Math.floor(number / symbol[k]);\n        for (let i = 0; i\
    \ < numberOfLetters; i++) {\n            result += k;\n        }\n        number\
    \ %= symbol[k];\n    }\n    return result;\n}\n", "    let result: string = \"\
    \";\n    let numberOfSymbols: number = 0;\n    let numberOfSymbolsOfLesserValue:\
    \ number = 0;\n    let numberOfLetters: number = 0;\n    const numberOfDigits:\
    \ number = Math.floor(Math.log10(number)) + 1;\n    for (let i: number = 0; i\
    \ < numberOfDigits; i++) {\n        numberOfSymbols = Math.floor(number / Math.pow(10,\
    \ numberOfDigits - i - 1));\n        numberOfSymbolsOfLesserValue = numberOfSymbols\
    \ - 5;\n        if (numberOfSymbolsOfLesserValue < 0) {\n            numberOfSymbolsOfLesserValue\
    \ = numberOfSymbols;\n        }\n        numberOfLetters = Math.floor(numberOfSymbolsOfLesserValue\
    \ / 2);\n        if (numberOfSymbols > 5) {\n            result += \"v\";\n  \
    \      }\n        result += \"\".padStart(numberOfLetters, \"i\");\n        if\
    \ (numberOfSymbols % 5 === 4) {\n            result += \"iv\";\n        } else\
    \ if (numberOfSymbols % 5 === 9) {\n            result += \"ix\";\n        }\n\
    \        if (numberOfSymbols === 4) {\n            result = result.slice(0, -1);\n\
    \        }\n        number = number % Math.pow(10, numberOfDigits - i - 1);\n\
    \    }\n    return result;\n}\n", "    let roman: string = \"\";\n    while (number\
    \ > 0) {\n        if (number >= 100) {\n            roman += \"c\";\n        \
    \    number -= 100;\n        } else if (number >= 90) {\n            roman +=\
    \ \"xc\";\n            number -= 90;\n        } else if (number >= 50) {\n   \
    \         roman += \"l\";\n            number -= 50;\n        } else if (number\
    \ >= 40) {\n            roman += \"xl\";\n            number -= 40;\n        }\
    \ else if (number >= 10) {\n            roman += \"x\";\n            number -=\
    \ 10;\n        } else if (number >= 9) {\n            roman += \"ix\";\n     \
    \       number -= 9;\n        } else if (number >= 5) {\n            roman +=\
    \ \"v\";\n            number -= 5;\n        } else if (number >= 4) {\n      \
    \      roman += \"iv\";\n            number -= 4;\n        } else if (number >=\
    \ 1) {\n            roman += \"i\";\n            number -= 1;\n        }\n   \
    \ }\n    return roman;\n}\n", "    let result = '';\n    const roman = [\n   \
    \     ['', 'm', 'mm', 'mmm'],\n        ['', 'c', 'cc', 'ccc', 'cd', 'd', 'dc',\
    \ 'dcc', 'dccc', 'cm'],\n        ['', 'x', 'xx', 'xxx', 'xl', 'l', 'lx', 'lxx',\
    \ 'lxxx', 'xc'],\n        ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii',\
    \ 'ix']\n    ];\n    const digits = number.toString().split('').reverse();\n \
    \   digits.forEach((digit, i) => {\n        result = roman[i][parseInt(digit)]\
    \ + result;\n    });\n    return result;\n}\n", "  let roman = \"\";\n  let numberOfThousands\
    \ = Math.floor(number / 1000);\n  for (let i = 0; i < numberOfThousands; i++)\
    \ {\n    roman += \"m\";\n  }\n  number = number % 1000;\n  let numberOfHundreds\
    \ = Math.floor(number / 100);\n  if (numberOfHundreds === 9) {\n    roman += \"\
    cm\";\n  } else if (numberOfHundreds >= 5) {\n    roman += \"d\";\n    for (let\
    \ i = 0; i < numberOfHundreds - 5; i++) {\n      roman += \"c\";\n    }\n  } else\
    \ if (numberOfHundreds === 4) {\n    roman += \"cd\";\n  } else {\n    for (let\
    \ i = 0; i < numberOfHundreds; i++) {\n      roman += \"c\";\n    }\n  }\n  number\
    \ = number % 100;\n  let numberOfTens = Math.floor(number / 10);\n  if (numberOfTens\
    \ === 9) {\n    roman += \"xc\";\n  } else if (numberOfTens >= 5) {\n    roman\
    \ += \"l\";\n    for (let i = 0; i < numberOfTens - 5; i++) {\n      roman +=\
    \ \"x\";\n    }\n  } else if (numberOfTens === 4) {\n    roman += \"xl\";\n  }\
    \ else {\n    for (let i = 0; i < numberOfTens; i++) {\n      roman += \"x\";\n\
    \    }\n  }\n  number = number % 10;\n  let numberOfOnes = Math.floor(number);\n\
    \  if (numberOfOnes === 9) {\n    roman += \"ix\";\n  } else if (numberOfOnes\
    \ >= 5) {\n    roman += \"v\";\n    for (let i = 0; i < numberOfOnes - 5; i++)\
    \ {\n      roman += \"i\";\n    }\n  } else if (numberOfOnes === 4) {\n    roman\
    \ += \"iv\";\n  } else {\n    for (let i = 0; i < numberOfOnes; i++) {\n     \
    \ roman += \"i", "    const ROMAN_MAP = [\n        [\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"],\n        [\"\", \"x\", \"\
    xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"],\n        [\"\
    \", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"],\n\
    \        [\"\", \"m\", \"mm\", \"mmm\", \"mv\", \"v\", \"vm\", \"vmm\", \"vmmm\"\
    , \"mx\"],\n    ];\n    const THOUSANDS = Math.floor(number / 1000);\n    const\
    \ HUNDREDS = Math.floor((number % 1000) / 100);\n    const TENS = Math.floor((number\
    \ % 100) / 10);\n    const ONES = Math.floor(number % 10);\n    return THOUSANDS\
    \ + ROMAN_MAP[3][HUNDREDS] + ROMAN_MAP[2][TENS] + ROMAN_MAP[1][ONES];\n}\n", " \
    \   let string = \"\";\n    while (number >= 1000) {\n        string += \"m\"\
    ;\n        number -= 1000;\n    }\n    while (number >= 500) {\n        string\
    \ += \"d\";\n        number -= 500;\n    }\n    while (number >= 100) {\n    \
    \    string += \"c\";\n        number -= 100;\n    }\n    while (number >= 50)\
    \ {\n        string += \"l\";\n        number -= 50;\n    }\n    while (number\
    \ >= 10) {\n        string += \"x\";\n        number -= 10;\n    }\n    while\
    \ (number >= 5) {\n        string += \"v\";\n        number -= 5;\n    }\n   \
    \ while (number >= 1) {\n        string += \"i\";\n        number -= 1;\n    }\n\
    \    string = string.replace(\"mcd\", \"cdm\");\n    string = string.replace(\"\
    lxv\", \"xvl\");\n    string = string.replace(\"vix\", \"ixv\");\n    string =\
    \ string.replace(\"ixix\", \"xxi\");\n    string = string.replace(\"xxix\", \"\
    xix\");\n    string = string.replace(\"xixx\", \"lx\");\n    string = string.replace(\"\
    ixixx\", \"lxi\");\n    string = string.replace(\"xlxi\", \"lxxi\");\n    string\
    \ = string.replace(\"xixix\", \"lxx\");\n    string = string.replace(\"xlxx\"\
    , \"xc\");\n    string = string.replace(\"ixc\", \"cxi\");\n    string = string.replace(\"\
    xixc\", \"cxix\");\n    string = string.replace(\"ixixc\", \"cxxi\");\n    string\
    \ = string.replace(\"xixixc\", \"cxxix\");\n    string = string.replace(\"xixixixc\"\
    , \"cxxxii\");\n    string = string.replace(\"xixixixixc\", \"cxxxv\");\n    string\
    \ = string.replace(\"xixixixixixc\", \"cxxxix\");\n    string = string.replace(\"\
    xixixixixixixc\", \"cxl\");\n    string = string.replace(\"xcxl\", \"clx\");\n\
    \    string = string.replace(\"ix", "  let roman_digit = \"\";\n  let roman_numeral\
    \ = \"\";\n  let roman_map = [\n    [1000, \"m\"],\n    [900, \"cm\"],\n    [500,\
    \ \"d\"],\n    [400, \"cd\"],\n    [100, \"c\"],\n    [90, \"xc\"],\n    [50,\
    \ \"l\"],\n    [40, \"xl\"],\n    [10, \"x\"],\n    [9, \"ix\"],\n    [5, \"v\"\
    ],\n    [4, \"iv\"],\n    [1, \"i\"]\n  ];\n  while (number > 0) {\n    for (let\
    \ i = 0; i < roman_map.length; i++) {\n      if (number >= roman_map[i][0]) {\n\
    \        roman_digit = roman_map[i][1];\n        roman_numeral += roman_digit;\n\
    \        number -= roman_map[i][0];\n        break;\n      }\n    }\n  }\n  return\
    \ roman_numeral;\n}\n", "    let result = \"\"\n    const roman = [\n        [\"\
    m\", 1000],\n        [\"cm\", 900],\n        [\"d\", 500],\n        [\"cd\", 400],\n\
    \        [\"c\", 100],\n        [\"xc\", 90],\n        [\"l\", 50],\n        [\"\
    xl\", 40],\n        [\"x\", 10],\n        [\"ix\", 9],\n        [\"v\", 5],\n\
    \        [\"iv\", 4],\n        [\"i\", 1],\n    ]\n    for (let index = 0; index\
    \ < roman.length; index++) {\n        const [letter, value] = roman[index]\n \
    \       while (number >= value) {\n            result += letter\n            number\
    \ -= value\n        }\n    }\n    return result\n}\n", "    const romanNumeralLookup\
    \ = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"\
    ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90:\
    \ \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n  \
    \      900: \"cm\",\n        1000: \"m\"\n    };\n    let res = [];\n    let numberArr\
    \ = number.toString().split(\"\").reverse();\n    for (let i = 0; i < numberArr.length;\
    \ i++) {\n        let digit = numberArr[i];\n        let key = digit * Math.pow(10,\
    \ i);\n        if (key in romanNumeralLookup) {\n            res.push(romanNumeralLookup[key]);\n\
    \        } else {\n            let multiple = Math.floor(key / 10);\n        \
    \    for (let j = 0; j < digit; j++) {\n                res.push(romanNumeralLookup[multiple]);\n\
    \            }\n        }\n    }\n    return res.reverse().join(\"\");\n}\nconsole.log(int_to_mini_roman(19));\n\
    console.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));\n",
  "  // TODO: implement this function\n  return \"\";\n}\n", "    const valid_characters\
    \ = ['I', 'V', 'X', 'L', 'C', 'D', 'M'];\n    const symbols: string[] = [];\n\
    \    let temp = number;\n    let extra = 1;\n    for (let i = 1; temp > 0; i++)\
    \ {\n        let current_number = temp % 10;\n        if (current_number === 0)\
    \ {\n            current_number = extra;\n        }\n        if (current_number\
    \ === 4) {\n            symbols.push(valid_characters[(i - 1) * 2] + valid_characters[(i\
    \ - 1) * 2 + 1]);\n        } else if (current_number === 9) {\n            symbols.push(valid_characters[(i\
    \ - 1) * 2] + valid_characters[(i - 1) * 2 + 2]);\n        } else {\n        \
    \    const times = current_number - extra;\n            for (let i = 0; i < times;\
    \ i++) {\n                symbols.push(valid_characters[(i - 1) * 2]);\n     \
    \       }\n            if (current_number > 4) {\n                symbols.push(valid_characters[(i\
    \ - 1) * 2 + 1]);\n            }\n        }\n        temp = Math.floor(temp /\
    \ 10);\n        extra = 0;\n    }\n    return symbols.reverse().join('').toLowerCase();\n\
    }\n", "    let romanNumber: string = '';\n    const romanNumbers: any = {\n  \
    \      M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n       \
    \ C: 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n\
    \        IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    let\
    \ a: any;\n    for (a in romanNumbers) {\n        while (number >= romanNumbers[a])\
    \ {\n            romanNumber += a;\n            number -= romanNumbers[a];\n \
    \       }\n    }\n    return romanNumber;\n}\n", "  const romanNum = [\"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\"];\n  const arabicNum = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1];\n  let i = 0;\n  let miniRoman = \"\";\n  while (number > 0) {\n    if\
    \ (number - arabicNum[i] >= 0) {\n      miniRoman += romanNum[i];\n      number\
    \ -= arabicNum[i];\n    } else {\n      i++;\n    }\n  }\n  return miniRoman;\n\
    }\n", "  const ROMAN_NUMERALS = {\n    1000: \"m\",\n    900: \"cm\",\n    500:\
    \ \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n\
    \    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\"\
    ,\n    1: \"i\"\n  };\n  const integers = Object.keys(ROMAN_NUMERALS);\n  const\
    \ ROMAN_VALS = Object.values(ROMAN_NUMERALS);\n  let roman = \"\";\n  for (let\
    \ i = 0; i < integers.length; i++) {\n    while (number >= integers[i]) {\n  \
    \    roman += ROMAN_VALS[i];\n      number -= integers[i];\n    }\n  }\n  return\
    \ roman;\n}\n", "  if (number <= 0 || number > 1000) {\n    throw new Error(\"\
    Invalid number. Must be between 1 and 1000, inclusive.\");\n  }\n  const roman:\
    \ string[] = [];\n  let currentNumber = number;\n  const romanDict = {\n    1000:\
    \ \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\"\
    ,\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"\
    ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\",\n  };\n  while (currentNumber\
    \ > 0) {\n    const key = Object.keys(romanDict).find(\n      (key) => Number(key)\
    \ <= currentNumber\n    );\n    roman.push(romanDict[key]);\n    currentNumber\
    \ -= Number(key);\n  }\n  return roman.join(\"\");\n}\n", "  let result = \"\"\
    ;\n  for (let i = 0; i < number; i++) {\n    result += \"i\";\n  }\n  result =\
    \ result.replace(/iiiii/g, \"v\");\n  result = result.replace(/viiii/g, \"ix\"\
    );\n  result = result.replace(/iiii/g, \"iv\");\n  result = result.replace(/ii/g,\
    \ \"iv\");\n  result = result.replace(/vv/g, \"x\");\n  result = result.replace(/xxxxx/g,\
    \ \"l\");\n  result = result.replace(/ll/g, \"xc\");\n  result = result.replace(/xxxx/g,\
    \ \"xl\");\n  result = result.replace(/lll/g, \"xc\");\n  result = result.replace(/xx/g,\
    \ \"xl\");\n  result = result.replace(/ccc/g, \"cm\");\n  result = result.replace(/cc/g,\
    \ \"cd\");\n  result = result.replace(/dd/g, \"cm\");\n  result = result.replace(/mmmm/g,\
    \ \"m\");\n  result = result.replace(/mm/g, \"cm\");\n  return result;\n}\n",
  "    if (typeof number !== \"number\") {\n        throw new Error(\"input must be\
    \ a number\");\n    }\n    if (number < 1 || number > 1000) {\n        throw new\
    \ Error(\"number must be between 1 and 1000\");\n    }\n    const romanNumeral\
    \ = number.toString();\n    const romanNumeralLength = romanNumeral.length;\n\
    \    let result = \"\";\n    let digit = 0;\n    for (let i = 0; i < romanNumeralLength;\
    \ i++) {\n        digit = Number(romanNumeral[i]);\n        if (digit === 0) {\n\
    \            continue;\n        }\n        if (i === 0) {\n            for (let\
    \ j = 0; j < digit; j++) {\n                result += \"i\";\n            }\n\
    \        } else if (i === 1) {\n            result = numerals(result, digit, \"\
    x\", \"v\", \"i\");\n        } else if (i === 2) {\n            result = numerals(result,\
    \ digit, \"c\", \"l\", \"x\");\n        } else if (i === 3) {\n            result\
    \ = numerals(result, digit, \"m\", \"\", \"c\");\n        }\n    }\n    return\
    \ result;\n}\n", "  let miniRoman = '';\n  if (number <= 0 || number > 1000) {\n\
    \    return miniRoman;\n  }\n\n  const numeralMap = {\n    M: 1000,\n    CM: 900,\n\
    \    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n\
    \    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n\n  const values\
    \ = Object.values(numeralMap);\n  const keys = Object.keys(numeralMap);\n\n  let\
    \ currentValue = number;\n  for (let i = 0; i < values.length; i++) {\n    if\
    \ (currentValue - values[i] >= 0) {\n      const multipleOfKey = Math.floor(currentValue\
    \ / values[i]);\n      miniRoman += keys[i].repeat(multipleOfKey);\n      currentValue\
    \ -= values[i] * multipleOfKey;\n    }\n  }\n\n  return miniRoman;\n}\n", "  \
    \  // Change the number to a string for easy iteration\n    var numStr = number.toString();\n\
    \    var romanString = \"\";\n    for (var i = 0; i < numStr.length; i++) {\n\
    \        var digit = numStr[i];\n        // Convert the digit to base 10\n   \
    \     digit = parseInt(digit);\n        // The index of the digit in the numStr\
    \ will tell us the place value\n        // of the digit (1s, 10s, 100s, etc.)\n\
    \        var placeValue = numStr.length - i;\n        romanString += convertDigit(digit,\
    \ placeValue);\n    }\n    return romanString;\n}\n", "    // Your solution goes\
    \ here\n    var map: {[key: number]: string} = {\n        1: \"i\",\n        5:\
    \ \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n      \
    \  500: \"d\",\n        1000: \"m\"\n    };\n    var integerList: number[] = Object.keys(map).map(Number).reverse();\n\
    \    var roman: string = \"\";\n    var max: number = Math.ceil(Math.log10(number\
    \ + 1));\n    for (var i: number = max; i > 0; i--) {\n        var place: number\
    \ = 10 ** (i - 1);\n        var digit: number = Math.floor(number / place);\n\
    \        number = number % place;\n        var romanDigit: string = \"\";\n  \
    \      if (digit == 0) {\n            continue;\n        }\n        if (digit\
    \ < 4) {\n            romanDigit = map[place].repeat(digit);\n        } else if\
    \ (digit == 4) {\n            romanDigit = map[place] + map[place * 5];\n    \
    \    } else if (digit < 9) {\n            romanDigit = map[place * 5] + map[place].repeat(digit\
    \ - 5);\n        } else {\n            romanDigit = map[place] + map[place * 10];\n\
    \        }\n        roman += romanDigit;\n    }\n    return roman;\n}\n\n", " \
    \ let result = \"\";\n  const roman_numerals = {\n    1000: \"m\",\n    900: \"\
    cm\",\n    500: \"d\",\n    400: \"cd\",\n    100: \"c\",\n    90: \"xc\",\n \
    \   50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n    9: \"ix\",\n    5: \"v\"\
    ,\n    4: \"iv\",\n    1: \"i\"\n  };\n  let num = number;\n  while (num > 0)\
    \ {\n    for (let i in roman_numerals) {\n      if (num >= parseInt(i)) {\n  \
    \      result += roman_numerals[i];\n        num -= parseInt(i);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\nconsole.log(int_to_mini_roman(19));\
    \ //'xix'\nconsole.log(int_to_mini_roman(152)); //'clii'\nconsole.log(int_to_mini_roman(426));\
    \ //'cdxxvi'\n", "    const symbolMap = {\n        1: 'i',\n        4: 'iv',\n\
    \        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n    \
    \    50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n    \
    \    500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    let result\
    \ = '';\n    let keyArray = Object.keys(symbolMap).reverse();\n    while (number\
    \ > 0) {\n        for (let i of keyArray) {\n            if (number >= parseInt(i))\
    \ {\n                number -= parseInt(i);\n                result += symbolMap[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "    let result: string = \"\";\n    while (number >= 1000) {\n        result\
    \ += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n      \
    \  result += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n\
    \        result += \"d\";\n        number -= 500;\n    }\n    if (number >= 400)\
    \ {\n        result += \"cd\";\n        number -= 400;\n    }\n    while (number\
    \ >= 100) {\n        result += \"c\";\n        number -= 100;\n    }\n    if (number\
    \ >= 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n \
    \   if (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n   \
    \ }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n\
    \    }\n    return result;\n}\n", "    return '';\n}\n", "    let iRomanNumeral\
    \ = '';\n    if (number <= 0 || number > 1000) {\n        throw new Error('unexpected\
    \ number ' + number);\n    }\n    while (number > 0) {\n        if (number >=\
    \ 1000) {\n            iRomanNumeral += 'm';\n            number -= 1000;\n  \
    \      } else if (number >= 900) {\n            iRomanNumeral += 'cm';\n     \
    \       number -= 900;\n        } else if (number >= 500) {\n            iRomanNumeral\
    \ += 'd';\n            number -= 500;\n        } else if (number >= 400) {\n \
    \           iRomanNumeral += 'cd';\n            number -= 400;\n        } else\
    \ if (number >= 100) {\n            iRomanNumeral += 'c';\n            number\
    \ -= 100;\n        } else if (number >= 90) {\n            iRomanNumeral += 'xc';\n\
    \            number -= 90;\n        } else if (number >= 50) {\n            iRomanNumeral\
    \ += 'l';\n            number -= 50;\n        } else if (number >= 40) {\n   \
    \         iRomanNumeral += 'xl';\n            number -= 40;\n        } else if\
    \ (number >= 10) {\n            iRomanNumeral += 'x';\n            number -= 10;\n\
    \        } else if (number >= 9) {\n            iRomanNumeral += 'ix';\n     \
    \       number -= 9;\n        } else if (number >= 5) {\n            iRomanNumeral\
    \ += 'v';\n            number -= 5;\n        } else if (number >= 4) {\n     \
    \       iRomanNumeral += 'iv';\n            number -= 4;\n        } else if (number\
    \ >= 1) {\n            iRomanNumeral += 'i';\n            number -= 1;\n     \
    \   }\n    }\n    return iRomanNumeral;\n}\n", "  const romanMap = [\n    ['m',\
    \ 1000],\n    ['cm', 900],\n    ['d', 500],\n    ['cd', 400],\n    ['c', 100],\n\
    \    ['xc', 90],\n    ['l', 50],\n    ['xl', 40],\n    ['x', 10],\n    ['ix',\
    \ 9],\n    ['v', 5],\n    ['iv', 4],\n    ['i', 1],\n  ];\n  let result = '';\n\
    \  romanMap.forEach(([key, value]) => {\n    while (number >= value) {\n     \
    \ result += key;\n      number -= value;\n    }\n  });\n  return result;\n}\n",
  "    let n = number;\n    let numeral = '';\n    if (number >= 1000) return 'M';\n\
    \    if (number < 1) return 'Enter a number between 1 and 1000';\n    while (n\
    \ > 0) {\n        if (n >= 100) {\n            if (n >= 900) {\n             \
    \   numeral += 'cm';\n                n -= 900;\n            } else if (n >= 500)\
    \ {\n                numeral += 'd';\n                n -= 500;\n            }\
    \ else if (n >= 400) {\n                numeral += 'cd';\n                n -=\
    \ 400;\n            } else {\n                numeral += 'c';\n              \
    \  n -= 100;\n            }\n        } else if (n >= 10) {\n            if (n\
    \ >= 90) {\n                numeral += 'xc';\n                n -= 90;\n     \
    \       } else if (n >= 50) {\n                numeral += 'l';\n             \
    \   n -= 50;\n            } else if (n >= 40) {\n                numeral += 'xl';\n\
    \                n -= 40;\n            } else {\n                numeral += 'x';\n\
    \                n -= 10;\n            }\n        } else {\n            if (n\
    \ >= 9) {\n                numeral += 'ix';\n                n -= 9;\n       \
    \     } else if (n >= 5) {\n                numeral += 'v';\n                n\
    \ -= 5;\n            } else if (n >= 4) {\n                numeral += 'iv';\n\
    \                n -= 4;\n            } else {\n                numeral += 'i';\n\
    \                n -= 1;\n            }\n        }\n    }\n    return numeral;\n\
    }", "    let roman = '';\n    let num = number;\n    const ROMAN_NUMERALS = {\n\
    \        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n\
    \        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n \
    \       10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n      \
    \  1: 'i'\n    };\n    Object.keys(ROMAN_NUMERALS).forEach(key => {\n        while\
    \ (num >= Number(key)) {\n            roman += ROMAN_NUMERALS[key];\n        \
    \    num -= Number(key);\n        }\n    });\n    return roman;\n}\n", "    let\
    \ num = '';\n    let roman = {\n        M: 1000,\n        CM: 900,\n        D:\
    \ 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n \
    \       XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n\
    \        I: 1\n    };\n    let a;\n    if (number < 1 || number > 1000)\n    \
    \    return false;\n    for (let key in roman) {\n        a = Math.floor(number\
    \ / roman[key]);\n        if (a >= 0) {\n            for (let i = 0; i < a; i++)\
    \ {\n                num += key.toLowerCase();\n            }\n        }\n   \
    \     number = number % roman[key];\n    }\n    return num;\n}\n", "  // your\
    \ code here\n  const miniRomanNumerals: string[] = [\"i\", \"v\", \"x\", \"l\"\
    , \"c\", \"d\", \"m\"];\n  let toReturn: string = \"\";\n  let index: number =\
    \ 0;\n  for (let i = number; i > 0; i = Math.floor(i / 10)) {\n    toReturn =\
    \ miniRomanNumerals[index * 2 + 1] + toReturn;\n    if (i % 10 === 4) {\n    \
    \  toReturn = miniRomanNumerals[index * 2] + toReturn;\n    } else if (i % 10\
    \ === 9) {\n      toReturn = miniRomanNumerals[index * 2] + miniRomanNumerals[index\
    \ * 2 + 2] + toReturn;\n    } else {\n      for (let j = 0; j < i % 10 % 5; j++)\
    \ {\n        toReturn = miniRomanNumerals[index * 2] + toReturn;\n      }\n  \
    \  }\n    index++;\n  }\n  return toReturn;\n}", "  let miniRoman: string = \"\
    \";\n  while (number > 0) {\n    if (number >= 1000) {\n      miniRoman += \"\
    m\";\n      number -= 1000;\n    } else if (number >= 900) {\n      miniRoman\
    \ += \"cm\";\n      number -= 900;\n    } else if (number >= 500) {\n      miniRoman\
    \ += \"d\";\n      number -= 500;\n    } else if (number >= 400) {\n      miniRoman\
    \ += \"cd\";\n      number -= 400;\n    } else if (number >= 100) {\n      miniRoman\
    \ += \"c\";\n      number -= 100;\n    } else if (number >= 90) {\n      miniRoman\
    \ += \"xc\";\n      number -= 90;\n    } else if (number >= 50) {\n      miniRoman\
    \ += \"l\";\n      number -= 50;\n    } else if (number >= 40) {\n      miniRoman\
    \ += \"xl\";\n      number -= 40;\n    } else if (number >= 10) {\n      miniRoman\
    \ += \"x\";\n      number -= 10;\n    } else if (number >= 9) {\n      miniRoman\
    \ += \"ix\";\n      number -= 9;\n    } else if (number >= 5) {\n      miniRoman\
    \ += \"v\";\n      number -= 5;\n    } else if (number >= 4) {\n      miniRoman\
    \ += \"iv\";\n      number -= 4;\n    } else if (number >= 1) {\n      miniRoman\
    \ += \"i\";\n      number -= 1;\n    }\n  }\n  return miniRoman;\n}\nconsole.log(int_to_mini_roman(19));\n\
    console.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));\n",
  "    const romanNumeralConversionTable = {\n        1: \"i\",\n        4: \"iv\"\
    ,\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\"\
    ,\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400:\
    \ \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n  \
    \  };\n    let romanNumber: string = \"\";\n    let remainingDigits = number;\n\
    \    for (let romanDigit = 1000; romanDigit > 0; romanDigit = romanDigit / 10)\
    \ {\n        let decimalDigit = Math.floor(remainingDigits / romanDigit);\n  \
    \      remainingDigits -= decimalDigit * romanDigit;\n        if (decimalDigit\
    \ === 0) {\n            continue;\n        } else if (decimalDigit < 4) {\n  \
    \          romanNumber += romanNumeralConversionTable[romanDigit].repeat(decimalDigit);\n\
    \        } else if (decimalDigit === 4) {\n            romanNumber += romanNumeralConversionTable[romanDigit\
    \ * 4];\n        } else if (decimalDigit < 9) {\n            romanNumber += romanNumeralConversionTable[romanDigit\
    \ * 5] + romanNumeralConversionTable[romanDigit].repeat(decimalDigit - 5);\n \
    \       } else {\n            romanNumber += romanNumeralConversionTable[romanDigit\
    \ * 10];\n        }\n    }\n    return romanNumber;\n}\n", "    let result: string\
    \ = \"\";\n    let i: number = 0;\n    let l: number = number;\n    while (l >\
    \ 0) {\n        let d: number = l % 10;\n        if (d == 4) {\n            result\
    \ = \"iv\" + result;\n        } else if (d == 9) {\n            result = \"ix\"\
    \ + result;\n        } else {\n            let v: string = \"\";\n           \
    \ if (d >= 5) {\n                v = \"v\";\n                d -= 5;\n       \
    \     }\n            for (let j: number = 0; j < d; j++) {\n                v\
    \ += \"i\";\n            }\n            result = v + result;\n        }\n    \
    \    l = Math.floor(l / 10);\n        i++;\n    }\n    return result;\n}\n", " \
    \ let result = \"\";\n  let left = number;\n  while (left > 0) {\n    if (left\
    \ >= 1000) {\n      result += \"m\";\n      left -= 1000;\n    } else if (left\
    \ >= 900) {\n      result += \"cm\";\n      left -= 900;\n    } else if (left\
    \ >= 500) {\n      result += \"d\";\n      left -= 500;\n    } else if (left >=\
    \ 400) {\n      result += \"cd\";\n      left -= 400;\n    } else if (left >=\
    \ 100) {\n      result += \"c\";\n      left -= 100;\n    } else if (left >= 90)\
    \ {\n      result += \"xc\";\n      left -= 90;\n    } else if (left >= 50) {\n\
    \      result += \"l\";\n      left -= 50;\n    } else if (left >= 40) {\n   \
    \   result += \"xl\";\n      left -= 40;\n    } else if (left >= 10) {\n     \
    \ result += \"x\";\n      left -= 10;\n    } else if (left >= 9) {\n      result\
    \ += \"ix\";\n      left -= 9;\n    } else if (left >= 5) {\n      result += \"\
    v\";\n      left -= 5;\n    } else if (left >= 4) {\n      result += \"iv\";\n\
    \      left -= 4;\n    } else if (left >= 1) {\n      result += \"i\";\n     \
    \ left -= 1;\n    }\n  }\n  return result;\n}\n", "    const thousandChar = \"\
    m\";\n    const hundredChar = \"c\";\n    const tenChar = \"x\";\n    const oneChar\
    \ = \"i\";\n    const twoChar = \"ii\";\n    const threeChar = \"iii\";\n    const\
    \ fourChar = \"iv\";\n    const fiveChar = \"v\";\n    const sixChar = \"vi\"\
    ;\n    const sevenChar = \"vii\";\n    const eightChar = \"viii\";\n    const\
    \ nineChar = \"ix\";\n\n    let result = \"\";\n    const thousands = Math.floor(number\
    \ / 1000);\n    if (thousands > 0) {\n        result += thousandChar.repeat(thousands);\n\
    \    }\n    const hundreds = Math.floor((number % 1000) / 100);\n    if (hundreds\
    \ > 0) {\n        if (hundreds < 4) {\n            result += hundredChar.repeat(hundreds);\n\
    \        } else if (hundreds === 4) {\n            result += hundredChar + fiveChar;\n\
    \        } else if (hundreds < 9) {\n            result += fiveChar + hundredChar.repeat(hundreds\
    \ - 5);\n        } else {\n            result += hundredChar + thousandChar;\n\
    \        }\n    }\n    const tens = Math.floor((number % 100) / 10);\n    if (tens\
    \ > 0) {\n        if (tens < 4) {\n            result += tenChar.repeat(tens);\n\
    \        } else if (tens === 4) {\n            result += tenChar + fiveChar;\n\
    \        } else if (tens < 9) {\n            result += fiveChar + tenChar.repeat(tens\
    \ - 5);\n        } else {\n            result += tenChar + hundredChar;\n    \
    \    }\n    }\n    const ones = Math.floor(number % 10);\n    if (ones > 0) {\n\
    \        if (ones < 4) {\n            result += oneChar.repeat(ones);\n      \
    \  } else if (ones === 4) {\n            result += oneChar + fiveChar;\n     \
    \   } else if (ones < 9) {\n            result += fiveChar + oneChar.repeat(ones\
    \ - 5);\n        } else {\n            result += oneChar + tenChar;\n        }\n\
    \    }\n    return result;\n", "    let roman = \"\";\n    let remain = number;\n\
    \    for (let i = 0; i < romanNumbers.length; i++) {\n        const [int, str]\
    \ = romanNumbers[i];\n        while (remain >= int) {\n            roman += str;\n\
    \            remain -= int;\n        }\n    }\n    return roman;\n}\n", "  if\
    \ (!(number > 0 && number <= 1000)) throw new Error(`${number} is out of range`);\n\
    \  let result = '';\n  while (number >= 900) {\n    result += 'cm';\n    number\
    \ -= 900;\n  }\n  while (number >= 500) {\n    result += 'd';\n    number -= 500;\n\
    \  }\n  while (number >= 400) {\n    result += 'cd';\n    number -= 400;\n  }\n\
    \  while (number >= 100) {\n    result += 'c';\n    number -= 100;\n  }\n  while\
    \ (number >= 90) {\n    result += 'xc';\n    number -= 90;\n  }\n  while (number\
    \ >= 50) {\n    result += 'l';\n    number -= 50;\n  }\n  while (number >= 40)\
    \ {\n    result += 'xl';\n    number -= 40;\n  }\n  while (number >= 10) {\n \
    \   result += 'x';\n    number -= 10;\n  }\n  while (number >= 9) {\n    result\
    \ += 'ix';\n    number -= 9;\n  }\n  while (number >= 5) {\n    result += 'v';\n\
    \    number -= 5;\n  }\n  while (number >= 4) {\n    result += 'iv';\n    number\
    \ -= 4;\n  }\n  while (number >= 1) {\n    result += 'i';\n    number -= 1;\n\
    \  }\n  return result;\n}\n", "    const roman = [\"i\", \"v\", \"x\", \"l\",\
    \ \"c\", \"d\", \"m\"];\n    let str = \"\";\n    let i = 0;\n    while (number\
    \ > 0) {\n        switch (number % 10) {\n            case 1:\n              \
    \  str = roman[i] + str;\n                break;\n            case 2:\n      \
    \          str = roman[i] + roman[i] + str;\n                break;\n        \
    \    case 3:\n                str = roman[i] + roman[i] + roman[i] + str;\n  \
    \              break;\n            case 4:\n                str = roman[i] + roman[i\
    \ + 1] + str;\n                break;\n            case 5:\n                str\
    \ = roman[i + 1] + str;\n                break;\n            case 6:\n       \
    \         str = roman[i + 1] + roman[i] + str;\n                break;\n     \
    \       case 7:\n                str = roman[i + 1] + roman[i] + roman[i] + str;\n\
    \                break;\n            case 8:\n                str = roman[i +\
    \ 1] + roman[i] + roman[i] + roman[i] + str;\n                break;\n       \
    \     case 9:\n                str = roman[i] + roman[i + 2] + str;\n        \
    \        break;\n        }\n        number = number / 10;\n        i += 2;\n \
    \   }\n    return str;\n}\nconsole.log(int_to_mini_roman(1234));\nconsole.log(int_to_mini_roman(152));\n\
    console.log(int_to_mini_roman(426));\n", "  const roman_number = int_to_roman(number)\n\
    \  const roman_number_numbers = roman_number.split('')\n  const roman_number_lower\
    \ = roman_number_numbers.map(\n    (number) => {\n      switch (number) {\n  \
    \      case 'M':\n          return 'm'\n        case 'D':\n          return 'd'\n\
    \        case 'C':\n          return 'c'\n        case 'L':\n          return\
    \ 'l'\n        case 'X':\n          return 'x'\n        case 'V':\n          return\
    \ 'v'\n        case 'I':\n          return 'i'\n        default:\n          return\
    \ number\n      }\n    }\n  )\n  return roman_number_lower.join('')\n}", "   \
    \ if (number > 1000 || number < 1) throw new Error(\"number 1 - 1000\");\n   \
    \ const thousands = Math.floor(number / 1000);\n    const hundreds = Math.floor((number\
    \ % 1000) / 100);\n    const tens = Math.floor((number % 100) / 10);\n    const\
    \ ones = number % 10;\n    let thousandStr = \"\";\n    for (let i = 0; i < thousands;\
    \ i++) {\n        thousandStr += \"m\";\n    }\n    let hundredStr = \"\";\n \
    \   switch (hundreds) {\n        case 1:\n            hundredStr = \"c\";\n  \
    \          break;\n        case 2:\n            hundredStr = \"cc\";\n       \
    \     break;\n        case 3:\n            hundredStr = \"ccc\";\n           \
    \ break;\n        case 4:\n            hundredStr = \"cd\";\n            break;\n\
    \        case 5:\n            hundredStr = \"d\";\n            break;\n      \
    \  case 6:\n            hundredStr = \"dc\";\n            break;\n        case\
    \ 7:\n            hundredStr = \"dcc\";\n            break;\n        case 8:\n\
    \            hundredStr = \"dccc\";\n            break;\n        case 9:\n   \
    \         hundredStr = \"cm\";\n            break;\n    }\n    let tenStr = \"\
    \";\n    switch (tens) {\n        case 1:\n            tenStr = \"x\";\n     \
    \       break;\n        case 2:\n            tenStr = \"xx\";\n            break;\n\
    \        case 3:\n            tenStr = \"xxx\";\n            break;\n        case\
    \ 4:\n            tenStr = \"xl\";\n            break;\n        case 5:\n    \
    \        tenStr = \"l\";\n            break;\n        case 6:\n            tenStr\
    \ = \"lx\";\n            break;\n        case 7:\n            tenStr = \"lxx\"\
    ;\n            break;\n        case 8:\n            tenStr = \"lxxx\";\n     \
    \       break;\n        case 9:\n            tenStr = \"xc\";\n            break;\n\
    \    }\n    let oneStr = \"\";\n    switch (ones) {\n        case 1:\n       \
    \     oneStr = \"i\";\n            break;\n        case 2:\n            oneStr\
    \ = \"ii\";\n            break;\n", "  let result = \"\";\n  while (number > 0)\
    \ {\n    if (number >= 100) {\n      result += \"c\";\n      number -= 100;\n\
    \    } else if (number >= 90) {\n      result += \"xc\";\n      number -= 90;\n\
    \    } else if (number >= 50) {\n      result += \"l\";\n      number -= 50;\n\
    \    } else if (number >= 40) {\n      result += \"xl\";\n      number -= 40;\n\
    \    } else if (number >= 10) {\n      result += \"x\";\n      number -= 10;\n\
    \    } else if (number >= 9) {\n      result += \"ix\";\n      number -= 9;\n\
    \    } else if (number >= 5) {\n      result += \"v\";\n      number -= 5;\n \
    \   } else if (number >= 4) {\n      result += \"iv\";\n      number -= 4;\n \
    \   } else if (number >= 1) {\n      result += \"i\";\n      number -= 1;\n  \
    \  }\n  }\n  return result;\n}\n", "    if (number < 1 || number > 1000) {\n \
    \       throw new Error('int_to_mini_roman only supports values between 1 and\
    \ 1000');\n    }\n    const DIGITS = [\n        { n: 500, r: 'd' },\n        {\
    \ n: 100, r: 'c' },\n        { n: 50, r: 'l' },\n        { n: 10, r: 'x' },\n\
    \        { n: 5, r: 'v' },\n        { n: 1, r: 'i' },\n    ];\n    let work =\
    \ number;\n    let result = '';\n    for (let i = 0; i < DIGITS.length; i++) {\n\
    \        let current_digit = DIGITS[i];\n        if (work >= current_digit.n)\
    \ {\n            result += current_digit.r;\n            work -= current_digit.n;\n\
    \        }\n        else if (i % 2 === 0 && work >= current_digit.n - DIGITS[i\
    \ + 2].n) {\n            result += DIGITS[i + 2].r + current_digit.r;\n      \
    \      work -= current_digit.n - DIGITS[i + 2].n;\n        }\n        else if\
    \ (i % 2 === 1 && work >= current_digit.n - DIGITS[i + 1].n) {\n            result\
    \ += DIGITS[i + 1].r + current_digit.r;\n            work -= current_digit.n -\
    \ DIGITS[i + 1].n;\n        }\n    }\n    return result;\n}\n", "    if (number\
    \ < 1 || number > 1000) {\n        throw new Error('Value out of range');\n  \
    \  }\n    const values = [\n        [1000, 'm'],\n        [900, 'cm'],\n     \
    \   [500, 'd'],\n        [400, 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n\
    \        [50, 'l'],\n        [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n\
    \        [5, 'v'],\n        [4, 'iv'],\n        [1, 'i'],\n    ];\n    let result\
    \ = '';\n    for (const [val, letter] of values) {\n        while (number >= val)\
    \ {\n            result += letter;\n            number -= val;\n        }\n  \
    \  }\n    return result;\n}\n", "  const romanToNum: { [key: string]: number }\
    \ = {\n    m: 1000,\n    d: 500,\n    c: 100,\n    l: 50,\n    x: 10,\n    v:\
    \ 5,\n    i: 1,\n  };\n  const numToRoman: { [key: number]: string } = {\n   \
    \ 1000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n    100:\
    \ \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"x\",\n \
    \   9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\",\n  };\n  let result\
    \ = \"\";\n  let num = number;\n  while (num > 0) {\n    for (let i = 0; i < Object.keys(numToRoman).length;\
    \ i++) {\n      if (num >= Object.keys(numToRoman)[i]) {\n        result += numToRoman[Object.keys(numToRoman)[i]];\n\
    \        num -= Object.keys(numToRoman)[i];\n        break;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "    if (number > 1000 || number < 1) {\n      \
    \  throw new Error('not valid number');\n    }\n    let str = number.toString();\n\
    \    let numbers = [10, 50, 100, 500, 1000];\n    let romans = ['x', 'l', 'c',\
    \ 'd', 'm'];\n    let output = '';\n    for (let index = 0; index < str.length;\
    \ index++) {\n        const digit = str[index];\n        const number = parseInt(digit);\n\
    \        if (number == 4) {\n            if (index > 0) {\n                output\
    \ += romans[index - 1];\n            }\n            output += romans[index];\n\
    \        } else if (number == 9) {\n            if (index > 0) {\n           \
    \     output += romans[index - 1];\n            }\n            output += romans[index\
    \ + 1];\n        } else if (number < 4) {\n            for (let i = 0; i < number;\
    \ i++) {\n                output += romans[index];\n            }\n        } else\
    \ if (number > 4) {\n            output += romans[index];\n            for (let\
    \ i = 0; i < number - 5; i++) {\n                output += romans[index];\n  \
    \          }\n        }\n    }\n    return output;\n}", "    const roman_dict\
    \ = {M: 1000, D: 500, C: 100, L: 50, X: 10, V: 5, I: 1};\n    let roman_string\
    \ = \"\";\n    while (number > 0) {\n        for (const roman_key in roman_dict)\
    \ {\n            if (number >= roman_dict[roman_key]) {\n                number\
    \ -= roman_dict[roman_key];\n                roman_string += roman_key;\n    \
    \            break;\n            }\n        }\n    }\n    return roman_string;\n\
    }\n", "    let result = \"\";\n    let roman = [\n        { n: \"i\", v: 1 },\n\
    \        { n: \"v\", v: 5 },\n        { n: \"x\", v: 10 },\n        { n: \"l\"\
    , v: 50 },\n        { n: \"c\", v: 100 },\n        { n: \"d\", v: 500 },\n   \
    \     { n: \"m\", v: 1000 }\n    ];\n    let i = roman.length - 1;\n    for (;\
    \ i >= 0; i--) {\n        const s = roman[i];\n        const v = Math.floor(number\
    \ / s.v);\n        if (v >= 1) {\n            number -= s.v * v;\n           \
    \ result += s.n.repeat(v);\n        }\n    }\n    return result;\n}\n", "    if\
    \ (number < 1 || number > 1000) {\n        throw new Error('Number must be positive\
    \ integer between 1 and 1000.');\n    }\n    const NUMERALS = 'ivxlcdm';\n   \
    \ let romanString = '';\n    let digitNum = 0;\n    do {\n        const digit\
    \ = number % 10;\n        const numeralsIndex = digitNum * 2;\n        romanString\
    \ = (\n            romanDigit(digit, NUMERALS[numeralsIndex], NUMERALS[numeralsIndex\
    \ + 1], NUMERALS[numeralsIndex + 2])\n            + romanString\n        );\n\
    \        number = Math.floor(number / 10);\n        digitNum++;\n    } while (number\
    \ > 0);\n    return romanString;\n}\n", "    let roman: string = \"\";\n    const\
    \ romanNumList = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL:\
    \ 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 };\n    let a: any;\n    if (number < 1\
    \ || number > 1000)\n        return \"\";\n    else {\n        for (a in romanNumList)\
    \ {\n            while (number >= romanNumList[a]) {\n                roman +=\
    \ a;\n                number -= romanNumList[a];\n            }\n        }\n \
    \       return roman;\n    }\n}\n", "    let roman: string = \"\";\n    const\
    \ z = (i: number): string => \"z\"[i % 5];\n    const x = (i: number): string\
    \ => \"ixc\"[i % 3];\n    const v = (i: number): string => \"vld\"[i % 3];\n \
    \   const digits = number.toString().split(\"\").map(x => parseInt(x));\n    const\
    \ add_digit = (digit: number, i: number) => {\n        if (i === 0) {\n      \
    \      roman += \"x\".repeat(digit);\n        } else if (i === 1) {\n        \
    \    roman += z(digit);\n            roman += x(digit);\n        } else if (i\
    \ === 2) {\n            roman += \"c\".repeat(digit);\n        } else if (i ===\
    \ 3) {\n            roman += z(digit);\n            roman += x(digit);\n     \
    \   } else if (i === 4) {\n            roman += v(digit);\n            roman +=\
    \ x(digit);\n        } else if (i === 5) {\n            roman += \"m\".repeat(digit);\n\
    \        } else if (i === 6) {\n            roman += z(digit);\n            roman\
    \ += x(digit);\n        } else if (i === 7) {\n            roman += \"v\".repeat(digit);\n\
    \        } else if (i === 8) {\n            roman += z(digit);\n            roman\
    \ += x(digit);\n        } else if (i === 9) {\n            roman += \"i\".repeat(digit);\n\
    \        }\n    };\n    for (let i = 0; i < digits.length; i++) {\n        add_digit(digits[i],\
    \ i);\n    }\n    return roman;\n}\n", "    const thousands = Math.floor(number\
    \ / 1000);\n    const hundreds = Math.floor((number % 1000) / 100);\n    const\
    \ tens = Math.floor((number % 100) / 10);\n    const ones = Math.floor(number\
    \ % 10);\n    const roman_ones = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"];\n    const roman_tens = [\"\", \"x\", \"\
    xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    const roman_hundreds\
    \ = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"\
    cm\"];\n    const roman_thousands = [\"\", \"m\", \"mm\", \"mmm\", \"mmmm\", \"\
    mmmmm\"];\n    return roman_thousands[thousands] + roman_hundreds[hundreds] +\
    \ roman_tens[tens] + roman_ones[ones];\n}", "  let roman: string = \"\";\n  const\
    \ romanNumerals: string[] = [\n    \"M\",\n    \"CM\",\n    \"D\",\n    \"CD\"\
    ,\n    \"C\",\n    \"XC\",\n    \"L\",\n    \"XL\",\n    \"X\",\n    \"IX\",\n\
    \    \"V\",\n    \"IV\",\n    \"I\"\n  ];\n  const numbers: number[] = [\n   \
    \ 1000,\n    900,\n    500,\n    400,\n    100,\n    90,\n    50,\n    40,\n \
    \   10,\n    9,\n    5,\n    4,\n    1\n  ];\n  if (number > 0 && number <= 1000)\
    \ {\n    for (let i = 0; i < numbers.length; i++) {\n      while (number >= numbers[i])\
    \ {\n        roman += romanNumerals[i];\n        number -= numbers[i];\n     \
    \ }\n    }\n  }\n  return roman.toLowerCase();\n}\n\nexport function getRandomInt(min:\
    \ number, max: number): number {\n  return Math.floor(Math.random() * (max - min\
    \ + 1)) + min;\n}\n\nexport function pickRandom<T>(array: T[]): T {\n  return\
    \ array[getRandomInt(0, array.length - 1)];\n}\n\nexport function shuffle<T>(array:\
    \ T[]): T[] {\n  const ret = [...array];\n  for (let i = ret.length - 1; i > 0;\
    \ i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [ret[i], ret[j]]\
    \ = [ret[j], ret[i]];\n  }\n  return ret;\n}\n\nexport function makePlural(input:\
    \ string, value: number): string {\n  if (value !== 1) {\n    if (input.slice(-1)\
    \ === \"y\") {\n      return input.slice(0, -1) + \"ies\";\n    } else {\n   \
    \   return input + \"s\";\n    }\n  } else {\n    return input;\n  }\n}\n\nexport\
    \ function makeOrdinal(", "    if (number < 1 || number > 1000) {\n        throw\
    \ new Error('Number must be between 1 and 1000.');\n    }\n    let result = \"\
    \";\n    let remainingNumber = number;\n    for (let i = 0; i < minis.length;\
    \ i++) {\n        if (remainingNumber >= minis[i].val) {\n            const count\
    \ = Math.floor(remainingNumber / minis[i].val);\n            remainingNumber =\
    \ remainingNumber % minis[i].val;\n            result += minis[i].letter.repeat(count);\n\
    \        }\n    }\n    return result;\n}\n", "    let romanLetters = [\"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\"];\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1];\n    let roman: string = \"\";\n    let i: number = 0;\n    while (number\
    \ > 0) {\n        if (number >= numbers[i]) {\n            number -= numbers[i];\n\
    \            roman += romanLetters[i];\n        } else {\n            i++;\n \
    \       }\n    }\n    return roman;\n}\n", "    let result = '';\n    let lookup:\
    \ { [key: number]: string; } = {\n        1000: 'm',\n        900: 'cm',\n   \
    \     500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n  \
    \      50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n     \
    \   5: 'v',\n        4: 'iv',\n        1: 'i'\n    };\n    for (let i in lookup)\
    \ {\n        while (number >= Number(i)) {\n            result += lookup[i];\n\
    \            number -= Number(i);\n        }\n    }\n    return result;\n}\n",
  "  // write your code here\n  if (number > 1000 || number < 1) {\n    return \"\"\
    ;\n  }\n  const roman_numerals = [\n    \"M\",\n    \"CM\",\n    \"D\",\n    \"\
    CD\",\n    \"C\",\n    \"XC\",\n    \"L\",\n    \"XL\",\n    \"X\",\n    \"IX\"\
    ,\n    \"V\",\n    \"IV\",\n    \"I\"\n  ];\n  const numbers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  let roman = \"\";\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (number === 0) {\n      break;\n    }\n\
    \    while (number >= numbers[i]) {\n      roman += roman_numerals[i];\n     \
    \ number -= numbers[i];\n    }\n  }\n  return roman.toLowerCase();\n}\n", "  let\
    \ result = \"\";\n  let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  let integers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  for (let index\
    \ = 0; index < integers.length; index++) {\n    while (number >= integers[index])\
    \ {\n      result += roman_numerals[index];\n      number -= integers[index];\n\
    \    }\n  }\n  return result;\n}\n", "  let result = \"\";\n  let romans = [\n\
    \    [\"i\", \"v\"],\n    [\"x\", \"l\"],\n    [\"c\", \"d\"],\n    [\"m\"]\n\
    \  ];\n  for (let power = 0; power < 4; power++) {\n    result = convert(number\
    \ % 10, romans[power]) + result;\n    number = Math.floor(number / 10);\n  }\n\
    \  return result;\n}\n", "    let digits: string[] = [];\n    for (let i = 3;\
    \ i >= 0; i--) {\n        let digit = Math.floor(number / Math.pow(10, i));\n\
    \        number -= digit * Math.pow(10, i);\n        if (digit > 0) {\n      \
    \      let tempRoman = \"\";\n            if (digit < 4) {\n                for\
    \ (let j = 0; j < digit; j++) {\n                    tempRoman += numeralMap[Math.pow(10,\
    \ i)];\n                }\n            } else if (digit === 4) {\n           \
    \     tempRoman = numeralMap[Math.pow(10, i)] + numeralMap[Math.pow(10, i) * 5];\n\
    \            } else if (digit === 5) {\n                tempRoman = numeralMap[Math.pow(10,\
    \ i) * 5];\n            } else if (digit < 9) {\n                tempRoman = numeralMap[Math.pow(10,\
    \ i) * 5];\n                for (let j = 0; j < digit - 5; j++) {\n          \
    \          tempRoman += numeralMap[Math.pow(10, i)];\n                }\n    \
    \        } else {\n                tempRoman = numeralMap[Math.pow(10, i)] + numeralMap[Math.pow(10,\
    \ i + 1)];\n            }\n            digits.push(tempRoman);\n        }\n  \
    \  }\n    return digits.join(\"\");\n}\n", "  let thousands: number = Math.floor(number\
    \ / 1000);\n  let hundreds: number = Math.floor((number - thousands * 1000) /\
    \ 100);\n  let tens: number = Math.floor((number - thousands * 1000 - hundreds\
    \ * 100) / 10);\n  let ones: number = number - thousands * 1000 - hundreds * 100\
    \ - tens * 10;\n  let romanString: string = \"\";\n  romanString += getRomanString(thousands,\
    \ 'm');\n  romanString += getRomanString(hundreds, 'c');\n  romanString += getRomanString(tens,\
    \ 'x');\n  romanString += getRomanString(ones, 'i');\n  return romanString;\n}",
  "    const roman: string[] = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\",\n    ];\n    const nums:\
    \ number[] = [\n        1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1,\n\
    \    ];\n    let roman_number: string = \"\";\n    for (let i: number = 0; i <\
    \ nums.length; i++) {\n        while (number >= nums[i]) {\n            roman_number\
    \ += roman[i];\n            number -= nums[i];\n        }\n    }\n    return roman_number;\n\
    }\n", "    let result = \"\";\n    const intToRoman = {\n        1: \"i\",\n \
    \       4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n\
    \        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"\
    c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n      \
    \  1000: \"m\"\n    };\n    const numbers = Object.keys(intToRoman).reverse();\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        while (number >= +numbers[i])\
    \ {\n            result += intToRoman[numbers[i]];\n            number -= +numbers[i];\n\
    \        }\n    }\n    return result;\n}\n", "    return \"\";\n}\n", "    //create\
    \ empty string to hold roman numeral\n    let result = \"\";\n    //split number\
    \ into an array of digits\n    let digits = number.toString().split(\"\");\n \
    \   //loop through array of digits (ones, tens, hundreds, thousands)\n    for\
    \ (let i = 0; i < digits.length; i++) {\n        //examine each digit\n      \
    \  if (digits[i] == \"1\") {\n            //add an \"i\" to result\n         \
    \   result += \"i\";\n        } else if (digits[i] == \"2\") {\n            //add\
    \ two \"i\"s to result\n            result += \"ii\";\n        } else if (digits[i]\
    \ == \"3\") {\n            //add three \"i\"s to result\n            result +=\
    \ \"iii\";\n        } else if (digits[i] == \"4\") {\n            //add an \"\
    i\" and a \"v\" to result\n            result += \"iv\";\n        } else if (digits[i]\
    \ == \"5\") {\n            //add a \"v\" to result\n            result += \"v\"\
    ;\n        } else if (digits[i] == \"6\") {\n            //add a \"v\" and an\
    \ \"i\" to result\n            result += \"vi\";\n        } else if (digits[i]\
    \ == \"7\") {\n            //add a \"v\" and two \"i\"s to result\n          \
    \  result += \"vii\";\n        } else if (digits[i] == \"8\") {\n            //add\
    \ a \"v\" and three \"i\"s to result\n            result += \"viii\";\n      \
    \  } else if (digits[i] == \"9\") {\n            //add an \"i\" and an \"x\" to\
    \ result\n            result += \"ix\";\n        }\n        //if examining tens\
    \ digit\n        if (i == 1) {\n            //add ten \"i\"s to result\n     \
    \       result += \"x\";\n        }\n        //if examining hundreds digit\n \
    \       if (i == 2) {\n            //add hundred \"i\"s to result\n          \
    \  result += \"c\";\n        }\n        //if examining thousands digit\n     \
    \   if (i == 3) {\n            //add thousand \"i\"s", "    return '';\n}\n",
  "    let result: string = \"\";\n    while (number > 0) {\n        if (number >\
    \ 1000) {\n            number -= 1000;\n            result += \"m\";\n       \
    \ } else if (number > 900) {\n            number -= 900;\n            result +=\
    \ \"cm\";\n        } else if (number > 500) {\n            number -= 500;\n  \
    \          result += \"d\";\n        } else if (number > 400) {\n            number\
    \ -= 400;\n            result += \"cd\";\n        } else if (number > 100) {\n\
    \            number -= 100;\n            result += \"c\";\n        } else if (number\
    \ > 90) {\n            number -= 90;\n            result += \"xc\";\n        }\
    \ else if (number > 50) {\n            number -= 50;\n            result += \"\
    l\";\n        } else if (number > 40) {\n            number -= 40;\n         \
    \   result += \"xl\";\n        } else if (number > 10) {\n            number -=\
    \ 10;\n            result += \"x\";\n        } else if (number > 9) {\n      \
    \      number -= 9;\n            result += \"ix\";\n        } else if (number\
    \ > 5) {\n            number -= 5;\n            result += \"v\";\n        } else\
    \ if (number > 4) {\n            number -= 4;\n            result += \"iv\";\n\
    \        } else if (number > 1) {\n            number -= 1;\n            result\
    \ += \"i\";\n        }\n    }\n    return result;\n}", "    if (number > 1000\
    \ || number < 1) {\n        return \"Input is invalid\";\n    }\n    let roman\
    \ = \"\";\n    while (number >= 1000) {\n        roman += \"m\";\n        number\
    \ -= 1000;\n    }\n    while (number >= 900) {\n        roman += \"cm\";\n   \
    \     number -= 900;\n    }\n    while (number >= 500) {\n        roman += \"\
    d\";\n        number -= 500;\n    }\n    while (number >= 400) {\n        roman\
    \ += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n   \
    \     roman += \"c\";\n        number -= 100;\n    }\n    while (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    while (number\
    \ >= 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    while (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  while (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n   \
    \ }\n    while (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n\
    \    }\n    while (number >= 4) {\n        roman += \"iv\";\n        number -=\
    \ 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;\n}\n", "    const lookup: Array<[number, string]>\
    \ = [\n        [1000, \"m\"],\n        [900, \"cm\"],\n        [500, \"d\"],\n\
    \        [400, \"cd\"],\n        [100, \"c\"],\n        [90, \"xc\"],\n      \
    \  [50, \"l\"],\n        [40, \"xl\"],\n        [10, \"x\"],\n        [9, \"ix\"\
    ],\n        [5, \"v\"],\n        [4, \"iv\"],\n        [1, \"i\"],\n    ];\n \
    \   let result = \"\";\n    for (const [value, numeral] of lookup) {\n       \
    \ while (number >= value) {\n            result += numeral;\n            number\
    \ -= value;\n        }\n    }\n    return result;\n}", "  let result = \"\";\n\
    \  const decs = [1000, 500, 100, 50, 10, 5, 1];\n  const romans = [\"m\", \"d\"\
    , \"c\", \"l\", \"x\", \"v\", \"i\"];\n  let start = 0;\n  let curr = \"\";\n\
    \  let prev;\n  while (number) {\n    prev = curr;\n    curr = number;\n    for\
    \ (let i = start; i < decs.length; i++) {\n      if (number >= decs[i]) {\n  \
    \      number -= decs[i];\n        result += romans[i];\n        start = i;\n\
    \        break;\n      }\n    }\n    if (curr === number) {\n      start++;\n\
    \    }\n  }\n  return result;\n}\n", "    let res = '';\n    let symbols = {\n\
    \        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n\
    \        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n \
    \       10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n      \
    \  1: 'i'\n    };\n    let arr = Object.keys(symbols).map(Number).sort((a, b)\
    \ => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        while (number\
    \ >= arr[i]) {\n            res += symbols[arr[i]];\n            number -= arr[i];\n\
    \        }\n    }\n    return res;\n}\n", "  let result = \"\";\n  let rem;\n\
    \  if (number > 0 && number <= 1000) {\n    while (number > 0) {\n      if (number\
    \ >= 1000) {\n        rem = Math.floor(number / 1000);\n        for (let i = 0;\
    \ i < rem; i++) {\n          result += \"m\";\n        }\n        number = number\
    \ % 1000;\n      } else if (number >= 500) {\n        if (number < 900) {\n  \
    \        rem = Math.floor(number / 500);\n          for (let i = 0; i < rem; i++)\
    \ {\n            result += \"d\";\n          }\n          number = number % 500;\n\
    \        } else {\n          result += \"cm\";\n          number = number % 100;\n\
    \        }\n      } else if (number >= 100) {\n        if (number < 400) {\n \
    \         rem = Math.floor(number / 100);\n          for (let i = 0; i < rem;\
    \ i++) {\n            result += \"c\";\n          }\n          number = number\
    \ % 100;\n        } else {\n          result += \"cd\";\n          number = number\
    \ % 100;\n        }\n      } else if (number >= 50) {\n        if (number < 90)\
    \ {\n          rem = Math.floor(number / 50);\n          for (let i = 0; i < rem;\
    \ i++) {\n            result += \"l\";\n          }\n          number = number\
    \ % 50;\n        } else {\n          result += \"xc\";\n          number = number\
    \ % 10;\n        }\n      } else if (number >= 10) {\n        if (number < 40)\
    \ {\n          rem = Math.floor(number / 10);\n          for (let i = 0; i < rem;\
    \ i++) {\n            result += \"x\";\n          }\n          number = number\
    \ % 10;\n        } else {\n          result += \"xl\";\n          number = number\
    \ % 10;\n        }\n      } else if (number >= 5) {\n        if (number < 9) {\n\
    \          rem = Math.floor(number / 5);\n          for (let i = 0; i < rem; i++)\
    \ {\n            result += \"v\";\n          }\n          number = number % 5;",
  "    const THOUSANDS = Math.floor(number / 1000);\n    number = number % 1000;\n\
    \    const FIVES_HUNDREDS = Math.floor(number / 500);\n    number = number % 500;\n\
    \    const HUNDREDS = Math.floor(number / 100);\n    number = number % 100;\n\
    \    const FIFTIES = Math.floor(number / 50);\n    number = number % 50;\n   \
    \ const TENS = Math.floor(number / 10);\n    number = number % 10;\n    const\
    \ FIVES = Math.floor(number / 5);\n    number = number % 5;\n    const ONES =\
    \ number;\n\n    const result = 'm'.repeat(THOUSANDS) + 'd'.repeat(FIVES_HUNDREDS)\
    \ + 'c'.repeat(HUNDREDS) + 'l'.repeat(FIFTIES) + 'x'.repeat(TENS) + 'v'.repeat(FIVES)\
    \ + 'i'.repeat(ONES);\n    return result;\n}\n", "    let result = \"\";\n   \
    \ if (number > 999 || number < 1) {\n        return \"\";\n    }\n    while (number\
    \ >= 1000) {\n        result += \"m\";\n        number -= 1000;\n    }\n    while\
    \ (number >= 500) {\n        result += \"d\";\n        number -= 500;\n    }\n\
    \    while (number >= 100) {\n        result += \"c\";\n        number -= 100;\n\
    \    }\n    while (number >= 50) {\n        result += \"l\";\n        number -=\
    \ 50;\n    }\n    while (number >= 10) {\n        result += \"x\";\n        number\
    \ -= 10;\n    }\n    while (number >= 5) {\n        result += \"v\";\n       \
    \ number -= 5;\n    }\n    while (number >= 1) {\n        result += \"i\";\n \
    \       number -= 1;\n    }\n    return result;\n}", "    let arab = [1, 4, 5,\
    \ 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    let roman = [\"i\", \"iv\"\
    , \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"\
    m\"];\n    let result = \"\";\n    while (number > 0) {\n        for (let i =\
    \ arab.length - 1; i >= 0; i--) {\n            while (number % arab[i] < number)\
    \ {\n                result += roman[i];\n                number -= arab[i];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let num = number;\n\
    \    const romanNumbers: [number, string][] = [\n        [1000, \"m\"],\n    \
    \    [900, \"cm\"],\n        [500, \"d\"],\n        [400, \"cd\"],\n        [100,\
    \ \"c\"],\n        [90, \"xc\"],\n        [50, \"l\"],\n        [40, \"xl\"],\n\
    \        [10, \"x\"],\n        [9, \"ix\"],\n        [5, \"v\"],\n        [4,\
    \ \"iv\"],\n        [1, \"i\"],\n    ];\n    let romanNumerals = \"\";\n    romanNumbers.forEach(([number,\
    \ roman]) => {\n        while (num >= number) {\n            romanNumerals +=\
    \ roman;\n            num -= number;\n        }\n    });\n    return romanNumerals;\n\
    }\n", "    if (number < 1 || number > 1000) {\n        throw new Error(\"Number\
    \ must be between 1 and 1000\");\n    }\n    const symbols = [\n        [\"m\"\
    , 1000],\n        [\"cm\", 900],\n        [\"d\", 500],\n        [\"cd\", 400],\n\
    \        [\"c\", 100],\n        [\"xc\", 90],\n        [\"l\", 50],\n        [\"\
    xl\", 40],\n        [\"x\", 10],\n        [\"ix\", 9],\n        [\"v\", 5],\n\
    \        [\"iv\", 4],\n        [\"i\", 1],\n    ];\n    let s = \"\";\n    for\
    \ (const [roman, num] of symbols) {\n        while (number >= num) {\n       \
    \     s += roman;\n            number -= num;\n        }\n    }\n    return s;\n\
    }\n", "    let str = '';\n    let lookup = { M: 1000, CM: 900, D: 500, CD: 400,\
    \ C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 };\n    for (var\
    \ i in lookup) {\n        while (number >= lookup[i]) {\n            str += i;\n\
    \            number -= lookup[i];\n        }\n    }\n    return str;\n}\n", " \
    \   let output = \"\";\n    let array = new Array(number);\n    for (let i = 0;\
    \ i < array.length; i++) {\n        if (number >= 1000) {\n            output\
    \ += \"m\";\n            number -= 1000;\n        } else if (number >= 900) {\n\
    \            output += \"cm\";\n            number -= 900;\n        } else if\
    \ (number >= 500) {\n            output += \"d\";\n            number -= 500;\n\
    \        } else if (number >= 400) {\n            output += \"cd\";\n        \
    \    number -= 400;\n        } else if (number >= 100) {\n            output +=\
    \ \"c\";\n            number -= 100;\n        } else if (number >= 90) {\n   \
    \         output += \"xc\";\n            number -= 90;\n        } else if (number\
    \ >= 50) {\n            output += \"l\";\n            number -= 50;\n        }\
    \ else if (number >= 40) {\n            output += \"xl\";\n            number\
    \ -= 40;\n        } else if (number >= 10) {\n            output += \"x\";\n \
    \           number -= 10;\n        } else if (number >= 9) {\n            output\
    \ += \"ix\";\n            number -= 9;\n        } else if (number >= 5) {\n  \
    \          output += \"v\";\n            number -= 5;\n        } else if (number\
    \ >= 4) {\n            output += \"iv\";\n            number -= 4;\n        }\
    \ else if (number >= 1) {\n            output += \"i\";\n            number -=\
    \ 1;\n        }\n    }\n    return output;\n}\n", "  // TODO\n  const romanDictionary\
    \ = {\n    1000: \"m\",\n    900: \"cm\",\n    500: \"d\",\n    400: \"cd\",\n\
    \    100: \"c\",\n    90: \"xc\",\n    50: \"l\",\n    40: \"xl\",\n    10: \"\
    x\",\n    9: \"ix\",\n    5: \"v\",\n    4: \"iv\",\n    1: \"i\"\n  };\n  let\
    \ result = \"\";\n  for (let i = 1; i <= 1000; i++) {\n    let roman = romanDictionary[i];\n\
    \    while (number >= i) {\n      result += roman;\n      number -= i;\n    }\n\
    \  }\n  return result;\n}\n", "  return \"\";\n}\n", "  let roman_numerals = ['i',\
    \ 'v', 'x', 'l', 'c', 'd', 'm'];\n  let output = '';\n  let place = 0;\n  while\
    \ (number > 0) {\n    let digits = number % 10;\n    let numeral = '';\n    if\
    \ (digits == 4) {\n      numeral = roman_numerals[place] + roman_numerals[place\
    \ + 1];\n    } else if (digits == 9) {\n      numeral = roman_numerals[place]\
    \ + roman_numerals[place + 2];\n    } else {\n      if (digits >= 5) {\n     \
    \   numeral = roman_numerals[place + 1];\n        digits -= 5;\n      }\n    \
    \  numeral += roman_numerals[place].repeat(digits);\n    }\n    output = numeral\
    \ + output;\n    number = Math.floor(number / 10);\n    place += 2;\n  }\n  return\
    \ output;\n}", "    let result: string = '';\n    for (let i = 0; i < number;\
    \ i++) {\n        result += 'i';\n    }\n    result = result.replace(/iiiii/g,\
    \ 'v');\n    result = result.replace(/iiii/g, 'iv');\n    result = result.replace(/vv/g,\
    \ 'x');\n    result = result.replace(/viv/g, 'ix');\n    result = result.replace(/xxxxx/g,\
    \ 'l');\n    result = result.replace(/xxxx/g, 'xl');\n    result = result.replace(/ll/g,\
    \ 'c');\n    result = result.replace(/lxl/g, 'xc');\n    result = result.replace(/ccccc/g,\
    \ 'd');\n    result = result.replace(/cccc/g, 'cd');\n    result = result.replace(/dd/g,\
    \ 'm');\n    result = result.replace(/dcd/g, 'cm');\n    return result;\n}\n",
  "    const roman_numeral_map = [\n        { decimal: 1000, roman: \"m\" },\n   \
    \     { decimal: 900, roman: \"cm\" },\n        { decimal: 500, roman: \"d\" },\n\
    \        { decimal: 400, roman: \"cd\" },\n        { decimal: 100, roman: \"c\"\
    \ },\n        { decimal: 90, roman: \"xc\" },\n        { decimal: 50, roman: \"\
    l\" },\n        { decimal: 40, roman: \"xl\" },\n        { decimal: 10, roman:\
    \ \"x\" },\n        { decimal: 9, roman: \"ix\" },\n        { decimal: 5, roman:\
    \ \"v\" },\n        { decimal: 4, roman: \"iv\" },\n        { decimal: 1, roman:\
    \ \"i\" },\n    ];\n\n    let result = \"\";\n    let num = number;\n\n    if\
    \ (num <= 0 || num > 1000) {\n        return result;\n    }\n\n    roman_numeral_map.forEach((roman_numeral)\
    \ => {\n        while (num >= roman_numeral.decimal) {\n            result +=\
    \ roman_numeral.roman;\n            num -= roman_numeral.decimal;\n        }\n\
    \    });\n\n    return result;\n}\n", "    const x = [\"x\", \"xx\", \"xxx\",\
    \ \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    const i = [\"i\", \"\
    ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n    let num\
    \ = number;\n    let result = \"\";\n    if (num <= 10) {\n        result = i[num\
    \ - 1];\n    } else {\n        if (num >= 10 && num < 100) {\n            result\
    \ = x[Math.floor(num / 10) - 1] + i[num % 10 - 1];\n        } else {\n       \
    \     result = x[9] + x[Math.floor((num % 100) / 10) - 1] + i[num % 10 - 1];\n\
    \        }\n    }\n    return result;\n}\n", "  const romanNumeral = {\n    M:\
    \ 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n \
    \   L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I:\
    \ 1\n  };\n  let result = \"\";\n  for (let i in romanNumeral) {\n    while (number\
    \ >= romanNumeral[i]) {\n      result += i;\n      number -= romanNumeral[i];\n\
    \    }\n  }\n  return result.toLowerCase();\n}\n", "    if (number > 1000 || number\
    \ < 1) {\n        throw new Error('Number must be between 1 and 1000.');\n   \
    \ }\n    const ints: number[] = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    const romanNumerals: string[] = ['m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    let result: string = '';\n    for\
    \ (let i = 0; i < ints.length; i++) {\n        while (number >= ints[i]) {\n \
    \           result += romanNumerals[i];\n            number -= ints[i];\n    \
    \    }\n    }\n    return result;\n}", "  const nums = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1];\n  const romans = [\n    \"m\",\n    \"cm\",\n\
    \    \"d\",\n    \"cd\",\n    \"c\",\n    \"xc\",\n    \"l\",\n    \"xl\",\n \
    \   \"x\",\n    \"ix\",\n    \"v\",\n    \"iv\",\n    \"i\"\n  ];\n  let res =\
    \ \"\";\n  for (let i = 0; i < nums.length; i++) {\n    while (number >= nums[i])\
    \ {\n      res += romans[i];\n      number -= nums[i];\n    }\n  }\n  return res;\n\
    }\n", "    let result = \"\";\n    let counter = 0;\n    let numerals = [\"m\"\
    , \"c\", \"x\", \"i\"];\n    let numbers = [1000, 100, 10, 1];\n    while (counter\
    \ < 4) {\n        let digit = Math.floor(number / numbers[counter]);\n       \
    \ if (digit === 4) {\n            result += numerals[counter] + numerals[counter\
    \ - 1];\n        } else if (digit === 9) {\n            result += numerals[counter]\
    \ + numerals[counter - 2];\n        } else {\n            if (digit >= 5) {\n\
    \                result += numerals[counter - 1];\n                digit -= 5;\n\
    \            }\n            result += numerals[counter].repeat(digit);\n     \
    \   }\n        number %= numbers[counter];\n        counter++;\n    }\n    return\
    \ result;\n}\n", "  // Code here\n  const romanNumerals = [\n    [1000, \"m\"\
    ],\n    [900, \"cm\"],\n    [500, \"d\"],\n    [400, \"cd\"],\n    [100, \"c\"\
    ],\n    [90, \"xc\"],\n    [50, \"l\"],\n    [40, \"xl\"],\n    [10, \"x\"],\n\
    \    [9, \"ix\"],\n    [5, \"v\"],\n    [4, \"iv\"],\n    [1, \"i\"],\n  ];\n\
    \  let arabic = number;\n  let result = \"\";\n  for (let i = 0; i < romanNumerals.length;\
    \ i++) {\n    const romanNumeral = romanNumerals[i];\n    const romanValue = romanNumeral[0];\n\
    \    const romanLetter = romanNumeral[1];\n    while (arabic >= romanValue) {\n\
    \      result += romanLetter;\n      arabic -= romanValue;\n    }\n  }\n  return\
    \ result;\n}\n", "  if (number <= 0 || number > 1000) {\n    throw new Error('The\
    \ number must be between 1 and 1000');\n  }\n  // TODO\n  let ret = '';\n  for\
    \ (let i = 9; i >= 0; i--) {\n    let mini = (Math.pow(10, i) / 2).toFixed(0);\n\
    \    if (mini === '1') {\n      mini = '';\n    }\n    if (number >= 5 * Math.pow(10,\
    \ i)) {\n      ret += 'v' + mini.repeat(5);\n      number -= 5 * Math.pow(10,\
    \ i);\n    } else if (number >= 4 * Math.pow(10, i)) {\n      ret += 'iv' + mini.repeat(4);\n\
    \      number -= 4 * Math.pow(10, i);\n    } else if (number >= Math.pow(10, i))\
    \ {\n      ret += mini.repeat(1);\n      number -= Math.pow(10, i);\n    }\n \
    \ }\n  return ret;\n}\n", "  const mini_roman_map = [\n    [\"i\", \"v\"],\n \
    \   [\"x\", \"l\"],\n    [\"c\", \"d\"],\n    [\"m\", \"v\"]\n  ];\n  let mini_roman_string\
    \ = \"\";\n  let i = 0;\n  while (number > 0) {\n    mini_roman_string = mini_roman_helper(\n\
    \      number % 10,\n      mini_roman_map[i][0],\n      mini_roman_map[i][1]\n\
    \    ) + mini_roman_string;\n    number = Math.floor(number / 10);\n    i++;\n\
    \  }\n  return mini_roman_string;\n}\n", "    const thousand = \"m\";\n    const\
    \ hundred = \"c\";\n    const ten = \"x\";\n    const one = \"i\";\n    const\
    \ lower_than_9 = [\n        one,\n        ten,\n        hundred,\n        thousand\n\
    \    ];\n    const from_5_to_9 = [\n        \"v\",\n        \"l\",\n        \"\
    d\"\n    ];\n    const from_4_to_9 = [\n        \"iv\",\n        \"ix\",\n   \
    \     \"xl\",\n        \"xc\",\n        \"cd\",\n        \"cm\"\n    ];\n    let\
    \ result = \"\";\n    let numberArr = number.toString().split(\"\").reverse();\n\
    \    let place = 0;\n    numberArr.forEach(num => {\n        let numAsInt = parseInt(num);\n\
    \        if (numAsInt >= 1 && numAsInt <= 3) {\n            let romanArr = [];\n\
    \            for (let i = 0; i < numAsInt; i++) {\n                romanArr.push(lower_than_9[place]);\n\
    \            }\n            result = romanArr.reverse().join(\"\") + result;\n\
    \        } else if (numAsInt === 4) {\n            result = from_4_to_9[place]\
    \ + result;\n        } else if (numAsInt === 5) {\n            result = from_5_to_9[place]\
    \ + result;\n        } else if (numAsInt >= 6 && numAsInt <= 8) {\n          \
    \  let romanArr = [];\n            for (let i = 0; i < numAsInt - 5; i++) {\n\
    \                romanArr.push(lower_than_9[place]);\n            }\n        \
    \    result = from_5_to_9[place] + romanArr.reverse().join(\"\") + result;\n \
    \       } else if (numAsInt === 9) {\n            result = from_4_to_9[place +\
    \ 1] + result;\n        }\n        place++;\n    });\n    return result;\n}",
  "  let result = \"\";\n  const romans = [\n    {\n      value: 1000,\n      key:\
    \ \"m\",\n    },\n    {\n      value: 900,\n      key: \"cm\",\n    },\n    {\n\
    \      value: 500,\n      key: \"d\",\n    },\n    {\n      value: 400,\n    \
    \  key: \"cd\",\n    },\n    {\n      value: 100,\n      key: \"c\",\n    },\n\
    \    {\n      value: 90,\n      key: \"xc\",\n    },\n    {\n      value: 50,\n\
    \      key: \"l\",\n    },\n    {\n      value: 40,\n      key: \"xl\",\n    },\n\
    \    {\n      value: 10,\n      key: \"x\",\n    },\n    {\n      value: 9,\n\
    \      key: \"ix\",\n    },\n    {\n      value: 5,\n      key: \"v\",\n    },\n\
    \    {\n      value: 4,\n      key: \"iv\",\n    },\n    {\n      value: 1,\n\
    \      key: \"i\",\n    },\n  ];\n  if (number === 0) {\n    return \"\";\n  }\n\
    \  for (let i = 0; i < romans.length; i++) {\n    while (number >= romans[i].value)\
    \ {\n      result += romans[i].key;\n      number -= romans[i].value;\n    }\n\
    \  }\n  return result;\n}\n", "  const roman = {\n    1: \"i\",\n    4: \"iv\"\
    ,\n    5: \"v\",\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\",\n    50: \"\
    l\",\n    90: \"xc\",\n    100: \"c\",\n    400: \"cd\",\n    500: \"d\",\n  \
    \  900: \"cm\",\n    1000: \"m\"\n  };\n  let string = \"\";\n  let n: number;\n\
    \  for (let key in roman) {\n    n = Number(key);\n    while (number >= n) {\n\
    \      string += roman[key];\n      number -= n;\n    }\n  }\n  return string;\n\
    }\n", "    const result: string[] = [];\n    let remainder: number = number;\n\
    \    while (remainder > 0) {\n        const resultOfDivision = findRemainder(remainder);\n\
    \        remainder = resultOfDivision.remainder;\n        result.push(resultOfDivision.match);\n\
    \    }\n    return result.join('');\n}\n", "    if (number > 1000 || number <\
    \ 1)\n        throw \"You can only convert numbers from 1 to 1000\";\n    const\
    \ VALUES = [\n        [1000, \"m\"],\n        [900, \"cm\"],\n        [500, \"\
    d\"],\n        [400, \"cd\"],\n        [100, \"c\"],\n        [90, \"xc\"],\n\
    \        [50, \"l\"],\n        [40, \"xl\"],\n        [10, \"x\"],\n        [9,\
    \ \"ix\"],\n        [5, \"v\"],\n        [4, \"iv\"],\n        [1, \"i\"],\n \
    \   ];\n    let miniRoman = \"\";\n    for (let i = 0; i < VALUES.length; i++)\
    \ {\n        const [value, roman] = VALUES[i];\n        while (number >= value)\
    \ {\n            miniRoman += roman;\n            number -= value;\n        }\n\
    \    }\n    return miniRoman;\n}\n", "  let result = \"\";\n  const numeral_dict\
    \ = {\n    M: 1000,\n    D: 500,\n    C: 100,\n    L: 50,\n    X: 10,\n    V:\
    \ 5,\n    I: 1\n  };\n  const units = Object.keys(numeral_dict);\n  let current_unit\
    \ = 0;\n  while (number > 0) {\n    let power = Math.floor(number / numeral_dict[units[current_unit]]);\n\
    \    number -= power * numeral_dict[units[current_unit]];\n    if (power === 9)\
    \ {\n      result += units[current_unit] + units[current_unit - 2];\n    } else\
    \ if (power >= 5) {\n      result += units[current_unit - 1];\n      for (let\
    \ j = 0; j < power - 5; j++) {\n        result += units[current_unit];\n     \
    \ }\n    } else if (power === 4) {\n      result += units[current_unit] + units[current_unit\
    \ - 1];\n    } else {\n      for (let j = 0; j < power; j++) {\n        result\
    \ += units[current_unit];\n      }\n    }\n    current_unit += 2;\n  }\n  return\
    \ result;\n}\n", "  if (number < 1 || number > 1000) return \"\";\n  let result\
    \ = \"\";\n  while (number > 0) {\n    if (number >= 1000) {\n      result +=\
    \ \"m\";\n      number -= 1000;\n    } else if (number >= 900) {\n      result\
    \ += \"cm\";\n      number -= 900;\n    } else if (number >= 500) {\n      result\
    \ += \"d\";\n      number -= 500;\n    } else if (number >= 400) {\n      result\
    \ += \"cd\";\n      number -= 400;\n    } else if (number >= 100) {\n      result\
    \ += \"c\";\n      number -= 100;\n    } else if (number >= 90) {\n      result\
    \ += \"xc\";\n      number -= 90;\n    } else if (number >= 50) {\n      result\
    \ += \"l\";\n      number -= 50;\n    } else if (number >= 40) {\n      result\
    \ += \"xl\";\n      number -= 40;\n    } else if (number >= 10) {\n      result\
    \ += \"x\";\n      number -= 10;\n    } else if (number >= 9) {\n      result\
    \ += \"ix\";\n      number -= 9;\n    } else if (number >= 5) {\n      result\
    \ += \"v\";\n      number -= 5;\n    } else if (number >= 4) {\n      result +=\
    \ \"iv\";\n      number -= 4;\n    } else if (number >= 1) {\n      result +=\
    \ \"i\";\n      number -= 1;\n    }\n  }\n  return result;\n}\n\nconsole.log(int_to_mini_roman(19));\n\
    console.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));", " \
    \ // Your code here\n  let str = \"\";\n  while (number > 0) {\n    if (number\
    \ >= 900) {\n      str += \"cm\";\n      number -= 900;\n    } else if (number\
    \ >= 500) {\n      str += \"d\";\n      number -= 500;\n    } else if (number\
    \ >= 400) {\n      str += \"cd\";\n      number -= 400;\n    } else if (number\
    \ >= 100) {\n      str += \"c\";\n      number -= 100;\n    } else if (number\
    \ >= 90) {\n      str += \"xc\";\n      number -= 90;\n    } else if (number >=\
    \ 50) {\n      str += \"l\";\n      number -= 50;\n    } else if (number >= 40)\
    \ {\n      str += \"xl\";\n      number -= 40;\n    } else if (number >= 10) {\n\
    \      str += \"x\";\n      number -= 10;\n    } else if (number >= 9) {\n   \
    \   str += \"ix\";\n      number -= 9;\n    } else if (number >= 5) {\n      str\
    \ += \"v\";\n      number -= 5;\n    } else if (number >= 4) {\n      str += \"\
    iv\";\n      number -= 4;\n    } else if (number >= 1) {\n      str += \"i\";\n\
    \      number -= 1;\n    }\n  }\n  return str;\n}\n", "  const romanNumerals =\
    \ [\"m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\"];\n  const arabic = [1000,\
    \ 500, 100, 50, 10, 5, 1];\n  let roman = \"\";\n  for (let i = 0; i < arabic.length;\
    \ i++) {\n    while (number >= arabic[i]) {\n      roman += romanNumerals[i];\n\
    \      number -= arabic[i];\n    }\n  }\n  return roman;\n}\n", "    // List of\
    \ roman characters in descending order\n    let romans = ['m', 'd', 'c', 'l',\
    \ 'x', 'v', 'i'];\n    // Array of roman numbers\n    let nums = [1, 5, 10, 50,\
    \ 100, 500, 1000];\n    // Number of times each roman character should be repeated\n\
    \    let repeats = [];\n    // Indices of roman number that should be repeated\n\
    \    let indices = [];\n    let result = '';\n    // Allocate the result in an\
    \ array\n    for (let i = 0; i < 7; i++) {\n        repeats.push(Math.floor(number\
    \ / nums[i]));\n        number %= nums[i];\n    }\n    // Find the indices of\
    \ roman characters that should be repeated\n    for (let i = 0; i < repeats.length;\
    \ i++) {\n        if (repeats[i] === 4) {\n            indices.push(i);\n    \
    \    }\n    }\n    // Build the result string\n    for (let i = 0; i < 7; i++)\
    \ {\n        if (indices.indexOf(i) !== -1) {\n            if (i === 0) {\n  \
    \              result += romans[i] + romans[i + 1];\n            } else if (i\
    \ === 4) {\n                result += romans[i] + romans[i + 1];\n           \
    \ } else {\n                result += romans[i + 1] + romans[i - 1];\n       \
    \     }\n        } else {\n            for (let j = 0; j < repeats[i]; j++) {\n\
    \                result += romans[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    if (number > 1000 || number < 1) {\n        throw new Error(\"\
    invalid input\");\n    }\n    var symbols = [\"i\", \"v\", \"x\", \"l\", \"c\"\
    , \"d\", \"m\"];\n    var str = \"\";\n    var digit = 0;\n    var sym = 0;\n\
    \    while (number > 0) {\n        digit = number % 10;\n        number = Math.floor(number\
    \ / 10);\n        switch (digit) {\n            case 1:\n            case 2:\n\
    \            case 3:\n                for (var i = 0; i < digit; i++) {\n    \
    \                str = symbols[sym] + str;\n                }\n              \
    \  break;\n            case 4:\n                str = symbols[sym] + symbols[sym\
    \ + 1] + str;\n                break;\n            case 5:\n                str\
    \ = symbols[sym + 1] + str;\n                break;\n            case 6:\n   \
    \         case 7:\n            case 8:\n                for (var i = 0; i < digit\
    \ - 5; i++) {\n                    str = symbols[sym] + str;\n               \
    \ }\n                str = symbols[sym + 1] + str;\n                break;\n \
    \           case 9:\n                str = symbols[sym] + symbols[sym + 2] + str;\n\
    \                break;\n        }\n        sym += 2;\n    }\n    return str;\n\
    }\n", "  let roman = \"\";\n  let numberCopy = number;\n  while (numberCopy >\
    \ 0) {\n    if (numberCopy >= 1000) {\n      roman += \"m\";\n      numberCopy\
    \ -= 1000;\n    } else if (numberCopy >= 900) {\n      roman += \"cm\";\n    \
    \  numberCopy -= 900;\n    } else if (numberCopy >= 500) {\n      roman += \"\
    d\";\n      numberCopy -= 500;\n    } else if (numberCopy >= 400) {\n      roman\
    \ += \"cd\";\n      numberCopy -= 400;\n    } else if (numberCopy >= 100) {\n\
    \      roman += \"c\";\n      numberCopy -= 100;\n    } else if (numberCopy >=\
    \ 90) {\n      roman += \"xc\";\n      numberCopy -= 90;\n    } else if (numberCopy\
    \ >= 50) {\n      roman += \"l\";\n      numberCopy -= 50;\n    } else if (numberCopy\
    \ >= 40) {\n      roman += \"xl\";\n      numberCopy -= 40;\n    } else if (numberCopy\
    \ >= 10) {\n      roman += \"x\";\n      numberCopy -= 10;\n    } else if (numberCopy\
    \ >= 9) {\n      roman += \"ix\";\n      numberCopy -= 9;\n    } else if (numberCopy\
    \ >= 5) {\n      roman += \"v\";\n      numberCopy -= 5;\n    } else if (numberCopy\
    \ >= 4) {\n      roman += \"iv\";\n      numberCopy -= 4;\n    } else if (numberCopy\
    \ >= 1) {\n      roman += \"i\";\n      numberCopy -= 1;\n    }\n  }\n  return\
    \ roman;\n}\n", "    if (number < 1 || number > 1000) {\n        throw Error('Number\
    \ out of bounds');\n    }\n    const numbers = [1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1];\n    const numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    let numeral = '';\n    let numberCopy\
    \ = number;\n    while (numberCopy > 0) {\n        for (let i = 0; i < numbers.length;\
    \ i++) {\n            if (numberCopy >= numbers[i]) {\n                numeral\
    \ += numerals[i];\n                numberCopy -= numbers[i];\n               \
    \ break;\n            }\n        }\n    }\n    return numeral;\n}\n", "  let remain\
    \ = number;\n  let result = \"\";\n  while (remain > 0) {\n    if (remain >= 1000)\
    \ {\n      result += \"m\";\n      remain -= 1000;\n    } else if (remain >= 900)\
    \ {\n      result += \"cm\";\n      remain -= 900;\n    } else if (remain >= 500)\
    \ {\n      result += \"d\";\n      remain -= 500;\n    } else if (remain >= 400)\
    \ {\n      result += \"cd\";\n      remain -= 400;\n    } else if (remain >= 100)\
    \ {\n      result += \"c\";\n      remain -= 100;\n    } else if (remain >= 90)\
    \ {\n      result += \"xc\";\n      remain -= 90;\n    } else if (remain >= 50)\
    \ {\n      result += \"l\";\n      remain -= 50;\n    } else if (remain >= 40)\
    \ {\n      result += \"xl\";\n      remain -= 40;\n    } else if (remain >= 10)\
    \ {\n      result += \"x\";\n      remain -= 10;\n    } else if (remain >= 9)\
    \ {\n      result += \"ix\";\n      remain -= 9;\n    } else if (remain >= 5)\
    \ {\n      result += \"v\";\n      remain -= 5;\n    } else if (remain >= 4) {\n\
    \      result += \"iv\";\n      remain -= 4;\n    } else if (remain >= 1) {\n\
    \      result += \"i\";\n      remain -= 1;\n    }\n  }\n  return result;\n}\n\
    \nconsole.log(int_to_mini_roman(19)); // xix\nconsole.log(int_to_mini_roman(152));\
    \ // clii\nconsole.log(int_to_mini_roman(426)); // cdxxvi", "    const roman:\
    \ string[] = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    const digits: number[] =\
    \ []\n    while (number > 0) {\n        const digit = number % 10\n        number\
    \ = Math.floor(number / 10)\n        digits.push(digit)\n    }\n    let result:\
    \ string = ''\n    digits.forEach((digit, index) => {\n        const base = Math.pow(10,\
    \ index)\n        const unit = roman[index * 2]\n        const five = roman[index\
    \ * 2 + 1]\n        const ten = roman[index * 2 + 2]\n        if (digit === 1)\
    \ {\n            result = unit + result\n        } else if (digit === 2) {\n \
    \           result = unit + unit + result\n        } else if (digit === 3) {\n\
    \            result = unit + unit + unit + result\n        } else if (digit ===\
    \ 4) {\n            result = unit + five + result\n        } else if (digit ===\
    \ 5) {\n            result = five + result\n        } else if (digit === 6) {\n\
    \            result = five + unit + result\n        } else if (digit === 7) {\n\
    \            result = five + unit + unit + result\n        } else if (digit ===\
    \ 8) {\n            result = five + unit + unit + unit + result\n        } else\
    \ if (digit === 9) {\n            result = unit + ten + result\n        }\n  \
    \  })\n    return result\n}\nconsole.log(int_to_mini_roman(1000))\n", "  const\
    \ roman = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n\
    \    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n   \
    \ IV: 4,\n    I: 1\n  };\n  const arr = Object.keys(roman);\n  let i = 0;\n  let\
    \ res = \"\";\n  while (number > 0) {\n    if (number - roman[arr[i]] >= 0) {\n\
    \      res += arr[i];\n      number -= roman[arr[i]];\n    } else {\n      i++;\n\
    \    }\n  }\n  return res;\n}\nconsole.log(int_to_mini_roman(152));\n", "    //write\
    \ your code here\n    let result: string = \"\";\n    let mini_roman: string[]\
    \ = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"];\n    let num: number[]\
    \ = [1, 5, 10, 50, 100, 500, 1000];\n    let num_str: string[] = [\"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\"];\n    let times: number;\n    let i: number;\n\
    \    for (i = 0; i < 7; i++) {\n        times = Math.floor(number / num[i]);\n\
    \        if (times == 0) {\n            continue;\n        }\n        if (times\
    \ > 0 && times < 4) {\n            num_str[i] = mini_roman[i].repeat(times);\n\
    \        }\n        if (times == 4) {\n            num_str[i] = mini_roman[i]\
    \ + mini_roman[i + 1];\n        }\n        if (times > 4 && times < 9) {\n   \
    \         num_str[i] = mini_roman[i + 1] + mini_roman[i].repeat(times - 5);\n\
    \        }\n        if (times == 9) {\n            num_str[i] = mini_roman[i]\
    \ + mini_roman[i + 2];\n        }\n        number = number % num[i];\n    }\n\
    \    result = num_str[6] + num_str[5] + num_str[4] + num_str[3] + num_str[2] +\
    \ num_str[1] + num_str[0];\n    return result;\n}\n", "    let roman = \"\";\n\
    \    let digits = 0;\n    while (number > 0) {\n        digits = number % 10;\n\
    \        switch (digits) {\n            case 0:\n                break;\n    \
    \        case 1:\n                roman = \"i\" + roman;\n                break;\n\
    \            case 2:\n                roman = \"ii\" + roman;\n              \
    \  break;\n            case 3:\n                roman = \"iii\" + roman;\n   \
    \             break;\n            case 4:\n                roman = \"iv\" + roman;\n\
    \                break;\n            case 5:\n                roman = \"v\" +\
    \ roman;\n                break;\n            case 6:\n                roman =\
    \ \"vi\" + roman;\n                break;\n            case 7:\n             \
    \   roman = \"vii\" + roman;\n                break;\n            case 8:\n  \
    \              roman = \"viii\" + roman;\n                break;\n           \
    \ case 9:\n                roman = \"ix\" + roman;\n                break;\n \
    \       }\n        number = number / 10;\n    }\n    return roman;\n}", "    let\
    \ result = '';\n    const divisors = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    const romanNumbers = [\n        'm',\n        'cm',\n    \
    \    'd',\n        'cd',\n        'c',\n        'xc',\n        'l',\n        'xl',\n\
    \        'x',\n        'ix',\n        'v',\n        'iv',\n        'i',\n    ];\n\
    \    let i = 0;\n    while (number > 0) {\n        if (number >= divisors[i])\
    \ {\n            result += romanNumbers[i];\n            number -= divisors[i];\n\
    \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n",
  "  let result = \"\";\n  let romanNumerals = {\n    1: \"i\",\n    5: \"v\",\n \
    \   10: \"x\",\n    50: \"l\",\n    100: \"c\",\n    500: \"d\",\n    1000: \"\
    m\"\n  };\n  if (number > 1000) {\n    throw new Error(\"The number must be less\
    \ than 1001\");\n  }\n  let arr = number.toString().split(\"\");\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] === \"0\") {\n      result += \"\
    \";\n    } else if (arr[i] === \"1\") {\n      result += romanNumerals[1 * Math.pow(10,\
    \ arr.length - i - 1)];\n    } else if (arr[i] === \"2\") {\n      result += romanNumerals[1\
    \ * Math.pow(10, arr.length - i - 1)];\n      result += romanNumerals[1 * Math.pow(10,\
    \ arr.length - i - 1)];\n    } else if (arr[i] === \"3\") {\n      result += romanNumerals[1\
    \ * Math.pow(10, arr.length - i - 1)];\n      result += romanNumerals[1 * Math.pow(10,\
    \ arr.length - i - 1)];\n      result += romanNumerals[1 * Math.pow(10, arr.length\
    \ - i - 1)];\n    } else if (arr[i] === \"4\") {\n      result += romanNumerals[1\
    \ * Math.pow(10, arr.length - i - 1)];\n      result += romanNumerals[5 * Math.pow(10,\
    \ arr.length - i - 1)];\n    } else if (arr[i] === \"5\") {\n      result += romanNumerals[5\
    \ * Math.pow(10, arr.length - i - 1)];\n    } else if (arr[i] === \"6\") {\n \
    \     result += romanNumerals[5 * Math.pow(10, arr.length - i", "    let answer:\
    \ string = \"\";\n    if (number < 1 || number > 1000) {\n        return \"Invalid\
    \ number\";\n    }\n    for (let i = 0; i < number / 1000; i++) {\n        answer\
    \ += \"m\";\n    }\n    number %= 1000;\n    if (number >= 900) {\n        answer\
    \ += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n      \
    \  answer += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n\
    \        answer += \"cd\";\n        number -= 400;\n    }\n    for (let i = 0;\
    \ i < number / 100; i++) {\n        answer += \"c\";\n    }\n    number %= 100;\n\
    \    if (number >= 90) {\n        answer += \"xc\";\n        number -= 90;\n \
    \   }\n    if (number >= 50) {\n        answer += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        answer += \"xl\";\n        number -=\
    \ 40;\n    }\n    for (let i = 0; i < number / 10; i++) {\n        answer += \"\
    x\";\n    }\n    number %= 10;\n    if (number >= 9) {\n        answer += \"ix\"\
    ;\n        number -= 9;\n    }\n    if (number >= 5) {\n        answer += \"v\"\
    ;\n        number -= 5;\n    }\n    if (number >= 4) {\n        answer += \"iv\"\
    ;\n        number -= 4;\n    }\n    for (let i = 0; i < number; i++) {\n     \
    \   answer += \"i\";\n    }\n    return answer;\n}", "  let str: string = '';\n\
    \  let base: number = 1;\n  const digits: number[] = [];\n  while (number >= base)\
    \ {\n    const digit: number = Math.floor(number / base) % 10;\n    digits.push(digit);\n\
    \    base *= 10;\n  }\n  base /= 10;\n  digits.forEach((digit: number, i: number)\
    \ => {\n    if (digit === 4) {\n      str += getDigit(digit, base);\n    } else\
    \ if (digit >= 5) {\n      str += getDigit(5, base);\n      for (let j = 5; j\
    \ < digit; j++) {\n        str += getDigit(1, base);\n      }\n    } else {\n\
    \      for (let j = 0; j < digit; j++) {\n        str += getDigit(1, base);\n\
    \      }\n    }\n    base /= 10;\n  });\n  return str;\n}\n", "  let result =\
    \ \"\";\n  const decimal = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n\
    \  const roman = [\n    \"i\",\n    \"iv\",\n    \"v\",\n    \"ix\",\n    \"x\"\
    ,\n    \"xl\",\n    \"l\",\n    \"xc\",\n    \"c\",\n    \"cd\",\n    \"d\",\n\
    \    \"cm\",\n    \"m\"\n  ];\n  let i = 12;\n  while (number > 0) {\n    const\
    \ div = Math.floor(number / decimal[i]);\n    number %= decimal[i];\n    while\
    \ (div > 0) {\n      result += roman[i];\n      div--;\n    }\n    i--;\n  }\n\
    \  return result;\n}\n", "    let result = '';\n    const numeralTable = [\n \
    \       { num: 1000, sym: 'm' },\n        { num: 900, sym: 'cm' },\n        {\
    \ num: 500, sym: 'd' },\n        { num: 400, sym: 'cd' },\n        { num: 100,\
    \ sym: 'c' },\n        { num: 90, sym: 'xc' },\n        { num: 50, sym: 'l' },\n\
    \        { num: 40, sym: 'xl' },\n        { num: 10, sym: 'x' },\n        { num:\
    \ 9, sym: 'ix' },\n        { num: 5, sym: 'v' },\n        { num: 4, sym: 'iv'\
    \ },\n        { num: 1, sym: 'i' },\n    ];\n    for (let i = 0; i < numeralTable.length;\
    \ i++) {\n        if (number >= numeralTable[i].num) {\n            result +=\
    \ numeralTable[i].sym;\n            number -= numeralTable[i].num;\n         \
    \   i = -1;\n        }\n    }\n    return result;\n}", "    let result = '';\n\
    \    const int_to_roman_dict = {\n        'M': 1000,\n        'CM': 900,\n   \
    \     'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n  \
    \      'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n     \
    \   'V': 5,\n        'IV': 4,\n        'I': 1\n    };\n    for (let i in int_to_roman_dict)\
    \ {\n        while (number >= int_to_roman_dict[i]) {\n            result += i;\n\
    \            number -= int_to_roman_dict[i];\n        }\n    }\n    return result;\n\
    }\n", "    const ROMAN_DIGITS = {\n        0: \"\",\n        1: \"i\",\n     \
    \   2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n \
    \       6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\"\
    ,\n    };\n    let romanDigits = [];\n    for (let i = 0; i < number.toString().length;\
    \ i++) {\n        romanDigits.push(ROMAN_DIGITS[parseInt(number.toString()[i])]);\n\
    \    }\n    let miniRoman = \"\";\n    for (let i = 0; i < romanDigits.length;\
    \ i++) {\n        miniRoman = romanDigits[i] + miniRoman;\n    }\n    return miniRoman;\n\
    }\n", "  if (number < 1 || number > 1000) {\n    throw new Error(\"Number is out\
    \ of bounds\");\n  }\n  let result = \"\";\n  let thousands = Math.floor(number\
    \ / 1000);\n  if (thousands > 0) {\n    result += \"m\".repeat(thousands);\n \
    \ }\n  let hundreds = Math.floor((number % 1000) / 100);\n  if (hundreds === 9)\
    \ {\n    result += \"cm\";\n  } else if (hundreds === 4) {\n    result += \"cd\"\
    ;\n  } else {\n    if (hundreds >= 5) {\n      result += \"d\";\n    }\n    if\
    \ (hundreds % 5 > 0) {\n      result += \"c\".repeat(hundreds % 5);\n    }\n \
    \ }\n  let tens = Math.floor((number % 100) / 10);\n  if (tens === 9) {\n    result\
    \ += \"xc\";\n  } else if (tens === 4) {\n    result += \"xl\";\n  } else {\n\
    \    if (tens >= 5) {\n      result += \"l\";\n    }\n    if (tens % 5 > 0) {\n\
    \      result += \"x\".repeat(tens % 5);\n    }\n  }\n  let units = number % 10;\n\
    \  if (units === 9) {\n    result += \"ix\";\n  } else if (units === 4) {\n  \
    \  result += \"iv\";\n  } else {\n    if (units >= 5) {\n      result += \"v\"\
    ;\n    }\n    if (units % 5 > 0) {\n      result += \"i\".repeat(units % 5);\n\
    \    }\n  }\n  return result;\n}\n", "  const romanNumbers = ['i', 'v', 'x', 'l',\
    \ 'c', 'd', 'm'];\n  let romanNumber = '';\n  let romanNumberCount = 0;\n  while\
    \ (number !== 0) {\n    const numberMod10 = number % 10;\n    if (numberMod10\
    \ === 4) {\n      romanNumber = `${romanNumbers[romanNumberCount]}${romanNumbers[romanNumberCount\
    \ + 1]}${romanNumber}`;\n    } else if (numberMod10 === 9) {\n      romanNumber\
    \ = `${romanNumbers[romanNumberCount]}${romanNumbers[romanNumberCount + 2]}${romanNumber}`;\n\
    \    } else {\n      let roman = '';\n      for (let i = 0; i < numberMod10; i++)\
    \ {\n        roman += romanNumbers[romanNumberCount];\n      }\n      if (numberMod10\
    \ > 4) {\n        roman = `${romanNumbers[romanNumberCount + 1]}${roman}`;\n \
    \     }\n      romanNumber = `${roman}${romanNumber}`;\n    }\n    number = Math.floor(number\
    \ / 10);\n    romanNumberCount += 2;\n  }\n  return romanNumber;\n}\n", "    let\
    \ numeral: string = '';\n    while (number >= 100) {\n        numeral += 'c';\n\
    \        number -= 100;\n    }\n    while (number >= 90) {\n        numeral +=\
    \ 'xc';\n        number -= 90;\n    }\n    while (number >= 50) {\n        numeral\
    \ += 'l';\n        number -= 50;\n    }\n    while (number >= 40) {\n        numeral\
    \ += 'xl';\n        number -= 40;\n    }\n    while (number >= 10) {\n       \
    \ numeral += 'x';\n        number -= 10;\n    }\n    while (number >= 9) {\n \
    \       numeral += 'ix';\n        number -= 9;\n    }\n    while (number >= 5)\
    \ {\n        numeral += 'v';\n        number -= 5;\n    }\n    while (number >=\
    \ 4) {\n        numeral += 'iv';\n        number -= 4;\n    }\n    while (number\
    \ >= 1) {\n        numeral += 'i';\n        number -= 1;\n    }\n    return numeral;\n\
    }\n", "    let numerals = [\n        [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\"],\n        [\"\", \"x\", \"xx\", \"xxx\"\
    , \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"],\n        [\"\", \"c\", \"\
    cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"],\n        [\"\
    \", \"m\", \"mm\", \"mmm\", \"m(v)\", \"v\", \"v(m)\", \"v(m)m\", \"v(m)mm\",\
    \ \"m(x)\"],\n    ];\n    let result = \"\";\n    for (let i = 0; i < 4; i++)\
    \ {\n        result = numerals[i][number % 10] + result;\n        number = number\
    \ / 10;\n    }\n    return result;\n}\n", "    if (number < 1 || number > 1000)\
    \ {\n        throw new Error(\"Number must be in the range 1 to 1000.\");\n  \
    \  }\n    const mini_roman_numerals = {\n        1: \"i\",\n        5: \"v\",\n\
    \        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"\
    d\",\n        1000: \"m\",\n    };\n    let out: string = \"\";\n    let n = number;\n\
    \    while (n > 0) {\n        let unit: number = 1;\n        while (n % 10 > 0)\
    \ {\n            unit *= 10;\n            n -= 1;\n        }\n        if (n <\
    \ 0) {\n            unit /= 10;\n            n += 1;\n        }\n        const\
    \ s = n / unit;\n        if (s === 4) {\n            out += mini_roman_numerals[unit]\
    \ + mini_roman_numerals[5 * unit];\n        } else if (s === 9) {\n          \
    \  out += mini_roman_numerals[unit] + mini_roman_numerals[10 * unit];\n      \
    \  } else if (s < 4) {\n            out += mini_roman_numerals[unit].repeat(s);\n\
    \        } else if (s >= 5 && s < 9) {\n            out += mini_roman_numerals[5\
    \ * unit] + mini_roman_numerals[unit].repeat(s - 5);\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return out;\n}", "    const roman_numerals = {\n        1:\
    \ \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10:\
    \ \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n     \
    \   100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\"\
    ,\n        1000: \"m\"\n    };\n    let mini_roman = \"\";\n    while (number\
    \ > 0) {\n        let num_of_digits = Math.floor(Math.log10(number)) + 1;\n  \
    \      let divisor = Math.pow(10, num_of_digits - 1);\n        let quotient =\
    \ Math.floor(number / divisor);\n        if (quotient === 4 || quotient === 9)\
    \ {\n            num_of_digits--;\n            divisor = Math.pow(10, num_of_digits\
    \ - 1);\n            quotient = Math.floor(number / divisor);\n        }\n   \
    \     mini_roman += roman_numerals[quotient * divisor];\n        number -= quotient\
    \ * divisor;\n    }\n    return mini_roman;\n}\n", "    // TODO: implement\n \
    \   return \"\";\n}\n", "    let decimalValue = [1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1];\n    let romanNumeral = ['m', 'cm', 'd', 'cd', 'c',\
    \ 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    let romanized = '';\n    for\
    \ (let index = 0; index < decimalValue.length; index++) {\n        while (decimalValue[index]\
    \ <= number) {\n            romanized += romanNumeral[index];\n            number\
    \ -= decimalValue[index];\n        }\n    }\n    return romanized;\n}\n", "  \
    \  return 'Not implemented';\n}\n", "    if(number <= 0 || number > 1000) {\n\
    \        throw \"Number out of range.\";\n    }\n    const numerals = [\"i\",\
    \ \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"];\n    let romanNumeral = \"\";\n \
    \   let placeValue = 0;\n    let placeNumeral = \"\";\n    for(let i = number;\
    \ i > 0; i = Math.floor(i / 10)) {\n        placeNumeral = \"\";\n        placeValue\
    \ = i % 10;\n        if(placeValue >= 1 && placeValue <= 3) {\n            placeNumeral\
    \ = numerals[placeValue - 1].repeat(placeValue);\n        } else if(placeValue\
    \ === 4) {\n            placeNumeral = numerals[placeValue - 1] + numerals[placeValue];\n\
    \        } else if(placeValue >= 5 && placeValue <= 8) {\n            placeNumeral\
    \ = numerals[placeValue] + numerals[placeValue - 1].repeat(placeValue - 5);\n\
    \        } else if(placeValue === 9) {\n            placeNumeral = numerals[placeValue\
    \ - 1] + numerals[placeValue + 1];\n        }\n        romanNumeral = placeNumeral\
    \ + romanNumeral;\n    }\n    return romanNumeral;\n}\n", "    let result = \"\
    \";\n    for (let i = 0; i < number; i++) {\n        let roman;\n        if (i\
    \ % 10 == 1) {\n            roman = \"i\";\n        } else if (i % 10 == 2) {\n\
    \            roman = \"ii\";\n        } else if (i % 10 == 3) {\n            roman\
    \ = \"iii\";\n        } else if (i % 10 == 4) {\n            roman = \"iv\";\n\
    \        } else if (i % 10 == 5) {\n            roman = \"v\";\n        } else\
    \ if (i % 10 == 6) {\n            roman = \"vi\";\n        } else if (i % 10 ==\
    \ 7) {\n            roman = \"vii\";\n        } else if (i % 10 == 8) {\n    \
    \        roman = \"viii\";\n        } else if (i % 10 == 9) {\n            roman\
    \ = \"ix\";\n        } else {\n            roman = \"\";\n        }\n        if\
    \ (i % 100 == 10) {\n            roman = \"x\";\n        } else if (i % 100 ==\
    \ 20) {\n            roman = \"xx\";\n        } else if (i % 100 == 30) {\n  \
    \          roman = \"xxx\";\n        } else if (i % 100 == 40) {\n           \
    \ roman = \"xl\";\n        } else if (i % 100 == 50) {\n            roman = \"\
    l\";\n        } else if (i % 100 == 60) {\n            roman = \"lx\";\n     \
    \   } else if (i % 100 == 70) {\n            roman = \"lxx\";\n        } else\
    \ if (i % 100 == 80) {\n            roman = \"lxxx\";\n        } else if (i %\
    \ 100 == 90) {\n            roman = \"xc\";\n        } else {\n            roman\
    \ = \"\";\n        }\n        if (i % 1000 == 100) {\n            roman = \"c\"\
    ;\n        } else if (i % 1000 == 200) {\n            roman = \"cc\";\n      \
    \  } else if (i % 1000 == 300) {\n            roman = \"ccc\";\n        } else\
    \ if (i % 1000 == 400", "    // YOUR CODE HERE\n    throw new Error(\"Method not\
    \ implemented.\");\n}\n", "  const ints = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n  const nums = [\n    \"m\",\n    \"cm\",\n    \"d\",\n  \
    \  \"cd\",\n    \"c\",\n    \"xc\",\n    \"l\",\n    \"xl\",\n    \"x\",\n   \
    \ \"ix\",\n    \"v\",\n    \"iv\",\n    \"i\"\n  ];\n  let res = \"\";\n  for\
    \ (let i = 0; i < ints.length; i++) {\n    while (number >= ints[i]) {\n     \
    \ res += nums[i];\n      number -= ints[i];\n    }\n  }\n  return res;\n}\n\n\
    export { int_to_mini_roman };", "    //return 'zxcv';\n    let romans: string[]\
    \ = [\"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"\
    ];\n    let numerals: string[] = [\"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\"\
    , \"lxx\", \"lxxx\", \"xc\"];\n    let hundreds: string[] = [\"c\", \"cc\", \"\
    ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n    let thousands:\
    \ string[] = [\"m\", \"mm\", \"mmm\"];\n    let result: string = \"\";\n    let\
    \ div: number = 0;\n    let mod: number = 0;\n    while (number > 0) {\n     \
    \   if (number > 999) {\n            div = Math.floor(number / 1000);\n      \
    \      number %= 1000;\n            result += thousands[div - 1];\n        } else\
    \ if (number > 99) {\n            div = Math.floor(number / 100);\n          \
    \  number %= 100;\n            result += hundreds[div - 1];\n        } else if\
    \ (number > 9) {\n            div = Math.floor(number / 10);\n            number\
    \ %= 10;\n            result += numerals[div - 1];\n        } else {\n       \
    \     result += romans[number - 1];\n            number -= number;\n        }\n\
    \    }\n    return result;\n}", "    const DIGIT_MAP: { [key: number]: string\
    \ } = {\n        0: \"\",\n        1: \"i\",\n        2: \"ii\",\n        3: \"\
    iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7:\
    \ \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n    };\n    const TENS_MAP:\
    \ { [key: number]: string } = {\n        0: \"\",\n        1: \"x\",\n       \
    \ 2: \"xx\",\n        3: \"xxx\",\n        4: \"xl\",\n        5: \"l\",\n   \
    \     6: \"lx\",\n        7: \"lxx\",\n        8: \"lxxx\",\n        9: \"xc\"\
    ,\n    };\n    const HUNDREDS_MAP: { [key: number]: string } = {\n        0: \"\
    \",\n        1: \"c\",\n        2: \"cc\",\n        3: \"ccc\",\n        4: \"\
    cd\",\n        5: \"d\",\n        6: \"dc\",\n        7: \"dcc\",\n        8:\
    \ \"dccc\",\n        9: \"cm\",\n    };\n    const THOUSANDS_MAP: { [key: number]:\
    \ string } = {\n        0: \"\",\n        1: \"m\",\n        2: \"mm\",\n    \
    \    3: \"mmm\",\n    };\n    return (\n        THOUSANDS_MAP[Math.floor(number\
    \ / 1000)] +\n        HUNDREDS_MAP[Math.floor((number % 1000) / 100)] +\n    \
    \    TENS_MAP[Math.floor((number % 100) / 10)] +\n        DIGIT_MAP[Math.floor(number\
    \ % 10)]\n    );\n}\n", "    return \"\";\n}\n\n", "    let result = \"\";\n \
    \   while (number > 0) {\n        if (number >= 1000) {\n            result +=\
    \ \"m\";\n            number -= 1000;\n        } else if (number >= 900) {\n \
    \           result += \"cm\";\n            number -= 900;\n        } else if (number\
    \ >= 500) {\n            result += \"d\";\n            number -= 500;\n      \
    \  } else if (number >= 400) {\n            result += \"cd\";\n            number\
    \ -= 400;\n        } else if (number >= 100) {\n            result += \"c\";\n\
    \            number -= 100;\n        } else if (number >= 90) {\n            result\
    \ += \"xc\";\n            number -= 90;\n        } else if (number >= 50) {\n\
    \            result += \"l\";\n            number -= 50;\n        } else if (number\
    \ >= 40) {\n            result += \"xl\";\n            number -= 40;\n       \
    \ } else if (number >= 10) {\n            result += \"x\";\n            number\
    \ -= 10;\n        } else if (number >= 9) {\n            result += \"ix\";\n \
    \           number -= 9;\n        } else if (number >= 5) {\n            result\
    \ += \"v\";\n            number -= 5;\n        } else if (number >= 4) {\n   \
    \         result += \"iv\";\n            number -= 4;\n        } else if (number\
    \ >= 1) {\n            result += \"i\";\n            number -= 1;\n        }\n\
    \    }\n    return result;\n}\n\nexport { int_to_mini_roman };", "    return '';\n\
    }\n", "    let str: string = \"\";\n    let digit1: number = Math.floor(number\
    \ / 100);\n    str += \"c\".repeat(digit1);\n    let digit2: number = Math.floor((number\
    \ % 100) / 10);\n    if (digit2 === 9) {\n        str += \"xc\";\n    } else if\
    \ (digit2 === 4) {\n        str += \"xl\";\n    } else {\n        str += \"l\"\
    .repeat(Math.floor(digit2 / 5));\n        str += \"x\".repeat(digit2 % 5);\n \
    \   }\n    let digit3: number = number % 10;\n    if (digit3 === 9) {\n      \
    \  str += \"ix\";\n    } else if (digit3 === 4) {\n        str += \"iv\";\n  \
    \  } else {\n        str += \"v\".repeat(Math.floor(digit3 / 5));\n        str\
    \ += \"i\".repeat(digit3 % 5);\n    }\n    return str;\n}", "  let result = '';\n\
    \  let remainder: number;\n  if (number > 0 && number <= 1000) {\n    while (number\
    \ > 0) {\n      if (number >= 900) {\n        result += 'cm';\n        number\
    \ -= 900;\n      } else if (number >= 500) {\n        result += 'd';\n       \
    \ number -= 500;\n      } else if (number >= 400) {\n        result += 'cd';\n\
    \        number -= 400;\n      } else if (number >= 100) {\n        result +=\
    \ 'c';\n        number -= 100;\n      } else if (number >= 90) {\n        result\
    \ += 'xc';\n        number -= 90;\n      } else if (number >= 50) {\n        result\
    \ += 'l';\n        number -= 50;\n      } else if (number >= 40) {\n        result\
    \ += 'xl';\n        number -= 40;\n      } else if (number >= 10) {\n        result\
    \ += 'x';\n        number -= 10;\n      } else if (number >= 9) {\n        result\
    \ += 'ix';\n        number -= 9;\n      } else if (number >= 5) {\n        result\
    \ += 'v';\n        number -= 5;\n      } else if (number >= 4) {\n        result\
    \ += 'iv';\n        number -= 4;\n      } else if (number >= 1) {\n        result\
    \ += 'i';\n        number -= 1;\n      }\n    }\n  }\n  return result;\n}\n",
  "    if (number > 1000 || number < 1) {\n        throw new Error('Invalid range');\n\
    \    }\n    const miniRomanNumerals = {\n        1: 'i',\n        4: 'iv',\n \
    \       5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n     \
    \   50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n     \
    \   500: 'd',\n        900: 'cm',\n        1000: 'm',\n    };\n    const keys\
    \ = Object.keys(miniRomanNumerals);\n    let result = '';\n    for (let i = keys.length\
    \ - 1; i >= 0; i--) {\n        const key = Number(keys[i]);\n        while (number\
    \ >= key) {\n            result += miniRomanNumerals[key];\n            number\
    \ -= key;\n        }\n    }\n    return result;\n}\n\nexport { int_to_mini_roman\
    \ };", "  return int_to_roman(number).toLowerCase();\n}", "    const NUMS = [\n\
    \        [1000, 'm'],\n        [900, 'cm'],\n        [500, 'd'],\n        [400,\
    \ 'cd'],\n        [100, 'c'],\n        [90, 'xc'],\n        [50, 'l'],\n     \
    \   [40, 'xl'],\n        [10, 'x'],\n        [9, 'ix'],\n        [5, 'v'],\n \
    \       [4, 'iv'],\n        [1, 'i'],\n    ];\n    let result = '';\n    for (let\
    \ i = 0; i < NUMS.length; i++) {\n        while (number >= NUMS[i][0]) {\n   \
    \         result += NUMS[i][1];\n            number -= NUMS[i][0];\n        }\n\
    \    }\n    return result;\n}\n", "    return int_to_roman(number).toLowerCase();\n\
    }\n", "  const ROMAN_NUMERALS = {\n    1: \"i\",\n    4: \"iv\",\n    5: \"v\"\
    ,\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\",\n    50: \"l\",\n    90: \"\
    xc\",\n    100: \"c\",\n    400: \"cd\",\n    500: \"d\",\n    900: \"cm\",\n\
    \    1000: \"m\"\n  };\n  let romanNumeral = \"\";\n  const NUMBERS = Object.keys(ROMAN_NUMERALS);\n\
    \  for (let i = NUMBERS.length - 1; i >= 0; i--) {\n    let curr = Number(NUMBERS[i]);\n\
    \    while (number >= curr) {\n      romanNumeral += ROMAN_NUMERALS[curr];\n \
    \     number -= curr;\n    }\n  }\n  return romanNumeral;\n}\n\nconsole.log(int_to_mini_roman(19));\n\
    console.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));", " \
    \ if (number <= 0 || number > 1000) {\n    throw \"number must be between 1 and\
    \ 1000\";\n  }\n  let result = \"\";\n  const mini_romans = {\n    1: \"i\",\n\
    \    4: \"iv\",\n    5: \"v\",\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\"\
    ,\n    50: \"l\",\n    90: \"xc\",\n    100: \"c\",\n    400: \"cd\",\n    500:\
    \ \"d\",\n    900: \"cm\",\n    1000: \"m\"\n  };\n  Object.keys(mini_romans)\n\
    \    .reverse()\n    .forEach(key => {\n      while (number >= parseInt(key))\
    \ {\n        result += mini_romans[key];\n        number -= parseInt(key);\n \
    \     }\n    });\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
