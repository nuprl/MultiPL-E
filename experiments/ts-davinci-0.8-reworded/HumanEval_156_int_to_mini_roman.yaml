name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["    let num = number;\n    let roman = \"\";\n    let romanNumerals\
    \ = [\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\"\
    , \"d\", \"cm\", \"m\"];\n    let values = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400,\
    \ 500, 900, 1000];\n    while (num > 0) {\n        for (let i = values.length\
    \ - 1; i >= 0; i--) {\n            if (num >= values[i]) {\n                roman\
    \ += romanNumerals[i];\n                num -= values[i];\n                break;\n\
    \            }\n        }\n    }\n    return roman;\n}\n", "    if (number < 1\
    \ || number > 1000) {\n        throw new Error(\"Input out of range\");\n    }\n\
    \    let str = \"\";\n    for (let i = 0; i < Math.floor(number / 100); i++) {\n\
    \        str += \"c\";\n    }\n    number %= 100;\n    if (number >= 90) {\n \
    \       str += \"xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n\
    \        str += \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n\
    \        str += \"xl\";\n        number -= 40;\n    }\n    for (let i = 0; i <\
    \ Math.floor(number / 10); i++) {\n        str += \"x\";\n    }\n    number %=\
    \ 10;\n    if (number >= 9) {\n        str += \"ix\";\n        number -= 9;\n\
    \    }\n    if (number >= 5) {\n        str += \"v\";\n        number -= 5;\n\
    \    }\n    if (number >= 4) {\n        str += \"iv\";\n        number -= 4;\n\
    \    }\n    for (let i = 0; i < number; i++) {\n        str += \"i\";\n    }\n\
    \    return str;\n}\n", "    let result: string = \"\";\n    let roman: string[]\
    \ = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"];\n    let i: number = number / 100;\n    number = number % 100;\n    let\
    \ x: number = number / 10;\n    number = number % 10;\n    let c: number = number;\n\
    \    for (let i: number = 0; i < i; i++) {\n        result += \"c\";\n    }\n\
    \    result += roman[x];\n    result += roman[c];\n    return result;\n}\nconsole.log(int_to_mini_roman(6));\n\
    console.log(int_to_mini_roman(19));\nconsole.log(int_to_mini_roman(152));\nconsole.log(int_to_mini_roman(426));\n",
  "    let result: string = \"\";\n    const length: number = number.toString().length;\n\
    \    const numArr: string[] = number.toString().split(\"\");\n    for (let i:\
    \ number = 0; i < length; i++) {\n        switch (numArr[i]) {\n            case\
    \ \"1\":\n                result += \"i\";\n                break;\n         \
    \   case \"2\":\n                result += \"ii\";\n                break;\n \
    \           case \"3\":\n                result += \"iii\";\n                break;\n\
    \            case \"4\":\n                result += \"iv\";\n                break;\n\
    \            case \"5\":\n                result += \"v\";\n                break;\n\
    \            case \"6\":\n                result += \"vi\";\n                break;\n\
    \            case \"7\":\n                result += \"vii\";\n               \
    \ break;\n            case \"8\":\n                result += \"viii\";\n     \
    \           break;\n            case \"9\":\n                result += \"ix\"\
    ;\n                break;\n            default:\n                break;\n    \
    \    }\n        if (numArr[i] != \"0\") {\n            switch (length - i) {\n\
    \                case 4:\n                    result += \"m\";\n             \
    \       break;\n                case 3:\n                    result += \"c\";\n\
    \                    break;\n                case 2:\n                    result\
    \ += \"x\";\n                    break;\n                default:\n          \
    \          break;\n            }\n        }\n    }\n    return result;\n}\n",
  "    let result: string = \"\";\n    const numbers: [number, string][] = [\n   \
    \     [900, \"cm\"],\n        [500, \"d\"],\n        [400, \"cd\"],\n        [100,\
    \ \"c\"],\n        [90, \"xc\"],\n        [50, \"l\"],\n        [40, \"xl\"],\n\
    \        [10, \"x\"],\n        [9, \"ix\"],\n        [5, \"v\"],\n        [4,\
    \ \"iv\"],\n        [1, \"i\"],\n    ];\n    for (const [num, letter] of numbers)\
    \ {\n        while (number >= num) {\n            result += letter;\n        \
    \    number -= num;\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = '';\n    let M = Math.floor(number / 1000);\n    let CD = Math.floor((number\
    \ % 1000) / 400);\n    let C = Math.floor((number % 400) / 100);\n    let XC =\
    \ Math.floor((number % 100) / 40);\n    let X = Math.floor((number % 40) / 10);\n\
    \    let IX = Math.floor((number % 10) / 9);\n    let V = Math.floor((number %\
    \ 9) / 5);\n    let IV = Math.floor((number % 5) / 4);\n    let I = Math.floor(number\
    \ % 4);\n    if (M > 0) result += 'm'.repeat(M);\n    if (CD > 0) result += 'cd';\n\
    \    if (C > 0) result += 'c'.repeat(C);\n    if (XC > 0) result += 'xc';\n  \
    \  if (X > 0) result += 'x'.repeat(X);\n    if (IX > 0) result += 'ix';\n    if\
    \ (V > 0) result += 'v'.repeat(V);\n    if (IV > 0) result += 'iv';\n    if (I\
    \ > 0) result += 'i'.repeat(I);\n    return result;\n}", "    let output = \"\"\
    ;\n    let quotient = 0;\n    let remainder = 0;\n    let counter = 0;\n    let\
    \ arabics = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let romans\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"];\n    do {\n        quotient = Math.floor(number / arabics[counter]);\n\
    \        remainder = number % arabics[counter];\n        for (let i = 0; i < quotient;\
    \ i++) {\n            output += romans[counter];\n        }\n        number =\
    \ remainder;\n        counter++;\n    } while (number > 0);\n    return output;\n\
    }\n", "  if (number < 1 || number > 1000) throw new Error(\"Number must be between\
    \ 1 and 1000 inclusive.\");\n  const converter = new RomanNumeralConverter(number);\n\
    \  return converter.convert();\n}\n", "  if (number > 1000 || number < 1) return\
    \ undefined;\n  const table = [\n    [1000, \"m\"],\n    [900, \"cm\"],\n    [500,\
    \ \"d\"],\n    [400, \"cd\"],\n    [100, \"c\"],\n    [90, \"xc\"],\n    [50,\
    \ \"l\"],\n    [40, \"xl\"],\n    [10, \"x\"],\n    [9, \"ix\"],\n    [5, \"v\"\
    ],\n    [4, \"iv\"],\n    [1, \"i\"],\n  ];\n  let result = \"\";\n  for (let\
    \ i = 0; i < table.length; i++) {\n    const [val, roman] = table[i];\n    const\
    \ times = Math.floor(number / val);\n    result += roman.repeat(times);\n    number\
    \ -= val * times;\n  }\n  return result;\n}\n", "    const roman: { [key: number]:\
    \ string } = {\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n   \
    \     50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"m\"\
    ,\n    };\n    if (number === 0) {\n        return \"\";\n    } else if (number\
    \ <= 3) {\n        return roman[1].repeat(number);\n    } else if (number ===\
    \ 4) {\n        return roman[1] + roman[5];\n    } else if (number === 5) {\n\
    \        return roman[5];\n    } else if (number <= 8) {\n        return roman[5]\
    \ + roman[1].repeat(number - 5);\n    } else if (number === 9) {\n        return\
    \ roman[1] + roman[10];\n    } else if (number <= 39) {\n        return roman[10].repeat(Math.floor(number\
    \ / 10)) + int_to_mini_roman(number % 10);\n    } else if (number <= 49) {\n \
    \       return roman[10] + roman[50] + int_to_mini_roman(number % 10);\n    }\
    \ else if (number <= 89) {\n        return roman[50] + roman[10].repeat(Math.floor((number\
    \ - 50) / 10)) + int_to_mini_roman(number % 10);\n    } else if (number <= 99)\
    \ {\n        return roman[10] + roman[100] + int_to_mini_roman(number % 10);\n\
    \    } else if (number <= 399) {\n        return roman[100].repeat(Math.floor(number\
    \ / 100)) + int_to_mini_roman(number % 100);\n    } else if (number <= 499) {\n\
    \        return roman[100] + roman[500] + int_to_mini_roman(number % 100);\n \
    \   } else if (number <= 899) {\n        return roman[500] + roman[100].repeat(Math.floor((number\
    \ - 500) / 100)) + int_to_mini_roman(number % 100);\n    } else if (", "    let\
    \ numerals = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n    ];\n    let values = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let result = \"\";\n    let\
    \ index = 0;\n    while (number > 0) {\n        if (number >= values[index]) {\n\
    \            result += numerals[index];\n            number -= values[index];\n\
    \        } else {\n            index++;\n        }\n    }\n    return result;\n\
    }\n", "    const romanNumbers: any = {\n        1: 'i',\n        2: 'ii',\n  \
    \      3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n      \
    \  7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n       \
    \ 20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'l',\n       \
    \ 60: 'lx',\n        70: 'lxx',\n        80: 'lxxx',\n        90: 'xc',\n    \
    \    100: 'c',\n        200: 'cc',\n        300: 'ccc',\n        400: 'cd',\n\
    \        500: 'd',\n        600: 'dc',\n        700: 'dcc',\n        800: 'dccc',\n\
    \        900: 'cm',\n        1000: 'm',\n    };\n    return String(number)\n \
    \       .split('')\n        .reverse()\n        .map((digit, index) => romanNumbers[digit\
    \ * Math.pow(10, index)])\n        .reverse()\n        .join('');\n}\n", "   \
    \ let num: string = \"\";\n    let numArr: number[] = [];\n    let miniromanArr:\
    \ string[] = [];\n    let miniroman: string = \"\";\n    num = number.toString();\n\
    \    //console.log(num);\n    for (let i: number = 0; i < num.length; i++) {\n\
    \        numArr.push(parseInt(num.charAt(i)));\n    }\n    //console.log(numArr);\n\
    \    for (let i: number = 0; i < numArr.length; i++) {\n        if (numArr[i]\
    \ === 0) {\n            miniromanArr.push(\"\");\n        } else if (numArr[i]\
    \ === 1) {\n            miniromanArr.push(\"i\");\n        } else if (numArr[i]\
    \ === 2) {\n            miniromanArr.push(\"ii\");\n        } else if (numArr[i]\
    \ === 3) {\n            miniromanArr.push(\"iii\");\n        } else if (numArr[i]\
    \ === 4) {\n            miniromanArr.push(\"iv\");\n        } else if (numArr[i]\
    \ === 5) {\n            miniromanArr.push(\"v\");\n        } else if (numArr[i]\
    \ === 6) {\n            miniromanArr.push(\"vi\");\n        } else if (numArr[i]\
    \ === 7) {\n            miniromanArr.push(\"vii\");\n        } else if (numArr[i]\
    \ === 8) {\n            miniromanArr.push(\"viii\");\n        } else if (numArr[i]\
    \ === 9) {\n            miniromanArr.push(\"ix\");\n        }\n    }\n    //console.log(miniromanArr);\n\
    \    for (let i: number = 0; i < miniromanArr.length; i++) {\n        if (miniromanArr.length\
    \ === 4) {\n            miniroman = miniromanArr[3] + miniromanArr[2] + miniromanArr[1]\
    \ + miniromanArr", "  let roman = '';\n  const numerals = [\n    [1000, 'm'],\n\
    \    [900, 'cm'],\n    [500, 'd'],\n    [400, 'cd'],\n    [100, 'c'],\n    [90,\
    \ 'xc'],\n    [50, 'l'],\n    [40, 'xl'],\n    [10, 'x'],\n    [9, 'ix'],\n  \
    \  [5, 'v'],\n    [4, 'iv'],\n    [1, 'i'],\n  ];\n  while (number) {\n    for\
    \ (let i = 0; i < numerals.length; i++) {\n      if (number >= numerals[i][0])\
    \ {\n        roman += numerals[i][1];\n        number -= numerals[i][0];\n   \
    \     break;\n      }\n    }\n  }\n  return roman;\n}\n", "  const stringified\
    \ = number.toString();\n  let result = '';\n  for (let i = 0; i < stringified.length;\
    \ i++) {\n    const digit = parseInt(stringified[i]);\n    const base = 10 **\
    \ (stringified.length - i - 1);\n    if (digit === 0) {\n      continue;\n   \
    \ } else if (digit < 4) {\n      result += MINI_ROMAN_NUMERALS[base].repeat(digit);\n\
    \    } else if (digit === 4) {\n      result += MINI_ROMAN_NUMERALS[base] + MINI_ROMAN_NUMERALS[base\
    \ * 5];\n    } else if (digit < 9) {\n      result += MINI_ROMAN_NUMERALS[base\
    \ * 5] + MINI_ROMAN_NUMERALS[base].repeat(digit - 5);\n    } else {\n      result\
    \ += MINI_ROMAN_NUMERALS[base] + MINI_ROMAN_NUMERALS[base * 10];\n    }\n  }\n\
    \  return result;\n}\n", "    let roman_numeral: string = '';\n    let roman_numerals:\
    \ string[] = ['i', 'v', 'x', 'l', 'c', 'd', 'm'];\n    let roman_numerals_units:\
    \ string[] = ['x', 'l', 'c', 'd', 'm'];\n    let roman_numerals_tens: string[]\
    \ = ['i', 'v', 'x', 'l', 'c'];\n    let roman_numerals_hundreds: string[] = ['i',\
    \ 'v', 'x'];\n    let roman_numerals_thousands: string[] = ['i', 'v'];\n    let\
    \ roman_numerals_ten_thousands: string[] = ['i'];\n    let value_units: number\
    \ = number % 10;\n    let value_tens: number = Math.floor(number / 10) % 10;\n\
    \    let value_hundreds: number = Math.floor(number / 100) % 10;\n    let value_thousands:\
    \ number = Math.floor(number / 1000) % 10;\n    let value_ten_thousands: number\
    \ = Math.floor(number / 10000) % 10;\n    let units: string = '', tens: string\
    \ = '', hundreds: string = '', thousands: string = '', ten_thousands: string =\
    \ '';\n    if (value_units < 4) {\n        for (let i = 0; i < value_units; i++)\
    \ {\n            units += roman_numerals_units[0];\n        }\n    } else if (value_units\
    \ == 4) {\n        units = roman_numerals_units[0] + roman_numerals_units[1];\n\
    \    } else if (value_units == 5) {\n        units = roman_numerals_units[1];\n\
    \    } else if (value_units > 5 && value_units < 9) {\n        units = roman_numerals_units[1];\n\
    \        for (let i = 0; i < value_units - 5; i++) {\n            units += roman_numerals_units[0];\n\
    \        }\n    } else if (value_", "    let roman = \"\";\n    let romanNumList\
    \ = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\",\n \
    \       \"x\", \"ix\", \"v\", \"iv\", \"i\",\n    ];\n    let decimalNumList =\
    \ [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i = 0;\
    \ i < decimalNumList.length; i++) {\n        while (number % decimalNumList[i]\
    \ < number) {\n            roman += romanNumList[i];\n            number -= decimalNumList[i];\n\
    \        }\n    }\n    return roman;\n}\n", "    const roman_numeral_lookup =\
    \ {\n        \"M\": 1000,\n        \"CM\": 900,\n        \"D\": 500,\n       \
    \ \"CD\": 400,\n        \"C\": 100,\n        \"XC\": 90,\n        \"L\": 50,\n\
    \        \"XL\": 40,\n        \"X\": 10,\n        \"IX\": 9,\n        \"V\": 5,\n\
    \        \"IV\": 4,\n        \"I\": 1\n    };\n    let roman_numeral_list = Object.keys(roman_numeral_lookup);\n\
    \    let result = \"\";\n    if (number < 1 || number > 1000) {\n        throw\
    \ new Error(\"Number is out of range.\");\n    }\n    for (let i = 0; i < roman_numeral_list.length;\
    \ i++) {\n        while (number >= roman_numeral_lookup[roman_numeral_list[i]])\
    \ {\n            result += roman_numeral_list[i];\n            number -= roman_numeral_lookup[roman_numeral_list[i]];\n\
    \        }\n    }\n    return result;\n}\n", "    let roman: string = '';\n  \
    \  if (number >= 100) {\n        const hundreds: number = Math.floor(number /\
    \ 100);\n        if (hundreds < 4) {\n            for (let i: number = 0; i <\
    \ hundreds; i++) {\n                roman += 'c';\n            }\n        } else\
    \ if (hundreds == 4) {\n            roman += 'cd';\n        } else if (hundreds\
    \ > 4 && hundreds < 9) {\n            roman += 'd';\n            for (let i: number\
    \ = 0; i < hundreds - 5; i++) {\n                roman += 'c';\n            }\n\
    \        } else if (hundreds == 9) {\n            roman += 'cm';\n        }\n\
    \        number -= hundreds * 100;\n    }\n    if (number >= 10) {\n        const\
    \ tens: number = Math.floor(number / 10);\n        if (tens < 4) {\n         \
    \   for (let i: number = 0; i < tens; i++) {\n                roman += 'x';\n\
    \            }\n        } else if (tens == 4) {\n            roman += 'xl';\n\
    \        } else if (tens > 4 && tens < 9) {\n            roman += 'l';\n     \
    \       for (let i: number = 0; i < tens - 5; i++) {\n                roman +=\
    \ 'x';\n            }\n        } else if (tens == 9) {\n            roman += 'xc';\n\
    \        }\n        number -= tens * 10;\n    }\n    if (number < 4) {\n     \
    \   for (let i: number = 0; i < number; i++) {\n            roman += 'i';\n  \
    \      }\n    } else if (number == 4) {\n        roman += 'iv';\n    } else if\
    \ (number > 4 && number < 9) {\n        roman += 'v';\n        for (let i: number\
    \ = 0; i < number - 5; i++) {\n            roman += 'i';\n        }\n    } else\
    \ if (number == 9) {\n        roman += 'ix';\n    }\n    return roman;\n}\n",
  "  let i = 0;\n  let answer = '';\n  while (number > 0) {\n    if (number % 5 ===\
    \ 4) {\n      answer = answer + Symbols[i];\n      number -= 1;\n    } else if\
    \ (number % 10 === 9) {\n      answer = answer + Symbols[i + 1];\n      number\
    \ -= 1;\n    } else {\n      const remainder = number % 5;\n      answer = answer\
    \ + Symbols[i].repeat(remainder);\n      number -= remainder;\n    }\n    number\
    \ = number / 10;\n    i += 2;\n  }\n  return answer.split('').reverse().join('');\n\
    }\n\nexport { int_to_mini_roman };"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
