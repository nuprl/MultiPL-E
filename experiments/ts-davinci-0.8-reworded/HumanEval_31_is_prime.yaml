name: HumanEval_31_is_prime
language: ts
prompt: "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
  // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n\
  // true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n\
  // false\nfunction is_prime(n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
  \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
  \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
  \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
  \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
  }\n\ntest();"
completions: ["  // Your code here\n  throw new Error(\"Method not implemented.\"\
    );\n}\n", "    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n",
  "    return false;\n}\n", "    if (n < 2) {\n        return false;\n    }\n    for\
    \ (let i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  if (n == 1 || n == 2) {\n    return\
    \ true;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nconsole.log(is_prime(6));\nconsole.log(is_prime(101));\n\
    console.log(is_prime(11));\nconsole.log(is_prime(13441));\nconsole.log(is_prime(61));\n\
    console.log(is_prime(4));\nconsole.log(is_prime(1));\n", "  if (n <= 1) {\n  \
    \  return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "    if (n < 2) {\n  \
    \      return false;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n\
    \ % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }", "    if (n <= 1) {\n        return false;\n    }\n    if (n == 2) {\n    \
    \    return true;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i\
    \ == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    // If n is less than 2 or a decimal, it's not prime.\n    if (n < 2 || n %\
    \ 1 != 0) {\n        return false;\n    }\n    // Otherwise, check if `n` is divisible\
    \ by any integer\n    // between 2 and n.\n    for (let i = 2; i < n; ++i) {\n\
    \        if (n % i == 0) return false;\n    }\n    return true;\n}\n", "  if (n\
    \ < 2) {\n    return false;\n  }\n\n  let divisor = 2;\n  while (divisor < n)\
    \ {\n    if (n % divisor === 0) {\n      return false;\n    }\n    divisor +=\
    \ 1;\n  }\n  return true;\n}\n", "  if (n <= 1) {\n    return false;\n  }\n  if\
    \ (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n\
    \  }\n  for (let i = 3; i < n; i += 2) {\n    if (n % i === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    if (n <= 1) {\n        return\
    \ false;\n    }\n    let m = Math.floor(Math.sqrt(n));\n    for (let i = 2; i\
    \ <= m; i++) {\n        if (n % i == 0) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n", "  // do not use modulo operator, use 2nd\
    \ function\n  // if (n % 2 === 0) {\n  //   return false;\n  // } else {\n  //\
    \   return true;\n  // }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n === 1 || n % 2 === 0) {\n        return\
    \ false;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if\
    \ (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return n !== 1;\n}\n", "  let x = true;\n  if (n == 1) {\n    x\
    \ = false;\n  }\n  for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n   \
    \ if (n % i == 0) {\n      x = false;\n    }\n  }\n  return x;\n}\n", "    if\
    \ (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 ||\
    \ n % 3 == 0) return false;\n    let i = 5;\n    while (i * i <= n) {\n      \
    \  if (n % i == 0 || n % (i + 2) == 0) return false;\n        i += 6;\n    }\n\
    \    return true;\n}\n", "  for (let i = 2; i < n; i++) {\n    if (n % i === 0)\
    \ {\n      return false;\n    }\n  }\n  return n > 1;\n}\n", "    if (n === 2)\
    \ {\n        return true;\n    }\n    else if (n % 2 === 0) {\n        return\
    \ false;\n    }\n    else {\n        for (let i = 3; i < n; i += 2) {\n      \
    \      if (n % i === 0) {\n                return false;\n            }\n    \
    \    }\n        return true;\n    }\n}\n", "  if (n <= 1) {\n    return false;\n\
    \  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
