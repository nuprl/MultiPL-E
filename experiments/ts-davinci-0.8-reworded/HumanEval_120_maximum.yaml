name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["  let result: number[] = arr.sort((a, b) => b - a);\n  return result.slice(0,\
    \ k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4,\
    \ 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result:\
    \ number[] = [];\n    while (k > 0) {\n        k--;\n        let max = arr[0];\n\
    \        let maxIndex = 0;\n        for (let i = 1; i < arr.length; i++) {\n \
    \           if (arr[i] > max) {\n                max = arr[i];\n             \
    \   maxIndex = i;\n            }\n        }\n        result.push(max);\n     \
    \   arr.splice(maxIndex, 1);\n    }\n    return result;\n}\n", "  return [...new\
    \ Set(arr.sort((a, b) => b - a).slice(0, k))];\n}\n", "  let maxHeap = new MaxHeap();\n\
    \  for (let i = 0; i < arr.length; i++) {\n    maxHeap.insert(arr[i]);\n  }\n\
    \  let maxArr = [];\n  for (let i = 0; i < k; i++) {\n    maxArr.push(maxHeap.remove());\n\
    \  }\n  return maxArr;\n}\n\nexport default maximum;", "    return [];\n}\n\n\
    export { maximum };", "    let filtered = arr.filter(num => num > 0);\n    let\
    \ sorted = filtered.sort((a, b) => a - b);\n    return sorted.slice(sorted.length\
    \ - k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4,\
    \ 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  // Your code\
    \ here\n}\n", "  // const sorted = arr.sort((a, b) => b - a)\n  // return sorted.slice(0,\
    \ k)\n  const arr_length = arr.length\n  if (arr_length < k) {\n    return arr\n\
    \  }\n  let p1 = 0\n  let p2 = k\n  while (p2 < arr_length) {\n    if (arr[p1]\
    \ <= arr[p2]) {\n      p1 += 1\n      p2 += 1\n    } else {\n      arr.splice(p1,\
    \ 1)\n      p2 += 1\n    }\n  }\n  return arr\n}\n\nexport default maximum", " \
    \   if (k === 0) {\n        return [];\n    }\n    if (k >= arr.length) {\n  \
    \      return arr.sort((a, b) => b - a);\n    }\n    return arr.sort((a, b) =>\
    \ b - a).slice(0, k);\n}\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  // Write\
    \ your code here\n  if (k === arr.length) {\n    return arr;\n  }\n\n  const result:\
    \ number[] = [];\n  const map: { [key: number]: number } = {};\n\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    map[arr[i]] = (map[arr[i]] || 0) + 1;\n  }\n\
    \n  const sorted = Object.keys(map).sort((a, b) => Number(b) - Number(a));\n\n\
    \  for (let i = 0; i < k; i++) {\n    const count = map[sorted[i]];\n    for (let\
    \ j = 0; j < count; j++) {\n      result.push(Number(sorted[i]));\n    }\n  }\n\
    \n  return result;\n}\n\nexport { maximum };", "    if (k === 0) {\n        return\
    \ [];\n    }\n    if (k === arr.length) {\n        return arr;\n    }\n    return\
    \ arr.sort((a, b) => b - a).slice(0, k);\n}\n", "  if (k === 0) return [];\n \
    \ if (k >= arr.length) return arr.sort((a, b) => b - a);\n  return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}\n", "  const length = arr.length;\n  if (k ===\
    \ length) {\n    return arr;\n  }\n  const result = [];\n  const max = length\
    \ - k;\n  for (let i = 0; i < length; i++) {\n    const val = arr[i];\n    if\
    \ (result.length < k) {\n      const idx = findFirstLarger(result, val);\n   \
    \   if (idx !== -1) {\n        result.splice(idx, 0, val);\n      } else {\n \
    \       result.push(val);\n      }\n    } else {\n      if (result[max] < val)\
    \ {\n        const idx = findFirstLarger(result, val);\n        if (idx !== -1)\
    \ {\n          result.splice(idx, 0, val);\n          result.pop();\n        }\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  if (k <= 0) return [];\n  let\
    \ heap = new MaxHeap();\n  arr.forEach(element => {\n    heap.insert(element);\n\
    \  });\n  let result = [];\n  while (k > 0) {\n    let remove = heap.remove();\n\
    \    result.push(remove);\n    k--;\n  }\n  return result;\n}\n", "    // so we\
    \ want to sort the array and pull out the first k elements\n\n    // Return the\
    \ sorted array of length k\n    return arr.sort((a, b) => a - b).slice(0, k);\n\
    }\n", "  let result: number[] = [];\n  let temp: number[] = [];\n  for (let i:\
    \ number = 0; i < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n\
    \    } else {\n      result.sort(function (a, b) {\n        return a - b;\n  \
    \    });\n      if (arr[i] > result[0]) {\n        result.shift();\n        result.push(arr[i]);\n\
    \      }\n    }\n  }\n  result.sort(function (a, b) {\n    return a - b;\n  });\n\
    \  return result;\n}\n\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));\nconsole.log(maximum([-3, -4, 5], 3));", "  return\
    \ arr.sort((a, b) => b - a).slice(0, k);\n}\n\ndescribe(\"Test maximum array\"\
    , () => {\n  it(\"Test: [-3, -4, 5], 3\", () => {\n    expect(maximum([-3, -4,\
    \ 5], 3)).toStrictEqual([-4, -3, 5]);\n  });\n  it(\"Test: [4, -4, 4], 2\", ()\
    \ => {\n    expect(maximum([4, -4, 4], 2)).toStrictEqual([4, 4]);\n  });\n  it(\"\
    Test: [-3, 2, 1, 2, -1, -2, 1], 1\", () => {\n    expect(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1)).toStrictEqual([2]);\n  });\n});", "  // Fast path: if k is greater\
    \ than length of arr, just return arr sorted\n  if (k >= arr.length) {\n    return\
    \ arr.sort((a, b) => a - b);\n  }\n\n  // Slower path, for the case where k is\
    \ less than the length of arr\n  // Create a max heap using Heap.js from this\
    \ repo\n  const heap = new Heap<number>((a, b) => b - a);\n\n  // Insert the first\
    \ k elements\n  for (let i = 0; i < k; i++) {\n    heap.push(arr[i]);\n  }\n\n\
    \  // Iterate over the rest of the array, comparing each element to the smallest\n\
    \  // value of the heap\n  for (let i = k; i < arr.length; i++) {\n    if (arr[i]\
    \ > heap.peek()) {\n      heap.pop();\n      heap.push(arr[i]);\n    }\n  }\n\n\
    \  // Return the heap as an array\n  return heap.toArray();\n}\n", "    if (k\
    \ === 0) {\n        return [];\n    }\n\n    if (k === arr.length) {\n       \
    \ return arr;\n    }\n\n    return arr.sort((a, b) => a - b).slice(arr.length\
    \ - k);\n}\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4,\
    \ 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "  const maxNumber\
    \ = arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  const minNumber = arr.splice(arr.indexOf(Math.min(...arr)),\
    \ 1);\n  return maxNumber.concat(minNumber);\n}\n\nconsole.log(maximum([-3, -4,\
    \ 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
