name: HumanEval_46_fib4
language: ts
prompt: "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n\
  // fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  // Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n\
  // >>> fib4(7)\n// 14\nfunction fib4(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fib4;\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),28);\n\
  \  assert.deepEqual(candidate(10),104);\n  assert.deepEqual(candidate(12),386);\n\
  }\n\ntest();"
completions: ["  const F = [0, 0, 2, 0];\n  if (n < 4) {\n    return F[n];\n  }\n\
    \  let f3 = F[3];\n  let f2 = F[2];\n  let f1 = F[1];\n  let f0 = F[0];\n  for\
    \ (let i = 4; i <= n; i++) {\n    f3 = f2 + f1 + f0;\n    f0 = f1;\n    f1 = f2;\n\
    \    f2 = f3;\n  }\n  return f3;\n}", "  let a: number = 0;\n  let b: number =\
    \ 0;\n  let c: number = 2;\n  let d: number = 0;\n  let e: number = 0;\n  if (n\
    \ < 3) {\n    return n;\n  } else {\n    for (let i: number = 3; i <= n; i++)\
    \ {\n      e = a + b + c + d;\n      a = b;\n      b = c;\n      c = d;\n    \
    \  d = e;\n    }\n    return e;\n  }\n}\n", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n\
    \  }\n  if (n === 3) {\n    return 0;\n  }\n  let nMinus1 = 0;\n  let nMinus2\
    \ = 0;\n  let nMinus3 = 2;\n  let nMinus4 = 0;\n  let fib4Number = 0;\n  for (let\
    \ i = 4; i <= n; i++) {\n    fib4Number = nMinus1 + nMinus2 + nMinus3 + nMinus4;\n\
    \    nMinus4 = nMinus3;\n    nMinus3 = nMinus2;\n    nMinus2 = nMinus1;\n    nMinus1\
    \ = fib4Number;\n  }\n  return fib4Number;\n}\n", "  let arr: number[] = [0, 0,\
    \ 2, 0];\n  for (let i = 4; i <= n; i++) {\n    let fib4 =\n      arr[arr.length\
    \ - 1] + arr[arr.length - 2] + arr[arr.length - 3] + arr[arr.length - 4];\n  \
    \  arr.push(fib4);\n  }\n  return arr[n];\n}\n", "    if (n === 0) {\n       \
    \ return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n ===\
    \ 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 0;\n    }\n\
    \    let previous1 = 2;\n    let previous2 = 0;\n    let previous3 = 0;\n    let\
    \ previous4 = 0;\n    let result = 0;\n    for (let i = 4; i <= n; i++) {\n  \
    \      result = previous1 + previous2 + previous3 + previous4;\n        previous4\
    \ = previous3;\n        previous3 = previous2;\n        previous2 = previous1;\n\
    \        previous1 = result;\n    }\n    return result;\n}\n", "    return 0;\n\
    }\n", "  let i = 0;\n  let a = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n\
    \  while (i < n) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n \
    \   i += 1;\n  }\n  return d;\n}", "  if (n === 0) {\n    return 0;\n  } else\
    \ if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 2;\n  } else\
    \ if (n === 3) {\n    return 0;\n  } else {\n    let a = 0;\n    let b = 0;\n\
    \    let c = 2;\n    let d = 0;\n    let temp = 0;\n    for (let i = 4; i <= n;\
    \ i++) {\n      temp = a + b + c + d;\n      a = b;\n      b = c;\n      c = d;\n\
    \      d = temp;\n    }\n    return temp;\n  }\n}\n", "  if (n <= 1) {\n    return\
    \ 0;\n  } else if (n === 2) {\n    return 2;\n  } else if (n === 3) {\n    return\
    \ 0;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4);\n  }\n}\nconsole.log(\"fib4(5): \", fib4(5));\nconsole.log(\"fib4(6):\
    \ \", fib4(6));\nconsole.log(\"fib4(7): \", fib4(7));\n", "    let last4 = [0,\
    \ 0, 2, 0];\n    for (let i = 4; i <= n; i++) {\n        last4.unshift(last4.reduce((a,\
    \ b) => a + b));\n        last4.pop();\n    }\n    return last4[0];\n}\n", " \
    \   if (n < 0) {\n        throw \"Invalid input\";\n    }\n    let fib4s: number[]\
    \ = [0, 0, 2, 0];\n    if (n < 4) {\n        return fib4s[n];\n    }\n    for\
    \ (let i = 4; i <= n; i++) {\n        fib4s[3] = fib4s[0] + fib4s[1] + fib4s[2]\
    \ + fib4s[3];\n        fib4s.unshift(fib4s.pop());\n    }\n    return fib4s[3];\n\
    }\n", "    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n    for\
    \ (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n    }\n    return d;\n}\n", "  const fib4s: number[]\
    \ = [];\n  fib4s[0] = 0;\n  fib4s[1] = 0;\n  fib4s[2] = 2;\n  fib4s[3] = 0;\n\
    \  if (n < 4) {\n    return fib4s[n];\n  }\n  for (let i = 4; i <= n; i++) {\n\
    \    fib4s[i] = fib4s[i - 1] + fib4s[i - 2] + fib4s[i - 3] + fib4s[i - 4];\n \
    \ }\n  return fib4s[n];\n}\n\nexport { isDecimal, isNumber, fib4 };", "  let a\
    \ = 0;\n  let b = 0;\n  let c = 2;\n  let d = 0;\n  for (let i = 0; i < n - 2;\
    \ i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return\
    \ d;\n}\n", "    let a = 0;\n    let b = 0;\n    let c = 2;\n    let d = 0;\n\
    \    if (n < 3) {\n        return 0;\n    }\n    if (n === 3) {\n        return\
    \ 2;\n    }\n    for (let i = 4; i <= n; i++) {\n        d = a + b + c;\n    \
    \    a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n", "   \
    \ //n > 3, fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n    let fib = [0,\
    \ 0, 2, 0];\n    let i = 3;\n    while (i < n) {\n        fib[i%4] = fib[(i-1)%4]\
    \ + fib[(i-2)%4] + fib[(i-3)%4] + fib[(i-4)%4];\n        i++;\n    }\n    return\
    \ fib[(n-1)%4];\n}", "    if (n <= 0) return 0;\n    if (n <= 2) return 2;\n \
    \   if (n <= 3) return 0;\n    const results = [0, 0, 2, 0];\n    for (let i =\
    \ 4; i <= n; i++) {\n        results.push(results[i - 1] + results[i - 2] + results[i\
    \ - 3] + results[i - 4]);\n    }\n    return results[n];\n}\n", "    if (n <=\
    \ 1) return 0;\n    if (n == 2) return 2;\n    var f = 0, f1 = 0, f2 = 2, f3 =\
    \ 0;\n    for (var i = 3; i <= n; i++) {\n        f = f1 + f2 + f3;\n        f1\
    \ = f2;\n        f2 = f3;\n        f3 = f;\n    }\n    return f;\n}\n", "  //base\
    \ case\n  if (n <= 2) {\n    return n;\n  }\n  //inductive case\n  let prev =\
    \ 0;\n  let prev1 = 0;\n  let prev2 = 2;\n  let prev3 = 0;\n  let curr = 0;\n\
    \  for (let i = 3; i <= n; i++) {\n    curr = prev + prev1 + prev2 + prev3;\n\
    \    prev = prev1;\n    prev1 = prev2;\n    prev2 = prev3;\n    prev3 = curr;\n\
    \  }\n  return curr;\n}\n", "    if (n === 0) {\n        return 0;\n    }\n  \
    \  if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return\
    \ 2;\n    }\n    if (n === 3) {\n        return 0;\n    }\n    let fib4_3 = 0;\n\
    \    let fib4_2 = 2;\n    let fib4_1 = 0;\n    let fib4_0 = 1;\n    let fib4_n:\
    \ number;\n    for (let i = 4; i <= n; i++) {\n        fib4_n = fib4_3 + fib4_2\
    \ + fib4_1 + fib4_0;\n        fib4_3 = fib4_2;\n        fib4_2 = fib4_1;\n   \
    \     fib4_1 = fib4_0;\n        fib4_0 = fib4_n;\n    }\n    return fib4_n;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
