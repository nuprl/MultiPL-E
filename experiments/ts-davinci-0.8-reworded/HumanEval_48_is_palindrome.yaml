name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    if (text.length === 0) {\n        return true;\n    } else {\n\
    \        return text[0] === text[text.length - 1] && is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n}\n", "    let c = 0;\n    for (let i = 0; i < text.length\
    \ / 2; i++) {\n        if (text[i] != text[text.length - 1 - i]) {\n         \
    \   c++;\n        }\n    }\n    if (c > 0) {\n        return false;\n    }\n \
    \   return true;\n}\n", "    let start = 0;\n    let end = text.length - 1;\n\
    \    while (start < end) {\n        if (text[start] !== text[end]) {\n       \
    \     return false;\n        }\n        start++;\n        end--;\n    }\n    return\
    \ true;\n}\n", "    let text_length = text.length;\n    let middle = Math.floor(text_length\
    \ / 2);\n    for (let index = 0; index < middle; index++) {\n        if (text[index]\
    \ !== text[text_length - index - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  if (text.length <= 1) {\n    return true;\n\
    \  }\n  let start = 0;\n  let end = text.length - 1;\n  while (start < end) {\n\
    \    if (text[start] !== text[end]) {\n      return false;\n    }\n    start++;\n\
    \    end--;\n  }\n  return true;\n}\n", "  let reverse = text.split(\"\").reverse().join(\"\
    \");\n  if (text === reverse) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  // Initialize a palindrome flag to true, \n  // then check each\
    \ character from the ends to \n  // the middle, to see if the characters match.\n\
    \  let palindrome: boolean = true;\n  for (let i: number = 0; i < text.length\
    \ / 2; i++) {\n    if (text[i] !== text[text.length - i - 1]) {\n      palindrome\
    \ = false;\n      break;\n    }\n  }\n  return palindrome;\n}\n\n", "    if (text.length\
    \ <= 1) {\n        return true;\n    }\n    else if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "    return text.split(\"\
    \").reverse().join(\"\") === text;\n}\n\nexport {\n    is_palindrome\n}", "  \
    \  if (text.length === 0) {\n        return true;\n    } else {\n        let length\
    \ = text.length;\n        let index = 0;\n        while (length >= 0) {\n    \
    \        if (text[index] === text[length]) {\n                index++;\n     \
    \           length--;\n            } else {\n                return false;\n \
    \           }\n        }\n        return true;\n    }\n}\n", "  return text.split(\"\
    \").reverse().join(\"\") === text;\n}\n", "  return text === text.split(\"\").reverse().join(\"\
    \");\n}\n", "    let text1 = text.split(\"\");\n    let text2 = text.split(\"\"\
    ).reverse();\n    for (let i: number = 0; i < text.length; i++) {\n        if\
    \ (text1[i] !== text2[i]) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nconsole.log(is_palindrome(\"\")) // true\nconsole.log(is_palindrome(\"\
    aba\")) // true\nconsole.log(is_palindrome(\"aaaaa\")) // true\nconsole.log(is_palindrome(\"\
    zbcd\")) // false\n\n", "  return text === text.split(\"\").reverse().join(\"\"\
    );\n}\n", "    return text === text.split(\"\").reverse().join(\"\");\n}\n", " \
    \   for (let i = 0; i < text.length / 2; i++) {\n        if (text[i] !== text[text.length\
    \ - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    return text === text.split(\"\").reverse().join(\"\");\n}\n", "  if\
    \ (text === \"\") {\n    return true;\n  } else {\n    let front = 0;\n    let\
    \ back = text.length - 1;\n    while (back > front) {\n      if (text[front] !==\
    \ text[back]) {\n        return false;\n      }\n      front++;\n      back--;\n\
    \    }\n    return true;\n  }\n}\n", "    return true;\n}\n", "  let s: number\
    \ = 0;\n  let e: number = text.length - 1;\n  while (s < e) {\n    if (text[s]\
    \ !== text[e]) {\n      return false;\n    }\n    s++;\n    e--;\n  }\n  return\
    \ true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
