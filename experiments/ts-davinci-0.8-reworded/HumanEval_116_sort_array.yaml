name: HumanEval_116_sort_array
language: ts
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
  // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2,\
  \ 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
  \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
  \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["  const cache = {};\n  const ones = arr.map(d => d.toString(2).split(\"\
    1\").length - 1);\n  for (let i = 0; i < arr.length; i++) {\n    if (!cache[ones[i]])\
    \ {\n      cache[ones[i]] = [];\n    }\n    cache[ones[i]].push(arr[i]);\n  }\n\
    \  const sortArr = [];\n  for (let i = 0; i < ones.length; i++) {\n    sortArr.push(...cache[ones[i]].sort((a,\
    \ b) => a - b));\n  }\n  return sortArr;\n}\n", "    const unsorted = arr.map(a\
    \ => {\n        const binary = a.toString(2);\n        const ones = binary.split('').reduce((x,\
    \ y) => y === '1' ? x += 1 : x, 0);\n        return { a, ones };\n    });\n  \
    \  return unsorted.sort((a, b) => {\n        if (a.ones === b.ones) return a.a\
    \ - b.a;\n        return a.ones - b.ones;\n    }).map(item => item.a);\n}\n\n\
    console.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 2, 4, 8, 3, 5, 6,\
    \ 7, 9, 10]);\nconsole.log(sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [0,\
    \ 1, 2, 4, 8, 3, 5, 6, 7, 9, 10]);\nconsole.log(sort_array([0, 2, 1, 4, 3, 6,\
    \ 5, 8, 7, 10, 9]), [0, 1, 2, 4, 8, 3, 5, 6, 7, 9, 10]);\nconsole.log(sort_array([1024,\
    \ 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]), [1, 2, 4, 8, 16, 32, 64, 128, 256,\
    \ 512, 1024]);\nconsole.log(sort_array([10000, 1000, 100, 10, 1]), [1, 10, 100,\
    \ 1000, 10000]);\nconsole.log(sort_array([10, 100, 1000, 10000, 1]), [1, 10, 100,\
    \ 1000, 10000]);\nconsole.log(sort_array([1, 24, 32, 4, 51, 6, 7, 81, 9, 10]),\
    \ [1, 4, 6, 7, 9, 10, 24, 32, 51, 81]);\nconsole.log(sort_array([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]), [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]);\nconsole.log(sort_array([0",
  "  const ones = arr.map(v => v.toString(2).split('').filter(v => v === '1').length);\n\
    \  return arr.map((v, i) => [v, ones[i]]).sort(([, a], [, b]) => {\n    if (a\
    \ === b) return 0;\n    return a < b ? -1 : 1;\n  }).map(([v]) => v);\n}\nconsole.log(sort_array([1,\
    \ 5, 2, 3, 4]));\nconsole.log(sort_array([-2, -3, -4, -5, -6]));\nconsole.log(sort_array([1,\
    \ 0, 2, 3, 4]));", "    return arr.sort((a, b) => {\n        let binA = a.toString(2);\n\
    \        let binB = b.toString(2);\n        let onesA = (binA.match(/1/g) || []).length;\n\
    \        let onesB = (binB.match(/1/g) || []).length;\n        if (onesA > onesB)\
    \ {\n            return 1;\n        } else if (onesA < onesB) {\n            return\
    \ -1;\n        } else {\n            return a - b;\n        }\n    });\n}\nconsole.log(sort_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n", "  return arr.sort((a, b) =>\n    a.toString(2).split(\"\
    1\").length !== b.toString(2).split(\"1\").length\n      ? a.toString(2).split(\"\
    1\").length - b.toString(2).split(\"1\").length\n      : a - b\n  );\n}\n\nexport\
    \ function sort_array_test() {\n  console.log(sort_array([-2, -3, -4, -5, -6]));\n\
    \  console.log(sort_array([1, 0, 2, 3, 4]));\n  console.log(sort_array([1, 5,\
    \ 2, 3, 4]));\n}", "    const sorted: {\n        binary: string,\n        decimal:\
    \ number\n    }[] = arr.map(decimal => ({\n        binary: decimal.toString(2),\n\
    \        decimal\n    })).sort((a, b) => {\n        if (a.binary.match(/1/g) ||\
    \ []).length === (b.binary.match(/1/g) || []).length) {\n            return a.decimal\
    \ - b.decimal;\n        }\n        return (a.binary.match(/1/g) || []).length\
    \ - (b.binary.match(/1/g) || []).length;\n    });\n    return sorted.map(obj =>\
    \ obj.decimal);\n}\n\nlet result = sort_array([1, 5, 2, 3, 4]);\nconsole.log(result);\n\
    result = sort_array([-2, -3, -4, -5, -6]);\nconsole.log(result);\nresult = sort_array([1,\
    \ 0, 2, 3, 4]);\nconsole.log(result);", "  return arr.sort((a, b) =>\n    to_dec(a)\
    \ == to_dec(b) ? to_dec(a) - to_dec(b) : ones(a) - ones(b)\n  );\n}", "  return\
    \ arr.sort((a, b) => {\n    const aOnes = countOnes(a);\n    const bOnes = countOnes(b);\n\
    \    if (aOnes < bOnes) {\n      return -1;\n    } else if (aOnes > bOnes) {\n\
    \      return 1;\n    } else {\n      return a - b;\n    }\n  });\n}\n", "   \
    \ return arr.sort((a, b) => {\n        const aOnes = a.toString(2).match(/1/g).length\n\
    \        const bOnes = b.toString(2).match(/1/g).length\n        return aOnes\
    \ > bOnes ? 1 : aOnes < bOnes ? -1 : a - b\n    })\n}\n\nexport default sort_array",
  "    const res: number[] = [];\n    const sortArray: number[] = arr.map(item =>\
    \ ({ dec: item, bin: item.toString(2) }));\n    sortArray.sort((a, b) => {\n \
    \       let aBin = a.bin;\n        let bBin = b.bin;\n        let aOneCount =\
    \ 0;\n        let bOneCount = 0;\n        for (let i = 0; i < aBin.length; i++)\
    \ {\n            if (aBin[i] === '1') {\n                aOneCount++;\n      \
    \      }\n        }\n        for (let i = 0; i < bBin.length; i++) {\n       \
    \     if (bBin[i] === '1') {\n                bOneCount++;\n            }\n  \
    \      }\n        if (aOneCount === bOneCount) {\n            return a.dec - b.dec;\n\
    \        }\n        return aOneCount - bOneCount;\n    });\n    sortArray.forEach(item\
    \ => res.push(item.dec));\n    return res;\n}\n\ndescribe('test sort_array', ()\
    \ => {\n    test('sort_array([1, 5, 2, 3, 4])', () => {\n        expect(sort_array([1,\
    \ 5, 2, 3, 4])).toEqual([1, 2, 3, 4, 5]);\n    });\n    test('sort_array([-2,\
    \ -3, -4, -5, -6])', () => {\n        expect(sort_array([-2, -3, -4, -5, -6])).toEqual([-6,\
    \ -5, -4, -3, -2]);\n    });\n    test('sort_array([1, 0, 2, 3, 4])', () => {\n\
    \        expect(sort_array([1, 0, 2, 3, 4])).toEqual([0, 1, 2, 3, 4]);\n    });\n\
    \    test('sort_array([4, 7, 6, 5, 8, 9, 0, 1, 2, 3])', () => {\n        expect(sort_array([4,\
    \ 7, 6, 5, 8, 9, 0, 1, 2", "  return arr.sort((a, b) => {\n    if (a.toString(2).match(/1/g)\
    \ && b.toString(2).match(/1/g)) {\n      return (\n        a.toString(2).match(/1/g)!.length\
    \ -\n        b.toString(2).match(/1/g)!.length\n      );\n    } else if (a.toString(2).match(/1/g)\
    \ && !b.toString(2).match(/1/g)) {\n      return -1;\n    } else if (!a.toString(2).match(/1/g)\
    \ && b.toString(2).match(/1/g)) {\n      return 1;\n    } else {\n      return\
    \ a - b;\n    }\n  });\n}\n", "    let tempArr = [];\n    let oneArr = [];\n \
    \   let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        tempArr.push(arr[i].toString(2).split('').map(x\
    \ => parseInt(x)));\n    }\n    for (let i = 0; i < tempArr.length; i++) {\n \
    \       oneArr.push(tempArr[i].filter(x => x == 1).length);\n    }\n    // console.log(oneArr)\n\
    \    let oneArrCopy = oneArr.slice();\n    oneArrCopy.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < oneArrCopy.length; i++) {\n        let tempOneIndex =\
    \ oneArr.indexOf(oneArrCopy[i]);\n        if (result.indexOf(arr[tempOneIndex])\
    \ == -1) {\n            result.push(arr[tempOneIndex]);\n        }\n        oneArr[tempOneIndex]\
    \ = -1;\n    }\n    // console.log(result)\n    for (let i = 0; i < result.length;\
    \ i++) {\n        for (let j = 0; j < result.length; j++) {\n            if (result[i]\
    \ == result[j] && i != j) {\n                let tempIndex = i;\n            \
    \    while (tempIndex < result.length - 1) {\n                    [result[tempIndex],\
    \ result[tempIndex + 1]] = [result[tempIndex + 1], result[tempIndex]];\n     \
    \               tempIndex++;\n                }\n            }\n        }\n  \
    \  }\n    return result;\n}", "  const arrBinary = arr.map(element => element.toString(2));\n\
    \  arrBinary.sort();\n  const arrSorted = arrBinary.map(bin => parseInt(bin, 2));\n\
    \  return arrSorted;\n}\nconsole.log(sort_array([1, 0, 2, 3, 4]));", "    //Sort\
    \ by the number of 1's and then by number if there are the same number of 1's\n\
    \    return arr.sort((a, b) => {\n        let aArr = (a).toString(2).split('');\n\
    \        let bArr = (b).toString(2).split('');\n        let aCount = aArr.filter(digit\
    \ => digit === '1').length;\n        let bCount = bArr.filter(digit => digit ===\
    \ '1').length;\n        if (aCount > bCount) {\n            return 1;\n      \
    \  } else if (aCount < bCount) {\n            return -1;\n        } else {\n \
    \           return a - b;\n        }\n    });\n}\n\nexport function runTests():\
    \ void {\n    const utils = new Utils();\n    utils.assert([1, 2, 3, 4, 5], sort_array([1,\
    \ 5, 2, 3, 4]));\n    utils.assert([-6, -5, -4, -3, -2], sort_array([-2, -3, -4,\
    \ -5, -6]));\n    utils.assert([0, 1, 2, 3, 4], sort_array([1, 0, 2, 3, 4]));\n\
    \    utils.assert([1, 2, 8, 32, 1024, 32768, 65536], sort_array([2048, 1024, 512,\
    \ 256, 128, 64, 32, 16, 8, 4, 2, 1]));\n    utils.assert([1, 2, 4, 8, 16, 32,\
    \ 64, 128, 256, 512, 1024, 2048], sort_array([2048, 1024, 512, 256, 128, 64, 32,\
    \ 16, 8, 4, 2, 1]));\n    utils.assert([0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512,\
    \ 1024, 2048], sort_array([2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1,\
    \ 0]));\n    utils.assert([0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048],\
    \ sort_array", "    // code here\n    return arr.sort((a, b) => {\n        if(Array.from(a.toString(2)).filter(x\
    \ => x === '1').length === Array.from(b.toString(2)).filter(x => x === '1').length)\n\
    \            return a - b;\n        else\n            return Array.from(a.toString(2)).filter(x\
    \ => x === '1').length - Array.from(b.toString(2)).filter(x => x === '1').length;\n\
    \    });\n}\n", "    return arr.sort((a, b) => {\n        let x = (a >>> 0).toString(2).split('').filter(i\
    \ => i === '1').length;\n        let y = (b >>> 0).toString(2).split('').filter(i\
    \ => i === '1').length;\n        return x === y ? a - b : x - y;\n    });\n}\n",
  "  return arr.sort((a, b) => {\n    const count_a = a.toString(2).split(\"1\").length\
    \ - 1;\n    const count_b = b.toString(2).split(\"1\").length - 1;\n    if (count_a\
    \ > count_b) {\n      return 1;\n    } else if (count_a < count_b) {\n      return\
    \ -1;\n    } else {\n      return a - b;\n    }\n  });\n}\n\nconsole.log(sort_array([1,\
    \ 5, 2, 3, 4]));\nconsole.log(sort_array([-2, -3, -4, -5, -6]));\nconsole.log(sort_array([1,\
    \ 0, 2, 3, 4]));", "    let numOfOnes = (num: number) => num.toString(2).split('').reduce((acc,\
    \ curr) => curr === '1' ? acc + 1 : acc, 0);\n    return arr.sort((a, b) => {\n\
    \        let aOnes = numOfOnes(a);\n        let bOnes = numOfOnes(b);\n      \
    \  return aOnes === bOnes ? a - b : aOnes - bOnes;\n    });\n}\n", "    return\
    \ arr.sort((a, b) => {\n        const binaryA = a.toString(2).match(/1/g).length;\n\
    \        const binaryB = b.toString(2).match(/1/g).length;\n        return binaryA\
    \ > binaryB ? 1 : (binaryA === binaryB ? a - b : -1);\n    });\n}\n", "  return\
    \ arr.sort((a, b) => {\n    let aOnes = a.toString(2).split(\"\").filter(x =>\
    \ x === \"1\").length;\n    let bOnes = b.toString(2).split(\"\").filter(x =>\
    \ x === \"1\").length;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\
    \ else {\n      return aOnes - bOnes;\n    }\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
