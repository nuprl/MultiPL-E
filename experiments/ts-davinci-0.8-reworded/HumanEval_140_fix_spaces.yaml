name: HumanEval_140_fix_spaces
language: ts
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"\
  ),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\"\
  );\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\"\
  );\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"\
  \   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["  let result: string[] = [];\n  let index = 0;\n  let count = 0;\n\
    \  for (let i = 0; i < text.length; i++) {\n    if (text[i] === \" \") {\n   \
    \   count++;\n      if (count === 1) {\n        result[index] = \"_\";\n     \
    \   index++;\n      } else if (count >= 2) {\n        result[index] = \"-\";\n\
    \        index++;\n      }\n    } else {\n      result[index] = text[i];\n   \
    \   index++;\n      count = 0;\n    }\n  }\n  return result.join(\"\");\n}\n",
  "    // code goes here\n    let result = text.replace(/  +/g, \"-\").replace(/\\\
    s/g, \"_\");\n    return result;\n}\n", "    // return text.replace(/\\s+/g, '_');\n\
    \    // return text.replace(/\\s{2,}/g, '-');\n    return text.replace(/\\s{2,}/g,\
    \ '-').replace(/\\s+/g, '_');\n}\n\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\"\
    \ Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "  return text.trim().replace(/\\s+/g, '-');\n}\n", "   \
    \ let result: string = \"\";\n    for (let i = 0; i < text.length; i++) {\n  \
    \      if (text[i] === \" \") {\n            if (i === 0) {\n                if\
    \ (text[i + 1] === \" \") {\n                    result += \"_\";\n          \
    \      }\n            } else if (i === text.length - 1) {\n                if\
    \ (text[i - 1] === \" \") {\n                    result += \"_\";\n          \
    \      }\n            } else {\n                if (text[i - 1] === \" \" && text[i\
    \ + 1] === \" \") {\n                    result += \"-\";\n                } else\
    \ if (text[i - 1] === \" \") {\n                    result += \"_\";\n       \
    \         } else if (text[i + 1] === \" \") {\n                    result += \"\
    _\";\n                } else {\n                    result += \" \";\n       \
    \         }\n            }\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    return result;\n}\n", "    let res: string = \"\";\n  \
    \  let counter: number = 0;\n    for (let i: number = 0; i < text.length; i++)\
    \ {\n        if (text[i] == \" \") {\n            counter++;\n            if (counter\
    \ > 2) {\n                res += \"-\";\n            } else {\n              \
    \  res += \"_\";\n            }\n        } else {\n            res += text[i];\n\
    \            counter = 0;\n        }\n    }\n    return res;\n}\n", "    let text_as_array\
    \ = text.split(\" \");\n    let final = \"\";\n    let counter = 0;\n    for (let\
    \ i = 0; i < text_as_array.length; i++) {\n        if (text_as_array[i] === \"\
    \") {\n            counter += 1;\n        }\n        else {\n            if (counter\
    \ > 1) {\n                final += \"-\" + text_as_array[i];\n            }\n\
    \            else {\n                final += text_as_array[i];\n            }\n\
    \            counter = 0;\n        }\n    }\n    let final_array = final.split(\"\
    \");\n    for (let i = 0; i < final_array.length; i++) {\n        if (final_array[i]\
    \ === \" \") {\n            final_array[i] = \"_\";\n        }\n    }\n    final\
    \ = final_array.join(\"\");\n    return final;\n}\n", "  // your code here\n \
    \ return text;\n}\n", "    let i = 0;\n    let count = 0;\n    let result = '';\n\
    \    let flag = false;\n    while (i < text.length) {\n        let char = text[i];\n\
    \        if (char == ' ') {\n            count++;\n            if (count >= 2)\
    \ {\n                flag = true;\n            }\n        } else {\n         \
    \   if (flag) {\n                result += '-';\n                flag = false;\n\
    \            }\n            result += char;\n            count = 0;\n        }\n\
    \        i++;\n    }\n    return result;\n}\nconsole.log(fix_spaces(\" Example\
    \ 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    if (text.includes(\"  \")) {\n        text = text.replace(/\
    \  /g, \"-\");\n    }\n    return text.replace(/ /g, \"_\");\n}\n", "    let new_text\
    \ = text.replace(/ /g, \"_\");\n    return new_text.replace(/__/g, \"-\");\n}\n\
    \nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example 1\"\
    ));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\" Example\
    \ 3\"));\n", "    // return text.replace(/[\\s]{1,2}/g, (match) => {\n    // \
    \    if (match.length === 1) {\n    //         return \"_\";\n    //     } else\
    \ {\n    //         return \"-\";\n    //     }\n    // });\n    return text.replace(/[\\\
    s]{1,2}/g, (match) => match.length === 1 ? \"_\" : \"-\");\n}\n", "    var result\
    \ = \"\";\n    var count = 0;\n    var counter = 0;\n    while (count < text.length)\
    \ {\n        if (text[count] == \" \") {\n            counter++;\n           \
    \ if (counter > 2) {\n                result += \"-\";\n            } else {\n\
    \                result += \"_\";\n            }\n        } else {\n         \
    \   result += text[count];\n            counter = 0;\n        }\n        count++;\n\
    \    }\n    return result;\n}\n", "    return text;\n}\n", "    return text.replace(/\\\
    s{2,}/g, '-').replace(/\\s/g, '_');\n}\nconsole.log(fix_spaces(\" Example\"));\n\
    console.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"\
    ));\nconsole.log(fix_spaces(\" Example 3\"));", "  const text_spaces_fixed = text.replace(/\
    \ /g, \"_\").replace(/__/g, \"-\");\n  return text_spaces_fixed;\n}\n", "    if\
    \ (text.length < 1) return \"\";\n    let spaceNum = 0;\n    let result = \"\"\
    ;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === \" \"\
    ) {\n            spaceNum++;\n            if (spaceNum >= 2) {\n             \
    \   result += \"-\";\n            }\n        } else {\n            result += text[i];\n\
    \            spaceNum = 0;\n        }\n    }\n    return result;\n}", "    //\
    \ replace all spaces with underscores\n    text = text.replace(/ /g, \"_\");\n\
    \    // replace all spaces with dashes\n    text = text.replace(/ /g, \"-\");\n\
    \    return text;\n}\n\nfix_spaces(\" Example\");\nfix_spaces(\" Example 1\");\n\
    fix_spaces(\" Example 2\");\nfix_spaces(\" Example 3\");\n", "  return text.replace(/\
    \ {2,}/g, '-').replace(/ /g, '_');\n}\n", "  return text.replace(/ +/g, '-').replace(/\
    \ /g, '_');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
