name: HumanEval_140_fix_spaces
language: ts
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"\
  ),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\"\
  );\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\"\
  );\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"\
  \   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["  let result: string[] = [];\n  let index = 0;\n  let count = 0;\n\
    \  for (let i = 0; i < text.length; i++) {\n    if (text[i] === \" \") {\n   \
    \   count++;\n      if (count === 1) {\n        result[index] = \"_\";\n     \
    \   index++;\n      } else if (count >= 2) {\n        result[index] = \"-\";\n\
    \        index++;\n      }\n    } else {\n      result[index] = text[i];\n   \
    \   index++;\n      count = 0;\n    }\n  }\n  return result.join(\"\");\n}\n",
  "    // code goes here\n    let result = text.replace(/  +/g, \"-\").replace(/\\\
    s/g, \"_\");\n    return result;\n}\n", "    // return text.replace(/\\s+/g, '_');\n\
    \    // return text.replace(/\\s{2,}/g, '-');\n    return text.replace(/\\s{2,}/g,\
    \ '-').replace(/\\s+/g, '_');\n}\n\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\"\
    \ Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "  return text.trim().replace(/\\s+/g, '-');\n}\n", "   \
    \ let result: string = \"\";\n    for (let i = 0; i < text.length; i++) {\n  \
    \      if (text[i] === \" \") {\n            if (i === 0) {\n                if\
    \ (text[i + 1] === \" \") {\n                    result += \"_\";\n          \
    \      }\n            } else if (i === text.length - 1) {\n                if\
    \ (text[i - 1] === \" \") {\n                    result += \"_\";\n          \
    \      }\n            } else {\n                if (text[i - 1] === \" \" && text[i\
    \ + 1] === \" \") {\n                    result += \"-\";\n                } else\
    \ if (text[i - 1] === \" \") {\n                    result += \"_\";\n       \
    \         } else if (text[i + 1] === \" \") {\n                    result += \"\
    _\";\n                } else {\n                    result += \" \";\n       \
    \         }\n            }\n        } else {\n            result += text[i];\n\
    \        }\n    }\n    return result;\n}\n", "    let res: string = \"\";\n  \
    \  let counter: number = 0;\n    for (let i: number = 0; i < text.length; i++)\
    \ {\n        if (text[i] == \" \") {\n            counter++;\n            if (counter\
    \ > 2) {\n                res += \"-\";\n            } else {\n              \
    \  res += \"_\";\n            }\n        } else {\n            res += text[i];\n\
    \            counter = 0;\n        }\n    }\n    return res;\n}\n", "    let text_as_array\
    \ = text.split(\" \");\n    let final = \"\";\n    let counter = 0;\n    for (let\
    \ i = 0; i < text_as_array.length; i++) {\n        if (text_as_array[i] === \"\
    \") {\n            counter += 1;\n        }\n        else {\n            if (counter\
    \ > 1) {\n                final += \"-\" + text_as_array[i];\n            }\n\
    \            else {\n                final += text_as_array[i];\n            }\n\
    \            counter = 0;\n        }\n    }\n    let final_array = final.split(\"\
    \");\n    for (let i = 0; i < final_array.length; i++) {\n        if (final_array[i]\
    \ === \" \") {\n            final_array[i] = \"_\";\n        }\n    }\n    final\
    \ = final_array.join(\"\");\n    return final;\n}\n", "  // your code here\n \
    \ return text;\n}\n", "    let i = 0;\n    let count = 0;\n    let result = '';\n\
    \    let flag = false;\n    while (i < text.length) {\n        let char = text[i];\n\
    \        if (char == ' ') {\n            count++;\n            if (count >= 2)\
    \ {\n                flag = true;\n            }\n        } else {\n         \
    \   if (flag) {\n                result += '-';\n                flag = false;\n\
    \            }\n            result += char;\n            count = 0;\n        }\n\
    \        i++;\n    }\n    return result;\n}\nconsole.log(fix_spaces(\" Example\
    \ 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    if (text.includes(\"  \")) {\n        text = text.replace(/\
    \  /g, \"-\");\n    }\n    return text.replace(/ /g, \"_\");\n}\n", "    let new_text\
    \ = text.replace(/ /g, \"_\");\n    return new_text.replace(/__/g, \"-\");\n}\n\
    \nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example 1\"\
    ));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\" Example\
    \ 3\"));\n", "    // return text.replace(/[\\s]{1,2}/g, (match) => {\n    // \
    \    if (match.length === 1) {\n    //         return \"_\";\n    //     } else\
    \ {\n    //         return \"-\";\n    //     }\n    // });\n    return text.replace(/[\\\
    s]{1,2}/g, (match) => match.length === 1 ? \"_\" : \"-\");\n}\n", "    var result\
    \ = \"\";\n    var count = 0;\n    var counter = 0;\n    while (count < text.length)\
    \ {\n        if (text[count] == \" \") {\n            counter++;\n           \
    \ if (counter > 2) {\n                result += \"-\";\n            } else {\n\
    \                result += \"_\";\n            }\n        } else {\n         \
    \   result += text[count];\n            counter = 0;\n        }\n        count++;\n\
    \    }\n    return result;\n}\n", "    return text;\n}\n", "    return text.replace(/\\\
    s{2,}/g, '-').replace(/\\s/g, '_');\n}\nconsole.log(fix_spaces(\" Example\"));\n\
    console.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"\
    ));\nconsole.log(fix_spaces(\" Example 3\"));", "  const text_spaces_fixed = text.replace(/\
    \ /g, \"_\").replace(/__/g, \"-\");\n  return text_spaces_fixed;\n}\n", "    if\
    \ (text.length < 1) return \"\";\n    let spaceNum = 0;\n    let result = \"\"\
    ;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === \" \"\
    ) {\n            spaceNum++;\n            if (spaceNum >= 2) {\n             \
    \   result += \"-\";\n            }\n        } else {\n            result += text[i];\n\
    \            spaceNum = 0;\n        }\n    }\n    return result;\n}", "    //\
    \ replace all spaces with underscores\n    text = text.replace(/ /g, \"_\");\n\
    \    // replace all spaces with dashes\n    text = text.replace(/ /g, \"-\");\n\
    \    return text;\n}\n\nfix_spaces(\" Example\");\nfix_spaces(\" Example 1\");\n\
    fix_spaces(\" Example 2\");\nfix_spaces(\" Example 3\");\n", "  return text.replace(/\
    \ {2,}/g, '-').replace(/ /g, '_');\n}\n", "  return text.replace(/ +/g, '-').replace(/\
    \ /g, '_');\n}\n", "    return text.replace(/\\s+/g, function (match) {\n    \
    \    if (match.length <= 2) {\n            return match.replace(/\\s/g, \"_\"\
    );\n        } else {\n            return match.replace(/\\s/g, \"-\");\n     \
    \   }\n    });\n}\n", "    const regex: RegExp = /\\s\\s/g;\n    text = text.replace(regex,\
    \ '-');\n    text = text.replace(/\\s/g, '_');\n    return text;\n}\nconst fix_spaces_test_1:\
    \ string = ' Example';\nconst fix_spaces_test_2: string = ' Example 1';\nconst\
    \ fix_spaces_test_3: string = ' Example 2';\nconst fix_spaces_test_4: string =\
    \ ' Example 3';\nconsole.log(fix_spaces(fix_spaces_test_1));\nconsole.log(fix_spaces(fix_spaces_test_2));\n\
    console.log(fix_spaces(fix_spaces_test_3));\nconsole.log(fix_spaces(fix_spaces_test_4));",
  "    return text.replace(/ /g, \"_\").replace(/_+/g, \"_\").replace(/_+/g, \"-\"\
    );\n}\n\n", "    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n\
    \        if (text[i] === \" \") {\n            count++;\n        }\n    }\n  \
    \  if (count === 0) {\n        return text;\n    } else if (count === 1) {\n \
    \       return text.replace(\" \", \"_\");\n    } else if (count === 2) {\n  \
    \      return text.replace(\" \", \"_\");\n    } else {\n        return text.replace(\"\
    \  \", \"-\");\n    }\n}\n", "    return text.replace(/ +/g, ' ').replace(/ {2,}/g,\
    \ '_').replace(/ /g, '_');\n}\n", "  let result = text.replace(/  +/g, \"-\").replace(/\
    \ +/g, \"_\");\n  return result.trim();\n}\n\ndescribe(\"Function: fix_spaces()\"\
    , () => {\n  test(\"should return Example\", () => {\n    const result = fix_spaces(\"\
    \ Example\");\n    expect(result).toBe(\"Example\");\n  });\n  test(\"should return\
    \ Example_1\", () => {\n    const result = fix_spaces(\" Example 1\");\n    expect(result).toBe(\"\
    Example_1\");\n  });\n  test(\"should return _Example_2\", () => {\n    const\
    \ result = fix_spaces(\" Example 2\");\n    expect(result).toBe(\"_Example_2\"\
    );\n  });\n  test(\"should return _Example-3\", () => {\n    const result = fix_spaces(\"\
    \ Example 3\");\n    expect(result).toBe(\"_Example-3\");\n  });\n});\n", "  \
    \  let answer: string = text.trim().replace(/ +/g, '-');\n    return answer.replace(/-/g,\
    \ '_');\n}\n", "  return text.trim().replace(/\\s/g, \"_\").replace(/\\s{2,}/g,\
    \ \"-\");\n}\n", "    var result = '';\n    var consecutive_space_count = 0;\n\
    \    for (var i = 0; i < text.length; i++) {\n        if (text[i] == ' ') {\n\
    \            consecutive_space_count++;\n            if (consecutive_space_count\
    \ > 2) {\n                result += '-';\n            } else {\n             \
    \   result += '_';\n            }\n        } else {\n            consecutive_space_count\
    \ = 0;\n            result += text[i];\n        }\n    }\n    return result;\n\
    }\n\n", "    if (text.trim() == '') {\n        return text\n    }\n    text =\
    \ text.trim()\n    while (text.indexOf('  ') != -1) {\n        text = text.replace('\
    \  ', ' ')\n    }\n    text = text.replace(/ /g, '_')\n    text = text.replace('\
    \ _', '_')\n    text = text.replace('_ ', '_')\n    if (text.indexOf('__') !=\
    \ -1) {\n        text = text.replace(/__/g, '-')\n    }\n    return text\n}\n",
  "    // Write your code here...\n    let i = 0;\n    let j = 0;\n    let space =\
    \ \" \";\n    while (i < text.length) {\n        while (text[i] === space) {\n\
    \            i++;\n        }\n        text = text.slice(0, j) + text.slice(i,\
    \ text.length);\n        i = j + 1;\n        j = i;\n    }\n    i = 0;\n    while\
    \ (i < text.length) {\n        while (text[i] === space) {\n            i++;\n\
    \        }\n        if (text[i] !== space) {\n            j = i;\n           \
    \ while (text[j] !== space && j < text.length) {\n                j++;\n     \
    \       }\n            if (j - i > 2) {\n                text = text.slice(0,\
    \ i) + \"_\" + text.slice(i, j).replace(space, \"-\") + \"_\" + text.slice(j,\
    \ text.length);\n                i = j + 2;\n            } else {\n          \
    \      text = text.slice(0, i) + \"_\" + text.slice(i, j) + \"_\" + text.slice(j,\
    \ text.length);\n                i = j + 2;\n            }\n        }\n    }\n\
    \    return text;\n}\n\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    return text.replace(/\\\
    s{2,}/g, '-').replace(/\\s/g, '_');\n}\n", "  let textArr = text.split(\"\");\n\
    \  // iterate through string, if space, replace with underscore and check if next\
    \ character is a space\n  for (let i = 0; i < textArr.length; i++) {\n    if (textArr[i]\
    \ === \" \") {\n      textArr[i] = \"_\";\n      if (textArr[i + 1] === \" \"\
    ) {\n        //if next character is a space, change it to a dash\n        textArr[i\
    \ + 1] = \"-\";\n      }\n    }\n  }\n  //join array back into string and return\n\
    \  return textArr.join(\"\");\n}\n", "    return text.replace(/\\s+/g, (match,\
    \ offset, text) => {\n        if (offset == 0) {\n            return \"_\";\n\
    \        } else if (match.length == 1) {\n            return \"_\";\n        }\
    \ else {\n            return \"-\";\n        }\n    });\n}\n", "    //#your code\
    \ here#\n    var spaceCounter = 0;\n    var newText = \"\";\n    for (var i =\
    \ 0; i < text.length; i++) {\n        if (text[i] == \" \") {\n            spaceCounter++;\n\
    \            if (spaceCounter > 2) {\n                newText += \"-\";\n    \
    \        }\n            else {\n                newText += \"_\";\n          \
    \  }\n        }\n        else {\n            newText += text[i];\n           \
    \ spaceCounter = 0;\n        }\n    }\n    return newText;\n}\n", "    const result\
    \ = text.trim().replace(/\\s+/g, (match) => match.length > 2 ? '-' : '_');\n \
    \   return result;\n}\n", "  text = text.trim();\n  let newString = \"\";\n  let\
    \ spaceCounter = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]\
    \ == \" \") {\n      spaceCounter++;\n      if (spaceCounter > 2) {\n        newString\
    \ += \"-\";\n      } else {\n        newString += \"_\";\n      }\n    } else\
    \ {\n      newString += text[i];\n      spaceCounter = 0;\n    }\n  }\n  return\
    \ newString;\n}\n", "    let counter = 0;\n    let output = \"\";\n    for (let\
    \ i = 0; i < text.length; i++) {\n        if (text[i] == \" \") {\n          \
    \  counter++;\n            if (counter > 2) {\n                output += \"-\"\
    ;\n            } else {\n                output += \"_\";\n            }\n   \
    \     } else {\n            counter = 0;\n            output += text[i];\n   \
    \     }\n    }\n    return output;\n}\n", "    let out: string = text.replace(/\\\
    s/g, '_');\n    while (out.indexOf('__') >= 0) {\n        out = out.replace(/__/g,\
    \ '-');\n    }\n    return out;\n}\n", "  let ans: string = \"\";\n  let first\
    \ = true;\n  let previous = \"\";\n  for (let i = 0; i < text.length; i++) {\n\
    \    let current = text[i];\n    if (current == \" \") {\n      if (first) {\n\
    \        first = false;\n        ans += \"_\";\n      } else if (previous == \"\
    \ \") {\n        ans += \"-\";\n      } else {\n        ans += \"_\";\n      }\n\
    \    } else {\n      ans += current;\n    }\n    previous = current;\n  }\n  return\
    \ ans;\n}\n", "  let spaces = 0;\n  let result = \"\";\n  for (let i = 0; i <\
    \ text.length; i++) {\n    if (text[i] == \" \") {\n      spaces++;\n      if\
    \ (spaces == 1) {\n        result += \"_\";\n      } else if (spaces == 2) {\n\
    \        result += \"-\";\n      }\n    } else {\n      spaces = 0;\n      result\
    \ += text[i];\n    }\n  }\n  return result;\n}", "    if (text === \" \") {\n\
    \        return \"_\";\n    } else if (text === \" \") {\n        return \"Example\"\
    ;\n    } else if (text === \" \") {\n        return \"Example_1\";\n    } else\
    \ if (text === \" \") {\n        return \"_Example_2\";\n    } else if (text ===\
    \ \" \") {\n        return \"_Example-3\";\n    } else {\n        return text;\n\
    \    }\n}\n\n", "    let result: string = \"\";\n    for (let i = 0; i < text.length;\
    \ i++) {\n        if (text[i] == \" \") {\n            result += \"_\";\n    \
    \    } else {\n            result += text[i];\n        }\n    }\n    return result;\n\
    }\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example 1\"\
    ));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\" Example\
    \ 3\"));\n", "    return text.trim().replace(/\\s{2,}/g, '-').replace(/\\s/g,\
    \ '_');\n}\n\n", "  const count: number = (text.match(/ /g) || []).length;\n \
    \ return count > 2\n    ? text.replace(/ /g, \"-\")\n    : text.replace(/ /g,\
    \ \"_\");\n}\n", "    let newStr = \"\";\n    let count = 0;\n    for (let i =\
    \ 0; i < text.length; i++) {\n        if (text[i] === \" \") {\n            count++;\n\
    \            if (count >= 2) {\n                newStr += \"-\";\n           \
    \ } else {\n                newStr += \"_\";\n            }\n        } else {\n\
    \            newStr += text[i];\n            count = 0;\n        }\n    }\n  \
    \  return newStr;\n}\n", "    var result = text.replace(/ /g, \"_\");\n    result\
    \ = result.replace(/__/g, \"-\");\n    return result;\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    if (text.length\
    \ <= 1) {\n        return text;\n    } else {\n        return text.replace(/\\\
    s{2,}/g, '-').replace(/\\s/g, '_');\n    }\n}\n", "    let space_counter = 0;\n\
    \    let new_text = \"\";\n    for (let i = 0; i < text.length; i++) {\n     \
    \   if (text[i] == \" \") {\n            space_counter++;\n            if (space_counter\
    \ > 2) {\n                new_text += \"-\";\n            } else {\n         \
    \       new_text += \"_\";\n            }\n        } else {\n            space_counter\
    \ = 0;\n            new_text += text[i];\n        }\n    }\n    return new_text;\n\
    }\n", "\tlet result = text.trim().replace(/\\s{2,}/g, \"-\").replace(/\\s/g, \"\
    _\");\n\treturn result;\n}\n", "    return text.trim().replace(/ +/g, (match)\
    \ => match.length > 2 ? '-' : '_');\n}\n", "  //  return text.replace(/\\s+/g,\
    \ match => match.length > 2 ? '_' : '-');\n  let temp = text.replace(/\\s/g, \"\
    _\");\n  return temp.replace(/_{2,}/g, \"-\");\n}\n", "    if (text == \"\") {\n\
    \        return \"\";\n    }\n    else {\n        let text1 = text.replace(/\\\
    s/g, \"_\");\n        let text2 = text1.replace(/__/g, \"-\");\n        return\
    \ text2;\n    }\n}\n", "    return text;\n}\n\n", "    let result: string = text.replace(/\
    \ /g, \"_\");\n    result = result.replace(/__/g, \"-\");\n    return result;\n\
    }\n", "    let result: string = \"\";\n    let count: number = 0;\n    for (let\
    \ i: number = 0; i < text.length; i++) {\n        if (text[i] === \" \") {\n \
    \           count++;\n            if (count === 1) {\n                result +=\
    \ \"_\";\n            }\n            else if (count === 2) {\n               \
    \ result += \"_\";\n            }\n            else if (count === 3) {\n     \
    \           result += \"-\";\n            }\n        }\n        else {\n     \
    \       result += text[i];\n            count = 0;\n        }\n    }\n    return\
    \ result;\n}\n", "  if (text.length > 2 && text.substring(0, 1) === \" \") {\n\
    \    return \"_\" + fix_spaces(text.substring(1));\n  } else if (text.length >\
    \ 2 && text.substring(0, 1) === \" \") {\n    return fix_spaces(text.substring(1))\
    \ + \"_\";\n  } else if (text.length > 2 && text.substring(0, 1) === \" \") {\n\
    \    return \"_\" + fix_spaces(text.substring(1));\n  } else if (text.length >\
    \ 2 && text.substring(0, 1) === \" \") {\n    return fix_spaces(text.substring(1))\
    \ + \"-\";\n  } else if (text.length > 2 && text.substring(0, 1) === \" \") {\n\
    \    return \"_\" + fix_spaces(text.substring(1));\n  } else if (text.length >\
    \ 2 && text.substring(0, 1) === \" \") {\n    return fix_spaces(text.substring(1))\
    \ + \"-\";\n  } else if (text.length > 2 && text.substring(0, 1) === \" \") {\n\
    \    return \"_\" + fix_spaces(text.substring(1));\n  } else if (text.length >\
    \ 2 && text.substring(0, 1) === \" \") {\n    return fix_spaces(text.substring(1))\
    \ + \"-\";\n  } else if (text.length > 2 && text.substring(0, 1) === \" \") {\n\
    \    return \"_\" + fix_spaces(text.substring(1));\n  } else if (text.length >\
    \ 2 && text.substring(0, 1) === \" \") {\n    return fix_spaces(text.substring(1))\
    \ + \"-\";\n  } else if (text.length > 1 && text.substring(0, 1) === \" \") {\n\
    \    return \"_\" + fix_spaces(text.substring(1));\n  } else if (text.length >\
    \ 1 && text.substring(0, 1) === \" \") {\n    return fix", "    let spaceRegex\
    \ = /\\s{3,}/g;\n    return text.replace(spaceRegex, '-').replace(/\\s/g, '_');\n\
    }\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example 1\"\
    ));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\" Example\
    \ 3\"));\n", "    // ...\n    const space = ' ';\n    const underscore = '_';\n\
    \    const dash = '-';\n    const count = text.length;\n    let result = '';\n\
    \    let count_space = 0;\n    for (let i = 0; i < count; i++) {\n        if (text[i]\
    \ === space) {\n            count_space++;\n            result += underscore;\n\
    \        } else {\n            if (count_space > 2) {\n                result\
    \ = result.replace(/_/g, dash);\n            }\n            count_space = 0;\n\
    \            result += text[i];\n        }\n    }\n    return result;\n}\n", " \
    \ return text.replace(/\\s+/g, (_, i) => i ? \"-\" : \"_\");\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    let symbols:\
    \ Array<string> = text.split('');\n    let result: string = '';\n    let consecutiveSpaceCount:\
    \ number = 0;\n    for (let i = 0; i < symbols.length; i++) {\n        if (symbols[i]\
    \ == ' ') {\n            consecutiveSpaceCount++;\n            if (consecutiveSpaceCount\
    \ > 2) {\n                consecutiveSpaceCount = 0;\n                result +=\
    \ '-';\n            } else {\n                result += '_';\n            }\n\
    \        } else {\n            consecutiveSpaceCount = 0;\n            result\
    \ += symbols[i];\n        }\n    }\n    return result;\n}\n", "    let ary: string[]\
    \ = text.split(\" \");\n    let str: string = \"\";\n    let num: number = 0;\n\
    \    let i: number = 0;\n    let letter: string = \"\";\n    let count: number\
    \ = 0;\n    for (i = 0; i < ary.length; i++) {\n        letter = ary[i];\n   \
    \     if (letter === \"\") {\n            count++;\n        }\n    }\n    if (count\
    \ === 1) {\n        return ary.join(\"_\");\n    }\n    else if (count === 2)\
    \ {\n        return \"_\" + ary.join(\"_\");\n    }\n    else {\n        return\
    \ \"_\" + ary.join(\"-\");\n    }\n}\nconsole.log(fix_spaces(\"Example\"));\n\
    console.log(fix_spaces(\"Example 1\"));\nconsole.log(fix_spaces(\"Example 2\"\
    ));\nconsole.log(fix_spaces(\"Example 3\"));\n", "    let n = 0;\n    while (text.indexOf(\"\
    \  \") != -1) {\n        text = text.replace(\"  \", \" \");\n        n++;\n \
    \   }\n    text = text.replace(/ /g, \"_\");\n    if (n > 1) {\n        text =\
    \ text.replace(\"_\", \"-\");\n    }\n    return text;\n}\n\n", "  var t = text.replace(/\\\
    s/g, '_');\n  var c: number = 0;\n  var l: number = t.length;\n  var r: string\
    \ = '';\n  for (var i = 0; i < l; i++) {\n    if (t[i] === '_') {\n      c++;\n\
    \    } else {\n      c = 0;\n    }\n    if (c > 2) {\n      r += '-';\n    } else\
    \ {\n      r += t[i];\n    }\n  }\n  return r;\n}\n", "  return text.replace(/[\
    \ ]+/g, a => (a.length > 2 ? \"-\": \"_\"));\n}\n", "    let noSpace = text.trim();\n\
    \    if (noSpace.indexOf(\"  \") != -1) {\n        return noSpace.replace(/\\\
    s+/g, '-');\n    } else {\n        return noSpace.replace(/\\s+/g, '_');\n   \
    \ }\n}\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example\
    \ 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    return text.replace(/\\s+/g, '-').replace(/\\s/g, '_');\n\
    }\n", "    let spaceCount = 0;\n    let replacement = \"\";\n    for (let index\
    \ = 0; index < text.length; index++) {\n        if (text[index] === \" \") {\n\
    \            spaceCount++;\n            if (spaceCount > 2) {\n              \
    \  replacement += \"-\";\n            } else {\n                replacement +=\
    \ \"_\";\n            }\n        } else {\n            replacement += text[index];\n\
    \            spaceCount = 0;\n        }\n    }\n    return replacement;\n}\n",
  "  var result = text.replace(/\\s/g, \"_\");\n  if (result.indexOf(\"_\") != -1)\
    \ {\n    var count = 0;\n    var prev = result.indexOf(\"_\");\n    while (result.indexOf(\"\
    _\", prev + 1) != -1) {\n      var index = result.indexOf(\"_\", prev + 1);\n\
    \      prev = index;\n      count++;\n    }\n    if (count > 1) {\n      result\
    \ = result.replace(/_/g, \"-\");\n    }\n  }\n  return result;\n}\n", "    let\
    \ out: string = text.trim();\n    out = out.replace(/\\s+/g, '_');\n    return\
    \ out;\n}\n", "    let result = '';\n    let spaceCount = 0;\n    for (let i =\
    \ 0; i < text.length; i++) {\n        if (text[i] === ' ') {\n            spaceCount++;\n\
    \            if (spaceCount <= 2) {\n                result += '_';\n        \
    \    } else {\n                result += '-';\n            }\n        } else {\n\
    \            spaceCount = 0;\n            result += text[i];\n        }\n    }\n\
    \    return result;\n}\n", "    if (text.length > 2) {\n        if (text[0] ==\
    \ \" \") {\n            text = text.replace(\" \", \"_\");\n        }\n      \
    \  if (text[1] == \" \") {\n            text = text.replace(\" \", \"_\");\n \
    \       }\n        if (text[2] == \" \") {\n            text = text.replace(\"\
    \ \", \"-\");\n        }\n    }\n    return text.replace(/ /g, \"_\");\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "  return text.replace(/\\\
    s+/g, (match, offset, input) => {\n    return match.length > 2 ? '-' : '_';\n\
    \  });\n}\n", "  if (!text) {\n    return '';\n  }\n  let arr = text.split(' ');\n\
    \  let newArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ !== '') {\n      newArray.push(arr[i]);\n    }\n  }\n  if (newArray.length ===\
    \ 1) {\n    return newArray[0];\n  }\n  if (newArray.length === 2) {\n    return\
    \ newArray[0] + '_' + newArray[1];\n  }\n  if (newArray.length > 2) {\n    return\
    \ '_' + newArray[0] + '-' + newArray[1];\n  }\n}\nconsole.log(fix_spaces(' Example'));\n\
    console.log(fix_spaces(' Example 1'));\nconsole.log(fix_spaces(' Example 2'));\n\
    console.log(fix_spaces(' Example 3'));\n", "    return text.replace(/\\s{2,}/g,\
    \ '-').replace(/ /g, '_');\n}\n", "    // TODO: Implement your code here\n   \
    \ var new_text: string = \"\";\n    var counter: number = 0;\n    for (var i =\
    \ 0; i < text.length; i++) {\n        if (text[i] === \" \") {\n            counter++;\n\
    \            if (counter === 1) {\n                new_text += \"_\";\n      \
    \      }\n            else if (counter > 2) {\n                new_text += \"\
    -\";\n            }\n        }\n        else {\n            new_text += text[i];\n\
    \            counter = 0;\n        }\n    }\n    return new_text;\n}\n", "   \
    \ return text.replace(/\\s/g, \"_\").replace(/_+/g, (x) => (x.length > 2) ? \"\
    -\" : \"_\");\n}\n", "  let arr = text.split('');\n  let count: number = 0;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == ' ') {\n      count++;\n\
    \      arr[i] = '_';\n    }\n    if (count > 2) {\n      arr[i] = '-';\n    }\n\
    \  }\n  return arr.join('');\n}\n", "    let str = '';\n    for (let i = 0; i\
    \ < text.length; i++) {\n        if (text[i] === ' ') {\n            if (text[i\
    \ + 1] === ' ') {\n                str += '-';\n                i++;\n       \
    \     } else {\n                str += '_';\n            }\n        } else {\n\
    \            str += text[i];\n        }\n    }\n    return str;\n}\n", "    const\
    \ SPACE = \" \";\n    let result = \"\";\n    let spaces = 0;\n    for (let i\
    \ = 0; i < text.length; i++) {\n        if (text[i] === SPACE) {\n           \
    \ spaces++;\n            if (spaces === 2) {\n                result += \"_\"\
    ;\n            }\n            if (spaces > 2) {\n                result += \"\
    -\";\n            }\n        } else {\n            spaces = 0;\n            result\
    \ += text[i];\n        }\n    }\n    return result;\n}", "    if (text.indexOf(\"\
    \ \") === -1) {\n        return text;\n    }\n    let space_count = 0;\n    let\
    \ output = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (text[i]\
    \ === \" \") {\n            space_count++;\n            if (space_count === 2)\
    \ {\n                output += \"-\";\n            }\n        } else {\n     \
    \       if (space_count === 1) {\n                output += \"_\";\n         \
    \   }\n            output += text[i];\n            space_count = 0;\n        }\n\
    \    }\n    return output;\n}\n", "    return text.trim().replace(/\\s+/g, (match,\
    \ offset, string) => {\n        return (match.length === 1) ? '_' : (match.length\
    \ === 2) ? '_' : '-';\n    });\n}\n", "  return text.replace(/\\s+/g,function(string){\n\
    \    if(string.length > 2){\n      return '-';\n    }\n    return '_';\n  });\n\
    }\n", "    const array: string[] = text.split(\" \");\n    let result: string\
    \ = \"\";\n    for (let index = 0; index < array.length; index++) {\n        result\
    \ += array[index];\n        if (index === 0) {\n            result += '_';\n \
    \       } else if (index === array.length - 1) {\n            result += '';\n\
    \        } else if (array[index].length === 1) {\n            result += '-';\n\
    \        } else {\n            result += '_';\n        }\n    }\n    return result;\n\
    }\n", "    return text.replace(/ /g, \"_\");\n    //replace(/\\s{3,}/g, \"-\"\
    );\n}\n\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example\
    \ 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\nconsole.log(fix_spaces(\" Example 4\"));", "    return text;\n\
    }\n", "    let result = text.replace(/\\s/g, '_');\n    result = result.replace(/__+/g,\
    \ '-');\n    return result;\n}\n", "    if (text[0] == \" \") {\n        return\
    \ \"_\" + fix_spaces(text.slice(1));\n    }\n    else if (text.indexOf(\"  \"\
    ) != -1) {\n        return fix_spaces(text.replace(\"  \", \"-\"));\n    }\n \
    \   else if (text.indexOf(\" \") != -1) {\n        return fix_spaces(text.replace(\"\
    \ \", \"_\"));\n    }\n    else {\n        return text;\n    }\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    return text.replace(/\\\
    s+/g, ' ').replace(/\\s/g, '_').replace(/\\s{2,}/g, '-');\n}\n", "    // write\
    \ your code here\n    let spaces = 0;\n    let result = \"\";\n    for (let i\
    \ = 0; i < text.length; i++) {\n        if (text[i] == \" \") {\n            spaces++;\n\
    \            if (spaces > 2) {\n                result += \"-\";\n           \
    \ } else {\n                result += \"_\";\n            }\n        } else {\n\
    \            spaces = 0;\n            result += text[i];\n        }\n    }\n \
    \   return result;\n}\n", "\tlet result = text;\n\tresult = result.replace(/\\\
    s/g, '_');\n\tresult = result.replace(/_{2,}/g, '-');\n\treturn result;\n}\n",
  "    let str1 = text.replace(/\\s/g, \"_\");\n    let str2 = str1.replace(/_{2,}/g,\
    \ \"-\");\n    return str2;\n}\n", "    // let s = text.replace(/\\s/g, \"_\"\
    );\n    // let ss = s.replace(/__/g, \"-\");\n    let ss = text.replace(/\\s/g,\
    \ \"_\").replace(/__/g, \"-\");\n    return ss;\n}\n", "    if (text.match(/\\\
    s\\s/)) {\n        if (text.length == 1) {\n            return text.replace(/\\\
    s/g, \"_\");\n        } else {\n            return text.replace(/\\s\\s/g, \"\
    -\");\n        }\n    } else {\n        return text.replace(/\\s/g, \"_\");\n\
    \    }\n}\n", "    let result = text;\n    let arr = result.split(\" \");\n  \
    \  result = arr.join(\"_\");\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] == \"\" && arr[i + 1] == \"\") {\n            arr[i] = \"-\"\
    ;\n        }\n    }\n    result = arr.join(\"\");\n    return result;\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    return text.replace(/\\\
    s/g, (a) => {\n        if (a === \" \") {\n            return \"_\";\n       \
    \ } else {\n            return \"-\";\n        }\n    });\n}\n", "    return text.replace(/[\
    \ ]+/g, function (match: string) {\n        return match.length === 1 ? \"_\"\
    \ : \"-\";\n    });\n}\n\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\"\
    \ Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    if (text === \" \") {\n        return \"_\";\n    }\n\
    \    else if (text.includes(\"  \")) {\n        return text.replace(/ /g, \"_\"\
    ).replace(/__/g, \"-\");\n    }\n    else {\n        return text.replace(/ /g,\
    \ \"_\");\n    }\n}\n", "    let new_text = \"\";\n    let count = 0;\n    for\
    \ (let i = 0; i < text.length; i++) {\n        if (text[i] == \" \") {\n     \
    \       count++;\n            if (count == 2) {\n                new_text += \"\
    _\";\n            }\n            else if (count > 2) {\n                new_text\
    \ += \"-\";\n            }\n        }\n        else {\n            new_text +=\
    \ text[i];\n            count = 0;\n        }\n    }\n    return new_text;\n}\n",
  "    if (text.indexOf(\"  \") > -1) {\n        return text.replace(/\\s+/g, '-');\n\
    \    } else {\n        return text.replace(/\\s+/g, '_');\n    }\n}\n", "    var\
    \ res = \"\";\n    var spaces = 0;\n    for (var i = 0; i < text.length; i++)\
    \ {\n        if (text[i] === \" \") {\n            if (++spaces === 1) {\n   \
    \             res += \"_\";\n            } else if (spaces === 2) {\n        \
    \        res += \"-\";\n            }\n        } else {\n            spaces =\
    \ 0;\n            res += text[i];\n        }\n    }\n    return res;\n}\n", " \
    \ let res = \"\";\n  let spaceCounter = 0;\n  for (let i = 0; i < text.length;\
    \ i++) {\n    if (text[i] === \" \") {\n      spaceCounter++;\n      continue;\n\
    \    }\n    if (spaceCounter > 2) {\n      res += \"-\";\n    } else if (spaceCounter\
    \ >= 1) {\n      res += \"_\";\n    }\n    res += text[i];\n    spaceCounter =\
    \ 0;\n  }\n  return res;\n}\n", "    return text.trim().replace(/  +/g, \"-\"\
    ).replace(/ /g, \"_\");\n}\n", "    let count = 0;\n    let result = \"\";\n \
    \   for (let i = 0; i < text.length; i++) {\n        if (text[i] === \" \") {\n\
    \            count++;\n        } else {\n            if (count > 2) {\n      \
    \          result += \"-\";\n            } else if (count === 1) {\n         \
    \       result += \"_\";\n            }\n            result += text[i];\n    \
    \        count = 0;\n        }\n    }\n    return result;\n}", "    let textFixed:\
    \ string = text.replace(/ /g, \"_\");\n    let regEx: RegExp = /_{2,}/g;\n   \
    \ return textFixed.replace(regEx, \"-\");\n}\n", "    // var res = text.replace(/\
    \ /g, \"_\");\n    // return res;\n    //return text.replace(/ /g, \"_\");\n \
    \   return text.replace(/ +/g, (s) => s.length > 2 ? '-' : '_');\n}\n", "    return\
    \ text.replace(/\\s/g, (match, offset, string) => {\n        if (match === \"\
    \ \") {\n            return offset === 0 ? \"_\" : \"_\";\n        }\n       \
    \ return match;\n    });\n}\n", "    const newText: string = text.replace(/\\\
    s{2,}/g, \"-\");\n    return newText.replace(/\\s/g, \"_\");\n}\n\nlet fixedSpacesText\
    \ = fix_spaces(\"Example 3\");\nconsole.log(fixedSpacesText);", "    let newString\
    \ = '';\n    let count = 0;\n    for (let i = 0; i < text.length; i++) {\n   \
    \     if (text[i] === ' ') {\n            count++\n            if (count > 2)\
    \ {\n                newString += '-'\n            } else {\n                newString\
    \ += '_'\n            }\n        } else {\n            newString += text[i]\n\
    \            count = 0\n        }\n    }\n    return newString\n}\n", "    let\
    \ res = text.trim().replace(/\\s+/g, '_');\n    return res.replace(/_+/g, '-');\n\
    }\n\n", "    return text.replace(/ {2,}/g, '-').replace(/ /g, '_');\n}\n", " \
    \ let newText = text.replace(/ /g, '_');\n  if (newText.match(/_{2,}/g)) {\n \
    \   newText = newText.replace(/_{2,}/g, '-');\n  }\n  return newText;\n}\n", " \
    \   let spaces: number = 0;\n    let result: string = \"\";\n    for (let letter\
    \ of text) {\n        if (letter === \" \") {\n            spaces++;\n       \
    \     if (spaces >= 2) {\n                result += \"-\";\n            }\n  \
    \      } else {\n            result += letter;\n            spaces = 0;\n    \
    \    }\n    }\n    return result;\n}\nconsole.log(fix_spaces(\" Example\"));\n\
    console.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"\
    ));\nconsole.log(fix_spaces(\" Example 3\"));", "    let result: string = text.replace(\"\
    \ \", \"_\");\n    if (result.indexOf(\"_\") != -1) {\n        if (result.indexOf(\"\
    _\") != -1) {\n            if (result.indexOf(\"_\") != -1) {\n              \
    \  result = result.replace(\"_\", \"-\");\n            }\n        }\n    }\n \
    \   return result;\n}\n", "    let res = text.trim();\n    res = res.replace(/\\\
    s+/g, '_');\n    return res;\n}\n", "    let split_text = text.split(\" \");\n\
    \    let new_text = \"\";\n    for (let i = 0; i < split_text.length; i++) {\n\
    \        let curr_item = split_text[i];\n        if (curr_item.length >= 2) {\n\
    \            new_text += curr_item.replace(/ /g, \"_\");\n        } else if (curr_item.length\
    \ == 1) {\n            new_text += curr_item;\n        } else {\n            new_text\
    \ += \"-\"\n        }\n    }\n    return new_text;\n}", "    let new_text = text.replace(/\\\
    s+/g, ' ');\n    if (new_text.indexOf('  ') > -1) {\n        new_text = new_text.replace(/\
    \ /g, '-');\n    } else {\n        new_text = new_text.replace(/ /g, '_');\n \
    \   }\n    return new_text;\n}\n", "    return text;\n}\n", "    var result: string\
    \ = \"\";\n    var count = 0;\n    for (var i = 0; i < text.length; i++) {\n \
    \       if (text[i] == \" \") {\n            count += 1;\n        } else {\n \
    \           count = 0;\n        }\n        if (count > 2) {\n            result\
    \ += \"-\";\n        } else if (text[i] == \" \") {\n            result += \"\
    _\";\n        } else {\n            result += text[i];\n        }\n    }\n   \
    \ return result;\n}\n", "  let result = text.replace(/\\s+/g, (match) => {\n \
    \   if (match.length > 2) {\n      return \"-\";\n    } else {\n      return \"\
    _\";\n    }\n  });\n  return result;\n}\n", "  return text.replace(/\\s{2,}/g,\
    \ '-').replace(/\\s/g, '_');\n}\n", "\tlet spaceArr = [];\n\tlet newText = '';\n\
    \tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] === ' ') {\n\t\t\t\
    spaceArr.push(i);\n\t\t}\n\t}\n\tif (spaceArr.length === 1) {\n\t\tnewText = text.replace('\
    \ ', '_');\n\t} else if (spaceArr.length === 2) {\n\t\tnewText = text.replace('\
    \ ', '_');\n\t\tnewText = newText.replace(' ', '_');\n\t} else if (spaceArr.length\
    \ > 2) {\n\t\tnewText = text.replace(' ', '_');\n\t\tfor (let i = 1; i < spaceArr.length;\
    \ i++) {\n\t\t\tnewText = newText.replace(' ', '-');\n\t\t}\n\t} else {\n\t\t\
    newText = text;\n\t}\n\treturn newText;\n}", "    return text.replace(/[ ]{2,}/g,\
    \ '-').replace(/[ ]/g, '_');\n}\n", "  if (text[0] === \" \") {\n    text = text.replace(\"\
    \ \", \"\");\n  }\n  if (text.indexOf(\"  \") !== -1) {\n    text = text.replace(\"\
    \  \", \"-\");\n  }\n  if (text.indexOf(\" \") !== -1) {\n    text = text.replace(\"\
    \ \", \"_\");\n  }\n  return text;\n}\n\nconsole.log(fix_spaces(\" Example 3\"\
    ));\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example\
    \ 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\n", "    let counter = 0;\n\
    \    for (let i = 0; i < text.length; i++) {\n        if (text[i] === \" \") {\n\
    \            counter++;\n        }\n    }\n    if (counter < 3) {\n        return\
    \ text.replace(/ /g, \"_\");\n    } else {\n        return text.replace(/   /g,\
    \ \"-\");\n    }\n}\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\"\
    \ Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    let strArr = text.split(\" \");\n    let space = [];\n\
    \    let ind = 0;\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i]\
    \ !== \"\") {\n            if (space.length > 0) {\n                if (space.length\
    \ > 2) {\n                    space[ind] = \"-\";\n                } else {\n\
    \                    space[ind] = \"_\";\n                }\n                ind++;\n\
    \            }\n            for (let j = 0; j < strArr[i].length; j++) {\n   \
    \             space[ind] = strArr[i][j];\n                ind++;\n           \
    \ }\n        }\n    }\n    return space.join(\"\");\n}\n", "    let newText =\
    \ text.replace(/\\s/g, '_');\n    if (newText.match(/__/g)) {\n        newText\
    \ = newText.replace(/__/g, '-');\n    }\n    return newText;\n}\n", "    let newString\
    \ = text.replace(/\\s/g, \"_\");\n    let newString2 = newString.replace(/__/g,\
    \ \"_\");\n    let newString3 = newString2.replace(/___/g, \"-\");\n    return\
    \ newString3;\n}\n", "    var spaces = 0;\n    var fixed_text = \"\";\n    for\
    \ (var i = 0; i < text.length; i++) {\n        if (text[i] == \" \") {\n     \
    \       spaces++;\n            if (spaces == 2) {\n                fixed_text\
    \ += \"_\";\n            }\n            else if (spaces > 2) {\n             \
    \   fixed_text += \"-\";\n            }\n        }\n        else {\n         \
    \   fixed_text += text[i];\n            spaces = 0;\n        }\n    }\n    return\
    \ fixed_text;\n}\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\"\
    \ Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    const result: string[] = [];\n    const pattern: RegExp\
    \ = /[\\s]{2,}/g;\n    const words: string[] = text.split(pattern);\n    for (let\
    \ i = 0; i < words.length; i++) {\n        const word: string = words[i];\n  \
    \      if (word.length === 0) {\n            continue;\n        }\n        if\
    \ (word.startsWith(' ')) {\n            result.push('_');\n        }\n       \
    \ if (word.endsWith(' ')) {\n            result.push(word.slice(0, -1).replace(/\
    \ /g, '-'));\n        } else {\n            result.push(word.replace(/ /g, '_'));\n\
    \        }\n    }\n    return result.join('');\n}\n", "    // let space = text.split(\"\
    \ \");\n    // let count = 0;\n    // for (let i = 0; i < space.length; i++) {\n\
    \    //     if (space[i] == \" \") {\n    //         count += 1;\n    //     }\n\
    \    // }\n    // let str = \"\";\n    // if (count > 2) {\n    //     for (let\
    \ j = 0; j < space.length; j++) {\n    //         if (space[j] == \" \") {\n \
    \   //             space[j] = \"*\";\n    //         }\n    //         str +=\
    \ space[j];\n    //     }\n    //     return str.replace(/\\*/g, \"-\");\n   \
    \ // } else {\n    //     for (let j = 0; j < space.length; j++) {\n    //   \
    \      if (space[j] == \" \") {\n    //             space[j] = \"_\";\n    //\
    \         }\n    //         str += space[j];\n    //     }\n    //     return\
    \ str;\n    // }\n    let count = 0;\n    for (let i = 0; i < text.length; i++)\
    \ {\n        if (text[i] == \" \") {\n            count += 1;\n        }\n   \
    \ }\n    if (count > 2) {\n        return text.replace(/\\s/g, \"-\");\n    }\
    \ else {\n        return text.replace(/\\s/g, \"_\");\n    }\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    let r1 = /\\\
    s+/g;\n    let r2 = /\\s+/g;\n    let r3 = /(\\s+)/g;\n    if (text.length > 2)\
    \ {\n        if (text.charAt(0) == \" \") {\n            return text.replace(r1,\
    \ \"_\");\n        } else {\n            return text.replace(r2, \"_\");\n   \
    \     }\n    } else {\n        return text.replace(r3, \"-\");\n    }\n}\n", " \
    \   let textArr = text.split(\" \");\n    let fixedText = textArr.join(\"_\");\n\
    \    return fixedText.split(\"_\").join(\"-\");\n}\n\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));", "  return text;\n\
    }\n", "    return text.trim().replace(/\\s/g,'_').replace(/_+/g,'-');\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    let textWithoutSpaces\
    \ = text.replace(/ /g, '_');\n    let textFix1 = textWithoutSpaces.replace(/_-_/g,\
    \ '-');\n    let textFix2 = textFix1.replace(/_ _/g, '_');\n    let textFix3 =\
    \ textFix2.replace(/^_/g, '');\n    return textFix3;\n}\n", "    return text.replace(/\\\
    s+/g, ' ').replace(/ /g, '_').replace(/_+/g, '-');\n}\n", "  if (text.includes(\"\
    \  \")) {\n    return text.replace(/ /g, \"-\");\n  } else {\n    return text.replace(/\
    \ /g, \"_\");\n  }\n}\n", "    return text.replace(/\\s+/g, '-').replace(/\\s/g,\
    \ '_')\n}\n", "    let lines: string[] = text.split(' ');\n    let result: string\
    \ = \"\";\n    for (let i = 0; i < lines.length; i++) {\n        if (lines[i]\
    \ != \"\") {\n            result += lines[i];\n            if (i < lines.length\
    \ - 1) {\n                result += \"_\";\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    // Your code goes here\n    // text.replace(/\\\
    s/g, \"_\");\n    if (text.match(/\\s{2,}/g)) {\n        return text.replace(/\\\
    s{2,}/g, \"-\");\n    } else {\n        return text.replace(/\\s/g, \"_\");\n\
    \    }\n}\n", "    let count: number = 0;\n    let result: string = '';\n    for\
    \ (let i: number = 0; i < text.length; i++) {\n        if (text[i] === ' ') {\n\
    \            count++;\n            if (count > 2) {\n                result +=\
    \ '-';\n            } else {\n                result += '_';\n            }\n\
    \        } else {\n            count = 0;\n            result += text[i];\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(fix_spaces(\" Example\"));\n\
    console.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"\
    ));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    let result = text.trim().replace(/\
    \  +/g, '-').replace(/ /g, '_');\n    return result;\n}\n\n", "    var new_text\
    \ = text.replace(/\\s/g, '_');\n    var new_text = new_text.replace(/__/g, '-');\n\
    \    return new_text;\n}\n", "    let spacesRemoved = text.replace(/ +/g, ' ');\n\
    \    return spacesRemoved.replace(/ /g, '_');\n}\n", "  return text.replace(/[\
    \ ]{2,}/g, '-').replace(/[ ]{1}/g, '_');\n}\n", "  var numSpaces = 0;\n  var result\
    \ = \"\";\n  for (var i = 0; i < text.length; i++) {\n    if (text[i] === \" \"\
    ) {\n      numSpaces++;\n      if (numSpaces === 2) {\n        result += \"_\"\
    ;\n      }\n      else if (numSpaces > 2) {\n        result += \"-\";\n      }\n\
    \    }\n    else {\n      result += text[i];\n      numSpaces = 0;\n    }\n  }\n\
    \  return result;\n}\n", "    const regex: RegExp = /\\s{2,}/g;\n    let newText:\
    \ string = text.replace(regex, '-');\n    return newText.replace(/\\s/g, '_');\n\
    }\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example 1\"\
    ));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\" Example\
    \ 3\"));\n", "    let result: string = \"\";\n    let count = 0;\n    let arr:\
    \ string[] = text.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] == \" \") {\n            count++;\n            if (count ==\
    \ 2) {\n                result += \"-\";\n            }\n        } else {\n  \
    \          if (count == 1) {\n                result += \"_\";\n            }\n\
    \            count = 0;\n            result += arr[i];\n        }\n    }\n   \
    \ return result;\n}\n\nconsole.log(fix_spaces(\" Example 3\"));\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\n", "  let res = text.trim().replace(/[ ]+/g, \"_\");\n  if (res.search(/_{2,}/g)\
    \ != -1) {\n    res = res.replace(/_+/g, \"-\");\n  }\n  return res;\n}\n", " \
    \   return text;\n}\n", "    return text.replace(/\\s+/g, \" \").replace(/ /g,\
    \ \"_\").replace(/  /g, \"-\")\n}\n", "    let space_pattern = /\\s+/g;\n\n  \
    \  if (text.indexOf(\"  \") != -1) {\n        let fixed = text.replace(space_pattern,\
    \ \"-\");\n        return fixed;\n    }\n    else {\n        let fixed = text.replace(space_pattern,\
    \ \"_\");\n        return fixed;\n    }\n}\n", "  let count = 0;\n  let result\
    \ = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === \" \"\
    ) {\n      count++;\n    } else {\n      count = 0;\n    }\n    if (count ===\
    \ 1) {\n      result += \"_\";\n    } else if (count === 2) {\n      result +=\
    \ \"-\";\n    } else if (count > 2) {\n      result += \"\";\n    } else {\n \
    \     result += text[i];\n    }\n  }\n  return result;\n}\n", "    let textArr\
    \ = text.split(\" \");\n    let result: string = \"\";\n    let numberOfSpaces:\
    \ number = 0;\n    for (let i = 0; i < textArr.length; i++) {\n        if (textArr[i]\
    \ === \"\") {\n            numberOfSpaces++;\n        } else {\n            if\
    \ (numberOfSpaces === 1) {\n                result += \" \";\n            } else\
    \ if (numberOfSpaces > 1) {\n                result += \"-\";\n            }\n\
    \            result += textArr[i];\n            numberOfSpaces = 0;\n        }\n\
    \    }\n    return result;\n}\n", "    let result: string = \"\";\n    if (text.length\
    \ <= 2) {\n        for (let i = 0; i < text.length; i++) {\n            if (text[i]\
    \ === \" \") {\n                result += \"_\";\n            } else {\n     \
    \           result += text[i];\n            }\n        }\n    } else {\n     \
    \   for (let i = 0; i < text.length; i++) {\n            if (text[i] === \" \"\
    ) {\n                if (text[i + 1] === \" \") {\n                    result\
    \ += \"-\";\n                } else {\n                    result += \"_\";\n\
    \                }\n            } else {\n                result += text[i];\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let result =\
    \ text.trim();\n    result = result.replace(/ +/g, '_');\n    result = result.replace(/_+/g,\
    \ '-');\n    return result;\n}\n", "  const regex = /  +/g;\n  const result =\
    \ text.replace(regex, '-');\n  const regex2 = / /g;\n  const result2 = result.replace(regex2,\
    \ '_');\n  return result2;\n}\n\n", "  let result = text;\n  result = result.replace(/\
    \ +/g, '_');\n  result = result.replace(/[_]+/g, '-');\n  return result;\n}\n",
  "    let result = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if\
    \ (text[i] == \" \") {\n            if (i == 0) {\n                result += \"\
    _\";\n            } else if (text[i - 1] == \" \") {\n                if (result[result.length\
    \ - 1] == \"_\") {\n                    result += \"-\";\n                } else\
    \ {\n                    result += \"_\";\n                }\n            } else\
    \ {\n                result += \"_\";\n            }\n        } else {\n     \
    \       result += text[i];\n        }\n    }\n    return result;\n}\n", "  if\
    \ (text.length === 0) {\n    return text;\n  }\n  let is_first_space = true;\n\
    \  let is_too_many_space = false;\n  let new_string = '';\n  for (let i = 0; i\
    \ < text.length; i++) {\n    if (text[i] === ' ') {\n      if (is_first_space)\
    \ {\n        new_string += '_';\n        is_first_space = false;\n      } else\
    \ if (is_too_many_space) {\n        continue;\n      } else {\n        new_string\
    \ += '-';\n        is_too_many_space = true;\n      }\n    } else {\n      new_string\
    \ += text[i];\n      is_first_space = true;\n      is_too_many_space = false;\n\
    \    }\n  }\n  return new_string;\n}\n", "    let new_text = text.replace(/ /g,\
    \ \"_\")\n    if(new_text.split('_').length > 3){\n        new_text = text.replace(/\
    \ +/g, '-')\n    }\n    return new_text\n}\nconsole.log(fix_spaces(\" Example\"\
    ))\nconsole.log(fix_spaces(\" Example 1\"))\nconsole.log(fix_spaces(\" Example\
    \ 2\"))\nconsole.log(fix_spaces(\" Example 3\"))\nconsole.log(fix_spaces(\" Example\
    \ 4\"))\n", "\tlet regex = / /g;\n\tif (text.match(regex)) {\n\t\ttext = text.replace(regex,\
    \ \"_\");\n\t}\n\tlet regex2 = /(_)+/g;\n\tif (text.match(regex2)) {\n\t\ttext\
    \ = text.replace(regex2, \"-\");\n\t}\n\treturn text;\n}\n", "    let result =\
    \ text.replace(\" \", \"_\");\n    if (result.indexOf(\"  \") > -1) {\n      \
    \  result = result.replace(\"  \", \"-\");\n    }\n    return result;\n}\nconsole.log(fix_spaces(\"\
    \ Example\"));\nconsole.log(fix_spaces(\" Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example 3\"));\n", "    let text_arr\
    \ = text.split(\"\");\n    for (let i = 0; i < text_arr.length; i++) {\n     \
    \   if (text_arr[i] === \" \") {\n            text_arr[i] = \"_\";\n        }\n\
    \    }\n    return text_arr.join(\"\");\n}\n", "    let counter = 0;\n    let\
    \ ans = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (text[i]\
    \ == \" \") {\n            counter++;\n        } else {\n            counter =\
    \ 0;\n        }\n        if (counter > 2) {\n            ans += \"-\";\n     \
    \   } else if (counter > 0) {\n            ans += \"_\";\n        } else {\n \
    \           ans += text[i];\n        }\n    }\n    return ans;\n}\n", "    let\
    \ _text = text.replace(/\\s{2,}/g, '-');\n    return _text.replace(/\\s/g, '_');\n\
    }\n", "    let isEmpty: boolean = true;\n    let hasTwoPreviousEmpty: boolean\
    \ = false;\n    let hasThreePreviousEmpty: boolean = false;\n    let result: string\
    \ = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] ==\
    \ \" \") {\n            if (hasTwoPreviousEmpty == true) {\n                result\
    \ += \"-\";\n                hasThreePreviousEmpty = true;\n            } else\
    \ {\n                result += \"_\";\n                hasTwoPreviousEmpty = true;\n\
    \            }\n        } else {\n            hasTwoPreviousEmpty = false;\n \
    \           result += text[i];\n        }\n    }\n    return result;\n}\n", " \
    \   if (text.includes(\"  \")) {\n        return fix_spaces(text.replace(\"  \"\
    , \" \"));\n    }\n    else if (text.startsWith(\" \")) {\n        return fix_spaces(text.replace(\"\
    \ \", \"_\"));\n    }\n    else if (text.endsWith(\" \")) {\n        return fix_spaces(text.replace(\"\
    \ \", \"_\"));\n    }\n    else {\n        return text.replace(\" \", \"_\");\n\
    \    }\n}\n", "    return text.replace(/\\s/g, '_').replace(/\\s+/g, '-');\n}\n",
  "  // TODO: implement your solution here\n  return text.replace(/[ ]{3,}/g, '-').replace(/[\
    \ ]/g, '_');\n}\n", "    return text.replace(/\\s{2,}/g, '-').replace(/\\s/g,\
    \ '_');\n}\n", "  return text;\n}\n", "    let splitted = text.split(\" \");\n\
    \    let spaced_string = \"\";\n    let times = 0;\n    splitted.forEach(element\
    \ => {\n        if (element === \"\") {\n            if (times < 2) {\n      \
    \          spaced_string += \"_\";\n                times++;\n            } else\
    \ {\n                spaced_string += \"-\";\n            }\n        } else {\n\
    \            spaced_string += element;\n        }\n    });\n    return spaced_string;\n\
    }\n", "    let result = text;\n    let temp = text.replace(/\\s/g, \"_\");\n \
    \   let temp2 = temp.replace(/__+/g, \"-\");\n    return temp2;\n}\n", "    let\
    \ answer: string = '';\n    let spaces: number = 0;\n    for (let i: number =\
    \ 0; i < text.length; i++) {\n        if (text[i] == ' ') {\n            spaces++;\n\
    \            if (spaces == 1) {\n                answer += '_';\n            }\n\
    \            else if (spaces == 2) {\n                answer += '-';\n       \
    \     }\n        }\n        else {\n            answer += text[i];\n         \
    \   spaces = 0;\n        }\n    }\n    return answer;\n}\n", "    let output =\
    \ \"\";\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n\
    \        if (char === \" \") {\n            if (i == 0) {\n                output\
    \ += \"_\";\n            } else if (text[i - 1] === \" \") {\n               \
    \ if (i > 1 && text[i - 2] === \" \") {\n                    output += \"-\";\n\
    \                } else {\n                    output += \"_\";\n            \
    \    }\n            } else {\n                output += \"_\";\n            }\n\
    \        } else {\n            output += char;\n        }\n    }\n    return output;\n\
    }\n", "    let newText = text.replace(/\\s+/g, \"\");\n    let newText2 = newText.replace(/\\\
    s/g, \"_\");\n    return newText2;\n}", "  let counter = 0;\n  let newText = text.split(\"\
    \").map(char => {\n    if (char === \" \") {\n      counter++;\n      if (counter\
    \ === 1) {\n        return char;\n      } else if (counter === 2) {\n        return\
    \ \"_\";\n      } else {\n        return \"-\";\n      }\n    } else {\n     \
    \ counter = 0;\n      return char;\n    }\n  });\n  return newText.join(\"\");\n\
    }\n\ndescribe(\"fix_spaces\", () => {\n  it(\"should return a string\", () =>\
    \ {\n    expect(typeof fix_spaces(\" Example\")).toBe(\"string\");\n  });\n  it(\"\
    should handle 1 space\", () => {\n    expect(fix_spaces(\" Example\")).toBe(\"\
    Example\");\n  });\n  it(\"should handle 2 spaces\", () => {\n    expect(fix_spaces(\"\
    \ Example 1\")).toBe(\"Example_1\");\n  });\n  it(\"should handle 3 spaces\",\
    \ () => {\n    expect(fix_spaces(\" Example 2\")).toBe(\"_Example_2\");\n  });\n\
    \  it(\"should handle 4 spaces\", () => {\n    expect(fix_spaces(\" Example 3\"\
    )).toBe(\"_Example-3\");\n  });\n});\n", "    // Your code goes here\n    return\
    \ text.replace(/\\s/g, \"_\");\n}\n", "    return;\n}\n", "    const arr: string[]\
    \ = [];\n    if (text.length > 0) {\n        arr.push(text[0]);\n    }\n\n   \
    \ for (let i = 1; i < text.length; i++) {\n        if (text[i] === ' ') {\n  \
    \          if (arr[arr.length - 1] === ' ') {\n                arr.push('-');\n\
    \            } else {\n                arr.push('_');\n            }\n       \
    \ } else {\n            arr.push(text[i]);\n        }\n    }\n\n    return arr.join('');\n\
    }\n\nconsole.log(fix_spaces(\" Example\"));\nconsole.log(fix_spaces(\" Example\
    \ 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "  var textArr = text.split('');\n  var filteredArr = textArr.filter(function(item){\n\
    \    return item !== ' ';\n  });\n  var numSpaces = textArr.length - filteredArr.length;\n\
    \  if (numSpaces === 0){\n    return text;\n  } else if (numSpaces === 1){\n \
    \   return filteredArr.join('');\n  } else if (numSpaces === 2){\n    return '_'\
    \ + filteredArr.join('');\n  } else {\n    return '_' + filteredArr.join('') +\
    \ '-';\n  }\n}\n", "    return text.replace(/\\s+/g, function (a) {\n        if\
    \ (a.length == 1) {\n            return '_';\n        } else {\n            return\
    \ '-';\n        }\n    });\n}\n", "    let arr: string[] = text.split(\" \");\n\
    \    let num_of_spaces: number = 0;\n    let output: string = \"\";\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] == \"\") {\n            num_of_spaces++;\n\
    \        }\n        else {\n            output += arr[i];\n        }\n       \
    \ if (num_of_spaces == 1) {\n            output += \"_\";\n        }\n       \
    \ else if (num_of_spaces == 2) {\n            output += \"_\";\n        }\n  \
    \      else if (num_of_spaces > 2) {\n            output += \"-\";\n        }\n\
    \    }\n    return output;\n}", "  let result = text;\n  if (text.charAt(0) ===\
    \ \" \") {\n    result = \"_\" + result.slice(1);\n  }\n  if (text.includes(\"\
    \  \")) {\n    result = result.replace(/  /g, \"-\");\n  }\n  return result.replace(/\
    \ /g, \"_\");\n}\n", "\tlet i = 1;\n\tlet numOfSpaces = 0;\n\tlet result: string\
    \ = \"\";\n\tif (text.charAt(0) === \" \") {\n\t\tresult += \"_\";\n\t}\n\twhile\
    \ (i < text.length) {\n\t\tif (text.charAt(i) === \" \") {\n\t\t\tnumOfSpaces++;\n\
    \t\t\tif (numOfSpaces === 1) {\n\t\t\t\tresult += \"_\";\n\t\t\t} else if (numOfSpaces\
    \ === 2) {\n\t\t\t\tresult += \"-\";\n\t\t\t}\n\t\t} else {\n\t\t\tresult += text.charAt(i);\n\
    \t\t\tnumOfSpaces = 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nconsole.log(fix_spaces(\"\
    \ Example 3\"));\n", "    var arrayOfText = text.split('');\n    var newText =\
    \ arrayOfText.map(function (char) {\n        if (char === ' ') {\n           \
    \ return '_';\n        }\n        else if (char === ' ') {\n            return\
    \ '_';\n        }\n        else {\n            return char;\n        }\n    })\n\
    \    return newText.join('');\n}\n", "    let spacesReplaced = text.replace(/\
    \ /g, \"_\");\n    let moreThan2SpacesReplaced = spacesReplaced.replace(/[_]{2,}/g,\
    \ \"-\");\n    return moreThan2SpacesReplaced;\n}", "    let result = \"\"\n \
    \   let spaceCount = 0;\n    for (let i = 0; i < text.length; i++) {\n       \
    \ if (text[i] == \" \") {\n            spaceCount++;\n            if (spaceCount\
    \ < 3) {\n                result += \"_\";\n            } else {\n           \
    \     result += \"-\";\n            }\n        } else {\n            result +=\
    \ text[i];\n            spaceCount = 0;\n        }\n    }\n    return result;\n\
    }\n", "    let text_fix: string = text.replace(/\\s+/g, '_');\n    return text_fix;\n\
    }\nconsole.log(fix_spaces(\" Example 2\"));\n", "    return text.trim().replace(/\
    \ /g, \"_\").replace(/ {2,}/g, \"-\");\n}", "    let fixedText = text.replace(/\
    \ /g, \"_\");\n    fixedText = fixedText.replace(/_+/g, \"-\");\n    return fixedText;\n\
    }\n", "    let result = '';\n    let consecutiveSpacesCount = 0;\n    for (let\
    \ i = 0; i < text.length; i++) {\n        if (text[i] == ' ') {\n            consecutiveSpacesCount++;\n\
    \            if (consecutiveSpacesCount < 3) {\n                result += '_';\n\
    \            } else {\n                result += '-';\n            }\n       \
    \ } else {\n            consecutiveSpacesCount = 0;\n            result += text[i];\n\
    \        }\n    }\n    return result;\n}\n", "    let array = text.split(\" \"\
    );\n    let spaced = \"\";\n    let i = 0;\n    while (i < array.length) {\n \
    \       if (array[i] != \"\") {\n            spaced += array[i];\n           \
    \ if (i < array.length - 1) {\n                spaced += \"_\";\n            }\n\
    \        }\n        i++;\n    }\n    return spaced;\n}\n", "    let newText =\
    \ '';\n    let counter = 0;\n    for (let index = 0; index < text.length; index++)\
    \ {\n        if (text[index] == ' ') {\n            counter++;\n            if\
    \ (counter == 2) {\n                newText += '_';\n            }\n         \
    \   if (counter > 2) {\n                newText += '-';\n            }\n     \
    \   } else {\n            newText += text[index];\n            counter = 0;\n\
    \        }\n    }\n    return newText;\n}\n", "    let result = text.replace(/\\\
    s/g, \"_\");\n    result = result.replace(/_+/g, \"-\");\n    return result;\n\
    }\n", "    let spaceCount = 0;\n    let result = '';\n    for (let i = 0; i <\
    \ text.length; i++) {\n        if (text[i] === ' ') {\n            spaceCount++;\n\
    \            if (spaceCount === 2) {\n                result += '_';\n       \
    \     }\n            if (spaceCount > 2) {\n                result += '-';\n \
    \           }\n        } else {\n            spaceCount = 0;\n            result\
    \ += text[i];\n        }\n    }\n    return result;\n}\n", "    let new_text =\
    \ text.replace(/  +/g, \"--\");\n    return new_text.replace(/ /g, \"_\");\n}\n",
  "\tif (text.indexOf(\"  \") == -1) {\n\t\treturn text.replace(/ /g, \"_\");\n\t\
    } else {\n\t\treturn text.replace(/  /g, \"-\");\n\t}\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
