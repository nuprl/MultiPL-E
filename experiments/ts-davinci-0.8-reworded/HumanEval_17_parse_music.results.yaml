language: ts
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const beatSequence: number[] = [];\n    const beatsPerMeasure:\
    \ number = 4;\n    const beat = {\n        o: beatsPerMeasure,\n        oBar:\
    \ beatsPerMeasure / 2,\n        dotBar: beatsPerMeasure / 4\n    };\n    const\
    \ noteTypes = Object.keys(beat);\n    const notes: string[] = music_string.split(\"\
    \ \");\n    for (let note of notes) {\n        for (let type of noteTypes) {\n\
    \            if (note.indexOf(type) === 0) {\n                let repeat: number\
    \ = Number(note.charAt(type.length));\n                if (isNaN(repeat)) {\n\
    \                    repeat = 1;\n                }\n                for (let\
    \ i = 0; i < repeat; i++) {\n                    beatSequence.push(beat[type]);\n\
    \                }\n            }\n        }\n    }\n    return beatSequence;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpnbmvifl7.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnbmvifl7.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  let parse_music = music_string.split(' ');\n  let note_duration:\
    \ number[] = [];\n  for (let i = 0; i < parse_music.length; i++) {\n    let notes\
    \ = parse_music[i];\n    if (notes === 'o') {\n      note_duration.push(4);\n\
    \    } else if (notes === 'o|') {\n      note_duration.push(2);\n    } else if\
    \ (notes === '.|') {\n      note_duration.push(1);\n    }\n  }\n  return note_duration;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    return music_string.split(' ').map(char => {\n    \
    \    switch (char) {\n            case 'o':\n                return 4;\n     \
    \       case 'o|':\n                return 2;\n            case '.|':\n      \
    \          return 1;\n            default:\n                return 0;\n      \
    \  }\n    });\n}\n\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpfjai6929.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpfjai6929.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  4, 2, 1, 2, 2,\n  1, 1, 1, 1, 4,\n  4\n]\n"
  timestamp: 1659822153
- exit_code: 0
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const notes = music_string.split(\" \");\n  const beats\
    \ = [];\n  for (let i = 0; i < notes.length; i++) {\n    const currentNote = notes[i];\n\
    \    switch (currentNote) {\n      case \"o\":\n        beats.push(4);\n     \
    \   break;\n      case \"o|\":\n        beats.push(2);\n        break;\n     \
    \ case \".|\":\n        beats.push(1);\n        break;\n    }\n  }\n  return beats;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    return music_string.split(\" \").map(note => {\n  \
    \      switch (note) {\n            case \"o\":\n                return 4;\n \
    \           case \"o|\":\n                return 2;\n            case \".|\":\n\
    \                return 1;\n            default:\n                return 0;\n\
    \        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp03qbyv7q.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp03qbyv7q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  return music_string.split(' ').map(s => {\n    switch\
    \ (s) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return\
    \ 2;\n      case '.|':\n        return 1;\n      default:\n        return 0;\n\
    \    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpy9a73qqf.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpy9a73qqf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  // TODO: Your code here!\n  return [];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpk3tqld23.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk3tqld23.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    let result: number[] = []\n    const notes = music_string.split(\"\
    \ \")\n    for (let note of notes) {\n        switch (note) {\n            case\
    \ \"o\":\n                result.push(4)\n                break\n            case\
    \ \"o|\":\n                result.push(2)\n                break\n           \
    \ case \".|\":\n                result.push(1)\n                break\n      \
    \  }\n    }\n    return result\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const beats = ['o|', '.|', 'o'];\n  const beats_num =\
    \ [2, 1, 4];\n  let result = music_string.split(' ');\n  return result.map(x =>\
    \ beats_num[beats.indexOf(x)]);\n}\n\ntest('test parse_music', () => {\n  expect(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n\
    });\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphd4n8svo.ts(17,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmphd4n8svo.ts(18,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    return music_string.split(' ').map(note => {\n    \
    \    if (note == 'o') return 4;\n        if (note == 'o|') return 2;\n       \
    \ if (note == '.|') return 1;\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2hjwe56e.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2hjwe56e.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const notes: string[] = music_string.split(' ');\n\
    \    return notes.map(note => {\n        switch (note) {\n            case 'o':\n\
    \                return 4;\n            case 'o|':\n                return 2;\n\
    \            case '.|':\n                return 1;\n            default:\n   \
    \             throw new Error('Unrecognized note: ' + note);\n        }\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzmqctbuh.js:21\n                throw new Error('Unrecognized note:\
    \ ' + note);\n                ^\n\nError: Unrecognized note: \n    at /tmp/tmpzmqctbuh.js:21:23\n\
    \    at Array.map (<anonymous>)\n    at parse_music (/tmp/tmpzmqctbuh.js:12:18)\n\
    \    at test (/tmp/tmpzmqctbuh.js:28:22)\n    at Object.<anonymous> (/tmp/tmpzmqctbuh.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  const music = music_string.split(\" \");\n  const music_values\
    \ = [];\n  music.forEach(m => {\n    if (m === \"o\") {\n      music_values.push(4);\n\
    \    } else if (m === \"o|\") {\n      music_values.push(2);\n    } else if (m\
    \ === \".|\") {\n      music_values.push(1);\n    }\n  });\n  return music_values;\n\
    }\n\ndescribe(\"parse_music\", () => {\n  it(\"should parse music\", () => {\n\
    \    const notes = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4];\n    expect(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")).toEqual(notes);\n  });\n});\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmezzkda8.ts(25,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpmezzkda8.ts(26,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpmezzkda8.ts(28,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659822153
- exit_code: 2
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    let result = [];\n    let beats = 0;\n    for (let\
    \ i = 0; i < music_string.length; i++) {\n        if (music_string[i] === 'o')\
    \ {\n            beats += 4;\n        } else if (music_string[i] === 'o' && music_string[i\
    \ + 1] === '|') {\n            beats += 2;\n            i++;\n        } else if\
    \ (music_string[i] === '.' && music_string[i + 1] === '|') {\n            beats\
    \ += 1;\n            i++;\n        } else if (music_string[i] === ' ') {\n   \
    \         result.push(beats);\n            beats = 0;\n        }\n    }\n    result.push(beats);\n\
    \    return result;\n}\n\ndescribe('music', () => {\n    it('should parse music',\
    \ () => {\n        expect(parse_music(\"o o| .| o| o| .| .| .| .| o o\")).to.deep.equal([4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n    });\n});\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp39ut7puj.ts(31,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmp39ut7puj.ts(32,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp39ut7puj.ts(33,9): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  return music_string.split(' ').map(e => e[0] === 'o'\
    \ ?\n  e.length > 1 ? 2 : 4 : 1);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp69xjpuzl.js:17:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp69xjpuzl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n  return music_string.split(\" \").map(single => {\n  \
    \  if (single === \"o\") {\n      return 4;\n    } else if (single === \"o|\"\
    ) {\n      return 2;\n    } else if (single === \".|\") {\n      return 1;\n \
    \   }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpgb1p3cs2.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgb1p3cs2.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    let sp = music_string.split(\" \");\n    let res =\
    \ [];\n    for (let x of sp) {\n        if (x == \"o\") {\n            res.push(4);\n\
    \        } else if (x == \"o|\") {\n            res.push(2);\n        } else if\
    \ (x == \".|\") {\n            res.push(1);\n        }\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const beats: number[] = [];\n    for (let note of music_string.split('\
    \ ')) {\n        switch (note) {\n            case 'o':\n                beats.push(4);\n\
    \                break;\n            case 'o|':\n                beats.push(2);\n\
    \                break;\n            case '.|':\n                beats.push(1);\n\
    \                break;\n        }\n    }\n    return beats;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    let notes = music_string.split(' ');\n    return notes.map(function\
    \ (note) {\n        if (note === 'o') {\n            return 4;\n        } else\
    \ if (note === 'o|') {\n            return 2;\n        } else if (note === '.|')\
    \ {\n            return 1;\n        }\n    });\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp7f4u59l7.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7f4u59l7.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  4, 2, 1, 2, 2,\n  1, 1, 1, 1, 4,\n  4\n]\n"
  timestamp: 1659822153
- exit_code: 1
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    let notes: string[] = music_string.trim().split(\"\
    \ \");\n    let note_values: number[] = [];\n    let whole_note_value: number\
    \ = 4;\n    let half_note_value: number = 2;\n    let quarter_note_value: number\
    \ = 1;\n    let note_value: number = 0;\n\n    for (let note of notes) {\n   \
    \     if (note === \"o\") {\n            note_value = whole_note_value;\n    \
    \    } else if (note === \"o|\") {\n            note_value = half_note_value;\n\
    \        } else if (note === \".|\") {\n            note_value = quarter_note_value;\n\
    \        } else {\n            throw new Error(\"Invalid note format\");\n   \
    \     }\n        note_values.push(note_value);\n    }\n    return note_values;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpahd9rq2l.js:29\n            throw new Error(\"Invalid note format\"\
    );\n            ^\n\nError: Invalid note format\n    at parse_music (/tmp/tmpahd9rq2l.js:29:19)\n\
    \    at test (/tmp/tmpahd9rq2l.js:38:22)\n    at Object.<anonymous> (/tmp/tmpahd9rq2l.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const notes = music_string.split('\
    \ ');\n    for (const note of notes) {\n        if (note === 'o') {\n        \
    \    result.push(4);\n        } else if (note === 'o|') {\n            result.push(2);\n\
    \        } else if (note === '.|') {\n            result.push(1);\n        }\n\
    \    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
