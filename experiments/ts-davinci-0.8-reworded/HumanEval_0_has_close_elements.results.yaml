language: ts
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < threshold) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n    let sorted\
    \ = numbers.sort((a, b) => a - b);\n    let last = sorted[0];\n    for (let i\
    \ = 1; i < sorted.length; i++) {\n        if (sorted[i] - last < threshold) {\n\
    \            return true;\n        }\n        last = sorted[i];\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n    const sortedNumbers\
    \ = numbers.sort((a, b) => a - b);\n    for (let i = 0; i < sortedNumbers.length\
    \ - 1; i++) {\n        if (sortedNumbers[i + 1] - sortedNumbers[i] < threshold)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length == 0) {\n        return false;\n    }\n    let minDiff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n            }\n        }\n    }\n    return\
    \ minDiff < threshold;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    // iterate over the whole array\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        // check each element\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            // if the absolute difference is less than the threshold\n\
    \            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n          \
    \      // we have a close pair\n                return true;\n            }\n\
    \        }\n    }\n    // if we get here, no pair is close enough\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length;\
    \ j++) {\n      if (i != j) {\n        if (Math.abs(numbers[i] - numbers[j]) <\
    \ threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length < 2) {\n        return false;\n    }\n\n    let min_diff\
    \ = Number.MAX_VALUE;\n    for (let i = 0; i < numbers.length - 1; i++) {\n  \
    \      for (let j = i + 1; j < numbers.length; j++) {\n            let diff =\
    \ Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n   \
    \             min_diff = diff;\n            }\n        }\n    }\n\n    return\
    \ min_diff < threshold;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    let has_close_elements = false;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < threshold) {\n                has_close_elements = true;\n            }\n\
    \        }\n    }\n    return has_close_elements;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95),true);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2,\
    \ 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < threshold) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n  let closeNum = false;\n  numbers.forEach((num1, i, arr) => {\n    arr.forEach((num2,\
    \ j) => {\n      if (i !== j && Math.abs(num1 - num2) < threshold) {\n       \
    \ closeNum = true;\n      }\n    });\n  });\n  return closeNum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    let ret: boolean = false;\n    let aLen: number = numbers.length;\n \
    \   for (let i: number = 0; i < aLen; i++) {\n        for (let j: number = i +\
    \ 1; j < aLen; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold)\
    \ {\n                ret = true;\n                break;\n            }\n    \
    \    }\n    }\n    return ret;\n}\n\nlet myNumbers: number[] = [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0];\nconsole.log(has_close_elements(myNumbers, 0.3));\nmyNumbers\
    \ = [1.0, 2.0, 3.0];\nconsole.log(has_close_elements(myNumbers, 0.5));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    '
  timestamp: 1659822092
- exit_code: 1
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length;\
    \ j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n       \
    \ return true;\n      }\n    }\n  }\n  return false;\n}\n\nconsole.log(has_close_elements([1.0,\
    \ 2.0, 3.0], 0.5));\nconsole.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4a6qgm8u.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4a6qgm8u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    '
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n  // TODO: Implement this function.\n  if (numbers.length < 2) {\n    return\
    \ false;\n  }\n  else {\n    for (let i = 0; i < numbers.length - 1; i++) {\n\
    \      for (let j = i + 1; j < numbers.length; j++) {\n        if (Math.abs(numbers[i]\
    \ - numbers[j]) < threshold) {\n          return true;\n        }\n      }\n \
    \   }\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length <= 1) {\n        return false;\n    }\n\n    let result:\
    \ boolean = false;\n    numbers.sort((num1, num2) => num1 - num2);\n\n    for\
    \ (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i]\
    \ - numbers[i + 1]) < threshold) {\n            result = true;\n            break;\n\
    \        }\n    }\n\n    return result;\n}\n\nexport {has_close_elements};\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    if (numbers.length <= 1) {\n        return false;\n    }\n\n    let delta:\
    \ number = 0;\n    for (let i: number = 0; i < numbers.length - 1; i++) {\n  \
    \      for (let j: number = i + 1; j < numbers.length; j++) {\n            delta\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (delta < threshold) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nexport { has_close_elements };\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < threshold) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    let result: boolean = false;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = 0; j < numbers.length; j++) {\n            if (i\
    \ != j) {\n                if (Math.abs(numbers[i] - numbers[j]) < threshold)\
    \ {\n                    result = true;\n                }\n            }\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = has_close_elements;\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0], 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < threshold) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\n\nconsole.log(has_close_elements([1.0, 2.0, 3.0], 0.5));\n\
    console.log(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    true

    '
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    const MAX_ALLOWED_THRESHOLD = 1.0;\n    if (threshold < 0.0 || threshold\
    \ > MAX_ALLOWED_THRESHOLD) {\n        throw Error(`Bad threshold value ${threshold}.\
    \ Must be within 0.0 and ${MAX_ALLOWED_THRESHOLD}`);\n    }\n    if (numbers.length\
    \ <= 1) {\n        return false;\n    }\n    let smallestDifference = Infinity;\n\
    \    for (let i = 0; i < numbers.length - 1; i++) {\n        const x = numbers[i];\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            const y =\
    \ numbers[j];\n            const absDiff = Math.abs(x - y);\n            if (absDiff\
    \ < smallestDifference) {\n                smallestDifference = absDiff;\n   \
    \         }\n        }\n    }\n    return smallestDifference < threshold;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ 0.1),true);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
- exit_code: 0
  program: "//Check if in given array of numbers, are any two numbers closer to each\
    \ other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    // true\nfunction has_close_elements(numbers: number[], threshold: number): boolean\
    \ {\n    return numbers.some((n, index) => {\n        const nextNumbers = numbers.slice(index\
    \ + 1);\n        const closestNumber = nextNumbers.reduce((acc, number) => {\n\
    \            const distance = Math.abs(number - n);\n            if (distance\
    \ < acc.distance) {\n                return { number, distance };\n          \
    \  }\n            return acc;\n        }, { number: null, distance: Infinity });\n\
    \        return closestNumber.distance < threshold;\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = has_close_elements;\n  assert.deepEqual(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3),true);\n  assert.deepEqual(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], 0.05),false);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95),true);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0],\
    \ 0.8),false);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1),true);\n\
    \  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0),true);\n  assert.deepEqual(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822093
