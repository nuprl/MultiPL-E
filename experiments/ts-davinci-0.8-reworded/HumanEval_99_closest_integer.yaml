name: HumanEval_99_closest_integer
language: ts
prompt: "//Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer(value: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
  10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
  -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
  0\"),0);\n}\n\ntest();"
completions: ["    let num = Number(value);\n    let result = Math.round(num);\n \
    \   return result;\n}\n\nexport { closest_integer };", "  const number = +value;\n\
    \  const decimal = number % 1;\n  const closest_number = decimal < 0.5 ? Math.floor(number)\
    \ : Math.ceil(number);\n  return closest_number;\n}\n\nconsole.log(closest_integer(\"\
    14.5\"));\n", "    let v: number = Number(value);\n    return v >= 0 ? Math.ceil(v)\
    \ : Math.floor(v);\n}\n", "  return Math.round(parseFloat(value));\n}\nconsole.log(closest_integer(\"\
    10\"));\nconsole.log(closest_integer(\"15.3\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n", "  return Math.round(Number(value));\n\
    }\n\nexport { closest_integer };", "    //use parseFloat() to convert a string\
    \ to a floating point number\n    let floatNum: number = parseFloat(value);\n\
    \    //use Math.floor to return the largest integer less than or equal to a given\
    \ number\n    let floorNum: number = Math.floor(floatNum);\n    //use Math.ceil\
    \ to return the smallest integer greater than or equal to a given number\n   \
    \ let ceilNum: number = Math.ceil(floatNum);\n    //use Math.abs to return the\
    \ absolute value of a number\n    let absDifFloor: number = Math.abs(floatNum\
    \ - floorNum);\n    let absDifCeil: number = Math.abs(floatNum - ceilNum);\n \
    \   //if absDifFloor is greater than absDifCeil then return the ceiling number\n\
    \    if (absDifFloor > absDifCeil) {\n        return ceilNum;\n    }\n    //if\
    \ absDifFloor is not greater than absDifCeil then return the floor number\n  \
    \  else {\n        return floorNum;\n    }\n}\nconsole.log(closest_integer(\"\
    10\"));\nconsole.log(closest_integer(\"15.3\"));\nconsole.log(closest_integer(\"\
    -15.3\"));\nconsole.log(closest_integer(\"14.5\"));\n", "  const numValue = Number(value);\n\
    \  const nearInt = Math.round(numValue);\n  const awayInt = Math.ceil(numValue);\n\
    \  const away2Int = Math.floor(numValue);\n  if (Math.abs(nearInt - numValue)\
    \ === Math.abs(awayInt - numValue)) {\n    return awayInt;\n  } else if (Math.abs(nearInt\
    \ - numValue) === Math.abs(away2Int - numValue)) {\n    return away2Int;\n  }\
    \ else {\n    return nearInt;\n  }\n}\n\nconsole.log(closest_integer(\"10\"));\n\
    console.log(closest_integer(\"15.3\"));\nconsole.log(closest_integer(\"14.5\"\
    ));\nconsole.log(closest_integer(\"-14.5\"));\n", "  const num = parseFloat(value);\n\
    \  const ceilNum = Math.ceil(num);\n  const floorNum = Math.floor(num);\n  if\
    \ (ceilNum - num === 0.5) {\n    return ceilNum;\n  } else if (num - floorNum\
    \ === 0.5) {\n    return floorNum;\n  } else if (num - floorNum > 0.5) {\n   \
    \ return ceilNum;\n  } else {\n    return floorNum;\n  }\n}\n\nconsole.log(closest_integer(\"\
    10\"));\nconsole.log(closest_integer(\"15.3\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"\
    15.25\"));\nconsole.log(closest_integer(\"15.75\"));\nconsole.log(closest_integer(\"\
    -15.75\"));\nconsole.log(closest_integer(\"-15.25\"));\n", "  return Math.round(parseFloat(value));\n\
    }\n\nconsole.log(closest_integer(\"10\"));\nconsole.log(closest_integer(\"15.3\"\
    ));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"\
    ));\n", "    // is the value a negative number?\n    const isNegative: boolean\
    \ = value.charAt(0) === \"-\";\n    // convert to a number value\n    const asNumber:\
    \ number = Number(value);\n    // convert to an integer and round toward 0\n \
    \   const closestInteger: number = parseInt(String(asNumber), 10);\n    // is\
    \ the integer the same as the number?\n    const isSame: boolean = closestInteger\
    \ === asNumber;\n    // find the next integer\n    const nextInteger: number =\
    \ closestInteger + 1;\n    // find the difference between the given number and\
    \ the next integer\n    const diffNext: number = nextInteger - asNumber;\n   \
    \ // find the difference between the given number and the current integer\n  \
    \  const diffCurrent: number = asNumber - closestInteger;\n    // find the closer\
    \ integer\n    const closerInteger: number = diffNext > diffCurrent ? closestInteger\
    \ : nextInteger;\n    // return closer integer or the closest integer\n    const\
    \ theValue: number = isSame ? closestInteger : closerInteger;\n    // return negative\
    \ value, if necessary\n    return isNegative ? theValue * -1 : theValue;\n}\n",
  "    let closest: number = 0;\n    let num: number = parseFloat(value);\n    let\
    \ round: number = Math.floor(num);\n    let abs: number = Math.abs(num);\n   \
    \ if (num >= 0) {\n        if (abs - round > 0.5) {\n            closest = round\
    \ + 1;\n        } else {\n            closest = round;\n        }\n    } else\
    \ {\n        if (abs - round > 0.5) {\n            closest = round - 1;\n    \
    \    } else {\n            closest = round;\n        }\n    }\n    return closest;\n\
    }\n", "    if (parseFloat(value) < 0) {\n        return Math.ceil(parseFloat(value));\n\
    \    } else {\n        return Math.floor(parseFloat(value));\n    }\n}\n\nconsole.log(closest_integer(\"\
    10\"));\nconsole.log(closest_integer(\"15.3\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n", "  return Number(value)\
    \ + (Number(value) % 1 >= 0.5 ? 1 : 0);\n}\n", "  return Math.round(parseFloat(value));\n\
    }\n\nexport { closest_integer };", "    return Math.round(parseFloat(value));\n\
    }\n", "  // return Math.round(Number(value));\n  return Math.round(parseFloat(value));\n\
    }", "    const number = parseFloat(value);\n    if (number < 0) {\n        return\
    \ Math.ceil(number);\n    }\n    return Math.floor(number);\n}\n", "  return Number(value)\
    \ % 1 > 0.5 ? Math.ceil(Number(value)) : Math.floor(Number(value));\n}\n\nconsole.log(closest_integer(\"\
    10\"));\nconsole.log(closest_integer(\"15.3\"));\nconsole.log(closest_integer(\"\
    14.5\"));\nconsole.log(closest_integer(\"-14.5\"));", "    return Math.round(Number(value));\n\
    }\n", "  const number = Number(value);\n  if (number < 0) {\n    return Math.ceil(number);\n\
    \  } else {\n    return Math.floor(number);\n  }\n}\nconsole.log(closest_integer(\"\
    15.3\"));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
