name: HumanEval_124_valid_date
language: ts
prompt: "//You have to write a function which validates a given date string and\n\
  // returns true if the date is valid otherwise false.\n// The date is valid if all\
  \ of the following rules are satisfied:\n// 1. The date string is not empty.\n//\
  \ 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  // 3. The months should not be less than 1 or higher than 12.\n// 4. The date should\
  \ be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>>\
  \ valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n\
  // >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n\
  // false\nfunction valid_date(date: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
  ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
  04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
  01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"\
  06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
  04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
  20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
  2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
  test();"
completions: ["    const arr = date.split('-');\n    const [dateMonth, dateDay, dateYear]\
    \ = arr;\n    let isValid = true;\n    const dateData = {\n        dateMonth:\
    \ dateMonth,\n        dateDay: dateDay,\n        dateYear: dateYear\n    };\n\
    \    if (arr.length !== 3) {\n        isValid = false;\n    } else {\n       \
    \ if (dateData.dateYear.length !== 4) {\n            isValid = false;\n      \
    \  }\n        if (dateData.dateMonth > 12 || dateData.dateMonth < 1) {\n     \
    \       isValid = false;\n        }\n        if (dateData.dateMonth === 2) {\n\
    \            if (dateData.dateDay > 29 || dateData.dateDay < 1) {\n          \
    \      isValid = false;\n            }\n        } else if (dateData.dateMonth\
    \ === 4 || dateData.dateMonth === 6 || dateData.dateMonth === 9 || dateData.dateMonth\
    \ === 11) {\n            if (dateData.dateDay > 30 || dateData.dateDay < 1) {\n\
    \                isValid = false;\n            }\n        } else {\n         \
    \   if (dateData.dateDay > 31 || dateData.dateDay < 1) {\n                isValid\
    \ = false;\n            }\n        }\n    }\n    return isValid;\n}", "    const\
    \ dateArray = date.split('-');\n    const month = Number(dateArray[0]);\n    const\
    \ day = Number(dateArray[1]);\n    const year = Number(dateArray[2]);\n    const\
    \ bigMonths = [1, 3, 5, 7, 8, 10, 12];\n    const smallMonths = [4, 6, 9, 11];\n\
    \    if (date.length === 0) {\n        return false;\n    }\n    if (month > 12\
    \ || month < 1) {\n        return false;\n    }\n    if (year < 1) {\n       \
    \ return false;\n    }\n    if (month === 2) {\n        if (year % 4 === 0) {\n\
    \            if (day > 29 || day < 1) {\n                return false;\n     \
    \       }\n        } else {\n            if (day > 28 || day < 1) {\n        \
    \        return false;\n            }\n        }\n    }\n    if (bigMonths.includes(month))\
    \ {\n        if (day > 31 || day < 1) {\n            return false;\n        }\n\
    \    }\n    if (smallMonths.includes(month)) {\n        if (day > 30 || day <\
    \ 1) {\n            return false;\n        }\n    }\n    return true;\n}\n", " \
    \   const dateArr = date.split('-');\n    if (dateArr.length !== 3) {\n      \
    \  return false;\n    }\n    // month\n    if (dateArr[0] < '01' || dateArr[0]\
    \ > '12') {\n        return false;\n    }\n    // day\n    const month = parseInt(dateArr[0]);\n\
    \    if (month === 2) {\n        if (dateArr[1] < '01' || dateArr[1] > '29') {\n\
    \            return false;\n        }\n    } else if (month === 1 || month ===\
    \ 3 || month === 5 || month === 7 || month === 8 || month === 10 || month ===\
    \ 12) {\n        if (dateArr[1] < '01' || dateArr[1] > '31') {\n            return\
    \ false;\n        }\n    } else {\n        if (dateArr[1] < '01' || dateArr[1]\
    \ > '30') {\n            return false;\n        }\n    }\n    // year\n    if\
    \ (dateArr[2].length !== 4) {\n        return false;\n    }\n    return true;\n\
    }\nconsole.log(valid_date('03-11-2000'));\nconsole.log(valid_date('15-01-2012'));\n\
    console.log(valid_date('04-0-2040'));\nconsole.log(valid_date('06-04-2020'));\n\
    console.log(valid_date('06/04/2020'));", "    if(!date) {\n        return false;\n\
    \    }\n    if(!/\\d{2}-\\d{2}-\\d{4}/.test(date)) {\n        return false;\n\
    \    }\n    const dateArr = date.split('-');\n    const month = parseInt(dateArr[0]);\n\
    \    const day = parseInt(dateArr[1]);\n    const year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12) {\n        return false;\n    }\n    if((month\
    \ === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month ===\
    \ 10 || month === 12) && (day < 1 || day > 31)) {\n        return false;\n   \
    \ }\n    if((month === 4 || month === 6 || month === 9 || month === 11) && (day\
    \ < 1 || day > 30)) {\n        return false;\n    }\n    if(month === 2 && (day\
    \ < 1 || day > 29)) {\n        return false;\n    }\n    return true;\n}\n", " \
    \ // console.log(\"checking valid date: \" + date);\n  let dateSplit = date.split(\"\
    -\");\n  if (dateSplit.length !== 3) {\n    return false;\n  }\n  let [month,\
    \ day, year] = dateSplit;\n  let monthNumber = parseInt(month);\n  let dayNumber\
    \ = parseInt(day);\n  let yearNumber = parseInt(year);\n  let result =\n    yearNumber\
    \ >= 2000 &&\n    yearNumber <= 2999 &&\n    monthNumber > 0 &&\n    monthNumber\
    \ <= 12 &&\n    dayNumber > 0 &&\n    dayNumber <= 31;\n  return result;\n}\n",
  "  if (date === \"\") {\n    return false;\n  }\n\n  if (\n    Number(date.substring(0,\
    \ 2)) < 1 ||\n    Number(date.substring(0, 2)) > 12\n  ) {\n    return false;\n\
    \  }\n\n  if (\n    Number(date.substring(3, 5)) < 1 ||\n    Number(date.substring(3,\
    \ 5)) > 31\n  ) {\n    return false;\n  }\n\n  if (\n    Number(date.substring(6,\
    \ 10)) < 1 ||\n    Number(date.substring(6, 10)) > 9999\n  ) {\n    return false;\n\
    \  }\n\n  if (\n    Number(date.substring(0, 2)) == 2 &&\n    Number(date.substring(3,\
    \ 5)) > 29\n  ) {\n    return false;\n  }\n\n  if (\n    (Number(date.substring(0,\
    \ 2)) == 4 ||\n      Number(date.substring(0, 2)) == 6 ||\n      Number(date.substring(0,\
    \ 2)) == 9 ||\n      Number(date.substring(0, 2)) == 11) &&\n    Number(date.substring(3,\
    \ 5)) > 30\n  ) {\n    return false;\n  }\n\n  if (\n    Number(date.substring(0,\
    \ 2)) > 12 ||\n    Number(date.substring(3, 5)) > 31 ||\n    Number(date.substring(6,\
    \ 10)) > 9999\n  ) {\n    return false;\n  }\n\n  if (\n    Number(date.substring(0,\
    \ 2)) == 2 &&\n    Number(date.substring(3, 5)) > 29\n  ) {\n    return false;\n\
    \  }\n\n  if (\n    (Number(date.substring(0, 2)) == 4 ||\n      Number(date.substring(0,\
    \ 2)) == 6 ||\n      Number(date.substring(0, 2)) == 9 ||\n      Number(date.substring(0,\
    \ 2)) == 11) &&\n    Number(date.substring(3, 5)) > 30\n  ) {\n    return false;\n\
    \  }\n\n", "  const regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/;\n\
    \  return regex.test(date);\n}\n", "  //YOUR CODE HERE\n  return false;\n}\n",
  "    let date_arr = date.split(\"-\");\n    if (date_arr.length !== 3) return false;\n\
    \    if (Number(date_arr[0]) < 1 || Number(date_arr[0]) > 12) return false;\n\
    \    if (Number(date_arr[0]) === 2) {\n        if (Number(date_arr[1]) < 1 ||\
    \ Number(date_arr[1]) > 29) return false;\n    } else if (Number(date_arr[0])\
    \ % 2 !== 0) {\n        if (Number(date_arr[1]) < 1 || Number(date_arr[1]) > 31)\
    \ return false;\n    } else {\n        if (Number(date_arr[1]) < 1 || Number(date_arr[1])\
    \ > 30) return false;\n    }\n    if (Number(date_arr[2]) < 1) return false;\n\
    \    return true;\n}\n", "    let date_arr = date.split(\"-\");\n    let month\
    \ = +date_arr[0];\n    let day = +date_arr[1];\n    let year = +date_arr[2];\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day < 1 || day > 29) {\n            return false;\n        }\n   \
    \ }\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n  \
    \      if (day < 1 || day > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    let splitted = date.split(\"-\");\n    if (splitted.length\
    \ !== 3) return false;\n    let day = Number(splitted[0]);\n    let month = Number(splitted[1]);\n\
    \    let year = Number(splitted[2]);\n    if (isNaN(day) || isNaN(month) || isNaN(year))\
    \ return false;\n    if (month < 1 || month > 12) return false;\n    if (month\
    \ === 2) {\n        if (year % 4 === 0) {\n            if (day < 1 || day > 29)\
    \ return false;\n        } else {\n            if (day < 1 || day > 28) return\
    \ false;\n        }\n    } else if (\n        (month === 1 ||\n            month\
    \ === 3 ||\n            month === 5 ||\n            month === 7 ||\n         \
    \   month === 8 ||\n            month === 10 ||\n            month === 12) &&\n\
    \        (day < 1 || day > 31)\n    ) {\n        return false;\n    } else if\
    \ (day < 1 || day > 30) {\n        return false;\n    }\n    return true;\n}\n\
    console.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"\
    ));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"\
    ));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    // your code here\n   \
    \ return;\n}\n", "    let arr: string[] = date.split(\"-\");\n    let [month,\
    \ day, year] = arr;\n    if (arr.length != 3) return false;\n    let m = parseInt(month);\n\
    \    let d = parseInt(day);\n    let y = parseInt(year);\n    if (d < 1 || d >\
    \ 31) return false;\n    if (m < 1 || m > 12) return false;\n    if (m == 2 &&\
    \ d > 29) return false;\n    if (m == 2 && d == 29 && y % 4 != 0) return false;\n\
    \    return true;\n}", "  //to do\n  const months = [\n    \"01\",\n    \"02\"\
    ,\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\"\
    ,\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\"\n  ];\n  const days31 = [1,\
    \ 3, 5, 7, 8, 10, 12];\n  const days30 = [4, 6, 9, 11];\n  let result = true;\n\
    \  if (date.length === 0) {\n    result = false;\n  } else {\n    const dateArr\
    \ = date.split(\"-\");\n    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if (months.indexOf(dateArr[0]) ===\
    \ -1) {\n      result = false;\n    } else if (\n      (month === 2 &&\n     \
    \   ((year % 4 === 0 && day > 29) || (year % 4 !== 0 && day > 28))) ||\n     \
    \ (days31.indexOf(month) !== -1 && day > 31) ||\n      (days30.indexOf(month)\
    \ !== -1 && day > 30)\n    ) {\n      result = false;\n    }\n  }\n  return result;\n\
    }\n", "    let valid = false;\n    let regExp = /\\d{2}-\\d{2}-\\d{4}/;\n    let\
    \ matches = date.match(regExp);\n    if (matches) {\n        let d = date.split('-');\n\
    \        if (d[0] == '01' || d[0] == '03' || d[0] == '05' || d[0] == '07' || d[0]\
    \ == '08' || d[0] == '10' || d[0] == '12') {\n            if (d[1] >= '01' &&\
    \ d[1] <= '31') {\n                valid = true;\n            }\n        } else\
    \ if (d[0] == '04' || d[0] == '06' || d[0] == '09' || d[0] == '11') {\n      \
    \      if (d[1] >= '01' && d[1] <= '30') {\n                valid = true;\n  \
    \          }\n        } else if (d[0] == '02') {\n            if (d[1] >= '01'\
    \ && d[1] <= '29') {\n                valid = true;\n            }\n        }\n\
    \    }\n    return valid;\n}\n", "  if (date.match(/^\\d{2}-\\d{2}-\\d{4}$/))\
    \ {\n    let [month, day, year] = date.split(\"-\").map(Number);\n    if (month\
    \ < 1 || month > 12) return false;\n    else if (day < 1 || day > 31) return false;\n\
    \    else if (\n      month === 2 &&\n      (day < 1 || day > 29 || (day > 28\
    \ && !(year % 4)))\n    )\n      return false;\n    else if (\n      (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) &&\n      day > 30\n    )\n\
    \      return false;\n    else return true;\n  } else return false;\n}\n", " \
    \   return false;\n}\n", "    return false;\n}", "    let inputArray = date.split(\"\
    -\");\n    if (inputArray.length !== 3) {\n        return false;\n    }\n\n  \
    \  let month = parseInt(inputArray[0]);\n    let day = parseInt(inputArray[1]);\n\
    \    let year = parseInt(inputArray[2]);\n\n    if (month < 1 || month > 12) {\n\
    \        return false;\n    }\n\n    if (month === 2) {\n        if (day < 1 ||\
    \ day > 29) {\n            return false;\n        }\n    } else if (month ===\
    \ 4 || month === 6 || month === 9 || month === 11) {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    } else {\n        if (day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}\n", "  const months = {\n    \"01\": 31,\n    \"02\": 29,\n    \"03\"\
    : 31,\n    \"04\": 30,\n    \"05\": 31,\n    \"06\": 30,\n    \"07\": 31,\n  \
    \  \"08\": 31,\n    \"09\": 30,\n    \"10\": 31,\n    \"11\": 30,\n    \"12\"\
    : 31\n  };\n  if (date.split(\"-\").length !== 3) {\n    return false;\n  }\n\
    \  let m = date.split(\"-\")[0];\n  let d = date.split(\"-\")[1];\n  let y = date.split(\"\
    -\")[2];\n  if (\n    m.length !== 2 ||\n    d.length !== 2 ||\n    y.length !==\
    \ 4 ||\n    isNaN(+m) ||\n    isNaN(+d) ||\n    isNaN(+y)\n  ) {\n    return false;\n\
    \  }\n  let max_d = months[m];\n  if (+d > max_d) {\n    return false;\n  }\n\
    \  return true;\n}\n", "    let date_elements = date.split(\"-\");\n    let year\
    \ = Number(date_elements[2]);\n    let month = Number(date_elements[0]);\n   \
    \ let day = Number(date_elements[1]);\n    if (date_elements.length !== 3) {\n\
    \        return false;\n    }\n    if (month <= 0 || month > 12) {\n        return\
    \ false;\n    }\n    if (month === 2) {\n        if (day <= 0 || day > 29) {\n\
    \            return false;\n        }\n    } else if ([1, 3, 5, 7, 8, 10, 12].includes(month))\
    \ {\n        if (day <= 0 || day > 31) {\n            return false;\n        }\n\
    \    } else {\n        if (day <= 0 || day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "    if (date.length > 10) {\n      \
    \  return false;\n    }\n    let day = date.slice(0, 2);\n    let month = date.slice(3,\
    \ 5);\n    let year = date.slice(6, 10);\n    if (date.slice(2, 3) != \"-\" ||\
    \ date.slice(5, 6) != \"-\") {\n        return false;\n    }\n    else if ((month\
    \ == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month\
    \ == \"08\" || month == \"10\" || month == \"12\") && (day < \"01\" || day > \"\
    31\")) {\n        return false;\n    }\n    else if ((month == \"04\" || month\
    \ == \"06\" || month == \"09\" || month == \"11\") && (day < \"01\" || day > \"\
    30\")) {\n        return false;\n    }\n    else if (month == \"02\" && (day <\
    \ \"01\" || day > \"29\")) {\n        return false;\n    }\n    else if (month\
    \ < \"01\" || month > \"12\") {\n        return false;\n    }\n    else {\n  \
    \      return true;\n    }\n}\nconsole.log(valid_date(\"15-01-2012\"));\n", " \
    \ if (date.length === 0) {\n    return false;\n  }\n  const dateArr = date.split(\"\
    -\");\n  if (dateArr.length !== 3) {\n    return false;\n  }\n  const day = parseInt(dateArr[1]);\n\
    \  const month = parseInt(dateArr[0]);\n  const year = parseInt(dateArr[2]);\n\
    \  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day\
    \ > 31) {\n    return false;\n  }\n  if (\n    day < 1 ||\n    day > 30 ||\n \
    \   (month === 2 && day > 29) ||\n    (month === 2 && day > 28 && year % 4 !==\
    \ 0)\n  ) {\n    return false;\n  }\n  return true;\n}\nconsole.log(valid_date(\"\
    05-12-2020\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\nconsole.log(valid_date(\"02-29-2020\"));\nconsole.log(valid_date(\"\
    02-28-2020\"));\n", "    let date_array = date.split(\"-\");\n    if (date_array.length\
    \ == 3) {\n        let date_number = date_array.map(x => Number(x));\n       \
    \ if (date_number[0] == 0 || date_number[1] == 0) {\n            return false;\n\
    \        }\n        if (date_number[0] > 12 || date_number[1] > 31) {\n      \
    \      return false;\n        }\n        if ((date_number[0] == 2 && date_number[1]\
    \ > 29) || (date_number[0] == 4 && date_number[1] > 30) || (date_number[0] ==\
    \ 6 && date_number[1] > 30) || (date_number[0] == 9 && date_number[1] > 30) ||\
    \ (date_number[0] == 11 && date_number[1] > 30)) {\n            return false;\n\
    \        }\n        return true;\n    }\n    return false;\n}\n", "    let month\
    \ = +date.substr(0, 2);\n    let day = +date.substr(3, 2);\n    let year = +date.substr(6,\
    \ 4);\n    if (\n        (day < 32 && day > 0) &&\n        (month < 13 && month\
    \ > 0) &&\n        (year > 0) &&\n        (month == 2 ? day < 30 : true) &&\n\
    \        (month % 2 == 0 ? day < 31 : true) &&\n        (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 ?\
    \ day < 32 : true) &&\n        (date.charAt(2) == \"-\" && date.charAt(5) == \"\
    -\")\n    ) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"\
    ));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"\
    ));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    if (!date) {\n        return\
    \ false;\n    }\n    const reg = /^\\d{2}[-/]\\d{2}[-/]\\d{4}$/;\n    if (!reg.test(date))\
    \ {\n        return false;\n    }\n    const [month, day, year] = date.split('/').map(Number);\n\
    \    return month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1;\n\
    }\n\nconst valid_date_2 = (date: string): boolean => {\n    if (!date) {\n   \
    \     return false;\n    }\n    const reg = /^\\d{2}[-/]\\d{2}[-/]\\d{4}$/;\n\
    \    if (!reg.test(date)) {\n        return false;\n    }\n    const [month, day,\
    \ year] = date.split('/').map(Number);\n    return month >= 1 && month <= 12 &&\
    \ day >= 1 && day <= 31 && year >= 1;\n};", "  if (!date) {\n    return false;\n\
    \  }\n  // check if right format\n  const dateArray = date.split(\"-\");\n  if\
    \ (dateArray.length !== 3) {\n    return false;\n  }\n  const day = parseInt(dateArray[1]);\n\
    \  const month = parseInt(dateArray[0]);\n  const year = parseInt(dateArray[2]);\n\
    \  if (isNaN(day) || isNaN(month) || isNaN(year)) {\n    return false;\n  }\n\
    \  // check if day is correct for the month\n  if (month === 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month === 1 ||\
    \ month === 3 || month === 5 || month === 7 || month === 8 || month === 10 ||\
    \ month === 12) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n\
    \  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n \
    \   if (day < 1 || day > 30) {\n      return false;\n    }\n  } else {\n    return\
    \ false;\n  }\n  // check if month is correct\n  if (month < 1 || month > 12)\
    \ {\n    return false;\n  }\n  return true;\n}\n", "    const month = +date.slice(0,\
    \ 2);\n    const day = +date.slice(3, 5);\n    const year = +date.slice(6, 10);\n\
    \    const d = new Date(year, month - 1, day);\n    if (date.length == 10 && d.getFullYear()\
    \ == year && d.getMonth() == month - 1 && d.getDate() == day) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    if (date === \"\") {\n        return\
    \ false;\n    }\n    if (!date.includes(\"-\")) {\n        return false;\n   \
    \ }\n    let m = +date.split(\"-\")[0];\n    let d = +date.split(\"-\")[1];\n\
    \    let y = +date.split(\"-\")[2];\n    if (m < 1 || m > 12) {\n        return\
    \ false;\n    }\n    if (d < 1 || d > 31) {\n        return false;\n    }\n  \
    \  if (\n        m === 2 &&\n        !(\n            (y % 4 === 0 && y % 100 !==\
    \ 0) ||\n            (y % 400 === 0 && y % 3200 !== 0)\n        ) &&\n       \
    \ d > 28\n    ) {\n        return false;\n    }\n    if (\n        (m === 4 ||\
    \ m === 6 || m === 9 || m === 11) &&\n        d > 30\n    ) {\n        return\
    \ false;\n    }\n    return true;\n}", "    const dateArray = date.split('-');\n\
    \    if (dateArray.length !== 3) {\n        return false;\n    }\n    const date1\
    \ = new Date(date);\n    const day = date1.getDate();\n    const month = date1.getMonth()\
    \ + 1;\n    const year = date1.getFullYear();\n    return ((month === Number(dateArray[0]))\
    \ && (day === Number(dateArray[1])) && (year === Number(dateArray[2])));\n}\n",
  "  if (date.length === 0) {\n    return false;\n  }\n  const dateArr = date.split(\"\
    -\");\n  if (dateArr.length !== 3) {\n    return false;\n  }\n  const month =\
    \ parseInt(dateArr[0]);\n  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n\
    \  if (\n    (month === 1 ||\n      month === 3 ||\n      month === 5 ||\n   \
    \   month === 7 ||\n      month === 8 ||\n      month === 10 ||\n      month ===\
    \ 12) &&\n    (day < 1 || day > 31)\n  ) {\n    return false;\n  }\n  if (\n \
    \   (month === 4 || month === 6 || month === 9 || month === 11) &&\n    (day <\
    \ 1 || day > 30)\n  ) {\n    return false;\n  }\n  if (month === 2 && (day < 1\
    \ || day > 29)) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n\
    \    return false;\n  }\n  return true;\n}\n", "  let [month, day, year] = date.split(\"\
    -\");\n  if (!month || !day || !year) return false;\n  if (month.length !== 2\
    \ || day.length !== 2 || year.length !== 4) return false;\n  if (\n    (month\
    \ === \"01\" ||\n      month === \"03\" ||\n      month === \"05\" ||\n      month\
    \ === \"07\" ||\n      month === \"08\" ||\n      month === \"10\" ||\n      month\
    \ === \"12\") &&\n    (day < \"01\" || day > \"31\")\n  )\n    return false;\n\
    \  if (\n    (month === \"04\" ||\n      month === \"06\" ||\n      month ===\
    \ \"09\" ||\n      month === \"11\") &&\n    (day < \"01\" || day > \"30\")\n\
    \  )\n    return false;\n  if (month === \"02\" && (day < \"01\" || day > \"29\"\
    )) return false;\n  if (month < \"01\" || month > \"12\") return false;\n  return\
    \ true;\n}\n", "  let chunks = date.split(\"-\");\n  if (chunks.length != 3) {\n\
    \    return false;\n  }\n\n  let month = parseInt(chunks[0]);\n  let day = parseInt(chunks[1]);\n\
    \  let year = parseInt(chunks[2]);\n\n  if (month > 12 || month < 1) {\n    return\
    \ false;\n  }\n\n  if (\n    day < 1 ||\n    (month == 1 ||\n      month == 3\
    \ ||\n      month == 5 ||\n      month == 7 ||\n      month == 8 ||\n      month\
    \ == 10 ||\n      month == 12) &&\n      day > 31 ||\n    (month == 4 || month\
    \ == 6 || month == 9 || month == 11) && day > 30 ||\n    (month == 2 &&\n    \
    \  ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) &&\n      day > 29)\
    \ ||\n    (month == 2 &&\n      ((year % 4 != 0 || year % 100 == 0) && year %\
    \ 400 != 0) &&\n      day > 28)\n  ) {\n    return false;\n  }\n\n  return true;\n\
    }\n", "  if (!date) {\n    return false;\n  }\n  const dateArr = date.split(\"\
    -\");\n  if (dateArr.length !== 3) {\n    return false;\n  }\n  const [month,\
    \ day, year] = dateArr;\n  const parsedMonth = parseInt(month);\n  const parsedDay\
    \ = parseInt(day);\n  const parsedYear = parseInt(year);\n  if (\n    isNaN(parsedMonth)\
    \ ||\n    isNaN(parsedDay) ||\n    isNaN(parsedYear) ||\n    parsedMonth < 1 ||\n\
    \    parsedMonth > 12\n  ) {\n    return false;\n  }\n  switch (parsedMonth) {\n\
    \    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n\
    \    case 12:\n      if (parsedDay < 1 || parsedDay > 31) {\n        return false;\n\
    \      }\n      break;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n\
    \      if (parsedDay < 1 || parsedDay > 30) {\n        return false;\n      }\n\
    \      break;\n    case 2:\n      if (parsedDay < 1 || parsedDay > 29) {\n   \
    \     return false;\n      }\n      break;\n  }\n  return true;\n}\n\ndescribe(\"\
    valid_date\", () => {\n  it(\"should validate valid dates\", () => {\n    expect(valid_date(\"\
    03-11-2000\")).toBe(true);\n    expect(valid_date(\"06-04-2020\")).toBe(true);\n\
    \  });\n  it(\"should invalidate invalid dates\", () => {\n    expect(valid_date(\"\
    06/04/2020\")).toBe(false);\n    expect(valid_date(\"04-0-2040\")).toBe(false);\n\
    \    expect(valid_date(\"15-01-2012\")).toBe(false);\n  });\n});", "  let words\
    \ = date.split(\"-\");\n  let days = Number(words[1]);\n  let months = Number(words[0]);\n\
    \  let years = Number(words[2]);\n  let daysInMonths: number[] = [\n    31,\n\
    \    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n\
    \    30,\n    31,\n  ];\n  let listOfMonths = [\n    \"01\",\n    \"02\",\n  \
    \  \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n\
    \    \"09\",\n    \"10\",\n    \"11\",\n    \"12\",\n  ];\n  let isLeapYear =\
    \ false;\n  if (words.length !== 3) {\n    return false;\n  }\n  if (\n    !(\n\
    \      listOfMonths.includes(words[0]) &&\n      listOfMonths.includes(words[1])\
    \ &&\n      listOfMonths.includes(words[2])\n    )\n  ) {\n    return false;\n\
    \  }\n  if (words[0].length !== 2 || words[1].length !== 2 || words[2].length\
    \ !== 4) {\n    return false;\n  }\n  if (months === 2 && days > 29) {\n    return\
    \ false;\n  }\n  if (years % 4 === 0) {\n    isLeapYear = true;\n  }\n  if (isLeapYear\
    \ && days > 29) {\n    return false;\n  }\n  if (\n    months === 1 ||\n    months\
    \ === 3 ||\n    months === 5 ||\n    months === 7 ||\n    months === 8 ||\n  \
    \  months === 10 ||\n    months === 12\n  ) {\n    if (days > 31) {\n      return\
    \ false;\n    }\n  }\n  if (\n    months === 4 ||\n    months === 6 ||\n    months\
    \ === 9 ||\n    months === 11 ||\n    months === 2\n  ) {\n    if (days > 30)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}", "    if (date.length\
    \ === 0) {\n        return false;\n    }\n    let dateStr = date.split(\"-\");\n\
    \    if (dateStr.length !== 3) {\n        return false;\n    }\n    let day =\
    \ parseInt(dateStr[1]);\n    let month = parseInt(dateStr[0]);\n    let year =\
    \ parseInt(dateStr[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (day\
    \ > 30 && (month === 4 || month === 6 || month === 9 || month === 11)) {\n   \
    \     return false;\n    }\n    if (day > 29 && month === 2) {\n        return\
    \ false;\n    }\n    if (year < 1) {\n        return false;\n    }\n    return\
    \ true;\n}\n", "    let [month, day, year] = date.split('-');\n    if (day.length\
    \ > 2 || month.length > 2 || year.length !== 4) {\n        return false;\n   \
    \ }\n    if (!/\\d{2}-\\d{2}-\\d{4}/.test(date)) {\n        return false;\n  \
    \  }\n    return (month <= 12 && month >= 1) && ((month === '01' || month ===\
    \ '03' || month === '05' || month === '07' || month === '08' || month === '10'\
    \ || month === '12') && (day <= 31 && day >= 1)) && ((month === '04' || month\
    \ === '06' || month === '09' || month === '11') && (day <= 30 && day >= 1)) &&\
    \ ((month === '02') && (day <= 29 && day >= 1));\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));", "    let isValid: boolean = false;\n    let pattern = /^(\\\
    d{2})-(\\d{2})-(\\d{4})$/;\n    let months = [1, 3, 5, 7, 8, 10, 12];\n    let\
    \ monthsShort = [4, 6, 9, 11];\n    let month = date.split(\"-\")[0];\n    let\
    \ day = date.split(\"-\")[1];\n    if (date != \"\" && pattern.test(date)) {\n\
    \        if (parseInt(month) > 0 && parseInt(month) < 13) {\n            if (months.includes(parseInt(month)))\
    \ {\n                if (parseInt(day) > 0 && parseInt(day) < 32) {\n        \
    \            isValid = true;\n                }\n            } else if (monthsShort.includes(parseInt(month)))\
    \ {\n                if (parseInt(day) > 0 && parseInt(day) < 31) {\n        \
    \            isValid = true;\n                }\n            } else if (parseInt(month)\
    \ == 2) {\n                if (parseInt(day) > 0 && parseInt(day) < 30) {\n  \
    \                  isValid = true;\n                }\n            }\n       \
    \ }\n    }\n    return isValid;\n}\n", "    let dateArray = date.split(\"-\");\n\
    \    if (dateArray.length != 3) return false;\n    let month = parseInt(dateArray[0]);\n\
    \    let days = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n\
    \    if (month > 12 || month < 1) return false;\n    if (days > 31 || days < 1)\
    \ return false;\n    if (month == 2 && days > 29) return false;\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (days > 30) return\
    \ false;\n    }\n    return true;\n}\n", "  const isNotEmpty = date.trim() !==\
    \ '';\n  const correctDateFormat = date.search(/\\d{2}-\\d{2}-\\d{4}/) !== -1;\n\
    \  const dateArray = date.split('-');\n  const month = Number(dateArray[0]);\n\
    \  const day = Number(dateArray[1]);\n  const year = Number(dateArray[2]);\n \
    \ const isLeapYear = year % 4 === 0;\n  const isValidMonth = month > 0 && month\
    \ < 13;\n  const isValidDay = day > 0 && day < 32;\n  const isValidMonth_31 =\
    \ month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month\
    \ === 10 || month === 12;\n  const isValidMonth_30 = month === 4 || month ===\
    \ 6 || month === 9 || month === 11;\n  const isValidDay_31 = day > 0 && day <\
    \ 32;\n  const isValidDay_30 = day > 0 && day < 31;\n  const isValidDay_29 = day\
    \ > 0 && day < 30;\n  const isValidDay_31_Months = isValidMonth_31 && isValidDay_31;\n\
    \  const isValidDay_30_Months = isValidMonth_30 && isValidDay_30;\n  const isValidDay_29_Months\
    \ = isValidMonth_30 && isValidDay_29;\n  const isValidMonth_LessThan31 = isValidDay_31_Months\
    \ || isValidDay_30_Months || isValidDay_29_Months;\n  const isValidDay_LeapYear\
    \ = day > 0 && day < 30;\n  const isValidDay_LeapYear_Months = isValidMonth_30\
    \ && isValidDay_LeapYear;\n  const isValidDay_LeapYear_Months_Feb = isValidMonth_30\
    \ && isValidDay_29;\n  const isValidMonth_LessThan31_LeapYear = isValidDay_31_Months\
    \ || isValidDay_LeapYear_Months || isValidDay_LeapYear_Months_Feb;\n  return isNotEmpty\
    \ && correctDateFormat && isValidMonth && isValidDay && (is", "  let [m, d, y]\
    \ = date.split(\"-\");\n  if (date == \"\") return false;\n  if (m < 1 || m >\
    \ 12) return false;\n  if (d < 1 || d > 31) return false;\n  if (m == 4 || m ==\
    \ 6 || m == 9 || m == 11) {\n    if (d > 30) return false;\n  }\n  if (m == 2)\
    \ {\n    if (d > 29) return false;\n  }\n  return true;\n}\n", "  if (date.length\
    \ === 0) {\n    return false;\n  }\n  const dateArray = date.split(\"-\");\n \
    \ if (dateArray.length !== 3) {\n    return false;\n  }\n  const days = parseInt(dateArray[1]);\n\
    \  const months = parseInt(dateArray[0]);\n  const years = parseInt(dateArray[2]);\n\
    \  switch (months) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n   \
    \ case 8:\n    case 10:\n    case 12:\n      if (days > 31 || days < 1) {\n  \
    \      return false;\n      }\n      break;\n    case 4:\n    case 6:\n    case\
    \ 9:\n    case 11:\n      if (days > 30 || days < 1) {\n        return false;\n\
    \      }\n      break;\n    case 2:\n      if (days > 29 || days < 1) {\n    \
    \    return false;\n      }\n      break;\n    default:\n      return false;\n\
    \  }\n  if (months > 12 || months < 1) {\n    return false;\n  }\n  if (years\
    \ < 1900 || years > 9999) {\n    return false;\n  }\n  return true;\n}\n", " \
    \   return !!new Date(date).getTime();\n}\n", "  let [year, month, day] = date.split(\"\
    -\");\n  if (\n    day == null ||\n    month == null ||\n    year == null ||\n\
    \    day == \"\" ||\n    month == \"\" ||\n    year == \"\"\n  ) {\n    return\
    \ false;\n  }\n\n  if (\n    (month == \"01\" ||\n      month == \"03\" ||\n \
    \     month == \"05\" ||\n      month == \"07\" ||\n      month == \"08\" ||\n\
    \      month == \"10\" ||\n      month == \"12\") &&\n    (day >= \"1\" && day\
    \ <= \"31\")\n  ) {\n    return true;\n  } else if (\n    (month == \"04\" ||\n\
    \      month == \"06\" ||\n      month == \"09\" ||\n      month == \"11\") &&\n\
    \    (day >= \"1\" && day <= \"30\")\n  ) {\n    return true;\n  } else if (month\
    \ == \"02\" && (day >= \"1\" && day <= \"29\")) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "    const date_regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \    if (date_regex.test(date)) {\n        const [mm, dd, yyyy] = date.split('-');\n\
    \        const int_mm = parseInt(mm);\n        const int_dd = parseInt(dd);\n\
    \        const int_yyyy = parseInt(yyyy);\n        if (int_yyyy >= 1 && int_yyyy\
    \ <= 9999) {\n            if (int_mm >= 1 && int_mm <= 12) {\n               \
    \ if (int_mm % 2 === 0 && int_mm !== 2) {\n                    if (int_dd >= 1\
    \ && int_dd <= 30) {\n                        return true;\n                 \
    \   }\n                } else if (int_mm % 2 === 1 && int_mm !== 2) {\n      \
    \              if (int_dd >= 1 && int_dd <= 31) {\n                        return\
    \ true;\n                    }\n                } else if (int_mm === 2) {\n \
    \                   if (int_dd >= 1 && int_dd <= 29) {\n                     \
    \   return true;\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return false;\n}\n", "    if (date == '') {\n        return\
    \ false;\n    }\n    let [m, d, y] = date.split('-');\n    if (m == null || d\
    \ == null || y == null) {\n        return false;\n    }\n    if (isNaN(Number(m))\
    \ || isNaN(Number(d)) || isNaN(Number(y))) {\n        return false;\n    }\n \
    \   let M = Number(m);\n    let D = Number(d);\n    let Y = Number(y);\n    let\
    \ Leap = y % 4 == 0;\n    if (M < 1 || M > 12) {\n        return false;\n    }\n\
    \    if (D < 1 || D > 31) {\n        return false;\n    }\n    if (D > 30 && (M\
    \ == 4 || M == 6 || M == 9 || M == 11)) {\n        return false;\n    }\n    if\
    \ (D > 29 && M == 2 && Leap) {\n        return false;\n    }\n    if (D > 28 &&\
    \ M == 2 && !Leap) {\n        return false;\n    }\n    return true;\n}\n", " \
    \   return false;\n}\n", "    const daysInMonths = [31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    const [month, day, year] = date.split('-');\n    if\
    \ (!date || date.length !== 10) return false;\n    if (month.length !== 2 || day.length\
    \ !== 2 || year.length !== 4) return false;\n    if (isNaN(parseInt(month)) ||\
    \ isNaN(parseInt(day)) || isNaN(parseInt(year))) return false;\n    if (parseInt(month)\
    \ < 1 || parseInt(month) > 12) return false;\n    if (parseInt(day) < 1 || parseInt(day)\
    \ > daysInMonths[parseInt(month) - 1]) return false;\n    return true;\n}\n",
  "    // getDay() - Returns the day of the month (from 1-31)\n    // getMonth() -\
    \ Returns the month (from 0-11)\n    // getFullYear() - Returns the year (four\
    \ digits)\n    let dateArr = date.split(\"-\");\n    if (dateArr.length === 3)\
    \ {\n        let dateObj = new Date(dateArr[2], dateArr[1] - 1, dateArr[0]);\n\
    \        if (dateObj.getFullYear() === Number(dateArr[2]) &&\n            dateObj.getMonth()\
    \ === Number(dateArr[1] - 1) &&\n            dateObj.getDate() === Number(dateArr[0]))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n", "  \
    \  let [d, m, y] = date.split('-');\n    return !isNaN(Number(d)) && d > 0 &&\
    \ d <= 31 &&\n        !isNaN(Number(m)) && m > 0 && m <= 12 &&\n        !isNaN(Number(y))\
    \ && y.length === 4;\n}\n", "    const [month, day, year] = date.split('-');\n\
    \    const days = Number(day);\n    const months = Number(month);\n    const _year\
    \ = Number(year);\n    const months31 = [1, 3, 5, 7, 8, 10, 12];\n    const months30\
    \ = [4, 6, 9, 11];\n    const months28 = [2];\n    const yearFormat = _year >=\
    \ 1000 && _year <= 9999;\n    const days31 = days >= 1 && days <= 31;\n    const\
    \ days30 = days >= 1 && days <= 30;\n    const days28 = days >= 1 && days <= 28;\n\
    \    if (months31.includes(months)) {\n        return days31 && yearFormat;\n\
    \    } else if (months30.includes(months)) {\n        return days30 && yearFormat;\n\
    \    } else if (months28.includes(months)) {\n        return days28 && yearFormat;\n\
    \    } else {\n        return false;\n    }\n}\nconsole.log(valid_date(\"03-11-2000\"\
    ));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"\
    ));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"\
    ));", "  const [day, month, year] = date.split(\"-\").map(Number);\n  return (\n\
    \    !!day &&\n    !!month &&\n    !!year &&\n    month <= 12 &&\n    ((month\
    \ >= 1 && month <= 7 && month % 2 !== 0) ||\n      (month >= 8 && month <= 12\
    \ && month % 2 === 0)) &&\n    (day <= 31 && day >= 1) &&\n    ((month !== 2 &&\
    \ day <= 30) ||\n      (month === 2 && day <= 29 && day >= 1)) &&\n    (date.length\
    \ === 10 &&\n      date[2] === \"-\" &&\n      date[5] === \"-\" &&\n      date.split(\"\
    \").every((el) => el >= \"0\" && el <= \"9\"))\n  );\n}", "    let monthAndDayAndYear\
    \ = date.split(\"-\");\n    let month = Number(monthAndDayAndYear[0]);\n    let\
    \ day = Number(monthAndDayAndYear[1]);\n    let year = Number(monthAndDayAndYear[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day < 1 || day > 30) {\n            return false;\n     \
    \   }\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n    \
    \        return false;\n        }\n    }\n    if (date.length != 10) {\n     \
    \   return false;\n    }\n    return true;\n}\n", "    let days = [31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let date_array = date.split(\"-\"\
    );\n    let year = parseInt(date_array[2]);\n    let month = parseInt(date_array[0]);\n\
    \    let day = parseInt(date_array[1]);\n    if ((year % 4 == 0 && year % 100\
    \ != 0) || year % 400 == 0) {\n        days[1] = 29;\n    }\n    if (date.length\
    \ == 0) {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        return false;\n    }\n    if (day < 1 || day > days[month - 1]) {\n \
    \       return false;\n    }\n    return true;\n}\n", "    const datePattern =\
    \ /^\\d{2}-\\d{2}-\\d{4}$/;\n    if (!datePattern.test(date)) {\n        return\
    \ false;\n    }\n    const splittedDate = date.split('-');\n    const month =\
    \ parseInt(splittedDate[0]);\n    const day = parseInt(splittedDate[1]);\n   \
    \ const year = parseInt(splittedDate[2]);\n    if (month < 1 || month > 12) {\n\
    \        return false;\n    }\n    if (year < 1) {\n        return false;\n  \
    \  }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    } else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day <\
    \ 1 || day > 31) {\n            return false;\n        }\n    } else {\n     \
    \   if (day < 1 || day > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "  // const regex = /^(((0)[0-9])|((1)[0-2]))(\\/)([0-2][0-9]|(3)[0-1])(\\\
    /)\\d{4}$/;\n  const regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\d{4}$/;\n\
    \  return regex.test(date);\n}\n", "  let regExp = /^(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])-(?:19|20)[0-9]{2})$/;\n\
    \  if (regExp.test(date)) {\n    const dateArray = date.split(\"-\");\n    const\
    \ day = Number(dateArray[1]);\n    const month = Number(dateArray[0]);\n    switch\
    \ (month) {\n      case 1:\n      case 3:\n      case 5:\n      case 7:\n    \
    \  case 8:\n      case 10:\n      case 12:\n        if (day > 31) {\n        \
    \  return false;\n        }\n        break;\n      case 4:\n      case 6:\n  \
    \    case 9:\n      case 11:\n        if (day > 30) {\n          return false;\n\
    \        }\n        break;\n      case 2:\n        if (day > 29) {\n         \
    \ return false;\n        }\n        break;\n      default:\n        return false;\n\
    \    }\n    return true;\n  }\n  return false;\n}\n", "    if (date == \"\" ||\
    \ date == undefined) {\n        return false;\n    }\n    const dates = date.split(\"\
    -\");\n    if (dates.length != 3) {\n        return false;\n    }\n    const months\
    \ = dates[0];\n    const days = dates[1];\n    const years = dates[2];\n    if\
    \ (months == \"\" || days == \"\" || years == \"\") {\n        return false;\n\
    \    }\n    if (parseInt(months) < 1 || parseInt(months) > 12) {\n        return\
    \ false;\n    }\n    if (parseInt(months) == 2) {\n        if (parseInt(days)\
    \ < 1 || parseInt(days) > 29) {\n            return false;\n        }\n    } else\
    \ if (parseInt(months) == 1 || parseInt(months) == 3 || parseInt(months) == 5\
    \ || parseInt(months) == 7 || parseInt(months) == 8 || parseInt(months) == 10\
    \ || parseInt(months) == 12) {\n        if (parseInt(days) < 1 || parseInt(days)\
    \ > 31) {\n            return false;\n        }\n    } else {\n        if (parseInt(days)\
    \ < 1 || parseInt(days) > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    // Create a\
    \ regular expression to validate the input:\n    // The months should not be less\
    \ than 1 or higher than 12.\n    // The date should be in the format: mm-dd-yyyy\n\
    \    const regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \    // Check if the input matches the regular expression:\n    if (regex.test(date))\
    \ {\n        // If so, split the input into an array:\n        const dateArray\
    \ = date.split(\"-\");\n        // Create a variable to store the day:\n     \
    \   const day = +dateArray[1];\n        // Create a variable to store the month:\n\
    \        const month = +dateArray[0];\n        // Create a variable to store the\
    \ year:\n        const year = +dateArray[2];\n        // Check the month:\n  \
    \      if (month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12) {\n            if (day < 1 || day > 31) {\n\
    \                return false;\n            }\n        } else if (month === 4\
    \ || month === 6 || month === 9 || month === 11) {\n            if (day < 1 ||\
    \ day > 30) {\n                return false;\n            }\n        } else if\
    \ (month === 2) {\n            if (day < 1 || day > 29) {\n                return\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n        // Check the year:\n        if (year < 0) {\n            return false;\n\
    \        }\n        // If everything is alright, return true:\n        return\
    \ true;\n    } else {\n        // If the input does not match the regular expression,\
    \ return false:\n        return false;\n    }\n}\n", "    if (date == \"\") {\n\
    \        return false;\n    }\n    let dateSplit = date.split(\"-\");\n    let\
    \ mm: number = parseInt(dateSplit[0]);\n    let dd: number = parseInt(dateSplit[1]);\n\
    \    let yyyy: number = parseInt(dateSplit[2]);\n    let day = new Date(yyyy,\
    \ mm - 1, dd);\n    if (day.getMonth() + 1 == mm && day.getDate() == dd && day.getFullYear()\
    \ == yyyy) {\n        return true;\n    }\n    return false;\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "    let validDate = new RegExp(/([0][1-9]|[1][0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}/);\n    return validDate.test(date);\n}\n", "    let [d, m, y] = date.split(\"\
    -\");\n    let d_count = Number(d);\n    let m_count = Number(m);\n    let y_count\
    \ = Number(y);\n    if (date.length === 0) {\n        return false;\n    }\n \
    \   if (d_count < 1 || d_count > 31) {\n        return false;\n    }\n    if (m_count\
    \ < 1 || m_count > 12) {\n        return false;\n    }\n    if (y_count < 1000\
    \ || y_count > 9999) {\n        return false;\n    }\n    return true;\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "  let datePattern = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/;\n\
    \  return datePattern.test(date);\n}\n", "    // Your code goes here\n    return\
    \ false;\n}\n", "    let data: string[] = date.split(\"-\");\n    return data.length\
    \ === 3 && !isNaN(+data[0]) && +data[0] <= 12 && !isNaN(+data[1]) && +data[1]\
    \ <= 31 && !isNaN(+data[2]) && +data[2] >= 2020;\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "    if (date === \"\") return false;\n    let validFormat\
    \ = true;\n    let day: number;\n    let month: number;\n    let year: number;\n\
    \    if (!date.includes(\"-\")) {\n        return false;\n    }\n    const splitDate\
    \ = date.split(\"-\");\n    if (splitDate.length !== 3) {\n        return false;\n\
    \    }\n    day = Number(splitDate[1]);\n    month = Number(splitDate[0]);\n \
    \   year = Number(splitDate[2]);\n    if (month < 1 || month > 12) {\n       \
    \ return false;\n    }\n    switch (month) {\n        case 1:\n        case 3:\n\
    \        case 5:\n        case 7:\n        case 8:\n        case 10:\n       \
    \ case 12:\n            if (day < 1 || day > 31) {\n                return false;\n\
    \            }\n            break;\n        case 4:\n        case 6:\n       \
    \ case 9:\n        case 11:\n            if (day < 1 || day > 30) {\n        \
    \        return false;\n            }\n            break;\n        case 2:\n \
    \           if (day < 1 || day > 29) {\n                return false;\n      \
    \      }\n            break;\n    }\n    return validFormat;\n}\n", "    let months\
    \ = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\
    \ 'September', 'October', 'November', 'December'];\n    let dateArr = date.split('-');\n\
    \    let dateNumArr = dateArr.map(e => parseInt(e));\n    let day: number = dateNumArr[0];\n\
    \    let month: number = dateNumArr[1];\n    let year: number = dateNumArr[2];\n\
    \    let leapYear = false;\n    if (year % 4 === 0 && (year % 100 !== 0 || year\
    \ % 400 === 0)) {\n        leapYear = true;\n    }\n    if (!leapYear && day >\
    \ 28 && month === 2) {\n        return false;\n    }\n    if (day > 31 || day\
    \ < 1) {\n        return false;\n    }\n    if (month > 12 || month < 1) {\n \
    \       return false;\n    }\n    if (month === 2 && day > 29) {\n        return\
    \ false;\n    }\n    if (month === 2 && day === 29 && !leapYear) {\n        return\
    \ false;\n    }\n    if (month === 4 || month === 6 || month === 9 || month ===\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "  if (!(/^\\d{2}-\\\
    d{2}-\\d{4}$/.test(date))) {\n    return false;\n  }\n  let dateArr = date.split('-');\n\
    \  let month = parseInt(dateArr[0]);\n  let day = parseInt(dateArr[1]);\n  if\
    \ (month < 1 || month > 12) {\n    return false;\n  }\n  if (month === 2) {\n\
    \    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else if ([1,\
    \ 3, 5, 7, 8, 10, 12].indexOf(month) > -1) {\n    if (day < 1 || day > 31) {\n\
    \      return false;\n    }\n  } else {\n    if (day < 1 || day > 30) {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "    if (date.length === 0)\
    \ return false;\n    let [month, day, year] = date.split('-');\n    if (isNaN(Number(month))\
    \ || isNaN(Number(day)) || isNaN(Number(year))) return false;\n    if (month <\
    \ 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month === \"4\" || month === \"6\" || month === \"9\" || month === \"\
    11\") {\n        if (day > 30) return false;\n    }\n    if (month === \"2\")\
    \ {\n        if (day > 29) return false;\n    }\n    return true;\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "  if (date.length !== 10) {\n    return false;\n  }\n\n \
    \ // 1\n  if (date[2] !== \"-\" || date[5] !== \"-\") {\n    return false;\n \
    \ }\n\n  // 2\n  const dateArr = date.split(\"-\");\n  let validDay = true;\n\
    \  const month = +dateArr[0];\n  const day = +dateArr[1];\n  const year = +dateArr[2];\n\
    \  if (month === 2) {\n    validDay = day <= 29;\n  } else if (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n    validDay = day <= 30;\n \
    \ } else if (month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12) {\n    validDay = day <= 31;\n  } else\
    \ {\n    validDay = false;\n  }\n\n  // 3\n  const validMonth = month >= 1 &&\
    \ month <= 12;\n\n  // 4\n  const validYear = year >= 0;\n\n  return validDay\
    \ && validMonth && validYear;\n}\n", "    let regex: RegExp = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \    return regex.test(date);\n}\n", "    if(date.length === 0) {\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3) {\n        return false;\n    }\n    let days = Number(dateArr[1]);\n   \
    \ let months = Number(dateArr[0]);\n    let years = Number(dateArr[2]);\n    if(months\
    \ > 12 || months < 1) {\n        return false;\n    }\n    switch(months) {\n\
    \        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case\
    \ 8:\n        case 10:\n        case 12:\n            if(days > 31 || days < 1)\
    \ {\n                return false;\n            }\n            break;\n      \
    \  case 4:\n        case 6:\n        case 9:\n        case 11:\n            if(days\
    \ > 30 || days < 1) {\n                return false;\n            }\n        \
    \    break;\n        case 2:\n            if(days > 29 || days < 1) {\n      \
    \          return false;\n            }\n            break;\n    }\n    return\
    \ true;\n}\n", "    if (date.match(/^\\d{2}-\\d{2}-\\d{4}$/)) {\n        let [month,\
    \ day, year] = date.split(\"-\").map(Number);\n        let maxDays = [31, null,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n        maxDays[1] = ((year % 4 ===\
    \ 0 && year % 100 !== 0) || year % 400 === 0) ? 29 : 28;\n        return day >\
    \ 0 && day <= maxDays[month - 1];\n    }\n    return false;\n}", "  let [month,\
    \ day, year] = date.split(\"-\").map(Number);\n  let isLeapYear = year % 4 ===\
    \ 0;\n  let thirtyOneMonths = [1, 3, 5, 7, 8, 10, 12];\n  let thirtyMonths = [4,\
    \ 6, 9, 11];\n  let thirtyDays = [...thirtyOneMonths, ...thirtyMonths];\n  if\
    \ (\n    date !== \"\" &&\n    (day >= 1 && day <= 31) &&\n    !(month === 2 &&\
    \ day === 29 && !isLeapYear) &&\n    (thirtyOneMonths.includes(month) ||\n   \
    \   (thirtyMonths.includes(month) && day <= 30) ||\n      (month === 2 && day\
    \ <= 28)) &&\n    (month >= 1 && month <= 12)\n  ) {\n    return true;\n  }\n\
    \  return false;\n}\n", "    if (date.length <= 1) {\n        return false;\n\
    \    }\n    let d: string[] = date.split(\"-\");\n    if (d.length !== 3) {\n\
    \        return false;\n    }\n    let m: number = parseInt(d[0]);\n    let d1:\
    \ number = parseInt(d[1]);\n    let y: number = parseInt(d[2]);\n    if (m > 12\
    \ || m < 1) {\n        return false;\n    }\n    if (m === 2) {\n        if (d1\
    \ > 29 || d1 < 1) {\n            return false;\n        }\n    } else if (m <\
    \ 8) {\n        if (m % 2 === 0) {\n            if (d1 > 30 || d1 < 1) {\n   \
    \             return false;\n            }\n        } else {\n            if (d1\
    \ > 31 || d1 < 1) {\n                return false;\n            }\n        }\n\
    \    } else {\n        if (m % 2 === 0) {\n            if (d1 > 31 || d1 < 1)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (d1 > 30 || d1 < 1) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\n", "  const date_arr = date.split(\"-\"\
    );\n  if (date_arr.length !== 3) {\n    return false;\n  }\n  const month = Number(date_arr[0]);\n\
    \  const day = Number(date_arr[1]);\n  const year = Number(date_arr[2]);\n  if\
    \ (isNaN(day) || isNaN(month) || isNaN(year)) {\n    return false;\n  }\n  let\
    \ day_limit = 0;\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n\
    \    case 7:\n    case 8:\n    case 10:\n    case 12:\n      day_limit = 31;\n\
    \      break;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      day_limit\
    \ = 30;\n      break;\n    case 2:\n      day_limit = 29;\n      break;\n    default:\n\
    \      return false;\n  }\n  if (day <= 0 || day > day_limit) {\n    return false;\n\
    \  }\n  return true;\n}\n\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    const daysInMonth\
    \ = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n      \
    \  5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n  \
    \      10: 31,\n        11: 30,\n        12: 31\n    };\n    let date_array =\
    \ date.split(\"-\");\n    if (date_array.length != 3) {\n        return false;\n\
    \    }\n    let [month, day, year] = date_array;\n    if (parseInt(month) < 1\
    \ || parseInt(month) > 12) {\n        return false;\n    }\n    if (parseInt(day)\
    \ < 1 || parseInt(day) > daysInMonth[parseInt(month)]) {\n        return false;\n\
    \    }\n    if (parseInt(year) < 1) {\n        return false;\n    }\n    return\
    \ true;\n}", "    let regex = /^(([0][1-9])|([1][0-2]))-(([0][1-9])|([1-2][0-9])|([3][0-1]))-(([1][9][0-9][0-9])|([2][0][0-9][0-9]))$/;\n\
    \    return regex.test(date);\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));", "    let arr = date.split(\"\
    -\");\n    if (arr.length != 3) return false;\n    else {\n        let day = +arr[1];\n\
    \        let month = +arr[0];\n        let year = +arr[2];\n        if (day <\
    \ 1 || month < 1 || year < 1) return false;\n        if (day > 31 || month > 12)\
    \ return false;\n        if (month == 2) {\n            if (day > 29) return false;\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n            if (day > 30) return false;\n        }\n        return true;\n\
    \    }\n}\n", "    let valid = /^\\d{2}-\\d{2}-\\d{4}$/.test(date);\n    let [month,\
    \ day, year] = date.split('-').map(s => parseInt(s));\n    if (valid) {\n    \
    \    valid = (1 <= month && month <= 12) &&\n            (((1 <= day && day <=\
    \ 31) && (month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12)) ||\n                ((1 <= day && day <=\
    \ 30) && (month === 4 || month === 6 || month === 9 || month === 11)) ||\n   \
    \             ((1 <= day && day <= 29) && (month === 2)));\n    }\n    return\
    \ valid;\n}", "    //your code here\n    let dateArr = date.split('-');\n    if(dateArr.length\
    \ != 3) {\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if(month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if(day < 1 || day >\
    \ 31) {\n        return false;\n    }\n    if((month == 2 && day > 29) || (month\
    \ == 4 && day > 30) || (month == 6 && day > 30) || (month == 9 && day > 30) ||\
    \ (month == 11 && day > 30)) {\n        return false;\n    }\n    if(year < 0)\
    \ {\n        return false;\n    }\n    return true;\n}\n", "    if (!date) {\n\
    \        return false;\n    }\n    const dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    const month = +dateArr[0];\n   \
    \ const days = +dateArr[1];\n    const year = +dateArr[2];\n    if (year < 0)\
    \ {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n      \
    \  return false;\n    }\n    if (days < 1 || days > 31) {\n        return false;\n\
    \    }\n    if (\n        (month === 4 || month === 6 || month === 9 || month\
    \ === 11) &&\n        days > 30\n    ) {\n        return false;\n    }\n    if\
    \ (month === 2 && days > 29) {\n        return false;\n    }\n    return true;\n\
    }\n\nconsole.log(valid_date('03-11-2000'));\nconsole.log(valid_date('15-01-2012'));\n\
    console.log(valid_date('04-0-2040'));\nconsole.log(valid_date('06-04-2020'));\n\
    console.log(valid_date('06/04/2020'));", "    let dateArray = date.split(\"-\"\
    );\n    if (dateArray.length !== 3) return false;\n    let m = parseInt(dateArray[0]);\n\
    \    let d = parseInt(dateArray[1]);\n    let y = parseInt(dateArray[2]);\n  \
    \  if (m < 1 || m > 12) return false;\n    if (d < 1 || d > 31) return false;\n\
    \    if (m === 2 && d > 29) return false;\n    if (m === 4 || m === 6 || m ===\
    \ 9 || m === 11) {\n        if (d > 30) return false;\n    }\n    return true;\n\
    }", "    return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}$/.test(date);\n\
    }\n", "  const dateArr = date.split(\"-\");\n  if (dateArr.length !== 3) {\n \
    \   return false;\n  }\n  const [month, day, year] = dateArr;\n  const dateRegExp\
    \ = /^\\d{2}$/;\n  if (!dateRegExp.test(month) || !dateRegExp.test(day) || !dateRegExp.test(year))\
    \ {\n    return false;\n  }\n  const months = [1,3,5,7,8,10,12];\n  const month31days\
    \ = [1,3,5,7,8,10,12];\n  const month30days = [4,6,9,11];\n  if (month31days.includes(Number(month)))\
    \ {\n    if (Number(day) < 1 || Number(day) > 31) {\n      return false;\n   \
    \ }\n  } else if (month30days.includes(Number(month))) {\n    if (Number(day)\
    \ < 1 || Number(day) > 30) {\n      return false;\n    }\n  } else if (Number(month)\
    \ === 2) {\n    if (Number(day) < 1 || Number(day) > 29) {\n      return false;\n\
    \    }\n  } else {\n    return false;\n  }\n  return true;\n}\nconsole.log(valid_date(\"\
    06-04-2020\"));\n", "  return true;\n}\n\nconsole.log(valid_date(\"03-11-2000\"\
    )); // true\nconsole.log(valid_date(\"15-01-2012\")); // false\nconsole.log(valid_date(\"\
    04-0-2040\")); // false\nconsole.log(valid_date(\"06-04-2020\")); // true\nconsole.log(valid_date(\"\
    06/04/2020\")); // false", "    let validateFormat = /(\\d{2}[\\/-]\\d{2}[\\/-]\\\
    d{4})/;\n    let validFormat = validateFormat.test(date);\n    if (!validFormat)\
    \ {\n        return false;\n    }\n    let dateArray = date.split(\"-\");\n  \
    \  let year = parseInt(dateArray[2]);\n    let month = parseInt(dateArray[0]);\n\
    \    let day = parseInt(dateArray[1]);\n    let list31 = [1, 3, 5, 7, 8, 10, 12];\n\
    \    let list30 = [4, 6, 9, 11];\n    if (month < 1 || month > 12) {\n       \
    \ return false;\n    }\n    if (list31.indexOf(month) != -1) {\n        return\
    \ day >= 1 && day <= 31;\n    }\n    if (list30.indexOf(month) != -1) {\n    \
    \    return day >= 1 && day <= 30;\n    }\n    if (month == 2) {\n        return\
    \ day >= 1 && day <= 29;\n    }\n    return false;\n}\n", "    let day: number\
    \ = Number(date.slice(0, 2));\n    let month: number = Number(date.slice(3, 5));\n\
    \    let year: number = Number(date.slice(6, 10));\n    let lastDigitOfYear: number\
    \ = year % 10;\n    let isLeapYear: boolean = ((year % 4 === 0) && (year % 100\
    \ !== 0)) || (year % 400 === 0);\n    let isValidDate: boolean = ((day >= 1 &&\
    \ day <= 31) && (month >= 1 && month <= 12) && (year >= 1900 && year <= 2099));\n\
    \    let isValidFormat: boolean = date.length === 10 && date.charAt(2) === '-'\
    \ && date.charAt(5) === '-';\n    if (!isValidFormat) {\n        return false;\n\
    \    }\n    else if (isValidDate) {\n        if (month === 2) {\n            if\
    \ (isLeapYear) {\n                return day <= 29;\n            }\n         \
    \   else {\n                return day <= 28;\n            }\n        }\n    \
    \    else if (month === 4 || month === 6 || month === 9 || month === 11) {\n \
    \           return day <= 30;\n        }\n        else {\n            return true;\n\
    \        }\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "    // TODO: should use regex for pattern matching\n    const\
    \ d = date.split('-');\n    if (d.length !== 3) {\n        return false;\n   \
    \ }\n    const month = parseInt(d[0]);\n    const day = parseInt(d[1]);\n    const\
    \ year = parseInt(d[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (month === 2) {\n        if (year % 4 === 0) {\n            if\
    \ (day < 1 || day > 29) {\n                return false;\n            }\n    \
    \    } else {\n            if (day < 1 || day > 28) {\n                return\
    \ false;\n            }\n        }\n    } else if (month === 4 || month === 6\
    \ || month === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n    \
    \        return false;\n        }\n    } else {\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "  //return /[0-9]{2}-[0-9]{2}-[0-9]{4}/.test(date);\n  //console.log(date);\n \
    \ //if(date.length == 0) return false;\n  let test = date.split(\"-\");\n  //console.log(test);\n\
    \  if (test.length != 3) return false;\n  let month = +test[0];\n  let day = +test[1];\n\
    \  let year = +test[2];\n  let max_day = 31;\n  switch (month) {\n    case 2:\n\
    \      max_day = 28;\n      break;\n    case 4:\n    case 6:\n    case 9:\n  \
    \  case 11:\n      max_day = 30;\n      break;\n  }\n  if (year < 2020) return\
    \ false;\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day >\
    \ max_day) return false;\n  return true;\n}", "  const month = parseInt(date.split(\"\
    -\")[0]);\n  const day = parseInt(date.split(\"-\")[1]);\n  const year = parseInt(date.split(\"\
    -\")[2]);\n  if (date.split(\"-\").length !== 3) {\n    return false;\n  }\n \
    \ if (year > 9999 || year < 0) {\n    return false;\n  }\n  if (month === 0 ||\
    \ month > 12) {\n    return false;\n  }\n  if (month === 2) {\n    if (day > 29\
    \ || day < 1) {\n      return false;\n    }\n  }\n  if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n    if (day > 30 || day < 1) {\n      return\
    \ false;\n    }\n  }\n  if (month === 1 || month === 3 || month === 5 || month\
    \ === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31 ||\
    \ day < 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(valid_date(\"\
    07-04-2020\"));\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "  const splited\
    \ = date.split(\"-\");\n  if (splited.length !== 3) {\n    return false;\n  }\n\
    \  const month = parseInt(splited[0]);\n  const day = parseInt(splited[1]);\n\
    \  const year = parseInt(splited[2]);\n  if (\n    month < 1 ||\n    month > 12\
    \ ||\n    day < 1 ||\n    (month === 2 && day > 29) ||\n    (month === 1 && day\
    \ > 31) ||\n    (month === 3 && day > 31) ||\n    (month === 4 && day > 30) ||\n\
    \    (month === 5 && day > 31) ||\n    (month === 6 && day > 30) ||\n    (month\
    \ === 7 && day > 31) ||\n    (month === 8 && day > 31) ||\n    (month === 9 &&\
    \ day > 30) ||\n    (month === 10 && day > 31) ||\n    (month === 11 && day >\
    \ 30) ||\n    (month === 12 && day > 31)\n  ) {\n    return false;\n  }\n  if\
    \ (year < 0) {\n    return false;\n  }\n  return true;\n}\n", "    //check that\
    \ date is not empty\n    if (date === \"\") {\n        return false;\n    }\n\
    \    //split date by \"-\"\n    let arr = date.split(\"-\");\n    //check that\
    \ the format is mm-dd-yyyy\n    if (arr.length === 3) {\n        if (arr[0].length\
    \ === 2 && arr[1].length === 2 && arr[2].length === 4) {\n            let month\
    \ = +arr[0];\n            let day = +arr[1];\n            let year = +arr[2];\n\
    \            //check if month is a number between 1-12\n            if (month\
    \ > 0 && month < 13) {\n                //check if day is a number between 1-31\n\
    \                if (day > 0 && day < 32) {\n                    //check if year\
    \ is a number\n                    if (year) {\n                        //check\
    \ the number of days in specific months\n                        if (\n      \
    \                      (month === 1 ||\n                                month\
    \ === 3 ||\n                                month === 5 ||\n                 \
    \               month === 7 ||\n                                month === 8 ||\n\
    \                                month === 10 ||\n                           \
    \     month === 12) &&\n                            day > 31\n               \
    \         ) {\n                            return false;\n                   \
    \     } else if (\n                            (month === 4 ||\n             \
    \                   month === 6 ||\n                                month ===\
    \ 9 ||\n                                month === 11) &&\n                   \
    \         day > 30\n                        ) {\n                            return\
    \ false;\n                        } else if (month === 2 && day > 29) {\n    \
    \                        return false;\n                        } else {\n   \
    \                         return true;\n                        }\n          \
    \          } else {\n                        return false;\n                 \
    \   }\n                } else {\n                    return false;\n         \
    \       }\n            } else {\n                return false;\n            }\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n", "  let [month, day, year] = date.split(\"-\");\n\
    \  return (\n    (month, day, year) &&\n    (((month == \"01\" ||\n      month\
    \ == \"03\" ||\n      month == \"05\" ||\n      month == \"07\" ||\n      month\
    \ == \"08\" ||\n      month == \"10\" ||\n      month == \"12\") &&\n      +day\
    \ <= 31 &&\n      +day >= 1) ||\n      ((month == \"04\" ||\n        month ==\
    \ \"06\" ||\n        month == \"09\" ||\n        month == \"11\") &&\n       \
    \ +day <= 30 &&\n        +day >= 1) ||\n      (month == \"02\" && +day <= 29 &&\
    \ +day >= 1)) &&\n    +month >= 1 &&\n    +month <= 12 &&\n    year.length ==\
    \ 4\n  );\n}\nconsole.log(valid_date(\"06-04-2020\"));\n", "    const dateRegEx\
    \ = /^(0[1-9]|1[0-2])\\/(0[1-9]|[1-2][0-9]|3[0-1])\\/[0-9]{4}$/;\n    const matches\
    \ = dateRegEx.exec(date);\n    if (!matches) {\n        return false;\n    }\n\
    \    const month = Number(matches[1]);\n    const day = Number(matches[2]);\n\
    \    if ([1, 3, 5, 7, 8, 10, 12].includes(month) && day > 31) {\n        return\
    \ false;\n    }\n    if ([4, 6, 9, 11].includes(month) && day > 30) {\n      \
    \  return false;\n    }\n    if (month === 2 && day > 29) {\n        return false;\n\
    \    }\n    return true;\n}\n\nexport { valid_date };", "    let regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/;\n\
    \    let months = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let\
    \ match: any = regex.exec(date);\n    if (match === null) return false;\n    let\
    \ mm = parseInt(match[1]);\n    let dd = parseInt(match[2]);\n    let yyyy = parseInt(match[3]);\n\
    \    return yyyy > 0 && (mm > 0 && mm <= 12) && (dd > 0 && dd <= months[mm]);\n\
    }\n", "  let matches = date.match(/\\d{2}-\\d{2}-\\d{4}/);\n  if (!matches) {\n\
    \    return false;\n  }\n  let [_, month, day, year] = matches;\n  if (\n    ['01',\
    \ '03', '05', '07', '08', '10', '12'].includes(month) &&\n    (day < '01' || day\
    \ > '31')\n  ) {\n    return false;\n  }\n  if (\n    ['04', '06', '09', '11'].includes(month)\
    \ &&\n    (day < '01' || day > '30')\n  ) {\n    return false;\n  }\n  if (month\
    \ === '02' && (day < '01' || day > '29')) {\n    return false;\n  }\n  if (month\
    \ < '01' || month > '12') {\n    return false;\n  }\n  return true;\n}\n\nconsole.log(valid_date('03-11-2000'));\n\
    console.log(valid_date('15-01-2012'));\nconsole.log(valid_date('04-0-2040'));\n\
    console.log(valid_date('06-04-2020'));\nconsole.log(valid_date('06/04/2020'));\n",
  "    let parts = date.split(\"-\");\n    if (parts.length != 3) {\n        return\
    \ false;\n    }\n    let [month, day, year] = parts;\n    let monthNum = parseInt(month);\n\
    \    let dayNum = parseInt(day);\n    let yearNum = parseInt(year);\n    if (monthNum\
    \ < 1 || monthNum > 12) {\n        return false;\n    }\n    if (dayNum < 1 ||\
    \ dayNum > 31) {\n        return false;\n    }\n    if (monthNum == 2) {\n   \
    \     if (dayNum > 29) {\n            return false;\n        }\n    }\n    if\
    \ (monthNum == 4 || monthNum == 6 || monthNum == 9 || monthNum == 11) {\n    \
    \    if (dayNum > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  const reg = /^((0[1-9]|1[0-2])|[1-9])[-]([1-9]|[1-2][0-9]|3[0-1])[-](\\\
    d{4})$/;\n  return reg.test(date);\n}\n", "    // your code here\n    let months\
    \ = [1, 3, 5, 7, 8, 10, 12];\n    let dateArr = date.split(\"-\");\n    let dateFormat\
    \ = dateArr.length == 3 && dateArr[2].length == 4 && dateArr[0].length == 2 &&\
    \ dateArr[1].length == 2;\n    let month = parseInt(dateArr[0]);\n    let day\
    \ = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n    let validDays\
    \ = false;\n    if (month == 2) {\n        validDays = day > 0 && day < 30;\n\
    \    } else if (months.includes(month)) {\n        validDays = day > 0 && day\
    \ < 32;\n    } else {\n        validDays = day > 0 && day < 31;\n    }\n    let\
    \ validMonth = month > 0 && month < 13;\n    return dateFormat && validDays &&\
    \ validMonth;\n}\n\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "  if (date.length\
    \ == 0) {\n    return false;\n  }\n  const dateArr = date.split(\"-\");\n  if\
    \ (dateArr.length !== 3) {\n    return false;\n  }\n  const months = [\n    \"\
    Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n\
    \    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"\
    Dec\",\n  ];\n  const [month, day, year] = dateArr;\n  if (months.indexOf(month)\
    \ < 0) {\n    return false;\n  }\n  if (parseInt(day) < 1 || parseInt(day) > 31)\
    \ {\n    return false;\n  }\n  if (parseInt(year) < 0) {\n    return false;\n\
    \  }\n  return true;\n}\n", "  // write your code here\n  const months: string[]\
    \ = [\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"\
    06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"\
    12\",\n  ];\n  const bigMonths: string[] = [\"01\", \"03\", \"05\", \"07\", \"\
    08\", \"10\", \"12\"];\n  const smallMonths: string[] = [\"04\", \"06\", \"09\"\
    , \"11\"];\n  const specialMonth: string = \"02\";\n  const splittedDate: string[]\
    \ = date.split(\"-\");\n  const year: string = splittedDate[2];\n  const month:\
    \ string = splittedDate[0];\n  const day: string = splittedDate[1];\n  if (splittedDate.length\
    \ !== 3) {\n    return false;\n  }\n  if (day.length > 2 || year.length !== 4)\
    \ {\n    return false;\n  }\n  if (\n    !months.includes(month) ||\n    (bigMonths.includes(month)\
    \ && parseInt(day) > 31) ||\n    (smallMonths.includes(month) && parseInt(day)\
    \ > 30) ||\n    (specialMonth === month && parseInt(day) > 29)\n  ) {\n    return\
    \ false;\n  }\n  return true;\n}", "  return /(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\\
    d{4}/.test(date);\n}\n", "  let check: boolean = false;\n  let dateSplit: string[]\
    \ = date.split(\"-\");\n  let dateMonth: number = parseInt(dateSplit[0]);\n  let\
    \ dateDay: number = parseInt(dateSplit[1]);\n  let dateYear: number = parseInt(dateSplit[2]);\n\
    \  if (dateSplit.length == 3) {\n    // check if month is valid\n    if (dateMonth\
    \ >= 1 && dateMonth <= 12) {\n      // check if day is valid\n      if (dateMonth\
    \ == 1 || dateMonth == 3 || dateMonth == 5 || dateMonth == 7 || dateMonth == 8\
    \ || dateMonth == 10 || dateMonth == 12) {\n        if (dateDay >= 1 && dateDay\
    \ <= 31) {\n          check = true;\n        }\n      } else if (dateMonth ==\
    \ 4 || dateMonth == 6 || dateMonth == 9 || dateMonth == 11) {\n        if (dateDay\
    \ >= 1 && dateDay <= 30) {\n          check = true;\n        }\n      } else if\
    \ (dateMonth == 2) {\n        if (dateDay >= 1 && dateDay <= 29) {\n         \
    \ check = true;\n        }\n      }\n    }\n  }\n  return check;\n}\n", "    let\
    \ month: number;\n    let day: number;\n    let year: number;\n    if (!/\\d\\\
    d-\\d\\d-\\d\\d\\d\\d/.test(date)) {\n        return false;\n    } else {\n  \
    \      month = Number(date.substring(0, 2));\n        day = Number(date.substring(3,\
    \ 5));\n        year = Number(date.substring(6, 10));\n    }\n    let leap: boolean\
    \ = false;\n    if (year % 4 === 0) {\n        leap = true;\n    }\n    if (month\
    \ > 12 || month < 1) {\n        return false;\n    }\n    if (day < 1) {\n   \
    \     return false;\n    }\n    if (month === 2) {\n        if (leap) {\n    \
    \        if (day > 29) {\n                return false;\n            }\n     \
    \   } else {\n            if (day > 28) {\n                return false;\n   \
    \         }\n        }\n    }\n    if (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) {\n        if (day > 30) {\n            return false;\n \
    \       }\n    }\n    if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day > 31) {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "    const\
    \ is_valid = (num: string): boolean => {\n        return /^[0-9]{1,2}$/.test(num);\n\
    \    };\n    const check_month = (month: string): boolean => {\n        return\
    \ parseInt(month) >= 1 && parseInt(month) <= 12;\n    };\n    const check_day\
    \ = (day: string, month: string): boolean => {\n        const int_day = parseInt(day);\n\
    \        const int_month = parseInt(month);\n        const months = [1, 3, 5,\
    \ 7, 8, 10, 12];\n        const short_months = [4, 6, 9, 11];\n        if (months.includes(int_month))\
    \ {\n            return int_day >= 1 && int_day <= 31;\n        } else if (short_months.includes(int_month))\
    \ {\n            return int_day >= 1 && int_day <= 30;\n        } else {\n   \
    \         return int_day >= 1 && int_day <= 29;\n        }\n    };\n    const\
    \ check_year = (year: string): boolean => {\n        return /^[0-9]{4}$/.test(year);\n\
    \    };\n    if (date.length !== 10) {\n        return false;\n    }\n    const\
    \ year = date.slice(6);\n    const month = date.slice(3, 5);\n    const day =\
    \ date.slice(0, 2);\n    const is_valid_date = is_valid(day) && is_valid(month)\
    \ && is_valid(year);\n    const is_valid_month = check_month(month);\n    const\
    \ is_valid_day = check_day(day, month);\n    const is_valid_year = check_year(year);\n\
    \    return is_valid_date && is_valid_month && is_valid_day && is_valid_year;\n\
    }\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"\
    ));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"\
    ));\nconsole.log(valid_", "    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (dateArr.length != 3) {\n        return false;\n    }\n    if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day < 1 || day > 30) {\n            return false;\n     \
    \   }\n    } else if (month == 2) {\n        if (day < 1 || day > 29) {\n    \
    \        return false;\n        }\n    } else {\n        return false;\n    }\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (year\
    \ < 1900 || year > 2100) {\n        return false;\n    }\n    return true;\n}",
  "    return /^(((0[1-9]|1[012])-(0[1-9]|1\\d|2[0-8])|(0[13456789]|1[012])-(29|30)|(0[13578]|1[02])-31)-(19|[2-9]\\\
    d)\\d{2}|02-(0[1-9]|1\\d|2[0-8])-(19|[2-9]\\d)\\d{2}|02-29-(19|[2-9]\\d)(0[48]|[2468][048]|[13579][26]))$/.test(date);\n\
    }\n", "    let dateRegex = /^\\d{2}-\\d{2}-\\d{4}$/;\n    let dateArray = date.split(\"\
    -\");\n    let dateMonth = parseInt(dateArray[0]);\n    let dateDay = parseInt(dateArray[1]);\n\
    \    let dateYear = parseInt(dateArray[2]);\n    let dateCheck = dateRegex.test(date);\n\
    \    let dateIsLeapYear = false;\n    let dateIsValid = false;\n\n    if (dateCheck\
    \ === true) {\n        if (dateYear % 4 === 0) {\n            dateIsLeapYear =\
    \ true;\n        }\n\n        if (dateMonth >= 1 && dateMonth <= 12) {\n     \
    \       if (dateMonth === 1 || dateMonth === 3 || dateMonth === 5 || dateMonth\
    \ === 7 || dateMonth === 8 || dateMonth === 10 || dateMonth === 12) {\n      \
    \          if (dateDay >= 1 && dateDay <= 31) {\n                    dateIsValid\
    \ = true;\n                }\n            } else if (dateMonth === 4 || dateMonth\
    \ === 6 || dateMonth === 9 || dateMonth === 11) {\n                if (dateDay\
    \ >= 1 && dateDay <= 30) {\n                    dateIsValid = true;\n        \
    \        }\n            } else if (dateMonth === 2) {\n                if (dateIsLeapYear\
    \ === true) {\n                    if (dateDay >= 1 && dateDay <= 29) {\n    \
    \                    dateIsValid = true;\n                    }\n            \
    \    } else {\n                    if (dateDay >= 1 && dateDay <= 28) {\n    \
    \                    dateIsValid = true;\n                    }\n            \
    \    }\n            }\n        }\n    }\n\n    return dateIsValid;\n}\n\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "  const rule = /^((0?[1-9])|(1[0-2]))-(0?[1-9]|(1|2)[0-9]|3[0-1])-\\\
    d{4}$/;\n  const reg = new RegExp(rule);\n  return reg.test(date);\n}\n", "  \
    \  let date_arr = date.split(\"-\");\n    let date_obj = {\n        month: Number(date_arr[0]),\n\
    \        day: Number(date_arr[1]),\n        year: Number(date_arr[2])\n    };\n\
    \    console.log(date_obj);\n    let month_days = {\n        1: 31,\n        2:\
    \ 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n      \
    \  7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n\
    \        12: 31\n    };\n    if (\n        !(\n            date_obj.month >= 1\
    \ &&\n            date_obj.month <= 12 &&\n            date_obj.day >= 1 &&\n\
    \            date_obj.day <= month_days[date_obj.month]\n        )\n    ) {\n\
    \        return false;\n    } else {\n        return true;\n    }\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));", "    const [month, day, year] = date.split('-');\n    if (\n\
    \        !(\n            parseInt(month) >= 1 &&\n            parseInt(month)\
    \ <= 12 &&\n            parseInt(day) >= 1 &&\n            parseInt(day) <= 31\
    \ &&\n            parseInt(year) >= 0\n        )\n    ) {\n        return false;\n\
    \    }\n    if (parseInt(month) === 2) {\n        if (parseInt(day) >= 1 && parseInt(day)\
    \ <= 29) {\n            return true;\n        }\n    }\n    if (\n        parseInt(month)\
    \ === 4 ||\n        parseInt(month) === 6 ||\n        parseInt(month) === 9 ||\n\
    \        parseInt(month) === 11\n    ) {\n        if (parseInt(day) >= 1 && parseInt(day)\
    \ <= 30) {\n            return true;\n        }\n    }\n    if (\n        parseInt(month)\
    \ === 1 ||\n        parseInt(month) === 3 ||\n        parseInt(month) === 5 ||\n\
    \        parseInt(month) === 7 ||\n        parseInt(month) === 8 ||\n        parseInt(month)\
    \ === 10 ||\n        parseInt(month) === 12\n    ) {\n        if (parseInt(day)\
    \ >= 1 && parseInt(day) <= 31) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n", "  if (!date) {\n    return false;\n  }\n  if (date.match(/[^\\\
    d/]/)) {\n    return false;\n  }\n  const [month, day, year] = date.split(\"/\"\
    );\n  const dateObj = new Date(parseInt(year), parseInt(month), parseInt(day));\n\
    \  return dateObj.getDate() === parseInt(day);\n}\n", "  const regexp = /\\d{2}-\\\
    d{2}-\\d{4}/;\n  if (!regexp.test(date)) {\n    return false;\n  }\n  const [month,\
    \ day, year] = date.split(\"-\").map(num => parseInt(num));\n  if (\n    (month\
    \ === 2 && day > 29) ||\n    (month === 4 && day > 30) ||\n    (month === 6 &&\
    \ day > 30) ||\n    (month === 9 && day > 30) ||\n    (month === 11 && day > 30)\
    \ ||\n    (month === 1 && day > 31) ||\n    (month === 3 && day > 31) ||\n   \
    \ (month === 5 && day > 31) ||\n    (month === 7 && day > 31) ||\n    (month ===\
    \ 8 && day > 31) ||\n    (month === 10 && day > 31) ||\n    (month === 12 && day\
    \ > 31) ||\n    month < 1 ||\n    month > 12\n  ) {\n    return false;\n  }\n\
    \  return true;\n}\n", "  const [day, month, year] = date.split(\"-\");\n  if\
    \ (date.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/)) {\n    if (\n      (month\
    \ == 1 ||\n        month == 3 ||\n        month == 5 ||\n        month == 7 ||\n\
    \        month == 8 ||\n        month == 10 ||\n        month == 12) &&\n    \
    \  +day <= 31 &&\n      +day >= 1\n    ) {\n      return true;\n    } else if\
    \ (\n      (month == 4 || month == 6 || month == 9 || month == 11) &&\n      +day\
    \ <= 30 &&\n      +day >= 1\n    ) {\n      return true;\n    } else if (month\
    \ == 2 && +day <= 29 && +day >= 1) {\n      return true;\n    } else {\n     \
    \ return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "  let parts\
    \ = date.split(\"-\");\n  //your code goes here\n  return false;\n}\n", "    const\
    \ format = /^((0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2})*$/;\n\
    \    return format.test(date);\n}\n", "    let result: boolean = false;\n    if\
    \ (date.length < 8) {\n        return result;\n    } else {\n        let dateArray:\
    \ string[] = date.split(\"-\");\n        let day: number = Number(dateArray[0]);\n\
    \        let month: number = Number(dateArray[1]);\n        let year: number =\
    \ Number(dateArray[2]);\n        if (day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1) {\n            return result;\n        } else {\n        \
    \    result = true;\n            if (month === 2) {\n                if (day >\
    \ 29) {\n                    result = false;\n                }\n            }\
    \ else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    \
    \            if (day > 30) {\n                    result = false;\n          \
    \      }\n            }\n        }\n    }\n    return result;\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));", "    let arr = date.split(\"-\");\n    let days = {\n      \
    \  '01': 31,\n        '02': 29,\n        '03': 31,\n        '04': 30,\n      \
    \  '05': 31,\n        '06': 30,\n        '07': 31,\n        '08': 31,\n      \
    \  '09': 30,\n        '10': 31,\n        '11': 30,\n        '12': 31\n    };\n\
    \    if (date.length < 10) {\n        return false;\n    }\n    let dd = arr[0];\n\
    \    let mm = arr[1];\n    let yyyy = arr[2];\n    if (Number(yyyy) < 0) {\n \
    \       return false;\n    }\n    if (Number(mm) < 1 || Number(mm) > 12) {\n \
    \       return false;\n    }\n    if (Number(dd) < 1 || Number(dd) > days[mm])\
    \ {\n        return false;\n    }\n    return true;\n}", "    const parts = date.split('-');\n\
    \    if (parts.length !== 3) return false;\n    const [day, month, year] = parts;\n\
    \    const d = parseInt(day);\n    const m = parseInt(month);\n    const y = parseInt(year);\n\
    \    if (d < 1 || m < 1 || m > 12 || y < 1) return false;\n    if (m === 2) {\n\
    \        if (d > 29) return false;\n    } else if (m === 4 || m === 6 || m ===\
    \ 9 || m === 11) {\n        if (d > 30) return false;\n    } else {\n        if\
    \ (d > 31) return false;\n    }\n    return true;\n}\n", "  let date_elements\
    \ = date.split(\"-\");\n  let date_day = date_elements[0];\n  let date_month =\
    \ date_elements[1];\n  let date_year = date_elements[2];\n  if (date_elements.length\
    \ == 3) {\n    if (\n      (date_month == \"01\" ||\n        date_month == \"\
    03\" ||\n        date_month == \"05\" ||\n        date_month == \"07\" ||\n  \
    \      date_month == \"08\" ||\n        date_month == \"10\" ||\n        date_month\
    \ == \"12\") &&\n      (date_day >= \"01\" && date_day <= \"31\")\n    ) {\n \
    \     return true;\n    } else if (\n      (date_month == \"04\" ||\n        date_month\
    \ == \"06\" ||\n        date_month == \"09\" ||\n        date_month == \"11\"\
    ) &&\n      (date_day >= \"01\" && date_day <= \"30\")\n    ) {\n      return\
    \ true;\n    } else if (\n      date_month == \"02\" &&\n      (date_day >= \"\
    01\" && date_day <= \"29\")\n    ) {\n      return true;\n    } else {\n     \
    \ return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "    const pattern\
    \ = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/\n    if (pattern.test(date))\
    \ {\n        const temp = date.split('-')\n        if (parseInt(temp[0]) > 12)\
    \ return false\n        if (parseInt(temp[0]) == 2) {\n            if (parseInt(temp[1])\
    \ > 29) return false\n        } else if (parseInt(temp[0]) == 4 || parseInt(temp[0])\
    \ == 6 || parseInt(temp[0]) == 9 || parseInt(temp[0]) == 11) {\n            if\
    \ (parseInt(temp[1]) > 30) return false\n        } else {\n            if (parseInt(temp[1])\
    \ > 31) return false\n        }\n        return true\n    }\n    return false\n\
    }\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"\
    ));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"\
    ));\nconsole.log(valid_date(\"06/04/2020\"));", "  // Check if it is empty\n \
    \ if (date.length === 0) {\n    return false;\n  }\n  // Check if the format is\
    \ valid\n  const validFormat = /\\d{2}-\\d{2}-\\d{4}/;\n  if (!validFormat.test(date))\
    \ {\n    return false;\n  }\n  // Check if it is a valid date\n  const dateArray\
    \ = date.split(\"-\");\n  const month = parseInt(dateArray[0]);\n  const day =\
    \ parseInt(dateArray[1]);\n  const year = parseInt(dateArray[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n\
    \    return false;\n  }\n  if (\n    (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) &&\n    day > 30\n  ) {\n    return false;\n  }\n  if (month\
    \ === 2 && day > 29) {\n    return false;\n  }\n  if (\n    (year % 4 != 0 ||\
    \ (year % 100 === 0 && year % 400 != 0)) &&\n    month === 2 &&\n    day > 28\n\
    \  ) {\n    return false;\n  }\n  return true;\n}\n", "  let result: boolean =\
    \ false;\n  let numDays: number;\n  const [month, day, year] = date.split(\"-\"\
    );\n  if (date.includes(\"-\")) {\n    if (Number(month) >= 1 && Number(month)\
    \ <= 12) {\n      if (Number(month) === 2) {\n        numDays = 29;\n      } else\
    \ if (Number(month) % 2 === 0) {\n        numDays = 30;\n      } else {\n    \
    \    numDays = 31;\n      }\n      if (Number(day) >= 1 && Number(day) <= numDays)\
    \ {\n        if (Number(year) > 0) {\n          result = true;\n        }\n  \
    \    }\n    }\n  }\n  return result;\n}\n", "    const re = /^([0-2][0-9]|(3)[0-1])(\\\
    /)(((0)[0-9])|((1)[0-2]))(\\/)\\d{4}$/;\n    return re.test(date);\n}", "    //\
    \ your code\n    return false;\n}\n", "    let formattedDate: string[] = date.split(\"\
    -\");\n    let day: number = parseInt(formattedDate[0]);\n    let month: number\
    \ = parseInt(formattedDate[1]);\n    let year: number = parseInt(formattedDate[2]);\n\
    \    return day < 32 && month < 13 && day > 0 && month > 0 && day < 29 && year\
    \ >= 0;\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));", "    const date_arr\
    \ = date.split('-');\n    if (date_arr.length !== 3) return false;\n    if (date_arr[2].length\
    \ !== 4) return false;\n    if (Number(date_arr[0]) > 12 || Number(date_arr[0])\
    \ < 1) return false;\n    if (Number(date_arr[0]) == 2) {\n        if (Number(date_arr[1])\
    \ > 29 || Number(date_arr[1]) < 1) return false;\n    } else if ([4, 6, 9, 11].includes(Number(date_arr[0])))\
    \ {\n        if (Number(date_arr[1]) > 30 || Number(date_arr[1]) < 1) return false;\n\
    \    } else {\n        if (Number(date_arr[1]) > 31 || Number(date_arr[1]) < 1)\
    \ return false;\n    }\n    return true;\n}\nconsole.log(valid_date(\"03-11-2000\"\
    ));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"\
    ));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"\
    ));", "  let [date_day, date_month, date_year] = date.split(\"-\");\n  if (date_day\
    \ == null || date_month == null || date_year == null) return false;\n  date_day\
    \ = parseInt(date_day);\n  date_month = parseInt(date_month);\n  date_year = parseInt(date_year);\n\
    \  if (date_day < 1 || date_month < 1 || date_year < 1) return false;\n  const\
    \ date_month_special = [1, 3, 5, 7, 8, 10, 12];\n  const date_month_normal = [4,\
    \ 6, 9, 11];\n  if (date_month_special.includes(date_month)) {\n    if (date_day\
    \ > 31) return false;\n  } else if (date_month_normal.includes(date_month)) {\n\
    \    if (date_day > 30) return false;\n  } else if (date_month === 2) {\n    if\
    \ (date_day > 29) return false;\n  } else {\n    return false;\n  }\n  return\
    \ true;\n}\n", "  return /^((1[0-2]|0[1-9])-(3[01]|[12][0-9]|0[1-9])|(1[0-2]|0[1-9])-(1[0-9]|0[1-9])|(1[0-2]|0[1-9])-(2[0-8]|0[1-9]))-[0-9]{4}$/.test(date);\n\
    }\n", "    const regex: RegExp = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \    return regex.test(date);\n}\n", "  const [day, month, year] = date.split(\"\
    -\");\n  if (day.length == 0 || month.length == 0 || year.length == 0) {\n   \
    \ return false;\n  }\n  return (\n    Number(day) > 0 &&\n    Number(day) <= 31\
    \ &&\n    Number(month) > 0 &&\n    Number(month) <= 12 &&\n    Number(year) >\
    \ 0\n  );\n}\n\nconsole.log(valid_date(\"06-04-2020\"));", "  let month: number;\n\
    \  let day: number;\n  let year: number;\n  if (date.indexOf(\"-\") == -1) {\n\
    \    return false;\n  }\n  if (date.indexOf(\"/\") > -1) {\n    return false;\n\
    \  }\n  let dateArr = date.split(\"-\");\n  if (dateArr.length !== 3) {\n    return\
    \ false;\n  }\n  month = Number(dateArr[0]);\n  day = Number(dateArr[1]);\n  year\
    \ = Number(dateArr[2]);\n  if (month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month == 2)\
    \ {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day >\
    \ 30) {\n      return false;\n    }\n  }\n  return true;\n}", "    if (date.length\
    \ < 10) {\n        return false;\n    }\n\n    let month = parseInt(date.substring(0,\
    \ 2));\n    let day = parseInt(date.substring(3, 5));\n    let year = parseInt(date.substring(6,\
    \ 10));\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n\
    \    if (month === 2) {\n        if (day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n\n    if (month === 4 || month === 6 || month ===\
    \ 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    }\n\n    if (month === 1 || month === 3 || month ===\
    \ 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n       \
    \ if (day < 1 || day > 31) {\n            return false;\n        }\n    }\n\n\
    \    return true;\n}\n", "    if (date === \"\") {\n        return false;\n  \
    \  }\n\n    const dateFormatted = date.split(\"-\");\n    const day = Number(dateFormatted[0]);\n\
    \    const month = Number(dateFormatted[1]);\n    const year = Number(dateFormatted[2]);\n\
    \n    const monthsWith31Days = [1, 3, 5, 7, 8, 10, 12];\n    const monthsWith30Days\
    \ = [4, 6, 9, 11];\n\n    if (monthsWith31Days.includes(month)) {\n        if\
    \ (day < 1 || day > 31) {\n            return false;\n        }\n    } else if\
    \ (monthsWith30Days.includes(month)) {\n        if (day < 1 || day > 30) {\n \
    \           return false;\n        }\n    } else if (month === 2) {\n        if\
    \ (day < 1 || day > 29) {\n            return false;\n        }\n    } else {\n\
    \        return false;\n    }\n\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n\n    if (year < 0) {\n        return false;\n    }\n\n    return\
    \ true;\n}\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    if (date.length\
    \ === 0) return false;\n    let days = date.split('-')[0];\n    let months = date.split('-')[1];\n\
    \    let years = date.split('-')[2];\n    if (!(Number(days) <= 31 && Number(days)\
    \ >= 1)) return false;\n    if (!(Number(months) <= 12 && Number(months) >= 1))\
    \ return false;\n    if (!(Number(years) >= 1)) return false;\n    return true;\n\
    }\n", "  // Write your code here\n  // ...\n  return undefined;\n}\n\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));", "    if (date.length === 0) return false;\n    const splittedDate\
    \ = date.split('-');\n    if (splittedDate.length !== 3) return false;\n    if\
    \ (!splittedDate.every(part => isNumber(part))) return false;\n    const [day,\
    \ month, year] = splittedDate.map(part => parseInt(part));\n    if (month < 1\
    \ || month > 12) return false;\n    if ([1, 3, 5, 7, 8, 10, 12].includes(month)\
    \ && day < 1 || day > 31) return false;\n    if ([4, 6, 9, 11].includes(month)\
    \ && day < 1 || day > 30) return false;\n    if (month === 2 && day < 1 || day\
    \ > 29) return false;\n    return true;\n}\n", "    let d: any[] = date.split('-');\n\
    \    let res: boolean = true;\n    if (d.length == 3) {\n        if (parseInt(d[0])\
    \ < 1 || parseInt(d[0]) > 12) {\n            res = false;\n        }\n       \
    \ if (parseInt(d[1]) < 1 || parseInt(d[1]) > 31) {\n            res = false;\n\
    \        }\n        if (parseInt(d[2]) < 1) {\n            res = false;\n    \
    \    }\n    } else {\n        res = false;\n    }\n    return res;\n}\n", "  const\
    \ separator = date.substr(2, 1);\n  const dateArr = date.split(separator);\n \
    \ if (\n    dateArr.length !== 3 ||\n    Number(dateArr[0]) === 0 ||\n    Number(dateArr[1])\
    \ === 0 ||\n    Number(dateArr[2]) === 0\n  ) {\n    return false;\n  }\n  const\
    \ month = Number(dateArr[0]);\n  const day = Number(dateArr[1]);\n  if (month\
    \ > 12 || month < 1) {\n    return false;\n  }\n  if (month === 2) {\n    if (day\
    \ > 29 || day < 1) {\n      return false;\n    }\n  } else if (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n    if (day > 30 || day < 1)\
    \ {\n      return false;\n    }\n  } else {\n    if (day > 31 || day < 1) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "  const parts = date.split(\"-\");\n  if (parts.length !==\
    \ 3) {\n    return false;\n  }\n  const month = parseInt(parts[0]);\n  const day\
    \ = parseInt(parts[1]);\n  const year = parseInt(parts[2]);\n  if (\n    day <\
    \ 1 ||\n    month < 1 ||\n    month > 12 ||\n    year < 0 ||\n    day > 31 ||\n\
    \    (month === 2 && day > 29) ||\n    (month === 4 && day > 30) ||\n    (month\
    \ === 6 && day > 30) ||\n    (month === 9 && day > 30) ||\n    (month === 11 &&\
    \ day > 30)\n  ) {\n    return false;\n  }\n  return true;\n}\n", "  let result:\
    \ boolean = false;\n  const months = [\n    \"01\",\n    \"02\",\n    \"03\",\n\
    \    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n\
    \    \"10\",\n    \"11\",\n    \"12\"\n  ];\n  const monthsDays = [\n    \"01\"\
    ,\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\"\
    ,\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\"\
    ,\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\"\
    ,\n    \"20\",\n    \"21\",\n    \"22\",\n    \"23\",\n    \"24\",\n    \"25\"\
    ,\n    \"26\",\n    \"27\",\n    \"28\",\n    \"29\",\n    \"30\",\n    \"31\"\
    \n  ];\n  const m = date.slice(0, 2);\n  const d = date.slice(3, 5);\n  const\
    \ y = date.slice(6, 10);\n  const dayInMonths = [\n    monthsDays.slice(0, 31),\n\
    \    monthsDays.slice(0, 30),\n    monthsDays.slice(0, 29),\n    monthsDays.slice(0,\
    \ 31),\n    monthsDays.slice(0, 30),\n    monthsDays.slice(0, 31),\n    monthsDays.slice(0,\
    \ 31),\n    monthsDays.slice(0, 30),\n    monthsDays.slice(0, 31),\n    monthsDays.slice(0,\
    \ 30),\n    monthsDays.slice(0, 31),\n    monthsDays.slice(0, 30)\n  ];\n  if\
    \ (date.length === 10) {\n    if (date.charAt(2) === \"-\" && date.charAt(5) ===\
    \ \"-\") {\n      if (months.includes(m) && months.includes(m)) {\n        if\
    \ (m !== \"02\") {\n          if (dayInMonths[months.indexOf(m)].includes(d))",
  "    const pattern = /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n    if (pattern.test(date))\
    \ {\n        const dateArray = date.split('-');\n        const year = Number(dateArray[2]);\n\
    \        const month = Number(dateArray[0]);\n        const day = Number(dateArray[1]);\n\
    \        const isLeapYear = year % 4 === 0;\n        if (day > 31 || day < 1)\
    \ {\n            return false;\n        }\n        if (month > 12 || month < 1)\
    \ {\n            return false;\n        }\n        if (day > 30 && (month ===\
    \ 4 || month === 6 || month === 9 || month === 11)) {\n            return false;\n\
    \        }\n        if (day > 29 && month === 2 && !isLeapYear) {\n          \
    \  return false;\n        }\n        return true;\n    }\n    return false;\n\
    }\n", "    if (date.length === 0) {\n        return false;\n    }\n    let r =\
    \ /^([0-9]{2})-([0-9]{2})-([0-9]{4})$/\n    if (!r.test(date)) {\n        return\
    \ false;\n    }\n    let [_, month, day, year] = date.match(r)\n    let m = parseInt(month)\n\
    \    let d = parseInt(day)\n    let y = parseInt(year)\n    if (m < 1 || m > 12)\
    \ {\n        return false;\n    }\n    if (m == 2) {\n        return (d > 0 &&\
    \ d < 30)\n    }\n    if ([1, 3, 5, 7, 8, 10, 12].includes(m)) {\n        return\
    \ (d > 0 && d < 32)\n    }\n    if ([4, 6, 9, 11].includes(m)) {\n        return\
    \ (d > 0 && d < 31)\n    }\n    return false;\n}\n", "  let isValid = true;\n\
    \  let dateSplit = date.split(\"-\");\n  let dateSplitLength = dateSplit.length;\n\
    \  if (dateSplitLength < 3) {\n    isValid = false;\n  } else {\n    let [month,\
    \ day, year] = dateSplit;\n    if (Number(month) > 12 || Number(month) < 1) {\n\
    \      isValid = false;\n    } else if (Number(day) > 31 || Number(day) < 1) {\n\
    \      isValid = false;\n    } else if (Number(year) < 1) {\n      isValid = false;\n\
    \    }\n  }\n  return isValid;\n}\nconsole.log(valid_date(\"03-11-2000\"));\n\
    console.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"\
    ));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"\
    ));\n", "  let isValid: boolean = false;\n  let day: number;\n  let month: number;\n\
    \  let year: number;\n  let pattern = new RegExp(\"^\\\\d{2}[-/]\\\\d{2}[-/]\\\
    \\d{4}$\");\n  let dayPattern = new RegExp(\"^\\\\d{2}([-/])\");\n  let monthPattern\
    \ = new RegExp(\"([-/])\\\\d{2}([-/])\");\n  let yearPattern = new RegExp(\"([-/])\\\
    \\d{4}$\");\n  if (pattern.test(date)) {\n    day = parseInt(dayPattern.exec(date)[0].replace(/[^0-9]/g,\
    \ \"\"));\n    month = parseInt(monthPattern.exec(date)[0].replace(/[^0-9]/g,\
    \ \"\"));\n    year = parseInt(yearPattern.exec(date)[0].replace(/[^0-9]/g, \"\
    \"));\n    if (day <= 31 && day >= 1 && month <= 12 && month >= 1) {\n      if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        isValid = true;\n      } else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n        if (day <= 30) {\n\
    \          isValid = true;\n        }\n      } else if (month == 2) {\n      \
    \  if (day <= 29) {\n          isValid = true;\n        }\n      }\n    }\n  }\n\
    \  return isValid;\n}\n", "  const days: number[] = [31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n  const [month, day, year] = date.split(\"-\").map(Number);\n\
    \  //if (month < 1 || month > 12) return false;\n  //if (day < 1 || day > days[month\
    \ - 1]) return false;\n  //if (month === 2 && day === 29 && year % 4 === 0) return\
    \ true;\n  //if (month === 2 && day === 29) return false;\n  //return true;\n\
    \  return !(month < 1 || month > 12 || day < 1 || day > days[month - 1] || (month\
    \ === 2 && day === 29 && year % 4 !== 0));\n}\n\nconsole.log(valid_date(\"03-11-2000\"\
    ));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"\
    ));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"\
    ));\n", "    let val = true;\n    let d = new Date(date);\n    let dformat = [d.getMonth()\
    \ + 1, d.getDate(), d.getFullYear()].join('-')\n    let dformat2 = [d.getDate(),\
    \ d.getMonth() + 1, d.getFullYear()].join('-')\n    if (date.length < 8 || date.length\
    \ > 10) {\n        val = false;\n    }\n    else if (date != dformat && date !=\
    \ dformat2) {\n        val = false;\n    }\n    else if (d.getDate() < 1 || d.getDate()\
    \ > 31) {\n        val = false;\n    }\n    else if (d.getMonth() < 0 || d.getMonth()\
    \ > 11) {\n        val = false;\n    }\n    return val;\n}", "    let parts =\
    \ date.split(\"-\");\n    if (parts.length != 3) {\n        return false;\n  \
    \  }\n    let month = parseInt(parts[0]);\n    let day = parseInt(parts[1]);\n\
    \    let year = parseInt(parts[2]);\n    return isValidDate(day, month, year);\n\
    }\n", "  return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-\\d{4}$/.test(date);\n\
    }\n", "  let regex = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$/;\n\
    \  return regex.test(date);\n}\n", "    const re = /^(0[1-9]|1[0-2])-([0-2][0-9]|3[0-1])-(19[0-9][0-9]|20[0-9][0-9])$/\n\
    \    const validDate = re.test(date)\n    return validDate\n}\n", "    const regexp\
    \ = /^\\d{2}-\\d{2}-\\d{4}$/;\n    if (regexp.test(date)) {\n        const [month,\
    \ day, year] = date.split('-').map(Number);\n        const isLeapYear = (year\
    \ % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (month === 2)\
    \ {\n            if (isLeapYear) {\n                return day >= 1 && day <=\
    \ 29;\n            } else {\n                return day >= 1 && day <= 28;\n \
    \           }\n        }\n        if (month === 1 || month === 3 || month ===\
    \ 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n       \
    \     return day >= 1 && day <= 31;\n        }\n        if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n            return day >= 1 && day\
    \ <= 30;\n        }\n    }\n    return false;\n}\n", "  const [month, day, year]\
    \ = date.split(\"-\");\n  return (\n    month &&\n    year &&\n    Number(day)\
    \ >= 1 &&\n    Number(day) <= 31 &&\n    Number(month) >= 1 &&\n    Number(month)\
    \ <= 12 &&\n    Number(year) >= 0\n  );\n}\n", "    let date1 = date.split(\"\
    -\");\n    let date2 = date.split(\"/\");\n    if (date1.length !== 3 && date2.length\
    \ !== 3) return false;\n    if (Number(date1[0]) < 1 || Number(date1[0]) > 12)\
    \ return false;\n    if (Number(date1[0]) === 2) {\n        if (Number(date1[1])\
    \ < 1 || Number(date1[1]) > 29) return false;\n    } else if (Number(date1[0])\
    \ === 4 || Number(date1[0]) === 6 || Number(date1[0]) === 9 || Number(date1[0])\
    \ === 11) {\n        if (Number(date1[1]) < 1 || Number(date1[1]) > 30) return\
    \ false;\n    } else {\n        if (Number(date1[1]) < 1 || Number(date1[1]) >\
    \ 31) return false;\n    }\n    return true;\n}\n", "    let parts = date.split(\"\
    -\");\n    if (parts.length !== 3) {\n        return false;\n    }\n    let month\
    \ = Number(parts[0]);\n    let day = Number(parts[1]);\n    let year = Number(parts[2]);\n\
    \    if (year < 0) {\n        return false;\n    }\n    if (month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if (month === 2) {\n        if (year\
    \ % 4 === 0) {\n            if (day < 1 || day > 29) {\n                return\
    \ false;\n            }\n        } else {\n            if (day < 1 || day > 28)\
    \ {\n                return false;\n            }\n        }\n    } else if ([1,\
    \ 3, 5, 7, 8, 10, 12].includes(month)) {\n        if (day < 1 || day > 31) {\n\
    \            return false;\n        }\n    } else {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    console.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"\
    ));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"\
    ));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    let str = date.split(\"\
    -\");\n    if (str.length != 3) return false;\n    if (str[0].length == 2 && str[1].length\
    \ == 2 && str[2].length == 4) {\n        let m = parseInt(str[0]);\n        let\
    \ d = parseInt(str[1]);\n        let y = parseInt(str[2]);\n        if (m > 0\
    \ && m < 13) {\n            if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8\
    \ || m == 10 || m == 12) {\n                if (d > 0 && d < 32) return true;\n\
    \            }\n            else if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \                if (d > 0 && d < 31) return true;\n            }\n          \
    \  else if (m == 2) {\n                if (d > 0 && d < 30) return true;\n   \
    \         }\n        }\n    }\n    return false;\n}\n", "  const pattern = /^([0][1-9]|[1][0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\\\
    d{4}$/;\n  const result = pattern.test(date);\n  return result;\n}\n", "  // your\
    \ code here\n  let num = 0;\n  let arr = [];\n  for (let i = 0; i < date.length;\
    \ i++) {\n    if (date[i] === \"0\" || date[i] === \"1\" || date[i] === \"2\"\
    \ || date[i] === \"3\" || date[i] === \"4\" || date[i] === \"5\" || date[i] ===\
    \ \"6\" || date[i] === \"7\" || date[i] === \"8\" || date[i] === \"9\") {\n  \
    \    num += parseInt(date[i]);\n    } else if (date[i] === \"-\" || date[i] ===\
    \ \"/\") {\n      arr.push(num);\n      num = 0;\n    }\n  }\n  arr.push(num);\n\
    \  if (arr.length === 3) {\n    if (arr[0] <= 12 && arr[0] > 0) {\n      if (arr[0]\
    \ === 1 || arr[0] === 3 || arr[0] === 5 || arr[0] === 7 || arr[0] === 8 || arr[0]\
    \ === 10 || arr[0] === 12) {\n        if (arr[1] <= 31 && arr[1] > 0) {\n    \
    \      return true;\n        }\n      } else if (arr[0] === 4 || arr[0] === 6\
    \ || arr[0] === 9 || arr[0] === 11) {\n        if (arr[1] <= 30 && arr[1] > 0)\
    \ {\n          return true;\n        }\n      } else if (arr[0] === 2) {\n   \
    \     if (arr[1] <= 29 && arr[1] > 0) {\n          return true;\n        }\n \
    \     }\n    }\n  }\n  return false;\n}\n", "  let month = Number(date.slice(0,\
    \ 2));\n  let day = Number(date.slice(3, 5));\n  let year = Number(date.slice(6,\
    \ 10));\n  if (\n    date.length === 10 &&\n    month > 0 &&\n    month < 13 &&\n\
    \    day > 0 &&\n    (month == 1 ||\n      month == 3 ||\n      month == 5 ||\n\
    \      month == 7 ||\n      month == 8 ||\n      month == 10 ||\n      month ==\
    \ 12) &&\n    day < 32 &&\n    (month == 4 || month == 6 || month == 9 || month\
    \ == 11) &&\n    day < 31 &&\n    month == 2 &&\n    day < 30 &&\n    date.charAt(2)\
    \ == \"-\" &&\n    date.charAt(5) == \"-\"\n  ) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  let validDate = false;\n  if (date.length\
    \ > 0) {\n    const month = Number(date.slice(0, 2));\n    const day = Number(date.slice(3,\
    \ 5));\n    const year = Number(date.slice(6, 10));\n    if (year >= 1) {\n  \
    \    if (month >= 1 && month <= 12) {\n        if (month === 1 || month === 3\
    \ || month === 5 || month === 7 || month === 8 || month === 10 || month === 12)\
    \ {\n          if (day >= 1 && day <= 31) {\n            validDate = true;\n \
    \         }\n        } else if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n          if (day >= 1 && day <= 30) {\n            validDate = true;\n\
    \          }\n        } else if (month === 2) {\n          if (day >= 1 && day\
    \ <= 29) {\n            validDate = true;\n          }\n        }\n      }\n \
    \   }\n  }\n  return validDate;\n}\n", "    let dts: string[] = date.split(\"\
    -\");\n    let dt: Date = new Date(Number(dts[2]), Number(dts[0]) - 1, Number(dts[1]));\n\
    \    let dtn: number = dt.getDate();\n    let mtn: number = dt.getMonth();\n \
    \   let ytn: number = dt.getFullYear();\n    if (dts.length === 3 && date.includes(\"\
    -\") && dts[0].length === 2 && dts[1].length === 2 && dts[2].length === 4 && dtn\
    \ === Number(dts[1]) && mtn === Number(dts[0]) - 1 && ytn === Number(dts[2]))\
    \ {\n        return true;\n    }\n    return false;\n}\n", "  const [month, day,\
    \ year] = date.split(\"-\");\n  if (\n    !date ||\n    parseInt(month) < 1 ||\n\
    \    parseInt(month) > 12 ||\n    parseInt(day) < 1 ||\n    parseInt(day) > 31\
    \ ||\n    date.length !== 10\n  ) {\n    return false;\n  }\n  if (\n    (parseInt(month)\
    \ === 2 && parseInt(day) > 29) ||\n    (parseInt(month) === 4 && parseInt(day)\
    \ > 30) ||\n    (parseInt(month) === 6 && parseInt(day) > 30) ||\n    (parseInt(month)\
    \ === 9 && parseInt(day) > 30) ||\n    (parseInt(month) === 11 && parseInt(day)\
    \ > 30)\n  ) {\n    return false;\n  }\n  return true;\n}\n\ndescribe(\"valid_date\
    \ function\", () => {\n  it(\"should return true\", () => {\n    const result\
    \ = valid_date(\"03-11-2000\");\n    expect(result).toBe(true);\n  });\n  it(\"\
    should return false\", () => {\n    const result = valid_date(\"15-01-2012\");\n\
    \    expect(result).toBe(false);\n  });\n  it(\"should return false\", () => {\n\
    \    const result = valid_date(\"04-0-2040\");\n    expect(result).toBe(false);\n\
    \  });\n  it(\"should return true\", () => {\n    const result = valid_date(\"\
    06-04-2020\");\n    expect(result).toBe(true);\n  });\n  it(\"should return false\"\
    , () => {\n    const result = valid_date(\"06/04/2020\");\n    expect(result).toBe(false);\n\
    \  });\n});", "    //TODO Write your code here\n    return false;\n}", "  let\
    \ [month, day, year] = date.split(\"-\");\n  if (Number(day) > 31 || Number(day)\
    \ < 1) {\n    return false;\n  }\n  if (Number(month) > 12 || Number(month) <\
    \ 1) {\n    return false;\n  }\n  if (Number(year) < 1000 || Number(year) > 9999)\
    \ {\n    return false;\n  }\n  if (date.includes(\"/\")) {\n    return false;\n\
    \  }\n  return true;\n}\n\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "    const dateArr\
    \ = date.split('-');\n    if (dateArr.length !== 3) {\n        return false;\n\
    \    }\n    const month = parseInt(dateArr[0]);\n    const day = parseInt(dateArr[1]);\n\
    \    const year = parseInt(dateArr[2]);\n    if (month > 12 || month < 1) {\n\
    \        return false;\n    }\n    if (day > 31 || day < 1) {\n        return\
    \ false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (month == 2) {\n        if (day > 29) {\n            return false;\n   \
    \     }\n    }\n    if (year % 4 == 0) {\n        if (month == 2) {\n        \
    \    if (day > 29) {\n                return false;\n            }\n        }\n\
    \    } else {\n        if (month == 2) {\n            if (day > 28) {\n      \
    \          return false;\n            }\n        }\n    }\n    return true;\n}",
  "    const reg = /([1-9]|[12][0-9]|3[01])-([1-9]|1[012])-\\d{4}/;\n    return reg.test(date);\n\
    }\n", "    //return true if date\n    return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\\
    d|3[01])-([12]\\d{3})$/.test(date);\n}", "  if (!date) {\n    return false;\n\
    \  }\n  const regex = /^([0]\\d|[1][0-2])-([0-2]\\d|[3][0-1])-\\d{4}$/;\n  if\
    \ (!regex.test(date)) {\n    return false;\n  }\n  const [month, day, year] =\
    \ date.split(\"-\").map(Number);\n  if (month < 1 || month > 12) {\n    return\
    \ false;\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return\
    \ false;\n    }\n  } else if (\n    month === 1 ||\n    month === 3 ||\n    month\
    \ === 5 ||\n    month === 7 ||\n    month === 8 ||\n    month === 10 ||\n    month\
    \ === 12\n  ) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n\
    \  } else {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"\
    15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"\
    06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"));\n", "  let dateArray\
    \ = date.split(\"-\").map(e => parseInt(e));\n  if (dateArray.length !== 3) {\n\
    \    return false;\n  }\n  if (dateArray[1] < 1 || dateArray[1] > 12) {\n    return\
    \ false;\n  }\n  if (dateArray[1] === 2) {\n    if (dateArray[0] < 1 || dateArray[0]\
    \ > 29) {\n      return false;\n    }\n  } else if (dateArray[1] === 4 || dateArray[1]\
    \ === 6 || dateArray[1] === 9 || dateArray[1] === 11) {\n    if (dateArray[0]\
    \ < 1 || dateArray[0] > 30) {\n      return false;\n    }\n  } else {\n    if\
    \ (dateArray[0] < 1 || dateArray[0] > 31) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "  let valid = true;\n  let len = date.length;\n  let month\
    \ = 0;\n  let day = 0;\n  let year = 0;\n  //check for empty string\n  if (len\
    \ < 1) {\n    valid = false;\n  }\n  //check for valid formatting.\n  else if\
    \ (date.slice(2, 3) !== \"-\" || date.slice(5, 6) !== \"-\") {\n    valid = false;\n\
    \  }\n  //check if all characters are numbers\n  else if (isNaN(Number(date.slice(0,\
    \ 2))) === true) {\n    valid = false;\n  } else if (isNaN(Number(date.slice(3,\
    \ 5))) === true) {\n    valid = false;\n  } else if (isNaN(Number(date.slice(6,\
    \ 10))) === true) {\n    valid = false;\n  } else {\n    month = Number(date.slice(0,\
    \ 2));\n    day = Number(date.slice(3, 5));\n    year = Number(date.slice(6, 10));\n\
    \  }\n  //check for valid month value\n  if (month < 1 || month > 12) {\n    valid\
    \ = false;\n  }\n  //check for valid day value\n  if (\n    (month === 2 && day\
    \ < 1) ||\n    (month === 2 && day > 29) ||\n    (month === 4 && day < 1) ||\n\
    \    (month === 4 && day > 30) ||\n    (month === 6 && day < 1) ||\n    (month\
    \ === 6 && day > 30) ||\n    (month === 9 && day < 1) ||\n    (month === 9 &&\
    \ day > 30) ||\n    (month === 11 && day < 1) ||\n    (month === 11 && day > 30)\
    \ ||\n    (month === 1 && day < 1) ||\n    (month === 1 && day > 31) ||\n    (month\
    \ === 3 && day < 1) ||\n    (month === 3 && day > 31) ||\n    (month === 5 &&\
    \ day < 1) ||\n    (month === 5 && day > 31) ||\n    (month === 7 && day < 1)\
    \ ||\n    (month === 7 && day", "    const parts = date.split('-');\n    if (parts.length\
    \ !== 3) {\n        return false;\n    }\n    const [month, day, year] = parts;\n\
    \    const checkMonth = +month > 0 && +month < 13;\n    const checkYear = +year\
    \ > 0;\n    const checkDay = checkMonth && +day > 0 && +day < 32;\n    if ([4,\
    \ 6, 9, 11].includes(+month)) {\n        checkDay && +day < 31;\n    }\n    if\
    \ (+month === 2) {\n        checkDay && +day < 30;\n    }\n    return checkMonth\
    \ && checkDay && checkYear;\n}", "    return true;\n}\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));\n", "    let valid: boolean = true;\n    let dateArray: string[]\
    \ = date.split(\"-\");\n    if (dateArray.length !== 3) {\n        valid = false;\n\
    \    }\n    else {\n        for (let i = 0; i < dateArray.length; i++) {\n   \
    \         if (isNaN(Number(dateArray[i]))) {\n                valid = false;\n\
    \            }\n        }\n        if (Number(dateArray[0]) < 1 || Number(dateArray[0])\
    \ > 12) {\n            valid = false;\n        }\n        if (Number(dateArray[0])\
    \ < 1 || Number(dateArray[0]) > 12) {\n            valid = false;\n        }\n\
    \        if (Number(dateArray[0]) === 2) {\n            if (Number(dateArray[1])\
    \ < 1 || Number(dateArray[1]) > 29) {\n                valid = false;\n      \
    \      }\n        }\n        else if (Number(dateArray[0]) === 1 || Number(dateArray[0])\
    \ === 3 || Number(dateArray[0]) === 5 || Number(dateArray[0]) === 7 || Number(dateArray[0])\
    \ === 8 || Number(dateArray[0]) === 10 || Number(dateArray[0]) === 12) {\n   \
    \         if (Number(dateArray[1]) < 1 || Number(dateArray[1]) > 31) {\n     \
    \           valid = false;\n            }\n        }\n        else {\n       \
    \     if (Number(dateArray[1]) < 1 || Number(dateArray[1]) > 30) {\n         \
    \       valid = false;\n            }\n        }\n    }\n    return valid;\n}\n",
  "    let dateArray = date.split(\"-\");\n    if (dateArray.length !== 3) {\n   \
    \     return false;\n    }\n    // @ts-ignore\n    if (dateArray[0] < 1 || dateArray[0]\
    \ > 12) {\n        return false;\n    }\n    // @ts-ignore\n    if (dateArray[1]\
    \ < 1 || dateArray[1] > 31) {\n        return false;\n    }\n    // @ts-ignore\n\
    \    if (dateArray[2] < 1) {\n        return false;\n    }\n    // @ts-ignore\n\
    \    if (dateArray[0] === 4 || dateArray[0] === 6 || dateArray[0] === 9 || dateArray[0]\
    \ === 11) {\n        // @ts-ignore\n        if (dateArray[1] > 30) {\n       \
    \     return false;\n        }\n    }\n    // @ts-ignore\n    if (dateArray[0]\
    \ === 2) {\n        // @ts-ignore\n        if (dateArray[1] > 29) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(valid_date(\"\
    03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"\
    04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"\
    06/04/2020\"));", "    let isValid = true;\n    let months = [1, 3, 5, 7, 8, 10,\
    \ 12];\n    let daysOfMonth = [31, 30, 29, 28];\n    let day = parseInt(date.substring(0,\
    \ 2));\n    let month = parseInt(date.substring(3, 5));\n    if (isNaN(day) ||\
    \ isNaN(month))\n        return false;\n    else if (day > daysOfMonth[3] || day\
    \ < daysOfMonth[0])\n        return false;\n    else if (months.indexOf(month)\
    \ != -1 && day > daysOfMonth[0])\n        return false;\n    else if (months.indexOf(month)\
    \ == -1 && day > daysOfMonth[1])\n        return false;\n    else if (day > daysOfMonth[2]\
    \ && month == 2)\n        return false;\n    else if (month > 12 || month < 1)\n\
    \        return false;\n    else if (date.substring(2, 3) != \"-\" || date.substring(5,\
    \ 6) != \"-\")\n        return false;\n    else if (date.length != 10)\n     \
    \   return false;\n    return isValid;\n}\n", "  let dateNumbers = date.split('-');\n\
    \  let m = Number(dateNumbers[0]);\n  let d = Number(dateNumbers[1]);\n  let y\
    \ = Number(dateNumbers[2]);\n  let thirtyDays = [4, 6, 9, 11];\n  let thirtyOneDays\
    \ = [1, 3, 5, 7, 8, 10, 12];\n  if (date.length == 0) {\n    return false;\n \
    \ }\n  if (thirtyDays.includes(m) && (d < 1 || d > 30)) {\n    return false;\n\
    \  }\n  if (thirtyOneDays.includes(m) && (d < 1 || d > 31)) {\n    return false;\n\
    \  }\n  if (m == 2 && (d < 1 || d > 29)) {\n    return false;\n  }\n  if (m <\
    \ 1 || m > 12) {\n    return false;\n  }\n  if (y < 0) {\n    return false;\n\
    \  }\n  return true;\n}\n", "    //TODO\n    return false;\n}\n", "  const dateArray\
    \ = date.split(\"-\");\n  if (dateArray.length !== 3) {\n    return false;\n \
    \ }\n  const dateObj = {\n    year: Number(dateArray[2]),\n    month: Number(dateArray[0]),\n\
    \    day: Number(dateArray[1]),\n  };\n  if (dateObj.month > 12 || dateObj.month\
    \ < 1) {\n    return false;\n  }\n  if (dateObj.day > 31 || dateObj.day < 1) {\n\
    \    return false;\n  }\n  return true;\n}\n\nconsole.log(valid_date(\"03-11-2000\"\
    ));\nconsole.log(valid_date(\"15-01-2012\"));\nconsole.log(valid_date(\"04-0-2040\"\
    ));\nconsole.log(valid_date(\"06-04-2020\"));\nconsole.log(valid_date(\"06/04/2020\"\
    ));\n", "    let [d, m, y] = date.split(\"-\").map(x => parseInt(x));\n    if\
    \ (isNaN(d) || isNaN(m) || isNaN(y)) return false;\n    let valid = m <= 12 &&\
    \ m >= 1 && y >= 1900 && y <= 9999;\n    if (valid) {\n        if (m == 2) valid\
    \ = d <= 29 && d >= 1;\n        else if (m == 4 || m == 6 || m == 9 || m == 11)\
    \ valid = d <= 30 && d >= 1;\n        else valid = d <= 31 && d >= 1;\n    }\n\
    \    return valid;\n}", "  if (date.length !== 10) {\n    return false;\n  }\n\
    \  const day = parseInt(date.slice(3, 5));\n  const month = parseInt(date.slice(0,\
    \ 2));\n  const year = parseInt(date.slice(6, 10));\n  const currentYear = new\
    \ Date().getFullYear();\n  if (day <= 0 || day > 31 || month <= 0 || month > 12\
    \ || year < 0 || year > currentYear) {\n    return false;\n  }\n  if (\n    (month\
    \ === 2 && day > 29) ||\n    (month === 4 && day > 30) ||\n    (month === 6 &&\
    \ day > 30) ||\n    (month === 9 && day > 30) ||\n    (month === 11 && day > 30)\n\
    \  ) {\n    return false;\n  }\n  return true;\n}\n\nconsole.log(valid_date(\"\
    06-04-2020\"));\n", "    let [m, d, y] = date.split(\"-\");\n    let isValid =\
    \ !isNaN(Number(m)) &&\n        !isNaN(Number(d)) &&\n        !isNaN(Number(y))\
    \ &&\n        Number(y) >= 0 &&\n        Number(m) > 0 &&\n        Number(m) <=\
    \ 12 &&\n        Number(d) > 0 &&\n        Number(d) <= 31;\n    if (isValid)\
    \ {\n        if (Number(m) == 2) {\n            isValid = Number(d) <= 29;\n \
    \       } else if (Number(m) % 2 == 0) {\n            isValid = Number(d) <= 30;\n\
    \        }\n    }\n    return isValid;\n}\n", "  let res = false;\n  const pattern\
    \ = /^([0-2][0-9]|(3)[0-1])(-)(((0)[0-9])|((1)[0-2]))(\\2)(\\d{4})$/;\n  if (pattern.test(date))\
    \ {\n    res = true;\n  }\n  return res;\n}\n", "    const pattern = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/;\n\
    \    if (pattern.test(date)) {\n        const [month, day, year] = date.split('-').map(s\
    \ => parseInt(s));\n        const febDays = (year % 4 == 0 && year % 100 != 0)\
    \ || year % 400 == 0 ? 29 : 28;\n        const monthDays = [31, febDays, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31];\n        return day <= monthDays[month - 1];\n\
    \    }\n    return false;\n}\n", "    const isDateValid = (d: string): boolean\
    \ => {\n        const month = +d.substr(0, 2);\n        const day = +d.substr(3,\
    \ 2);\n        if (month === 2) {\n            if (day < 1 || day > 29) {\n  \
    \              return false;\n            }\n        } else if (month === 1 ||\
    \ month === 3 || month === 5 || month === 7 || month === 8 || month === 10 ||\
    \ month === 12) {\n            if (day < 1 || day > 31) {\n                return\
    \ false;\n            }\n        } else if (month === 4 || month === 6 || month\
    \ === 9 || month === 11) {\n            if (day < 1 || day > 30) {\n         \
    \       return false;\n            }\n        } else {\n            return false;\n\
    \        }\n        return true;\n    };\n    return (date.length === 10 && isDateValid(date));\n\
    }\n", "    return false;\n}", "  return /^(((0[1-9]|[12]\\d|3[01])-(0[13578]|1[02])-(19|[2-9]\\\
    d)\\d{2})|((0[1-9]|[12]\\d|30)-(0[13456789]|1[012])-(19|[2-9]\\d)\\d{2})|((0[1-9]|1\\\
    d|2[0-8])-02-(19|[2-9]\\d)\\d{2})|(29-02-(1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)))$/.test(\n\
    \    date\n  );\n}\n", "  if (!/^\\d{2}-\\d{2}-\\d{4}$/.test(date)) {\n    return\
    \ false;\n  }\n  const [day, month, year] = date.split(\"-\").map(Number);\n \
    \ const dateObject = new Date(year, month - 1, day);\n  return (\n    dateObject.getDate()\
    \ === day &&\n    dateObject.getMonth() === month - 1 &&\n    dateObject.getFullYear()\
    \ === year\n  );\n}", "  const pattern = new RegExp(\n    /^(((0[1-9]|[12]\\d|3[01])-(0[13578]|1[02])-[12]\\\
    d{3})|((0[1-9]|[12]\\d|30)-(0[13456789]|1[012])-[12]\\d{3})|((0[1-9]|1\\d|2[0-8])-02-[12]\\\
    d{3})|(29-02-[0-9]{2}([02468][048]|[13579][26])))$/\n  );\n  return pattern.test(date);\n\
    }\n", "    let fecha: string[] = date.split(\"-\");\n    let mes: number = parseInt(fecha[0]);\n\
    \    let dia: number = parseInt(fecha[1]);\n    let anio: number = parseInt(fecha[2]);\n\
    \    if (dia >= 1 && dia <= 31 && mes >= 1 && mes <= 12 && anio > 0) {\n     \
    \   if (mes == 1 || mes == 3 || mes == 5 || mes == 7 || mes == 8 || mes == 10\
    \ || mes == 12) {\n            return true;\n        } else if (mes == 4 || mes\
    \ == 6 || mes == 9 || mes == 11) {\n            if (dia <= 30) {\n           \
    \     return true;\n            } else {\n                return false;\n    \
    \        }\n        } else if (mes == 2) {\n            if (dia <= 29) {\n   \
    \             return true;\n            } else {\n                return false;\n\
    \            }\n        }\n    } else {\n        return false;\n    }\n}", " \
    \ return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])-(\\d{4})$/.test(date);\n}\n",
  "    if (date.length == 0) {\n        return false;\n    }\n    let arr = date.split(\"\
    -\");\n    let year = Number(arr[2]);\n    let month = Number(arr[0]);\n    let\
    \ day = Number(arr[1]);\n    if (month > 12 || month < 1) {\n        return false;\n\
    \    }\n    if (day > 31 || day < 1) {\n        return false;\n    }\n    if ((month\
    \ == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n        return\
    \ false;\n    }\n    if (month == 2 && day > 29) {\n        return false;\n  \
    \  }\n    if (date.length != 10) {\n        return false;\n    }\n    if (month\
    \ != Number(arr[0]) || day != Number(arr[1]) || year != Number(arr[2])) {\n  \
    \      return false;\n    }\n    return true;\n}\nconsole.log(valid_date(\"06-04-2020\"\
    ));\n", "    let dateArr = date.split('-');\n    if (dateArr.length !== 3) {\n\
    \        return false;\n    }\n\n    let [month, day, year] = dateArr;\n    if\
    \ (parseInt(month) < 1 || parseInt(month) > 12) {\n        return false;\n   \
    \ }\n    if (parseInt(year) < 1) {\n        return false;\n    }\n    if ((parseInt(month)\
    \ === 1 || parseInt(month) === 3 || parseInt(month) === 5 || parseInt(month) ===\
    \ 7 || parseInt(month) === 8 || parseInt(month) === 10 || parseInt(month) ===\
    \ 12) && parseInt(day) < 1 || parseInt(day) > 31) {\n        return false;\n \
    \   }\n    if ((parseInt(month) === 4 || parseInt(month) === 6 || parseInt(month)\
    \ === 9 || parseInt(month) === 11) && parseInt(day) < 1 || parseInt(day) > 30)\
    \ {\n        return false;\n    }\n    if (parseInt(month) === 2 && parseInt(day)\
    \ < 1 || parseInt(day) > 29) {\n        return false;\n    }\n    return true;\n\
    }\nconsole.log(valid_date(\"03-11-2000\"));\nconsole.log(valid_date(\"15-01-2012\"\
    ));\nconsole.log(valid_date(\"04-0-2040\"));\nconsole.log(valid_date(\"06-04-2020\"\
    ));\nconsole.log(valid_date(\"06/04/2020\"));\n", "  let result: boolean = false;\n\
    \  let reg = /^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$/;\n  if\
    \ (reg.test(date)) {\n    result = true;\n  }\n  return result;\n}\n", "    const\
    \ regex = new RegExp(/(^\\d{2}(?:-|\\/)\\d{2}(?:-|\\/)\\d{4}$)/);\n    const splittedDate\
    \ = date.split(\"-\");\n    if (regex.test(date)) {\n        return (parseInt(splittedDate[1])\
    \ <= 31 && parseInt(splittedDate[1]) > 0) &&\n            (parseInt(splittedDate[0])\
    \ <= 12 && parseInt(splittedDate[0]) > 0) &&\n            (parseInt(splittedDate[2])\
    \ >= 2000 && parseInt(splittedDate[2]) <= 2020);\n    }\n    return false;\n}\n",
  "    return RegExp(/^\\d{2}-\\d{2}-\\d{4}$/).test(date) && \n           (\n    \
    \           (RegExp(/^(01|03|05|07|08|10|12)-\\d{2}-\\d{4}$/).test(date) && (1\
    \ <= parseInt(date.substr(3,2)) && parseInt(date.substr(3,2)) <= 31)) ||\n   \
    \            (RegExp(/^(04|06|09|11)-\\d{2}-\\d{4}$/).test(date) && (1 <= parseInt(date.substr(3,2))\
    \ && parseInt(date.substr(3,2)) <= 30)) ||\n               (RegExp(/^02-\\d{2}-\\\
    d{4}$/).test(date) && (1 <= parseInt(date.substr(3,2)) && parseInt(date.substr(3,2))\
    \ <= 29))\n           ) &&\n           (1 <= parseInt(date.substr(0,2)) && parseInt(date.substr(0,2))\
    \ <= 12);\n}\n", "    let myDate = date.split(\"-\");\n    let months = [\"January\"\
    , \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"\
    Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"\
    Saturday\"];\n    let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31];\n    let dateObj = new Date(date);\n    let day = dateObj.getDay();\n \
    \   let month = dateObj.getMonth();\n    let year = dateObj.getFullYear();\n \
    \   let dayName = days[day];\n    let monthName = months[month];\n    let noOfDaysInMonth\
    \ = daysInMonth[month];\n    let d = parseInt(myDate[0]);\n    let m = parseInt(myDate[1]);\n\
    \    let y = parseInt(myDate[2]);\n    if (date === '') {\n        return false;\n\
    \    }\n    if ((d < 1 || d > 31) && (m < 1 || m > 12)) {\n        return false;\n\
    \    }\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m\
    \ == 12) {\n        if (d < 1 || d > 31) {\n            return false;\n      \
    \  }\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n        if (d <\
    \ 1 || d > 30) {\n            return false;\n        }\n    }\n    if (m == 2)\
    \ {\n        if (d < 1 || d > 29) {\n            return false;\n        }\n  \
    \  }\n    if (date.length !== 10) {\n        return false;\n    }\n    if (date.slice(2,\
    \ 3) !== '-' || date.slice(5, 6) !== '-') {\n        return false;\n    }\n  \
    \  console.log(d, m, y, monthName, noOfDaysInMonth, dayName);\n    return true;\n\
    }\nconsole.log(valid_", "    let dateArray = date.split(\"-\");\n    let day =\
    \ parseInt(dateArray[0]);\n    let month = parseInt(dateArray[1]);\n    let year\
    \ = parseInt(dateArray[2]);\n    if (year > 2020) {\n        return false;\n \
    \   }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if\
    \ (month === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n\
    \        }\n    } else if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n \
    \       }\n    } else {\n        if (day < 1 || day > 31) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    let date_array = date.split(\"\
    -\");\n    if (date_array.length !== 3) {\n        return false;\n    }\n    let\
    \ date_year = parseInt(date_array[2]);\n    let date_month = parseInt(date_array[0]);\n\
    \    let date_day = parseInt(date_array[1]);\n    let current_date = new Date();\n\
    \    let current_year = current_date.getFullYear();\n    if (date_year < 2000\
    \ || date_year > current_year) {\n        return false;\n    }\n    if (date_month\
    \ < 1 || date_month > 12) {\n        return false;\n    }\n    if (date_month\
    \ === 2) {\n        if (date_day < 1 || date_day > 29) {\n            return false;\n\
    \        }\n    } else if (date_month === 1 || date_month === 3 || date_month\
    \ === 5 || date_month === 7 || date_month === 8 || date_month === 10 || date_month\
    \ === 12) {\n        if (date_day < 1 || date_day > 31) {\n            return\
    \ false;\n        }\n    } else {\n        if (date_day < 1 || date_day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  let [day, month, year] = date.split('-');\n    let d = parseInt(day);\n   \
    \ let m = parseInt(month);\n    let y = parseInt(year);\n    if (date == '') {\n\
    \        return false;\n    }\n    if (m > 12 || m < 1) {\n        return false;\n\
    \    }\n    if (m == 2) {\n        if (d < 1 || d > 29) {\n            return\
    \ false;\n        }\n    }\n    if (m == 1 || m == 3 || m == 5 || m == 7 || m\
    \ == 8 || m == 10 || m == 12) {\n        if (d < 1 || d > 31) {\n            return\
    \ false;\n        }\n    }\n    if (m == 4 || m == 6 || m == 9 || m == 11) {\n\
    \        if (d < 1 || d > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
