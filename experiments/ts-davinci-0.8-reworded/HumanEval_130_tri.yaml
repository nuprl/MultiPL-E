name: HumanEval_130_tri
language: ts
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return an array of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1,\
  \ 3, 2, 8]\nfunction tri(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n\
  \  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
  \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
  \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3, 15,\
  \ 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["    if (n === 0) return [];\n    if (n === 1) return [1];\n    if (n\
    \ === 2) return [1, 3];\n    return [1, 3, 2, 8].concat(tri(n - 3));\n}\n", " \
    \ let arr = [0, 1, 3, 2, 8]\n  if (n <= 4) {\n    return arr.slice(0, n + 1)\n\
    \  }\n  for (let i = 5; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] +\
    \ arr[i - 3])\n  }\n  return arr\n}\n\ndescribe('9: \u8FD4\u56DE\u7B2C n \u4E2A\
    \u6CF0\u6CE2\u90A3\u5951\u6570', function() {\n  it('number => number[]', function()\
    \ {\n    const args = [\n      { input: 0, output: [0] },\n      { input: 1, output:\
    \ [0, 1] },\n      { input: 2, output: [0, 1, 3] },\n      { input: 3, output:\
    \ [0, 1, 3, 2] },\n      { input: 4, output: [0, 1, 3, 2, 8] },\n      { input:\
    \ 5, output: [0, 1, 3, 2, 8, 15] },\n      { input: 6, output: [0, 1, 3, 2, 8,\
    \ 15, 26] },\n      { input: 7, output: [0, 1, 3, 2, 8, 15, 26, 45] },\n     \
    \ { input: 8, output: [0, 1, 3, 2, 8, 15, 26, 45, 73] },\n      { input: 9, output:\
    \ [0, 1, 3, 2, 8, 15, 26, 45, 73, 120] },\n      { input: 10, output: [0, 1, 3,\
    \ 2, 8, 15, 26, 45, 73, 120, 195] },\n      { input: 11, output: [0, 1, 3, 2,\
    \ 8, 15, 26, 45, 73, 120, 195, 317] },\n      { input: 12, output: [0, 1, 3, 2,\
    \ 8, 15, 26, 45, 73, 120, 195, 317, 514] },\n      { input: 13, output: [0, 1,\
    \ 3, 2, 8, 15, 26, 45, 73, 120, 195, 317, 514, 832] },\n", "    const result =\
    \ new Array(n + 1);\n    result[0] = 1;\n    result[1] = 3;\n    result[2] = 2;\n\
    \    for (let i = 3; i <= n; i++) {\n        result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n    }\n    return result;\n}\n", "    let triArray =\
    \ [1, 3, 2];\n    let next: number;\n    for (let i = 3; i <= n; i++) {\n    \
    \    next = i % 2 ? (triArray[i - 1] + triArray[i - 2] + triArray[i + 1]) : (1\
    \ + i / 2);\n        triArray.push(next);\n    }\n    return triArray;\n}\n",
  "  const result = [1, 3, 2];\n  let isEven = true;\n  while (result.length - 1 <\
    \ n) {\n    if (isEven) {\n      const x = result.length;\n      result.push(1\
    \ + x / 2);\n    } else {\n      const last = result[result.length - 1];\n   \
    \   const beforeLast = result[result.length - 2];\n      const beforeBeforeLast\
    \ = result[result.length - 3];\n      result.push(last + beforeLast + beforeBeforeLast);\n\
    \    }\n    isEven = !isEven;\n  }\n  return result;\n}\n", "  if (n === 0) {\n\
    \    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n  }\n  if (n ===\
    \ 2) {\n    return [1, 3, 2];\n  }\n  return [\n    1,\n    3,\n    2,\n    8,\n\
    \    tri(n - 1)[n - 1] + tri(n - 2)[n - 2] + tri(n - 3)[n - 3],\n  ];\n}\n\nconsole.log(tri(3));",
  "    let result = [];\n    if (n == 0) {\n        return [1];\n    } else if (n\
    \ == 1) {\n        return [1, 3];\n    } else if (n == 2) {\n        return [1,\
    \ 3, 2];\n    }\n    result.push(1, 3, 2);\n    let i = 3;\n    while (i <= n)\
    \ {\n        let a = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(a);\n\
    \        i++;\n    }\n    return result;\n}\n\nconsole.log(tri(4));", "    let\
    \ res = [];\n    let a = 1;\n    let b = 3;\n    let c = 2;\n    let d;\n    for\
    \ (let i = 0; i <= n; i++) {\n        if (i == 0) {\n            res.push(1);\n\
    \        } else if (i == 1) {\n            res.push(3);\n        } else if (i\
    \ == 2) {\n            res.push(2);\n        } else {\n            if (i % 2 ==\
    \ 0) {\n                d = 1 + (i / 2);\n            } else {\n             \
    \   d = a + b + c;\n            }\n            a = b;\n            b = c;\n  \
    \          c = d;\n            res.push(d);\n        }\n    }\n    return res;\n\
    }\n", "    let result = [1, 3, 2, 8];\n    if (n < 3) return result.slice(0, n\
    \ + 1);\n    let count = 3;\n    while (count < n) {\n        count++;\n     \
    \   let temp = result[0] + result[1] + result[2];\n        result.unshift(temp);\n\
    \    }\n    return result;\n}\n", "\tlet res: number[] = [1, 3, 2];\n\tfor (let\
    \ i = 0; i < n; i++) {\n\t\tif (i % 2) {\n\t\t\tres.push(res[i] + res[i - 1] +\
    \ res[i + 1]);\n\t\t} else {\n\t\t\tres.push(1 + i / 2);\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n\nconsole.log(tri(5));\n", "    let res = [];\n    for (let i = 0;\
    \ i <= n; i++) {\n        if (i == 0) {\n            res.push(1);\n        } else\
    \ if (i == 1) {\n            res.push(3);\n        } else if (i == 2) {\n    \
    \        res.push(2);\n        } else if (i % 2 == 0) {\n            res.push(1\
    \ + i / 2);\n        } else {\n            res.push(res[i - 1] + res[i - 2] +\
    \ res[i + 1]);\n        }\n    }\n    return res;\n}\nconsole.log(tri(3));\n",
  "  let result = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    let last = result[result.length\
    \ - 1];\n    let secondToLast = result[result.length - 2];\n    let thirdToLast\
    \ = result[result.length - 3];\n    if (i % 2 == 0) {\n      result.push(1 + (i\
    \ / 2));\n    } else {\n      result.push(last + secondToLast + thirdToLast);\n\
    \    }\n  }\n  return result;\n}\n", "    let arr = [1, 3, 2];\n    if (n ===\
    \ 0) {\n        return [1];\n    }\n    if (n === 1) {\n        return [1, 3];\n\
    \    }\n    if (n === 2) {\n        return [1, 3, 2];\n    }\n    for (let i =\
    \ 0; i < n - 2; i++) {\n        arr.push(arr[i] + arr[i + 1] + arr[i + 2]);\n\
    \    }\n    return arr;\n}\n", "    let a = 0;\n    let b = 1;\n    let c = 2;\n\
    \    let d = 3;\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n     \
    \   if (i == 0) {\n            arr.push(0);\n        } else if (i == 1) {\n  \
    \          arr.push(1);\n        } else if (i == 2) {\n            arr.push(2);\n\
    \        } else if (i == 3) {\n            arr.push(3);\n        } else {\n  \
    \          a = b;\n            b = c;\n            c = d;\n            d = a +\
    \ b + c;\n            arr.push(d);\n        }\n    }\n    return arr;\n}\n", " \
    \   const result = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        const\
    \ next = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push(next);\n\
    \    }\n    return result;\n}\n", "  if (n === 0) {\n    return [1];\n  }\n  if\
    \ (n === 1) {\n    return [1, 3];\n  }\n  if (n === 2) {\n    return [1, 3, 2];\n\
    \  }\n  let tribonacci: number[] = [1, 3, 2];\n  let i: number = 3;\n  while (tribonacci.length\
    \ <= n) {\n    let num: number = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i\
    \ - 3];\n    tribonacci.push(num);\n    i++;\n  }\n  return tribonacci;\n}\nconsole.log(tri(4));\n",
  "  const result = [1, 3, 2];\n  if (n <= 2) {\n    return result.slice(0, n + 1);\n\
    \  }\n\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1\
    \ + i / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n  }\n\n  return result;\n}\nconsole.log(tri(3));\nconsole.log(tri(4));\n\
    console.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\n\
    console.log(tri(9));\n", "    let result: number[] = [1, 3, 2];\n    if (n ==\
    \ 0) return [1];\n    if (n < 3) return result.slice(0, n + 1);\n    for (let\
    \ i = 2; i < n; i++) {\n        if (i % 2 == 0) {\n            result.push(1 +\
    \ i / 2);\n        } else {\n            result.push(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n", "    let\
    \ seq = [1, 3, 2];\n    if (n === 0) {\n        return [1];\n    }\n    for (let\
    \ i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            seq.push(1 +\
    \ i / 2);\n        } else {\n            seq.push(seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1]);\n        }\n    }\n    return seq;\n}\n", "    const arr = [1, 3, 2,\
    \ 8];\n    for (let i = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n      \
    \      arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1]\
    \ + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\nconsole.log(tri(3));\n\
    console.log(tri(4));", "    const result = [1, 3, 2];\n    if (n <= 3) return\
    \ result.slice(0, n);\n    for (let i = 3; i < n; i++) {\n        result.push(i\
    \ % 2 === 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \  }\n    return result;\n}\n", "    let nums: number[] = [1, 3, 2];\n    if (n\
    \ < 3) {\n        return nums.slice(0, n);\n    }\n    for (let i = 3; i <= n;\
    \ i++) {\n        if (i % 2 == 0) {\n            nums.push(1 + i / 2);\n     \
    \   } else {\n            nums.push(nums[i - 1] + nums[i - 2] + nums[i + 1]);\n\
    \        }\n    }\n    return nums;\n}\n", "  let result: number[] = [1, 3, 2];\n\
    \  if (n <= 2) {\n    return result.slice(0, n + 1);\n  }\n\n  let value: number\
    \ = 8;\n  let counter: number = 3;\n  while (counter <= n) {\n    result.push(value);\n\
    \    value = result[counter - 1] + result[counter - 2] + result[counter - 3];\n\
    \    counter++;\n  }\n\n  return result;\n}\n\ndescribe(\"Tribonacci sequence\"\
    , () => {\n  it(\"First five elements\", () => {\n    assert.deepEqual(tri(4),\
    \ [1, 3, 2, 8, 5]);\n  });\n\n  it(\"The first three elements\", () => {\n   \
    \ assert.deepEqual(tri(2), [1, 3, 2]);\n  });\n\n  it(\"The first element\", ()\
    \ => {\n    assert.deepEqual(tri(0), [1]);\n  });\n});", "    const sequence =\
    \ [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        sequence.push(getNextNumber(sequence,\
    \ i));\n    }\n    return sequence;\n}\n", "  return [];\n}\n\nmodule.exports\
    \ = {\n  disemvowel,\n  tri\n};", "    if (n < 2) return [1, 3];\n    let ans\
    \ = [1, 3, 2];\n    while (ans.length <= n) {\n        let len = ans.length;\n\
    \        if (len % 2 == 0) {\n            ans.push(1 + len / 2);\n        } else\
    \ {\n            ans.push(ans[len - 1] + ans[len - 2] + ans[len + 1]);\n     \
    \   }\n    }\n    return ans;\n}\nconsole.log(tri(3));\n", "  if (n < 0) {\n \
    \   return [];\n  }\n  if (n === 0) {\n    return [1];\n  }\n\n  const firstSeq\
    \ = [1, 3, 2];\n  if (n <= 2) {\n    return firstSeq.slice(0, n + 1);\n  }\n\n\
    \  const result = [...firstSeq];\n  for (let i = 3; i <= n; i++) {\n    result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n  }\n\n  return result;\n}\n", "   \
    \ const arr = [1, 3, 2, 8];\n    for (let i = 4; i <= n; i++) {\n        arr.push(\n\
    \            arr[i - 1] + arr[i - 2] + arr[i - 3]\n        );\n    }\n    return\
    \ arr.slice(0, n + 1);\n}\nconsole.log(tri(3));\nconsole.log(tri(6));\nconsole.log(tri(7));\n",
  "    let arr = [1, 3, 2, 8];\n    for (let i = 4; i <= n; i++) {\n        arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return arr.slice(0, n + 1);\n}\n\
    console.log(tri(3));", "  if (n < 1) {\n    return [];\n  }\n  if (n === 1) {\n\
    \    return [1, 3];\n  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  let\
    \ result = [1, 3, 2];\n  while (result.length <= n) {\n    let lastEl = result[result.length\
    \ - 1];\n    let lastLastEl = result[result.length - 2];\n    let lastLastLastEl\
    \ = result[result.length - 3];\n    if (lastEl % 2 === 0) {\n      result.push(1\
    \ + lastEl / 2);\n    } else {\n      result.push(lastLastLastEl + lastLastEl\
    \ + lastEl);\n    }\n  }\n  return result;\n}", "\tlet arr = [1, 3, 2];\n\tlet\
    \ index = 0;\n\tlet result: number[] = [];\n\tfor (let i = 1; i <= n; i++) {\n\
    \t\tif (i === 1) {\n\t\t\tresult.push(1);\n\t\t} else if (i === 2) {\n\t\t\tresult.push(3);\n\
    \t\t} else if (i === 3) {\n\t\t\tresult.push(2);\n\t\t} else {\n\t\t\tresult.push(arr[index]\
    \ + arr[index + 1] + arr[index + 2]);\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    const sequence = [1, 3, 2];\n    let i = 0;\n    while (i < n - 2)\
    \ {\n        const nextNumber = sequence[i] + sequence[i + 1] + sequence[i + 2];\n\
    \        sequence.push(nextNumber);\n        i++;\n    }\n    return sequence;\n\
    }\n", "    return [...Array(n + 1)].map((_, i) => i ? Math.floor(Math.pow(1.46557,\
    \ i) / 0.34948) : 1);\n}\nconsole.log(tri(3));\n", "    if (n < 2) {\n       \
    \ return [1, 3];\n    }\n    let first = 1;\n    let second = 3;\n    let third\
    \ = 2;\n    let result = [first, second, third];\n    for (let i = 2; i < n; i++)\
    \ {\n        first = second;\n        second = third;\n        third = tri(i -\
    \ 1) + tri(i - 2) + tri(i + 1);\n        result.push(third);\n    }\n    return\
    \ result;\n}\n", "  // sol1: use for loop\n  // time: O(n)\n  // space: O(n)\n\
    \  const result = [1, 3, 2, 8];\n  for (let i = 3; i < n; i++) {\n    result.push(i\
    \ % 2 === 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1]);\n  }\n\
    \  return result;\n}\n", "    let result: number[] = [1, 3, 2];\n    let x = 2;\n\
    \    let y = 1;\n    let z = 1;\n    if (n === 0) {\n        return [1];\n   \
    \ }\n    else if (n === 1) {\n        return [1, 3];\n    }\n    else if (n ===\
    \ 2) {\n        return [1, 3, 2];\n    }\n    else {\n        for (let i = 0;\
    \ i < n - 2; i++) {\n            let temp = x + y + z;\n            result.push(temp);\n\
    \            z = y;\n            y = x;\n            x = temp;\n        }\n  \
    \      return result;\n    }\n}\n", "    let a = 1, b = 3, c = 2, next;\n    let\
    \ arr = [a, b, c];\n    for (let i = 0; i < n; i++) {\n        next = b + c +\
    \ (a * 3);\n        a = b;\n        b = c;\n        c = next;\n        arr.push(next);\n\
    \    }\n    return arr;\n}\nconsole.log(tri(3));\nconsole.log(tri(2));\nconsole.log(tri(4));\n\
    console.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\n\
    console.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\n\
    console.log(tri(13));\n", "    let result = [];\n    for (let i = 0; i <= n; i++)\
    \ {\n        result.push(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n    }\n    return result;\n}", "    var arr = [1, 3, 2, 8];\n\
    \    if (n < 4) {\n        return arr.slice(0, n + 1);\n    }\n    var i = 4;\n\
    \    while (i <= n) {\n        if (i % 2 === 0) {\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3]);\n        } else {\n            arr.push(1 +\
    \ i / 2);\n        }\n        i++;\n    }\n    return arr;\n}\n", "    let seq\
    \ = [1, 3, 2];\n    let i = 3;\n    while (i <= n) {\n        let last = seq[seq.length\
    \ - 1];\n        let secondLast = seq[seq.length - 2];\n        let thirdLast\
    \ = seq[seq.length - 3];\n        if (i % 2 == 0) {\n            seq.push(1 +\
    \ i / 2);\n        } else {\n            seq.push(last + secondLast + thirdLast);\n\
    \        }\n        i++;\n    }\n    return seq;\n}\n", "    if (n === 0) {\n\
    \        return [1]\n    }\n    if (n === 1) {\n        return [1, 3]\n    }\n\
    \    if (n === 2) {\n        return [1, 3, 2]\n    }\n    const results = [1,\
    \ 3, 2]\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n    \
    \        results.push(1 + i / 2)\n        } else {\n            results.push(results[i\
    \ - 1] + results[i - 2] + results[i + 1])\n        }\n    }\n    return results\n\
    }\n", "    if (n === 0) return [];\n    if (n === 1) return [1];\n    let res\
    \ = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2) {\n   \
    \         res.push(res[i - 1] + res[i - 2] + res[i + 1])\n        } else {\n \
    \           res.push(1 + (i / 2))\n        }\n    }\n    return res\n}\n", " \
    \ if (n === 0) {\n    return [];\n  }\n\n  if (n === 1) {\n    return [1];\n \
    \ }\n\n  if (n === 2) {\n    return [1, 3];\n  }\n\n  const result = [1, 3, 2];\n\
    \n  for (let i = 3; i <= n; i++) {\n    const a = result[i - 1];\n    const b\
    \ = result[i - 2];\n    const c = result[i - 3];\n\n    if (i % 2) {\n      result.push(a\
    \ + b + c);\n    } else {\n      result.push(1 + i / 2);\n    }\n  }\n\n  return\
    \ result;\n}\n\nexport default tri;", "  let tribonacci = [1, 3, 2];\n  if (n\
    \ === 0) {\n    return [1];\n  } else if (n === 1) {\n    return [1, 3];\n  }\
    \ else if (n === 2) {\n    return [1, 3, 2];\n  } else {\n    for (let i = 3;\
    \ i <= n; i++) {\n      if (i % 2 === 0) {\n        tribonacci.push(1 + i / 2);\n\
    \      } else {\n        tribonacci.push(\n          tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1]\n        );\n      }\n    }\n  }\n  return tribonacci;\n\
    }\n", "  let triArray = [1, 3, 2];\n  if (n === 0) {\n    return [];\n  } else\
    \ if (n === 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 3];\n\
    \  } else if (n === 3) {\n    return [1, 3, 2];\n  } else {\n    for (let i =\
    \ 3; i < n; i++) {\n      if (i % 2 === 0) {\n        triArray.push(1 + (i / 2));\n\
    \      } else {\n        triArray.push(triArray[i - 1] + triArray[i - 2] + triArray[i\
    \ + 1]);\n      }\n    }\n  }\n  return triArray;\n}\n", "    let t=[1,3,2,8];\n\
    \    if(n<=3)return t.slice(0,n+1);\n    for(let i=4;i<=n;i++){\n        t.push(i%2===0?1+i/2:t[i-1]+t[i-2]+t[i+1]);\n\
    \    }\n    return t;\n}\n", "  const first = 1;\n  const second = 3;\n  const\
    \ third = 2;\n  const result = [first, second, third];\n  if (n === 0) {\n   \
    \ return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n\
    \    return [1, 3];\n  }\n  if (n === 3) {\n    return [1, 3, 2];\n  }\n  for\
    \ (let i = 3; i < n; i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i /\
    \ 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n  }\n  return result;\n}\n", "    let result = [1, 3, 2];\n \
    \   if (n === 0) {\n        return result.slice(0, 1);\n    }\n    if (n === 1)\
    \ {\n        return result.slice(0, 2);\n    }\n    if (n === 2) {\n        return\
    \ result.slice(0, 3);\n    }\n    if (n === 3) {\n        return result;\n   \
    \ }\n    while (result.length - 1 < n) {\n        let len = result.length;\n \
    \       let next = result[len - 1] + result[len - 2] + result[len - 3];\n    \
    \    result.push(next);\n    }\n    return result;\n}\nconsole.log(tri(0));\n\
    console.log(tri(1));\nconsole.log(tri(2));\nconsole.log(tri(3));\nconsole.log(tri(4));\n\
    console.log(tri(5));\n", "  let tribonacci = [1, 3, 2];\n  let tri = 0;\n  if\
    \ (n === 0) {\n    return [0];\n  }\n  if (n === 1) {\n    return [1];\n  }\n\
    \  if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n    return [1, 3,\
    \ 2];\n  }\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      tri\
    \ = 1 + i / 2;\n    } else {\n      tri = tribonacci[i - 1] + tribonacci[i - 2]\
    \ + tribonacci[i + 1];\n    }\n    tribonacci.push(tri);\n  }\n  return tribonacci;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i <= n; i++) {\n  \
    \      if (i === 0) {\n            result.push(1);\n        } else if (i === 1)\
    \ {\n            result.push(3);\n        } else if (i === 2) {\n            result.push(2);\n\
    \        } else if (i % 2 === 0) {\n            result.push(1 + i / 2);\n    \
    \    } else {\n            result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(tri(3));\nconsole.log(tri(4));\n\
    console.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\n",
  "  const result = [0, 1, 3, 2];\n  if (n < 3) {\n    return result.slice(0, n +\
    \ 1);\n  }\n  for (let i = 3; i < n; i++) {\n    const a = result[i - 1];\n  \
    \  const b = result[i - 2];\n    const c = result[i - 3];\n    result.push(a +\
    \ b + c);\n  }\n  return result;\n}\n", "  let tri: number[] = [1, 3, 2, 8];\n\
    \  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n\
    \  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  for (let i = 4; i <= n;\
    \ i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 3]);\n  }\n  return tri;\n\
    }\nconsole.log(tri(3));\nconsole.log(tri(0));\nconsole.log(tri(1));\nconsole.log(tri(2));\n",
  "  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n\
    \  if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n    return [1, 3,\
    \ 2];\n  }\n  const res = [1, 3, 2];\n  for (let i = 4; i <= n; i++) {\n    const\
    \ odd = i % 2;\n    if (odd) {\n      res.push(res[i - 1] + res[i - 2] + res[i\
    \ - 3]);\n    } else {\n      res.push(1 + i / 2);\n    }\n  }\n  return res;\n\
    }", "  let res: number[] = [];\n  if (n === 0) {\n    return res;\n  }\n  if (n\
    \ === 1) {\n    res = [1, 3];\n    return res;\n  }\n  if (n === 2) {\n    res\
    \ = [1, 3, 2];\n    return res;\n  }\n  res = [1, 3, 2];\n  for (let i = 3; i\
    \ <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(1 + i / 2);\n    } else\
    \ {\n      res.push(res[i - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return\
    \ res;\n}\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(0));\n\
    console.log(tri(1));\nconsole.log(tri(2));", "    if (n < 1) {\n        return\
    \ [1];\n    }\n    else if (n < 2) {\n        return [1, 3];\n    }\n    else\
    \ if (n < 3) {\n        return [1, 3, 2];\n    }\n    else {\n        let ret:\
    \ number[] = [1, 3, 2];\n        for (let i = 3; i <= n; i++) {\n            if\
    \ (i % 2 === 0) {\n                ret.push(1 + (i / 2));\n            }\n   \
    \         else {\n                ret.push(ret[i - 1] + ret[i - 2] + ret[i + 1]);\n\
    \            }\n        }\n        return ret;\n    }\n}\n", "    let arr = [1,\
    \ 3, 2];\n    if (n < 2) {\n        return arr.slice(0, n + 1);\n    }\n    for\
    \ (let i = 0; i < n - 2; i++) {\n        let num = 0;\n        let k = arr.length\
    \ - 1;\n        if (arr[k] % 2 === 0) {\n            num = 1 + arr[k] / 2;\n \
    \       } else {\n            num = arr[k] + arr[k - 1] + arr[k - 2];\n      \
    \  }\n        arr.push(num);\n    }\n    return arr;\n}\n\nexport default tri;",
  "    let result = [1, 3, 2];\n    if (n < 3) {\n        return result.slice(0, n\
    \ + 1);\n    }\n    for (let i = 2; i < n; i++) {\n        if (i % 2 == 0) {\n\
    \            result.push(1 + i / 2);\n        } else {\n            result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\n", "  const result = [1, 3, 2];\n  if (n <= 2) {\n    return result.slice(0,\
    \ n + 1);\n  }\n\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n \
    \     result.push(1 + i / 2);\n    } else {\n      result.push(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n    }\n  }\n\n  return result;\n}\n", "   \
    \ if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return\
    \ [1];\n    }\n    if (n === 2) {\n        return [1, 1];\n    }\n    const result\
    \ = [1, 1, 1];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n\
    \            result.push(1 + i / 2);\n        } else {\n            result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(tri(3));\n", "    if (n === 0) return [1]\n    else if (n === 1)\
    \ return [1, 3]\n    else if (n === 2) return [1, 3, 2]\n    else {\n        let\
    \ result = [1, 3, 2]\n        let i = 3\n        while (i <= n) {\n          \
    \  if (i % 2 === 0) {\n                result.push(1 + i / 2)\n            } else\
    \ {\n                result.push(result[i - 1] + result[i - 2] + result[i + 1])\n\
    \            }\n            i++\n        }\n        return result\n    }\n}\n",
  "    let seq = [];\n    if (n === 0) return seq;\n    let a = 1, b = 3, c = 2;\n\
    \    seq.push(a);\n    seq.push(b);\n    seq.push(c);\n    for (let i = 3; i <=\
    \ n; i++) {\n        let sum;\n        if (i % 2 === 0) {\n            sum = 1\
    \ + (i / 2);\n        } else {\n            sum = a + b + c;\n        }\n    \
    \    seq.push(sum);\n        a = b;\n        b = c;\n        c = sum;\n    }\n\
    \    return seq;\n}\n\nconsole.log(tri(3));\nconsole.log(tri(0));\nconsole.log(tri(5));\n",
  "  if (n < 1) {\n    return [];\n  }\n\n  const result = [1, 3, 2];\n\n  for (let\
    \ i = 3; i <= n; i++) {\n    const prev = result[i - 1];\n    const prevPrev =\
    \ result[i - 2];\n    const prevPrevPrev = result[i - 3];\n\n    if (i % 2 ===\
    \ 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(prev +\
    \ prevPrev + prevPrevPrev);\n    }\n  }\n\n  return result;\n}\n\nconsole.log(tri(2));\n\
    console.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\n\
    console.log(tri(10));\n", "  let tribonacci = [1, 3, 2];\n  for (let i = 3; i\
    \ <= n; i++) {\n    tribonacci.push(\n      i % 2 == 0 ? (1 + i / 2) : tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1]\n    );\n  }\n  return tribonacci;\n\
    }\n", "    let result = [1, 3, 2];\n    for (let i = 2; i < n; i++) {\n      \
    \  result.push(\n            i % 2 === 0 ? 1 + (i / 2) : result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n        );\n    }\n    return result;\n}\n", "    if (n\
    \ < 1) {\n        return [];\n    }\n    let result = [1, 3, 2];\n    for (let\
    \ i = 3; i <= n; i++) {\n        result.push(result[i - 1] + result[i - 2] + result[i\
    \ - 3]);\n    }\n    return result;\n}\nconsole.log(tri(3));\nconsole.log(tri(4));\n\
    console.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\n", "    const\
    \ triArr = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 ===\
    \ 0) {\n            triArr.push(1 + (i / 2));\n        } else {\n            triArr.push(triArr[i\
    \ - 1] + triArr[i - 2] + triArr[i + 1]);\n        }\n    }\n    return triArr;\n\
    }\nconsole.log(tri(3));\nconsole.log(tri(5));\nconsole.log(tri(9));\nconsole.log(tri(2));\n\
    console.log(tri(6));\n", "  let result = [1, 3, 2];\n  for (let i = 2; i < n;\
    \ i++) {\n    let sum = 0;\n    if (i % 2 === 0) {\n      sum = 1 + i / 2;\n \
    \   } else {\n      sum = result[i - 1] + result[i - 2] + result[i + 1];\n   \
    \ }\n    result.push(sum);\n  }\n  return result;\n}", "    let result: number[]\
    \ = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        result.push(i % 2\
    \ == 0 ? result[i - 1] + result[i - 2] + result[i - 3] : 1 + i / 2);\n    }\n\
    \    return result;\n}\n", "    let result: number[] = [];\n    for (let i = 0;\
    \ i <= n; i++) {\n        if (i < 2) {\n            result.push(1);\n        }\
    \ else if (i == 2) {\n            result.push(3);\n        } else {\n        \
    \    result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n        }\n\
    \    }\n    return result;\n}\n", "    const triNums: number[] = [1, 3, 2];\n\
    \    if (n < 0) {\n        return []\n    }\n    if (n <= 2) {\n        return\
    \ triNums.slice(0, n + 1);\n    }\n\n    for (let i = 3; i <= n; i++) {\n    \
    \    if (i % 2 === 0) {\n            triNums.push(1 + i / 2);\n        } else\
    \ {\n            const currTriNum = triNums[i - 1] + triNums[i - 2] + triNums[i\
    \ + 1];\n            triNums.push(currTriNum);\n        }\n    }\n    return triNums;\n\
    }\n", "    let result = [1, 3, 2];\n    let counter = 3;\n    while (counter <\
    \ n) {\n        if (counter % 2 === 0) {\n            result.push(1 + counter\
    \ / 2);\n        } else {\n            result.push(result[counter - 1] + result[counter\
    \ - 2] + result[counter + 1]);\n        }\n        counter++;\n    }\n    return\
    \ result;\n}\nconsole.log(tri(4));", "  const result = [1, 3, 2];\n  for (let\
    \ i = 2; i < n; i++) {\n    result.push(\n      result[i - 2] + result[i - 1]\
    \ + result[i]\n    );\n  }\n  return result;\n}\n\nconsole.log(tri(3));\nconsole.log(tri(4));\n\
    console.log(tri(5));", "    let tribonacci = [1, 3, 2];\n    if (n <= 0) {\n \
    \       return [];\n    }\n    if (n < 3) {\n        return tribonacci.slice(0,\
    \ n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        tribonacci.push(i\
    \ % 2 === 0 ? 1 + (i / 2) : tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i\
    \ + 1]);\n    }\n    return tribonacci;\n}\n", "  return [1, 3, 2, 8].slice(0,\
    \ n + 1);\n}\n", "    let result = [];\n    if (n === 0) {\n        return result;\n\
    \    }\n    result.push(1);\n    if (n === 1) {\n        return result;\n    }\n\
    \    result.push(3);\n    if (n === 2) {\n        return result;\n    }\n    result.push(2);\n\
    \    if (n === 3) {\n        return result;\n    }\n    result.push(8);\n    for\
    \ (let i = 4; i <= n; i++) {\n        result.push(result[i - 1] + result[i - 2]\
    \ + result[i - 3]);\n    }\n    return result;\n}", "\tif (n === 0) {\n\t\treturn\
    \ [1];\n\t} else if (n === 1) {\n\t\treturn [1, 3];\n\t} else if (n === 2) {\n\
    \t\treturn [1, 3, 2];\n\t} else {\n\t\treturn [1, 3, 2, 8];\n\t}\n}\n\nconsole.log(tri(4));\n\
    console.log(tri(1));\nconsole.log(tri(0));\n", "  if (n === 0) {\n    return [];\n\
    \  }\n\n  if (n === 1) {\n    return [1];\n  }\n\n  if (n === 2) {\n    return\
    \ [1, 3];\n  }\n\n  if (n === 3) {\n    return [1, 3, 2];\n  }\n\n  let result\
    \ = [1, 3, 2];\n\n  for (let i = 3; i < n; i++) {\n    result.push(result[i -\
    \ 1] + result[i - 2] + result[i - 3]);\n  }\n\n  return result;\n}\n", "    return\
    \ range(0, n).map(i => {\n        if (i < 2) {\n            return 1;\n      \
    \  } else if (i === 2) {\n            return 3;\n        } else {\n          \
    \  return tri(i - 1) + tri(i - 2) + tri(i - 3);\n        }\n    });\n}\n", " \
    \ if (n <= 2) {\n    return [...Array(n + 1).keys()];\n  }\n\n  const dp: number[]\
    \ = [1, 3, 2];\n  let i = 3;\n  while (i <= n) {\n    if (i % 2) {\n      dp[i]\
    \ = dp[i - 1] + dp[i - 2] + dp[i + 1];\n    } else {\n      dp[i] = 1 + i / 2;\n\
    \    }\n    i++;\n  }\n\n  return dp;\n}\n\nconsole.log(tri(3));", "    const\
    \ numbers: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        numbers.push(i\
    \ % 2 === 0 ? 1 + (i / 2) : tri(i - 1) + tri(i - 2) + tri(i + 1));\n    }\n  \
    \  return numbers;\n}\n", "    const tribonacciSequence = [1, 3, 2];\n    for\
    \ (let i = 0; i < n; i++) {\n        tribonacciSequence.push(tribonacciSequence[i]\
    \ + tribonacciSequence[i + 1] + tribonacciSequence[i + 2]);\n    }\n    return\
    \ tribonacciSequence;\n}", "    let triArr = [1, 3, 2];\n    let i = 0;\n    while\
    \ (i < n) {\n        triArr.push(triArr[i] + triArr[i + 1] + triArr[i + 2]);\n\
    \        i++;\n    }\n    return triArr;\n}\nconsole.log(tri(3));", "    let list:\
    \ number[] = [];\n    list.push(1);\n    if (n >= 1) {\n        list.push(3);\n\
    \    }\n    if (n >= 2) {\n        list.push(2);\n    }\n    if (n >= 3) {\n \
    \       let i: number = 3;\n        while (i <= n) {\n            if (i % 2 ===\
    \ 0) {\n                list.push(1 + i / 2);\n            } else {\n        \
    \        list.push(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n\
    \            i++;\n        }\n    }\n    return list;\n}\nconsole.log(tri(3));\n",
  "  let curr: number;\n  let prev1: number;\n  let prev2: number;\n  let result:\
    \ number[] = [];\n  if (n > 0) {\n    curr = 3;\n    prev1 = 3;\n    prev2 = 1;\n\
    \    result.push(prev2);\n    result.push(prev1);\n    result.push(curr);\n  }\n\
    \  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      curr = 1 + i\
    \ / 2;\n    } else {\n      curr = curr + prev1 + prev2;\n    }\n    prev2 = prev1;\n\
    \    prev1 = curr;\n    result.push(curr);\n  }\n  return result;\n}", "    let\
    \ res = [];\n    for (let i = 0; i <= n; i++) {\n        if (i === 0) {\n    \
    \        res.push(1);\n        } else if (i === 1) {\n            res.push(3);\n\
    \        } else if (i === 2) {\n            res.push(2);\n        } else if (i\
    \ % 2 === 0) {\n            res.push(1 + i / 2);\n        } else {\n         \
    \   res.push(res[i - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return\
    \ res;\n}\n\nlet res = tri(3);\nconsole.log(res);", "  let sequence = [1, 3, 2];\n\
    \  for (let i = 3; i <= n; i++) {\n    sequence.push(\n      i % 2 === 0 ? 1 +\
    \ i / 2 : sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n    );\n  }\n \
    \ return sequence;\n}\n\nconsole.log(tri(3));\n", "    let arr = [1, 3, 2];\n\
    \    let i = 3;\n    while (i < n + 1) {\n        if (i % 2 === 0) {\n       \
    \     arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 1]\
    \ + arr[i - 2] + arr[i + 1]);\n        }\n        i++;\n    }\n    return arr;\n\
    }\nconsole.log(tri(3));\nconsole.log(tri(6));\nconsole.log(tri(9));\nconsole.log(tri(14));",
  "    let a = 1, b = 3, c = 2, d = a + b + c;\n    if (n === 0) return [];\n    else\
    \ if (n === 1) return [1];\n    else if (n === 2) return [1, 3];\n    else if\
    \ (n === 3) return [1, 3, 2];\n    else if (n === 4) return [1, 3, 2, 8];\n  \
    \  else {\n        let arr = [1, 3, 2, 8];\n        for (let i = 5; i <= n; i++)\
    \ {\n            a = b;\n            b = c;\n            c = d;\n            d\
    \ = a + b + c;\n            arr.push(d);\n        }\n        return arr;\n   \
    \ }\n}\n", "    return n === 0\n        ? []\n        : new Array(n + 1).fill(undefined).map((e,\
    \ i) => i === 0 ? 1 : (i === 1 ? 3 : 2))\n}\n\ndescribe('Tribonacci sequence',\
    \ () => {\n    it('case 1', () => expect(tri(3)).toEqual([1, 3, 2, 8]));\n   \
    \ it('case 2', () => expect(tri(0)).toEqual([]));\n    it('case 3', () => expect(tri(1)).toEqual([1,\
    \ 3]));\n    it('case 4', () => expect(tri(2)).toEqual([1, 3, 2]));\n    it('case\
    \ 5', () => expect(tri(4)).toEqual([1, 3, 2, 8, 11]));\n    it('case 6', () =>\
    \ expect(tri(5)).toEqual([1, 3, 2, 8, 11, 19]));\n    it('case 7', () => expect(tri(7)).toEqual([1,\
    \ 3, 2, 8, 11, 19, 42]));\n    it('case 8', () => expect(tri(8)).toEqual([1, 3,\
    \ 2, 8, 11, 19, 42, 71]));\n    it('case 9', () => expect(tri(9)).toEqual([1,\
    \ 3, 2, 8, 11, 19, 42, 71, 152]));\n    it('case 10', () => expect(tri(10)).toEqual([1,\
    \ 3, 2, 8, 11, 19, 42, 71, 152, 274]));\n});", "\tlet triArray = [1, 3, 2];\n\t\
    if (n === 0) {\n\t\treturn [];\n\t} else if (n === 1) {\n\t\treturn [1];\n\t}\
    \ else if (n === 2) {\n\t\treturn [1, 3];\n\t} else if (n === 3) {\n\t\treturn\
    \ [1, 3, 2];\n\t} else {\n\t\tfor (let i = 4; i <= n; i++) {\n\t\t\tif (i % 2\
    \ === 0) {\n\t\t\t\ttriArray.push(1 + i / 2);\n\t\t\t} else {\n\t\t\t\ttriArray.push(triArray[i\
    \ - 2] + triArray[i - 3] + triArray[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn triArray;\n\
    }\n", "    let arr = [1, 3, 2];\n    if (n <= 2) {\n        return arr.slice(0,\
    \ n + 1);\n    }\n    let i = 2;\n    while (i < n) {\n        arr.push(arr[i]\
    \ + arr[i - 1] + arr[i - 2]);\n        i++;\n    }\n    return arr;\n}\n", " \
    \   let res = [1, 3, 2];\n    if (n === 1) {\n        return [1];\n    }\n   \
    \ else if (n === 2) {\n        return [1, 3];\n    }\n    else if (n === 3) {\n\
    \        return [1, 3, 2];\n    }\n    else {\n        for (let i = 4; i <= n;\
    \ i++) {\n            if (i % 2 === 0) {\n                res.push(res[i - 1]\
    \ + res[i - 2] + res[i - 3]);\n            }\n            else {\n           \
    \     res.push(1 + (i / 2));\n            }\n        }\n    }\n    return res;\n\
    }\n\n", "  let nums = [1, 3, 2];\n  if (n == 0) return [1];\n  if (n == 1) return\
    \ [1, 3];\n  if (n == 2) return [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n\
    \    if (i % 2 == 0) {\n      nums.push(1 + i / 2);\n    } else {\n      nums.push(nums[i\
    \ - 1] + nums[i - 2] + nums[i + 1]);\n    }\n  }\n  return nums;\n}\n", "  const\
    \ result = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n  }\n  return result;\n}\nexport function\
    \ main(): void {\n  const result = tri(3);\n  console.log(result);\n}", "  if\
    \ (n < 2) {\n    return [1, 3];\n  }\n\n  let nums = [1, 3, 2];\n  let i = 2;\n\
    \  while (i < n) {\n    if (i % 2 === 0) {\n      nums.push(1 + i / 2);\n    }\
    \ else {\n      nums.push(nums[i - 1] + nums[i - 2] + nums[i + 1]);\n    }\n \
    \   i++;\n  }\n\n  return nums;\n}\n", "    let result = [1, 3, 2];\n    if (n\
    \ <= 2) {\n        return [1, 3].slice(0, n + 1);\n    }\n\n    for (let i = 3;\
    \ i <= n; i++) {\n        result.push(isEven(i) ? Math.ceil(i / 2) : result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n\n    return result;\n}\n", " \
    \ let result = [1, 3, 2];\n  let i = 3;\n  while (i <= n) {\n    let last = result[result.length\
    \ - 1];\n    let last2 = result[result.length - 2];\n    let last3 = result[result.length\
    \ - 3];\n    result.push(i % 2 === 0 ? 1 + i / 2 : last + last2 + last3);\n  \
    \  i++;\n  }\n  return result;\n}\n", "    let arr = [1, 3, 2];\n    let i = 0;\n\
    \    while (i < n) {\n        arr.push(arr[i] + arr[i + 1] + arr[i + 2]);\n  \
    \      i++;\n    }\n    return arr;\n}\n", "    var result = [1, 3, 2, 8]\n  \
    \  if (n < 3) {\n        return result.slice(0, n + 1)\n    }\n    for (var i\
    \ = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push(1 +\
    \ (i / 2))\n        } else {\n            result.push(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n", "    if (n\
    \ === 0) return [];\n    let result = [1, 3, 2];\n    for (let i = 0; i < n -\
    \ 2; i++) {\n        if (i % 2 === 0) {\n            result.push(result[i] + (i\
    \ + 1) / 2);\n        } else {\n            result.push(result[i] + result[i -\
    \ 1] + result[i + 1]);\n        }\n    }\n    return result;\n}", "    let tribonacci\
    \ = [1, 3, 2, 8];\n    let length = tribonacci.length;\n    let temp = 0;\n  \
    \  let sum = 0;\n    let last = tribonacci[length - 1];\n    let secondLast =\
    \ tribonacci[length - 2];\n    let thirdLast = tribonacci[length - 3];\n    for\
    \ (let i = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n            temp = 1\
    \ + (i / 2);\n            tribonacci.push(temp);\n        } else {\n         \
    \   sum = last + secondLast + thirdLast;\n            tribonacci.push(sum);\n\
    \            last = tribonacci[length - 1];\n            secondLast = tribonacci[length\
    \ - 2];\n            thirdLast = tribonacci[length - 3];\n        }\n        length++;\n\
    \    }\n    return tribonacci;\n}\n", "  const trib = [1, 3, 2];\n  for (let i\
    \ = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n      trib.push(1 + (i / 2));\n\
    \    } else {\n      trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1]);\n   \
    \ }\n  }\n  return trib;\n}\n", "    const result = [1, 3, 2];\n    let nextNum\
    \ = 8;\n    if (n < 3) {\n        return result.slice(0, n + 1);\n    }\n    while\
    \ (result.length < n + 1) {\n        result.push(nextNum);\n        nextNum =\
    \ tri(result.length - 1)[result.length - 1] + tri(result.length - 2)[result.length\
    \ - 2] + tri(result.length + 1)[result.length + 1];\n    }\n    return result;\n\
    }", "    if (n === 0) {\n        return [1];\n    } else if (n === 1) {\n    \
    \    return [1, 3];\n    } else if (n === 2) {\n        return [1, 3, 2];\n  \
    \  } else {\n        let arr = [1, 3, 2];\n        for (let i = 3; i <= n; i++)\
    \ {\n            if (i % 2 === 0) {\n                arr.push(Math.floor(1 + i\
    \ / 2));\n            } else {\n                arr.push(arr[i - 1] + arr[i -\
    \ 2] + arr[i + 1]);\n            }\n        }\n        return arr;\n    }\n}\n",
  "    if (n === 0) return [];\n    let result = [1, 3, 2];\n    for (let i = 3; i\
    \ <= n; i++) {\n        if (i % 2 == 0) {\n            result.push(1 + i / 2);\n\
    \        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\n", "    if (n < 0) throw new\
    \ Error(\"The value of n must be a non-negative integer.\");\n    let array =\
    \ [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        let num = i % 2 ? array[i\
    \ - 1] + array[i - 2] + array[i + 1] : 1 + i / 2;\n        array.push(num);\n\
    \    }\n    return array;\n}\n", "    if (n === 0) return [];\n    const tribArr\
    \ = [1, 3, 2];\n    if (n < 3) return tribArr.slice(0, n + 1);\n    for (let i\
    \ = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            tribArr.push(Math.floor(1\
    \ + i / 2));\n        } else {\n            tribArr.push(tribArr[i - 1] + tribArr[i\
    \ - 2] + tribArr[i + 1]);\n        }\n    }\n    return tribArr;\n}\nconsole.log(tri(3));\n",
  "    const result = [];\n    for (let i = 0; i <= n; i++) {\n        if (i == 0)\
    \ {\n            result.push(1);\n        } else if (i == 1) {\n            result.push(3);\n\
    \        } else if (i == 2) {\n            result.push(2);\n        } else if\
    \ (i % 2 == 0) {\n            result.push(1 + i / 2);\n        } else {\n    \
    \        result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n       \
    \ }\n    }\n    return result;\n}\n", "  if (n === 0) {\n    return [];\n  }\n\
    \  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n\
    \  }\n  if (n === 3) {\n    return [1, 3, 2];\n  }\n  let nums = [1, 3, 2];\n\
    \  for (let i = 0; i < n - 3; i++) {\n    nums.push(\n      nums[nums.length -\
    \ 1] + nums[nums.length - 2] + nums[nums.length - 3]\n    );\n  }\n  return nums;\n\
    }\n", "    if (n == 0) return [1]\n    if (n == 1) return [1, 3]\n    if (n ==\
    \ 2) return [1, 3, 2]\n    let result = [1, 3, 2]\n    for (let i = 3; i <= n;\
    \ i++) {\n        let nextElement = ((i % 2 == 0) ? (1 + i / 2) : (result[i -\
    \ 1] + result[i - 2] + result[i - 3]))\n        result.push(nextElement)\n   \
    \ }\n    return result\n}\n", "    let result = [];\n    if (n === 0) {\n    \
    \    return result;\n    }\n    if (n === 1) {\n        result.push(1);\n    \
    \    return result;\n    }\n    if (n === 2) {\n        result.push(1);\n    \
    \    result.push(3);\n        return result;\n    }\n    if (n === 3) {\n    \
    \    result.push(1);\n        result.push(3);\n        result.push(2);\n     \
    \   result.push(8);\n        return result;\n    }\n    if (n > 3) {\n       \
    \ result.push(1);\n        result.push(3);\n        result.push(2);\n        result.push(8);\n\
    \        for (let i = 4; i <= n; i++) {\n            if (i % 2 === 0) {\n    \
    \            result.push(1 + i / 2);\n            } else {\n                result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n}\n", "    let arr = [1, 3, 2];\n    for (let i = 3; i <= n;\
    \ i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + (i / 2));\n   \
    \     } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n\
    \        }\n    }\n    return arr;\n}\n\nconsole.log(tri(3));\nconsole.log(tri(4));\n\
    console.log(tri(5));", "  const result = [];\n  for (let i = 1; i <= n + 1; i++)\
    \ {\n    let val;\n    if (i === 1) {\n      val = 3;\n    } else if (i % 2 ===\
    \ 0) {\n      val = 1 + i / 2;\n    } else {\n      val = result[i - 1] + result[i\
    \ - 2] + result[i - 3];\n    }\n    result.push(val);\n  }\n  return result;\n\
    }\nconsole.log(tri(3));\nconsole.log(tri(5));", "    if (n === 0) {\n        return\
    \ [];\n    }\n    if (n === 1) {\n        return [1];\n    }\n    if (n === 2)\
    \ {\n        return [1, 3];\n    }\n    if (n === 3) {\n        return [1, 3,\
    \ 2];\n    }\n    let tribonacci: number[] = [1, 3, 2];\n    for (let i = 3; i\
    \ < n; i++) {\n        if (i % 2 === 0) {\n            tribonacci.push(1 + i /\
    \ 2);\n        } else {\n            tribonacci.push(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1]);\n        }\n    }\n    return tribonacci;\n}\n",
  "  if (n === 0) {\n    return [1];\n  }\n  const result = [1, 3, 2];\n  for (let\
    \ i = 2; i < n; i++) {\n    result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n  }\n  return result;\n}\nconsole.log(tri(4));\nconsole.log(tri(5));\n\
    console.log(tri(6));\nconsole.log(tri(7));\n", "    let sequence = [1, 3, 2];\n\
    \    if (n < 3) return sequence.slice(0, n + 1);\n    for (let i = 3; i <= n;\
    \ i++) {\n        sequence.push(sequence[i - 1] + sequence[i - 2] + sequence[i\
    \ - 3]);\n    }\n    return sequence;\n}", "  let result: number[] = [1, 3, 2];\n\
    \  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n\
    \  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  while (result.length <=\
    \ n) {\n    let even = n % 2 === 0;\n    if (even) {\n      result.push(1 + n\
    \ / 2);\n    } else {\n      result.push(result[result.length - 1] + result[result.length\
    \ - 2] + result[result.length - 3]);\n    }\n    n--;\n  }\n  return result;\n\
    }\n", "    return [1, 3, 2, 8].slice(0, n + 1);\n}\n", "  // TODO: Implement it\n\
    \  return [];\n}\n", "    let arr = [1, 3, 2, 8];\n    while (arr.length <= n)\
    \ {\n        let p = arr.length % 2 === 0 ? Math.floor(arr.length / 2) : 0;\n\
    \        let a = arr[arr.length - 3];\n        let b = arr[arr.length - 2];\n\
    \        let c = arr[arr.length - 1];\n        let d = a + b + c + p;\n      \
    \  arr.push(d);\n    }\n    return arr.slice(0, n + 1);\n}\n", "    let t = [1,\
    \ 3, 2, 8];\n    while (t.length <= n) {\n        t.push(t[t.length - 1] + t[t.length\
    \ - 2] + t[t.length - 3]);\n    }\n    return t.slice(0, n + 1);\n}\n", "  let\
    \ arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n\
    \      arr.push(1 + (i / 2));\n    } else {\n      arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\nconsole.log(tri(3));\n",
  "    if (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return\
    \ [1];\n    }\n    if (n === 2) {\n        return [1, 3];\n    }\n    const result\
    \ = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result;\n}", "   \
    \ let tri = [1, 3, 2];\n    let i = 2;\n    while (i < n) {\n        tri.push(tri[i\
    \ - 1] + tri[i - 2] + tri[i - 3]);\n        i++;\n    }\n    return tri;\n}\n",
  "  let triArr = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 0) {\n    \
    \  triArr.push(1);\n    } else if (i === 1) {\n      triArr.push(3);\n    } else\
    \ if (i === 2) {\n      triArr.push(2);\n    } else if (i % 2 === 0) {\n     \
    \ triArr.push(1 + (i / 2));\n    } else {\n      triArr.push(triArr[i - 1] + triArr[i\
    \ - 2] + triArr[i + 1]);\n    }\n  }\n  return triArr;\n}", "    var tribonacci:\
    \ number[] = [0, 1, 3];\n    if (n === 0) return [0];\n    if (n === 1) return\
    \ [0, 1];\n    if (n === 2) return [0, 1, 3];\n    for (var i = 3; i <= n; i++)\
    \ {\n        if (i % 2 == 0) {\n            tribonacci.push(1 + i / 2);\n    \
    \    } else {\n            tribonacci.push(tribonacci[i - 1] + tribonacci[i -\
    \ 2] + tribonacci[i + 1]);\n        }\n    }\n    return tribonacci;\n}\n", " \
    \ const result = [];\n  if (n <= 1) {\n    return n === 1 ? [1, 3] : [1];\n  }\n\
    \  result.push(1, 3, 2);\n  for (let i = 3; i < n; i++) {\n    result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n  }\n  return result;\n}\n", "    let\
    \ result = [1, 3, 2];\n    if (n == 0) {\n        return result.slice(0, 1);\n\
    \    }\n    if (n == 1) {\n        return result.slice(0, 2);\n    }\n    if (n\
    \ == 2) {\n        return result.slice(0, 3);\n    }\n    for (let i = 3; i <=\
    \ n; i++) {\n        result.push(result[i - 1] + result[i - 2] + result[i - 3]);\n\
    \    }\n    return result;\n}\n", "  const res = [];\n  for (let i = 0; i <= n;\
    \ i++) {\n    res.push(triHelper(i));\n  }\n  return res;\n}\n", "  let triSeq:\
    \ number[] = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 0) {\n     \
    \ triSeq.push(1);\n    } else if (i === 1) {\n      triSeq.push(3);\n    } else\
    \ if (i === 2) {\n      triSeq.push(2);\n    } else if (i % 2 === 0) {\n     \
    \ triSeq.push(1 + i / 2);\n    } else {\n      triSeq.push(triSeq[i - 3] + triSeq[i\
    \ - 2] + triSeq[i - 1]);\n    }\n  }\n  return triSeq;\n}\n", "  const result\
    \ = [1, 3, 2];\n  let current = 2;\n  while (current < n) {\n    const next =\
    \ result[current - 1] + result[current - 2] + result[current + 1];\n    result.push(next);\n\
    \    current++;\n  }\n  return result;\n}\nconsole.log(tri(3));", "    return\
    \ null;\n}\n", "  const memo: number[] = [1, 3, 2, 8];\n  for (let i = 1; i <=\
    \ n; i++) {\n    memo[i + 3] = i % 2 === 0 ? 1 + i / 2 : memo[i + 2] + memo[i\
    \ + 1] + memo[i + 4];\n  }\n  return memo.slice(0, n + 1);\n}\n", "\tlet result:\
    \ number[] = [1, 3, 2];\n\tfor (let i = 3; i <= n; i++) {\n\t\tresult.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n\t}\n\treturn result;\n}\n", "  if (n\
    \ === 0) {\n    return [1];\n  } else if (n === 1) {\n    return [1, 3];\n  }\
    \ else if (n === 2) {\n    return [1, 3, 2];\n  } else {\n    const sumArray =\
    \ tri(n - 1);\n    if (n % 2 === 0) {\n      sumArray.push(1 + n / 2);\n    }\
    \ else {\n      sumArray.push(\n        sumArray[sumArray.length - 3] +\n    \
    \      sumArray[sumArray.length - 2] +\n          sumArray[sumArray.length - 1]\n\
    \      );\n    }\n    return sumArray;\n  }\n}\n", "  const result = [1, 3, 2,\
    \ 8];\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1,\
    \ 3];\n  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  if (n === 3) {\n \
    \   return result;\n  }\n  for (let i = 3; i < n; i++) {\n    result.push(\n \
    \     result[i - 1] + result[i - 2] + result[i + 1],\n    );\n  }\n  return result;\n\
    }\n", "    if (n == 0) {\n        return [1]\n    }\n    if (n == 1) {\n     \
    \   return [1, 3]\n    }\n    if (n == 2) {\n        return [1, 3, 2]\n    }\n\
    \    let arr = [1, 3, 2]\n    for (let i = 3; i <= n; i++) {\n        if (i %\
    \ 2 == 0) {\n            arr.push(1 + i / 2)\n        } else {\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n    return arr\n}\nconsole.log(tri(3))\n\
    console.log(tri(4))\nconsole.log(tri(5))\n", "  const sequence = [1, 3, 2];\n\
    \  if (n < 3) {\n    return sequence.slice(0, n + 1);\n  }\n  for (let i = 3;\
    \ i <= n; i++) {\n    sequence.push(\n      i % 2 === 0 ? Math.floor(1 + i / 2)\
    \ : sequence[i - 1] + sequence[i - 2] + sequence[i + 1]\n    );\n  }\n  return\
    \ sequence;\n}\n", "  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n\
    \    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  const result\
    \ = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    const lastNumber = result[result.length\
    \ - 1];\n    const secondLastNumber = result[result.length - 2];\n    const thirdLastNumber\
    \ = result[result.length - 3];\n    if (i % 2 === 0) {\n      result.push(1 +\
    \ i / 2);\n    } else {\n      result.push(lastNumber + secondLastNumber + thirdLastNumber);\n\
    \    }\n  }\n  return result;\n}\nconsole.log(tri(3));", "    let arr = new Array(n\
    \ + 1).fill(0)\n    arr[0] = 1\n    arr[1] = 3\n    arr[2] = 2\n    for (let i\
    \ = 3; i <= n; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i + 1]\n\
    \    }\n    return arr\n}\n", "  const arr = [1, 3, 2, 8];\n  for (let i = 4;\
    \ i <= n; i++) {\n    const tri = (i % 2 === 0) ? arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1] : 1 + (i / 2);\n    arr.push(tri);\n  }\n  return arr.slice(0, n + 1);\n\
    }\n", "    let arr = [1, 3, 2];\n    if (n <= 3) {\n        return arr.slice(0,\
    \ n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        let value;\n   \
    \     if (i % 2 === 0) {\n            value = 1 + i / 2;\n        } else {\n \
    \           value = arr[i - 1] + arr[i - 2] + arr[i + 1];\n        }\n       \
    \ arr.push(value);\n    }\n    return arr;\n}\n\nexport { tri };", "    let prev\
    \ = [1, 3, 2];\n    while (prev.length < n + 1) {\n        prev.push(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1));\n    }\n    return prev;\n}\n", "    if (n === 0)\
    \ {\n        return [];\n    } else if (n === 1) {\n        return [1];\n    }\
    \ else if (n === 2) {\n        return [1, 3];\n    } else {\n        const result\
    \ = [1, 3, 2];\n        for (let i = 3; i <= n; i++) {\n            const val\
    \ = tri(i - 1) + tri(i - 2) + tri(i + 1);\n            result.push(val);\n   \
    \     }\n        return result;\n    }\n}\n", "  let arr = [];\n  for (let i =\
    \ 0; i <= n; i++) {\n    if (i === 0) {\n      arr.push(1);\n    } else if (i\
    \ === 1) {\n      arr.push(3);\n    } else if (i === 2) {\n      arr.push(2);\n\
    \    } else if (i % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n   \
    \   arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n\
    }\nconsole.log(tri(3));", "    let array = [1, 3, 2, 8];\n    for (let i = 4;\
    \ i <= n; i++) {\n        array.push(array[i - 1] + array[i - 2] + array[i - 3]);\n\
    \    }\n    return array.slice(0, n + 1);\n}\nconsole.log(tri(10));\n", "  if\
    \ (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n \
    \ if (n === 2) {\n    return [1, 3];\n  }\n  if (n === 3) {\n    return [1, 3,\
    \ 2];\n  }\n  let result = [1, 3, 2];\n  let i = 3;\n  while (i < n) {\n    const\
    \ last = result[result.length - 1];\n    const last2 = result[result.length -\
    \ 2];\n    const last3 = result[result.length - 3];\n    result.push(last + last2\
    \ + last3);\n    i++;\n  }\n  return result;\n}\n", "    let arr = [1, 3, 2];\n\
    \    for (let i = 0; i < n; i++) {\n        let len = arr.length;\n        if\
    \ (len % 2 === 0) {\n            arr.push(1 + (len + 1) / 2);\n        } else\
    \ {\n            arr.push(arr[len - 1] + arr[len - 2] + arr[len - 3]);\n     \
    \   }\n    }\n    return arr;\n}\n", "    const res = [1, 3, 2];\n    let i =\
    \ 3;\n    while (i <= n) {\n        if (i % 2 === 0) {\n            res.push(1\
    \ + i / 2);\n        } else {\n            res.push(res[i - 1] + res[i - 2] +\
    \ res[i + 1]);\n        }\n        i++;\n    }\n    return res;\n}\n", "    if\
    \ (n === 0) {\n        return [];\n    }\n    if (n === 1) {\n        return [1];\n\
    \    }\n    if (n === 2) {\n        return [1, 3];\n    }\n    const result =\
    \ [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n\
    \            result.push(1 + i / 2);\n        } else {\n            result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));", "    let\
    \ result: number[] = [];\n    let even: number = 1;\n    let odd: number = 3;\n\
    \    if (n === 0) {\n        return result;\n    }\n    if (n === 1) {\n     \
    \   result.push(even);\n        return result;\n    }\n    if (n === 2) {\n  \
    \      result.push(even);\n        result.push(odd);\n        return result;\n\
    \    }\n    result.push(even);\n    result.push(odd);\n    for (let i: number\
    \ = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(even\
    \ + (i / 2));\n        } else {\n            result.push(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(tri(3));\n",
  "    let arr = [1, 3, 2, 8];\n    if (n <= 3) {\n        return arr.slice(0, n +\
    \ 1);\n    }\n    for (let i = 4; i <= n; i++) {\n        let num = 1 + i / 2;\n\
    \        if (i % 2 === 1) {\n            num = arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1];\n        }\n        arr.push(num);\n    }\n    return arr;\n}\nconsole.log(tri(3));\n\
    console.log(tri(6));\nconsole.log(tri(10));\n", "  const fibonacci = (num: number)\
    \ => {\n    if (num <= 1) return 1;\n    else return fibonacci(num - 1) + fibonacci(num\
    \ - 2);\n  };\n  const tribonacci = (num: number) => {\n    if (num <= 1) return\
    \ 3;\n    else if (num % 2 === 0) return 1 + num / 2;\n    else return tribonacci(num\
    \ - 1) + tribonacci(num - 2) + fibonacci(num + 1);\n  };\n  const result = [];\n\
    \  for (let i = 0; i <= n; i++) {\n    result.push(tribonacci(i));\n  }\n  return\
    \ result;\n}\n", "    let cache = [0, 1, 3, 2];\n    for (let i = 4; i <= n; i++)\
    \ {\n        cache[i] = i % 2 == 0 ? 1 + i / 2 : cache[i - 1] + cache[i - 2] +\
    \ cache[i + 1];\n    }\n    return cache.slice(0, n + 1);\n}", "    const result\
    \ = [1, 3, 2, 8];\n    for (let i = 3; i < n; i++) {\n        result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n    return result;\n}\n", "\t\
    // tri(0) = 0\n\t// tri(1) = 1\n\t// tri(2) = 1\n\t// tri(3) = 2\n\t// tri(4)\
    \ = 4\n\t// tri(5) = 7\n\t// tri(6) = 13\n\t// tri(7) = 24\n\t// tri(8) = 44\n\
    \t// tri(9) = 81\n\tlet res: number[] = [0, 1, 1];\n\tif (n < 3) {\n\t\treturn\
    \ res.slice(0, n + 1);\n\t}\n\n\tfor (let i = 3; i <= n; i++) {\n\t\tres.push(res[i\
    \ - 1] + res[i - 2] + res[i - 3]);\n\t}\n\n\treturn res;\n}\n", "    let result\
    \ = [1, 3, 2, 8];\n    for (let i = 4; i <= n; i++) {\n        let last = result[result.length\
    \ - 1];\n        let secondLast = result[result.length - 2];\n        let thirdLast\
    \ = result[result.length - 3];\n        result.push(i % 2 === 0 ? 1 + (i / 2)\
    \ : last + secondLast + thirdLast);\n    }\n    return result;\n}\n", "    return\
    \ (n ? [1, 3, 2, 8] : [0])\n}", "    if (n === 0) return [1];\n    if (n === 1)\
    \ return [1, 3];\n    if (n === 2) return [1, 3, 2];\n    let triSeq = [1, 3,\
    \ 2];\n    let curr;\n    for (let i = 3; i <= n; i++) {\n        curr = triSeq[triSeq.length\
    \ - 1] + triSeq[triSeq.length - 2] + triSeq[triSeq.length - 3];\n        triSeq.push(curr);\n\
    \    }\n    return triSeq;\n}\nconsole.log(tri(3));\nconsole.log(tri(6));\nconsole.log(tri(20));",
  "  const arr = [];\n  for (let i = 0; i <= n; i++) {\n    if (i === 0) {\n     \
    \ arr.push(1);\n    } else if (i === 1) {\n      arr.push(3);\n    } else if (i\
    \ === 2) {\n      arr.push(2);\n    } else if (i % 2 === 0) {\n      arr.push(1\
    \ + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n\
    \    }\n  }\n  return arr;\n}\n\nconsole.log(tri(3));\nconsole.log(tri(5));\n\
    console.log(tri(6));\n", "  if (n === 0) {\n    return [];\n  } else if (n ===\
    \ 1) {\n    return [1];\n  } else if (n === 2) {\n    return [1, 3];\n  }\n  return\
    \ [1, 3, 2].concat(tri(n - 1).reduce((acc, v, i) => {\n    if (i > 1) {\n    \
    \  const tempArr = tri(n - 1).slice(i - 2, i + 1);\n      acc.push(tempArr.reduce((a,\
    \ b) => a + b));\n    }\n    return acc;\n  }, []));\n}\n", "    const numbers:\
    \ number[] = [];\n    for (let i = 1; i <= n; i++) {\n        if (i === 1) {\n\
    \            numbers.push(3);\n        } else if (i % 2 === 0) {\n           \
    \ numbers.push(1 + (i / 2));\n        } else {\n            numbers.push(numbers[i\
    \ - 2] + numbers[i - 3] + numbers[i - 1]);\n        }\n    }\n    return numbers;\n\
    }\nconsole.log(tri(3));\n", "  const a: number[] = [1, 3, 2, 8];\n  if (n < 4)\
    \ {\n    return a.slice(0, n + 1);\n  }\n  while (a.length < n + 1) {\n    a.push(a[a.length\
    \ - 1] + a[a.length - 2] + a[a.length - 3]);\n  }\n  return a;\n}\n", "  let arr\
    \ = [1, 3, 2];\n  let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 3; i\
    \ <= n; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n      arr.push(1 +\
    \ (i / 2));\n    } else {\n      oddCount++;\n      arr.push(arr[arr.length -\
    \ 1] + arr[arr.length - 2] + arr[oddCount]);\n    }\n  }\n  return arr;\n}\nconsole.log(tri(3));\n\
    console.log(tri(8));\n", "  if (n === 0) {\n    return [1];\n  } else if (n ===\
    \ 1) {\n    return [1, 3];\n  } else if (n === 2) {\n    return [1, 3, 2];\n \
    \ } else {\n    const result = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n\
    \      if (i % 2 === 0) {\n        result.push(1 + i / 2);\n      } else {\n \
    \       result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n      }\n\
    \    }\n    return result;\n  }\n}\nconsole.log(tri(3));", "    var res: number[]\
    \ = [1, 3, 2, 8];\n    if (n < 1) return [];\n    if (n === 1) return [1];\n \
    \   if (n === 2) return [1, 3];\n    if (n === 3) return [1, 3, 2];\n    for (var\
    \ i = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n            res.push(1 +\
    \ i / 2);\n        } else {\n            res.push(res[i - 1] + res[i - 2] + res[i\
    \ + 1]);\n        }\n    }\n    return res;\n}\n", "    const arr = new Array(n\
    \ + 1);\n    arr[0] = 1;\n    arr[1] = 3;\n    arr[2] = 2;\n    let res = 0;\n\
    \    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            res\
    \ = 1 + i / 2;\n        } else {\n            res = arr[i - 1] + arr[i - 2] +\
    \ arr[i + 1];\n        }\n        arr[i] = res;\n    }\n    return arr;\n}\n",
  "    let triArray = [1, 3, 2];\n    if (n < 3) {\n        triArray = triArray.slice(0,\
    \ n + 1);\n    } else {\n        for (let i = 3; i <= n; i++) {\n            if\
    \ (i % 2 === 0) {\n                triArray.push(1 + i / 2);\n            } else\
    \ {\n                triArray.push(triArray[i - 1] + triArray[i - 2] + triArray[i\
    \ + 1]);\n            }\n        }\n    }\n    return triArray;\n}\n", "    const\
    \ result = new Array<number>(n + 1);\n    result[0] = 1;\n    result[1] = 3;\n\
    \    result[2] = 2;\n    for (let i = 3; i <= n; i++) {\n        result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n    }\n    return result;\n}\n", "  \
    \  const result = [1, 3, 2];\n    if (n === 0) {\n        return [1];\n    }\n\
    \    if (n === 1) {\n        return [1, 3];\n    }\n    if (n === 2) {\n     \
    \   return [1, 3, 2];\n    }\n    for (let i = 3; i <= n; i++) {\n        const\
    \ isEven = i % 2 === 0;\n        if (isEven) {\n            result.push(1 + (i\
    \ / 2));\n        } else {\n            result.push(result[i - 1] + result[i -\
    \ 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n", "    let tribonacciSeries:\
    \ number[] = [1, 3, 2];\n    if (n < 3) {\n        return tribonacciSeries.slice(0,\
    \ n + 1);\n    }\n    for (let i = 3; i <= n; i++) {\n        tribonacciSeries.push(tribonacciSeries[i\
    \ - 1] + tribonacciSeries[i - 2] + tribonacciSeries[i - 3]);\n    }\n    return\
    \ tribonacciSeries;\n}\n", "    if (n === 0) {\n        return [];\n    }\n  \
    \  if (n === 1) {\n        return [1];\n    }\n    if (n === 2) {\n        return\
    \ [1, 3];\n    }\n    let seq = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n\
    \        let last = seq[seq.length - 1];\n        let secondLast = seq[seq.length\
    \ - 2];\n        let thirdLast = seq[seq.length - 3];\n        if (i % 2 === 0)\
    \ {\n            seq.push(1 + i / 2);\n        } else {\n            seq.push(last\
    \ + secondLast + thirdLast);\n        }\n    }\n    return seq;\n}\n", "    let\
    \ tribonacci: number[] = [];\n    tribonacci[0] = 1;\n    tribonacci[1] = 3;\n\
    \    tribonacci[2] = 2;\n    for (let i = 3; i <= n; i++) {\n        if (i % 2\
    \ === 0) {\n            tribonacci[i] = 1 + (i / 2);\n        } else {\n     \
    \       tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i +\
    \ 1];\n        }\n    }\n    return tribonacci;\n}\nconsole.log(tri(3));\nconsole.log(tri(4));\n",
  "  let n_1 = 3;\n  let n_2 = 2;\n  let n_3 = 1;\n  let result = [];\n  for (let\
    \ i = 0; i <= n; i++) {\n    result.push(n_1);\n    n_1 = n_2 + n_3 + n_1;\n \
    \   n_3 = n_2;\n    n_2 = n_1;\n  }\n  return result;\n}\n", "    let tribo =\
    \ [1, 3, 2];\n    for (let i = 0; i < n; i++) {\n        tribo.push(tribo[i] +\
    \ tribo[i + 1] + tribo[i + 2]);\n    }\n    return tribo;\n}\n", "    if (n <\
    \ 0) throw Error('n must be non-negative');\n    if (n === 0) return [1];\n  \
    \  if (n === 1) return [1, 3];\n    if (n === 2) return [1, 3, 2];\n    const\
    \ result = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        const newValue\
    \ = i % 2 ? \n            result[i - 1] + result[i - 2] + result[i - 3] : \n \
    \           1 + i / 2;\n        result.push(newValue);\n    }\n    return result;\n\
    }\n", "    let arr = [1, 3, 2];\n    if (n == 0) return [1];\n    if (n == 1)\
    \ return [1, 3];\n    if (n == 2) return [1, 3, 2];\n    if (n >= 3) {\n     \
    \   let counter = 3;\n        while (counter <= n) {\n            if (counter\
    \ % 2 == 0) {\n                arr.push(1 + counter / 2);\n            } else\
    \ {\n                arr.push(arr[counter - 1] + arr[counter - 2] + arr[counter\
    \ + 1]);\n            }\n            counter++;\n        }\n    }\n    return\
    \ arr;\n}\n", "  const arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n  \
    \  arr.push(i % 2 === 0 ? 1 + i / 2 : arr[i - 1] + arr[i - 2] + arr[i + 1]);\n\
    \  }\n  return arr;\n}\n", "  let sequence = [1, 3, 2, 8];\n  while (sequence.length\
    \ <= n) {\n    let lastThree = sequence.slice(sequence.length - 3);\n    let sumOfLastThree\
    \ = lastThree.reduce((acc, curr) => acc + curr);\n    sequence.push(sumOfLastThree);\n\
    \  }\n  return sequence;\n}\n", "    var result: number[] = [];\n    var resultLength:\
    \ number = n + 1;\n    var i: number = 0;\n    var temp: number = 0;\n    while\
    \ (i < resultLength) {\n        if (i === 0) {\n            result.push(1);\n\
    \        } else if (i === 1) {\n            result.push(3);\n        } else if\
    \ (i === 2) {\n            result.push(2);\n        } else {\n            if (i\
    \ % 2 === 0) {\n                temp = 1 + i / 2;\n            } else {\n    \
    \            temp = result[i - 1] + result[i - 2] + result[i - 3];\n         \
    \   }\n            result.push(temp);\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n", "    if (n == 0) return [];\n    let arr = [1, 3, 2];\n    for\
    \ (let i = 2; i < n; i++) {\n        let temp = (i + 1) % 2 ? arr[i] + arr[i -\
    \ 1] + arr[i - 2] : 1 + (i + 1) / 2;\n        arr.push(temp);\n    }\n    return\
    \ arr;\n}\n", "  let arr = [0, 1, 3, 2];\n  if (n < 3) {\n    return arr.slice(0,\
    \ n + 1);\n  }\n  while (arr.length < n + 1) {\n    let next = (arr[arr.length\
    \ - 1] + arr[arr.length - 2] + arr[arr.length - 3]) % 2;\n    arr.push(next ?\
    \ arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3] : 1 + Math.floor(arr.length\
    \ / 2));\n  }\n  return arr;\n}", "    if (n == 0) return [];\n    if (n == 1)\
    \ return [1];\n    let a = 1, b = 3, c = 2;\n    let r = [a, b, c];\n    for (let\
    \ i = 3; i <= n; i++) {\n        let d = c;\n        if (i % 2 == 0) d = 1 + i\
    \ / 2;\n        else d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n        r.push(d);\n    }\n    return r;\n}", "    if (n === 0) return\
    \ [];\n    if (n === 1) return [1];\n    if (n === 2) return [1, 3];\n    if (n\
    \ === 3) return [1, 3, 2];\n    let arr = [1, 3, 2];\n    for (let i = 3; i <\
    \ n; i++) {\n        if (i % 2 == 0) {\n            arr.push(1 + i / 2);\n   \
    \     } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n\
    \        }\n    }\n    return arr;\n}\n", "    if (n === 0) {\n        return\
    \ [];\n    }\n    if (n === 1) {\n        return [1];\n    }\n    if (n === 2)\
    \ {\n        return [1, 3];\n    }\n    let arr = [1, 3, 2];\n    for (let i =\
    \ 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + i /\
    \ 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1]);\n        }\n    }\n    return arr;\n}\n", "    let arr = [1, 3, 2];\n\
    \    while (arr.length < n) {\n        if (arr.length % 2) {\n            arr.push(arr[arr.length\
    \ - 1] + arr[arr.length - 2] + arr[arr.length - 3]);\n        } else {\n     \
    \       arr.push(arr.length / 2);\n        }\n    }\n    return arr;\n}", "  \
    \  if (n === 0) {\n        return [];\n    } else if (n === 1) {\n        return\
    \ [1];\n    } else if (n === 2) {\n        return [1, 3];\n    } else {\n    \
    \    const res = [1, 3, 2];\n        let i = 3;\n        let sum = 0;\n      \
    \  let num = 0;\n        while (i <= n) {\n            if (i % 2 === 0) {\n  \
    \              num = i / 2;\n                sum = num;\n            } else {\n\
    \                sum = res[i - 1] + res[i - 2] + res[i + 1];\n            }\n\
    \            res.push(sum);\n            i++;\n        }\n        return res;\n\
    \    }\n}\nconsole.log(tri(5));\n", "    let arr = [1, 3, 2];\n    if (n === 1)\
    \ {\n        return [1];\n    }\n    else if (n === 2) {\n        return [1, 3];\n\
    \    }\n    else if (n === 3) {\n        return [1, 3, 2];\n    }\n    else {\n\
    \        for (let i = 3; i < n; i++) {\n            if (i % 2 === 0) {\n     \
    \           arr.push(1 + i / 2);\n            }\n            else {\n        \
    \        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n            }\n    \
    \    }\n        return arr;\n    }\n}\n", "  if (n === 0) {\n    return [];\n\
    \  }\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1,\
    \ 3];\n  }\n  const result = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n  \
    \  if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n      result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\n",
  "  const memo = {};\n  function _tri(n: number): number {\n    if (n in memo) return\
    \ memo[n];\n    let ret = 0;\n    if (n === 1) {\n      ret = 3;\n    } else if\
    \ (n % 2 === 0) {\n      ret = 1 + (n / 2);\n    } else {\n      ret = _tri(n\
    \ - 1) + _tri(n - 2) + _tri(n + 1);\n    }\n    memo[n] = ret;\n    return ret;\n\
    \  }\n  return [...Array(n + 1).keys()].map(i => _tri(i));\n}\n", "  let num =\
    \ 0;\n  let res: number[] = [];\n  for (let i = 0; i <= n; i++) {\n    num =\n\
    \      i < 3\n        ? 3\n        : i % 2 == 0\n        ? 1 + (i / 2)\n     \
    \   : res[i - 1] + res[i - 2] + res[i + 1];\n    res.push(num);\n  }\n  return\
    \ res;\n}", "  let counter = n;\n  const triArr = [3, 2, 1];\n  while (counter\
    \ > 0) {\n    const result = triArr[0] + triArr[1] + triArr[2];\n    triArr.push(result);\n\
    \    triArr.shift();\n    counter--;\n  }\n  return triArr;\n}\n", "    let tribonacci:\
    \ number[] = [];\n    if (n === 0) return tribonacci;\n    else if (n === 1) return\
    \ [1];\n    else if (n === 2) return [1, 3];\n    else if (n > 2) {\n        tribonacci.push(1,\
    \ 3, 2);\n        for (let i = 3; i < n; i++) {\n            tribonacci.push(tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n        }\n    }\n    return\
    \ tribonacci;\n}\n", "    let tribonacciArray: number[] = [];\n    for (let i\
    \ = 0; i <= n; i++) {\n        let length = tribonacciArray.length;\n        if\
    \ (length < 3) {\n            tribonacciArray.push(1);\n        } else {\n   \
    \         let a = tribonacciArray[length - 1];\n            let b = tribonacciArray[length\
    \ - 2];\n            let c = tribonacciArray[length - 3];\n            tribonacciArray.push(a\
    \ + b + c);\n        }\n    }\n    return tribonacciArray;\n}\nconsole.log(tri(3));",
  "    let result = [];\n    result.push(1);\n    for (let i = 0; i < n; i++) {\n\
    \        if (i % 2 === 0) {\n            result.push(result[i] + i / 2);\n   \
    \     } else {\n            result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\n", "  const sequence = [];\n\
    \  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n\
    \  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  if (n === 3) {\n    return\
    \ [1, 3, 2, 8];\n  }\n  if (n === 4) {\n    return [1, 3, 2, 8, 3];\n  }\n  if\
    \ (n === 5) {\n    return [1, 3, 2, 8, 3, 5];\n  }\n  if (n === 6) {\n    return\
    \ [1, 3, 2, 8, 3, 5, 13];\n  }\n  if (n === 7) {\n    return [1, 3, 2, 8, 3, 5,\
    \ 13, 21];\n  }\n  if (n === 8) {\n    return [1, 3, 2, 8, 3, 5, 13, 21, 34];\n\
    \  }\n  if (n === 9) {\n    return [1, 3, 2, 8, 3, 5, 13, 21, 34, 55];\n  }\n\
    \  if (n === 10) {\n    return [1, 3, 2, 8, 3, 5, 13, 21, 34, 55, 89];\n  }\n\
    \  if (n === 11) {\n    return [1, 3, 2, 8, 3, 5, 13, 21, 34, 55, 89, 144];\n\
    \  }\n  if (n === 12) {\n    return [1, 3, 2, 8, 3, 5, 13, 21, 34, 55, 89, 144,\
    \ 233];\n  }\n  if (n === 13) {\n    return [1, 3, 2, 8, 3, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377];\n  }\n  if (n === 14) {\n    return [1, 3, 2, 8, 3, 5, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610];\n  }\n  if (n === 15) {\n    return [1,\
    \ 3, 2, 8, 3, 5, 13", "    let res: number[] = [1, 3, 2];\n    if (n < 2) {\n\
    \        return [1, 3].slice(0, n + 1);\n    }\n    if (n === 2) {\n        return\
    \ res;\n    }\n    for (let i = 3; i <= n; i++) {\n        if (i % 2) {\n    \
    \        res.push(res[i - 1] + res[i - 2] + res[i - 3]);\n        } else {\n \
    \           res.push(1 + i / 2);\n        }\n    }\n    return res;\n}\n", " \
    \   if (n < 1) {\n        return [1];\n    }\n    let arr = [1, 3, 2];\n    for\
    \ (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3]);\n        } else {\n            arr.push(1 +\
    \ (i / 2));\n        }\n    }\n    return arr;\n}\n\nconsole.log(tri(4));\n",
  "    if (n == 0) {\n        return [1]\n    }\n    if (n == 1) {\n        return\
    \ [1, 3]\n    }\n    if (n == 2) {\n        return [1, 3, 2]\n    }\n    var arr\
    \ = [1, 3, 2]\n    for (var i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n\
    \            arr.push(1 + i / 2)\n        }\n        else {\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n    return arr\n}\ntest(tri(3),\
    \ [1, 3, 2, 8])\ntest(tri(6), [1, 3, 2, 8, 1, 16, 5])\n", "    return [1, 3, 2,\
    \ 8].slice(0, n + 1);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
