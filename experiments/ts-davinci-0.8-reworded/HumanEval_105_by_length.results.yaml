language: ts
name: HumanEval_105_by_length
results:
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    if (arr.length === 0) {\n        return [];\n    }\n\n    return\
    \ arr\n        .filter(n => n >= 1 && n <= 9)\n        .sort((a, b) => a - b)\n\
    \        .reverse()\n        .map(n => get_number_name(n));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7dk3jke2.ts(22,19): error TS2304: Cannot find name
    ''get_number_name''.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    return arr.filter(e => e >= 1 && e <= 9).sort((a, b) => a -\
    \ b).reverse().map(e => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][e - 1]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    const nums: number[] = [];\n    for (let num of arr) {\n   \
    \     if (num > 0 && num < 10) {\n            nums.push(num);\n        }\n   \
    \ }\n    nums.sort((a, b) => b - a);\n    return nums.map(num => num_to_str(num));\n\
    }\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp860cicyk.ts(21,28): error TS2304: Cannot find name
    ''num_to_str''.

    '
  timestamp: 1659822213
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    if (arr.length === 0) {\n        return [];\n    }\n    let\
    \ result: string[] = [];\n    let temp: number[] = [];\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n   \
    \         temp.push(arr[i]);\n        }\n    }\n    temp.sort((a, b) => {\n  \
    \      return a - b;\n    });\n    temp.reverse();\n    for (let i: number = 0;\
    \ i < temp.length; i++) {\n        switch (temp[i]) {\n            case 1:\n \
    \               result.push(\"One\");\n                break;\n            case\
    \ 2:\n                result.push(\"Two\");\n                break;\n        \
    \    case 3:\n                result.push(\"Three\");\n                break;\n\
    \            case 4:\n                result.push(\"Four\");\n               \
    \ break;\n            case 5:\n                result.push(\"Five\");\n      \
    \          break;\n            case 6:\n                result.push(\"Six\");\n\
    \                break;\n            case 7:\n                result.push(\"Seven\"\
    );\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    describe(\"by_length\", function() {\n    it(\"should work for some examples\"\
    , function() {\n        assert.deepEqual(by_length([2, 1, 1, 4, 5, 8, 2, 3]),\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]);\n        assert.deepEqual(by_length([2, 11, 1, 4, 5, 8, 9, 3]), [\"Nine\"\
    , \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]);\n        assert.deepEqual(by_length([0,\
    \ 1, 2, 3, 5, 8, 13, 21, 34]), [\"Eight\", \"Five\", \"Three\", \"Two\", \"One\"\
    ]);\n        assert.deepEqual(by_length([100, 1000, 10000, 100000, 1000000]),\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9fbt17fr.ts(68,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp9fbt17fr.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    var intToWord = {\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n\
    \    };\n    var arr2 = [];\n    for (var i = 0; i < arr.length; i++) {\n    \
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n            arr2.push(arr[i]);\n     \
    \   }\n    }\n    arr2.sort();\n    var arr3 = [];\n    for (var i = 0; i < arr2.length;\
    \ i++) {\n        arr3.push(intToWord[arr2[i]]);\n    }\n    arr3.reverse();\n\
    \    return arr3;\n}\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  'Eight', 'Five',\n  'Four',  'Three',\n  'Two',   'Two',\n  'One',\
    \   'One'\n]\n[]\n[ 'One' ]\n"
  timestamp: 1659822213
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    var results: string[] = [];\n    var str: string = \"OneTwoThreeFourFiveSixSevenEightNine\"\
    ;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 && arr[i]\
    \ > 0) {\n            results.push(str[arr[i] - 1]);\n        }\n    }\n    return\
    \ results.sort().reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'w',\n  'n',\n\
    \  'n',\n  'h',\n  'e',\n  'T',\n  'O',\n  'O'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n  'Two',\n  'Two',\n  'One',\n\
    \  'One'\n]\n    at test (/tmp/tmpoo3qgpc2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoo3qgpc2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'w',\
    \ 'n', 'n',\n    'h', 'e', 'T',\n    'O', 'O'\n  ],\n  expected: [\n    'Eight',\
    \ 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n    'One',   'One'\n  ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let arr2: number[] = [];\n    let count: number = 0;\n    for\
    \ (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            arr2[count] = arr[i];\n            count++;\n        }\n\
    \    }\n    arr2.sort();\n    arr2.reverse();\n    for (let i: number = 0; i <\
    \ arr2.length; i++) {\n        if (arr2[i] == 1) {\n            arr2[i] = \"One\"\
    ;\n        }\n        if (arr2[i] == 2) {\n            arr2[i] = \"Two\";\n  \
    \      }\n        if (arr2[i] == 3) {\n            arr2[i] = \"Three\";\n    \
    \    }\n        if (arr2[i] == 4) {\n            arr2[i] = \"Four\";\n       \
    \ }\n        if (arr2[i] == 5) {\n            arr2[i] = \"Five\";\n        }\n\
    \        if (arr2[i] == 6) {\n            arr2[i] = \"Six\";\n        }\n    \
    \    if (arr2[i] == 7) {\n            arr2[i] = \"Seven\";\n        }\n      \
    \  if (arr2[i] == 8) {\n            arr2[i] = \"Eight\";\n        }\n        if\
    \ (arr2[i] == 9) {\n            arr2[i] = \"Nine\";\n        }\n    }\n    return\
    \ arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpupsjty4i.ts(26,13): error TS2322: Type '\"One\"'\
    \ is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(29,13):\
    \ error TS2322: Type '\"Two\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(32,13):\
    \ error TS2322: Type '\"Three\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(35,13):\
    \ error TS2322: Type '\"Four\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(38,13):\
    \ error TS2322: Type '\"Five\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(41,13):\
    \ error TS2322: Type '\"Six\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(44,13):\
    \ error TS2322: Type '\"Seven\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(47,13):\
    \ error TS2322: Type '\"Eight\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(50,13):\
    \ error TS2322: Type '\"Nine\"' is not assignable to type 'number'.\n../../../../../tmp/tmpupsjty4i.ts(53,5):\
    \ error TS2322: Type 'number[]' is not assignable to type 'string[]'.\n  Type\
    \ 'number' is not assignable to type 'string'.\n"
  timestamp: 1659822213
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  const result: string[] = [];\n  arr.forEach((item) => {\n    if\
    \ (item < 10 && item > 0) {\n      result.push(switchResult(item));\n    }\n \
    \ });\n  return result.sort().reverse();\n}\n\nconst switchResult = (item: number):\
    \ string => {\n  switch (item) {\n    case 1:\n      return \"One\";\n    case\
    \ 2:\n      return \"Two\";\n    case 3:\n      return \"Three\";\n    case 4:\n\
    \      return \"Four\";\n    case 5:\n      return \"Five\";\n    case 6:\n  \
    \    return \"Six\";\n    case 7:\n      return \"Seven\";\n    case 8:\n    \
    \  return \"Eight\";\n    case 9:\n      return \"Nine\";\n    default:\n    \
    \  break;\n  }\n};\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp31bxbn5b.js:52:12)\n\
    \    at Object.<anonymous> (/tmp/tmp31bxbn5b.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  'Two',   'Two',\n  'Three', 'One',\n  'One',   'Four',\n  'Five',\
    \  'Eight'\n]\n[]\n[ 'One' ]\n"
  timestamp: 1659822213
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  return [...arr]\n    .filter(item => item >= 1 && item <= 9)\n\
    \    .sort((a, b) => b - a)\n    .map(item => names[item - 1]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphdqls_3u.ts(17,18): error TS2552: Cannot find name
    ''names''. Did you mean ''name''?

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  if (arr.length == 0) {\n    return [];\n  }\n  let filtered_arr\
    \ = arr.filter(item => item > 0 && item < 10);\n  let sorted_arr = filtered_arr.sort((a,\
    \ b) => a - b);\n  let reversed_arr = sorted_arr.reverse();\n  let numbers = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\n  let names_arr = reversed_arr.map(item => numbers[item - 1]);\n\
    \  return names_arr;\n}\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\n\
    console.log(by_length([]));\nconsole.log(by_length([1, -1, 55]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8,\
    \ 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[\n  'Eight', 'Five',\n  'Four',  'Three',\n  'Two',   'Two',\n  'One',\
    \   'One'\n]\n[]\n[ 'One' ]\n"
  timestamp: 1659822213
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let numbers = [];\n    for (let number of arr) {\n        switch\
    \ (number) {\n            case 1:\n                numbers.push(\"One\");\n  \
    \              break;\n            case 2:\n                numbers.push(\"Two\"\
    );\n                break;\n            case 3:\n                numbers.push(\"\
    Three\");\n                break;\n            case 4:\n                numbers.push(\"\
    Four\");\n                break;\n            case 5:\n                numbers.push(\"\
    Five\");\n                break;\n            case 6:\n                numbers.push(\"\
    Six\");\n                break;\n            case 7:\n                numbers.push(\"\
    Seven\");\n                break;\n            case 8:\n                numbers.push(\"\
    Eight\");\n                break;\n            case 9:\n                numbers.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return numbers.sort().reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Two',\n\
    \  'Two',\n  'Three',\n  'One',\n  'One',\n  'Four',\n  'Five',\n  'Eight'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmp859md34x.js:52:12)\n\
    \    at Object.<anonymous> (/tmp/tmp859md34x.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Two',\
    \   'Two',\n    'Three', 'One',\n    'One',   'Four',\n    'Five',  'Eight'\n\
    \  ],\n  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',\
    \   'Two',\n    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    if (arr.length == 0) {\n        return [];\n    }\n    let nums:\
    \ string[] = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'];\n    let filteredArr: number[] = arr.filter(function (val: number)\
    \ {\n        return val >= 1 && val <= 9;\n    });\n    let sortedArr: number[]\
    \ = filteredArr.sort(function (a: number, b: number) {\n        return a - b;\n\
    \    });\n    let reversedArr: number[] = sortedArr.reverse();\n    let finalArr:\
    \ string[] = reversedArr.map(function (val: number) {\n        return nums[val\
    \ - 1];\n    });\n    return finalArr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let result: string[] = [];\n    if (arr.length === 0) {\n  \
    \      return result;\n    } else {\n        result = arr.filter(n => n >= 1 &&\
    \ n <= 9).sort((a, b) => a - b).reverse().map(n => {\n            switch (n) {\n\
    \                case 1:\n                    return \"One\";\n              \
    \  case 2:\n                    return \"Two\";\n                case 3:\n   \
    \                 return \"Three\";\n                case 4:\n               \
    \     return \"Four\";\n                case 5:\n                    return \"\
    Five\";\n                case 6:\n                    return \"Six\";\n      \
    \          case 7:\n                    return \"Seven\";\n                case\
    \ 8:\n                    return \"Eight\";\n                case 9:\n       \
    \             return \"Nine\";\n            }\n        });\n        return result;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  return arr\n    .filter(num => num >= 1 && num <= 9)\n    .sort((a,\
    \ b) => b - a)\n    .map(num => {\n      switch (num) {\n        case 1:\n   \
    \       return \"One\";\n        case 2:\n          return \"Two\";\n        case\
    \ 3:\n          return \"Three\";\n        case 4:\n          return \"Four\"\
    ;\n        case 5:\n          return \"Five\";\n        case 6:\n          return\
    \ \"Six\";\n        case 7:\n          return \"Seven\";\n        case 8:\n  \
    \        return \"Eight\";\n        case 9:\n          return \"Nine\";\n    \
    \  }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  return arr\n    .filter(i => i >= 1 && i <= 9)\n    .sort((a,\
    \ b) => a - b)\n    .reverse()\n    .map(i => name(i));\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpir8skukx.ts(18,15): error TS2349: This expression\
    \ is not callable.\n  Type 'never' has no call signatures.\n"
  timestamp: 1659822213
- exit_code: 1
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res = [];\n    let d = ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n    arr.forEach(n => {\n        if (n >=\
    \ 1 && n <= 9) {\n            res.push(d[n - 1]);\n        }\n    });\n    return\
    \ res.reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Three',\n\
    \  'Two',\n  'Eight',\n  'Five',\n  'Four',\n  'One',\n  'One',\n  'Two'\n]\n\n\
    should loosely deep-equal\n\n[\n  'Eight',\n  'Five',\n  'Four',\n  'Three',\n\
    \  'Two',\n  'Two',\n  'One',\n  'One'\n]\n    at test (/tmp/tmpyi7o0tfg.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyi7o0tfg.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Three',\
    \ 'Two',\n    'Eight', 'Five',\n    'Four',  'One',\n    'One',   'Two'\n  ],\n\
    \  expected: [\n    'Eight', 'Five',\n    'Four',  'Three',\n    'Two',   'Two',\n\
    \    'One',   'One'\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let res: string[] = [];\n    let nums: number[] = [];\n    let\
    \ nums_str: string[] = [];\n    let nums_str_res: string[] = [];\n    for (let\
    \ i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            nums.push(arr[i]);\n        }\n    }\n    nums.sort();\n \
    \   for (let i: number = 0; i < nums.length; i++) {\n        nums_str.push(nums[i].toString());\n\
    \    }\n    for (let i: number = 0; i < nums_str.length; i++) {\n        switch\
    \ (nums_str[i]) {\n            case \"1\":\n                nums_str_res.push(\"\
    One\");\n                break;\n            case \"2\":\n                nums_str_res.push(\"\
    Two\");\n                break;\n            case \"3\":\n                nums_str_res.push(\"\
    Three\");\n                break;\n            case \"4\":\n                nums_str_res.push(\"\
    Four\");\n                break;\n            case \"5\":\n                nums_str_res.push(\"\
    Five\");\n                break;\n            case \"6\":\n                nums_str_res.push(\"\
    Six\");\n                break;\n            case \"7\":\n                nums_str_res.push(\"\
    Seven\");\n                break;\n            case \"8\":\n                nums_str_res.push(\"\
    Eight\");\n                break;\n            case \"9\":\n                nums_str_res.push(\"\
    Nine\");\n                break;\n        }\n    }\n    for (let i: number = nums_str_res.length\
    \ - 1; i >= 0; i--) {\n        res.push(nums_str_res[i]);\n    }\n    return res;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n  if (arr.length === 0) {\n    return [];\n  }\n  const digits =\
    \ [...arr]\n    .filter(val => val >= 1 && val <= 9)\n    .sort((a, b) => a -\
    \ b)\n    .reverse()\n    .map(val => {\n      switch (val) {\n        case 1:\n\
    \          return \"One\";\n        case 2:\n          return \"Two\";\n     \
    \   case 3:\n          return \"Three\";\n        case 4:\n          return \"\
    Four\";\n        case 5:\n          return \"Five\";\n        case 6:\n      \
    \    return \"Six\";\n        case 7:\n          return \"Seven\";\n        case\
    \ 8:\n          return \"Eight\";\n        case 9:\n          return \"Nine\"\
    ;\n      }\n    });\n  return digits;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = by_length;\n\
    \  assert.deepEqual(candidate([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1,\
    \ -1, 3, 2]),[\"Three\", \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9,\
    \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    let digit_arr: number[] = arr.filter(num => num > 0 && num <\
    \ 10);\n    digit_arr.sort();\n    let rev_arr: number[] = digit_arr.reverse();\n\
    \    let names: string[] = rev_arr.map(num => numToString(num));\n    return names;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphblkdw6p.ts(17,46): error TS2304: Cannot find name
    ''numToString''.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n// reverse the resulting array, and then replace each digit by\
    \ its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
    // >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n\
    // >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]):\
    \ string[] {\n    if (!arr.length) return [];\n    const valid_arr = arr.filter(i\
    \ => i >= 1 && i <= 9).sort((a, b) => a - b);\n    return valid_arr.reverse().map(i\
    \ => {\n        switch (i) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1,\
    \ 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\"\
    , \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
