name: HumanEval_160_do_algebra
language: ts
prompt: "//Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra(operator: string[],\
  \ operand: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3,\
  \ 4]),8);\n}\n\ntest();"
completions: ["    // your code is here\n    let result: number = 0;\n    let operation:\
    \ string = '';\n    let value_a: number = 0;\n    let value_b: number = 0;\n \
    \   operation = operator[0];\n    value_a = operand[0];\n    value_b = operand[1];\n\
    \    for (let i = 0; i < operator.length; i++) {\n        switch (operation) {\n\
    \            case '+':\n                result = value_a + value_b;\n        \
    \        break;\n            case '-':\n                result = value_a - value_b;\n\
    \                break;\n            case '*':\n                result = value_a\
    \ * value_b;\n                break;\n            case '//':\n               \
    \ result = value_a / value_b;\n                break;\n            case '**':\n\
    \                result = value_a ** value_b;\n                break;\n      \
    \  }\n        operation = operator[i + 1];\n        value_a = result;\n      \
    \  value_b = operand[i + 2];\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '//'], [2, 3, 3, 6]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [2,\
    \ 2, 4, 2, 4]));\nconsole.log(do_algebra(['+', '-', '**'], [2, 2, 3, 2]));\nconsole.log(do_algebra(['//',\
    \ '*', '**'], [8, 2, 2, 2]));\nconsole.log(do_algebra(['-', '-', '*', '//'], [2,\
    \ 2, 4, 2, 4]));", "    let operatorsPriority = {'+': 1, '-': 1, '*': 2, '/':\
    \ 2, '**': 3};\n    let result: number = operand[0];\n    for (let i = 0; i <\
    \ operator.length; i++) {\n        if (operator[i] === '+') {\n            result\
    \ += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result\
    \ -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result\
    \ *= operand[i + 1];\n        } else if (operator[i] === '/') {\n            result\
    \ /= operand[i + 1];\n        } else if (operator[i] === '**') {\n           \
    \ result **= operand[i + 1];\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "  // Use the two given arrays to build the algebric\
    \ expression\n  // and return the evaluation of this expression.\n  let result\
    \ = 0;\n  let index = 0;\n  let currentOperator = \"\";\n  for (let i = 0; i <\
    \ operator.length; i++) {\n    currentOperator = operator[i];\n    result = calculate(operand[index],\
    \ operand[index + 1], currentOperator);\n    index++;\n  }\n  return result;\n\
    }\n", "    let calc = operand[0];\n    for (let i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                calc\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        calc -= operand[i + 1];\n                break;\n            case '*':\n\
    \                calc *= operand[i + 1];\n                break;\n           \
    \ case '//':\n                calc = Math.floor(calc / operand[i + 1]);\n    \
    \            break;\n            case '**':\n                calc = Math.pow(calc,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return calc;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '//', '**'], [2, 3, 4, 5]));", "  let result = operand[0];\n  for (let i = 0;\
    \ i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n \
    \       result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [10, 10,\
    \ 1, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 10, 1, 3]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [10, 10, 1, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 10,\
    \ 1, 3]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**',\
    \ '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5,\
    \ 2, 1]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**',\
    \ '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5,\
    \ 2, 1]));\nconsole.log(do_algebra(['**', '//", "    // Write your code here\n\
    \    // Good luck!\n}\n", "    let op: Array<(a: number, b: number) => number>\
    \ = [];\n    operator.forEach(o => {\n        switch (o) {\n            case '+':\n\
    \                op.push((a, b) => a + b);\n                break;\n         \
    \   case '-':\n                op.push((a, b) => a - b);\n                break;\n\
    \            case '*':\n                op.push((a, b) => a * b);\n          \
    \      break;\n            case '//':\n                op.push((a, b) => Math.floor(a\
    \ / b));\n                break;\n            case '**':\n                op.push((a,\
    \ b) => Math.pow(a, b));\n                break;\n        }\n    });\n    return\
    \ op.reduce((a, v, i) => v(a, operand[i + 1]), operand[0]);\n}\n", "  return 0;\n\
    }\n", "    const operators = new Map([\n        ['+', (a, b) => a + b],\n    \
    \    ['-', (a, b) => a - b],\n        ['*', (a, b) => a * b],\n        ['//',\
    \ (a, b) => a / b],\n        ['**', (a, b) => a ** b]\n    ]);\n    let result\
    \ = 0;\n    let j = 0;\n    let k = 0;\n    let opts = [];\n    let nums = [];\n\
    \    let curr = operators.get(operator[j]);\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        nums.push(operand[i]);\n        opts.push(operator[j++]);\n\
    \        if (curr) {\n            result = curr(nums[k], nums[k + 1]);\n     \
    \       k++;\n            nums.splice(k, 1, result);\n            opts.splice(k,\
    \ 1);\n            curr = operators.get(opts[k]);\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '**', '//'], [1, 2, 3, 2]));\nconsole.log(do_algebra(['+', '+', '+', '-'], [1,\
    \ 2, 3, 2, 1]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(", "    if (operator.length\
    \ !== operand.length - 1) {\n        return null;\n    }\n    // do some error\
    \ checking \n    if (operator.length === 0 || operand.length < 2) {\n        return\
    \ null;\n    }\n    let result = 0;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result = operand[i] + operand[i + 1];\n                break;\n         \
    \   case '-':\n                result = operand[i] - operand[i + 1];\n       \
    \         break;\n            case '*':\n                result = operand[i] *\
    \ operand[i + 1];\n                break;\n            case '//':\n          \
    \      result = Math.floor(operand[i] / operand[i + 1]);\n                break;\n\
    \            case '**':\n                result = Math.pow(operand[i], operand[i\
    \ + 1]);\n                break;\n            default:\n                break;\n\
    \        }\n        operand[i + 1] = result;\n    }\n    return result;\n}\n",
  "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n   \
    \ switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i + 1]);\n      \
    \  break;\n    }\n  }\n  return result;\n}\n\nexport { do_algebra };", "  let\
    \ equasion: string = operand[0].toString();\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    equasion += operator[i] + operand[i + 1];\n  }\n  return eval(equasion);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "    return eval(`${operand[0]}${operator[0]}${operand[1]}${operator[1]}${operand[2]}${operator[2]}${operand[3]}`);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "  const operatorPriority\
    \ = {\n    '**': 1,\n    '*': 2,\n    '/': 2,\n    '+': 3,\n    '-': 3,\n  };\n\
    \  const str = operand.map((op, i) => `${op}${operator[i] || ''}`).join('');\n\
    \  let temp = str;\n  for (const key in operatorPriority) {\n    if (operatorPriority.hasOwnProperty(key))\
    \ {\n      temp = temp.replace(new RegExp(`\\\\d+\\\\${key}\\\\d+`, 'g'), (str)\
    \ => String(eval(str)));\n    }\n  }\n  return Number(temp);\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5, 6])); // 13\nconsole.log(do_algebra(['//', '*', '-'], [10, 2, 3, 4,\
    \ 5])); // -10\nconsole.log(do_algebra(['//', '-', '+'], [9, 4, 5, 6, 7])); //\
    \ 8\nconsole.log(do_algebra(['/', '+', '*'], [10, 5, 3, 4, 5])); // 32\nconsole.log(do_algebra(['*',\
    \ '+', '-'], [10, 5, 3, 4, 5])); // 42\nconsole.log(do_algebra(['*', '+', '-'],\
    \ [10, 5, 3, 4, 5, 6])); // 52\nconsole.log(do_algebra(['//', '*', '+', '-'],\
    \ [10, 5, 3, 4, 5, 6])); // 42\nconsole.log(do_algebra(['+', '-'], [10, 5, 3,\
    \ 4, 5, 6])); // 13\nconsole.log(do_algebra(['//', '+', '-'], [10, 5, 3, 4, 5,\
    \ 6])); // 6\nconsole.log(do_", "  // Write your code here\n  let result = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n \
    \     case \"+\":\n        result += operand[i + 1];\n        break;\n      case\
    \ \"-\":\n        result -= operand[i + 1];\n        break;\n      case \"*\"\
    :\n        result *= operand[i + 1];\n        break;\n      case \"//\":\n   \
    \     result = Math.floor(result / operand[i + 1]);\n        break;\n      case\
    \ \"**\":\n        result = Math.pow(result, operand[i + 1]);\n        break;\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"*\", \"+\", \"-\"], [2, 3, 4, 5]));\n\
    console.log(do_algebra([\"+\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    +\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\n\
    console.log(do_algebra([\"//\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    //\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    //\", \"*\", \"-\"], [2, 3, 4", "    let res = 0;\n    let isDivide = false;\n\
    \    res = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n    \
    \    switch (operator[i]) {\n            case '+':\n                res += operand[i\
    \ + 1];\n                break;\n            case '-':\n                res -=\
    \ operand[i + 1];\n                break;\n            case '*':\n           \
    \     res *= operand[i + 1];\n                break;\n            case '//':\n\
    \                res = Math.floor(res / operand[i + 1]);\n                isDivide\
    \ = true;\n                break;\n            case '**':\n                res\
    \ = Math.pow(res, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    if (isDivide) {\n        return Math.floor(res);\n    }\n    return res;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['//', '+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [2, 3, 4, 5])\
    \ === 9);\nconsole.log(do_algebra(['//', '+', '*', '-'], [2, 3, 4, 6]));\nconsole.log(do_algebra(['//',\
    \ '+', '*', '-'], [2, 3, 4, 6]) === 10);\nconsole.log(do_algebra(['//', '+', '*',\
    \ '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [1, 2,\
    \ 3, 4]) === -3);\nconsole.log(do_algebra(['//', '+', '*', '-'], [11, 2, 3, 4]));\n\
    console.log(do_", "  let result = operand[0];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    let result: number\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        let\
    \ currOperator: string = operator[i];\n        let currOperand: number = operand[i\
    \ + 1];\n        switch (currOperator) {\n            case '+':\n            \
    \    result += currOperand;\n                break;\n            case '-':\n \
    \               result -= currOperand;\n                break;\n            case\
    \ '*':\n                result *= currOperand;\n                break;\n     \
    \       case '//':\n                result = Math.floor(result / currOperand);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ currOperand);\n                break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '**', '//'], [100, 2, 5]));", "  let result = operand[0];\n  for (let i = 0;\
    \ i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result +=\
    \ operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i\
    \ + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n\
    \    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '//', '**'], [1, 2,\
    \ 4, 2]));\nconsole.log(do_algebra(['+', '-'], [2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [4, 2, 3]));\nconsole.log(do_algebra(['+', '-'], [5, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [5, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-'], [5, 3, 2, 4]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['*',\
    \ '//', '**'], [1, 2, 4, 2, 4]));\nconsole.log(do_algebra(['*', '//', '**'], [1,\
    \ 2, 4, 2, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [3, 2, 3, 4, 5]));\n\
    console.log(do_algebra(['*', '//', '**'", "  return eval(`${operand[0]}${operator[0]}${operand[1]}${operator[1]}${operand[2]}${operator[2]}${operand[3]}`);\n\
    }\n", "    if (operator.length !== operand.length - 1) {\n        return -1;\n\
    \    }\n\n    let equation: string = '';\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        equation += (operand[i] + ' ' + operator[i] + ' ');\n    }\n\
    \    equation += operand[operand.length - 1];\n\n    return eval(equation);\n\
    }\n\nexport function runTests(): void {\n    const test1 = ['+', '*', '-'];\n\
    \    const test2 = [2, 3, 4, 5];\n    const test3 = ['+', '*', '-', '+'];\n  \
    \  const test4 = [1, 2, 3, 4, 5];\n    const test5 = ['*', '+', '-'];\n    const\
    \ test6 = [1, 2, 3, 4];\n    const test7 = ['*', '+', '-'];\n    const test8 =\
    \ [1, 2, 3, 4, 5];\n    const test9 = ['+', '*', '+', '-'];\n    const test10\
    \ = [1, 2, 3, 4, 5];\n    const test11 = ['/', '*', '+', '-'];\n    const test12\
    \ = [2, 3, 4, 5, 6];\n    const test13 = ['*', '*', '-', '+'];\n    const test14\
    \ = [1, 2, 3, 4, 5];\n    const test15 = ['*', '+', '-'];\n    const test16 =\
    \ [1, 2, 3, 4];\n    const test17 = ['*', '+', '-'];\n    const test18 = [1, 2,\
    \ 3, 4, 5];\n    const test19 = ['+', '*', '+', '-'];\n    const test20 = [1,\
    \ 2, 3, 4, 5];\n    const test21 = ['/', '*', '+', '-'];\n    const test22 = [2,\
    \ 3, 4, 5, 6];\n    const test23 = ['*', '*', '-', '+'];\n    const test24 = [1,\
    \ 2, 3, 4,", "    let expression = '';\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        expression += operand[i] + operator[i];\n    }\n    expression\
    \ += operand[operand.length - 1];\n    return eval(expression);\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '*'], [1, 2, 3, 4]));", "    let result: number = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n  \
    \          case '+':\n                result += operand[i + 1];\n            \
    \    break;\n            case '-':\n                result -= operand[i + 1];\n\
    \                break;\n            case '*':\n                result *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                result\
    \ = Math.floor(result / operand[i + 1]);\n                break;\n           \
    \ case '**':\n                result = Math.pow(result, operand[i + 1]);\n   \
    \             break;\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') result += operand[i + 1];\n        if (operator[i] === '-') result\
    \ -= operand[i + 1];\n        if (operator[i] === '*') result *= operand[i + 1];\n\
    \        if (operator[i] === '//') result = Math.floor(result / operand[i + 1]);\n\
    \        if (operator[i] === '**') result = Math.pow(result, operand[i + 1]);\n\
    \    }\n    return result;\n}\n", "    // Implement the code here\n    return\
    \ operand[0];\n}\n", "    const exp = operand.reduce((acc, cur, idx) => {\n  \
    \      if (idx === 0) return acc.concat(`${cur}`);\n        else return acc.concat(`${operator[idx\
    \ - 1]}${cur}`);\n    }, '');\n    return eval(exp);\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 6]));\nconsole.log(do_algebra(['*', '+', '-'], [2, 3, 4, 5, 6]));", "   \
    \ for (let i: number = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === \"*\") {\n            operand[i] = operand[i] * operand[i + 1];\n      \
    \      operand.splice(i + 1, 1);\n            operator.splice(i, 1);\n       \
    \     i--;\n        }\n        if (operator[i] === \"//\") {\n            operand[i]\
    \ = Math.floor(operand[i] / operand[i + 1]);\n            operand.splice(i + 1,\
    \ 1);\n            operator.splice(i, 1);\n            i--;\n        }\n     \
    \   if (operator[i] === \"**\") {\n            operand[i] = Math.pow(operand[i],\
    \ operand[i + 1]);\n            operand.splice(i + 1, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i: number = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === \"+\") {\n            operand[i] = operand[i]\
    \ + operand[i + 1];\n            operand.splice(i + 1, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n        if (operator[i] === \"-\") {\n   \
    \         operand[i] = operand[i] - operand[i + 1];\n            operand.splice(i\
    \ + 1, 1);\n            operator.splice(i, 1);\n            i--;\n        }\n\
    \    }\n    return operand[0];\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '+', '-'], [9, 3, 4, 5, 8]));\n\
    console.log(do_algebra(['*', '**', '//', '+', '-'], [2, 3, 4, 5, 8, 6]));", " \
    \   var sum = 0;\n    operand.forEach((e, i) => {\n        if (operator[i] ==\
    \ '+') {\n            sum += e;\n        } else if (operator[i] == '-') {\n  \
    \          sum -= e;\n        } else if (operator[i] == '*') {\n            sum\
    \ *= e;\n        } else if (operator[i] == '//') {\n            sum = Math.floor(sum\
    \ / e);\n        } else if (operator[i] == '**') {\n            sum = Math.pow(sum,\
    \ e);\n        }\n    });\n    return sum;\n}\n\nlet do_algebra2 = (operator:\
    \ string[], operand: number[]): number => {\n    let sum = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n  \
    \          case '+':\n                sum += operand[i + 1];\n               \
    \ break;\n            case '-':\n                sum -= operand[i + 1];\n    \
    \            break;\n            case '*':\n                sum *= operand[i +\
    \ 1];\n                break;\n            case '//':\n                sum = Math.floor(sum\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         sum = Math.pow(sum, operand[i + 1]);\n                break;\n     \
    \   }\n    }\n    return sum;\n}\n", "  let total = 0;\n  let index = 0;\n  for\
    \ (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case\
    \ \"+\":\n        total += operand[index] + operand[index + 1];\n        break;\n\
    \      case \"-\":\n        total += operand[index] - operand[index + 1];\n  \
    \      break;\n      case \"*\":\n        total += operand[index] * operand[index\
    \ + 1];\n        break;\n      case \"//\":\n        total += Math.floor(operand[index]\
    \ / operand[index + 1]);\n        break;\n      case \"**\":\n        total +=\
    \ Math.pow(operand[index], operand[index + 1]);\n        break;\n    }\n    index++;\n\
    \  }\n  return total;\n}\n", "    const operatorMap = {\n        '+': (a: number,\
    \ b: number) => a + b,\n        '-': (a: number, b: number) => a - b,\n      \
    \  '*': (a: number, b: number) => a * b,\n        '//': (a: number, b: number)\
    \ => Math.floor(a / b),\n        '**': (a: number, b: number) => Math.pow(a, b)\n\
    \    }\n    return operator.reduce((acc, cur, i) => operatorMap[cur](acc, operand[i\
    \ + 1]), operand[0]);\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '-', '*'], [10, 5, 6, 7]));\nconsole.log(do_algebra(['//',\
    \ '**', '//'], [8, 4, 2, 3]));", "    let total = operand[0];\n    for (let i\
    \ = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n         \
    \   case '+':\n                total += operand[i + 1];\n                break;\n\
    \            case '-':\n                total -= operand[i + 1];\n           \
    \     break;\n            case '*':\n                total *= operand[i + 1];\n\
    \                break;\n            case '//':\n                total /= operand[i\
    \ + 1];\n                break;\n            case '**':\n                total\
    \ **= operand[i + 1];\n                break;\n        }\n    }\n    return total;\n\
    }\n", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 6]));\n",
  "    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n\
    \        switch (operator[i]) {\n            case '+':\n                result\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result /= operand[i + 1];\n                break;\n\
    \            case '**':\n                result **= operand[i + 1];\n        \
    \        break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); //9\nconsole.log(do_algebra(['*', '//', '+'], [2,\
    \ 3, 4, 5])); //14\nconsole.log(do_algebra(['+', '+', '+'], [2, 3, 4, 5])); //14\n\
    console.log(do_algebra(['*', '*', '*'], [2, 3, 4, 5])); //120\nconsole.log(do_algebra(['+',\
    \ '+', '-'], [2, 3, 4, 5])); //4\nconsole.log(do_algebra(['+', '*', '**'], [2,\
    \ 3, 4, 5])); //63\nconsole.log(do_algebra(['+', '+', '**'], [2, 3, 4, 5])); //29\n\
    console.log(do_algebra(['*', '*', '**'], [2, 3, 4, 5])); //120\nconsole.log(do_algebra(['+',\
    \ '-', '**'], [2, 3, 4, 5])); //-77\nconsole.log(do_algebra(['*', '-', '**'],\
    \ [2, 3, 4, 5])); //63\nconsole.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\
    \ //14\nconsole", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\n", "  let result: number = operand[0];\n  let i: number = 0;\n  while (i <\
    \ operator.length) {\n    switch (operator[i]) {\n      case '+':\n        result\
    \ += operand[i + 1];\n        break;\n      case '-':\n        result -= operand[i\
    \ + 1];\n        break;\n      case '*':\n        result *= operand[i + 1];\n\
    \        break;\n      case '//':\n        result = Math.floor(result / operand[i\
    \ + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n    i++;\n  }\n  return result;\n}\n",
  "    let operators: string[] = ['//', '**', '*', '/', '+', '-'];\n    let result:\
    \ number = operand[0];\n    let count: number = 0;\n    for (let i: number = 0;\
    \ i < operand.length; i++) {\n        if (i != 0) {\n            switch (operator[count])\
    \ {\n                case operators[0]:\n                    result = Math.floor(result\
    \ / operand[i]);\n                    break;\n                case operators[1]:\n\
    \                    result = Math.pow(result, operand[i]);\n                \
    \    break;\n                case operators[2]:\n                    result =\
    \ result * operand[i];\n                    break;\n                case operators[3]:\n\
    \                    result = result / operand[i];\n                    break;\n\
    \                case operators[4]:\n                    result = result + operand[i];\n\
    \                    break;\n                case operators[5]:\n            \
    \        result = result - operand[i];\n                    break;\n         \
    \   }\n            count++;\n        }\n    }\n    return result;\n}\n", "   \
    \ var result = operand[0];\n    for (var i = 0; i < operator.length; i++) {\n\
    \        switch (operator[i]) {\n            case '+':\n                result\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(result / operand[i + 1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "    if(operator.length !== operand.length - 1) throw new Error(\"Operator\
    \ length should be one less than operand length\");\n    if(operator.length ===\
    \ 0) throw new Error(\"Operator length should be at least one\");\n    if(operand.length\
    \ < 2) throw new Error(\"Operand length should be at least two\");\n    let total\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case \"+\":\n                total += operand[i+1];\n           \
    \     break;\n            case \"-\":\n                total -= operand[i+1];\n\
    \                break;\n            case \"*\":\n                total *= operand[i+1];\n\
    \                break;\n            case \"//\":\n                total = Math.floor(total\
    \ / operand[i+1]);\n                break;\n            case \"**\":\n       \
    \         total = Math.pow(total, operand[i+1]);\n                break;\n   \
    \         default:\n                throw new Error(\"Unknown operator in operator\
    \ array\");\n        }\n    }\n    return total;\n}", "    let result: number\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i\
    \ + 1];\n                break;\n            case '-':\n                result\
    \ -= operand[i + 1];\n                break;\n            case '*':\n        \
    \        result *= operand[i + 1];\n                break;\n            case '//':\n\
    \                result = Math.floor(result / operand[i + 1]);\n             \
    \   break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-', '//'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '*', '-',\
    \ '//', '**'], [2, 3, 4, 5, 2, 2]));", "  let sum = operand[0];\n  for (let i\
    \ = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case \"\
    +\":\n        sum += operand[i + 1];\n        break;\n      case \"-\":\n    \
    \    sum -= operand[i + 1];\n        break;\n      case \"*\":\n        sum *=\
    \ operand[i + 1];\n        break;\n      case \"//\":\n        sum = Math.floor(sum\
    \ / operand[i + 1]);\n        break;\n      case \"**\":\n        sum = Math.pow(sum,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return sum;\n}\n", "    // let\
    \ operand2 = operand.slice(0, 1)\n    // let operand1 = operand.slice(1)\n   \
    \ // operand1.map((element, index) => {\n    //     operand2.push(element)\n \
    \   //     if (operator[index] === \"+\") {\n    //         let result = operand2.reduce((a,\
    \ b) => a + b)\n    //         operand2 = [result]\n    //     } else if (operator[index]\
    \ === \"-\") {\n    //         let result = operand2.reduce((a, b) => a - b)\n\
    \    //         operand2 = [result]\n    //     } else if (operator[index] ===\
    \ \"*\") {\n    //         let result = operand2.reduce((a, b) => a * b)\n   \
    \ //         operand2 = [result]\n    //     } else if (operator[index] === \"\
    //\") {\n    //         let result = operand2.reduce((a, b) => Math.floor(a /\
    \ b))\n    //         operand2 = [result]\n    //     } else if (operator[index]\
    \ === \"**\") {\n    //         let result = operand2.reduce((a, b) => Math.pow(a,\
    \ b))\n    //         operand2 = [result]\n    //     }\n    // })\n    // return\
    \ operand2[0]\n    let result = operand[0]\n    operator.map((element, index)\
    \ => {\n        if (element === \"+\") {\n            result += operand[index\
    \ + 1]\n        } else if (element === \"-\") {\n            result -= operand[index\
    \ + 1]\n        } else if (element === \"*\") {\n            result *= operand[index\
    \ + 1]\n        } else if (element === \"//\") {\n            result = Math.floor(result\
    \ / operand[index + 1])\n        } else if (element === \"**\") {\n          \
    \  result = Math.pow(result, operand[index + 1])\n        }\n    })\n    return\
    \ result\n}\n\nconsole.log(do_algebra(['+', '", "  const str: string = '';\n \
    \ for (let i = 0; i < operator.length; i++) {\n    str += operand[i] + operator[i];\n\
    \  }\n  str += operand[operand.length - 1];\n  return eval(str);\n}\n", "    //\
    \ your code here\n    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result /= operand[i + 1];\n         \
    \       break;\n            case '**':\n                result **= operand[i +\
    \ 1];\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '//'], [2, 3, 4, 5]));", "  // Write your code here\n  return 2\n}\n",
  "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n   \
    \ switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i + 1]);\n      \
    \  break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [3, 2, 5, 4]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 1, 4]));\nconsole.log(do_algebra(['//',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '-'], [2, 3,\
    \ 1, 4]));\nconsole.log(do_algebra(['//', '*', '-'], [3, 2, 1, 4]));\nconsole.log(do_algebra(['**',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '*', '-'], [2, 3,\
    \ 1, 4]));\nconsole.log(do_algebra(['**', '*', '-'], [3, 2, 1, 4]));", "    let\
    \ result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n    \
    \    switch (operator[i]) {\n            case '+':\n                result +=\
    \ operand[i + 1];\n                break;\n            case '-':\n           \
    \     result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(result / operand[i + 1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '+', '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '-'], [1, 1, 1, 1, 1]));\nconsole.log(do_algebra(['+',\
    \ '-'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [1, 2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '**'], [1, 2, 3, 4, 5]));\n\
    console.log(do_algebra(['+', '-', '*', '**', '//'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '*', '**', '//'], [1, 2, 3, 4, 5, 6]));", "    let result = operand[0];\n\
    \    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i + 1];\n      \
    \          break;\n            case '-':\n                result -= operand[i\
    \ + 1];\n                break;\n            case '*':\n                result\
    \ *= operand[i + 1];\n                break;\n            case '//':\n       \
    \         result = Math.floor(result / operand[i + 1]);\n                break;\n\
    \            case '**':\n                result = Math.pow(result, operand[i +\
    \ 1]);\n                break;\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) === 9);", "  let result: number = operand[0];\n  for (let i = 0; i\
    \ < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i\
    \ + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n\
    \    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    }\
    \ else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '//'], [5, 2, 2, 5]));\nconsole.log(do_algebra(['-', '*', '//'], [5, 2,\
    \ 2, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [10, 2, 2, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//', '**'], [10, 2, 2, 5, 2]));\nconsole.log(do_algebra(['+', '-',\
    \ '*', '//', '**'], [10, 2, 2, 5, 3]));", "    let result = 0;\n    let op: string[]\
    \ = ['+', '-', '*', '/', '**'];\n    let i = 0;\n    while (i < operator.length)\
    \ {\n        switch (operator[i]) {\n            case op[0]:\n               \
    \ result = operand[i] + operand[i + 1];\n                operand[i + 1] = result;\n\
    \                break;\n            case op[1]:\n                result = operand[i]\
    \ - operand[i + 1];\n                operand[i + 1] = result;\n              \
    \  break;\n            case op[2]:\n                result = operand[i] * operand[i\
    \ + 1];\n                operand[i + 1] = result;\n                break;\n  \
    \          case op[3]:\n                result = operand[i] / operand[i + 1];\n\
    \                operand[i + 1] = result;\n                break;\n          \
    \  case op[4]:\n                result = operand[i] ** operand[i + 1];\n     \
    \           operand[i + 1] = result;\n                break;\n        }\n    \
    \    i++;\n    }\n    return result;\n}\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5])); // => 9\nconsole.log(do_algebra(['+', '+', '-'], [2, 3, 4, 5]));\
    \ // => 4\nconsole.log(do_algebra(['+', '+', '-'], [2, 3, 4, -5])); // => 8\n\
    console.log(do_algebra(['+', '*', '-', '*'], [2, 3, 4, 5, 6])); // => 4\nconsole.log(do_algebra(['*',\
    \ '-', '*'], [3, 4, 5, 6])); // => -54\nconsole.log(do_algebra(['+', '-', '*',\
    \ '/', '**'], [2, 3, 4, 5, 6])); // => 729\nconsole.log(do_algebra(['*', '*',\
    \ '*', '**'], [2, 3,", "    let result = operand[0];\n    for (let i = 0; i <\
    \ operator.length; i++) {\n        const currentOperator = operator[i];\n    \
    \    const currentNumber = operand[i + 1];\n        switch (currentOperator) {\n\
    \            case '+':\n                result += currentNumber;\n           \
    \     break;\n            case '-':\n                result -= currentNumber;\n\
    \                break;\n            case '*':\n                result *= currentNumber;\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / currentNumber);\n                break;\n            case '**':\n        \
    \        result = Math.pow(result, currentNumber);\n                break;\n \
    \       }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "  return operand.reduce((acc,\
    \ val, i) => acc[operator[i]](val), operand.shift());\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])) // 9", "    let result = operand[0];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+':\n                result += operand[i + 1];\n                break;\n\
    \            case '-':\n                result -= operand[i + 1];\n          \
    \      break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result /= operand[i\
    \ + 1];\n                break;\n            case '**':\n                result\
    \ **= operand[i + 1];\n                break;\n        }\n    }\n    return result;\n\
    }\n", "    let res:number = operand[0];\n    for(let i:number = 0; i < operator.length;\
    \ i++){\n        if(operator[i] === '+'){\n            res += operand[i+1];\n\
    \        }\n        if(operator[i] === '-'){\n            res -= operand[i+1];\n\
    \        }\n        if(operator[i] === '*'){\n            res *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            res = Math.floor(res\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ res = Math.pow(res, operand[i+1]);\n        }\n    }\n    return res;\n}\n",
  "  let newStr = '';\n  for (let i = 0; i < operator.length; i++) {\n    newStr +=\
    \ operand[i] + operator[i];\n  }\n  newStr += operand[operand.length - 1];\n \
    \ return eval(newStr);\n}\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 4, 6, 8]));\nconsole.log(do_algebra(['+',\
    \ '-'], [3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 10, 3, 6]));\n",
  "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n   \
    \ switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result /= operand[i + 1];\n        break;\n      case '**':\n\
    \        result **= operand[i + 1];\n        break;\n    }\n  }\n  return result;\n\
    }\nconsole.log(do_algebra(['+', '-', '*'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\n", "    const operatorMap = {\n        '+': function(a:\
    \ number, b: number): number { return a + b },\n        '-': function(a: number,\
    \ b: number): number { return a - b },\n        '*': function(a: number, b: number):\
    \ number { return a * b },\n        '//': function(a: number, b: number): number\
    \ { return Math.floor(a / b) },\n        '**': function(a: number, b: number):\
    \ number { return Math.pow(a, b) }\n    }\n    let result = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        const operatorKey = operator[i];\n\
    \        const operatorValue = operatorMap[operatorKey];\n        result = operatorValue(result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\n\nexport default {\n    do_algebra\n\
    }", "    let result: number = operand[0];\n    let len: number = operator.length;\n\
    \    for (let i: number = 0; i < len; i++) {\n        switch (operator[i]) {\n\
    \            case '+':\n                result += operand[i + 1];\n          \
    \      break;\n            case '-':\n                result -= operand[i + 1];\n\
    \                break;\n            case '*':\n                result *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                result\
    \ = Math.floor(result / operand[i + 1]);\n                break;\n           \
    \ case '**':\n                result = Math.pow(result, operand[i + 1]);\n   \
    \             break;\n        }\n    }\n    return result;\n}\n", "    const operation\
    \ = [\"+\", \"-\", \"*\", \"//\", \"**\"];\n    let result = 0;\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        if (operation.indexOf(operator[i])\
    \ === 0) {\n            result += operand[i] + operand[i + 1];\n        } else\
    \ if (operation.indexOf(operator[i]) === 1) {\n            result += operand[i]\
    \ - operand[i + 1];\n        } else if (operation.indexOf(operator[i]) === 2)\
    \ {\n            result += operand[i] * operand[i + 1];\n        } else if (operation.indexOf(operator[i])\
    \ === 3) {\n            result += operand[i] / operand[i + 1];\n        } else\
    \ if (operation.indexOf(operator[i]) === 4) {\n            result += operand[i]\
    \ ** operand[i + 1];\n        }\n    }\n    return result;\n}\n", "    let formula:\
    \ string = \"\";\n    for (let i = 0; i < operator.length; i++) {\n        formula\
    \ += operand[i] + operator[i];\n    }\n    formula += operand[operand.length -\
    \ 1];\n    return eval(formula);\n}\n\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '+', '+', '+'], [1, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '+', '+', '+'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '-', '+'], [2, 3, 4, 5]));", "  // your code here\n  return 0;\n}\n", "    let\
    \ result = 0;\n    for (let i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i\
    \ + 1];\n                break;\n            case '-':\n                result\
    \ -= operand[i + 1];\n                break;\n            case '*':\n        \
    \        result *= operand[i + 1];\n                break;\n            case '//':\n\
    \                result = Math.floor(result / operand[i + 1]);\n             \
    \   break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 10]));", "  // Write your code here\n  let expression = \"\";\n  for (let\
    \ i = 0; i < operator.length; i++) {\n    expression += operand[i] + operator[i];\n\
    \  }\n  expression += operand[operand.length - 1];\n  return eval(expression);\n\
    }\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra([\"\
    -\"], [10, 5])); // 5\nconsole.log(do_algebra([\"+\", \"+\", \"+\", \"+\"], [10,\
    \ 5, 7, 1])); // 23\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [10, 5, 7,\
    \ 1])); // -38\nconsole.log(do_algebra([\"//\", \"*\", \"-\", \"-\"], [10, 5,\
    \ 7, 1])); // -36\nconsole.log(do_algebra([\"//\", \"*\", \"-\", \"-\"], [10,\
    \ 5, 7, 1, 2])); // -36\nconsole.log(do_algebra([\"+\", \"-\"], [0, 10, 5]));\
    \ // 5\nconsole.log(do_algebra([\"+\", \"-\"], [0, 10, 5, 3])); // 8\nconsole.log(do_algebra([\"\
    +\", \"-\"], [0, 10, 5, 3, 1])); // 8\nconsole.log(do_algebra([\"*\", \"//\",\
    \ \"-\"], [1, 2, 3, 4, 5])); // -16\nconsole.log(do_algebra([\"*\", \"//\", \"\
    -\"], [1, 2, 3, 4, 5, 6])); // -16\nconsole.log(do_algebra([\"*\", \"//\", \"\
    -\"], [1, 2, 3, 4, 5, 6, 7])); // -16\nconsole.log(do_algebra([\"*\", \"*\", \"\
    //\", \"-\"], [1, 2, 3, 4, 5, 6, 7])); // -36\nconsole.log(do_algebra([\"*\",\
    \ \"*\", \"//\", \"-\"],", "  const op: { [key: string]: (a: number, b: number)\
    \ => number } = {\n    '+': (a, b) => a + b,\n    '-': (a, b) => a - b,\n    '*':\
    \ (a, b) => a * b,\n    '//': (a, b) => Math.floor(a / b),\n    '**': (a, b) =>\
    \ a ** b,\n  };\n  let result = operand[0];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    result = op[operator[i]](result, operand[i + 1]);\n  }\n  return\
    \ result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'],\
    \ [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4,\
    \ 5, 6, 2]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2,\
    \ 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2, 6, 2]));\n\
    console.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 2, 6, 2, 2]));\nconsole.log(do_algebra(['+',\
    \ '*', '//', '**'], [2, 3, 4, 5, 2, 6, 2, 2, 2]));\nconsole.log(do_algebra(['+',\
    \ '*', '//', '**'], [2, 3, 4, 5, 2, 6, 2, 2, 2, 2]));\nconsole.log(do_", "  let\
    \ result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if\
    \ (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i]\
    \ === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] ===\
    \ '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//')\
    \ {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i]\
    \ === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n\
    \  return result;\n}\n", "  // your code here\n}\n", "    // Your code here\n\
    \    let equation = \"\";\n    for (let i = 0; i < operator.length; i++) {\n \
    \       equation += operand[i] + operator[i];\n    }\n    equation += operand[operand.length\
    \ - 1];\n    return eval(equation);\n}\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));", "  let evaluator = operand[0];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    if (operator[i] === \"+\") {\n      evaluator += operand[i + 1];\n\
    \    } else if (operator[i] === \"-\") {\n      evaluator -= operand[i + 1];\n\
    \    } else if (operator[i] === \"*\") {\n      evaluator *= operand[i + 1];\n\
    \    } else if (operator[i] === \"//\") {\n      evaluator = Math.floor(evaluator\
    \ / operand[i + 1]);\n    } else if (operator[i] === \"**\") {\n      evaluator\
    \ = Math.pow(evaluator, operand[i + 1]);\n    }\n  }\n  return evaluator;\n}\n\
    \nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    +\", \"-\"], [2, 3, 4]));\nconsole.log(do_algebra([\"**\", \"-\"], [2, 3, 4]));\n\
    console.log(do_algebra([\"**\", \"*\"], [2, 3, 4]));\nconsole.log(do_algebra([\"\
    //\", \"*\"], [2, 3, 4]));\nconsole.log(do_algebra([\"+\", \"+\"], [2, 3, 4]));\n\
    console.log(do_algebra([\"-\"], [2, 3, 4]));\nconsole.log(do_algebra([\"-\"],\
    \ [3, 2, 1]));\nconsole.log(do_algebra([\"-\"], [3, 2, 1, 2]));\nconsole.log(do_algebra([\"\
    +\", \"*\", \"+\"], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra([\"**\", \"+\"\
    , \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"**\", \"-\"], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra([\"//", "  let result = [];\n  for (let\
    \ i = 0; i < operator.length; i++) {\n    if (operator[i] === \"*\") {\n     \
    \ result.push(operand[i] * operand[i + 1]);\n      operand.splice(i, 2, result[i]);\n\
    \      operator.splice(i, 1);\n      i--;\n    } else if (operator[i] === \"//\"\
    ) {\n      result.push(Math.floor(operand[i] / operand[i + 1]));\n      operand.splice(i,\
    \ 2, result[i]);\n      operator.splice(i, 1);\n      i--;\n    } else if (operator[i]\
    \ === \"**\") {\n      result.push(Math.pow(operand[i], operand[i + 1]));\n  \
    \    operand.splice(i, 2, result[i]);\n      operator.splice(i, 1);\n      i--;\n\
    \    }\n  }\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i]\
    \ === \"+\") {\n      result.push(operand[i] + operand[i + 1]);\n      operand.splice(i,\
    \ 2, result[i]);\n      operator.splice(i, 1);\n      i--;\n    } else if (operator[i]\
    \ === \"-\") {\n      result.push(operand[i] - operand[i + 1]);\n      operand.splice(i,\
    \ 2, result[i]);\n      operator.splice(i, 1);\n      i--;\n    }\n  }\n  return\
    \ result[result.length - 1];\n}\n", "  let result = operand[0];\n  for (let i\
    \ = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result\
    \ += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i\
    \ + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n\
    \    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "  let calculation: string\
    \ = operand[0].toString();\n  for (let i = 0; i < operator.length; i++) {\n  \
    \  calculation += ` ${operator[i]} ${operand[i + 1]}`;\n  }\n  return eval(calculation);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "    let result\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') {\n            result += operand[i + 1];\n        } else if (operator[i]\
    \ === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i]\
    \ === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            result = Math.floor(result / operand[i + 1]);\n   \
    \     } else if (operator[i] === '**') {\n            result = Math.pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "    let sum =\
    \ operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') {\n            sum += operand[i + 1];\n        } else if (operator[i]\
    \ === '-') {\n            sum -= operand[i + 1];\n        } else if (operator[i]\
    \ === '*') {\n            sum *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            sum = Math.floor(sum / operand[i + 1]);\n        }\
    \ else if (operator[i] === '**') {\n            sum = Math.pow(sum, operand[i\
    \ + 1]);\n        }\n    }\n    return sum;\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '//'], [1, 4, 2, 5]));\n", "    let result = operand[0];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+':\n                result += operand[i + 1];\n                break;\n\
    \            case '-':\n                result -= operand[i + 1];\n          \
    \      break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         result = Math.pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '-',\
    \ '*', '//', '**'], [2, 3, 4, 5, 6, 7]));", "    return operand.reduce((acc, curr,\
    \ i) => {\n        if (operator[i] === '+') {\n            return acc + curr;\n\
    \        } else if (operator[i] === '-') {\n            return acc - curr;\n \
    \       } else if (operator[i] === '*') {\n            return acc * curr;\n  \
    \      } else if (operator[i] === '//') {\n            return Math.floor(acc /\
    \ curr);\n        } else if (operator[i] === '**') {\n            return Math.pow(acc,\
    \ curr);\n        }\n    });\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]));", "    return 0;\n}\n\n", "    let result = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n  \
    \          case '+':\n                result += operand[i + 1];\n            \
    \    break;\n            case '-':\n                result -= operand[i + 1];\n\
    \                break;\n            case '*':\n                result *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                result\
    \ = Math.floor(result / operand[i + 1]);\n                break;\n           \
    \ case '**':\n                result = Math.pow(result, operand[i + 1]);\n   \
    \             break;\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [2,\
    \ 2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [2, 2, 3, 4, 5]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "    let result = operand[0];\n\
    \    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i + 1];\n      \
    \          break;\n            case '-':\n                result -= operand[i\
    \ + 1];\n                break;\n            case '*':\n                result\
    \ *= operand[i + 1];\n                break;\n            case '//':\n       \
    \         result = Math.floor(result / operand[i + 1]);\n                break;\n\
    \            case '**':\n                result = Math.pow(result, operand[i +\
    \ 1]);\n                break;\n        }\n    }\n    return result;\n}\n", " \
    \   return eval(operand.reduce((acc, cur, i) => {\n        if (i === 0) {\n  \
    \          return acc + cur;\n        }\n        return acc + operator[i - 1]\
    \ + cur;\n    }, ''));\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '-'], [8, 6, 7, 3]));\nconsole.log(do_algebra(['//',\
    \ '*', '-', '+'], [12, 34, 25, 6, 89, 9]));", "    let result = operand[0];\n\
    \    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i + 1];\n      \
    \          break;\n            case '-':\n                result -= operand[i\
    \ + 1];\n                break;\n            case '*':\n                result\
    \ *= operand[i + 1];\n                break;\n            case '//':\n       \
    \         result = Math.floor(result / operand[i + 1]);\n                break;\n\
    \            case '**':\n                result = Math.pow(result, operand[i +\
    \ 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [1, 2, 3,\
    \ 4]));\nconsole.log(do_algebra(['//', '*', '+'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '+',\
    \ '**'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['//', '*', '+', '-'], [4,\
    \ 5, 6, 7, 8]));", "    let result: number = operand[0];\n    for (let i = 0;\
    \ i < operator.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i + 1];\n                break;\n  \
    \          case '-':\n                result -= operand[i + 1];\n            \
    \    break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         result = Math.pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [5, 3, 4, 5]));\nconsole.log(do_algebra(['**',\
    \ '+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '*', '//', '+',\
    \ '*', '-'], [2, 3, 4, 5, 5, 3, 2]));\nconsole.log(do_algebra(['**', '*', '//',\
    \ '+', '*', '-'], [2, 3, 4, 5, 5, 3, 2]));\n", "    return 0;\n}\n", "    let\
    \ operands = new Array<number>();\n    let operators = new Array<string>();\n\
    \    let result = 0;\n    let operandIndex = 0;\n    let operatorIndex = 0;\n\
    \    if (operator.length !== operand.length - 1) {\n        return null;\n   \
    \ }\n    for (let i = 0; i < operand.length; i++) {\n        if (i === 0) {\n\
    \            operands.push(operand[i]);\n        } else {\n            operators.push(operator[i\
    \ - 1]);\n            operands.push(operand[i]);\n        }\n    }\n    while\
    \ (operands.length > 1) {\n        if (operators[operatorIndex] === '+') {\n \
    \           result = operands[operandIndex] + operands[operandIndex + 1];\n  \
    \          operands.splice(operandIndex, 2, result);\n            operators.splice(operatorIndex,\
    \ 1);\n        } else if (operators[operatorIndex] === '-') {\n            result\
    \ = operands[operandIndex] - operands[operandIndex + 1];\n            operands.splice(operandIndex,\
    \ 2, result);\n            operators.splice(operatorIndex, 1);\n        } else\
    \ if (operators[operatorIndex] === '*') {\n            result = operands[operandIndex]\
    \ * operands[operandIndex + 1];\n            operands.splice(operandIndex, 2,\
    \ result);\n            operators.splice(operatorIndex, 1);\n        } else if\
    \ (operators[operatorIndex] === '//') {\n            result = operands[operandIndex]\
    \ / operands[operandIndex + 1];\n            operands.splice(operandIndex, 2,\
    \ result);\n            operators.splice(operatorIndex, 1);\n        } else if\
    \ (operators[operatorIndex] === '**') {\n            result = operands[operandIndex]\
    \ ** operands[operandIndex + 1];\n            operands.splice(operandIndex, 2,\
    \ result);\n            operators.splice(operatorIndex, 1);\n        }\n    }\n\
    \    return operands[0];\n}\n", "    let i = 0;\n    let result = operand[0];\n\
    \    while (i < operator.length) {\n        if (operator[i] === '+') {\n     \
    \       result += operand[i + 1];\n        } else if (operator[i] === '-') {\n\
    \            result -= operand[i + 1];\n        } else if (operator[i] === '*')\
    \ {\n            result *= operand[i + 1];\n        } else if (operator[i] ===\
    \ '//') {\n            result = Math.floor(result / operand[i + 1]);\n       \
    \ } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i\
    \ + 1]);\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '//'], [5, 5,\
    \ 2]));\nconsole.log(do_algebra(['*', '//', '+'], [2, 3, 2, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [10, 5, 2, 3]));\nconsole.log(do_algebra(['*', '+', '*'], [2, 3,\
    \ 5, 2]));\nconsole.log(do_algebra(['//', '+', '*'], [4, 10, 2, 2]));\nconsole.log(do_algebra(['**',\
    \ '//', '*'], [2, 3, 2, 3]));\nconsole.log(do_algebra(['**', '-', '//'], [4, 2,\
    \ 8, 4]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 5, 2, 3]));\nconsole.log(do_algebra(['*',\
    \ '+', '*'], [2, 3, 5, 2]));\nconsole.log(do_algebra(['//', '+', '*'], [4, 10,\
    \ 2, 2])", "    let expression = ``;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        expression += operand[i] + ' ' + operator[i] + ' ';\n    }\n\
    \    expression += operand[operand.length - 1];\n    return eval(expression);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '+', '*', '-'], [4, 2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*',\
    \ '-'], [4, 2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [4,\
    \ 2, 3, 4, 5]));", "    let c = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == '+') {\n            c += operand[i + 1];\n\
    \        }\n        if (operator[i] == '-') {\n            c -= operand[i + 1];\n\
    \        }\n        if (operator[i] == '*') {\n            c *= operand[i + 1];\n\
    \        }\n        if (operator[i] == '//') {\n            c = Math.floor(c /\
    \ operand[i + 1]);\n        }\n        if (operator[i] == '**') {\n          \
    \  c = Math.pow(c, operand[i + 1]);\n        }\n    }\n    return c;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['-', '//', '+'], [3, 4,\
    \ 5, 6]));\nconsole.log(do_algebra(['*', '//', '+'], [5, 4, 3, 2]));\nconsole.log(do_algebra(['**',\
    \ '+', '//'], [2, 3, 4, 5]));", "    // your code here\n    return -1;\n}\n\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra(['*',\
    \ '*', '*'], [2, 3, 4, 5])); // 120\nconsole.log(do_algebra(['+', '+', '+'], [2,\
    \ 3, 4, 5])); // 14\nconsole.log(do_algebra(['//', '//', '//'], [2, 3, 4, 5]));\
    \ // 1\nconsole.log(do_algebra(['**', '**', '**'], [2, 3, 4, 5])); // 7776\nconsole.log(do_algebra(['-',\
    \ '*', '+'], [2, 3, 4, 5])); // -19\nconsole.log(do_algebra(['-', '-', '-'], [2,\
    \ 3, 4, 5])); // -4\nconsole.log(do_algebra(['+', '+', '+'], [2, 3, 4, 5, 6]));\
    \ // 20\nconsole.log(do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6])); // 720\nconsole.log(do_algebra(['//',\
    \ '//', '//'], [2, 3, 4, 5, 6])); // 1\nconsole.log(do_algebra(['**', '**', '**'],\
    \ [2, 3, 4, 5, 6])); // 777554", "    const ops = {\n        '+': (a, b) => a\
    \ + b,\n        '-': (a, b) => a - b,\n        '*': (a, b) => a * b,\n       \
    \ '//': (a, b) => a / b,\n        '**': (a, b) => a ** b\n    }\n    const reduce\
    \ = (operator: string, a: number, b: number) => {\n        return ops[operator](a,\
    \ b);\n    }\n    if (operator.length !== operand.length - 1) {\n        throw\
    \ new Error('Length of operator array is not equal to length of operand array\
    \ minus one.');\n    }\n    if (operator.length < 1) {\n        throw new Error('Operator\
    \ array has less than one operator.');\n    }\n    if (operand.length < 2) {\n\
    \        throw new Error('Operand array has less than two operands.');\n    }\n\
    \    return operator.reduce((a, b, i) => {\n        return reduce(b, a, operand[i\
    \ + 1]);\n    }, operand[0]);\n}\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['//',\
    \ '**'], [2, 3, 4]));\nconsole.log(do_algebra(['**', '**'], [2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, -3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, -3,\
    \ 4, -5]));\nconsole.log(do_algebra(['//', '//'], [2, 3, 4]));\nconsole.log(do_algebra(['//',\
    \ '//'], [2, 3, 0]));\nconsole.log(do_algebra(['//', '//'], [2, 3, -1]));\n",
  "  let result = 0;\n  let lastOperator = operator[0];\n  let lastOperand = operand[0];\n\
    \  for (let i = 1; i < operand.length; i++) {\n    if (operator[i - 1] === \"\
    +\") {\n      lastOperand += operand[i];\n    } else if (operator[i - 1] === \"\
    -\") {\n      lastOperand -= operand[i];\n    } else if (operator[i - 1] === \"\
    *\") {\n      lastOperand *= operand[i];\n    } else if (operator[i - 1] === \"\
    //\") {\n      lastOperand = Math.floor(lastOperand / operand[i]);\n    } else\
    \ if (operator[i - 1] === \"**\") {\n      lastOperand = Math.pow(lastOperand,\
    \ operand[i]);\n    }\n  }\n  return lastOperand;\n}\n\nconsole.log(do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"//\", \"+\", \"\
    -\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"-\"], [6, 2, 3, 5]));\n\
    console.log(do_algebra([\"+\", \"*\", \"-\"], [6, 2, 3, 5]));\nconsole.log(do_algebra([\"\
    **\", \"*\", \"-\"], [4, 3, 2, 1]));\nconsole.log(do_algebra([\"**\", \"*\", \"\
    -\"], [4, 3, 2, -1]));\nconsole.log(do_algebra([\"**\", \"*\", \"-\"], [4, 3,\
    \ 2, 0]));\nconsole.log(do_algebra([\"**\", \"*\", \"-\"], [3, 3, 2, 0]));\nconsole.log(do_algebra([\"\
    +\", \"-\"], [5, 3, 2, 1]));\nconsole.log(do_algebra([\"*\", \"//\"], [5, 4, 3,\
    \ 2, 1]));\nconsole.log(do_algebra(", "    let result = operand[0];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n   \
    \         result += operand[i + 1];\n        } else if (operator[i] === '-') {\n\
    \            result -= operand[i + 1];\n        } else if (operator[i] === '*')\
    \ {\n            result *= operand[i + 1];\n        } else if (operator[i] ===\
    \ '//') {\n            result = Math.floor(result / operand[i + 1]);\n       \
    \ } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3,\
    \ 4, 5]));", "    let arr = [];\n    for (let i = 0; i < operator.length; i++)\
    \ {\n        if (operator[i] === \"**\") {\n            let x = operand[i];\n\
    \            let y = operand[i + 1];\n            operand[i + 1] = x ** y;\n \
    \       }\n        else {\n            arr.push(operator[i]);\n            arr.push(operand[i\
    \ + 1]);\n        }\n    }\n    while (arr.length > 1) {\n        let result =\
    \ 0;\n        if (arr.includes(\"//\")) {\n            result = arr[0] // arr[2];\n\
    \            arr.splice(0, 3);\n            arr.unshift(result);\n        }\n\
    \        else if (arr.includes(\"*\")) {\n            result = arr[0] * arr[2];\n\
    \            arr.splice(0, 3);\n            arr.unshift(result);\n        }\n\
    \        else if (arr.includes(\"-\")) {\n            result = arr[0] - arr[2];\n\
    \            arr.splice(0, 3);\n            arr.unshift(result);\n        }\n\
    \        else if (arr.includes(\"+\")) {\n            result = arr[0] + arr[2];\n\
    \            arr.splice(0, 3);\n            arr.unshift(result);\n        }\n\
    \    }\n    return arr[0];\n}\n\nconsole.log(do_algebra(['+', '+', '*', '+', '*'],\
    \ [4, 3, 4, 5, 6]));", "  let result = operand[0];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    let result =\
    \ operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') {\n            result += operand[i + 1];\n        } else if (operator[i]\
    \ === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i]\
    \ === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            result = Math.floor(result / operand[i + 1]);\n   \
    \     } else if (operator[i] === '**') {\n            result = Math.pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 6]));\n", "  let result: number = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n\
    \      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n    \
    \  result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result\
    \ *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result\
    \ / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "    // Write your code\
    \ here\n    // Good luck :)\n    let res = operand[0];\n    for (let i = 0; i\
    \ < operator.length; i++) {\n        if (operator[i] === '+') {\n            res\
    \ += operand[i + 1];\n        } else if (operator[i] === '-') {\n            res\
    \ -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            res\
    \ *= operand[i + 1];\n        } else if (operator[i] === '//') {\n           \
    \ res = Math.floor(res / operand[i + 1]);\n        } else if (operator[i] ===\
    \ '**') {\n            res = Math.pow(res, operand[i + 1]);\n        }\n    }\n\
    \    return res;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\
    \ // 9\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 10])); // 19\nconsole.log(do_algebra(['//',\
    \ '*', '**'], [2, 3, 4, 5])); // 10\nconsole.log(do_algebra(['+', '-'], [2, 3,\
    \ 4, 5])); // 8\nconsole.log(do_algebra(['+', '-'], [2, 3, 4, 5, 10])); // 12\n\
    console.log(do_algebra(['//', '**'], [2, 3, 4, 5])); // 5\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 10, 6])); // 29\nconsole.log(do_algebra(['//', '*',\
    \ '**'], [2, 3, 4, 5, 10])); // 10\nconsole.log(do_algebra(['+', '-'], [2, 3,\
    \ 4, 5, 10, 6])); // 13\nconsole.log(do_algebra(['//', '**'], [2, 3, 4, 5, 10]));\
    \ // 5", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result = Math.floor(result / operand[i\
    \ + 1]);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, operand[i + 1]);\n                break;\n        }\n   \
    \ }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '//'], [3, 2,\
    \ 6, 2]));\nconsole.log(do_algebra(['-', '+', '*'], [2, 5, 2, 4]));\nconsole.log(do_algebra(['+',\
    \ '//', '-'], [10, 2, 3, 3]));\nconsole.log(do_algebra(['+', '-', '*', '//'],\
    \ [12, 2, 5, 2, 1]));\nconsole.log(do_algebra(['-', '//', '*', '**'], [5, 2, 1,\
    \ 2, 3]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 5, 2, 4, 2,\
    \ 5]));", "  let res = \"\";\n  for (let i = 0; i < operator.length; i++) {\n\
    \    res += operator[i] + operand[i + 1] + operand[i];\n  }\n  return eval(res);\n\
    }\n\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\n", "    let\
    \ oper = operand.slice();\n    operator.forEach(e => {\n        switch (e) {\n\
    \            case '+':\n                oper.splice(1, 1, oper[0] + oper[1]);\n\
    \                break;\n            case '-':\n                oper.splice(1,\
    \ 1, oper[0] - oper[1]);\n                break;\n            case '*':\n    \
    \            oper.splice(1, 1, oper[0] * oper[1]);\n                break;\n \
    \           case '//':\n                oper.splice(1, 1, Math.floor(oper[0] /\
    \ oper[1]));\n                break;\n            case '**':\n               \
    \ oper.splice(1, 1, Math.pow(oper[0], oper[1]));\n                break;\n   \
    \     }\n    });\n    return oper[0];\n}\n\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '-', '//'],\
    \ [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['//', '*', '-', '+'], [2, 3, 4,\
    \ 5, 6]));\nconsole.log(do_algebra(['+', '*', '-', '//'], [10, 6, 3, 1]));\nconsole.log(do_algebra(['//',\
    \ '+', '*', '-'], [3, 4, 6, 5]));\nconsole.log(do_algebra(['+', '*', '-', '//'],\
    \ [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['//', '*',", "    let stack = [];\n\
    \    let currentOperator;\n    let operand1;\n    let operand2;\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+':\n                operand1 = parseInt(stack.pop());\n         \
    \       operand2 = parseInt(stack.pop());\n                currentOperator = (operand1\
    \ + operand2).toString();\n                stack.push(currentOperator);\n    \
    \            break;\n            case '-':\n                operand1 = parseInt(stack.pop());\n\
    \                operand2 = parseInt(stack.pop());\n                currentOperator\
    \ = (operand2 - operand1).toString();\n                stack.push(currentOperator);\n\
    \                break;\n            case '*':\n                operand1 = parseInt(stack.pop());\n\
    \                operand2 = parseInt(stack.pop());\n                currentOperator\
    \ = (operand1 * operand2).toString();\n                stack.push(currentOperator);\n\
    \                break;\n            case '//':\n                operand1 = parseInt(stack.pop());\n\
    \                operand2 = parseInt(stack.pop());\n                currentOperator\
    \ = (operand2 / operand1).toString();\n                stack.push(currentOperator);\n\
    \                break;\n            case '**':\n                operand1 = parseInt(stack.pop());\n\
    \                operand2 = parseInt(stack.pop());\n                currentOperator\
    \ = (operand2 ** operand1).toString();\n                stack.push(currentOperator);\n\
    \                break;\n        }\n    }\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        stack.push(operand[i].toString());\n    }\n    return parseInt(stack.pop());\n\
    }\n\nconsole.log(do_algebra(['*', '*', '-', '+'], [6, 2, 4, 5, 8]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '+', '*',", "    const\
    \ operation = ['+', '-', '*', '//', '**'];\n    let result = operand[0];\n   \
    \ for (let i = 0; i < operator.length; i++) {\n        if (operation.indexOf(operator[i])\
    \ > -1) {\n            switch (operator[i]) {\n                case '+':\n   \
    \                 result += operand[i + 1];\n                    break;\n    \
    \            case '-':\n                    result -= operand[i + 1];\n      \
    \              break;\n                case '*':\n                    result *=\
    \ operand[i + 1];\n                    break;\n                case '//':\n  \
    \                  result = Math.floor(result / operand[i + 1]);\n           \
    \         break;\n                case '**':\n                    result = Math.pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \ }\n    return result;\n}", "  if (operator.length === 0) {\n    return 0;\n\
    \  }\n\n  const reducer = (accumulator: number, currentValue: number, currentIndex:\
    \ number) => {\n    switch (operator[currentIndex - 1]) {\n      case '+':\n \
    \       return accumulator + currentValue;\n      case '-':\n        return accumulator\
    \ - currentValue;\n      case '*':\n        return accumulator * currentValue;\n\
    \      case '//':\n        return Math.floor(accumulator / currentValue);\n  \
    \    case '**':\n        return Math.pow(accumulator, currentValue);\n      default:\n\
    \        return accumulator;\n    }\n  };\n\n  return operand.reduce(reducer);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra(['//',\
    \ '**'], [24, 10, 2])); // 10\nconsole.log(do_algebra(['-', '-', '*'], [5, 10,\
    \ 3, 2])); // -40\nconsole.log(do_algebra(['-', '+', '*'], [5, 10, 3, 2])); //\
    \ -5\nconsole.log(do_algebra(['**', '//'], [2, 3, 2])); // 1\nconsole.log(do_algebra(['//',\
    \ '**'], [12, 3, 2])); // 2\nconsole.log(do_algebra(['+', '+', '+', '+'], [2,\
    \ 2, 2, 2])); // 8\nconsole.log(do_algebra(['//', '*', '-', '**'], [9, 9, 9, 9,\
    \ 9])); // -729\nconsole.log(do_algebra(['//', '**'], [9, 9, 9, 9, 9])); // 0\n\
    console.log(do_algebra(['//', '**'], [9, 9, 9, 9, 9, 9])); // 0\nconsole.log(do_algebra(['//',\
    \ '**'], [9, 9, 9,", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result = Math.floor(result / operand[i\
    \ + 1]);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, operand[i + 1]);\n                break;\n        }\n   \
    \ }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 4, 5]));\nconsole.log(do_algebra(['+', '*',\
    \ '//', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'],\
    \ [2, 3, 4, 5, 3, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2,\
    \ 3, 4, 5, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [5, 4,\
    \ 2, 3, 2, 5]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4,\
    \ 5, 2, 5]));\nconsole.log(do_algebra(['*', '//', '**'], [4, 5, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//',", "    let res = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            res += operand[i + 1];\n\
    \        } else if (operator[i] === '-') {\n            res -= operand[i + 1];\n\
    \        } else if (operator[i] === '*') {\n            res *= operand[i + 1];\n\
    \        } else if (operator[i] === '//') {\n            res = Math.floor(res\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ res = Math.pow(res, operand[i + 1]);\n        }\n    }\n    return res;\n}\n\
    \nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '//', '+'], [9, 4, 6, 2]));", "    let result = operand[0];\n    for (let i\
    \ = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n         \
    \   case '+':\n                result += operand[i + 1];\n                break;\n\
    \            case '-':\n                result -= operand[i + 1];\n          \
    \      break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         result = Math.pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}\n", "    let result = operand[0];\n \
    \   for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+')\
    \ {\n            result += operand[i + 1];\n        } else if (operator[i] ===\
    \ '-') {\n            result -= operand[i + 1];\n        } else if (operator[i]\
    \ === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            result = Math.floor(result / operand[i + 1]);\n   \
    \     } else if (operator[i] === '**') {\n            result = Math.pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-', '//'], [10,\
    \ 4, 2, 2]));\nconsole.log(do_algebra(['+', '*', '-', '//', '**'], [10, 4, 2,\
    \ 2, 3]));", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result = Math.floor(result / operand[i\
    \ + 1]);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, operand[i + 1]);\n                break;\n        }\n   \
    \ }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['//', '**', '-', '*'], [10, 2, 2, 2, 2]));",
  "  let index = 0;\n  let result = operand[index];\n  while (index < operator.length)\
    \ {\n    switch (operator[index]) {\n      case '+':\n        result += operand[index\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[index + 1];\n\
    \        break;\n      case '*':\n        result *= operand[index + 1];\n    \
    \    break;\n      case '//':\n        result = Math.floor(result / operand[index\
    \ + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[index + 1]);\n        break;\n    }\n    index++;\n  }\n  return result;\n\
    }\n", "  let answer: string = \"\";\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    answer += operand[i] + operator[i];\n  }\n  answer += operand[operand.length\
    \ - 1];\n  console.log(answer);\n  return eval(answer);\n}\n", "    let num =\
    \ operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') {\n            num += operand[i + 1];\n        } else if (operator[i]\
    \ === '-') {\n            num -= operand[i + 1];\n        } else if (operator[i]\
    \ === '*') {\n            num *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            num = Math.floor(num / operand[i + 1]);\n        }\
    \ else if (operator[i] === '**') {\n            num = Math.pow(num, operand[i\
    \ + 1]);\n        }\n    }\n    return num;\n}\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 5, 4]));\nconsole.log(do_algebra(['+',\
    \ '//', '-'], [2, 10, 3, 5]));\nconsole.log(do_algebra(['+', '**', '-'], [2, 3,\
    \ 4, 5]));\n", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '//', '-'], [2, 10, 3, 5]));\nconsole.log(do_algebra(['**', '+', '-'], [2, 3,\
    \ 4, 5]));", "    let s = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == '+') {\n            s += operand[i + 1];\n\
    \        }\n        if (operator[i] == '-') {\n            s -= operand[i + 1];\n\
    \        }\n        if (operator[i] == '*') {\n            s *= operand[i + 1];\n\
    \        }\n        if (operator[i] == '//') {\n            s = Math.floor(s /\
    \ operand[i + 1]);\n        }\n        if (operator[i] == '**') {\n          \
    \  s = Math.pow(s, operand[i + 1]);\n        }\n    }\n    return s;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '**', '//'], [2, 2,\
    \ 2, 2]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "  return\
    \ operand.reduce((r, c, i) => {\n    let res = c;\n    let o = operator[i];\n\
    \    if (o === '*') {\n      res = r * c;\n    } else if (o === '-') {\n     \
    \ res = r - c;\n    } else if (o === '//') {\n      res = Math.floor(r / c);\n\
    \    } else if (o === '**') {\n      res = Math.pow(r, c);\n    } else {\n   \
    \   res = r + c;\n    }\n    return res;\n  });\n}\n\nconst operator: string[]\
    \ = ['+', '*', '-'];\nconst operand: number[] = [2, 3, 4, 5];\nconsole.log(do_algebra(operator,\
    \ operand));", "  let result = operand[0];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '//', '+'], [10, 2,\
    \ 5, 2]));\nconsole.log(do_algebra(['+', '*', '-', '+'], [5, 1, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '*', '//', '+'], [2, 3, 4, 5, 10]));\nconsole.log(do_algebra(['+',\
    \ '-', '+', '*'], [2, 3, 4, 5, 4]));\nconsole.log(do_algebra(['+', '-', '+', '*'],\
    \ [6, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '+', '*'], [2, 3, 4, 5,\
    \ 6]));\nconsole.log(do_algebra(['+', '-', '+', '*'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '+', '*'], [2, 3, 4, 5, 1]));\nconsole.log(do_algebra(['**', '//', '-',\
    \ '*'], [2, 3, 4, 5, 1]));\nconsole.", "  const operations: Record<string, (a:\
    \ number, b: number) => number> = {\n    '+': (a, b) => a + b,\n    '-': (a, b)\
    \ => a - b,\n    '*': (a, b) => a * b,\n    '//': (a, b) => Math.floor(a / b),\n\
    \    '**': (a, b) => a ** b,\n  };\n\n  let result = operand[0];\n  for (let i\
    \ = 0; i < operator.length; i++) {\n    result = operations[operator[i]](result,\
    \ operand[i + 1]);\n  }\n\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '//'], [10, 20, 5]));\nconsole.log(do_algebra(['*', '//', '**'], [5, 2,\
    \ 3]));\nconsole.log(do_algebra(['+', '-', '+'], [20, 30, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "    let result = operand[0];\n    for (let i =\
    \ 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n       \
    \     result += operand[i + 1];\n        } else if (operator[i] === '-') {\n \
    \           result -= operand[i + 1];\n        } else if (operator[i] === '*')\
    \ {\n            result *= operand[i + 1];\n        } else if (operator[i] ===\
    \ '//') {\n            result = Math.floor(result / operand[i + 1]);\n       \
    \ } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\n", "  return +eval(operand.map((n,\
    \ i) => [n, operator[i]]).flat().join(''));\n}\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));//9\nconsole.log(do_algebra(['*', '-', '*'], [2, 3, 4,\
    \ 5]));//-2\nconsole.log(do_algebra(['+', '-'], [2, 3, 4]));//3\nconsole.log(do_algebra(['//',\
    \ '**'], [2, 3, 4]));//4\nconsole.log(do_algebra(['//', '*'], [2, 3, 4]));//2",
  "  const operation: any = { '+': (a: number, b: number) => a + b, '-': (a: number,\
    \ b: number) => a - b, '*': (a: number, b: number) => a * b, '//': (a: number,\
    \ b: number) => Math.floor(a / b), '**': (a: number, b: number) => Math.pow(a,\
    \ b) };\n  let x = operand[0];\n  let y = operand[1];\n  let z = 0;\n  let result\
    \ = 0;\n  while (operator.length > 0) {\n    z = operation[operator[0]](x, y);\n\
    \    x = z;\n    y = operand[operand.indexOf(y) + 1];\n    operator.shift();\n\
    \  }\n  result = x;\n  return result;\n}\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [4, 2, 6, 2]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [4, 2, 6, 2, 6]));\nconsole.log(do_algebra(['+', '*', '//', '**'],\
    \ [2, 3, 4, 5, 2]));", "    let result = operand[0];\n    for (let i = 0; i <\
    \ operator.length; i++) {\n        if (operator[i] === '+') {\n            result\
    \ += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result\
    \ -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result\
    \ *= operand[i + 1];\n        } else if (operator[i] === '//') {\n           \
    \ result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i]\
    \ === '**') {\n            result = Math.pow(result, operand[i + 1]);\n      \
    \  }\n    }\n    return result;\n}\n\nlet operator: string[] = ['+', '*', '-'];\n\
    let operand: number[] = [2, 3, 4, 5];\nconsole.log(do_algebra(operator, operand));\
    \ // 9", "    return eval(operand.slice(0, 1) + operator.reduce((a, b, i) => a\
    \ + b + operand[i + 1], \"\"));\n}\n\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-'], [3, 8, 10]));\nconsole.log(do_algebra(['//',\
    \ '*', '+', '+'], [4, 8, 6, 5, 2, 3]));", "  let result: number = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    let calc: number = 0;\n  \
    \  switch (operator[i]) {\n      case '+':\n        calc = operand[i] + operand[i\
    \ + 1];\n        break;\n      case '-':\n        calc = operand[i] - operand[i\
    \ + 1];\n        break;\n      case '*':\n        calc = operand[i] * operand[i\
    \ + 1];\n        break;\n      case '//':\n        calc = Math.floor(operand[i]\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        calc = Math.pow(operand[i],\
    \ operand[i + 1]);\n        break;\n    }\n    result = calc;\n  }\n  return result;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '//'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '*', '-', '//'], [2, 3, 4, 5, 2]));\n\
    console.log(do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4, 5, 2, 3]));", " \
    \ const lenOp = operator.length;\n  const lenPo = operand.length;\n  let result\
    \ = operand[0];\n  let i = 0;\n  let j = 1;\n  while (i < lenOp) {\n    switch\
    \ (operator[i]) {\n      case '+':\n        result += operand[j];\n        break;\n\
    \      case '-':\n        result -= operand[j];\n        break;\n      case '*':\n\
    \        result *= operand[j];\n        break;\n      case '//':\n        result\
    \ = Math.floor(result / operand[j]);\n        break;\n      case '**':\n     \
    \   result = Math.pow(result, operand[j]);\n        break;\n    }\n    i++;\n\
    \    j++;\n  }\n  return result;\n}\n", "  let evaluation: number = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n \
    \     case '+':\n        evaluation += operand[i + 1];\n        break;\n     \
    \ case '-':\n        evaluation -= operand[i + 1];\n        break;\n      case\
    \ '*':\n        evaluation *= operand[i + 1];\n        break;\n      case '//':\n\
    \        evaluation = Math.floor(evaluation / operand[i + 1]);\n        break;\n\
    \      case '**':\n        evaluation = Math.pow(evaluation, operand[i + 1]);\n\
    \        break;\n    }\n  }\n  return evaluation;\n}\n", "  if (operator.length\
    \ !== operand.length - 1) {\n    throw new Error('Wrong arguments.');\n  }\n \
    \ if (operator.length === 0 || operand.length < 2) {\n    throw new Error('Invalid\
    \ arguments.');\n  }\n  return operator.reduce((prev, current, index) => {\n \
    \   switch (current) {\n      case '+':\n        return prev + operand[index +\
    \ 1];\n      case '-':\n        return prev - operand[index + 1];\n      case\
    \ '*':\n        return prev * operand[index + 1];\n      case '//':\n        return\
    \ Math.floor(prev / operand[index + 1]);\n      case '**':\n        return Math.pow(prev,\
    \ operand[index + 1]);\n      default:\n        throw new Error('Invalid operator');\n\
    \    }\n  }, operand[0]);\n}\n", "  let result = operand[0];\n  for (let i = 0;\
    \ i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n \
    \       result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '**', '//'], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '**', '//'], [10, 2, 2, 5]));\n\
    console.log(do_algebra(['+', '-'], [3, 2, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '-'], [1000, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '-'], [2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '-'], [1000, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '-'], [2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '-'], [1000, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '-'], [2,", "    var sum: number = operand[0];\n\
    \    for (var i = 0; i < operator.length; i++) {\n        if (operator[i] == '+')\
    \ {\n            sum += operand[i + 1];\n        }\n        else if (operator[i]\
    \ == '-') {\n            sum -= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == '*') {\n            sum *= operand[i + 1];\n        }\n        else if (operator[i]\
    \ == '//') {\n            sum = Math.floor(sum / operand[i + 1]);\n        }\n\
    \        else if (operator[i] == '**') {\n            sum = Math.pow(sum, operand[i\
    \ + 1]);\n        }\n    }\n    return sum;\n}\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '//', '-'], [1, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n", "\tlet exp = \"\"\
    ;\n\tfor (let i = 0; i < operator.length; i++) {\n\t\texp += `${operand[i]} ${operator[i]}\
    \ `;\n\t}\n\texp += operand[operand.length - 1];\n\treturn eval(exp);\n}\n", " \
    \   return +operator.reduce((acc, v, i) => {\n        return v === '//' ? acc\
    \ + operand[i] / operand[i + 1] :\n            v === '**' ? acc + operand[i] **\
    \ operand[i + 1] :\n                v === '*' ? acc + operand[i] * operand[i +\
    \ 1] :\n                    v === '-' ? acc + operand[i] - operand[i + 1] :\n\
    \                        acc + operand[i] + operand[i + 1]\n    }, 0).toFixed(2)\n\
    }\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '**', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '+', '+', '+'], [2,\
    \ 3, 4, 5]));", "    let count = 0;\n    return operator.reduce((acc, curr) =>\
    \ {\n        count++;\n        switch (curr) {\n            case '+':\n      \
    \          return acc + operand[count];\n            case '-':\n             \
    \   return acc - operand[count];\n            case '*':\n                return\
    \ acc * operand[count];\n            case '//':\n                return acc /\
    \ operand[count];\n            case '**':\n                return acc ** operand[count];\n\
    \        }\n    }, operand[0]);\n}\n\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\n", "    const operator_str: string = operator.join('');\n \
    \   const operand_str: string = operand.join('');\n    return eval(operand_str\
    \ + operator_str);\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\
    console.log(do_algebra(['+', '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [8, 6, 4, 2]));\n", "    let result: number = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n\
    \            result += operand[i + 1];\n        } else if (operator[i] === '-')\
    \ {\n            result -= operand[i + 1];\n        } else if (operator[i] ===\
    \ '*') {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            result = Math.floor(result / operand[i + 1]);\n   \
    \     } else if (operator[i] === '**') {\n            result = Math.pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '-', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['**', '//', '+'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**',\
    \ '//', '+'], [3, 4, 5, 6]));", "    const operatorMap = {\n        '+': (a: number,\
    \ b: number) => a + b,\n        '-': (a: number, b: number) => a - b,\n      \
    \  '*': (a: number, b: number) => a * b,\n        '//': (a: number, b: number)\
    \ => Math.floor(a / b),\n        '**': (a: number, b: number) => Math.pow(a, b)\n\
    \    }\n    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        result = operatorMap[operator[i]](result, operand[i + 1]);\n\
    \    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['*', '+', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '+', '-'], [3, 2, 4, 1, 5]));\nconsole.log(do_algebra(['**', '-', '*',\
    \ '//', '+'], [3, 2, 2, 2, 2, 5]));", "  return operand.reduce((a, b, i) => eval(a\
    \ + operator[i] + b))\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]))//9\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]))//14\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [1, 2, 3, 4, 5, 6]))//15\nconsole.log(do_algebra(['+', '-', '*'],\
    \ [1, 2, 3, 4, 5, 6]))//-2\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3,\
    \ 4, 5, 6, 7]))//-1\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6,\
    \ 7, 8]))//0\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]))//1\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]))//2\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]))//3\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]))//4\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13]))//5\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,", "  return 5;\n}\n", "\tif (operator.length\
    \ + 1 !== operand.length) {\n\t\tthrow new Error('wrong input');\n\t}\n\tlet result\
    \ = operand[0];\n\tfor (let i = 0; i < operator.length; i++) {\n\t\tswitch (operator[i])\
    \ {\n\t\t\tcase '+':\n\t\t\t\tresult += operand[i + 1];\n\t\t\t\tbreak;\n\t\t\t\
    case '-':\n\t\t\t\tresult -= operand[i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\
    \t\t\t\tresult *= operand[i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t\
    result = Math.floor(result / operand[i + 1]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\
    \t\t\t\tresult = Math.pow(result, operand[i + 1]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\
    \t\t\t\tthrow new Error('wrong operator!');\n\t\t}\n\t}\n\treturn result;\n}\n",
  "    let result: number = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+': result += operand[i\
    \ + 1]; break;\n            case '-': result -= operand[i + 1]; break;\n     \
    \       case '*': result *= operand[i + 1]; break;\n            case '//': result\
    \ = Math.floor(result / operand[i + 1]); break;\n            case '**': result\
    \ = Math.pow(result, operand[i + 1]); break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '//', '+'], [2, 3, 4, 5, 7]));\nconsole.log(do_algebra(['+', '*', '//',\
    \ '**'], [2, 3, 4, 5, 3]));", "  let result = operand[0];\n  for (let i = 0; i\
    \ < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n   \
    \     result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    let\
    \ stack = new Array<number>();\n    for (let i = 0; i < operand.length; i++) {\n\
    \        let num = operand[i];\n        let op = operator[i];\n        switch\
    \ (op) {\n            case '+':\n                stack.push(num);\n          \
    \      break;\n            case '-':\n                stack.push(-num);\n    \
    \            break;\n            case '*':\n                stack.push(stack.pop()\
    \ * num);\n                break;\n            case '//':\n                stack.push(stack.pop()\
    \ / num);\n                break;\n            case '**':\n                stack.push(Math.pow(stack.pop(),\
    \ num));\n                break;\n        }\n    }\n    return stack.reduce((acc,\
    \ cur) => acc + cur);\n}\n", "\tconst op = new Stack<string>();\n\tconst vals\
    \ = new Stack<number>();\n\tfor (let i = 0; i < operator.length; i++) {\n\t\t\
    op.push(operator[i]);\n\t}\n\tfor (let i = 0; i < operand.length; i++) {\n\t\t\
    vals.push(operand[i]);\n\t}\n\twhile (!op.isEmpty()) {\n\t\tconst oper = op.pop();\n\
    \t\tif (oper === '+') {\n\t\t\tconst v1 = vals.pop();\n\t\t\tconst v2 = vals.pop();\n\
    \t\t\tvals.push(v1 + v2);\n\t\t} else if (oper === '-') {\n\t\t\tconst v1 = vals.pop();\n\
    \t\t\tconst v2 = vals.pop();\n\t\t\tvals.push(v2 - v1);\n\t\t} else if (oper ===\
    \ '*') {\n\t\t\tconst v1 = vals.pop();\n\t\t\tconst v2 = vals.pop();\n\t\t\tvals.push(v1\
    \ * v2);\n\t\t} else if (oper === '//') {\n\t\t\tconst v1 = vals.pop();\n\t\t\t\
    const v2 = vals.pop();\n\t\t\tvals.push(Math.floor(v2 / v1));\n\t\t} else if (oper\
    \ === '**') {\n\t\t\tconst v1 = vals.pop();\n\t\t\tconst v2 = vals.pop();\n\t\t\
    \tvals.push(Math.pow(v2, v1));\n\t\t}\n\t}\n\treturn vals.pop();\n}\n", "    return\
    \ eval(operand.reduce((a, b, i) => i === 0 ? b : a + operator[i - 1] + b));\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-', '//'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['+', '*', '-',\
    \ '//', '**'], [2, 3, 4, 5, 3, 2]));\nconsole.log(do_algebra(['*', '//', '+',\
    \ '-'], [2, 4, 3, 5, 3]));", "    let result = operand[0];\n    for (let i = 0;\
    \ i < operator.length; i++) {\n        if (operator[i] === '+') {\n          \
    \  result += operand[i + 1];\n        } else if (operator[i] === '-') {\n    \
    \        result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n\
    \            result *= operand[i + 1];\n        } else if (operator[i] === '//')\
    \ {\n            result = Math.floor(result / operand[i + 1]);\n        } else\
    \ if (operator[i] === '**') {\n            result = Math.pow(result, operand[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '**', '-'], [5, 2,\
    \ 2, 5]));\nconsole.log(do_algebra(['*', '//', '**'], [5, 2, 3, 2]));", "  let\
    \ result: number = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n\
    \    switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i + 1]);\n      \
    \  break;\n    }\n  }\n  return result;\n}\nconsole.log(do_algebra(['+', '*',\
    \ '//'], [2, 3, 4, 5]));\n", "    let result = operand[0];\n    operand.shift();\n\
    \    operator.forEach((element, index) => {\n        if (element === '+') {\n\
    \            result += operand[index];\n        } else if (element === '-') {\n\
    \            result -= operand[index];\n        } else if (element === '*') {\n\
    \            result *= operand[index];\n        } else if (element === '//') {\n\
    \            result = Math.floor(result / operand[index]);\n        } else if\
    \ (element === '**') {\n            result = Math.pow(result, operand[index]);\n\
    \        }\n    });\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '//', '+'], [2, 3, 4, 5]));",
  "    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n\
    \        if (operator[i] === '+') {\n            result += operand[i + 1];\n \
    \       } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n\
    \        } else if (operator[i] === '*') {\n            result *= operand[i +\
    \ 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\n", "    let temp = operand[0];\n    for (let i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                temp\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        temp -= operand[i + 1];\n                break;\n            case '*':\n\
    \                temp *= operand[i + 1];\n                break;\n           \
    \ case '//':\n                temp = Math.floor(temp / operand[i + 1]);\n    \
    \            break;\n            case '**':\n                temp = Math.pow(temp,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return temp;\n\
    }\n\nexport { do_algebra }", "    let i: number = 0;\n    let len: number = operand.length;\n\
    \    let temp: number = operand[i];\n    while (i < len) {\n        let op: string\
    \ = operator[i];\n        if (op === \"+\") {\n            temp += operand[i +\
    \ 1];\n        } else if (op === \"-\") {\n            temp -= operand[i + 1];\n\
    \        } else if (op === \"*\") {\n            temp *= operand[i + 1];\n   \
    \     } else if (op === \"//\") {\n            temp = Math.floor(temp / operand[i\
    \ + 1]);\n        } else if (op === \"**\") {\n            temp = Math.pow(temp,\
    \ operand[i + 1]);\n        }\n        i++;\n    }\n    return temp;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '+', '//'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '-', '**'], [2, 3, 4, 5]));\n", "   \
    \ for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '*')\
    \ {\n            let result = operand[i] * operand[i + 1];\n            operand.splice(i,\
    \ 2, result);\n            operator.splice(i, 1);\n            i--;\n        }\n\
    \        if (operator[i] === '//') {\n            let result = Math.floor(operand[i]\
    \ / operand[i + 1]);\n            operand.splice(i, 2, result);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n        if (operator[i] === '**') {\n    \
    \        let result = Math.pow(operand[i], operand[i + 1]);\n            operand.splice(i,\
    \ 2, result);\n            operator.splice(i, 1);\n            i--;\n        }\n\
    \    }\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') {\n            let result = operand[i] + operand[i + 1];\n        \
    \    operand.splice(i, 2, result);\n            operator.splice(i, 1);\n     \
    \       i--;\n        }\n        if (operator[i] === '-') {\n            let result\
    \ = operand[i] - operand[i + 1];\n            operand.splice(i, 2, result);\n\
    \            operator.splice(i, 1);\n            i--;\n        }\n    }\n    return\
    \ operand[0];\n}\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [0, 0, 0, 0]));\nconsole.log(do_algebra(['*', '//', '**'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '//', '**", "  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i])\
    \ {\n      case \"+\":\n        operand[i + 1] = operand[i] + operand[i + 1];\n\
    \        break;\n      case \"-\":\n        operand[i + 1] = operand[i] - operand[i\
    \ + 1];\n        break;\n      case \"*\":\n        operand[i + 1] = operand[i]\
    \ * operand[i + 1];\n        break;\n      case \"//\":\n        operand[i + 1]\
    \ = Math.floor(operand[i] / operand[i + 1]);\n        break;\n      case \"**\"\
    :\n        operand[i + 1] = Math.pow(operand[i], operand[i + 1]);\n        break;\n\
    \    }\n  }\n  return operand[operand.length - 1];\n}\nconsole.log(do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"\
    //\", \"-\"], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra([\"+\", \"*\", \"//\"\
    , \"**\", \"-\"], [2, 3, 4, 5, 6, 7]));\n", "    let result: number = operand[0];\n\
    \    for (let i = 0; i < operator.length; i++) {\n        switch (operator[i])\
    \ {\n            case '+':\n                result += operand[i + 1];\n      \
    \          break;\n            case '-':\n                result -= operand[i\
    \ + 1];\n                break;\n            case '*':\n                result\
    \ *= operand[i + 1];\n                break;\n            case '//':\n       \
    \         result = Math.floor(result / operand[i + 1]);\n                break;\n\
    \            case '**':\n                result = Math.pow(result, operand[i +\
    \ 1]);\n                break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2,\
    \ 3, 4, 5]));", "    let calculation = '';\n    operand.map((num, i) => {\n  \
    \      if (operator[i] === undefined) {\n            calculation += num;\n   \
    \     } else {\n            calculation += `${num} ${operator[i]} `;\n       \
    \ }\n    });\n    return math.eval(calculation);\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['-', '+', '-', '-'], [100,\
    \ 50, -10, -100]));\nconsole.log(do_algebra(['-', '*', '-'], [5, 3, 2, 1]));",
  "    let result: number = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 2,\
    \ 5, 2]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**',\
    \ '//', '-'], [2, 5, 2, 8]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '//', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [10, 2, 5, 2]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 2,\
    \ 5, 2]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 2, 5, 2]));", "  let\
    \ result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch\
    \ (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n      \
    \  break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i + 1]);\n      \
    \  break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '-',\
    \ '*'], [5, 2, 3, 4])); // 3\nconsole.log(do_algebra(['//', '*', '+'], [40, 20,\
    \ 10, 5])); // 3\nconsole.log(do_algebra(['+', '*', '//'], [10, 3, 3, 2])); //\
    \ 11\nconsole.log(do_algebra(['*', '//', '**'], [3, 2, 4, 2])); // 9\nconsole.log(do_algebra(['*',\
    \ '+', '-'], [2, 2, 3, 2])); // 2\nconsole.log(do_algebra(['//', '-', '*'], [50,\
    \ 25, 2, 5])); // 1\nconsole.log(do_algebra(['//', '*', '+'], [70, 10, 2, 5]));\
    \ // 14\nconsole.log(do_algebra(['*', '+', '-'], [100, 2, 3, 2])); // 98\nconsole.log(do_algebra(['+',\
    \ '-', '*'], [10, 2, 3, 3])); // 13\nconsole.log(do_algebra(['//', '+', '-'],\
    \ [50, 25, 10, 3])); // 13", "  let result = operand[0];\n  for (let i = 0; i\
    \ < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n   \
    \     result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    let\
    \  i = 0;\n    while (operator.length > 0){\n        if (operator[i] === '+'){\n\
    \            operand[i] = operand[i] + operand[i+1];\n            operand.splice(i+1,\
    \ 1);\n            operator.splice(i, 1);\n            i=0;\n        } else if\
    \ (operator[i] === '-'){\n            operand[i] = operand[i] - operand[i+1];\n\
    \            operand.splice(i+1, 1);\n            operator.splice(i, 1);\n   \
    \         i=0;\n        } else if (operator[i] === '*'){\n            operand[i]\
    \ = operand[i] * operand[i+1];\n            operand.splice(i+1, 1);\n        \
    \    operator.splice(i, 1);\n            i=0;\n        } else if (operator[i]\
    \ === '//'){\n            operand[i] = Math.floor(operand[i] / operand[i+1]);\n\
    \            operand.splice(i+1, 1);\n            operator.splice(i, 1);\n   \
    \         i=0;\n        } else if (operator[i] === '**'){\n            operand[i]\
    \ = Math.pow(operand[i], operand[i+1]);\n            operand.splice(i+1, 1);\n\
    \            operator.splice(i, 1);\n            i=0;\n        } else {\n    \
    \        i++;\n        }\n    }\n    return operand[0];\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '**', '+'], [10, 2,\
    \ 3, 2]));\nconsole.log(do_algebra(['*', '+', '-'], [5, 3, 2, 1]));", "    let\
    \ result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n    \
    \    switch (operator[i]) {\n            case '+':\n                result +=\
    \ operand[i + 1];\n                break;\n            case '-':\n           \
    \     result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(result / operand[i + 1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '**', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['-', '*', '**', '//'],\
    \ [2, 3, 4, 5]));", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        const op = operator[i];\n        const num = operand[i + 1];\n\
    \        switch (op) {\n            case '+':\n                result += num;\n\
    \                break;\n            case '-':\n                result -= num;\n\
    \                break;\n            case '*':\n                result *= num;\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / num);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, num);\n                break;\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "  return\
    \ operand.reduce((total, num, i) => {\n    return eval(`${total} ${operator[i]}\
    \ ${num}`);\n  });\n}\n\nconsole.log(do_algebra(['+', '-', '*', '//'], [2, 3,\
    \ 4, 5])); // 9\nconsole.log(do_algebra(['*', '**'], [3, 4])); // 81\nconsole.log(do_algebra(['+',\
    \ '*', '//'], [3, 4, 5])); // 5\nconsole.log(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5])); // -5\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6])); //\
    \ SyntaxError", "  let str = \"\";\n  operator.forEach((value, index) => {\n \
    \   str += operand[index] + value;\n  });\n  str += operand[operand.length - 1];\n\
    \  return eval(str);\n}\n\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]));", "    let ans = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] == '+') {\n            ans += operand[i + 1];\n\
    \        }\n        if (operator[i] == '-') {\n            ans -= operand[i +\
    \ 1];\n        }\n        if (operator[i] == '*') {\n            ans *= operand[i\
    \ + 1];\n        }\n        if (operator[i] == '//') {\n            ans /= operand[i\
    \ + 1];\n        }\n        if (operator[i] == '**') {\n            ans **= operand[i\
    \ + 1];\n        }\n    }\n    return ans;\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '//'], [3, 5, 2, 6]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [10, 2,\
    \ 3, 4]));\nconsole.log(do_algebra(['+', '-', '*'], [10, 2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-', '*'], [10, 2, 3, 4]));\nconsole.log(do_algebra(['**', '-', '*'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['**', '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**',\
    \ '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '-', '*'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_", "    let i = 0;\n    let j = 0;\n    let temp =\
    \ operand[0];\n    while (j < operator.length) {\n        if (operator[j] == '+')\
    \ {\n            temp += operand[i + 1];\n        }\n        if (operator[j] ==\
    \ '-') {\n            temp -= operand[i + 1];\n        }\n        if (operator[j]\
    \ == '*') {\n            temp *= operand[i + 1];\n        }\n        if (operator[j]\
    \ == '//') {\n            temp = Math.floor(temp / operand[i + 1]);\n        }\n\
    \        if (operator[j] == '**') {\n            temp = Math.pow(temp, operand[i\
    \ + 1]);\n        }\n        i++;\n        j++;\n    }\n    return temp;\n}\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "  var answer = operand[0];\n  for (var i = 0;\
    \ i < operator.length; i++) {\n    switch (operator[i]) {\n      case \"+\":\n\
    \        answer += operand[i + 1];\n        break;\n      case \"-\":\n      \
    \  answer -= operand[i + 1];\n        break;\n      case \"*\":\n        answer\
    \ *= operand[i + 1];\n        break;\n      case \"//\":\n        answer = Math.floor(answer\
    \ / operand[i + 1]);\n        break;\n      case \"**\":\n        answer = Math.pow(answer,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return answer;\n}\n\nconsole.log(do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5])); //9\nconsole.log(do_algebra([\"*\", \"//\"\
    , \"+\"], [1, 2, 3, 4])); //5\nconsole.log(do_algebra([\"*\", \"-\", \"+\"], [1,\
    \ 2, 3, 4])); //-5\nconsole.log(do_algebra([\"**\", \"+\", \"-\"], [1, 2, 3, 4]));\
    \ //0\nconsole.log(do_algebra([\"**\", \"+\", \"-\"], [1, 2, 3, 4, 5])); //96\n\
    console.log(do_algebra([\"**\", \"+\", \"-\"], [1, 2, 3, 4, 5, 6])); //0\nconsole.log(do_algebra([\"\
    **\", \"+\", \"-\"], [1, 2, 3, 4, 5, 6, 7])); //0\nconsole.log(do_algebra([\"\
    **\", \"+\", \"-\"], [1, 2, 3, 4, 5, 6, 7, 8])); //0\nconsole.log(do_algebra([\"\
    **\", \"+\", \"-\"], [1, 2, 3, 4, 5, 6, 7, 8, 9])); //262144\nconsole.log(do_algebra([\"\
    **\", \"+\", \"-\"], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); //-", "    let result\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i\
    \ + 1];\n                break;\n            case '-':\n                result\
    \ -= operand[i + 1];\n                break;\n            case '*':\n        \
    \        result *= operand[i + 1];\n                break;\n            case '//':\n\
    \                result = Math.floor(result / operand[i + 1]);\n             \
    \   break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '**', '-', '*'], [5, 3, 8, 4, 2]));\nconsole.log(do_algebra(['+', '+', '+',\
    \ '+'], [1, 2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '+', '-'], [3, 4, 3,\
    \ 3, 5]));\nconsole.log(do_algebra(['**', '+', '+', '-', '*'], [2, 2, 2, 2, 2,\
    \ 2, 2, 2]));\nconsole.log(do_algebra(['*', '+', '*', '+', '+', '-'], [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '+', '*', '+', '*',\
    \ '+', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['*', '+',\
    \ '-', '**', '*', '*', '+', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['//",
  "    let total = 0;\n    for (let i = 0; i < operator.length; i++) {\n        if\
    \ (operator[i] === '+') {\n            total += operand[i] + operand[i + 1];\n\
    \        } else if (operator[i] === '-') {\n            total += operand[i] -\
    \ operand[i + 1];\n        } else if (operator[i] === '*') {\n            total\
    \ += operand[i] * operand[i + 1];\n        } else if (operator[i] === '//') {\n\
    \            total += Math.floor(operand[i] / operand[i + 1]);\n        } else\
    \ if (operator[i] === '**') {\n            total += Math.pow(operand[i], operand[i\
    \ + 1]);\n        }\n    }\n    return total;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [3, 2, 5,\
    \ 2]));\nconsole.log(do_algebra(['//', '**', '+'], [10, 2, 2, 5]));\n", "  let\
    \ result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch\
    \ (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n      \
    \  break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result /= operand[i + 1];\n        break;\n      case '**':\n\
    \        result **= operand[i + 1];\n        break;\n    }\n  }\n  return result;\n\
    }\n", "    let result: number = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result = Math.floor(result / operand[i\
    \ + 1]);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, operand[i + 1]);\n                break;\n        }\n   \
    \ }\n    return result;\n}\n", "    let result = operand[0];\n    for (let i =\
    \ 0; i < operator.length; i++) {\n        let op = operator[i];\n        let num\
    \ = operand[i + 1];\n        switch (op) {\n            case '+':\n          \
    \      result += num;\n                break;\n            case '-':\n       \
    \         result -= num;\n                break;\n            case '*':\n    \
    \            result *= num;\n                break;\n            case '//':\n\
    \                result = Math.floor(result / num);\n                break;\n\
    \            case '**':\n                result = Math.pow(result, num);\n   \
    \             break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [1, 2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 3, 5]));\n\
    console.log(do_algebra(['+', '*', '//', '**'], [2, 3, 4, 5, 6]));", "  let result\
    \ = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i])\
    \ {\n      case '+':\n        result += operand[i + 1];\n        break;\n    \
    \  case '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n\
    \        result *= operand[i + 1];\n        break;\n      case '//':\n       \
    \ result = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n\
    \        result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n \
    \ }\n  return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '-', '//'], [2, 5, 10, 3]));\nconsole.log(do_algebra(['*',\
    \ '//', '-'], [10, 2, 3, 1]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'],\
    \ [5, 5, 1, 2, 3, 1]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [5,\
    \ 5, 1, 2, 3, 2]));\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [5, 5,\
    \ 1, 2, 3, 4]));\nconsole.log(do_algebra(['*', '//', '**'], [4, 3, 3, 2]));\n\
    console.log(do_algebra(['*', '//', '**'], [4, 3, 3, 3]));\nconsole.log(do_algebra(['*',\
    \ '//', '**'], [4, 3, 3, 4]));\nconsole.log(do_algebra(['*', '//', '**'], [4,\
    \ 3, 3, 5]));\nconsole.log(do_algebra(['*', '", "    let operators = ['+', '-',\
    \ '*', '//', '**'];\n    let operands = operand.slice();\n    operator.forEach(function(o)\
    \ {\n        if (operators.indexOf(o) > -1) {\n            let r = operands.splice(operands.length\
    \ - 2, 2);\n            operands.push(eval(r[0] + o + r[1]));\n        }\n   \
    \ });\n    return operands[0];\n}\n", "    let s = operand[0]\n    for (let i\
    \ = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n         \
    \   case '+':\n                s += operand[i + 1]\n                break\n  \
    \          case '-':\n                s -= operand[i + 1]\n                break\n\
    \            case '*':\n                s *= operand[i + 1]\n                break\n\
    \            case '//':\n                s = Math.floor(s / operand[i + 1])\n\
    \                break\n            case '**':\n                s = Math.pow(s,\
    \ operand[i + 1])\n                break\n        }\n    }\n    return s\n}\n\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]))\nconsole.log(do_algebra(['+', '-', '*', '//', '**'],\
    \ [2, 3, 4, 5, 6, 7]))\nconsole.log(do_algebra(['*', '//', '-'], [2, 2, 3, 2]))\n\
    console.log(do_algebra(['+', '-', '*', '//', '**'], [2, 2, 2, 2, 2, 2]))\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 2, 2, 2, 2, 2]))\nconsole.log(do_algebra(['*', '//',\
    \ '**'], [2, 3, 5, 2]))\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 4]))\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 4]))\nconsole.log(do_algebra(['*',\
    \ '//', '**'], [2, 3, 5, 2]))\nconsole.log(do_algebra(['+', '-', '*', '//', '",
  "    if (operator.length === 0 || operand.length === 0) {\n        return null;\n\
    \    }\n    var result = operand[0];\n    for (var i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 6]));\n",
  "  const exp = operand.reduce((acc, c, i) => `${acc} ${c} ${operator[i] || ''}`,\
    \ '');\n  return eval(exp);\n}", "    for (let i = 0; i < operator.length; i++)\
    \ {\n        if (operator[i] === '**') {\n            operand[i + 1] = Math.pow(operand[i],\
    \ operand[i + 1]);\n            operator.splice(i, 1);\n            operand.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '//') {\n            operand[i + 1] = Math.floor(operand[i]\
    \ / operand[i + 1]);\n            operator.splice(i, 1);\n            operand.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '*') {\n            operand[i + 1] = operand[i]\
    \ * operand[i + 1];\n            operator.splice(i, 1);\n            operand.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            operand[i + 1] = operand[i]\
    \ + operand[i + 1];\n            operator.splice(i, 1);\n            operand.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '-') {\n            operand[i + 1] = operand[i]\
    \ - operand[i + 1];\n            operator.splice(i, 1);\n            operand.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    return operand[0];\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '+'], [0, 1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '*', '-'], [2",
  "    let result = operand[0];\n    operator.forEach((op, index) => {\n        switch\
    \ (op) {\n            case '+':\n                result += operand[index + 1];\n\
    \                break;\n            case '-':\n                result -= operand[index\
    \ + 1];\n                break;\n            case '*':\n                result\
    \ *= operand[index + 1];\n                break;\n            case '//':\n   \
    \             result = Math.floor(result / operand[index + 1]);\n            \
    \    break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[index + 1]);\n                break;\n        }\n    });\n    return\
    \ result;\n}\n", "    const operators: {[index: string]: (left: number, right:\
    \ number) => number} = {\n        '+': (left, right) => left + right,\n      \
    \  '-': (left, right) => left - right,\n        '*': (left, right) => left * right,\n\
    \        '//': (left, right) => Math.floor(left / right),\n        '**': (left,\
    \ right) => Math.pow(left, right)\n    };\n    let result = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        result = operators[operator[i]](result,\
    \ operand[i + 1]);\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "    let result: number = operand[0];\n    for\
    \ (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n  \
    \          case '+':\n                result += operand[i + 1];\n            \
    \    break;\n            case '-':\n                result -= operand[i + 1];\n\
    \                break;\n            case '*':\n                result *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                result\
    \ = Math.floor(result / operand[i + 1]);\n                break;\n           \
    \ case '**':\n                result = Math.pow(result, operand[i + 1]);\n   \
    \             break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '**'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));", "  const\
    \ expressions = [];\n  for (let i = 0; i < operator.length; i++) {\n    expressions.push(`${operand[i]}\
    \ ${operator[i]} ${operand[i + 1]}`);\n  }\n  return eval(expressions.join(' '));\n\
    }\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); // => 9", "    return\
    \ eval(operand.map((item,index)=>index==0 ? item.toString() : operator[index-1]+item).join(''));\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-'], [5, 10, 1]));\nconsole.log(do_algebra(['*', '-'], [5, 10, 1]));\nconsole.log(do_algebra(['+',\
    \ '-'], [5, 10, 1, 5]));\nconsole.log(do_algebra(['-', '*'], [5, 10, 1, 5]));",
  "  let result: number = operand[0];\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    let result =\
    \ operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i\
    \ + 1];\n                break;\n            case '-':\n                result\
    \ -= operand[i + 1];\n                break;\n            case '*':\n        \
    \        result *= operand[i + 1];\n                break;\n            case '//':\n\
    \                result = Math.floor(result / operand[i + 1]);\n             \
    \   break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['*', '+', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '//', '+'], [1, 2, 3, 4, 5]));", "    return eval(operand.slice(0, operand.length\
    \ - 1).map((e, i) => `${e} ${operator[i]}`).join(\"\") + operand[operand.length\
    \ - 1]);\n}\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 2]));", "  let result = operand[0];\n  for (let i =\
    \ 0; i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n\
    \        result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\n", "    for (let i = 1; i < operand.length; i++)\
    \ {\n        if (operator[i - 1] === '+') {\n            operand[i] = operand[i\
    \ - 1] + operand[i];\n        } else if (operator[i - 1] === '-') {\n        \
    \    operand[i] = operand[i - 1] - operand[i];\n        } else if (operator[i\
    \ - 1] === '*') {\n            operand[i] = operand[i - 1] * operand[i];\n   \
    \     } else if (operator[i - 1] === '//') {\n            operand[i] = Math.floor(operand[i\
    \ - 1] / operand[i]);\n        } else if (operator[i - 1] === '**') {\n      \
    \      operand[i] = Math.pow(operand[i - 1], operand[i]);\n        }\n    }\n\
    \    return operand[operand.length - 1];\n}\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '+', '+'], [1, 2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['*', '+', '+'], [3, 2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '**'], [5, 2, 3, 2]));\nconsole.log(do_algebra(['//', '*', '**'], [10,\
    \ 2, 3, 2]));\nconsole.log(do_algebra(['//', '*', '**'], [11, 2, 3, 2]));", " \
    \   let result = 0;\n    let isFirst = true;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (isFirst) {\n            result = do_calc(operator[i], operand[i],\
    \ operand[i + 1]);\n            isFirst = false;\n        } else {\n         \
    \   result = do_calc(operator[i], result, operand[i + 1]);\n        }\n    }\n\
    \    return result;\n}\n", "  // write your code here\n}\n", "  let stack = []\n\
    \  while (operator.length > 0) {\n    let operatorToUse = operator.shift()\n \
    \   let operand2 = operand.pop()\n    let operand1 = operand.pop()\n    let result\
    \ = 0\n    switch (operatorToUse) {\n      case '+':\n        result = operand1\
    \ + operand2\n        break\n      case '-':\n        result = operand1 - operand2\n\
    \        break\n      case '*':\n        result = operand1 * operand2\n      \
    \  break\n      case '//':\n        result = Math.floor(operand1 / operand2)\n\
    \        break\n      case '**':\n        result = Math.pow(operand1, operand2)\n\
    \        break\n    }\n    operand.push(result)\n  }\n  return operand[0]\n}\n",
  "    if (operator.length == 0 || operand.length == 0) return -1;\n    let res =\
    \ operand[0];\n    let op = [\"+\", \"-\", \"*\", \"//\", \"**\"];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        let o = op.indexOf(operator[i]);\n\
    \        switch (o) {\n            case 0:\n                res += operand[i +\
    \ 1];\n                break;\n            case 1:\n                res -= operand[i\
    \ + 1];\n                break;\n            case 2:\n                res *= operand[i\
    \ + 1];\n                break;\n            case 3:\n                res = Math.floor(res\
    \ / operand[i + 1]);\n                break;\n            case 4:\n          \
    \      res = Math.pow(res, operand[i + 1]);\n                break;\n        \
    \    default:\n                return -1;\n        }\n    }\n    return res;\n\
    }\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    **\", \"-\"], [2, 3, 4]));\nconsole.log(do_algebra([\"+\", \"*\", \"//\", \"-\"\
    ], [2, 3, 4, 2, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"//\", \"-\"], [2,\
    \ 3, 4, 2, 3]));\nconsole.log(do_algebra([\"//\", \"-\"], [2, 2, 5]));", "   \
    \ // your code goes here\n    const operations = {\n        '+': (a, b) => a +\
    \ b,\n        '-': (a, b) => a - b,\n        '*': (a, b) => a * b,\n        '//':\
    \ (a, b) => Math.floor(a / b),\n        '**': (a, b) => Math.pow(a, b)\n    }\n\
    \    let result = 0;\n    for (let i = 0; i < operator.length; i++) {\n      \
    \  if (i === 0) {\n            result = operations[operator[i]](operand[i], operand[i\
    \ + 1]);\n        } else {\n            result = operations[operator[i]](result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "    let res: number = operand[0];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+': res += operand[i + 1]; break;\n            case '-': res -= operand[i\
    \ + 1]; break;\n            case '*': res *= operand[i + 1]; break;\n        \
    \    case '//': res = Math.floor(res / operand[i + 1]); break;\n            case\
    \ '**': res = Math.pow(res, operand[i + 1]); break;\n        }\n    }\n    return\
    \ res;\n}\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [4, 2, 3, 2]));\nconsole.log(do_algebra(['//', '*', '-'], [4, 2,\
    \ 3, 2]));\nconsole.log(do_algebra(['**', '*', '//'], [4, 2, 3, 2]));", "    let\
    \ operatorMap = {\n        '+': (a, b) => a + b,\n        '-': (a, b) => a - b,\n\
    \        '*': (a, b) => a * b,\n        '//': (a, b) => a / b,\n        '**':\
    \ (a, b) => a ** b\n    }\n    let str = '';\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        str += `${operand[i]} ${operator[i]} `;\n    }\n    str += operand[operand.length\
    \ - 1];\n    return eval(str);\n}\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5])); //9", "  let operators: string[] = [...operator];\n  let operands:\
    \ number[] = [...operand];\n  let operation: { [key: string]: (a: number, b: number)\
    \ => number } = {\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n\
    \    \"*\": (a, b) => a * b,\n    \"//\": (a, b) => Math.floor(a / b),\n    \"\
    **\": (a, b) => Math.pow(a, b)\n  };\n  while (operators.length > 0) {\n    let\
    \ value = operands.shift();\n    let operator = operators.shift();\n    let anotherValue\
    \ = operands.shift();\n    operands.unshift(operation[operator](value, anotherValue));\n\
    \  }\n  return operands[0];\n}\n", "    let result = operand[0];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n       \
    \     case '+':\n                result += operand[i + 1];\n                break;\n\
    \            case '-':\n                result -= operand[i + 1];\n          \
    \      break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         result = Math.pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));", "    for (let i = 0; i < operator.length; i++) {\n       \
    \ if (operator[i] === '**') {\n            operand[i + 1] = Math.pow(operand[i],\
    \ operand[i + 1]);\n            operand.splice(i, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '//') {\n            operand[i + 1] = Math.floor(operand[i]\
    \ / operand[i + 1]);\n            operand.splice(i, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '*') {\n            operand[i + 1] = operand[i]\
    \ * operand[i + 1];\n            operand.splice(i, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '-') {\n            operand[i + 1] = operand[i]\
    \ - operand[i + 1];\n            operand.splice(i, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            operand[i + 1] = operand[i]\
    \ + operand[i + 1];\n            operand.splice(i, 1);\n            operator.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    return operand[0];\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '-'], [9, 3,",
  "    let sum = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n  \
    \      if (operator[i] === '+') {\n            sum += operand[i + 1];\n      \
    \  } else if (operator[i] === '-') {\n            sum -= operand[i + 1];\n   \
    \     } else if (operator[i] === '*') {\n            sum *= operand[i + 1];\n\
    \        } else if (operator[i] === '//') {\n            sum = Math.floor(sum\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ sum = Math.pow(sum, operand[i + 1]);\n        }\n    }\n    return sum;\n}\n\
    \nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-', '//'], [2,\
    \ 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4,\
    \ 5, 6, 2]));\n", "    var result: number = operand[0];\n    for (var i = 0; i\
    \ < operator.length; i++) {\n        switch (operator[i]) {\n            case\
    \ '+':\n                result += operand[i + 1];\n                break;\n  \
    \          case '-':\n                result -= operand[i + 1];\n            \
    \    break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         result = Math.pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 6]));\n\
    console.log(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '//'], [2, 3, 4, 6]));\nconsole.log(do_algebra(['+', '*', '//'], [2, 3,\
    \ 4, 8]));\nconsole.log(do_algebra(['+', '*', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '**'], [2, 3, 4, 6]));\nconsole.log(do_algebra(['+', '*', '**'], [2, 3,\
    \ 4, 8]));\nconsole.log(do_algebra(['+', '*', '**'], [2, 3, 4, 9]));", "    let\
    \ result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n    \
    \    if (operator[i] === '+') {\n            result += operand[i + 1];\n     \
    \   } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n\
    \        } else if (operator[i] === '*') {\n            result *= operand[i +\
    \ 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '+'], [10, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '+'], [10, 3,\
    \ 4, 1]));\nconsole.log(do_algebra(['//', '*', '+'], [10, 3, 4, 0]));\nconsole.log(do_algebra(['//',\
    \ '*', '+'], [10, 3, 4, -5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 1]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 0]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ -5]));\nconsole.log(do_algebra(['//', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '-'], [2, 3, 4, 1]));\nconsole.", "  let result = 0;\n  for (let i = 0;\
    \ i < operator.length; i++) {\n    switch (operator[i]) {\n      case \"+\":\n\
    \        result += operand[i + 1];\n        break;\n      case \"-\":\n      \
    \  result -= operand[i + 1];\n        break;\n      case \"*\":\n        result\
    \ *= operand[i + 1];\n        break;\n      case \"//\":\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case \"**\":\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"*\", \"-\"], [10,\
    \ 2, 3]));\nconsole.log(do_algebra([\"//\", \"+\", \"-\"], [100, 10, 1, 1]));\n\
    console.log(do_algebra([\"*\", \"-\"], [5, 3, 7]));\nconsole.log(do_algebra([\"\
    **\", \"-\"], [5, 2, 7]));\nconsole.log(do_algebra([\"+\", \"-\"], [5, 2, 7]));\n\
    console.log(do_algebra([\"*\", \"-\"], [6, 5, 7]));\nconsole.log(do_algebra([\"\
    +\", \"-\"], [6, 5, 7]));\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [100,\
    \ 6, 5, 7]));\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [100, 2, 6, 5, 7]));\n\
    console.log(do_algebra([\"//\", \"*\", \"-\"], [100, 1, 2, 6, 5, 7]));\nconsole.log(do_algebra([\"\
    //\", \"*\", \"-\"], [100, 10, 6, 5, 7]));\nconsole.log(do_algebra([\"//\", \"\
    *\", \"-\"], [100,", "  let newArray = [];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    newArray.push(operand[i], operator[i]);\n  }\n  newArray.push(operand[operand.length\
    \ - 1]);\n  let str = newArray.join('');\n  return eval(str);\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['-', '*', '+'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['*', '*', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '+', '-'], [4, 2, 5, 3]));\nconsole.log(do_algebra(['+', '+', '+'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['-', '-'], [2, 3, 4]));\nconsole.log(do_algebra(['-',\
    \ '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '*', '*'], [2, 3, 4, 5]));\n\
    console.log(do_algebra(['**', '**', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**',\
    \ '**', '*'], [3, 2, 2, 4]));\nconsole.log(do_algebra(['**', '**', '**'], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '**'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '**'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '**'], [2,\
    \ 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['+', '*", "    let result: number\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i]\
    \ === '+') {\n            result += operand[i + 1];\n        } else if (operator[i]\
    \ === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i]\
    \ === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i]\
    \ === '//') {\n            result = Math.floor(result / operand[i + 1]);\n   \
    \     } else if (operator[i] === '**') {\n            result = Math.pow(result,\
    \ operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "    let expression\
    \ = '';\n    for (let i = 0; i < operator.length; i++) {\n        expression +=\
    \ operand[i] + operator[i];\n    }\n    expression += operand[operand.length -\
    \ 1];\n    return eval(expression);\n}\n\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '//', '-'], [2, 3, 4, 5]));\n\
    console.log(do_algebra(['*', '+', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '-', '+'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '-', '-', '*'], [2,\
    \ 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['*', '-', '-', '*', '*'], [2, 3,\
    \ 4, 5, 6, 7, 8, 9]));\nconsole.log(do_algebra(['+', '*', '//', '**'], [2, 3,\
    \ 4, 5, 6]));\nconsole.log(do_algebra(['*', '-', '*', '-'], [2, 3, 4, 5, 6, 7]));\n\
    console.log(do_algebra(['//', '*', '//', '-'], [2, 3, 4, 5, 6, 7]));\nconsole.log(do_algebra(['*',\
    \ '-', '*', '-', '*'], [2, 3, 4, 5, 6, 7, 8]));", "  return operand.reduce((acc,\
    \ val, index) => {\n    switch (operator[index - 1]) {\n      case '+':\n    \
    \    return acc + val;\n      case '-':\n        return acc - val;\n      case\
    \ '*':\n        return acc * val;\n      case '//':\n        return Math.floor(acc\
    \ / val);\n      case '**':\n        return Math.pow(acc, val);\n      default:\n\
    \        return 0;\n    }\n  });\n}\n", "  let result = operand[0];\n  for (let\
    \ i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result\
    \ += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i\
    \ + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n\
    \    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // => 9\nconsole.log(do_algebra(['+', '*', '//'],\
    \ [2, 3, 10, 2])); // => 10\nconsole.log(do_algebra(['+', '*', '//', '**'], [2,\
    \ 3, 10, 2, 2])); // => 40\nconsole.log(do_algebra(['//', '**'], [15, 3, 3]));\
    \ // => 1\nconsole.log(do_algebra(['-', '//', '**'], [15, 3, 3])); // => -16",
  "  const operators: { [key: string]: (a: number, b: number) => number } = {\n  \
    \  '+': (a, b) => a + b,\n    '-': (a, b) => a - b,\n    '*': (a, b) => a * b,\n\
    \    '//': (a, b) => Math.floor(a / b),\n    '**': (a, b) => a ** b,\n  };\n \
    \ return operator.reduce(\n    (acc, op, i) => operators[op](acc, operand[i +\
    \ 1]),\n    operand[0]\n  );\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [6, 2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6]));\nconsole.log(do_algebra(['+', '*', '-'], [4, 2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '*', '-'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['+', '**', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '*', '**'], [5, 2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '//'], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '//'], [4, 2, 3, 4, 5]));\n\
    console.log(do_algebra(['//', '*', '//'], [2, 3, 4,"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
