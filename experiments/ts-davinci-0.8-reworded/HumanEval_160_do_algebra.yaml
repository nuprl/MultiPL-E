name: HumanEval_160_do_algebra
language: ts
prompt: "//Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra(operator: string[],\
  \ operand: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3,\
  \ 4]),8);\n}\n\ntest();"
completions: ["    // your code is here\n    let result: number = 0;\n    let operation:\
    \ string = '';\n    let value_a: number = 0;\n    let value_b: number = 0;\n \
    \   operation = operator[0];\n    value_a = operand[0];\n    value_b = operand[1];\n\
    \    for (let i = 0; i < operator.length; i++) {\n        switch (operation) {\n\
    \            case '+':\n                result = value_a + value_b;\n        \
    \        break;\n            case '-':\n                result = value_a - value_b;\n\
    \                break;\n            case '*':\n                result = value_a\
    \ * value_b;\n                break;\n            case '//':\n               \
    \ result = value_a / value_b;\n                break;\n            case '**':\n\
    \                result = value_a ** value_b;\n                break;\n      \
    \  }\n        operation = operator[i + 1];\n        value_a = result;\n      \
    \  value_b = operand[i + 2];\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '//'], [2, 3, 3, 6]));\nconsole.log(do_algebra(['+', '-', '*', '//'], [2,\
    \ 2, 4, 2, 4]));\nconsole.log(do_algebra(['+', '-', '**'], [2, 2, 3, 2]));\nconsole.log(do_algebra(['//',\
    \ '*', '**'], [8, 2, 2, 2]));\nconsole.log(do_algebra(['-', '-', '*', '//'], [2,\
    \ 2, 4, 2, 4]));", "    let operatorsPriority = {'+': 1, '-': 1, '*': 2, '/':\
    \ 2, '**': 3};\n    let result: number = operand[0];\n    for (let i = 0; i <\
    \ operator.length; i++) {\n        if (operator[i] === '+') {\n            result\
    \ += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result\
    \ -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result\
    \ *= operand[i + 1];\n        } else if (operator[i] === '/') {\n            result\
    \ /= operand[i + 1];\n        } else if (operator[i] === '**') {\n           \
    \ result **= operand[i + 1];\n        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "  // Use the two given arrays to build the algebric\
    \ expression\n  // and return the evaluation of this expression.\n  let result\
    \ = 0;\n  let index = 0;\n  let currentOperator = \"\";\n  for (let i = 0; i <\
    \ operator.length; i++) {\n    currentOperator = operator[i];\n    result = calculate(operand[index],\
    \ operand[index + 1], currentOperator);\n    index++;\n  }\n  return result;\n\
    }\n", "    let calc = operand[0];\n    for (let i = 0; i < operator.length; i++)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                calc\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        calc -= operand[i + 1];\n                break;\n            case '*':\n\
    \                calc *= operand[i + 1];\n                break;\n           \
    \ case '//':\n                calc = Math.floor(calc / operand[i + 1]);\n    \
    \            break;\n            case '**':\n                calc = Math.pow(calc,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return calc;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '//', '**'], [2, 3, 4, 5]));", "  let result = operand[0];\n  for (let i = 0;\
    \ i < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n \
    \       result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '//'], [10, 10,\
    \ 1, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 10, 1, 3]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [10, 10, 1, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 10,\
    \ 1, 3]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**',\
    \ '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5,\
    \ 2, 1]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**',\
    \ '//', '+'], [1, 5, 2, 1]));\nconsole.log(do_algebra(['**', '//', '+'], [1, 5,\
    \ 2, 1]));\nconsole.log(do_algebra(['**', '//", "    // Write your code here\n\
    \    // Good luck!\n}\n", "    let op: Array<(a: number, b: number) => number>\
    \ = [];\n    operator.forEach(o => {\n        switch (o) {\n            case '+':\n\
    \                op.push((a, b) => a + b);\n                break;\n         \
    \   case '-':\n                op.push((a, b) => a - b);\n                break;\n\
    \            case '*':\n                op.push((a, b) => a * b);\n          \
    \      break;\n            case '//':\n                op.push((a, b) => Math.floor(a\
    \ / b));\n                break;\n            case '**':\n                op.push((a,\
    \ b) => Math.pow(a, b));\n                break;\n        }\n    });\n    return\
    \ op.reduce((a, v, i) => v(a, operand[i + 1]), operand[0]);\n}\n", "  return 0;\n\
    }\n", "    const operators = new Map([\n        ['+', (a, b) => a + b],\n    \
    \    ['-', (a, b) => a - b],\n        ['*', (a, b) => a * b],\n        ['//',\
    \ (a, b) => a / b],\n        ['**', (a, b) => a ** b]\n    ]);\n    let result\
    \ = 0;\n    let j = 0;\n    let k = 0;\n    let opts = [];\n    let nums = [];\n\
    \    let curr = operators.get(operator[j]);\n    for (let i = 0; i < operand.length;\
    \ i++) {\n        nums.push(operand[i]);\n        opts.push(operator[j++]);\n\
    \        if (curr) {\n            result = curr(nums[k], nums[k + 1]);\n     \
    \       k++;\n            nums.splice(k, 1, result);\n            opts.splice(k,\
    \ 1);\n            curr = operators.get(opts[k]);\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '**', '//'], [1, 2, 3, 2]));\nconsole.log(do_algebra(['+', '+', '+', '-'], [1,\
    \ 2, 3, 2, 1]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(", "    if (operator.length\
    \ !== operand.length - 1) {\n        return null;\n    }\n    // do some error\
    \ checking \n    if (operator.length === 0 || operand.length < 2) {\n        return\
    \ null;\n    }\n    let result = 0;\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result = operand[i] + operand[i + 1];\n                break;\n         \
    \   case '-':\n                result = operand[i] - operand[i + 1];\n       \
    \         break;\n            case '*':\n                result = operand[i] *\
    \ operand[i + 1];\n                break;\n            case '//':\n          \
    \      result = Math.floor(operand[i] / operand[i + 1]);\n                break;\n\
    \            case '**':\n                result = Math.pow(operand[i], operand[i\
    \ + 1]);\n                break;\n            default:\n                break;\n\
    \        }\n        operand[i + 1] = result;\n    }\n    return result;\n}\n",
  "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n   \
    \ switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i + 1]);\n      \
    \  break;\n    }\n  }\n  return result;\n}\n\nexport { do_algebra };", "  let\
    \ equasion: string = operand[0].toString();\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    equasion += operator[i] + operand[i + 1];\n  }\n  return eval(equasion);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "    return eval(`${operand[0]}${operator[0]}${operand[1]}${operator[1]}${operand[2]}${operator[2]}${operand[3]}`);\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));", "  const operatorPriority\
    \ = {\n    '**': 1,\n    '*': 2,\n    '/': 2,\n    '+': 3,\n    '-': 3,\n  };\n\
    \  const str = operand.map((op, i) => `${op}${operator[i] || ''}`).join('');\n\
    \  let temp = str;\n  for (const key in operatorPriority) {\n    if (operatorPriority.hasOwnProperty(key))\
    \ {\n      temp = temp.replace(new RegExp(`\\\\d+\\\\${key}\\\\d+`, 'g'), (str)\
    \ => String(eval(str)));\n    }\n  }\n  return Number(temp);\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5, 6])); // 13\nconsole.log(do_algebra(['//', '*', '-'], [10, 2, 3, 4,\
    \ 5])); // -10\nconsole.log(do_algebra(['//', '-', '+'], [9, 4, 5, 6, 7])); //\
    \ 8\nconsole.log(do_algebra(['/', '+', '*'], [10, 5, 3, 4, 5])); // 32\nconsole.log(do_algebra(['*',\
    \ '+', '-'], [10, 5, 3, 4, 5])); // 42\nconsole.log(do_algebra(['*', '+', '-'],\
    \ [10, 5, 3, 4, 5, 6])); // 52\nconsole.log(do_algebra(['//', '*', '+', '-'],\
    \ [10, 5, 3, 4, 5, 6])); // 42\nconsole.log(do_algebra(['+', '-'], [10, 5, 3,\
    \ 4, 5, 6])); // 13\nconsole.log(do_algebra(['//', '+', '-'], [10, 5, 3, 4, 5,\
    \ 6])); // 6\nconsole.log(do_", "  // Write your code here\n  let result = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n \
    \     case \"+\":\n        result += operand[i + 1];\n        break;\n      case\
    \ \"-\":\n        result -= operand[i + 1];\n        break;\n      case \"*\"\
    :\n        result *= operand[i + 1];\n        break;\n      case \"//\":\n   \
    \     result = Math.floor(result / operand[i + 1]);\n        break;\n      case\
    \ \"**\":\n        result = Math.pow(result, operand[i + 1]);\n        break;\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"*\", \"+\", \"-\"], [2, 3, 4, 5]));\n\
    console.log(do_algebra([\"+\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    +\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\n\
    console.log(do_algebra([\"//\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    //\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra([\"//\", \"*\", \"-\"], [2, 3, 4, 5]));\nconsole.log(do_algebra([\"\
    //\", \"*\", \"-\"], [2, 3, 4", "    let res = 0;\n    let isDivide = false;\n\
    \    res = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n    \
    \    switch (operator[i]) {\n            case '+':\n                res += operand[i\
    \ + 1];\n                break;\n            case '-':\n                res -=\
    \ operand[i + 1];\n                break;\n            case '*':\n           \
    \     res *= operand[i + 1];\n                break;\n            case '//':\n\
    \                res = Math.floor(res / operand[i + 1]);\n                isDivide\
    \ = true;\n                break;\n            case '**':\n                res\
    \ = Math.pow(res, operand[i + 1]);\n                break;\n        }\n    }\n\
    \    if (isDivide) {\n        return Math.floor(res);\n    }\n    return res;\n\
    }\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) === 9);\nconsole.log(do_algebra(['//', '+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [2, 3, 4, 5])\
    \ === 9);\nconsole.log(do_algebra(['//', '+', '*', '-'], [2, 3, 4, 6]));\nconsole.log(do_algebra(['//',\
    \ '+', '*', '-'], [2, 3, 4, 6]) === 10);\nconsole.log(do_algebra(['//', '+', '*',\
    \ '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['//', '+', '*', '-'], [1, 2,\
    \ 3, 4]) === -3);\nconsole.log(do_algebra(['//', '+', '*', '-'], [11, 2, 3, 4]));\n\
    console.log(do_", "  let result = operand[0];\n  for (let i = 0; i < operator.length;\
    \ i++) {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    let result: number\
    \ = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        let\
    \ currOperator: string = operator[i];\n        let currOperand: number = operand[i\
    \ + 1];\n        switch (currOperator) {\n            case '+':\n            \
    \    result += currOperand;\n                break;\n            case '-':\n \
    \               result -= currOperand;\n                break;\n            case\
    \ '*':\n                result *= currOperand;\n                break;\n     \
    \       case '//':\n                result = Math.floor(result / currOperand);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ currOperand);\n                break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//',\
    \ '**', '//'], [100, 2, 5]));", "  let result = operand[0];\n  for (let i = 0;\
    \ i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result +=\
    \ operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i\
    \ + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n\
    \    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['*', '//', '**'], [1, 2,\
    \ 4, 2]));\nconsole.log(do_algebra(['+', '-'], [2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [4, 2, 3]));\nconsole.log(do_algebra(['+', '-'], [5, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [5, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-'], [5, 3, 2, 4]));\n\
    console.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 3]));\nconsole.log(do_algebra(['*',\
    \ '//', '**'], [1, 2, 4, 2, 4]));\nconsole.log(do_algebra(['*', '//', '**'], [1,\
    \ 2, 4, 2, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [3, 2, 3, 4, 5]));\n\
    console.log(do_algebra(['*', '//', '**'", "  return eval(`${operand[0]}${operator[0]}${operand[1]}${operator[1]}${operand[2]}${operator[2]}${operand[3]}`);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
