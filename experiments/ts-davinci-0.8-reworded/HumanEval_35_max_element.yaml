name: HumanEval_35_max_element
language: ts
prompt: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n//\
  \ 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
  \ max_element(l: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
  \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
  }\n\ntest();"
completions: ["    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    return 0;\n}\n", "    if (l.length === 0) {\n        return\
    \ null;\n    }\n    let current_max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > current_max) {\n            current_max = l[i];\n\
    \        }\n    }\n    return current_max;\n}\n", "  return l.reduce((a, c) =>\
    \ (a < c ? c : a));\n}\n", "    let maximum: number = l[0];\n    for (let i =\
    \ 1; i < l.length; i++) {\n        if (l[i] > maximum) {\n            maximum\
    \ = l[i];\n        }\n    }\n    return maximum;\n}\n", "    if (l.length ===\
    \ 0) {\n        throw new Error(\"max_element() must have at least one element!\"\
    );\n    }\n    return l.reduce((max, cur) => Math.max(max, cur));\n}\n", "   \
    \ let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n",
  "  let max = l[0];\n  let x = 1;\n  while (x < l.length) {\n    if (l[x] > max)\
    \ {\n      max = l[x];\n    }\n    x = x + 1;\n  }\n  return max;\n}\n", "  let\
    \ largest = l[0];\n  for (let e of l) {\n    if (e > largest) {\n      largest\
    \ = e;\n    }\n  }\n  return largest;\n}\n", "  return l.reduce((a, b) => Math.max(a,\
    \ b));\n}\n", "  let retval = l[0];\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] > retval) {\n      retval = l[i];\n    }\n  }\n  return retval;\n\
    }\n", "  var maximum: number = l[0];\n  for (var i = 1; i < l.length; i++) {\n\
    \    if (l[i] > maximum) {\n      maximum = l[i];\n    }\n  }\n  return maximum;\n\
    }\n", "    return Math.max(...l);\n}\n", "    let max = 0;\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n", "  let max: number = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;\n}\n", "    let result = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > result) {\n            result = l[i];\n        }\n\
    \    }\n    return result;\n}\n", "  return Math.max(...l);\n}\n", "    return\
    \ Math.max(...l);\n}\n", "    return l.reduce((x, y) => x > y ? x : y);\n}\n",
  "  return -1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
