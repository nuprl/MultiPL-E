name: HumanEval_35_max_element
language: ts
prompt: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n//\
  \ 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
  \ max_element(l: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
  \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
  }\n\ntest();"
completions: ["    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n   \
    \     if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    return 0;\n}\n", "    if (l.length === 0) {\n        return\
    \ null;\n    }\n    let current_max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > current_max) {\n            current_max = l[i];\n\
    \        }\n    }\n    return current_max;\n}\n", "  return l.reduce((a, c) =>\
    \ (a < c ? c : a));\n}\n", "    let maximum: number = l[0];\n    for (let i =\
    \ 1; i < l.length; i++) {\n        if (l[i] > maximum) {\n            maximum\
    \ = l[i];\n        }\n    }\n    return maximum;\n}\n", "    if (l.length ===\
    \ 0) {\n        throw new Error(\"max_element() must have at least one element!\"\
    );\n    }\n    return l.reduce((max, cur) => Math.max(max, cur));\n}\n", "   \
    \ let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n",
  "  let max = l[0];\n  let x = 1;\n  while (x < l.length) {\n    if (l[x] > max)\
    \ {\n      max = l[x];\n    }\n    x = x + 1;\n  }\n  return max;\n}\n", "  let\
    \ largest = l[0];\n  for (let e of l) {\n    if (e > largest) {\n      largest\
    \ = e;\n    }\n  }\n  return largest;\n}\n", "  return l.reduce((a, b) => Math.max(a,\
    \ b));\n}\n", "  let retval = l[0];\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] > retval) {\n      retval = l[i];\n    }\n  }\n  return retval;\n\
    }\n", "  var maximum: number = l[0];\n  for (var i = 1; i < l.length; i++) {\n\
    \    if (l[i] > maximum) {\n      maximum = l[i];\n    }\n  }\n  return maximum;\n\
    }\n", "    return Math.max(...l);\n}\n", "    let max = 0;\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n", "  let max: number = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;\n}\n", "    let result = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > result) {\n            result = l[i];\n        }\n\
    \    }\n    return result;\n}\n", "  return Math.max(...l);\n}\n", "    return\
    \ Math.max(...l);\n}\n", "    return l.reduce((x, y) => x > y ? x : y);\n}\n",
  "  return -1;\n}\n", "  let maxElement = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > maxElement) {\n      maxElement = l[i];\n    }\n  }\n\
    \  return maxElement;\n}\n", "    let m = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > m) {\n            m = l[i];\n        }\n    }\n \
    \   return m;\n}\n", "  if (l.length === 0) {\n    return 0;\n  }\n  let maximum\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > maximum) {\n\
    \      maximum = l[i];\n    }\n  }\n  return maximum;\n}\n", "    return l.reduce((a,\
    \ b) => Math.max(a, b));\n}\n", "  return l.reduce((max, e) => Math.max(max, e));\n\
    }\n", "  if (l.length == 0) {\n    return 0;\n  } else {\n    var max: number\
    \ = l[0];\n    for (var i = 1; i < l.length; i++) {\n      if (l[i] > max) {\n\
    \        max = l[i];\n      }\n    }\n    return max;\n  }\n}\n", "  return l.reduce((max,\
    \ cur) => Math.max(max, cur));\n}\n", "    return l.reduce((acc, item) => Math.max(acc,\
    \ item), -Infinity);\n}\n", "    let max = 0;\n    l.forEach(v => {\n        if\
    \ (v > max) {\n            max = v;\n        }\n    });\n    return max;\n}\n",
  "    let i: number;\n    let max: number = l[0];\n    for (i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "  let ret = -Infinity;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] > ret) {\n      ret = l[i];\n    }\n  }\n  return ret;\n\
    }\n", "    if (l.length === 0)\n        return undefined;\n    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max)\n         \
    \   max = l[i];\n    }\n    return max;\n}\n", "  return Math.max(...l);\n}\n",
  "    return l.reduce((a, b) => Math.max(a, b));\n}\n", "    if (l.length == 0) {\n\
    \        throw new Error('Empty list!')\n    }\n    let m = l[0]\n    for (let\
    \ i = 1; i < l.length; i++) {\n        m = Math.max(m, l[i])\n    }\n    return\
    \ m\n}\n", "    let max: number = l[0];\n    let i: number = 0;\n    while (i\
    \ < l.length) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n\
    \        i = i + 1;\n    }\n    return max;\n}\n", "    let max: number = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    if (l.length\
    \ == 0) {\n        throw new Error(\"input list is empty\");\n    }\n\n    let\
    \ largest = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > largest) {\n            largest = l[i];\n        }\n    }\n    return largest;\n\
    }\n", "    let current = l[0];\n    for (let i = 1; i < l.length; i++) {\n   \
    \     if (l[i] > current) {\n            current = l[i];\n        }\n    }\n \
    \   return current;\n}\nconsole.log(max_element([1, 2, 3]));\nconsole.log(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  let max = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;\n}\n", "    let max: number = l[0];\n    for (let i: number\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    var max = l[0];\n    for (var i\
    \ = 1; i < l.length; i++) {\n        max = l[i] > max ? l[i] : max;\n    }\n \
    \   return max;\n}\n", "    if (l.length === 0) {\n        throw \"max_element:\
    \ empty list\";\n    }\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    let max: number = -1;\n    let i: number = 0;\n \
    \   while (i < l.length) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n        i = i + 1;\n    }\n    return max;\n}\n", "    return 0;\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    return Math.max(...l);\n}\n", "    return l.reduce((max: number, el:\
    \ number) => Math.max(max, el), -Infinity);\n}\n", "    let m = -Infinity;\n \
    \   for (let x of l)\n        if (x > m)\n            m = x;\n    return m;\n\
    }\n", "  var max: number = l[0];\n  for (var i: number = 1; i < l.length; i++)\
    \ {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n",
  "    return 0;\n}\n", "  // TODO: implement me\n  return 0;\n}\n", "  var result\
    \ = l[0];\n  for (var i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n\
    \      result = l[i];\n    }\n  }\n  return result;\n}\n", "    let m: number\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > m) {\n\
    \            m = l[i];\n        }\n    }\n    return m;\n}\n", "    var max: number\
    \ = l[0];\n    var i = 0;\n    while (i < l.length) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n        i = i + 1;\n    }\n    return\
    \ max;\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "  // TODO\n  return undefined;\n}\n", "  return l.reduce((acc,\
    \ curr) => Math.max(acc, curr), l[0]);\n}\n", "    return Math.max(...l);\n}",
  "    return Math.max(...l);\n}\n", "  let max = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n\
    }\n", "    let x: number = l[0];\n    for (let i = 1; i < l.length; i++) {\n \
    \       if (l[i] > x) {\n            x = l[i];\n        }\n    }\n    return x;\n\
    }\n", "    let m = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if\
    \ (l[i] > m) {\n            m = l[i];\n        }\n    }\n    return m;\n}\n",
  "  return l.reduce((a, b) => Math.max(a, b));\n}\n", "    let max = 0;\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}\n", "    return 0;\n}\n", "  if\
    \ (l.length == 0) return 0;\n  return l.reduce((a, b) => Math.max(a, b));\n}\n",
  "  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max)\
    \ {\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "  // >>> max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  // 123\n  // >>> max_element([])\n \
    \ // undefined\n  if (l.length === 0) {\n    return undefined;\n  }\n\n  let max\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n   \
    \   max = l[i];\n    }\n  }\n  return max;\n}\n", "    let max = l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}\n", "  return Math.max(...l);\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    let max = -Infinity;\n    for (let i of l)\n        if (i > max)\n\
    \            max = i;\n    return max;\n}\n", "    return Math.max(...l);\n}\n",
  "  let biggest = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > biggest)\
    \ {\n      biggest = l[i];\n    }\n  }\n  return biggest;\n}\n", "  return Math.max(...l);\n\
    }\n", "    let max: number = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "    if (l.length == 0) {\n        return undefined;\n    }\n  \
    \  let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n",
  "    if (l.length == 0) {\n        return -Infinity;\n    } else {\n        return\
    \ Math.max(...l);\n    }\n}\n", "  let max = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n\
    }\n", "  let current_max = l[0];\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] > current_max) {\n      current_max = l[i];\n    }\n  }\n  return current_max;\n\
    }\n", "  var max = l[0];\n  for (var i = 1; i < l.length; i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n", "    let max_element\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max_element)\
    \ {\n            max_element = l[i];\n        }\n    }\n    return max_element;\n\
    }\n", "    if (l.length === 0) return 0;\n    let result = l[0];\n    for (let\
    \ i = 1; i < l.length; i++)\n        if (l[i] > result) result = l[i];\n    return\
    \ result;\n}\n", "    return l.reduce((i, j) => i > j ? i : j);\n}\n", "  var\
    \ m = l[0];\n  var i = 1;\n  while (i < l.length) {\n    if (l[i] > m) m = l[i];\n\
    \    i = i + 1;\n  }\n  return m;\n}\n", "    return l.reduce((max: number, cur:\
    \ number) => Math.max(max, cur));\n}\n", "    let max = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "  let max = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n \
    \ return max;\n}\n", "  return 0;\n}\n", "    return Math.max(...l);\n}", "  let\
    \ max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;\n}\n", "  return l.reduce((a, b)\
    \ => Math.max(a, b));\n}\n", "    if (l.length == 0) {\n        return 0;\n  \
    \  } else {\n        let largest: number = l[0];\n        for (let i = 1; i <\
    \ l.length; i++) {\n            if (l[i] > largest) {\n                largest\
    \ = l[i];\n            }\n        }\n        return largest;\n    }\n}\n", " \
    \ if (l.length == 0) return 0;\n  let max = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max) max = l[i];\n  }\n  return max;\n}\n", "    var\
    \ max: number = l[0];\n    for (var i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n",
  "    if (l.length === 0) {\n        throw \"max_element() called on empty list.\"\
    ;\n    }\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;\n}\n", "    if (l.length == 0) {\n        return null;\n    }\n\
    \    let max = l[0];\n    for (let i of l) {\n        if (i > max) {\n       \
    \     max = i;\n        }\n    }\n    return max;\n}\n", "  return Math.max(...l);\n\
    }\n", "    return Math.max(...l);\n}\n", "    if (l.length === 0) {\n        return\
    \ undefined;\n    }\n\n    let result = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > result) {\n            result = l[i];\n        }\n\
    \    }\n    return result;\n}\n", "    var ans = l[0];\n    for (var i = 1; i\
    \ < l.length; i++) {\n        if (l[i] > ans) {\n            ans = l[i];\n   \
    \     }\n    }\n    return ans;\n}\n", "    var m = l[0];\n    for (var i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > m) {\n            m = l[i];\n     \
    \   }\n    }\n    return m;\n}\n", "  let max = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n\
    }\n", "    return list_max(l);\n}\n", "    let max = l[0];\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n", "    return l.reduce((a, b) => Math.max(a,\
    \ b));\n}\n", "  let m = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if\
    \ (l[i] > m) {\n      m = l[i];\n    }\n  }\n  return m;\n}\n", "  let max = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "    let max = l[0];\n    for (let i = 1; i\
    \ < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\n", "  return Math.max(...l);\n}\n", "  let\
    \ m: number = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > m)\
    \ {\n      m = l[i];\n    }\n  }\n  return m;\n}\n", "    var m = l[0];\n    for\
    \ (var i = 1; i < l.length; i++) {\n        m = (l[i] > m) ? l[i] : m;\n    }\n\
    \    return m;\n}\n", "    return Math.max(...l);\n}\n", "  return l.reduce((x,\
    \ y) => x > y ? x : y);\n}\n", "    if (l.length === 0) {\n        return 0;\n\
    \    }\n    let max: number = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}", "    return ([] as number[]).concat(l).sort((a, b) => b - a)[0];\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "    return Math.max(...l);\n}\n", "    let max = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let res = Number.MIN_SAFE_INTEGER;\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] > res) {\n       \
    \     res = l[i];\n        }\n    }\n    return res;\n}\n\ntest(\"#13\", () =>\
    \ {\n    expect(max_element([1, 2, 3])).toBe(3);\n    expect(max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])).toBe(123);\n});\n", "    if (l.length ==\
    \ 0) {\n        return 0;\n    }\n    let result = 0;\n    for (let i = 0; i <\
    \ l.length; i++) {\n        result = result < l[i] ? l[i] : result;\n    }\n \
    \   return result;\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "  let max: number = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n\
    }\n", "  return -1;\n}\n", "    let max: number = l[0];\n    for (let i = 1; i\
    \ < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\n", "    let max = l[0];\n    for (let i =\
    \ 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "  return l.reduce((a, b) => (a > b\
    \ ? a : b), -Infinity);\n}\n", "  return l.reduce((a, b) => Math.max(a, b), 0);\n\
    }\n", "    let max: number = l[0];\n    let len: number = l.length;\n    for (let\
    \ i: number = 1; i < len; i++) {\n        if (l[i] > max) {\n            max =\
    \ l[i];\n        }\n    }\n    return max;\n}\n", "    let max = l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}\n", "    return Math.max(...l);\n\
    }\n", "    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n", "  if (l.length === 0) {\n    return undefined;\n  }\n  let max = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "    return 0;\n}\n", "  if (l.length == 0)\
    \ {\n    throw \"Empty array\";\n  }\n  var result = l[0];\n  var length = l.length;\n\
    \  for (var i = 1; i < length; i++) {\n    if (l[i] > result) {\n      result\
    \ = l[i];\n    }\n  }\n  return result;\n}\n", "  // Your code here\n  if(l.length\
    \ == 0) return -1\n  let max = 0;\n  for(let i=0; i<l.length; i++){\n    if(l[i]\
    \ > max) max = l[i]\n  }\n  return max\n}\n", "  let element: number = 0;\n  for\
    \ (let i: number = 0; i < l.length; i++) {\n    if (l[i] > element) {\n      element\
    \ = l[i];\n    }\n  }\n  return element;\n}\n", "  let max = l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;\n}\n", "    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    var max = l[0];\n    var len = l.length;\n    for\
    \ (var i = 1; i < len; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    var max = l[0];\n    var i = 0;\n\
    \    while (i < l.length) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n        i = i + 1;\n    }\n    return max;\n}\n", "  let max = 0;\n\
    \  for (let element of l) {\n    if (element > max) {\n      max = element;\n\
    \    }\n  }\n  return max;\n}\n", "    let max: number = l[0];\n    let i: number\
    \ = 0;\n    while (i < l.length) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n        i = i + 1;\n    }\n    return max;\n}\n", "  return\
    \ Math.max(...l);\n}\n", "    return l.reduce((acc, elem) => {\n        return\
    \ acc > elem ? acc : elem;\n    });\n}\n", "  return 0;\n}\n", "  return l.reduce((a,b)\
    \ => Math.max(a,b));\n}\n", "  let max = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n\
    }\n", "  return -1;\n}\n", "  // TODO: Return maximum element in the array.\n\
    \  return Math.max(...l);\n}\n", "  let maximum = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > maximum) {\n      maximum = l[i];\n    }\n\
    \  }\n  return maximum;\n}\n", "  //YOUR CODE HERE\n  let max = l[0];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;\n}\n", "    return l.reduce((a, b) => a > b ? a : b, l[0]);\n\
    }\n", "  return l.reduce((acc, v) => Math.max(acc, v), l[0]);\n}\n", "    let\
    \ max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "  let\
    \ max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n\
    \      max = l[i];\n    }\n  }\n  return max;\n}\n", "    return l.reduce((p,\
    \ c) => { return p > c ? p : c; });\n}\n", "    if (l.length == 0) return 0;\n\
    \    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\n", "  return l.reduce((a, b)\
    \ => Math.max(a, b));\n}\n", "  let maximum: number = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (l[i] > maximum) {\n      maximum = l[i];\n    }\n\
    \  }\n  return maximum;\n}\n", "  //Remove me, once you implement.\n  return -1;\n\
    }\n", "    let max = l[0];\n    let idx = 0;\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n            idx\
    \ = i;\n        }\n    }\n    return max;\n}", "    var max = l[0];\n    for (var\
    \ i = 1; i < l.length; i++) {\n        max = Math.max(max, l[i]);\n    }\n   \
    \ return max;\n}\n", "    return Math.max(...l);\n}\n", "  let max = l[0];\n \
    \ for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "  let index = 0;\n  let max = 0;\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    \
    \  index = i;\n    }\n  }\n  return max;\n}\n", "    var m: number = l[0];\n \
    \   for (var i = 1; i < l.length; i++) {\n        if (l[i] > m) {\n          \
    \  m = l[i];\n        }\n    }\n    return m;\n}\n", "    let max: number = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "  let max = l[0];\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n", "    let max: number = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n", "    let max: number = l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max\
    \ = l[i];\n        }\n    }\n    return max;\n}\n", "    return l.reduce((a, b)\
    \ => {\n        return Math.max(a, b);\n    });\n}\n", "    let max = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\n", "    return l.reduce((a,b)\
    \ => Math.max(a,b));\n}\n", "    return Math.max(...l);\n}\n", "    let max: number\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n", "  return Math.max(...l);\n\
    }", "    return Math.max(...l);\n}\n", "    let max = l[0];\n    for (let index\
    \ = 1; index < l.length; index++) {\n        if (l[index] > max) {\n         \
    \   max = l[index];\n        }\n    }\n    return max;\n}\n", "    return 0;\n\
    }\n", "    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n       \
    \ if (l[i] > max) max = l[i];\n    }\n    return max;\n}\n", "    return Math.max(...l);\n\
    }\n", "    return Math.max(...l);\n}\n", "    let m: number = l[0];\n    let i:\
    \ number = 0;\n    while (i < l.length) {\n        if (l[i] > m) {\n         \
    \   m = l[i];\n        }\n        i = i + 1;\n    }\n    return m;\n}\n", "  \
    \  return 0;\n}\n", "  let currentMax = l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > currentMax) {\n      currentMax = l[i];\n    }\n  }\n\
    \  return currentMax;\n}\n", "    let cur = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > cur) {\n            cur = l[i];\n        }\n    }\n\
    \    return cur;\n}\n", "    let max = l[0];\n    for (let x of l) {\n       \
    \ if (x > max) {\n            max = x;\n        }\n    }\n    return max;\n}\n",
  "    let a = l[0];\n    for (let x of l) {\n        if (x > a) {\n            a\
    \ = x;\n        }\n    }\n    return a;\n}\n\nconsole.log(max_element([1, 2, 3]));\n\
    console.log(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    let\
    \ max = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "    let\
    \ max: number = l[0];\n    for (let i: number = 1; i < l.length; i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "  // Your code here.\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n", "    if (l.length === 0) {\n        return 0;\n    }\n    let max\
    \ = l[0];\n    for (let i of l) {\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    return max;\n}\n", "    let m: number = l[0];\n    for\
    \ (let e of l) {\n        if (e > m) {\n            m = e;\n        }\n    }\n\
    \    return m;\n}\n", "    return l.reduce((a, b) => Math.max(a, b));\n}\n", " \
    \   return l.reduce((x, y) => Math.max(x, y));\n}\n", "    if (l.length === 0)\
    \ return null;\n    return Math.max(...l);\n}\n", "  return -1;\n}\n", "    return\
    \ 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
