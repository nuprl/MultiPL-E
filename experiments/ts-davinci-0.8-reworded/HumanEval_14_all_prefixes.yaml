name: HumanEval_14_all_prefixes
language: ts
prompt: "//Return array of all prefixes from shortest to longest of the input string\n\
  // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
  \ string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
  \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"\
  WWW\"]);\n}\n\ntest();"
completions: ["  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n", "    const prefixes: string[] = [];\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n\
    }\n\nexport function* stream_words(string: string): IterableIterator<string> {\n\
    \    const characters = string.split(\"\");\n    let index = 0;\n    while (index\
    \ < characters.length) {\n        let word = \"\";\n        while (index < characters.length\
    \ && is_letter(characters[index])) {\n            word += characters[index];\n\
    \            index++;\n        }\n        if (word !== \"\") {\n            yield\
    \ word;\n        }\n        index++;\n    }\n}\n\nexport function* stream_numbers(string:\
    \ string): IterableIterator<string> {\n    const characters = string.split(\"\"\
    );\n    let index = 0;\n    while (index < characters.length) {\n        let number\
    \ = \"\";\n        while (index < characters.length && is_digit(characters[index]))\
    \ {\n            number += characters[index];\n            index++;\n        }\n\
    \        if (number !== \"\") {\n            yield number;\n        }\n      \
    \  index++;\n    }\n}\n\nexport function* stream_line_numbers(string: string):\
    \ IterableIterator<string> {\n    const lines = string.split(\"\\n\");\n    let\
    \ line_number = 1;\n    while (line_number <= lines.length) {\n        yield line_number.toString();\n\
    \        line_number++;\n    }\n}\n", "    let result: string[] = [];\n    for\
    \ (let i: number = 1; i <= string.length; i++) {\n        result.push(string.substring(0,\
    \ i));\n    }\n    return result;\n}\n", "    return string.split(\"\").map((_,\
    \ i) => string.slice(0, i + 1));\n}\n", "    let prefixes: string[] = [];\n  \
    \  for (let i = 0; i < string.length; i++) {\n        prefixes.push(string.slice(0,\
    \ i + 1));\n    }\n    return prefixes;\n}\n", "    var prefixes: string[] = [];\n\
    \    for (var i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0,\
    \ i));\n    }\n    return prefixes;\n}\n", "    let answer: string[] = []\n  \
    \  for (let i: number = 1; i <= string.length; i++) {\n        answer.push(string.slice(0,\
    \ i))\n    }\n    return answer\n}\n", "    var prefixes: string[] = [];\n   \
    \ for (var i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0,\
    \ i));\n    }\n    return prefixes;\n}\n", "    var output = [];\n    for (var\
    \ i = 1; i <= string.length; i++) {\n        output.push(string.substring(0, i));\n\
    \    }\n    return output;\n}\n", "  let prefixes: string[] = [];\n  for (let\
    \ i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n\
    \  }\n  return prefixes;\n}\n", "    const result: string[] = [];\n    for (let\
    \ i = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n\
    \    }\n    return result;\n}\n", "  return string.split(\"\").map((letter, index)\
    \ => string.slice(0, index + 1));\n}\n", "    var all_prefixes: string[] = [];\n\
    \    for (var i = 0; i < string.length; i++) {\n        all_prefixes.push(string.substring(0,\
    \ i + 1));\n    }\n    return all_prefixes;\n}\n", "    var prefixes: string[]\
    \ = [];\n    for (var i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0,\
    \ i));\n    }\n    return prefixes;\n}\n", "    const num_prefixes = string.length;\n\
    \    const result = new Array<string>(num_prefixes);\n    for (let i = 0; i <\
    \ num_prefixes; i++) {\n        result[i] = string.slice(0, i + 1);\n    }\n \
    \   return result;\n}\n", "    let prefixes: string[] = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n\
    \    }\n    return prefixes;\n}\n", "  let result: string[] = [];\n  for (let\
    \ i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i + 1));\n\
    \  }\n  return result;\n}\n", "    let result: string[] = [];\n    for (let i\
    \ = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n\
    \    }\n    return result;\n}\n", "    let results: string[] = []\n    for (let\
    \ i: number = 1; i <= string.length; i++) {\n        results.push(string.slice(0,\
    \ i))\n    }\n    return results\n}\n", "    return string.split(\"\").map((e,\
    \ i, a) => a.slice(0, i + 1).join(\"\"));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
