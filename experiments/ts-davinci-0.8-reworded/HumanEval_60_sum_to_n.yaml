name: HumanEval_60_sum_to_n
language: ts
prompt: "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
  // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
  // 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_to_n;\n  assert.deepEqual(candidate(1),1);\n \
  \ assert.deepEqual(candidate(6),21);\n  assert.deepEqual(candidate(11),66);\n  assert.deepEqual(candidate(30),465);\n\
  \  assert.deepEqual(candidate(100),5050);\n}\n\ntest();"
completions: ["  // YOUR CODE HERE\n  return 0;\n}\n", "    // FIXME: Implement this!\n\
    \    return -1;\n}\n", "    return n * (n + 1) / 2;\n}\n", "  let sum = 0;\n \
    \ for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n", " \
    \ return (n * (n + 1)) / 2;\n}\n", "    let sum: number = 0;\n    for (let i:\
    \ number = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
  "    if (n == 1) {\n        return 1;\n    }\n    return n + sum_to_n(n - 1);\n\
    }\nconsole.log(sum_to_n(10));\nconsole.log(sum_to_n(100));\nconsole.log(sum_to_n(5));\n\
    console.log(sum_to_n(1));\n", "    if (n === 1) {\n        return 1;\n    }\n\
    \    return n + sum_to_n(n - 1);\n}\n", "    if (n <= 1) {\n        return n;\n\
    \    } else {\n        return n + sum_to_n(n - 1);\n    }\n}\n", "    return n\
    \ * (n + 1) / 2;\n}\n", "    return ((n + 1) * n) / 2;\n}\n\nconsole.log(sum_to_n(30));\n\
    console.log(sum_to_n(100));\nconsole.log(sum_to_n(5));\nconsole.log(sum_to_n(10));\n\
    console.log(sum_to_n(1));\n", "  // --- YOUR CODE HERE ---\n  return 0;\n}\n",
  "    if (n == 1) return 1;\n    return n + sum_to_n(n - 1);\n}\n", "  return (n\
    \ * (n + 1)) / 2;\n}\n\nexport { sum_to_n };", "  let sum = 0;\n  let i = 1;\n\
    \  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n}\n\ndescribe(\"\
    sum_to_n(n)\", () => {\n  it(\"should calculate the sum from 1 to 10\", () =>\
    \ {\n    expect(sum_to_n(10)).toEqual(55);\n  });\n  it(\"should calculate the\
    \ sum from 1 to 30\", () => {\n    expect(sum_to_n(30)).toEqual(465);\n  });\n\
    \  it(\"should calculate the sum from 1 to 100\", () => {\n    expect(sum_to_n(100)).toEqual(5050);\n\
    \  });\n  it(\"should calculate the sum from 1 to 5\", () => {\n    expect(sum_to_n(5)).toEqual(15);\n\
    \  });\n  it(\"should calculate the sum from 1 to 1\", () => {\n    expect(sum_to_n(1)).toEqual(1);\n\
    \  });\n});\n", "  return (n * (n + 1)) / 2;\n}\n", "    return (n * (n + 1))\
    \ / 2;\n}\n", "  let sum: number = 0;\n  for (let i: number = 1; i <= n; i++)\
    \ {\n    sum += i;\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconsole.log(sum_to_n(30));\n\
    console.log(sum_to_n(100));\nconsole.log(sum_to_n(5));\nconsole.log(sum_to_n(10));\n\
    console.log(sum_to_n(1));", "  return (n*(n+1))/2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
