name: HumanEval_87_get_row
language: ts
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst:\
  \ number[][], x: number): [number, number][] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
  \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2,\
  \ 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\
  \  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n\
  \  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    const coordinates: [number, number][] = [];\n    lst.forEach((row,\
    \ rowIndex) => {\n        row.forEach((column, columnIndex) => {\n           \
    \ if (column === x) {\n                coordinates.push([rowIndex, columnIndex]);\n\
    \            }\n        });\n    });\n    return coordinates.sort((a, b) => a[0]\
    \ - b[0] || b[1] - a[1]);\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "    const res: [number, number][]\
    \ = [];\n    lst.forEach((row, i) => {\n        if (row.includes(x)) {\n     \
    \       for (let j = 0; j < row.length; j++) {\n                if (row[j] ===\
    \ x) {\n                    res.push([i, j]);\n                }\n           \
    \ }\n        }\n    });\n    return res.sort((a, b) => {\n        if (a[0] ===\
    \ b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n\
    \    });\n}\n", "  const rows = [];\n  for (let y = 0; y < lst.length; y++) {\n\
    \    for (let x = 0; x < lst[y].length; x++) {\n      if (lst[y][x] === x) {\n\
    \        rows.push([y, x]);\n      }\n    }\n  }\n  return rows.sort(([y1, x1],\
    \ [y2, x2]) => {\n    if (y1 > y2) {\n      return 1;\n    } else if (y1 < y2)\
    \ {\n      return -1;\n    } else {\n      if (x1 > x2) {\n        return -1;\n\
    \      } else if (x1 < x2) {\n        return 1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n}\n\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\n", "  return lst\n    .reduce((acc,\
    \ row, row_idx) => {\n      const y_lst = row.reduce((acc_row, cell, y_idx) =>\
    \ {\n        if (cell === x) {\n          acc_row.push([row_idx, y_idx]);\n  \
    \      }\n        return acc_row;\n      }, []);\n      return acc.concat(y_lst);\n\
    \    }, [])\n    .sort((a, b) => {\n      if (a[0] === b[0]) {\n        return\
    \ a[1] - b[1];\n      }\n      return a[0] - b[0];\n    });\n}\n", "    let arr:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                arr.push([i, j]);\n            }\n        }\n    }\n    return\
    \ arr.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1]\
    \ - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "  let res:\
    \ [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    let\
    \ row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j]\
    \ === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a, b)\
    \ => a[0] - b[0]);\n  for (let i = 0; i < res.length; i++) {\n    let row = res[i];\n\
    \    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x) {\n     \
    \   res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n", "    const result:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                result.push([i, j]);\n            }\n        }\n    }\n \
    \   return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n           \
    \ return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n",
  "    let res: [number, number][] = [];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n        \
    \    if (lst[i][j] === x) {\n                res.push([i, j]);\n            }\n\
    \        }\n    }\n    res.sort((a, b) => a[0] - b[0]);\n    for (let i: number\
    \ = 0; i < res.length; i++) {\n        if (res[i][0] !== res[i - 1][0]) {\n  \
    \          res.sort((a, b) => b[1] - a[1]);\n        }\n    }\n    return res;\n\
    }\n", "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let row: number[] = lst[i];\n        for (let j = 0; j < row.length;\
    \ j++) {\n            if (row[j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n  \
    \  result.sort((a, b) => a[1] - b[1]);\n    return result;\n}\n", "    const res:\
    \ [number, number][] = [];\n    lst.forEach((v, i) => {\n        v.forEach((v,\
    \ j) => {\n            if (v === x) {\n                res.push([i, j]);\n   \
    \         }\n        });\n    });\n    res.sort((a, b) => a[0] - b[0]);\n    res.forEach((v,\
    \ i) => {\n        res.forEach((v, j) => {\n            if (v[0] === i) {\n  \
    \              res.sort((a, b) => b[1] - a[1]);\n            }\n        });\n\
    \    });\n    return res;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\nconsole.log(get_row([[],\
    \ [1], [1, 2, 3]], 3));\n", "  return lst\n    .map((row, rowIndex) =>\n     \
    \ row\n        .map((item, columnIndex) => ({ item, rowIndex, columnIndex }))\n\
    \        .filter(({ item }) => item === x)\n    )\n    .flat()\n    .sort((a,\
    \ b) => {\n      if (a.rowIndex !== b.rowIndex) {\n        return a.rowIndex -\
    \ b.rowIndex;\n      }\n      return b.columnIndex - a.columnIndex;\n    })\n\
    \    .map(({ rowIndex, columnIndex }) => [rowIndex, columnIndex]);\n}\n", "  const\
    \ xCoordinates: [number, number][] = [];\n  lst.forEach((row, i) => {\n    row.forEach((col,\
    \ j) => {\n      if (col === x) {\n        xCoordinates.push([i, j]);\n      }\n\
    \    });\n  });\n  xCoordinates.sort((a, b) => {\n    return a[0] - b[0] || b[1]\
    \ - a[1];\n  });\n  return xCoordinates;\n}\n", "    let row_cols: [number, number][]\
    \ = [];\n    lst.forEach((row, row_num) => {\n        row.forEach((col, col_num)\
    \ => {\n            if (col === x) {\n                row_cols.push([row_num,\
    \ col_num]);\n            }\n        });\n    });\n    row_cols.sort((a, b) =>\
    \ {\n        let result = a[0] - b[0];\n        if (result === 0) {\n        \
    \    result = b[1] - a[1];\n        }\n        return result;\n    });\n    return\
    \ row_cols;\n}\n", "  return lst\n    .map((row, row_index) =>\n      row\n  \
    \      .map((column, column_index) =>\n          column === x ? [row_index, column_index]\
    \ : null\n        )\n        .filter(Boolean)\n    )\n    .flat()\n    .sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  return lst\n    .map((row, i) =>\
    \ row.map((num, j) => [i, j]))\n    .reduce((acc, curr) => [...acc, ...curr],\
    \ [])\n    .filter(([i, j]) => lst[i][j] === x)\n    .sort(([x1, y1], [x2, y2])\
    \ => {\n      if (x1 !== x2) {\n        return x1 - x2;\n      }\n      return\
    \ y2 - y1;\n    });\n}\n", "    const result: [number, number][] = [];\n    lst.forEach((row,\
    \ r) => {\n        row.forEach((element, c) => {\n            if (element ===\
    \ x) {\n                result.push([r, c]);\n            }\n        });\n   \
    \ });\n    return result.sort((a, b) => (a[0] > b[0] ? 1 : a[0] < b[0] ? -1 :\
    \ b[1] - a[1]));\n}\n", "    let result: [number, number][] = [];\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n\
    \    for (let i: number = 0; i < result.length; i++) {\n        if (result[i][0]\
    \ === result[i + 1][0]) {\n            result.sort((a, b) => b[1] - a[1]);\n \
    \       }\n    }\n    return result;\n}", "  return [];\n}\n\nexport { is_isogram,\
    \ is_upper, get_factors, get_row };", "  const result: [number, number][] = [];\n\
    \  lst.forEach((row, i) => {\n    row.forEach((item, j) => {\n      if (item ===\
    \ x) {\n        result.push([i, j]);\n      }\n    });\n  });\n  return result.sort((a,\
    \ b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n}\n", "  let result: [number, number][] = [];\n  lst.forEach((row,\
    \ rowIndex) => {\n    row.forEach((number, numberIndex) => {\n      if (number\
    \ === x) {\n        result.push([rowIndex, numberIndex]);\n      }\n    });\n\
    \  });\n  // sort by rows in ascending order\n  result.sort((a, b) => a[0] - b[0]);\n\
    \  // sort by columns in descending order\n  result.sort((a, b) => b[1] - a[1]);\n\
    \  return result;\n}\n", "  let res: [number, number][] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    let row = lst[i];\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n\
    \  }\n  res.sort((e1, e2) => {\n    if (e1[0] - e2[0] !== 0) {\n      return e1[0]\
    \ - e2[0];\n    } else {\n      return e2[1] - e1[1];\n    }\n  });\n  return\
    \ res;\n}\n", "    const result: [number, number][] = [];\n    for (let r: number\
    \ = 0; r < lst.length; r++) {\n        for (let c: number = 0; c < lst[r].length;\
    \ c++) {\n            if (lst[r][c] === x) {\n                result.push([r,\
    \ c]);\n            }\n        }\n    }\n    return result;\n}", "    return lst.reduce((acc:\
    \ [number, number][], x: number[], y: number) =>\n        acc.concat(x.reduce((acc:\
    \ [number, number][], x: number, z: number) =>\n            x === x ? acc.concat([[y,\
    \ z]]) : acc, [])), [])\n        .sort(([y1, z1], [y2, z2]) => {\n           \
    \ if (y1 === y2) return z2 - z1;\n            return y1 - y2;\n        });\n}",
  "  return lst\n    .map((row, i) =>\n      row\n        .map((item, j) => (item\
    \ === x ? [i, j] : null))\n        .filter(x => x)\n        .sort((a, b) => b[1]\
    \ - a[1])\n    )\n    .flat()\n    .sort((a, b) => a[0] - b[0]);\n}\n", "    return\
    \ lst.reduce((res, e, i) => {\n        return res.concat(e.reduce((new_e, e1,\
    \ j) => e1 === x ? new_e.concat([[i, j]]) : new_e, []));\n    }, []).sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n\n  const a: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        a.push([i, j]);\n      }\n    }\n  }\n\n  return a.sort((a, b)\
    \ => {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n    } else {\n  \
    \    return b[1] - a[1];\n    }\n  });\n}\n", "  let res: [number, number][] =\
    \ [];\n  for (let i = 0; i < lst.length; i++) {\n    let idx = lst[i].indexOf(x);\n\
    \    while (idx !== -1) {\n      res.push([i, idx]);\n      idx = lst[i].indexOf(x,\
    \ idx + 1);\n    }\n  }\n  res.sort((a, b) => {\n    if (a[0] < b[0]) {\n    \
    \  return -1;\n    } else if (a[0] > b[0]) {\n      return 1;\n    } else {\n\
    \      if (a[1] > b[1]) {\n        return -1;\n      } else if (a[1] < b[1]) {\n\
    \        return 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n\
    \  return res;\n}\n", "  let res: [number, number][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n    \
    \  if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return\
    \ res;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\nconsole.log(get_row([[], [1],\
    \ [1, 2, 3]], 3));", "    let a = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let b = [];\n        for (let j = 0; j < lst[i].length; j++) {\n\
    \            if (lst[i][j] == x) {\n                b.push([i, j]);\n        \
    \    }\n        }\n        a.push(b);\n    }\n    let c = [];\n    for (let i\
    \ = 0; i < a.length; i++) {\n        for (let j = 0; j < a[i].length; j++) {\n\
    \            c.push(a[i][j]);\n        }\n    }\n    function sortNumber(a, b)\
    \ {\n        return a[0] - b[0];\n    }\n    function sortNumber1(a, b) {\n  \
    \      return b[1] - a[1];\n    }\n    c.sort(sortNumber);\n    for (let i = 0;\
    \ i < c.length; i++) {\n        if (c[i][0] == c[i + 1][0]) {\n            c.sort(sortNumber1);\n\
    \        }\n    }\n    return c;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\n\
    console.log(get_row([[], [1], [1, 2, 3]], 3));", "    let ret: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  ret.push([i, j]);\n            }\n        }\n    }\n    return ret.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return a[1] - b[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n}\n", "    const result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        const current_row\
    \ = lst[i];\n        for (let j = 0; j < current_row.length; j++) {\n        \
    \    if (current_row[j] === x) {\n                result.push([i, j]);\n     \
    \       }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0]\
    \ === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0]\
    \ - b[0];\n    });\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\nconsole.log(get_row([[],\
    \ [1], [1, 2, 3]], 3));\n", "  const coords: [number, number][] = [];\n  for (let\
    \ row = 0; row < lst.length; row++) {\n    const list = lst[row];\n    for (let\
    \ col = 0; col < list.length; col++) {\n      if (list[col] === x) {\n       \
    \ coords.push([row, col]);\n      }\n    }\n  }\n  return coords.sort((a, b) =>\
    \ {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0]\
    \ - b[0];\n  });\n}\n", "  const result: [number, number][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n\
    \  }\n  return result.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return\
    \ a[0] - b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n}\n", " \
    \   const result: [number, number][] = [];\n    lst.forEach((row, row_index) =>\
    \ {\n        row.forEach((element, element_index) => {\n            if (element\
    \ === x) {\n                result.push([row_index, element_index]);\n       \
    \     }\n        });\n    });\n    return result.sort((a, b) => {\n        if\
    \ (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return\
    \ a[0] - b[0];\n    });\n}\n", "  let result: [number, number][] = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++)\
    \ {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n   \
    \ }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n\
    \    } else if (a[0] < b[0]) {\n      return -1;\n    } else {\n      if (a[1]\
    \ > b[1]) {\n        return -1;\n      } else if (a[1] < b[1]) {\n        return\
    \ 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n  return result;\n\
    }\n", "    const indexes: [number, number][] = [];\n    for (let r = 0; r < lst.length;\
    \ r++) {\n        const row = lst[r];\n        for (let c = 0; c < row.length;\
    \ c++) {\n            if (row[c] === x) {\n                indexes.push([r, c]);\n\
    \            }\n        }\n    }\n    return indexes.sort((a, b) => {\n      \
    \  if (a[0] < b[0]) {\n            return -1;\n        } else if (a[0] > b[0])\
    \ {\n            return 1;\n        } else {\n            if (a[1] > b[1]) {\n\
    \                return -1;\n            } else if (a[1] < b[1]) {\n         \
    \       return 1;\n            } else {\n                return 0;\n         \
    \   }\n        }\n    });\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "    let ret_lst: [number, number][]\
    \ = [];\n    for (let row = 0; row < lst.length; row++) {\n        for (let col\
    \ = 0; col < lst[row].length; col++) {\n            if (lst[row][col] === x) {\n\
    \                ret_lst.push([row, col]);\n            }\n        }\n    }\n\
    \    ret_lst.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return\
    \ a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n        }\n\
    \    });\n    return ret_lst;\n}\n", "    // TODO: implement the function\n  \
    \  let i = 0;\n    let result = [];\n    for (let row of lst) {\n        for (let\
    \ j = 0; j < row.length; j++) {\n            if (row[j] === x) {\n           \
    \     result.push([i, j]);\n            }\n        }\n        i++;\n    }\n  \
    \  return result.sort(function (a, b) {\n        if (a[0] !== b[0]) {\n      \
    \      return a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n\
    \        }\n    });\n}\n\n", "  // your code here\n  let ret: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        ret.push([i, j]);\n      }\n \
    \   }\n  }\n  ret.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return a[1]\
    \ < b[1] ? 1 : -1;\n    }\n    return a[0] - b[0];\n  });\n  return ret;\n}\n",
  "    const data = new Map();\n    lst.forEach((elem, i) => {\n        elem.forEach((el,\
    \ j) => {\n            if (el === x) {\n                if (data.has(i)) {\n \
    \                   data.get(i).push(j);\n                } else {\n         \
    \           data.set(i, [j]);\n                }\n            }\n        });\n\
    \    });\n    const result = [];\n    for (const key of Array.from(data.keys()).sort((a,\
    \ b) => a - b)) {\n        result.push(...data.get(key).sort((a, b) => b - a).map(elem\
    \ => [key, elem]));\n    }\n    return result;\n}\n", "    let result: [number,\
    \ number][] = [];\n    lst.forEach((item, i) => {\n        item.forEach((item2,\
    \ j) => {\n            if (item2 === x) {\n                result.push([i, j]);\n\
    \            }\n        });\n    });\n    return result.sort((a, b) => {\n   \
    \     if (a[0] < b[0]) {\n            return -1;\n        } else if (a[0] > b[0])\
    \ {\n            return 1;\n        } else {\n            if (a[1] > b[1]) {\n\
    \                return -1;\n            } else if (a[1] < b[1]) {\n         \
    \       return 1;\n            } else {\n                return 0;\n         \
    \   }\n        }\n    });\n}", "  if (lst.length == 0) {\n    return [];\n  }\n\
    \n  let ans: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == x)\
    \ {\n        ans.push([i, j]);\n      }\n    }\n  }\n\n  ans.sort((a, b) => {\n\
    \    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n    \
    \  return -1;\n    }\n    if (a[1] > b[1]) {\n      return -1;\n    }\n    if\
    \ (a[1] < b[1]) {\n      return 1;\n    }\n    return 0;\n  });\n\n  return ans;\n\
    }\n", "  const result: [number, number][] = [];\n  let i: number = 0;\n  for (let\
    \ row of lst) {\n    let j: number = 0;\n    for (let column of row) {\n     \
    \ if (column === x) {\n        result.push([i, j]);\n      }\n      j++;\n   \
    \ }\n    i++;\n  }\n  return result.sort((e1, e2) => {\n    if (e1[0] === e2[0])\
    \ {\n      return e2[1] - e1[1];\n    }\n    return e1[0] - e2[0];\n  });\n}\n",
  "  const result: [number, number][] = [];\n  lst.forEach((row, i) => {\n    row.forEach((col,\
    \ j) => {\n      if (col === x) {\n        result.push([i, j]);\n      }\n   \
    \ });\n  });\n  return result.sort((a, b) => {\n    if (a[0] === b[0]) {\n   \
    \   return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n}\n", "    let\
    \ coordinates: [number, number][] = [];\n    let row_index = 0;\n    lst.forEach(row\
    \ => {\n        let col_index = 0;\n        row.forEach(column => {\n        \
    \    if (column === x) {\n                coordinates.push([row_index, col_index]);\n\
    \            }\n            col_index += 1;\n        });\n        row_index +=\
    \ 1;\n    });\n    return coordinates.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n\
    }\n\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1));\nconsole.log(get_row([], 1));\nconsole.log(get_row([[], [1], [1,\
    \ 2, 3]], 3));\n", "  const row_column_mapping: {[key: number]: Array<number>}\
    \ = {};\n  lst.forEach((row, row_index) => {\n    row.forEach((column, column_index)\
    \ => {\n      if (column === x) {\n        if (row_column_mapping[row_index])\
    \ {\n          row_column_mapping[row_index].push(column_index);\n        } else\
    \ {\n          row_column_mapping[row_index] = [column_index];\n        }\n  \
    \    }\n    });\n  });\n  return Object.keys(row_column_mapping)\n    .map(row_index\
    \ => [\n      parseInt(row_index, 10),\n      ...row_column_mapping[row_index].sort((a,\
    \ b) => b - a)\n    ])\n    .sort((a, b) => a[0] - b[0])\n    .map(coordinates\
    \ => coordinates.slice(1).map(column_index => [parseInt(coordinates[0], 10), column_index]))\n\
    \    .reduce((acc, curr) => acc.concat(curr), []);\n}", "  const result: [number,\
    \ number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j =\
    \ 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i,\
    \ j]);\n      }\n    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] <\
    \ b[0]) {\n      return -1;\n    } else if (a[0] > b[0]) {\n      return 1;\n\
    \    } else {\n      if (a[1] > b[1]) {\n        return -1;\n      } else if (a[1]\
    \ < b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n \
    \   }\n  });\n}\n", "  return lst\n    .map((x_lst, i) =>\n      x_lst\n     \
    \   .map((y, j) => [i, j])\n        .filter((y) => y[1] === x)\n        .sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1])\n    )\n    .reduce((a, b) => a.concat(b),\
    \ []);\n}\n", "    // your code here\n    let arr: [number, number][] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] == x) {\n                arr.push([i, j]);\n\
    \            }\n        }\n    }\n    return arr.sort(function (a, b) {\n    \
    \    return a[0] - b[0] || b[1] - a[1];\n    });\n}\n\n\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([],\
    \ 1));\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));\n", "    const result:\
    \ [number, number][] = [];\n    lst.forEach((row, rowIndex) => {\n        row.forEach((col,\
    \ colIndex) => {\n            if (col === x) {\n                result.push([rowIndex,\
    \ colIndex]);\n            }\n        });\n    });\n    return result.sort((a,\
    \ b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n   \
    \     } else {\n            return b[1] - a[1];\n        }\n    });\n}", "   \
    \ const result: [number, number][] = [];\n    lst.forEach((row, i) => {\n    \
    \    row.forEach((val, j) => {\n            if (val === x) {\n               \
    \ result.push([i, j]);\n            }\n        });\n    });\n    return result.sort((a,\
    \ b) => {\n        if (a[0] < b[0]) {\n            return -1;\n        } else\
    \ if (a[0] > b[0]) {\n            return 1;\n        } else {\n            if\
    \ (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1])\
    \ {\n                return 1;\n            } else {\n                return 0;\n\
    \            }\n        }\n    });\n}\n\nexport { get_row };", "    let a: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           a.push([i, j]);\n            }\n        }\n    }\n    return a.sort((a,\
    \ b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n   \
    \     } else {\n            return b[1] - a[1];\n        }\n    });\n}", "  let\
    \ x_sorted_lst: [number, number][] = [];\n  for (let row: number = 0; row < lst.length;\
    \ row++) {\n    for (let col: number = 0; col < lst[row].length; col++) {\n  \
    \    if (lst[row][col] === x) {\n        x_sorted_lst.push([row, col]);\n    \
    \  }\n    }\n  }\n  x_sorted_lst.sort((a, b) => {\n    if (a[0] === b[0]) {\n\
    \      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return x_sorted_lst;\n\
    }", "  let output: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        output.push([i, j]);\n      }\n    }\n  }\n  return output;\n\
    }\n\nexport { get_row };", "  const coords: [number, number][] = [];\n  lst.forEach((subArr,\
    \ rIndex) => {\n    subArr.forEach((num, cIndex) => {\n      if (num === x) {\n\
    \        coords.push([rIndex, cIndex]);\n      }\n    });\n  });\n  // sort by\
    \ row and then by column\n  coords.sort((a, b) => {\n    if (a[0] === b[0]) {\n\
    \      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return coords;\n\
    }\n", "    return lst.reduce((acc, e, i) => {\n        if (e.includes(x)) acc.push(...e.map((el,\
    \ j) => [i, j]).filter(([_, j]) => el === x));\n        return acc;\n    }, []).sort(([a],\
    \ [b]) => a - b).sort(([a, c], [b, d]) => c - d);\n}", "    let row: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           row.push([i, j]);\n            }\n        }\n    }\n    return row.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n}\n", "  const result: [number,\
    \ number][] = [];\n  lst.forEach((row, r) => {\n    row.forEach((element, c) =>\
    \ {\n      if (element === x) {\n        result.push([r, c]);\n      }\n    });\n\
    \  });\n  return result.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1]));\n}\n",
  "  let coordinates: [number, number][] = [];\n  lst.forEach((row, rowIndex) => {\n\
    \    row.forEach((value, columnIndex) => {\n      if (value === x) {\n       \
    \ coordinates.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n  let sortedByRow\
    \ = coordinates.sort((a, b) => a[0] - b[0]);\n  return sortedByRow.sort((a, b)\
    \ => b[1] - a[1]);\n}\n", "    let result: [number, number][] = [];\n    let num:\
    \ [number, number] = [];\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                num = [i, j];\n                result.push(num);\n      \
    \      }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0]\
    \ !== b[0]) {\n            return a[0] - b[0];\n        } else {\n           \
    \ return b[1] - a[1];\n        }\n    });\n}\n", "    const result: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        const index_last\
    \ = lst[i].lastIndexOf(x);\n        const index_first = lst[i].indexOf(x);\n \
    \       if (index_last !== -1) {\n            result.push([i, index_last]);\n\
    \        }\n        if (index_first !== -1) {\n            result.push([i, index_first]);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\n", "    const result: [number,\
    \ number][] = [];\n    for (let row = 0; row < lst.length; row++) {\n        for\
    \ (let col = 0; col < lst[row].length; col++) {\n            if (lst[row][col]\
    \ === x) {\n                result.push([row, col]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "  return lst\n    .map((line, i) => line.map((val,\
    \ j) => [i, j]).filter(val => val[1] === x))\n    .flat()\n    .sort((a, b) =>\
    \ a[0] - b[0] || b[1] - a[1]);\n}\n", "  if (lst.length === 0) {\n    return [];\n\
    \  }\n\n  const result: [number, number][] = [];\n  for (let row = 0; row < lst.length;\
    \ row++) {\n    for (let col = 0; col < lst[row].length; col++) {\n      if (lst[row][col]\
    \ === x) {\n        result.push([row, col]);\n      }\n    }\n  }\n\n  return\
    \ result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  if (lst.length\
    \ === 0) {\n    return [];\n  }\n  let result: [number, number][] = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++)\
    \ {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n   \
    \ }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1]\
    \ - a[1]);\n  return result;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\nconsole.log(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "  const result: [number, number][] = [];\n  lst.forEach((el,\
    \ i) => {\n    el.forEach((el1, i1) => {\n      if (el1 === x) {\n        result.push([i,\
    \ i1]);\n      }\n    });\n  });\n  return result.sort((a, b) => {\n    if (a[0]\
    \ > b[0]) {\n      return 1;\n    } else if (a[0] < b[0]) {\n      return -1;\n\
    \    } else {\n      if (a[1] > b[1]) {\n        return -1;\n      } else if (a[1]\
    \ < b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n \
    \   }\n  });\n}\n", "  let result: [number, number][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n    \
    \  if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n\
    \  result.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n\
    \    }\n    return a[0] - b[0];\n  });\n  return result;\n}\n", "    const result:\
    \ [number, number][] = [];\n    const sorted = lst.map((row, rowIndex) => row.map((v,\
    \ i) => [v, i, rowIndex])).flat()\n        .filter(d => d[0] === x)\n        .sort((a,\
    \ b) => {\n            if (a[2] === b[2]) {\n                return b[1] - a[1];\n\
    \            }\n            return a[2] - b[2];\n        });\n    sorted.forEach(data\
    \ => result.push([data[2], data[1]]));\n    return result;\n}\n\nexport default\
    \ get_row;", "  return lst\n    .reduce((acc, row, i) => {\n      return acc.concat(\n\
    \        row.map((_, j) => {\n          return [i, j];\n        })\n      );\n\
    \    }, [])\n    .filter((item) => {\n      return item[1] === x;\n    })\n  \
    \  .sort((a, b) => {\n      return a[0] - b[0];\n    })\n    .sort((a, b) => {\n\
    \      return b[1] - a[1];\n    });\n}\n\nconsole.log(get_row([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\n\
    console.log(get_row([[], [1], [1, 2, 3]], 3));", "    let result: [number, number][]\
    \ = [];\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let\
    \ j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n\
    \                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n    return result;\n}\n", "  const\
    \ result: [number, number][] = [];\n  lst.forEach((row, rowIndex) => {\n    row.forEach((value,\
    \ columnIndex) => {\n      if (value === x) {\n        result.push([rowIndex,\
    \ columnIndex]);\n      }\n    });\n  });\n  return result.sort((a, b) => {\n\
    \    if (a[0] > b[0]) {\n      return 1;\n    } else if (a[0] < b[0]) {\n    \
    \  return -1;\n    } else {\n      if (a[1] > b[1]) {\n        return -1;\n  \
    \    } else if (a[1] < b[1]) {\n        return 1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n}\n", "    if (lst.length === 0) {\n        return\
    \ [];\n    }\n\n    let row: [number, number][] = [];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        let col = lst[i].lastIndexOf(x);\n        if (col\
    \ >= 0) {\n            row.push([i, col]);\n        }\n    }\n\n    return row.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return a[1] - b[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n}\n", "    let searchArray: number[][]\
    \ = []\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  searchArray.push([i, j])\n            }\n        }\n    }\n    return searchArray.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]\n    \
    \    }\n        return a[0] - b[0]\n    })\n}\n\n", "    let result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    return\
    \ result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  return lst\n  \
    \  .map((row, i) =>\n      row\n        .map((item, j) => [i, j])\n        .filter(([,\
    \ col]) => item === x)\n        .reverse()\n    )\n    .reduce((acc, val) => acc.concat(val),\
    \ []);\n}", "    let result: [number, number][] = [];\n    lst.forEach((row, i)\
    \ => {\n        row.forEach((col, j) => {\n            if (col === x) {\n    \
    \            result.push([i, j]);\n            }\n        });\n    });\n    return\
    \ result.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n\
    }\n", "    let coordinates: [number, number][] = [];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n    \
    \        if (lst[i][j] === x) {\n                coordinates.push([i, j]);\n \
    \           }\n        }\n    }\n    return coordinates.sort((a, b) => a[0] -\
    \ b[0] || b[1] - a[1]);\n}\n\n", "    const out: [number, number][] = [];\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                out.push([i, j]);\n\
    \            }\n        }\n    }\n    return out.sort((p1, p2) => {\n        if\
    \ (p1[0] < p2[0]) {\n            return -1;\n        } else if (p1[0] > p2[0])\
    \ {\n            return 1;\n        } else {\n            if (p1[1] > p2[1]) {\n\
    \                return -1;\n            } else if (p1[1] < p2[1]) {\n       \
    \         return 1;\n            } else {\n                return 0;\n       \
    \     }\n        }\n    });\n}\n", "    let result: [number, number][] = [];\n\
    \    lst.forEach((subArr, i) => {\n        subArr.forEach((el, j) => {\n     \
    \       if (el === x) {\n                result.push([i, j]);\n            }\n\
    \        });\n    });\n    return result.sort((a, b) => a[0] - b[0] || b[1] -\
    \ a[1]);\n}\n\nexport { get_row };", "    // Good luck!\n    const result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    const sorted\
    \ = result.sort((a, b) => a[0] - b[0]);\n    return sorted.sort((a, b) => b[1]\
    \ - a[1]);\n}", "  let result: [number, number][] = [];\n  for (let row = 0; row\
    \ < lst.length; row++) {\n    for (let col = 0; col < lst[row].length; col++)\
    \ {\n      if (lst[row][col] === x) {\n        result.push([row, col]);\n    \
    \  }\n    }\n  }\n  result.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return\
    \ a[0] - b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n  return\
    \ result;\n}\n\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([], 1));\nconsole.log(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    let lstRes: [number, number][] = [];\n    let i = 0;\n    let j = 0;\n\
    \    while (i < lst.length) {\n        while (j < lst[i].length) {\n         \
    \   if (lst[i][j] == x) {\n                lstRes.push([i, j]);\n            }\n\
    \            j++;\n        }\n        j = 0;\n        i++;\n    }\n    lstRes.sort(function\
    \ (a, b) {\n        if (a[0] == b[0]) {\n            return a[1] < b[1] ? 1 :\
    \ -1;\n        }\n        return a[0] - b[0];\n    });\n    return lstRes;\n}\n",
  "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x)\
    \ {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) =>\
    \ {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0]\
    \ - b[0];\n  });\n  return result;\n}\n", "  const i = lst.findIndex(row => row.includes(x));\n\
    \  if (i < 0) return [];\n  return lst[i]\n    .map((item, j) => item === x ?\
    \ [i, j] : null)\n    .filter(item => item !== null)\n    .sort(([a, b], [c, d])\
    \ => (a === c ? d - b : a - c));\n}\n", "    const result: [number, number][]\
    \ = [];\n    for (let row = 0; row < lst.length; row++) {\n        for (let col\
    \ = 0; col < lst[row].length; col++) {\n            if (lst[row][col] === x) {\n\
    \                result.push([row, col]);\n            }\n        }\n    }\n \
    \   return result.sort(([x1, y1], [x2, y2]) => {\n        if (x1 < x2) {\n   \
    \         return -1;\n        } else if (x1 > x2) {\n            return 1;\n \
    \       } else {\n            if (y1 > y2) {\n                return -1;\n   \
    \         } else if (y1 < y2) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        }\n    });\n}\n", "  let\
    \ res: [number, number][] = [];\n  lst.forEach((el, idx) => {\n    el.forEach((ele,\
    \ i) => {\n      if (ele === x) {\n        res.push([idx, i]);\n      }\n    });\n\
    \  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.forEach((el, idx) => {\n   \
    \ if (idx + 1 < res.length && el[0] === res[idx + 1][0]) {\n      for (let i =\
    \ 0; i < res.length - 1; i++) {\n        for (let j = 0; j < res.length - i -\
    \ 1; j++) {\n          if (res[j][1] < res[j + 1][1]) {\n            [res[j],\
    \ res[j + 1]] = [res[j + 1], res[j]];\n          }\n        }\n      }\n    }\n\
    \  });\n  return res;\n}\n", "  let arr = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n  return arr.sort((a,\
    \ b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    } else if (a[0] < b[0])\
    \ {\n      return -1;\n    } else {\n      if (a[1] > b[1]) {\n        return\
    \ -1;\n      } else if (a[1] < b[1]) {\n        return 1;\n      } else {\n  \
    \      return 0;\n      }\n    }\n  });\n}\n", "    let count = 0;\n    let result:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                result[count] = [i, j];\n                count++;\n     \
    \       }\n        }\n    }\n    let arr: number[] = [];\n    for (let i = 0;\
    \ i < result.length; i++) {\n        arr[i] = result[i][0];\n    }\n    arr.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n    let arr1: number[] = [];\n   \
    \ for (let i = 0; i < result.length; i++) {\n        arr1[i] = result[i][1];\n\
    \    }\n    arr1.sort(function (a, b) {\n        return b - a;\n    });\n    for\
    \ (let i = 0; i < result.length; i++) {\n        result[i][0] = arr[i];\n    \
    \    result[i][1] = arr1[i];\n    }\n    return result;\n}", "    let result:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                result.push([i, j]);\n            }\n        }\n    }\n \
    \   return result.sort((a, b) => {\n        return a[0] - b[0] || b[1] - a[1];\n\
    \    });\n}", "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] > b[0]) {\n      return 1;\n    } else if (a[0] < b[0]) {\n\
    \      return -1;\n    } else {\n      if (a[1] > b[1]) {\n        return -1;\n\
    \      } else if (a[1] < b[1]) {\n        return 1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n  return result;\n}\n", "    const result: [number,\
    \ number][] = [];\n    lst.forEach((row, i) => {\n        const col_indices =\
    \ row.reduce((acc: number[], cur, j) => {\n            if (cur === x) {\n    \
    \            acc.push(j);\n            }\n            return acc;\n        },\
    \ []);\n        col_indices.forEach(idx => {\n            result.push([i, idx]);\n\
    \        });\n    });\n    return result.sort((a, b) => {\n        if (a[0] ===\
    \ b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n\
    \    });\n}\n", "  const result: [number, number][] = [];\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    const row = lst[i];\n    for (let j = 0; j < row.length;\
    \ j++) {\n      if (row[j] === x) {\n        result.push([i, j]);\n      }\n \
    \   }\n  }\n  return result.sort(([a], [b]) => a - b).sort(([, a], [, b]) => b\
    \ - a);\n}\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let\
    \ res: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                res.push([i, j]);\n            }\n        }\n    }\n\
    \    res.sort((a, b) => {\n        if (a[0] !== b[0]) {\n            return a[0]\
    \ - b[0];\n        } else {\n            return b[1] - a[1];\n        }\n    });\n\
    \    return res;\n}\n", "    let result: [number, number][] = [];\n    for (let\
    \ r = 0; r < lst.length; r++) {\n        for (let c = 0; c < lst[r].length; c++)\
    \ {\n            if (lst[r][c] === x) {\n                result.push([r, c]);\n\
    \            }\n        }\n    }\n    result.sort((r1, r2) => {\n        if (r1[0]\
    \ === r2[0]) {\n            return r2[1] - r1[1];\n        }\n        return r1[0]\
    \ - r2[0];\n    });\n    return result;\n}\n", "  return lst\n    .map((row, rowIndex)\
    \ =>\n      row\n        .map((col, colIndex) => (col === x ? [rowIndex, colIndex]\
    \ : null))\n        .filter(x => x),\n    )\n    .reduce((acc, el) => [...acc,\
    \ ...el], [])\n    .sort((a, b) => {\n      if (a[0] === b[0]) {\n        return\
    \ b[1] - a[1];\n      }\n      return a[0] - b[0];\n    });\n}\n\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([],\
    \ 1));\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));", "  if (lst.length ===\
    \ 0) {\n    return [];\n  }\n  let rowArr: [number, number][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    let currentRow = lst[i];\n    for (let j\
    \ = 0; j < currentRow.length; j++) {\n      if (currentRow[j] === x) {\n     \
    \   rowArr.push([i, j]);\n      }\n    }\n  }\n  return rowArr.sort((x, y) =>\
    \ {\n    if (x[0] !== y[0]) {\n      return x[0] - y[0];\n    } else {\n     \
    \ return y[1] - x[1];\n    }\n  });\n}\n", "  if (lst.length === 0) {\n    return\
    \ [];\n  }\n  let lst_pos = [];\n  for (let r = 0; r < lst.length; r++) {\n  \
    \  for (let c = 0; c < lst[r].length; c++) {\n      if (lst[r][c] === x) {\n \
    \       lst_pos.push([r, c]);\n      }\n    }\n  }\n  lst_pos.sort((a, b) => {\n\
    \    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] -\
    \ b[0];\n  });\n  return lst_pos;\n}\n", "  const coordinates: [number, number][]\
    \ = [];\n  lst.forEach((element, index) => {\n    element.forEach((value, index2)\
    \ => {\n      if (value === x) {\n        coordinates.push([index, index2]);\n\
    \      }\n    });\n  });\n  return coordinates.sort((a, b) => {\n    if (a[0]\
    \ !== b[0]) {\n      return a[0] - b[0];\n    } else {\n      return b[1] - a[1];\n\
    \    }\n  });\n}\n", "    let result: [number, number][] = [];\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n  \
    \  result.sort((a, b) => b[1] - a[1]);\n    return result;\n}\n", "  return lst\n\
    \    .map((row, rowIndex) => {\n      const matched = row.map((item, columnIndex)\
    \ => {\n        if (item === x) {\n          return [rowIndex, columnIndex];\n\
    \        }\n      });\n      return matched.filter(Boolean);\n    })\n    .flat()\n\
    \    .sort(([a1, a2], [b1, b2]) => (a1 === b1 ? b2 - a2 : a1 - b1));\n}\n", " \
    \ return lst\n    .reduce(\n      (acc, row, i) =>\n        row.reduce((acc, el)\
    \ => {\n          if (el === x) {\n            acc.push([i, row.indexOf(el)]);\n\
    \          }\n          return acc;\n        }, acc),\n      []\n    )\n    .sort((a,\
    \ b) => (a[0] === b[0] ? b[1] - a[1] : a[0] - b[0]));\n}\n", "  const result:\
    \ [number, number][] = [];\n  lst.forEach((row, rowIndex) => {\n    row.forEach((element,\
    \ colIndex) => {\n      if (element === x) {\n        result.push([rowIndex, colIndex]);\n\
    \      }\n    });\n  });\n  return result.sort(([r1, c1], [r2, c2]) => {\n   \
    \ if (r1 < r2) {\n      return -1;\n    } else if (r1 > r2) {\n      return 1;\n\
    \    } else {\n      if (c1 > c2) {\n        return -1;\n      } else if (c1 <\
    \ c2) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\
    \  });\n}\n", "  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b)\
    \ => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n  return result;\n}\n", "    return [];\n}\n", "    //\
    \ write your solution here\n    return [];\n}\n", "    let result: [number, number][]\
    \ = [];\n    lst.forEach((row, rowIndex) => {\n        row.forEach((cell, colIndex)\
    \ => {\n            if (cell === x) {\n                result.push([rowIndex,\
    \ colIndex]);\n            }\n        });\n    });\n    return result.sort((a,\
    \ b) => {\n        if (a[0] > b[0]) {\n            return 1;\n        } else if\
    \ (a[0] < b[0]) {\n            return -1;\n        } else {\n            if (a[1]\
    \ > b[1]) {\n                return -1;\n            } else if (a[1] < b[1]) {\n\
    \                return 1;\n            } else {\n                return 0;\n\
    \            }\n        }\n    });\n}", "    const found = lst.map((row, i) =>\
    \ row.map((el, j) => el === x ? [i, j] : null).filter(el => el)).flat();\n   \
    \ const sorted = found.sort((a, b) => a[0] !== b[0] ? a[0] - b[0] : b[1] - a[1]);\n\
    \    return sorted;\n}\n\n", "  const xCoordinates: [number, number][] = [];\n\
    \  lst.forEach((row, rowIndex) => {\n    const rowXCoordinates = row.map((item,\
    \ columnIndex) => {\n      if (item === x) {\n        return [rowIndex, columnIndex];\n\
    \      }\n    });\n    xCoordinates.push(...rowXCoordinates.filter(Boolean));\n\
    \  });\n  xCoordinates.sort((a, b) => a[0] - b[0]);\n  xCoordinates.forEach((coordinate,\
    \ index) => {\n    if (index > 0 && xCoordinates[index - 1][0] === coordinate[0])\
    \ {\n      xCoordinates[index] = [coordinate[0], coordinate[1]];\n    }\n  });\n\
    \  return xCoordinates;\n}\n", "    const res: [number, number][] = [];\n    lst.forEach((row,\
    \ i) => {\n        row.forEach((el, j) => {\n            if (el === x) {\n   \
    \             res.push([i, j]);\n            }\n        });\n    });\n    res.sort((a,\
    \ b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n   \
    \     } else {\n            return b[1] - a[1];\n        }\n    });\n    return\
    \ res;\n}\n", "    const result: [number, number][] = [];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n\
    \            if (lst[i][j] === x) {\n                result.push([i, j]);\n  \
    \          }\n        }\n    }\n    return result.sort((a, b) => {\n        if\
    \ (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return\
    \ a[0] - b[0];\n    });\n}\n", "    return [];\n}\n", "  if (lst.length === 0)\
    \ {\n    return [];\n  }\n  let list: [number, number][] = [];\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n \
    \     if (lst[i][j] === x) {\n        list.push([i, j]);\n      }\n    }\n  }\n\
    \  return list;\n}\n", "    const res: [number, number][] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] === x) {\n                res.push([i, j]);\n \
    \           }\n        }\n    }\n    return res.sort((a, b) => a[0] === b[0] ?\
    \ -(a[1] - b[1]) : a[0] - b[0]);\n}\n", "    const result: [number, number][]\
    \ = [];\n    lst.forEach((subArray, row) => {\n        subArray.forEach((item,\
    \ col) => {\n            if (item === x) {\n                result.push([row,\
    \ col]);\n            }\n        });\n    });\n    return result.sort((a, b) =>\
    \ {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n\
    \        return a[0] - b[0];\n    });\n}\n", "    let ret: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst[i].indexOf(x);\n\
    \        while (j !== -1) {\n            ret.push([i, j]);\n            j = lst[i].indexOf(x,\
    \ j + 1);\n        }\n    }\n    ret.sort((a, b) => a[0] !== b[0] ? a[0] - b[0]\
    \ : b[1] - a[1]);\n    return ret;\n}\n", "  let coords: [number, number][] =\
    \ [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        coords.push([i, j]);\n      }\n\
    \    }\n  }\n  coords.sort((a, b) => a[0] - b[0]);\n  return coords.map((c) =>\
    \ [c[0], c[1]]);\n}\n", "    let listOfCoordinates: [number, number][] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                listOfCoordinates.push([i,\
    \ j]);\n            }\n        }\n    }\n    return listOfCoordinates.sort((a,\
    \ b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n   \
    \     } else {\n            return b[1] - a[1];\n        }\n    });\n}\n", " \
    \ const coord: [number, number][] = [];\n  let row = 0;\n  for (const line of\
    \ lst) {\n    let col = 0;\n    for (const value of line) {\n      if (value ===\
    \ x) {\n        coord.push([row, col]);\n      }\n      col++;\n    }\n    row++;\n\
    \  }\n  coord.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return a[1] -\
    \ b[1];\n    }\n    return a[0] - b[0];\n  });\n  return coord;\n}\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\n", "    let lstLen\
    \ = lst.length;\n    let res: [number, number][] = [];\n    for (let i = 0; i\
    \ < lstLen; i++) {\n        let lstRowLen = lst[i].length;\n        for (let j\
    \ = 0; j < lstRowLen; j++) {\n            if (lst[i][j] === x) {\n           \
    \     res.push([i, j]);\n            }\n        }\n    }\n    res.sort((a, b)\
    \ => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n      \
    \  } else {\n            return b[1] - a[1];\n        }\n    });\n    return res;\n\
    }\n", "  let result: [number, number][] = [];\n  lst.forEach((e, i) => {\n   \
    \ e.forEach((e1, j) => {\n      if (e1 === x) {\n        result.push([i, j]);\n\
    \      }\n    });\n  });\n  return result.sort((a, b) => (a[0] === b[0] ? b[1]\
    \ - a[1] : a[0] - b[0]));\n}\n", "    const l: [number, number][] = [];\n    lst.forEach((e,\
    \ i) => e.forEach((f, j) => f === x && l.push([i, j])));\n    return l.sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  return lst\n    .reduce(\n    \
    \  (acc: [number, number][], r: number[], i: number) =>\n        r.map((c: number,\
    \ j: number) => [i, j]).concat(acc),\n      []\n    )\n    .filter((rc: [number,\
    \ number]) => lst[rc[0]][rc[1]] === x)\n    .sort((l: [number, number], r: [number,\
    \ number]) => {\n      if (l[0] < r[0]) {\n        return -1;\n      } else if\
    \ (l[0] > r[0]) {\n        return 1;\n      } else {\n        return r[1] - l[1];\n\
    \      }\n    });\n}\n", "  const result: [number, number][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n\
    \  }\n  // Bubble sorting\n  for (let i = 0; i < result.length; i++) {\n    for\
    \ (let j = 0; j < result.length - i - 1; j++) {\n      if (result[j][0] > result[j\
    \ + 1][0]) {\n        const tmp = result[j];\n        result[j] = result[j + 1];\n\
    \        result[j + 1] = tmp;\n      }\n    }\n  }\n  for (let i = 0; i < result.length;\
    \ i++) {\n    for (let j = 0; j < result.length - i - 1; j++) {\n      if (result[j][0]\
    \ === result[j + 1][0] && result[j][1] < result[j + 1][1]) {\n        const tmp\
    \ = result[j];\n        result[j] = result[j + 1];\n        result[j + 1] = tmp;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  return lst\n    .map((inner_lst,\
    \ index) => {\n      const arr = inner_lst.map((x, index) => [index, x]);\n  \
    \    return arr.filter(x => x[1] === 3);\n    })\n    .flat(1)\n    .sort(\n \
    \     (a, b) => (a[0] === b[0] ? b[1] - a[1] : a[0] - b[0])\n    );\n}\n\nexport\
    \ const test_get_row = () => {\n  assert.deepEqual(\n    get_row([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),\n    [[0, 0], [1, 4], [1,\
    \ 0], [2, 5], [2, 0]]\n  );\n  assert.deepEqual(get_row([], 1), []);\n  assert.deepEqual(get_row([[],\
    \ [1], [1, 2, 3]], 3), [[2, 2]]);\n};\n", "    const len = lst.length;\n    const\
    \ column: [number, number][] = [];\n    for (let i = 0; i < len; i++) {\n    \
    \    const row: number[] = lst[i];\n        const row_len = row.length;\n    \
    \    for (let j = 0; j < row_len; j++) {\n            if (row[j] === x) {\n  \
    \              column.push([i, j]);\n            }\n        }\n    }\n    return\
    \ column.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n}\n", "   \
    \ let ret: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                ret.push([i, j]);\n            }\n        }\n    }\n\
    \    ret.sort((a, b) => a[0] - b[0]);\n    for (let i = 0; i < ret.length; i++)\
    \ {\n        for (let j = i + 1; j < ret.length; j++) {\n            if (ret[i][0]\
    \ === ret[j][0]) {\n                if (ret[i][1] < ret[j][1]) {\n           \
    \         let tmp = ret[i];\n                    ret[i] = ret[j];\n          \
    \          ret[j] = tmp;\n                }\n            }\n        }\n    }\n\
    \    return ret;\n}\n", "    let res: [number, number][] = [];\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] === x) {\n                res.push([i, j]);\n \
    \           }\n        }\n    }\n    res.sort((a, b) => {\n        if (a[0] >\
    \ b[0]) {\n            return 1;\n        } else if (a[0] < b[0]) {\n        \
    \    return -1;\n        } else {\n            if (a[1] > b[1]) {\n          \
    \      return -1;\n            } else if (a[1] < b[1]) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ }\n    });\n    return res;\n}\n", "    let result: [number, number][] = [];\n\
    \    for (let row = 0; row < lst.length; row++) {\n        for (let col = 0; col\
    \ < lst[row].length; col++) {\n            if (lst[row][col] === x) {\n      \
    \          result.push([row, col]);\n            }\n        }\n    }\n    result.sort((a,\
    \ b) => a[0] - b[0]);\n    for (let i = 0; i < result.length; i++) {\n       \
    \ if (result[i][0] === result[i + 1][0]) {\n            result[i + 1][1] = result[i][1];\n\
    \        }\n    }\n    result.sort((a, b) => b[1] - a[1]);\n    return result;\n\
    }\n", "    return lst.map((row, i) => row.map((e, j) => [i, j]).filter(e => e[1]\
    \ === x)).flat();\n}", "  const res: [number, number][] = [];\n  lst.forEach((row,\
    \ rowInd) => {\n    row.forEach((col, colInd) => {\n      if (col === x) {\n \
    \       res.push([rowInd, colInd]);\n      }\n    });\n  });\n  res.sort((a, b)\
    \ => {\n    if (a[0] < b[0]) {\n      return -1;\n    } else if (a[0] > b[0])\
    \ {\n      return 1;\n    } else {\n      if (a[1] > b[1]) {\n        return -1;\n\
    \      } else if (a[1] < b[1]) {\n        return 1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n  return res;\n}\n", "  const result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return\
    \ -1;\n    } else if (a[0] > b[0]) {\n      return 1;\n    } else {\n      if\
    \ (a[1] > b[1]) {\n        return -1;\n      } else if (a[1] < b[1]) {\n     \
    \   return 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n}\n",
  "    return (lst.reduce((acc: [number, number][], row: number[], i: number) => {\n\
    \        let items = row.reduce((acc_items: [number, number][], item: number,\
    \ j: number) => {\n            if (item === x) {\n                acc_items.push([i,\
    \ j]);\n            }\n            return acc_items;\n        }, []);\n      \
    \  return acc.concat(items);\n    }, [])).sort((a: [number, number], b: [number,\
    \ number]) => {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", " \
    \   const result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result;\n}\n", "    let row: [number, number][] = [];\n    let\
    \ rowCount = 0;\n    for (let r of lst) {\n        let colCount = 0;\n       \
    \ for (let c of r) {\n            if (c === x) {\n                row.push([rowCount,\
    \ colCount]);\n            }\n            colCount++;\n        }\n        rowCount++;\n\
    \    }\n    return row.sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n\
    }\n", "  const result: [number, number][] = [];\n  lst.forEach((row, rowIndex)\
    \ => {\n    row.forEach((el, elIndex) => {\n      if (el === x) {\n        result.push([rowIndex,\
    \ elIndex]);\n      }\n    });\n  });\n  return result\n    .sort((row1, row2)\
    \ => {\n      return row1[0] - row2[0];\n    })\n    .map((row) => {\n      return\
    \ row.reverse();\n    });\n}\n", "  //throw new Error(\"Not implemented yet\"\
    );\n  let result: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i].includes(x)) {\n      result.push([i, lst[i].indexOf(x)]);\n\
    \    }\n  }\n  return result;\n}\n", "    const x_positions: [number, number][]\
    \ = [];\n    lst.forEach((item, i) => {\n        item.forEach((item2, j) => {\n\
    \            if (item2 === x) {\n                x_positions.push([i, j]);\n \
    \           }\n        });\n    });\n    return x_positions.sort((a, b) => {\n\
    \        if (a[0] > b[0]) {\n            return 1;\n        } else if (a[0] <\
    \ b[0]) {\n            return -1;\n        } else {\n            if (a[1] > b[1])\
    \ {\n                return -1;\n            } else if (a[1] < b[1]) {\n     \
    \           return 1;\n            } else {\n                return 0;\n     \
    \       }\n        }\n    });\n}\n", "    let result: [number, number][] = [];\n\
    \    for (let index = 0; index < lst.length; index++) {\n        const array =\
    \ lst[index];\n        for (let index = 0; index < array.length; index++) {\n\
    \            const element = array[index];\n            if (element === x) {\n\
    \                result.push([index, index]);\n            }\n        }\n    }\n\
    \    return result;\n}\n", "  let coordinates: [number, number][] = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++)\
    \ {\n      if (lst[i][j] === x) {\n        coordinates.push([i, j]);\n      }\n\
    \    }\n  }\n  coordinates.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return\
    \ a[0] - b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n  return\
    \ coordinates;\n}\n", "    let result: [number, number][] = [];\n    for (let\
    \ row_index = 0; row_index < lst.length; row_index++) {\n        let column_index\
    \ = lst[row_index].indexOf(x);\n        while (column_index >= 0) {\n        \
    \    result.push([row_index, column_index]);\n            column_index = lst[row_index].indexOf(x,\
    \ column_index + 1);\n        }\n    }\n    return result.sort((x, y) => x[0]\
    \ === y[0] ? y[1] - x[1] : x[0] - y[0]);\n}\n", "  const result: [number, number][]\
    \ = [];\n  lst.forEach((row, r) => {\n    row.forEach((el, c) => {\n      if (el\
    \ === x) {\n        result.push([r, c]);\n      }\n    });\n  });\n  return result.sort((a,\
    \ b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    } else if (a[0] > b[0])\
    \ {\n      return 1;\n    } else {\n      if (a[1] > b[1]) {\n        return -1;\n\
    \      } else if (a[1] < b[1]) {\n        return 1;\n      } else {\n        return\
    \ 0;\n      }\n    }\n  });\n}\n\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "    let result: [number, number][]\
    \ = [];\n    let row: number = 0;\n    for (let array of lst) {\n        let column:\
    \ number = 0;\n        for (let item of array) {\n            if (item === x)\
    \ {\n                result.push([row, column]);\n            }\n            column++;\n\
    \        }\n        row++;\n    }\n    result.sort((a, b) => {\n        if (a[0]\
    \ > b[0]) {\n            return 1;\n        } else if (a[0] < b[0]) {\n      \
    \      return -1;\n        } else {\n            if (a[1] > b[1]) {\n        \
    \        return -1;\n            } else if (a[1] < b[1]) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ }\n    });\n    return result;\n}\n", "    const result: [number, number][]\
    \ = [];\n    lst.forEach((item, index) => {\n        item.forEach((item2, index2)\
    \ => {\n            if (item2 === x) {\n                result.push([index, index2]);\n\
    \            }\n        });\n    });\n    return result.sort((item1, item2) =>\
    \ {\n        if (item1[0] > item2[0]) {\n            return 1;\n        } else\
    \ if (item1[0] < item2[0]) {\n            return -1;\n        } else {\n     \
    \       if (item1[1] > item2[1]) {\n                return -1;\n            }\
    \ else if (item1[1] < item2[1]) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        }\n    });\n}\n", "   \
    \ let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] > b[0]) {\n      \
    \      return 1;\n        } else if (a[0] < b[0]) {\n            return -1;\n\
    \        } else {\n            if (a[1] > b[1]) {\n                return -1;\n\
    \            } else if (a[1] < b[1]) {\n                return 1;\n          \
    \  } else {\n                return 0;\n            }\n        }\n    });\n}\n",
  "    let result: [number, number][] = [];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n        \
    \    if (lst[i][j] === x) {\n                result.push([i, j]);\n          \
    \  }\n        }\n    }\n    result.sort((a, b) => {\n        if (a[0] === b[0])\
    \ {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n\
    \    });\n    return result;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\n", "    return lst.map((row, i) =>\n\
    \        row.map((row_value, j) => [i, j])\n    ).reduce((acc, val) => acc.concat(val),\
    \ [])\n        .filter(([i, j]) => lst[i][j] === x)\n        .sort(([i1, j1],\
    \ [i2, j2]) => i1 === i2 ? j2 - j1 : i1 - i2);\n}", "    const coordinateArr:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                coordinateArr.push([i, j]);\n            }\n        }\n \
    \   }\n    return coordinateArr.sort((a, b) => {\n        if (a[0] < b[0]) {\n\
    \            return -1;\n        } else if (a[0] > b[0]) {\n            return\
    \ 1;\n        } else {\n            if (a[1] > b[1]) {\n                return\
    \ -1;\n            } else if (a[1] < b[1]) {\n                return 1;\n    \
    \        } else {\n                return 0;\n            }\n        }\n    });\n\
    }", "    let coordinates: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                coordinates.push([i, j]);\n            }\n       \
    \ }\n    }\n    coordinates.sort((a, b) => {\n        if (a[0] === b[0]) {\n \
    \           return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    \    return coordinates;\n}\n\n", "  return lst\n    .reduce((acc, sub_lst, idx)\
    \ => {\n      sub_lst.reduce((acc, num, sub_idx) => {\n        if (num === x)\
    \ {\n          acc.push([idx, sub_idx]);\n        }\n        return acc;\n   \
    \   }, acc);\n      return acc;\n    }, [])\n    .sort((a, b) => a[0] - b[0])\n\
    \    .sort((a, b) => b[1] - a[1]);\n}\n\nconsole.log(get_row([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "    let counter: number\
    \ = 0;\n    let rowNum: number = 0;\n    let colNum: number = 0;\n    let coord:\
    \ [number, number][] = [];\n    lst.forEach(function (array) {\n        array.forEach(function\
    \ (value) {\n            if (value === x) {\n                coord.push([rowNum,\
    \ colNum]);\n            }\n            colNum += 1;\n        });\n        rowNum\
    \ += 1;\n        colNum = 0;\n    });\n    coord.sort(function (a, b) {\n    \
    \    return a[0] - b[0];\n    });\n    return coord;\n}\nlet result = get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1);\nlet result1 =\
    \ get_row([], 1);\nlet result2 = get_row([[], [1], [1, 2, 3]], 3);\nconsole.log(result);\n\
    console.log(result1);\nconsole.log(result2);", "    if (lst.length === 0) {\n\
    \        return [];\n    }\n    return lst.reduce((acc: [number, number][], row:\
    \ number[], i: number) => {\n        const lst_row = row.reduce((acc: [number,\
    \ number][], el: number, j: number) => {\n            if (el === x) {\n      \
    \          acc.push([i, j]);\n            }\n            return acc;\n       \
    \ }, []);\n        acc = acc.concat(lst_row);\n        return acc;\n    }, []).sort((a:\
    \ [number, number], b: [number, number]) => {\n        if (a[0] < b[0]) {\n  \
    \          return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n\
    \        } else {\n            if (a[1] > b[1]) {\n                return -1;\n\
    \            } else if (a[1] < b[1]) {\n                return 1;\n          \
    \  } else {\n                return 0;\n            }\n        }\n    });\n}\n",
  "  let res: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n\
    \        res.push([i, j]);\n      }\n    }\n  }\n  return res.sort((a, b) => {\n\
    \    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n    } else {\n      return\
    \ b[1] - a[1];\n    }\n  });\n}\n", "    const result: [number, number][] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                result.push([i,\
    \ j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n\
    \        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n  \
    \      return a[0] - b[0];\n    });\n}\n\ndescribe(\"get_row\", function () {\n\
    \    it(\"should pass given test\", function () {\n        assert.deepEqual(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1), [[0, 0], [1, 4],\
    \ [1, 0], [2, 5], [2, 0]]);\n        assert.deepEqual(get_row([], 1), []);\n \
    \       assert.deepEqual(get_row([[], [1], [1, 2, 3]], 3), [[2, 2]]);\n    });\n\
    });\n", "    let result: [number, number][] = [];\n    let indices: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        let current_row =\
    \ lst[i];\n        let current_row_indices = [];\n        for (let j = 0; j <\
    \ current_row.length; j++) {\n            if (current_row[j] === x) {\n      \
    \          current_row_indices.push([i, j]);\n            }\n        }\n     \
    \   if (current_row_indices.length > 0) {\n            indices.push(...current_row_indices);\n\
    \        }\n    }\n    indices.sort((a, b) => a[0] - b[0]);\n    indices.sort((a,\
    \ b) => a[1] - b[1]);\n    for (let i = 0; i < indices.length; i++) {\n      \
    \  let current_row = indices[i][0];\n        let current_row_indices = [];\n \
    \       for (let j = 0; j < indices.length; j++) {\n            if (indices[j][0]\
    \ === current_row) {\n                current_row_indices.push(indices[j]);\n\
    \            }\n        }\n        current_row_indices.sort((a, b) => b[1] - a[1]);\n\
    \        for (let j = 0; j < current_row_indices.length; j++) {\n            result.push(current_row_indices[j]);\n\
    \        }\n    }\n    return result;\n}\n", "    let result: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a,\
    \ b) => {\n        if (a[0] !== b[0]) {\n            return a[0] - b[0];\n   \
    \     } else {\n            return b[1] - a[1];\n        }\n    });\n    return\
    \ result;\n}\n", "  let res: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  let sort_by_rows = res.sort((a,\
    \ b) => a[0] - b[0]);\n  let sort_by_cols = sort_by_rows.sort((a, b) => b[1] -\
    \ a[1]);\n  return sort_by_cols;\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\n", "    const result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    return\
    \ result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1]\
    \ - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "    let result:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                result.push([i, j]);\n            }\n        }\n    }\n \
    \   return result.sort((a, b) => {\n        if (a[0] < b[0]) {\n            return\
    \ -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n        } else\
    \ {\n            if (a[1] > b[1]) {\n                return -1;\n            }\
    \ else if (a[1] < b[1]) {\n                return 1;\n            } else {\n \
    \               return 0;\n            }\n        }\n    });\n}\n", "  let res:\
    \ [number, number][] = [];\n  lst.forEach((v, i) => {\n    const isArr = Array.isArray(v);\n\
    \    if (isArr) {\n      let k = v.indexOf(x);\n      if (k !== -1) {\n      \
    \  res.push([i, k]);\n      }\n    }\n  });\n  return res;\n}\n", "    const temp:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                temp.push([i, j]);\n            }\n        }\n    }\n   \
    \ const ans = temp.sort((a, b) => {\n        if (a[0] === b[0]) {\n          \
    \  return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return\
    \ ans;\n}\n", "    const row_col_coordinates: [number, number][] = [];\n    for\
    \ (let row_index = 0; row_index < lst.length; row_index++) {\n        for (let\
    \ col_index = 0; col_index < lst[row_index].length; col_index++) {\n         \
    \   if (lst[row_index][col_index] === x) {\n                row_col_coordinates.push([row_index,\
    \ col_index]);\n            }\n        }\n    }\n    row_col_coordinates.sort((a,\
    \ b) => {\n        if (a[0] < b[0]) {\n            return -1;\n        } else\
    \ if (a[0] > b[0]) {\n            return 1;\n        } else {\n            if\
    \ (a[1] > b[1]) {\n                return -1;\n            } else if (a[1] < b[1])\
    \ {\n                return 1;\n            } else {\n                return 0;\n\
    \            }\n        }\n    });\n    return row_col_coordinates;\n}\n", " \
    \   let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let array = lst[i];\n        for (let j = 0; j < array.length;\
    \ j++) {\n            if (array[j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    return result.sort((a, b) => {\n       \
    \ if (a[0] > b[0]) {\n            return 1;\n        } else if (a[0] < b[0]) {\n\
    \            return -1;\n        } else {\n            if (a[1] > b[1]) {\n  \
    \              return -1;\n            } else if (a[1] < b[1]) {\n           \
    \     return 1;\n            } else {\n                return 0;\n           \
    \ }\n        }\n    });\n}\n", "  let result: [number, number][] = [];\n  let\
    \ row = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let col = 0;\n    for\
    \ (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n      \
    \  result.push([row, col]);\n      }\n      col++;\n    }\n    row++;\n  }\n \
    \ return result.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return a[0]\
    \ - b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n}\n", "  if\
    \ (lst.length === 0) {\n    return [];\n  }\n  const result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  return result.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return\
    \ -1;\n    } else if (a[0] > b[0]) {\n      return 1;\n    } else {\n      if\
    \ (a[1] > b[1]) {\n        return -1;\n      } else if (a[1] < b[1]) {\n     \
    \   return 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n}\n",
  "    let rows: [number, number][] = [];\n    let row: [number, number] = [0, 0];\n\
    \    let rowNum: number = 0;\n    for (let lstRow of lst) {\n        let colNum:\
    \ number = 0;\n        for (let item of lstRow) {\n            if (item === x)\
    \ {\n                row = [rowNum, colNum];\n                rows.push(row);\n\
    \            }\n            colNum++;\n        }\n        rowNum++;\n    }\n \
    \   let rowsSorted = rows.sort((a, b) => {\n        if (a[0] > b[0]) {\n     \
    \       return 1;\n        } else if (a[0] < b[0]) {\n            return -1;\n\
    \        } else {\n            if (a[1] > b[1]) {\n                return -1;\n\
    \            } else if (a[1] < b[1]) {\n                return 1;\n          \
    \  } else {\n                return 0;\n            }\n        }\n    });\n  \
    \  return rowsSorted;\n}\n", "  return [];\n}\n", "    return lst.reduce((acc,\
    \ row, i) => {\n        const j = row.indexOf(x);\n        if (j !== -1) {\n \
    \           acc.push([i, j]);\n        }\n        return acc;\n    }, []).sort((a,\
    \ b) => {\n        return a[0] === b[0] ? b[1] - a[1] : a[0] - b[0];\n    });\n\
    }\n", "  return lst\n    .map((row, index) => row.map((value, index2) => [index,\
    \ index2]))\n    .flat()\n    .filter((value) => value[1] === x)\n    .sort((a,\
    \ b) => a[0] - b[0])\n    .sort((a, b) => b[1] - a[1]);\n}", "  let res: [number,\
    \ number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j =\
    \ 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i,\
    \ j]);\n      }\n    }\n  }\n  res.sort((a, b) => {\n    if (a[0] === b[0]) {\n\
    \      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n  return res;\n\
    }\n\nexport { get_row };", "    let result: [number, number][] = [];\n    lst.forEach((subArr,\
    \ i) => {\n        subArr.forEach((item, j) => {\n            if (item === x)\
    \ {\n                result.push([i, j]);\n            }\n        });\n    });\n\
    \    return result.sort((a, b) => {\n        if (a[0] > b[0]) {\n            return\
    \ 1;\n        } else if (a[0] < b[0]) {\n            return -1;\n        } else\
    \ {\n            if (a[1] > b[1]) {\n                return -1;\n            }\
    \ else if (a[1] < b[1]) {\n                return 1;\n            } else {\n \
    \               return 0;\n            }\n        }\n    });\n}\n", "  // Your\
    \ code here\n  const result: [number, number][] = [];\n  lst.forEach((row, y)\
    \ => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === x) {\n\
    \        result.push([y, i]);\n      }\n    }\n  });\n  return result.sort(([,\
    \ a], [, b]) => b - a).sort(([a], [b]) => a - b);\n}\n", "  // your code here\n\
    \  let get = [];\n  for (let i = 0; i < lst.length; i++) {\n    let lst_col =\
    \ lst[i];\n    for (let j = 0; j < lst_col.length; j++) {\n      if (lst_col[j]\
    \ === x) {\n        get.push([i, j]);\n      }\n    }\n  }\n  return get.sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  let final: [number, number][] =\
    \ [];\n  let count = 0;\n  let count2 = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        final.push([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i\
    \ < final.length; i++) {\n    for (let j = i + 1; j < final.length; j++) {\n \
    \     if (final[i][0] > final[j][0]) {\n        count++;\n      }\n    }\n  }\n\
    \  if (count !== 0) {\n    final.sort((a, b) => a[0] - b[0]);\n  }\n  for (let\
    \ i = 0; i < final.length; i++) {\n    for (let j = i + 1; j < final.length; j++)\
    \ {\n      if (final[i][0] === final[j][0]) {\n        if (final[i][1] < final[j][1])\
    \ {\n          count2++;\n        }\n      }\n    }\n  }\n  if (count2 !== 0)\
    \ {\n    final.sort((a, b) => b[1] - a[1]);\n  }\n  return final;\n}\n", "   \
    \ return lst.map((row, i) => {\n        return row.map((item, j) => {\n      \
    \      if (item === x) {\n                return [i, j];\n            }\n    \
    \    });\n    }).reduce((acc, item) => acc.concat(item)).filter(item => item !==\
    \ undefined)\n        .sort((a, b) => a[0] > b[0] ? 1 : -1)\n        .sort((a,\
    \ b) => a[0] === b[0] ? (a[1] > b[1] ? -1 : 1) : 0);\n}\n", "    let result: [number,\
    \ number][] = [];\n    for (let y1 = 0; y1 < lst.length; y1++) {\n        for\
    \ (let y2 = 0; y2 < lst[y1].length; y2++) {\n            if (lst[y1][y2] === x)\
    \ {\n                result.push([y1, y2]);\n            }\n        }\n    }\n\
    \    result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return\
    \ b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return result;\n\
    }\n", "  let res: [number, number][] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] ===\
    \ x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  let ans = res.sort((a,\
    \ b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n    }\n    return\
    \ a[0] - b[0];\n  });\n  return ans;\n}\n", "    const coordinates = []\n    lst.forEach((row,\
    \ y) => {\n        row.forEach((item, x) => {\n            if (item === x) coordinates.push([y,\
    \ x])\n        })\n    })\n    coordinates.sort((a, b) => a[0] - b[0])\n    return\
    \ coordinates.sort((a, b) => {\n        if (a[0] === b[0]) return b[1] - a[1]\n\
    \        return a[0] - b[0]\n    })\n}\n", "    let rList: [number, number][]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j\
    \ < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n              \
    \  rList.push([i, j]);\n            }\n        }\n    }\n    rList.sort((a, b)\
    \ => {\n        if (a[0] < b[0]) {\n            return -1;\n        } else if\
    \ (a[0] > b[0]) {\n            return 1;\n        } else {\n            if (a[1]\
    \ > b[1]) {\n                return -1;\n            } else if (a[1] < b[1]) {\n\
    \                return 1;\n            } else {\n                return 0;\n\
    \            }\n        }\n    });\n    return rList;\n}\n", "  const result:\
    \ [number, number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for\
    \ (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n      \
    \  result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0]\
    \ === b[0] ? b[1] - a[1] : a[0] - b[0]);\n}\n", "    const ans: [number, number][]\
    \ = [];\n    for (let r = 0; r < lst.length; r++) {\n        const row = lst[r];\n\
    \        for (let c = 0; c < row.length; c++) {\n            if (row[c] === x)\
    \ {\n                ans.push([r, c]);\n            }\n        }\n    }\n    return\
    \ ans.sort((a, b) => {\n        if (a[0] < b[0]) {\n            return -1;\n \
    \       } else if (a[0] > b[0]) {\n            return 1;\n        } else {\n \
    \           return b[1] - a[1];\n        }\n    });\n}\n", "    const res: [number,\
    \ number][] = [];\n    for (let y = 0; y < lst.length; y++) {\n        for (let\
    \ x1 = 0; x1 < lst[y].length; x1++) {\n            if (lst[y][x1] === x) {\n \
    \               res.push([y, x1]);\n            }\n        }\n    }\n    return\
    \ res.sort(([y1, x1], [y2, x2]) => {\n        if (y1 === y2) {\n            return\
    \ x2 - x1;\n        }\n        return y1 - y2;\n    });\n}\n", "    return lst.reduce((acc:\
    \ [number, number][], sublst: number[], i: number) => {\n        sublst.forEach((item:\
    \ number, j: number) => {\n            if (item === x) {\n                acc.push([i,\
    \ j]);\n            }\n        });\n        return acc;\n    }, []).sort((a: [number,\
    \ number], b: [number, number]) => a[0] - b[0] || b[1] - a[1]);\n}\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([],\
    \ 1));\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));", "  let result: [number,\
    \ number][] = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j =\
    \ 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i,\
    \ j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  for (let\
    \ i = 0; i < result.length; i++) {\n    result[i].sort((a, b) => b - a);\n  }\n\
    \  return result;\n}\n", "  let result: [number, number][] = [];\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n\
    \  }\n  result.sort((a, b) => a[0] - b[0]);\n  for (let i = 0; i < result.length;\
    \ i++) {\n    result[i].sort((a, b) => b - a);\n  }\n  return result;\n}", " \
    \ let indexes: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x)\
    \ {\n        indexes.push([i, j]);\n      }\n    }\n  }\n  return indexes.sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1]);\n}\n\nexport { get_row };", "    let result:\
    \ [number, number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x)\
    \ {\n                result.push([i, j]);\n            }\n        }\n    }\n \
    \   return result.sort((a, b) => {\n        if (a[0] > b[0]) {\n            return\
    \ 1;\n        } else if (a[0] < b[0]) {\n            return -1;\n        } else\
    \ {\n            if (a[1] > b[1]) {\n                return -1;\n            }\
    \ else if (a[1] < b[1]) {\n                return 1;\n            } else {\n \
    \               return 0;\n            }\n        }\n    });\n}\n", "    return\
    \ lst.reduce(\n        (acc, row, index) => acc.concat(\n            row.reduce(\n\
    \                (acc_inner, num, index_inner) => acc_inner.concat(num === x ?\
    \ [[index, index_inner]] : []),\n                []\n            )\n        ),\n\
    \        []\n    ).sort((a, b) => a[0] - b[0]).sort((a, b) => b[1] - a[1]);\n\
    }\n", "  if (lst.length == 0) {\n    return [];\n  }\n  let result: [number, number][]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] == x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => {\n\
    \    if (a[0] == b[0]) {\n      return b[1] - a[1];\n    }\n    return 0;\n  });\n\
    \  return result;\n}\n", "    const res: [number, number][] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        const arr = lst[i];\n        for (let\
    \ j = 0; j < arr.length; j++) {\n            if (arr[j] === x) {\n           \
    \     res.push([i, j]);\n            }\n        }\n    }\n    res.sort((a, b)\
    \ => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n      \
    \  }\n        return a[0] - b[0];\n    });\n    return res;\n}\n", "    let result:\
    \ [number, number][] = [];\n    let i: number = 0;\n    for (let row of lst) {\n\
    \        let j: number = 0;\n        for (let col of row) {\n            if (col\
    \ === x) {\n                result.push([i, j]);\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    result.sort((a, b) => {\n        if (a[0]\
    \ < b[0]) {\n            return -1;\n        } else if (a[0] > b[0]) {\n     \
    \       return 1;\n        } else {\n            if (a[1] > b[1]) {\n        \
    \        return -1;\n            } else if (a[1] < b[1]) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ }\n    });\n    return result;\n}\n", "  let result: [number, number][] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n\
    \    }\n  }\n  result.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n\
    \    } else if (a[0] < b[0]) {\n      return -1;\n    } else {\n      if (a[1]\
    \ > b[1]) {\n        return -1;\n      } else if (a[1] < b[1]) {\n        return\
    \ 1;\n      } else {\n        return 0;\n      }\n    }\n  });\n  return result;\n\
    }\n", "  const res: [number, number][] = [];\n  lst.forEach((e, i) => {\n    e.forEach((f,\
    \ j) => {\n      if (f === x) {\n        res.push([i, j]);\n      }\n    });\n\
    \  });\n  return res.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return\
    \ b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n}\n", "    const r: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        let c =\
    \ lst[i].length;\n        while (c--) {\n            if (lst[i][c] === x) {\n\
    \                r.push([i, c]);\n            }\n        }\n    }\n    r.sort((a,\
    \ b) => {\n        return a[0] === b[0] ? b[1] - a[1] : a[0] - b[0];\n    });\n\
    \    return r;\n}\n", "  let res: [number, number][] = [];\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n    \
    \  if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a,\
    \ b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n}\n",
  "    // you have to finish this function\n    return [[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]];\n}\n", "  let newArr: [number, number][] = [];\n  lst.forEach((e:\
    \ number[], i: number) => {\n    e.forEach((e: number, j: number) => {\n     \
    \ if (e === x) {\n        newArr.push([i, j]);\n      }\n    });\n  });\n  return\
    \ newArr.sort((a, b) => {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n\
    \    } else {\n      return b[1] - a[1];\n    }\n  });\n}\n\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([],\
    \ 1));\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));", "  const out: [number,\
    \ number][] = [];\n  lst.forEach((row, rowIdx) => {\n    row.forEach((el, elIdx)\
    \ => {\n      if (el === x) {\n        out.push([rowIdx, elIdx]);\n      }\n \
    \   });\n  });\n  return out.sort((a, b) => (a[0] === b[0] ? b[1] - a[1] : a[0]\
    \ - b[0]));\n}\n", "    const result: [number, number][] = [];\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    return result.sort((a, b) => {\n       \
    \ if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return\
    \ a[0] - b[0];\n    });\n}\n", "  const arr = [];\n  lst.forEach((x, i) => {\n\
    \    x.forEach((y, j) => {\n      if (y === x) {\n        arr.push([i, j]);\n\
    \      }\n    });\n  });\n  const comp = (a, b) => {\n    if (a[0] > b[0]) {\n\
    \      return 1;\n    } else if (a[0] < b[0]) {\n      return -1;\n    } else\
    \ {\n      if (a[1] > b[1]) {\n        return -1;\n      } else if (a[1] < b[1])\
    \ {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  };\n\
    \  return arr.sort(comp);\n}\n", "    let result: [number, number][] = [];\n \
    \   let row = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let column\
    \ = lst[i].indexOf(x);\n        while (column !== -1) {\n            result.push([row,\
    \ column]);\n            column = lst[i].indexOf(x, column + 1);\n        }\n\
    \        row++;\n    }\n    return result.sort((a, b) => {\n        if (a[0] <\
    \ b[0]) {\n            return -1;\n        } else if (a[0] > b[0]) {\n       \
    \     return 1;\n        } else {\n            if (a[1] > b[1]) {\n          \
    \      return -1;\n            } else if (a[1] < b[1]) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ }\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
