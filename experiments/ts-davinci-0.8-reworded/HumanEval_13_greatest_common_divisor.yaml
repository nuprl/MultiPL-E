name: HumanEval_13_greatest_common_divisor
language: ts
prompt: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
  \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
  \ number, b: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
  \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
  \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
completions: ["  // Fill in the missing code\n  // 1. Create a variable to store the\
    \ biggest common divisor.\n  let result: number = 1;\n  // 2. Calculate the greatest\
    \ common divisor\n  for (let i: number = 1; i <= a && i <= b; i++) {\n    if (a\
    \ % i == 0 && b % i == 0) {\n      result = i;\n    }\n  }\n  // 3. Return the\
    \ result\n  return result;\n}\nconsole.log(greatest_common_divisor(3, 5));\nconsole.log(greatest_common_divisor(25,\
    \ 15));\n", "  if (a > b) {\n    return a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b);\n  } else {\n    return b % a == 0 ? a : greatest_common_divisor(a,\
    \ b % a);\n  }\n}\n", "    var c: number;\n    a = Math.abs(a);\n    b = Math.abs(b);\n\
    \    if (a < b) {c = a; a = b; b = c;}\n    while (true) {\n        a %= b;\n\
    \        if (a == 0) return b;\n        b %= a;\n        if (b == 0) return a;\n\
    \    }\n}\n", "  // b must be a positive number\n  b = Math.abs(b);\n  if (a <\
    \ b) {\n    const t = a;\n    a = b;\n    b = t;\n  }\n  while (true) {\n    a\
    \ %= b;\n    if (a === 0) {\n      return b;\n    }\n    b %= a;\n    if (b ===\
    \ 0) {\n      return a;\n    }\n  }\n}\n\nexport {greatest_common_divisor};",
  "  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  let\
    \ divisor: number = 1;\n  const smaller = a < b ? a : b;\n  for (let i = 1; i\
    \ <= smaller; i++) {\n    if (a % i === 0 && b % i === 0) {\n      divisor = i;\n\
    \    }\n  }\n  return divisor;\n}\n", "  if (a < b) {\n    const c = a;\n    a\
    \ = b;\n    b = c;\n  }\n  if (a % b == 0) {\n    return b;\n  } else {\n    return\
    \ greatest_common_divisor(b, a % b);\n  }\n}\n", "    if (a === 0) {\n       \
    \ return b;\n    }\n    if (b === 0) {\n        return a;\n    }\n    if (a >\
    \ b) {\n        return greatest_common_divisor(a % b, b);\n    } else {\n    \
    \    return greatest_common_divisor(a, b % a);\n    }\n}\n\n", "    if (a < 0)\
    \ a = -a;\n    if (b < 0) b = -b;\n    if (a == 0) return b;\n    if (b == 0)\
    \ return a;\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n",
  "    let divisor: number = 2;\n    let greatestDivisor: number = 1;\n\n    //if\
    \ u want to find the greatest common divisor of two numbers\n    //you have to\
    \ test if a is divisible by the integers between\n    //1 and a. if it is, it\
    \ is a common divisor.\n    if (a < 2 || b < 2) {\n        return 1;\n    }\n\n\
    \    while (a >= divisor && b >= divisor) {\n        if (a % divisor == 0 && b\
    \ % divisor == 0) {\n            greatestDivisor = divisor;\n        }\n     \
    \   divisor++;\n    }\n    return greatestDivisor;\n}\n", "    if (a === 0) {\n\
    \        return b;\n    }\n    return greatest_common_divisor(b % a, a);\n}\n",
  "    //If b > a then we can swap values\n    if (b > a) {\n        const tmp = a;\n\
    \        a = b;\n        b = tmp;\n    }\n    if (a % b === 0) {\n        return\
    \ b;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n\n", "  if (a ==\
    \ 0) return b;\n  return greatest_common_divisor(b % a, a);\n}\n", "    if (a\
    \ === 0) {\n        return b;\n    } else if (b === 0) {\n        return a;\n\
    \    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n",
  "  return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    if (a ===\
    \ 0 || b === 0) return a || b;\n    return greatest_common_divisor(b, a % b);\n\
    }\n", "    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n\
    \    }\n    return b ? greatest_common_divisor(b, a % b) : a;\n}\n", "    if (a\
    \ % b === 0) {\n        return b;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n", "    return a === 0 ? b : greatest_common_divisor(b %\
    \ a, a);\n}\n", "  if (a < 0) {\n    return greatest_common_divisor(-a, b);\n\
    \  }\n  if (b < 0) {\n    return greatest_common_divisor(a, -b);\n  }\n  if (a\
    \ < b) {\n    return greatest_common_divisor(b, a);\n  }\n  while (true) {\n \
    \   if (b === 0) {\n      return a;\n    }\n    a %= b;\n    if (a === 0) {\n\
    \      return b;\n    }\n    b %= a;\n  }\n}\n", "    let a_prime = a;\n    let\
    \ b_prime = b;\n    while (a_prime !== b_prime) {\n        if (a_prime > b_prime)\
    \ {\n            a_prime = a_prime - b_prime;\n        } else {\n            b_prime\
    \ = b_prime - a_prime;\n        }\n    }\n    return a_prime;\n}\n", "    if (a\
    \ === 0) {\n        return b;\n    }\n    else if (b === 0) {\n        return\
    \ a;\n    }\n    else {\n        return greatest_common_divisor(b, a % b);\n \
    \   }\n}\n", "  if (a === 0) {\n    return b;\n  } else if (b === 0) {\n    return\
    \ a;\n  } else {\n    return greatest_common_divisor(b, a % b);\n  }\n}\n", " \
    \   let c: number = 0;\n    if (a > b) {\n        c = a;\n        a = b;\n   \
    \     b = c;\n    }\n    while (a !== 0) {\n        c = a;\n        a = b % a;\n\
    \        b = c;\n    }\n    return b;\n}\n", "    if (a < b) {\n        const\
    \ c = a;\n        a = b;\n        b = c;\n    }\n    while (a % b !== 0) {\n \
    \       const c = a % b;\n        a = b;\n        b = c;\n    }\n    return b;\n\
    }\n", "    if (a == 0 || b == 0) {\n        return a + b;\n    } else {\n    \
    \    return greatest_common_divisor(b, a % b);\n    }\n}\n", "    if (a < b) {\n\
    \        return greatest_common_divisor(b, a);\n    } else if (b == 0) {\n   \
    \     return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n\
    \    }\n}\n", "    let gcd: number = 1;\n    for (let i: number = 1; i <= a &&\
    \ i <= b; i++) {\n        if (a % i == 0 && b % i == 0) {\n            gcd = i;\n\
    \        }\n    }\n    return gcd;\n}\n", "  while (a !== b) {\n    if (a > b)\
    \ {\n      a = a - b;\n    } else {\n      b = b - a;\n    }\n  }\n  return a;\n\
    }\n\nexport { greatest_common_divisor };", "    let c: number = 0;\n    if (a\
    \ < b) {\n        c = a;\n        a = b;\n        b = c;\n    }\n    while (b\
    \ !== 0) {\n        c = a % b;\n        a = b;\n        b = c;\n    }\n    return\
    \ a;\n}\n", "    return a % b == 0 ? b : greatest_common_divisor(b, a % b);\n\
    }\n", "    return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "  if\
    \ (!b) {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n",
  "    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n", "    if(b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    //......\n    return 0;\n}\n", "    let divisor: number;\n\
    \    let dividend: number;\n    let remainder: number;\n\n    if (a < b) {\n \
    \       divisor = a;\n        dividend = b;\n    } else {\n        divisor = b;\n\
    \        dividend = a;\n    }\n\n    remainder = dividend % divisor;\n\n    if\
    \ (remainder === 0) {\n        return divisor;\n    } else {\n        return greatest_common_divisor(divisor,\
    \ remainder);\n    }\n}\n\nexport { greatest_common_divisor };", "    if (a <\
    \ b) {\n        return greatest_common_divisor(b, a);\n    }\n    if (b === 0)\
    \ {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n\
    }\n", "    if (a == 0) {\n        return b;\n    }\n    else if (b == 0) {\n \
    \       return a;\n    }\n    else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n", "  if (!b) {\n    return a;\n  }\n\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    return b > 0 ? greatest_common_divisor(b, a % b) : a;\n\
    }\n", "  if (a < b) return greatest_common_divisor(b, a);\n  if (b === 0) return\
    \ a;\n  return greatest_common_divisor(b, a % b);\n}\n", "  if (a === 0) {\n \
    \   return b;\n  }\n  return greatest_common_divisor(b % a, a);\n}\n", "    let\
    \ r = a % b;\n    while (r !== 0) {\n        a = b;\n        b = r;\n        r\
    \ = a % b;\n    }\n    return b;\n}\n", "    if (a === 0) {\n        return b;\n\
    \    }\n    return greatest_common_divisor(b % a, a);\n}\n", "    let divisor\
    \ = 2;\n    let gcd = 1;\n\n    if (a < 2 || b < 2)\n        return 1;\n\n   \
    \ while (a >= divisor && b >= divisor) {\n        if (a % divisor == 0 && b %\
    \ divisor == 0) {\n            gcd = divisor;\n        }\n        divisor++;\n\
    \    }\n    return gcd;\n}\n\n", "  if (a > b) {\n    a = a % b;\n  } else {\n\
    \    b = b % a;\n  }\n  if (a !== 0 && b !== 0) {\n    return greatest_common_divisor(a,\
    \ b);\n  } else {\n    return a + b;\n  }\n}\n", "    if (a < b) {\n        let\
    \ temp = a;\n        a = b;\n        b = temp;\n    }\n    if (a % b == 0) {\n\
    \        return b;\n    } else {\n        return greatest_common_divisor(b, a\
    \ % b);\n    }\n}\n", "    if (a == 0) {\n        return b;\n    } else if (b\
    \ == 0) {\n        return a;\n    } else {\n        let r: number = a % b;\n \
    \       return greatest_common_divisor(b, r);\n    }\n}\n", "    let common_divisor\
    \ = 1;\n    let min = a > b ? b : a;\n    for (let i = 1; i <= min; i++) {\n \
    \       if (a % i === 0 && b % i === 0) {\n            common_divisor = i;\n \
    \       }\n    }\n    return common_divisor;\n}\n", "    let divisor = 2;\n  \
    \  let greatestDivisor = 1;\n\n    if (a < 2 || b < 2) {\n        return 1;\n\
    \    }\n\n    while (a >= divisor && b >= divisor) {\n        if (a % divisor\
    \ === 0 && b % divisor === 0) {\n            greatestDivisor = divisor;\n    \
    \    }\n        divisor++;\n    }\n    return greatestDivisor;\n}\n", "  let max\
    \ = 0;\n  let min = 0;\n  let result = 0;\n  if (a > b) {\n    max = a;\n    min\
    \ = b;\n  } else {\n    max = b;\n    min = a;\n  }\n  for (let i = 1; i <= min;\
    \ i++) {\n    if (min % i === 0 && max % i === 0) {\n      result = i;\n    }\n\
    \  }\n  return result;\n}\nconsole.log(greatest_common_divisor(3, 5));\nconsole.log(greatest_common_divisor(25,\
    \ 15));\n", "  if (a < b) {\n    let t = a;\n    a = b;\n    b = t;\n  }\n  let\
    \ r = a % b;\n  if (r === 0) {\n    return b;\n  } else {\n    return greatest_common_divisor(b,\
    \ r);\n  }\n}\n", "    // Complete the function\n    let min: number;\n    let\
    \ max: number;\n    let gcd: number;\n    if (a < b) {\n        min = a;\n   \
    \     max = b;\n    } else {\n        min = b;\n        max = a;\n    }\n    for\
    \ (let i = 1; i <= min; i++) {\n        if (min % i === 0 && max % i === 0) {\n\
    \            gcd = i;\n        }\n    }\n    return gcd;\n}\n", "    let r: number;\n\
    \    while (b !== 0) {\n        r = a % b;\n        a = b;\n        b = r;\n \
    \   }\n    return a;\n}\n", "    if (a === 0) return b;\n    if (b === 0) return\
    \ a;\n    if (a > b) return greatest_common_divisor(a % b, b);\n    return greatest_common_divisor(a,\
    \ b % a);\n}\n", "  const max = Math.max(a, b);\n  const min = Math.min(a, b);\n\
    \  if (max % min === 0) {\n    return min;\n  } else {\n    return greatest_common_divisor(min,\
    \ max % min);\n  }\n}\n", "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    while (true) {\n        if (b == 0) {\n            return a;\n\
    \        }\n        a %= b;\n        if (a == 0) {\n            return b;\n  \
    \      }\n        b %= a;\n    }\n}\n", "  return (b == 0) ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "  return b === 0 ? a : greatest_common_divisor(b, a % b);\n\
    }\n", "    if (a < 0) {\n        a = -a;\n    }\n    if (b < 0) {\n        b =\
    \ -b;\n    }\n    while (a !== b) {\n        if (a > b) {\n            a = a -\
    \ b;\n        } else {\n            b = b - a;\n        }\n    }\n    return a;\n\
    }\n", "    return a % b ? greatest_common_divisor(b, a % b) : b;\n}\n", "    return\
    \ gcd(a, b);\n}\n", "  while (a && b) {\n    if (a > b) {\n      a %= b;\n   \
    \ } else {\n      b %= a;\n    }\n  }\n  return a + b;\n}\n", "    return b ?\
    \ greatest_common_divisor(b, a % b) : a;\n}\n", "  if (a === 0) {\n    return\
    \ b;\n  }\n  return greatest_common_divisor(b % a, a);\n}\n", "  // YOUR CODE\
    \ HERE\n  throw new Error(\"Not implemented\");\n}\n", "    if (a % b === 0) {\n\
    \        return b;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n\n\
    console.log(greatest_common_divisor(3, 5));\nconsole.log(greatest_common_divisor(25,\
    \ 15));", "  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return\
    \ a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return greatest_common_divisor(a\
    \ - b, b);\n  }\n  return greatest_common_divisor(a, b - a);\n}\n", "  return\
    \ a;\n}\n", "  return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n",
  "    let r = a % b;\n    while (r !== 0) {\n        a = b;\n        b = r;\n   \
    \     r = a % b;\n    }\n    return b;\n}\n", "    if (a > b) {\n        return\
    \ greatest_common_divisor(b, a);\n    }\n    if (a === 0) {\n        return b;\n\
    \    }\n    if (b % a === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b\
    \ % a, a);\n}\n", "    //ASSERT: a > 0 && b > 0\n    if (a < b) {\n        return\
    \ greatest_common_divisor(b, a);\n    }\n    //ASSERT: a >= b\n    let remainder\
    \ = a % b;\n    if (remainder == 0) {\n        return b;\n    }\n    //ASSERT:\
    \ 0 < remainder < b\n    return greatest_common_divisor(b, remainder);\n}\n",
  "    if (a < b) {\n        const temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        const temp = a % b;\n        a = b;\n \
    \       b = temp;\n    }\n    return a;\n}\n", "    if (a < 0)\n        a = -a;\n\
    \    if (b < 0)\n        b = -b;\n    while (b != 0) {\n        const t = b;\n\
    \        b = a % b;\n        a = t;\n    }\n    return a;\n}\n", '  // Start typing
    your JavaScr', "    if (a < b) {\n        [a, b] = [b, a];\n    }\n    let rest\
    \ = a % b;\n    if (rest == 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, rest);\n    }\n}\n", "    let result = 1;\n    let\
    \ max = (a > b) ? a : b;\n    for (let i = 2; i <= max; i++) {\n        if (a\
    \ % i === 0 && b % i === 0) {\n            result = i;\n        }\n    }\n   \
    \ return result;\n}\n", "    if (a === 0) {\n        return b;\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    if (a === b) {\n        return a;\n\
    \    }\n    if (a > b) {\n        return greatest_common_divisor(a - b, b);\n\
    \    }\n    return greatest_common_divisor(a, b - a);\n}\n", "    return b ? greatest_common_divisor(b,\
    \ a % b) : a;\n}\n", "    if(a == 0 || b == 0) {\n        return 0;\n    }\n \
    \   if(a < 0) {\n        a = -a;\n    }\n    if(b < 0) {\n        b = -b;\n  \
    \  }\n    while(a != b) {\n        if(a > b) {\n            a = a - b;\n     \
    \   } else {\n            b = b - a;\n        }\n    }\n    return a;\n}\n", " \
    \ if (a == 0) {\n    return b;\n  }\n  if (b == 0) {\n    return a;\n  }\n  while\
    \ (a != b) {\n    if (a > b) {\n      a = a - b;\n    } else {\n      b = b -\
    \ a;\n    }\n  }\n  return a;\n}\n", "  if (!b) {\n    return a;\n  }\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n", "  if (a == 0 || b == 0) return 0;\n\
    \  let [small, big] = [Math.min(a, b), Math.max(a, b)];\n  let r = big % small;\n\
    \  while (r != 0) {\n    big = small;\n    small = r;\n    r = big % small;\n\
    \  }\n  return small;\n}\n", "    var divisor = 1;\n    if (a > b) {\n       \
    \ var t = a;\n        a = b;\n        b = t;\n    }\n    for (var i = 2; i <=\
    \ a; i++) {\n        if (a % i == 0 && b % i == 0) {\n            divisor = i;\n\
    \        }\n    }\n    return divisor;\n}\n", "  while (a != b) {\n    if (a >\
    \ b) {\n      a = a - b;\n    } else {\n      b = b - a;\n    }\n  }\n  return\
    \ a;\n}\n", "  if (a < b) return greatest_common_divisor(b, a);\n  if (b === 0)\
    \ return a;\n  return greatest_common_divisor(b, a % b);\n}\n", "    return b\
    \ == 0 ? a : greatest_common_divisor(b, a % b);\n}\n", "    if (a < b) {\n   \
    \     return greatest_common_divisor(b, a);\n    } else if (b === 0) {\n     \
    \   return a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n\
    \    }\n}\n\nexport {\n    newton_method,\n    is_prime,\n    greatest_common_divisor\n\
    }", "    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n      \
    \  return a;\n    }\n    let aa = a, bb = b;\n    while (a !== b) {\n        if\
    \ (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n    \
    \    }\n    }\n    return a;\n}\n", "    return b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (a < 0) {\n        a = -a;\n    }\n    if (b < 0) {\n\
    \        b = -b;\n    }\n    while (a != b) {\n        if (a > b) {\n        \
    \    a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n\
    \    return a;\n}\n", "    if (a < b) {\n        let t = a;\n        a = b;\n\
    \        b = t;\n    }\n    if (a % b == 0) return b;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n   \
    \ return a;\n  }\n  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n\
    \  } else {\n    return greatest_common_divisor(a, b % a);\n  }\n}\n", "    if\
    \ (a == 0) {\n        return b;\n    } else if (b == 0) {\n        return a;\n\
    \    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n",
  "    if (a > b) {\n        return _gcd(a, b);\n    } else {\n        return _gcd(b,\
    \ a);\n    }\n}\n", "    while (b) {\n        let tmp = a % b;\n        a = b;\n\
    \        b = tmp;\n    }\n    return a;\n}\n", "  if (a < b) {\n    return greatest_common_divisor(b,\
    \ a);\n  } else if (b === 0) {\n    return a;\n  } else {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n}\n", "  return a * b;\n}\n", "    let min: number = (a < b) ?\
    \ a : b;\n    let max: number = (a > b) ? a : b;\n    for (let i = min; i > 0;\
    \ i--) {\n        if (max % i == 0 && min % i == 0) {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\n", "  if (a < 0) a = -a;\n  if (b < 0) b\
    \ = -b;\n  if (a < b) {\n    [a, b] = [b, a];\n  }\n  while (a % b != 0) {\n \
    \   [a, b] = [b, a % b];\n  }\n  return b;\n}\n", "    if (a === 0 || b === 0)\
    \ {\n        return Math.abs(a + b);\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  const a_str = Math.abs(a).toString();\n  const b_str = Math.abs(b).toString();\n\
    \  const a_split = a_str.split(\"\");\n  const b_split = b_str.split(\"\");\n\
    \  const a_len = a_split.length;\n  const b_len = b_split.length;\n  const a_num\
    \ = Number(a_str);\n  const b_num = Number(b_str);\n  let a_total = 0;\n  let\
    \ b_total = 0;\n  let gcd: number;\n\n  function get_total(num_str: string): number\
    \ {\n    return num_str.split(\"\").reduce((a, b) => Number(a) + Number(b));\n\
    \  }\n\n  if (a_len === 1 && b_len === 1) {\n    gcd = a + b;\n  } else if (a_len\
    \ > b_len) {\n    a_total = get_total(a_str);\n    if (a_total === 1) {\n    \
    \  gcd = a_num;\n    } else {\n      gcd = greatest_common_divisor(a_total, b_num);\n\
    \    }\n  } else if (a_len < b_len) {\n    b_total = get_total(b_str);\n    if\
    \ (b_total === 1) {\n      gcd = b_num;\n    } else {\n      gcd = greatest_common_divisor(a_num,\
    \ b_total);\n    }\n  } else {\n    if (a_num > b_num) {\n      gcd = greatest_common_divisor(a_num\
    \ - b_num, b_num);\n    } else if (a_num < b_num) {\n      gcd = greatest_common_divisor(a_num,\
    \ b_num - a_num);\n    } else {\n      gcd = a_num;\n    }\n  }\n\n  return gcd;\n\
    }\n\ndescribe(\"greatest_common_divisor\", () => {\n  it(\"should return a greatest\
    \ common divisor of two integers a and b\",", "    //Write your code here\n  \
    \  if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n", "  if (a > b) {\n    if (a % b === 0) {\n      return b;\n  \
    \  } else {\n      return greatest_common_divisor(b, a % b);\n    }\n  } else\
    \ {\n    if (b % a === 0) {\n      return a;\n    } else {\n      return greatest_common_divisor(a,\
    \ b % a);\n    }\n  }\n}\n", "    // TODO\n    return 1;\n}\n\nexport {\n    is_prime,\n\
    \    get_prime_factors,\n    list_primes,\n    lcm,\n    greatest_common_divisor\n\
    }", "  if (a === 0 || b === 0) return 0;\n  if (a === b) return a;\n  if (a >\
    \ b) return greatest_common_divisor(a - b, b);\n  return greatest_common_divisor(a,\
    \ b - a);\n}\n", "    if (a % b === 0) {\n        return b;\n    } else {\n  \
    \      return greatest_common_divisor(b, a % b);\n    }\n}\n", "    if (a ===\
    \ 0 || b === 0) return 0;\n    if (a === b) return a;\n    if (a > b) return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\n", "    if (a ==\
    \ 0 || b == 0) {\n        return 0;\n    }\n\n    let max = Math.max(a, b);\n\
    \    let min = Math.min(a, b);\n\n    if (max % min == 0) {\n        return min;\n\
    \    } else {\n        return greatest_common_divisor(min, max % min);\n    }\n\
    }\n", "  if (a > b) {\n    if (a % b === 0) {\n      return b;\n    } else {\n\
    \      return greatest_common_divisor(b, a % b);\n    }\n  } else {\n    if (b\
    \ % a === 0) {\n      return a;\n    } else {\n      return greatest_common_divisor(a,\
    \ b % a);\n    }\n  }\n}\n", "  if (a == 0) return b;\n  if (b == 0) return a;\n\
    \  if (a < b) return greatest_common_divisor(b, a);\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if (a == 0 || b == 0) return 0;\n  if (a == b) return a;\n\
    \  if (a > b) return greatest_common_divisor(a - b, b);\n  return greatest_common_divisor(a,\
    \ b - a);\n}\n", "  let max = Math.max(a, b);\n  let min = Math.min(a, b);\n \
    \ while (max % min != 0) {\n    let tmp = max % min;\n    max = min;\n    min\
    \ = tmp;\n  }\n  return min;\n}\n", "    return 0;\n}\n", "    var t: number;\n\
    \    while (b != 0) {\n        t = b;\n        b = a % b;\n        a = t;\n  \
    \  }\n    return a;\n}\n", "    let r = a % b;\n    while (r != 0) {\n       \
    \ a = b;\n        b = r;\n        r = a % b;\n    }\n    return b;\n}\n", "  \
    \  let t: number;\n    if (a < b) {\n        t = a;\n        a = b;\n        b\
    \ = t;\n    }\n    while (b != 0) {\n        t = b;\n        b = a % b;\n    \
    \    a = t;\n    }\n    return a;\n}\n", "    if (a == 0 || b == 0) {\n      \
    \  return Math.abs(a) + Math.abs(b);\n    }\n    if (a > b) {\n        return\
    \ greatest_common_divisor(a % b, b);\n    } else {\n        return greatest_common_divisor(a,\
    \ b % a);\n    }\n}\n", "    while (a != b) {\n        if (a > b) {\n        \
    \    a = a - b;\n        } else {\n            b = b - a;\n        }\n    }\n\
    \    return a;\n}\n", "  let min = a <= b ? a : b;\n  let max = a > b ? a : b;\n\
    \  let gcd = 1;\n  for (let i = 1; i <= min; i++) {\n    if (min % i === 0 &&\
    \ max % i === 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}\n", "    return\
    \ a > b ? gcd(a, b) : gcd(b, a);\n}\n\nexport {greatest_common_divisor};", " \
    \   if (a > b) {\n        let c = a;\n        a = b;\n        b = c;\n    }\n\
    \    if (a === 0) {\n        return b;\n    }\n    return greatest_common_divisor(b\
    \ % a, a);\n}\n\n", "    if (a > b) {\n        if (a % b === 0) {\n          \
    \  return b;\n        } else {\n            return greatest_common_divisor(b,\
    \ a % b);\n        }\n    } else {\n        if (b % a === 0) {\n            return\
    \ a;\n        } else {\n            return greatest_common_divisor(a, b % a);\n\
    \        }\n    }\n}\n", "    if (a > b) {\n        while (a % b != 0) {\n   \
    \         let temp = a % b;\n            a = b;\n            b = temp;\n     \
    \   }\n        return b;\n    } else {\n        while (b % a != 0) {\n       \
    \     let temp = b % a;\n            b = a;\n            a = temp;\n        }\n\
    \        return a;\n    }\n}\n", "  if (a < 0) {\n    a = -a;\n  }\n  if (b <\
    \ 0) {\n    b = -b;\n  }\n  while (a != b) {\n    if (a > b) {\n      a = a -\
    \ b;\n    } else {\n      b = b - a;\n    }\n  }\n  return a;\n}\n", "    if (a\
    \ < 0) {\n        a = -a;\n    }\n    if (b < 0) {\n        b = -b;\n    }\n \
    \   if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a < b) {\n        let temp = a;\n        a = b;\n       \
    \ b = temp;\n    }\n    let r = a % b;\n    while (r != 0) {\n        a = b;\n\
    \        b = r;\n        r = a % b;\n    }\n    return b;\n}\n", "  let min: number;\n\
    \  let max: number;\n  if (a > b) {\n    max = a;\n    min = b;\n  } else {\n\
    \    max = b;\n    min = a;\n  }\n  for (let i = min; i > 0; i--) {\n    if (max\
    \ % i === 0 && min % i === 0) {\n      return i;\n    }\n  }\n  return 0;\n}\n",
  "    let divisor: number = 2,\n        greatestDivisor: number = 1;\n\n    if (a\
    \ < 2 || b < 2) {\n        return 1;\n    }\n\n    while (a >= divisor && b >=\
    \ divisor) {\n        if (a % divisor === 0 && b % divisor === 0) {\n        \
    \    greatestDivisor = divisor;\n        }\n        divisor++;\n    }\n    return\
    \ greatestDivisor;\n}\n", "  let a_ = Math.abs(a);\n  let b_ = Math.abs(b);\n\
    \  if (a_ < b_) {\n    let temp = a_;\n    a_ = b_;\n    b_ = temp;\n  }\n  let\
    \ r = a_ % b_;\n  while (r !== 0) {\n    a_ = b_;\n    b_ = r;\n    r = a_ % b_;\n\
    \  }\n  return b_;\n}\n", "    while (b != 0) {\n        let r = a % b;\n    \
    \    a = b;\n        b = r;\n    }\n    return a;\n}\n", "    let max_num: number;\n\
    \    let min_num: number;\n    let result: number;\n    if (a > b) {\n       \
    \ max_num = a;\n        min_num = b;\n    } else {\n        max_num = b;\n   \
    \     min_num = a;\n    }\n    for (let i = min_num; i > 0; i--) {\n        if\
    \ (max_num % i === 0 && min_num % i === 0) {\n            result = i;\n      \
    \      break;\n        }\n    }\n    return result;\n}\n", "  if (a < b) {\n \
    \   let i = a;\n    a = b;\n    b = i;\n  }\n  let res = a % b;\n  if (res ===\
    \ 0) {\n    return b;\n  } else {\n    return greatest_common_divisor(b, res);\n\
    \  }\n}\n", "  if (a == 0 || b == 0) {\n    return a + b;\n  } else {\n    return\
    \ greatest_common_divisor(b, a % b);\n  }\n}\n", "  if (a === 0) {\n    return\
    \ b;\n  } else if (b === 0) {\n    return a;\n  } else {\n    if (a > b) {\n \
    \     return greatest_common_divisor(a % b, b);\n    } else {\n      return greatest_common_divisor(a,\
    \ b % a);\n    }\n  }\n}\n", "  // TODO: implement it.\n  if (a % b === 0) {\n\
    \    return b;\n  } else {\n    return greatest_common_divisor(b, a % b);\n  }\n\
    }\n", "  if (a < b) {\n    let t = a;\n    a = b;\n    b = t;\n  }\n  if (a %\
    \ b === 0) {\n    return b;\n  } else {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n}\n", "  const divisorsOfA = find_divisors(a);\n  const divisorsOfB\
    \ = find_divisors(b);\n  let i = divisorsOfA.length - 1;\n  let j = divisorsOfB.length\
    \ - 1;\n  while (i >= 0 && j >= 0) {\n    if (divisorsOfA[i] === divisorsOfB[j])\
    \ {\n      return divisorsOfA[i];\n    } else if (divisorsOfA[i] > divisorsOfB[j])\
    \ {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return 1;\n}\n", "  \
    \  let tmp: number;\n    while (b) {\n        tmp = a;\n        a = b;\n     \
    \   b = tmp % b;\n    }\n    return a;\n}\n\nexport {\n    greatest_common_divisor\n\
    }", "  if (a < b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  while\
    \ (b !== 0) {\n    let tmp = a % b;\n    a = b;\n    b = tmp;\n  }\n  return a;\n\
    }\n", "    return a;\n}\n", '    // wri', "  // return the second number if a\
    \ is zero\n  if (a === 0) {\n    return b;\n  }\n  // otherwise, return the result\
    \ of remainder of b and a\n  // recursively call the function with the result\
    \ of b and a\n  return greatest_common_divisor(b % a, a);\n}\n", "    if (a <\
    \ b) {\n        const tmp = a;\n        a = b;\n        b = tmp;\n    }\n    while\
    \ (a % b !== 0) {\n        const remainder = a % b;\n        a = b;\n        b\
    \ = remainder;\n    }\n    return b;\n}\n", "    return a % b == 0 ? b : greatest_common_divisor(b,\
    \ a % b);\n}\n", "    return 0;\n}\n", "  if (a < b) {\n    return greatest_common_divisor(b,\
    \ a);\n  } else if (b == 0) {\n    return a;\n  } else {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n}\n", "    if (a === 0) {\n        return b;\n    }\n    if (b\
    \ === 0) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n", "  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  if (a === 0) return\
    \ b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a > b) return\
    \ greatest_common_divisor(a - b, b);\n  return greatest_common_divisor(a, b -\
    \ a);\n}\n", "    if (a < b) {\n        let temp = a;\n        a = b;\n      \
    \  b = temp;\n    }\n    let h = a % b;\n    if (h == 0) {\n        return b;\n\
    \    } else {\n        return greatest_common_divisor(b, h);\n    }\n}\n", " \
    \   if (a === 0) {\n        return b;\n    } else if (b === 0) {\n        return\
    \ a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n\
    }\n", "    let result: number = 0;\n    let abs_a: number = Math.abs(a);\n   \
    \ let abs_b: number = Math.abs(b);\n    let divisor: number = Math.min(abs_a,\
    \ abs_b);\n    for (let i: number = divisor; i > 0; i--) {\n        if (abs_a\
    \ % i === 0 && abs_b % i === 0) {\n            result = i;\n            break;\n\
    \        }\n    }\n    return result;\n}\n", "    if (a % b === 0) {\n       \
    \ return b;\n    }\n    if (b % a === 0) {\n        return a;\n    }\n    let\
    \ temp: number;\n    while (a % b !== 0) {\n        temp = a % b;\n        a =\
    \ b;\n        b = temp;\n    }\n    return b;\n}\n", "  //Check if the a is 0,\
    \ which mean the gcd is b\n  if (a === 0) {\n    return b;\n  }\n  //Recursively\
    \ call the function\n  return greatest_common_divisor(b % a, a);\n}\n", "  if\
    \ (a === 0 || b === 0) return a || b;\n  while (a && b) {\n    if (a >= b) a %=\
    \ b;\n    else b %= a;\n  }\n  return a || b;\n}\n", "    if (a % b === 0) {\n\
    \        return b;\n    } else {\n        return greatest_common_divisor(b, a\
    \ % b);\n    }\n}\n", "    if (a < b) {\n        let temp = a;\n        a = b;\n\
    \        b = temp;\n    }\n    let r = a % b;\n    while (r != 0) {\n        a\
    \ = b;\n        b = r;\n        r = a % b;\n    }\n    return b;\n}\n", "  if\
    \ (a == 0 || b == 0) {\n    return a + b;\n  } else {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n}\n\nexport default greatest_common_divisor;", "    if (a ===\
    \ 0 || b === 0) {\n        return 0;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    if (b < 0) {\n        b = -b;\n    }\n    if (a === b) {\n       \
    \ return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\n", "  //Check\
    \ the parameters are integer\n  if (Number.isInteger(a) && Number.isInteger(b))\
    \ {\n    //Check for smallest divisor (it can be found by checking the prime numbers)\n\
    \    for (let i = 2; i <= Math.min(a, b); i++) {\n      if (a % i === 0 && b %\
    \ i === 0) {\n        //If a and b are divisible by the same number, then it is\
    \ the greatest common divisor\n        return i;\n      }\n    }\n    //If the\
    \ number is not found, then the greatest common divisor is 1\n    return 1;\n\
    \  } else {\n    return NaN;\n  }\n}\n", "    if (a === 0) {\n        return b;\n\
    \    }\n    if (b === 0) {\n        return a;\n    }\n    if (a === b) {\n   \
    \     return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    if (a < b) {\n        return greatest_common_divisor(a,\
    \ b - a);\n    }\n}\n", "    return (a * b) / least_common_multiple(a, b);\n}\n",
  "    while (a && b) {\n        a %= b;\n        const tmp = a;\n        a = b;\n\
    \        b = tmp;\n    }\n    return a;\n}\n", "    //CODE HERE\n    var result:\
    \ number = 0;\n    for (var i: number = 1; i <= Math.min(a, b); i++) {\n     \
    \   if (a % i == 0 && b % i == 0) {\n            result = i;\n        }\n    }\n\
    \    return result;\n}\n", "  let remainder = a % b;\n  while (remainder > 0)\
    \ {\n    a = b;\n    b = remainder;\n    remainder = a % b;\n  }\n  return b;\n\
    }\n", "  return 0;\n}\n", "  return 0;\n}\n", "    if (a % b === 0) {\n      \
    \  return b;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "  if\
    \ (a % b === 0) {\n    return b;\n  } else {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n}\n", "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  return 1;\n}\n", "  return b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (a == 0) {\n        return b;\n    }\n    else if (b\
    \ == 0) {\n        return a;\n    }\n    else {\n        if (a > b) {\n      \
    \      return greatest_common_divisor(a % b, b);\n        }\n        else {\n\
    \            return greatest_common_divisor(a, b % a);\n        }\n    }\n}\n",
  "    while (a != b) {\n        if (a > b) {\n            a = a - b;\n        } else\
    \ {\n            b = b - a;\n        }\n    }\n    return a;\n}\n", "    let divisor\
    \ = 2;\n    let greatestDivisor = 1;\n\n    if (a < 2 || b < 2)\n        return\
    \ 1;\n\n    while (a >= divisor && b >= divisor) {\n        if (a % divisor ==\
    \ 0 && b % divisor == 0) {\n            greatestDivisor = divisor;\n        }\n\
    \        divisor++;\n    }\n    return greatestDivisor;\n}\n\n", "    return (b\
    \ === 0) ? a : greatest_common_divisor(b, a % b);\n}\n", "    if (a < b) {\n \
    \       [a, b] = [b, a];\n    }\n    if (a % b === 0) {\n        return b;\n \
    \   }\n    else {\n        return greatest_common_divisor(b, a % b);\n    }\n\
    }\n", "    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a ===\
    \ b) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\n", "    if\
    \ (a < b) {\n        const tmp = a;\n        a = b;\n        b = tmp;\n    }\n\
    \    let c = a % b;\n    while (c !== 0) {\n        a = b;\n        b = c;\n \
    \       c = a % b;\n    }\n    return b;\n}\n", "    return a > b ? gcd(a, b)\
    \ : gcd(b, a);\n}", "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if (a < b) {\n    return greatest_common_divisor(b, a);\n\
    \  }\n  return b ? greatest_common_divisor(b, a % b) : a;\n}\n", "  return 0;\n\
    }\n", "    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n    \
    \    return a;\n    }\n    const abs_a = Math.abs(a);\n    const abs_b = Math.abs(b);\n\
    \    const tmp = abs_a % abs_b;\n    return greatest_common_divisor(abs_b, tmp);\n\
    }\n", "    if (a == 0) return b;\n    if (b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (a == 0 || b == 0) {\n        return Math.abs(a + b);\n\
    \    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\n",
  "    if (a < b) {\n        return greatest_common_divisor(b, a);\n    } else if\
    \ (b == 0) {\n        return a;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}", "  while (a != b) {\n    if (a > b) {\n      a = a - b;\n\
    \    } else {\n      b = b - a;\n    }\n  }\n  return a;\n}\n", "    if (a ==\
    \ 0) return b;\n    if (b == 0) return a;\n    if (a < b) [a, b] = [b, a];\n \
    \   if (a % b == 0) return b;\n    return greatest_common_divisor(b, a % b);\n\
    }\n", "    while (b) {\n        let temp = b;\n        b = a % b;\n        a =\
    \ temp;\n    }\n    return a;\n}\n", "    let c: number = 0;\n    c = a % b;\n\
    \    while (c !== 0) {\n        a = b;\n        b = c;\n        c = a % b;\n \
    \   }\n    return b;\n}\n", "  if (a < b) {\n    [a, b] = [b, a];\n  }\n  let\
    \ r = a % b;\n  while (r != 0) {\n    a = b;\n    b = r;\n    r = a % b;\n  }\n\
    \  return b;\n}\n", "    if (a === 0) {\n        return b;\n    } else if (b ===\
    \ 0) {\n        return a;\n    } else {\n        const aModB = a % b;\n      \
    \  return greatest_common_divisor(b, aModB);\n    }\n}\n", "    // TODO:\n   \
    \ return 0;\n}\n", "  let divisor = 2, greatestDivisor = 1;\n\n  //if u and v\
    \ are both even, then gcd(u, v) = 2\xB7gcd(u/2, v/2), because 2 is a common divisor.\n\
    \  if (a % divisor === 0 && b % divisor === 0) {\n    greatestDivisor = divisor;\n\
    \n    a /= divisor;\n    b /= divisor;\n  }\n\n  //If u is even and v is odd,\
    \ then gcd(u, v) = gcd(u/2, v), because 2 is not a common divisor.\n  divisor\
    \ = 2;\n  while (a !== 1) {\n    if (a % divisor === 0 && b % divisor !== 0) {\n\
    \      a /= divisor;\n    } else {\n      divisor++;\n    }\n  }\n\n  greatestDivisor\
    \ *= a;\n\n  return greatestDivisor;\n}\n\nexport { greatest_common_divisor };",
  "    if (a < b) {\n        [a, b] = [b, a];\n    }\n    if (a % b === 0) {\n   \
    \     return b;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", " \
    \   return 0;\n}\n", "    // # Write your code here\n    while (b !== 0) {\n \
    \       const tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return\
    \ a;\n}\n", "    var remainder = a % b;\n    if (remainder == 0) {\n        return\
    \ b;\n    } else {\n        return greatest_common_divisor(b, remainder);\n  \
    \  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
