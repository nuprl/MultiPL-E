name: HumanEval_107_even_odd_palindrome
language: ts
prompt: "//Given a positive integer n, return an array that has the number of even\
  \ and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
  // Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example\
  \ 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and\
  \ odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number):\
  \ [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8,\
  \ 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1,\
  \ 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5,\
  \ 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4,\
  \ 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"
completions: ["    let evenCount = 0;\n    let oddCount = 0;\n    for (let i = 1;\
    \ i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0)\
    \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n        }\n    }\n    return [evenCount, oddCount];\n}\n", " \
    \ const nums: Array<number> = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      nums.push(i);\n    }\n  }\n  const evens = nums.filter((num) => num\
    \ % 2 === 0);\n  const odds = nums.filter((num) => num % 2 !== 0);\n  return [evens.length,\
    \ odds.length];\n}\n\nconsole.log(even_odd_palindrome(12));", "  let odd: number\
    \ = 0;\n  let even: number = 0;\n  for (let i = 1; i <= n; i++) {\n    const str\
    \ = i.toString();\n    if (str.length % 2 !== 0) {\n      odd++;\n    } else {\n\
    \      even++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(12));",
  "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let number\
    \ = i.toString();\n    if (number === number.split(\"\").reverse().join(\"\"))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(8));\n\
    console.log(even_odd_palindrome(12));", "  let even_pals = 0;\n  let odd_pals\
    \ = 0;\n  const n_str = n.toString();\n  const n_half = n_str.length / 2;\n  const\
    \ even_length = n_str.length % 2 === 0;\n  let left = \"\";\n  let right = \"\"\
    ;\n  for (let i = 0; i < n_half; i++) {\n    left += \"9\";\n    right += \"9\"\
    ;\n  }\n  left = +left;\n  right = +right;\n  if (even_length) {\n    for (let\
    \ i = left; i < right; i++) {\n      if (is_palindrome(i)) {\n        if (i %\
    \ 2 === 0) {\n          even_pals++;\n        } else {\n          odd_pals++;\n\
    \        }\n      }\n    }\n  } else {\n    for (let i = left; i < right; i++)\
    \ {\n      if (is_palindrome(i)) {\n        if (i % 2 === 0) {\n          even_pals++;\n\
    \        } else {\n          odd_pals++;\n        }\n      }\n    }\n  }\n  return\
    \ [even_pals, odd_pals];\n}", "    let odd = 0, even = 0;\n    for (let i = 1;\
    \ i <= n; i++) {\n        let num = i.toString();\n        if (num === num.split('').reverse().join(''))\
    \ {\n            (num.length % 2 === 0) ? even++ : odd++;\n        }\n    }\n\
    \    return [even, odd];\n}\n\nlet testcase1 = [3, [1, 2]];\nlet testcase2 = [12,\
    \ [4, 6]];\nlet testcase3 = [1, [1, 0]];\nlet testcase4 = [15, [4, 10]];\nlet\
    \ testcase5 = [18, [5, 11]];\n\nconsole.log(even_odd_palindrome(testcase1[0]));\n\
    console.log(even_odd_palindrome(testcase2[0]));\nconsole.log(even_odd_palindrome(testcase3[0]));\n\
    console.log(even_odd_palindrome(testcase4[0]));\nconsole.log(even_odd_palindrome(testcase5[0]));\n",
  "    if (n < 1 || n > 1000) {\n        throw new Error(\"n must be in the range\
    \ of 1 to 1000, inclusive\");\n    }\n    let number_of_even_palindromes = 0;\n\
    \    let number_of_odd_palindromes = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (is_palindrome(i)) {\n            if (i % 2 === 0) {\n           \
    \     number_of_even_palindromes++;\n            } else {\n                number_of_odd_palindromes++;\n\
    \            }\n        }\n    }\n    return [number_of_even_palindromes, number_of_odd_palindromes];\n\
    }\n", "    let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n      \
    \  if (is_palindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}\nconsole.log(even_odd_palindrome(10));", "    let\
    \ even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if\
    \ (isPalindrome(i)) {\n            i % 2 === 0 ? even++ : odd++;\n        }\n\
    \    }\n    return [even, odd];\n}\n", "    const isPalindrome = (x: number):\
    \ boolean => {\n        const str = x.toString();\n        const len = str.length;\n\
    \        const middle = Math.floor(len / 2);\n        return str.slice(0, middle)\
    \ === str.slice(len - middle).split('').reverse().join('');\n    };\n    let evenCount\
    \ = 0;\n    let oddCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if\
    \ (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \    }\n    return [evenCount, oddCount];\n}\n", "    let [evenCount, oddCount]\
    \ = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString()))\
    \ {\n            if (i % 2 == 0) {\n                evenCount++;\n           \
    \ } else {\n                oddCount++;\n            }\n        }\n    }\n   \
    \ return [evenCount, oddCount];\n}\n", "  // Write your code here\n  let even\
    \ = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const count = countPalindrome(i);\n\
    \    if (count % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \  }\n  return [even, odd];\n}\n", "    let even = 0;\n    let odd = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n            if\
    \ (i % 2 === 0) {\n                even++;\n            } else {\n           \
    \     odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n",
  "  let even_palindrome = 0;\n  let odd_palindrome = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    if (is_palindrome(i)) {\n      even_palindrome += i % 2 === 0 ?\
    \ 1 : 0;\n      odd_palindrome += i % 2 === 1 ? 1 : 0;\n    }\n  }\n  return [even_palindrome,\
    \ odd_palindrome];\n}\n", "  let result: [number, number] = [0, 0];\n  for (let\
    \ i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n\
    \        result[0]++;\n      } else {\n        result[1]++;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "  let even = 0;\n  let odd = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    const { isPalindrome, isEven } = getEvenOdd(i);\n   \
    \ if (isPalindrome) {\n      if (isEven) {\n        even++;\n      } else {\n\
    \        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "  let even\
    \ = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n  let odd\
    \ = 0;\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (palindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  result.push(even, odd);\n  return result;\n}\n\nconsole.log(even_odd_palindrome(12));\n\
    console.log(even_odd_palindrome(3));\n", "    let evenCount = 0;\n    let oddCount\
    \ = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n \
    \           if (i % 2 === 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n        }\n    }\n    return\
    \ [evenCount, oddCount];\n}\n", "  let count = [0, 0];\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        count[0]++;\n\
    \      } else {\n        count[1]++;\n      }\n    }\n  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
