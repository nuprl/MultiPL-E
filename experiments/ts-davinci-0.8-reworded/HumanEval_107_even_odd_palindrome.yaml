name: HumanEval_107_even_odd_palindrome
language: ts
prompt: "//Given a positive integer n, return an array that has the number of even\
  \ and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
  // Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer\
  \ palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example\
  \ 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  // Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and\
  \ odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number):\
  \ [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8,\
  \ 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1,\
  \ 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5,\
  \ 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4,\
  \ 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"
completions: ["    let evenCount = 0;\n    let oddCount = 0;\n    for (let i = 1;\
    \ i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0)\
    \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n        }\n    }\n    return [evenCount, oddCount];\n}\n", " \
    \ const nums: Array<number> = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      nums.push(i);\n    }\n  }\n  const evens = nums.filter((num) => num\
    \ % 2 === 0);\n  const odds = nums.filter((num) => num % 2 !== 0);\n  return [evens.length,\
    \ odds.length];\n}\n\nconsole.log(even_odd_palindrome(12));", "  let odd: number\
    \ = 0;\n  let even: number = 0;\n  for (let i = 1; i <= n; i++) {\n    const str\
    \ = i.toString();\n    if (str.length % 2 !== 0) {\n      odd++;\n    } else {\n\
    \      even++;\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(12));",
  "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let number\
    \ = i.toString();\n    if (number === number.split(\"\").reverse().join(\"\"))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(8));\n\
    console.log(even_odd_palindrome(12));", "  let even_pals = 0;\n  let odd_pals\
    \ = 0;\n  const n_str = n.toString();\n  const n_half = n_str.length / 2;\n  const\
    \ even_length = n_str.length % 2 === 0;\n  let left = \"\";\n  let right = \"\"\
    ;\n  for (let i = 0; i < n_half; i++) {\n    left += \"9\";\n    right += \"9\"\
    ;\n  }\n  left = +left;\n  right = +right;\n  if (even_length) {\n    for (let\
    \ i = left; i < right; i++) {\n      if (is_palindrome(i)) {\n        if (i %\
    \ 2 === 0) {\n          even_pals++;\n        } else {\n          odd_pals++;\n\
    \        }\n      }\n    }\n  } else {\n    for (let i = left; i < right; i++)\
    \ {\n      if (is_palindrome(i)) {\n        if (i % 2 === 0) {\n          even_pals++;\n\
    \        } else {\n          odd_pals++;\n        }\n      }\n    }\n  }\n  return\
    \ [even_pals, odd_pals];\n}", "    let odd = 0, even = 0;\n    for (let i = 1;\
    \ i <= n; i++) {\n        let num = i.toString();\n        if (num === num.split('').reverse().join(''))\
    \ {\n            (num.length % 2 === 0) ? even++ : odd++;\n        }\n    }\n\
    \    return [even, odd];\n}\n\nlet testcase1 = [3, [1, 2]];\nlet testcase2 = [12,\
    \ [4, 6]];\nlet testcase3 = [1, [1, 0]];\nlet testcase4 = [15, [4, 10]];\nlet\
    \ testcase5 = [18, [5, 11]];\n\nconsole.log(even_odd_palindrome(testcase1[0]));\n\
    console.log(even_odd_palindrome(testcase2[0]));\nconsole.log(even_odd_palindrome(testcase3[0]));\n\
    console.log(even_odd_palindrome(testcase4[0]));\nconsole.log(even_odd_palindrome(testcase5[0]));\n",
  "    if (n < 1 || n > 1000) {\n        throw new Error(\"n must be in the range\
    \ of 1 to 1000, inclusive\");\n    }\n    let number_of_even_palindromes = 0;\n\
    \    let number_of_odd_palindromes = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (is_palindrome(i)) {\n            if (i % 2 === 0) {\n           \
    \     number_of_even_palindromes++;\n            } else {\n                number_of_odd_palindromes++;\n\
    \            }\n        }\n    }\n    return [number_of_even_palindromes, number_of_odd_palindromes];\n\
    }\n", "    let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n      \
    \  if (is_palindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}\nconsole.log(even_odd_palindrome(10));", "    let\
    \ even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if\
    \ (isPalindrome(i)) {\n            i % 2 === 0 ? even++ : odd++;\n        }\n\
    \    }\n    return [even, odd];\n}\n", "    const isPalindrome = (x: number):\
    \ boolean => {\n        const str = x.toString();\n        const len = str.length;\n\
    \        const middle = Math.floor(len / 2);\n        return str.slice(0, middle)\
    \ === str.slice(len - middle).split('').reverse().join('');\n    };\n    let evenCount\
    \ = 0;\n    let oddCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if\
    \ (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \    }\n    return [evenCount, oddCount];\n}\n", "    let [evenCount, oddCount]\
    \ = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i.toString()))\
    \ {\n            if (i % 2 == 0) {\n                evenCount++;\n           \
    \ } else {\n                oddCount++;\n            }\n        }\n    }\n   \
    \ return [evenCount, oddCount];\n}\n", "  // Write your code here\n  let even\
    \ = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const count = countPalindrome(i);\n\
    \    if (count % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \  }\n  return [even, odd];\n}\n", "    let even = 0;\n    let odd = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n            if\
    \ (i % 2 === 0) {\n                even++;\n            } else {\n           \
    \     odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n",
  "  let even_palindrome = 0;\n  let odd_palindrome = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    if (is_palindrome(i)) {\n      even_palindrome += i % 2 === 0 ?\
    \ 1 : 0;\n      odd_palindrome += i % 2 === 1 ? 1 : 0;\n    }\n  }\n  return [even_palindrome,\
    \ odd_palindrome];\n}\n", "  let result: [number, number] = [0, 0];\n  for (let\
    \ i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n\
    \        result[0]++;\n      } else {\n        result[1]++;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "  let even = 0;\n  let odd = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    const { isPalindrome, isEven } = getEvenOdd(i);\n   \
    \ if (isPalindrome) {\n      if (isEven) {\n        even++;\n      } else {\n\
    \        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "  let even\
    \ = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n  let odd\
    \ = 0;\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (palindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  result.push(even, odd);\n  return result;\n}\n\nconsole.log(even_odd_palindrome(12));\n\
    console.log(even_odd_palindrome(3));\n", "    let evenCount = 0;\n    let oddCount\
    \ = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n \
    \           if (i % 2 === 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n        }\n    }\n    return\
    \ [evenCount, oddCount];\n}\n", "  let count = [0, 0];\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        count[0]++;\n\
    \      } else {\n        count[1]++;\n      }\n    }\n  }\n  return count;\n}\n",
  "  let even_palindrome = 0;\n  let odd_palindrome = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    if (check_palindrome(i)) {\n      i % 2 === 0 ? even_palindrome++\
    \ : odd_palindrome++;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n\
    }\n", "  // Write your code here\n  const result = [0, 0];\n  for (let i = 1;\
    \ i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n     \
    \   result[0] += 1;\n      } else {\n        result[1] += 1;\n      }\n    }\n\
    \  }\n  return result;\n}", "  let evens = 0;\n  let odds = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    if (palindrome(i)) {\n      i % 2 === 0 ? evens++ : odds++;\n\
    \    }\n  }\n  return [evens, odds];\n}\n", "  let odd = 0;\n  let even = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      if (i %\
    \ 2 == 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n\
    \  }\n  return [even, odd];\n}\n", "    const result: [number, number] = [0, 0];\n\
    \    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n        \
    \    if (i % 2 === 0) {\n                result[0] += 1;\n            } else {\n\
    \                result[1] += 1;\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    // TODO: complete code\n    return [0, 0];\n}\n", "    //\
    \ your code goes here\n    let evenCount = 0;\n    let oddCount = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        let number = i.toString();\n        let\
    \ reverseNumber = '';\n        for (let j = number.length - 1; j >= 0; j--) {\n\
    \            reverseNumber += number[j];\n        }\n        if (number === reverseNumber)\
    \ {\n            if (number.length % 2 === 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \    }\n    return [evenCount, oddCount];\n}", "    let evens = 0;\n    let odds\
    \ = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n \
    \           if (i % 2 === 0) {\n                evens++;\n            } else {\n\
    \                odds++;\n            }\n        }\n    }\n    return [evens,\
    \ odds];\n}\n", "    return [0, 0];\n}\n\nexport { even_odd_palindrome };", " \
    \ let even: number = 0;\n  let odd: number = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (i.toString() === i.toString().split(\"\").reverse().join(\"\")) {\n\
    \      even += 1;\n    }\n  }\n  odd = n - even;\n  return [even, odd];\n}\n",
  "  const oddCount = Math.floor(n / 2);\n  const evenCount = n % 2 === 0 ? n / 2\
    \ : n / 2 + 1;\n  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let\
    \ odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n   \
    \   if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n    \
    \  }\n    }\n  }\n  return [even, odd];\n}\n\nexport default even_odd_palindrome;",
  "    return [0, 0];\n}\n\nexport { even_odd_palindrome };", "  if (n <= 0) return\
    \ [0, 0];\n  const s = n.toString();\n  if (s.length <= 1) return [1, 0];\n  const\
    \ len = s.length;\n  const ret = [0, 0];\n  for (let i = 1; i < len; i++) {\n\
    \    const mid = Math.floor(i / 2);\n    if (i % 2) {\n      for (let j = 0; j\
    \ <= mid; j++) {\n        if (s[j] !== s[i - j]) break;\n        ret[0]++;\n \
    \     }\n    } else {\n      for (let j = 0; j < mid; j++) {\n        if (s[j]\
    \ !== s[i - j]) break;\n        ret[0]++;\n      }\n    }\n  }\n  ret[1] = (len\
    \ - 1) * Math.pow(10, len - 1) - ret[0];\n  return ret;\n}\n\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));\nconsole.log(even_odd_palindrome(66));\n",
  "  let evens = 0;\n  let odds = 0;\n  for (let i = 1; i <= n; i++) {\n    const\
    \ numStr = i.toString();\n    const isPalindrome = numStr === numStr.split('').reverse().join('');\n\
    \    if (isPalindrome) {\n      if (i % 2 === 0) {\n        evens++;\n      }\
    \ else {\n        odds++;\n      }\n    }\n  }\n  return [evens, odds];\n}\n",
  "    //your code here\n    const even = [];\n    const odd = [];\n    let is_palindrome\
    \ = false;\n    for (let i = 1; i <= n; i++) {\n        let num = i;\n       \
    \ is_palindrome = false;\n        let reversed = 0;\n        while (num > 0) {\n\
    \            reversed = reversed * 10 + num % 10;\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (reversed === i) {\n            is_palindrome\
    \ = true;\n        }\n        if (is_palindrome) {\n            i % 2 === 0 ?\
    \ even.push(i) : odd.push(i);\n        }\n    }\n    return [even.length, odd.length];\n\
    }\n", "  let even_counter = 0;\n  let odd_counter = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (is_palindrome(i)) {\n      if (i % 2 === 0) {\n        even_counter++;\n\
    \      } else {\n        odd_counter++;\n      }\n    }\n  }\n  return [even_counter,\
    \ odd_counter];\n}\n", "  let even: number = 0;\n  let odd: number = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (i.toString() === [...i.toString()].reverse().join(\"\
    \")) {\n      i % 2 === 0 ? even++ : odd++;\n    }\n  }\n  return [even, odd];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    const isPalindrome = (i + \"\").split(\"\").reverse().join(\"\") ===\
    \ i + \"\";\n    if (isPalindrome) {\n      if (i % 2 === 0) {\n        evenCount++;\n\
    \      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount,\
    \ oddCount];\n}\n\nexport function run(): void {\n  console.log(even_odd_palindrome(3));\n\
    \  console.log(even_odd_palindrome(12));\n}", "  let output = [0, 0];\n  for (let\
    \ i = 1; i <= n; i++) {\n    if (checkPalindrome(i)) {\n      i % 2 === 0 ? output[0]++\
    \ : output[1]++;\n    }\n  }\n  return output;\n}\n", "    let countEven = 0,\
    \ countOdd = 0;\n    for (let i = 1; i <= n; i++) {\n        let stringI = i.toString();\n\
    \        if (stringI === stringI.split('').reverse().join('')) {\n           \
    \ if (i % 2 === 0) {\n                countEven += 1;\n            } else {\n\
    \                countOdd += 1;\n            }\n        }\n    }\n    return [countEven,\
    \ countOdd];\n}\n", "  let numEven = 0;\n  let numOdd = 0;\n  for (let i = 1;\
    \ i <= n; i++) {\n    let num = i.toString();\n    if (num.length % 2 === 0) {\n\
    \      let left = num.slice(0, num.length / 2);\n      let right = num.slice(num.length\
    \ / 2);\n      if (left === right.split(\"\").reverse().join(\"\")) {\n      \
    \  numEven++;\n      }\n    } else {\n      let left = num.slice(0, num.length\
    \ / 2);\n      let right = num.slice(num.length / 2 + 1);\n      if (left ===\
    \ right.split(\"\").reverse().join(\"\")) {\n        numOdd++;\n      }\n    }\n\
    \  }\n  return [numEven, numOdd];\n}\n", "    let evenCount = 0;\n    let oddCount\
    \ = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n \
    \           if (i % 2 === 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n        }\n    }\n    return\
    \ [evenCount, oddCount];\n}\n", "    // your code here\n    let evenCount = 0;\n\
    \    let oddCount = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString()\
    \ === i.toString().split('').reverse().join('')) {\n            i % 2 === 0 ?\
    \ evenCount++ : oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n\
    }\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));",
  "  return [0, 0];\n}\n\nexport { even_odd_palindrome };", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString()))\
    \ {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    }\n  }\n  return [evenCount, oddCount];\n}\n\nexport function testEvenOddPalindrome()\
    \ {\n  console.log(even_odd_palindrome(3));\n  console.log(even_odd_palindrome(12));\n\
    }\n", "  const intPalin = (i: number): boolean => {\n    const s = String(i);\n\
    \    for (let j = 0; j < s.length / 2; j++) {\n      if (s[j] !== s[s.length -\
    \ 1 - j]) {\n        return false;\n      }\n    }\n    return true;\n  };\n \
    \ let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    if (intPalin(i)) {\n      if (i % 2 === 0) {\n        evenCount++;\n    \
    \  } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n\
    }\n", "    let evenCount = 0;\n    let oddCount = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        if (checkPalindrome(i.toString())) {\n            if (i %\
    \ 2 === 0) {\n                evenCount++;\n            } else {\n           \
    \     oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ if (i.toString() === i.toString().split(\"\").reverse().join(\"\")) {\n    \
    \  if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n     \
    \ }\n    }\n  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));", "  if (n < 1 || n > Math.pow(10, 3)) return\
    \ [0, 0];\n  if (n < 10) return [n % 2 === 0 ? 1 : 0, n % 2 === 0 ? 0 : 1];\n\
    \  let count = [0, 0];\n  if (n % 2 === 0) {\n    count[0]++;\n    count[1] +=\
    \ n / 2 - 1;\n  } else {\n    count[1] += n / 2;\n  }\n  return count;\n}\n\n\
    export default even_odd_palindrome;", "    let even = 0;\n    let odd = 0;\n \
    \   for (let i = 1; i <= n; i++) {\n        let string = i.toString();\n     \
    \   if (string.length === 1) {\n            odd++;\n        } else if (string.length\
    \ === 2) {\n            if (string[0] === string[1]) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        } else {\n\
    \            let reversed = string.split('').reverse().join('');\n           \
    \ if (string === reversed) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n        }\n    }\n    return [even, odd];\n\
    }\n", "  let [even, odd] = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let\
    \ oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n\
    \      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    }\n  }\n  return [evenCount, oddCount];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString()))\
    \ {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    }\n  }\n  return [evenCount, oddCount];\n}\n", "  const result =\
    \ [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n    \
    \  if (i % 2 === 0) {\n        result[0] += 1;\n      } else {\n        result[1]\
    \ += 1;\n      }\n    }\n  }\n  return result;\n}", "  let cnt_even = 0;\n  let\
    \ cnt_odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n\
    \      if (i % 2 == 0) {\n        cnt_even++;\n      } else {\n        cnt_odd++;\n\
    \      }\n    }\n  }\n  return [cnt_even, cnt_odd];\n}", "  let even = 0;\n  let\
    \ odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n   \
    \   if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n    \
    \  }\n    }\n  }\n  return [even, odd];\n}\n", "  const even: string[] = [];\n\
    \  const odd: string[] = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even.push(i.toString());\n      } else\
    \ {\n        odd.push(i.toString());\n      }\n    }\n  }\n  return [even.length,\
    \ odd.length];\n}\n", "    let even_count = 0;\n    let odd_count = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        if (i.toString() === i.toString().split('').reverse().join(''))\
    \ {\n            if (i % 2 === 0) {\n                even_count += 1;\n      \
    \      } else {\n                odd_count += 1;\n            }\n        }\n \
    \   }\n    return [even_count, odd_count];\n}\n", "  let [even, odd] = [0, 0];\n\
    \  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2\
    \ === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n\
    \  }\n  return [even, odd];\n}\n", "    const palindromes = [];\n    for (let\
    \ i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            palindromes.push(i);\n\
    \        }\n    }\n    let [even, odd] = [0, 0];\n    for (let i = 0; i < palindromes.length;\
    \ i++) {\n        if (palindromes[i] % 2 === 0) {\n            even++;\n     \
    \   } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ if (i < 10) {\n      odd++;\n    } else if (i < 100) {\n      even++;\n    }\
    \ else if (i < 1000) {\n      if (i % 10 === Math.floor(i / 100)) {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n  let odd\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if\
    \ (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n\
    \    }\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n  let odd = 0;\n \
    \ for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n    if (str ===\
    \ str.split('').reverse().join('')) {\n      if (str.length % 2 === 0) {\n   \
    \     even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even,\
    \ odd];\n}\n", "  let even = 0;\n  let odd = 0;\n  if (n === 1) {\n    return\
    \ [0, 1];\n  } else if (n === 2) {\n    return [1, 1];\n  } else {\n    even +=\
    \ 2;\n    odd += 1;\n  }\n  for (let i = 3; i <= n; i++) {\n    const numStr =\
    \ i.toString();\n    const center = Math.floor(numStr.length / 2);\n    const\
    \ left = numStr.slice(0, center);\n    const right = numStr.slice(numStr.length\
    \ - center).split(\"\").reverse().join(\"\");\n    if (left === right) {\n   \
    \   if (numStr.length % 2 === 0) {\n        even += 1;\n      } else {\n     \
    \   odd += 1;\n      }\n    }\n  }\n  return [even, odd];\n}\n", "  let even =\
    \ 0,\n    odd = 0;\n  if (n === 1) {\n    even = 1;\n    odd = 0;\n  } else {\n\
    \    even = n % 2 ? n / 2 : n / 2 + 1;\n    odd = n / 2;\n  }\n  return [even,\
    \ odd];\n}\n", "  // Write your code here\n  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      if (isPalindrome(i))\
    \ {\n        evenCount++;\n      }\n    } else {\n      if (isPalindrome(i)) {\n\
    \        oddCount++;\n      }\n    }\n  }\n  return [evenCount, oddCount];\n}\n",
  "    let res = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        const str =\
    \ i.toString();\n        const strRev = str.split('').reverse().join('');\n  \
    \      if (str === strRev) {\n            res[i % 2]++;\n        }\n    }\n  \
    \  return res;\n}\n", "    let evens = 0;\n    let odds = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        if (isPalindrome(i.toString())) {\n            if\
    \ (i % 2 === 0) {\n                evens++;\n            } else {\n          \
    \      odds++;\n            }\n        }\n    }\n    return [evens, odds];\n}\n",
  "  //  1 <= n <= 10^3\n  if (n <= 0 || n > 1000) {\n    throw new Error('n not in\
    \ range 1 <= n <= 10^3');\n  }\n  let numEven = 0;\n  let numOdd = 0;\n  //  iterate\
    \ through all numbers\n  for (let i = 1; i <= n; i++) {\n    //  digitize each\
    \ number\n    const digits = Array.from(String(i), Number);\n    let isPalindrome\
    \ = true;\n    //  check if it is a palindrome\n    for (let j = 0; j < digits.length\
    \ / 2; j++) {\n      if (digits[j] !== digits[digits.length - 1 - j]) {\n    \
    \    isPalindrome = false;\n        break;\n      }\n    }\n    //  if palindrome,\
    \ increment appropriate counter\n    if (isPalindrome) {\n      if (digits.length\
    \ % 2 === 0) {\n        numEven++;\n      } else {\n        numOdd++;\n      }\n\
    \    }\n  }\n  return [numEven, numOdd];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      i\
    \ % 2 === 0 ? evenCount++ : oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n\
    }\n", "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (is_palindrome(i)) {\n            if (i % 2 === 0) {\n           \
    \     even++;\n            } else {\n                odd++;\n            }\n \
    \       }\n    }\n    return [even, odd];\n}\n", "  let even: number = 0;\n  let\
    \ odd: number = 0;\n  for (let i = 1; i <= n; i++) {\n    let strNum: string =\
    \ String(i);\n    let reversedNum: string = strNum.split(\"\").reverse().join(\"\
    \");\n    if (strNum === reversedNum) {\n      if (Number(strNum) % 2 === 0) {\n\
    \        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return\
    \ [even, odd];\n}\nconsole.log(even_odd_palindrome(12));\nconsole.log(even_odd_palindrome(3));\n",
  "    return [...Array(n)].reduce(([even, odd], _, i) => {\n        const num = i\
    \ + 1;\n        return isPalindrome(num) ? [even + (num % 2 ? 0 : 1), odd + (num\
    \ % 2 ? 1 : 0)] : [even, odd];\n    }, [0, 0]);\n}\n", "    const even = [];\n\
    \    const odd = [];\n    for (let i = 1; i <= n; i++) {\n        const s = String(i);\n\
    \        if (s === s.split('').reverse().join('')) {\n            if (s.length\
    \ % 2 === 0) {\n                even.push(s);\n            } else {\n        \
    \        odd.push(s);\n            }\n        }\n    }\n    return [even.length,\
    \ odd.length];\n}\n", "  let even = 0,\n    odd = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 == 0) {\n        even++;\n\
    \      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}",
  "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   if (i === reverse(i)) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}\n", "  let even = 0;\n  let odd = 0;\n  for (let i\
    \ = 1; i <= n; i++) {\n    let isPalindrome = true;\n    let myStr = i.toString();\n\
    \    let mid = Math.floor(myStr.length / 2);\n    for (let j = 0; j < mid; j++)\
    \ {\n      if (myStr[j] !== myStr[myStr.length - 1 - j]) {\n        isPalindrome\
    \ = false;\n        break;\n      }\n    }\n    if (isPalindrome) {\n      if\
    \ (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n\
    \    }\n  }\n  return [even, odd];\n}\n", "    // 1 <= n <= 10^3\n    // returned\
    \ array has the number of even and odd integer palindromes respectively.\n   \
    \ // Solution 1:\n    // let palindromes_odd: number = 0;\n    // let palindromes_even:\
    \ number = 0;\n    // // if n is even, then there must be at least two odd palindromes\n\
    \    // // since there is always an odd palindrome that includes the first digit\
    \ as 1,\n    // // and one that includes the last digit as 1 (1 <= n <= 10^3).\n\
    \    // if (n % 2 === 0) {\n    //     palindromes_odd += 2;\n    // }\n    //\
    \ // since n is a positive integer, then there is at least one odd integer palindrome.\n\
    \    // // (1 <= n <= 10^3).\n    // palindromes_odd += 1;\n    // for (let i\
    \ = 1; i <= n; i++) {\n    //     if (palindrome(i)) {\n    //         if (i %\
    \ 2 === 0) {\n    //             palindromes_even += 1;\n    //         } else\
    \ {\n    //             palindromes_odd += 1;\n    //         }\n    //     }\n\
    \    // }\n    // return [palindromes_even, palindromes_odd];\n    //Solution\
    \ 2:\n    let odd_palindromes: number = Math.floor(n / 2) + 1;\n    let even_palindromes:\
    \ number = n - odd_palindromes;\n    return [even_palindromes, odd_palindromes];\n\
    }\n", "    let odds = 0;\n    let evens = 0;\n    for (let i = 1; i <= n; i++)\
    \ {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n        \
    \        evens++;\n            } else {\n                odds++;\n           \
    \ }\n        }\n    }\n    return [evens, odds];\n}\n", "  let c1 = 0;\n  let\
    \ c2 = 0;\n  for (let i = 1; i <= n; i++) {\n    let reverseInt = parseInt(\n\
    \      i\n        .toString()\n        .split(\"\")\n        .reverse()\n    \
    \    .join(\"\")\n    );\n    if (i === reverseInt) {\n      if (i % 2 === 0)\
    \ {\n        c1++;\n      } else {\n        c2++;\n      }\n    }\n  }\n  return\
    \ [c1, c2];\n}", "    // TODO: Code\n    return [0, 0];\n}\n", "    let odd: number\
    \ = 0;\n    let even: number = 0;\n    for (let i = 1; i <= n; i++) {\n      \
    \  if (palindrome(i)) {\n            if (i % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(12));\n\nexport\
    \ {};", "  let even: number = 0;\n  let odd: number = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    let splitString = i.toString().split(\"\");\n    let reverseArray\
    \ = splitString.reverse();\n    let joinArray = reverseArray.join(\"\");\n   \
    \ if (i.toString() === joinArray) {\n      if (i % 2 === 0) {\n        even +=\
    \ 1;\n      } else {\n        odd += 1;\n      }\n    }\n  }\n  return [even,\
    \ odd];\n}\n\nconsole.log(even_odd_palindrome(12));\n", "  const isPalindrome\
    \ = function (num: number): boolean {\n    const numAsString = num.toString();\n\
    \    let start = 0;\n    let end = numAsString.length - 1;\n    while (start <\
    \ end) {\n      if (numAsString[start] !== numAsString[end]) {\n        return\
    \ false;\n      }\n      start++;\n      end--;\n    }\n    return true;\n  };\n\
    \n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evenCount++;\n\
    \      } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount,\
    \ oddCount];\n}\n\nconsole.log(even_odd_palindrome(12));", "  // your code goes\
    \ here\n  return [0, 0];\n}\n", "    let even = 0;\n    let odd = 0;\n    if (n\
    \ < 1 || n > 1000) return [even, odd];\n    for (let i = 1; i <= n; i++) {\n \
    \       if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n             \
    \   even++;\n            } else {\n                odd++;\n            }\n   \
    \     }\n    }\n    return [even, odd];\n}\n", "  let even = 0;\n  let odd = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString())) {\n   \
    \   if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n    \
    \  }\n    }\n  }\n  return [even, odd];\n}\n", "  let evens = 0;\n  let odds =\
    \ 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i\
    \ % 2 === 0) {\n        evens++;\n      } else {\n        odds++;\n      }\n \
    \   }\n  }\n  return [evens, odds];\n}", "  let even = 0,\n    odd = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 ===\
    \ 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n\
    \  return [even, odd];\n}\n", "    // It should return a tuple with two numbers\n\
    \    // such that the first element indicates the number of even palindromes in\
    \ the range(1, n)\n    // and the second element indicates the number of odd palindromes\
    \ in the range(1, n).\n    if (n < 1 || n > 1000) {\n        throw new Error(\"\
    Invalid input\");\n    }\n    let evenCount = 0;\n    let oddCount = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i\
    \ % 2 === 0) {\n                evenCount++;\n            } else {\n         \
    \       oddCount++;\n            }\n        }\n    }\n    return [evenCount, oddCount];\n\
    }\n", "  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ const num = i.toString();\n    if (isPalindrome(num)) {\n      if (num.length\
    \ % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n   \
    \ }\n  }\n  return [even, odd];\n}\n", "  let count_even = 0;\n  let count_odd\
    \ = 0;\n  if (n < 1 || n > 1000) {\n    return [0, 0];\n  }\n  if (n >= 1 && n\
    \ <= 9) {\n    return [1, n - 1];\n  }\n  for (let i = 1; i <= n; i++) {\n   \
    \ let temp = i;\n    let result = 0;\n    while (temp > 0) {\n      result = result\
    \ * 10 + (temp % 10);\n      temp = Math.floor(temp / 10);\n    }\n    if (result\
    \ === i) {\n      if (i % 2 === 0) {\n        count_even++;\n      } else {\n\
    \        count_odd++;\n      }\n    }\n  }\n  return [count_even, count_odd];\n\
    }\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "  const res: [number, number] = [0, 0];\n  for (let i = 1; i <= n; i++) {\n   \
    \ if (\n      i ===\n      parseInt(\n        i\n          .toString()\n     \
    \     .split(\"\")\n          .reverse()\n          .join(\"\")\n      )\n   \
    \ ) {\n      i % 2 ? res[1]++ : res[0]++;\n    }\n  }\n  return res;\n}\n", " \
    \ let odds = 0;\n  let evens = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        evens++;\n      } else {\n        odds++;\n\
    \      }\n    }\n  }\n  return [evens, odds];\n}\n", "    let even: number = 0;\n\
    \    let odd: number = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i))\
    \ {\n            if (i % 2 === 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\n", "  const nums = [...Array(n).keys()].map(x => x + 1);\n  const\
    \ palindromes = nums.filter(num => isPalindrome(num.toString()));\n  const odds\
    \ = palindromes.filter(num => num % 2);\n  const evens = palindromes.filter(num\
    \ => !(num % 2));\n  return [evens.length, odds.length];\n}\n", "  const half\
    \ = Math.floor(n / 2);\n  const halfEven = half % 2 === 0;\n  const halfOdd =\
    \ !halfEven;\n  return [\n    halfEven ? half : half - 1,\n    halfOdd ? half\
    \ : half - 1,\n  ];\n}\n\ndescribe(\"even_odd_palindrome\", () => {\n  it(\"should\
    \ pass given example\", () => {\n    expect(even_odd_palindrome(3)).toEqual([1,\
    \ 2]);\n    expect(even_odd_palindrome(12)).toEqual([4, 6]);\n  });\n});", " \
    \   let evens = 0;\n    let odds = 0;\n    let num = 1;\n    while (num <= n)\
    \ {\n        if (num % 2 !== 0) {\n            odds++;\n        } else {\n   \
    \         evens++;\n        }\n        num++;\n    }\n    return [evens, odds];\n\
    }\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));",
  "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      i % 2 === 0 ? even++ : odd++;\n    }\n  }\n  return [even, odd];\n\
    }\n", "  let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    let num = i;\n    let s = 0;\n    while (num > 0) {\n      s = (s * 10)\
    \ + (num % 10);\n      num = Math.floor(num / 10);\n    }\n    if (s === i) {\n\
    \      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    }\n  }\n  return [evenCount, oddCount];\n}", "    let even: number\
    \ = 0;\n    let odd: number = 0;\n    for (let i = 1; i <= n; i++) {\n       \
    \ if (i.toString() === i.toString().split('').reverse().join('')) {\n        \
    \    i % 2 === 0 ? even++ : odd++;\n        }\n    }\n    return [even, odd];\n\
    }\n", "  //init even and odd palindrome count arrays\n  let evenPalindromeCount\
    \ = 0;\n  let oddPalindromeCount = 0;\n  //loop through 1 to n\n  for (let i =\
    \ 1; i <= n; i++) {\n    //cast num to string for array comparison\n    let numString\
    \ = String(i);\n    //declare variable to hold the number of times a palindrome\
    \ has been found\n    let palindromeCount = 0;\n    //loop through the number\
    \ array\n    for (let j = 0; j < numString.length; j++) {\n      //check if starting\
    \ and ending elements are equal\n      if (numString[j] === numString[numString.length\
    \ - j - 1]) {\n        //if equal increment palindromeCount\n        palindromeCount++;\n\
    \      }\n    }\n    //check if palindromeCount is equal to the length of numString\
    \ (ie. for odd # of chars)\n    if (palindromeCount === numString.length) {\n\
    \      //if equal, increase oddPalindromeCount and evenPalindromeCount\n     \
    \ oddPalindromeCount++;\n      evenPalindromeCount++;\n    }\n    //check if palindromeCount\
    \ is equal to the length of numString - 1 (ie. for even # of chars)\n    else\
    \ if (palindromeCount === numString.length - 1) {\n      //if equal, increase\
    \ evenPalindromeCount\n      evenPalindromeCount++;\n    }\n  }\n  //return even\
    \ and odd palindrome counts\n  return [evenPalindromeCount, oddPalindromeCount];\n\
    }\n", "  let [even, odd] = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "  const ans: [number, number]\
    \ = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (checkIsPalindrome(i) &&\
    \ i % 2 === 0) {\n      ans[0]++;\n    } else if (checkIsPalindrome(i) && i %\
    \ 2 !== 0) {\n      ans[1]++;\n    }\n  }\n  return ans;\n}\n", "  let even =\
    \ 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "    let even: number = 0;\n\
    \    let odd: number = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i.toString()))\
    \ {\n            if (i % 2 === 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\n\nexport function test_even_odd_palindrome() {\n    console.log(even_odd_palindrome(3));\n\
    \    console.log(even_odd_palindrome(12));\n}", "    const is_palindrome = (num:\
    \ number): boolean => {\n        const num_str = num.toString();\n        const\
    \ len = num_str.length;\n        let start = 0;\n        let end = len - 1;\n\
    \        while (start < end) {\n            if (num_str[start] !== num_str[end])\
    \ {\n                return false;\n            }\n            start++;\n    \
    \        end--;\n        }\n        return true;\n    };\n    let even = 0;\n\
    \    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i))\
    \ {\n            const num_str = i.toString();\n            if (num_str.length\
    \ % 2 === 0) {\n                even++;\n            } else {\n              \
    \  odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", " \
    \   let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i.toString()\
    \ === i.toString().split('').reverse().join('')) {\n            if (i % 2 == 0)\
    \ even++;\n            else odd++;\n        }\n    }\n    return [even, odd];\n\
    }\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "    let even = 0;\n    let odd = 0;\n    if (n < 10) {\n        even = 0;\n   \
    \     odd = n;\n    } else {\n        even = 10;\n        odd = 10;\n        for\
    \ (let i = 10; i <= n; i++) {\n            let num = i;\n            let digits\
    \ = 0;\n            let reverse_num = 0;\n            while (num > 0) {\n    \
    \            digits = num % 10;\n                reverse_num = reverse_num * 10\
    \ + digits;\n                num = Math.floor(num / 10);\n            }\n    \
    \        if (i === reverse_num) {\n                if (i % 2 === 0) {\n      \
    \              even++;\n                } else {\n                    odd++;\n\
    \                }\n            }\n        }\n    }\n    return [even, odd];\n\
    }\nconsole.log(even_odd_palindrome(12));\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(1000));", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i.toString();\n    if\
    \ (num === num.split(\"\").reverse().join(\"\")) {\n      if (i % 2 === 0) {\n\
    \        evenCount++;\n      } else {\n        oddCount++;\n      }\n    }\n \
    \ }\n  return [evenCount, oddCount];\n}\n", "    let even = 0;\n    let odd =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n   \
    \         i % 2 === 0 ? even++ : odd++;\n        }\n    }\n    return [even, odd];\n\
    }\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "  return [Math.floor(n / 2), Math.ceil(n / 2)];\n}\n", "  let evenPalindromeCount\
    \ = 0;\n  let oddPalindromeCount = 0;\n  let palindromeCandidate = 1;\n  while\
    \ (palindromeCandidate <= n) {\n    let palindromeCandidateAsString = palindromeCandidate.toString();\n\
    \    if (\n      palindromeCandidateAsString ===\n      palindromeCandidateAsString.split(\"\
    \").reverse().join(\"\")\n    ) {\n      if (palindromeCandidate % 2 === 0) {\n\
    \        evenPalindromeCount++;\n      } else {\n        oddPalindromeCount++;\n\
    \      }\n    }\n    palindromeCandidate++;\n  }\n  return [evenPalindromeCount,\
    \ oddPalindromeCount];\n}\n", "    let even: number = 0;\n    let odd: number\
    \ = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i < 10) {\n          \
    \  even++;\n        } else if (i > 10 && i < 100) {\n            odd++;\n    \
    \    } else if (i > 100 && i < 1000) {\n            if (i % 11 === 0) {\n    \
    \            odd++;\n            } else {\n                even++;\n         \
    \   }\n        }\n    }\n    return [even, odd];\n}\nconsole.log(even_odd_palindrome(100));\n\
    console.log(even_odd_palindrome(12));\n", "    let even = 0;\n    let odd = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        if (i.toString() === i.toString().split('').reverse().join(''))\
    \ {\n            if (i % 2 === 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));",
  "  const even = new Set([\"0\", \"2\", \"4\", \"6\", \"8\"]);\n  const odd = new\
    \ Set([\"1\", \"3\", \"5\", \"7\", \"9\"]);\n  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString()))\
    \ {\n      if (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    }\n  }\n  return [evenCount, oddCount];\n}\n", "    let even_count\
    \ = 0;\n    let odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n        let\
    \ is_palindrome = true;\n        let temp = i;\n        let reverse = 0;\n   \
    \     while (temp > 0) {\n            reverse = reverse * 10 + temp % 10;\n  \
    \          temp = Math.floor(temp / 10);\n        }\n        if (reverse !== i)\
    \ {\n            is_palindrome = false;\n        }\n        if (is_palindrome)\
    \ {\n            if (i % 2 === 0) {\n                even_count++;\n         \
    \   } else {\n                odd_count++;\n            }\n        }\n    }\n\
    \    return [even_count, odd_count];\n}\n", "  let even: number = 0;\n  let odd:\
    \ number = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split(\"\
    \").reverse().join(\"\")) {\n      if (i % 2 === 0) {\n        even++;\n     \
    \ } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
  "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   if (isPalindrome(i)) {\n            i % 2 == 0 ? even++ : odd++;\n       \
    \ }\n    }\n    return [even, odd];\n}", "  const palindromes = [];\n  for (let\
    \ i = 1; i <= n; i++) {\n    const numString = i.toString();\n    if (isPalindrome(numString))\
    \ {\n      palindromes.push(i);\n    }\n  }\n  return palindromes.reduce(\n  \
    \  (acc, curr) => {\n      const evenOrOdd = curr % 2 === 0 ? 0 : 1;\n      acc[evenOrOdd]++;\n\
    \      return acc;\n    },\n    [0, 0]\n  );\n}\n", "  let odd_palindrome_count\
    \ = 0,\n    even_palindrome_count = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ if (is_palindrome(i.toString())) {\n      i % 2 === 0 ? even_palindrome_count++\
    \ : odd_palindrome_count++;\n    }\n  }\n  return [even_palindrome_count, odd_palindrome_count];\n\
    }\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n \
    \   if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evenCount++;\n \
    \     } else {\n        oddCount++;\n      }\n    }\n  }\n  return [evenCount,\
    \ oddCount];\n}\n", "  return [\n    (n - (n % 2 ? 1 : 0)) / 2,\n    Math.floor(n\
    \ / 2) + (n % 2)\n  ];\n}", "  let even_count = 0;\n  let odd_count = 0;\n  for\
    \ (let i = 1; i <= n; i++) {\n    if (palindrome(i)) {\n      if (i % 2 === 0)\
    \ {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n  \
    \  }\n  }\n  return [even_count, odd_count];\n}\n", "  let even = 0;\n  let odd\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString()))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n\nexport { even_odd_palindrome\
    \ };", "  let odd = 0;\n  let even = 0;\n  for (let i = 1; i <= n; i++) {\n  \
    \  if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n      }\
    \ else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n", " \
    \ let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let iString\
    \ = String(i);\n    let rev = iString.split(\"\").reverse().join(\"\");\n    if\
    \ (iString === rev) {\n      iString.length % 2 === 0 ? even++ : odd++;\n    }\n\
    \  }\n  return [even, odd];\n}\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));",
  "    let even_count = 0, odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n  \
    \      if (is_palindrome(i)) {\n            i % 2 == 0 ? even_count++ : odd_count++;\n\
    \        }\n    }\n    return [even_count, odd_count];\n}\n", "    let even: number\
    \ = 0;\n    let odd: number = 0;\n    for (let i = 1; i <= n; i++) {\n       \
    \ if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}\n", "    let answer = [0, 0];\n    for (let i = 1;\
    \ i <= n; i++) {\n        let revNum = parseInt(i.toString().split('').reverse().join(''));\n\
    \        if (i == revNum) {\n            if (i % 2 == 0) {\n                answer[0]++;\n\
    \            } else {\n                answer[1]++;\n            }\n        }\n\
    \    }\n    return answer;\n}\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));",
  "    let evenPalindrome = 0;\n    let oddPalindrome = 0;\n    for (let i = 1; i\
    \ <= n; i++) {\n        if (isPalindrome(i)) {\n            (i % 2 === 0) ? evenPalindrome++\
    \ : oddPalindrome++;\n        }\n    }\n    return [evenPalindrome, oddPalindrome];\n\
    }", "  // your code here\n  if (n < 1 || n > 1000) {\n    throw new Error('out\
    \ of bounds');\n  }\n  const even = [];\n  const odd = [];\n  for (let i = 1;\
    \ i <= n; i++) {\n    if (i < 10) {\n      odd.push(i);\n    } else if (i >= 10\
    \ && i < 100) {\n      if (i % 11 === 0) {\n        odd.push(i);\n      } else\
    \ {\n        even.push(i);\n      }\n    } else if (i >= 100 && i < 1000) {\n\
    \      if (i % 11 === 0) {\n        odd.push(i);\n      } else {\n        const\
    \ str = i.toString();\n        if (str[0] === str[2]) {\n          odd.push(i);\n\
    \        } else {\n          even.push(i);\n        }\n      }\n    } else {\n\
    \      odd.push(i);\n    }\n  }\n  return [even.length, odd.length];\n}\n", " \
    \   let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i))\
    \ {\n            if (i % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   if (palindrome_check(i)) {\n            if (i % 2 == 0) {\n              \
    \  even++;\n            } else {\n                odd++;\n            }\n    \
    \    }\n    }\n    return [even, odd];\n}\n", "    let even: number = 0;\n   \
    \ let odd: number = 0;\n    for (let i = 1; i <= n; i++) {\n        if (palindrome(i))\
    \ {\n            (i % 2 === 0) ? even++ : odd++;\n        }\n    }\n    return\
    \ [even, odd];\n}", "    let even_cnt = 0;\n    let odd_cnt = 0;\n    for (let\
    \ i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n            if (i %\
    \ 2 === 0) {\n                even_cnt++;\n            } else {\n            \
    \    odd_cnt++;\n            }\n        }\n    }\n    return [even_cnt, odd_cnt];\n\
    }\n", "  let even_count = 0;\n  let odd_count = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    if (i.toString() === i.toString().split(\"\").reverse().join(\"\"\
    )) {\n      if (i % 2 === 0) {\n        even_count++;\n      } else {\n      \
    \  odd_count++;\n      }\n    }\n  }\n  return [even_count, odd_count];\n}\n\n\
    console.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));",
  "    let even: number = 0;\n    let odd: number = 0;\n    for (let i = 1; i <= n;\
    \ i++) {\n        let arr: number[] = (i + '').split('');\n        let left: number\
    \ = 0;\n        let right: number = arr.length - 1;\n        while (left < right)\
    \ {\n            if (arr[left] !== arr[right]) {\n                break;\n   \
    \         }\n            left++;\n            right--;\n        }\n        if\
    \ (left >= right) {\n            if (arr.length % 2 === 0) {\n               \
    \ even++;\n            } else {\n                odd++;\n            }\n     \
    \   }\n    }\n    return [even, odd];\n}\n", "    let even = 0;\n    let odd =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        const numStr = i.toString();\n\
    \        if (isPalindrome(numStr)) {\n            numStr.length % 2 === 0 ? even++\
    \ : odd++;\n        }\n    }\n    return [even, odd];\n}\n", "    let evenPalindrome\
    \ = 0;\n    let oddPalindrome = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenPalindrome++;\n\
    \            } else {\n                oddPalindrome++;\n            }\n     \
    \   }\n    }\n    return [evenPalindrome, oddPalindrome];\n}", "  let even: number\
    \ = 0;\n  let odd: number = 0;\n  for (let i = 1; i <= n; i++) {\n    if (is_palindrome(i))\
    \ {\n      i % 2 === 0 ? even++ : odd++;\n    }\n  }\n  return [even, odd];\n\
    }\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "    let [even, odd] = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        if (checkPalindrome(i.toString()))\
    \ {\n            (i % 2 == 0) ? even++ : odd++;\n        }\n    }\n    return\
    \ [even, odd];\n}\n", "  // Write your code here\n  let even_count = 0,\n    odd_count\
    \ = 0;\n  if (n === 1) {\n    even_count = 1;\n    odd_count = 0;\n  } else {\n\
    \    let i = 2;\n    while (i <= n) {\n      if (is_palindrome(i)) {\n       \
    \ if (i % 2 === 0) {\n          even_count++;\n        } else {\n          odd_count++;\n\
    \        }\n      }\n      i++;\n    }\n  }\n  return [even_count, odd_count];\n\
    }\n\nconsole.log(even_odd_palindrome(12));\n", "  let even = 0;\n  let odd = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2\
    \ === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n\
    \  }\n  return [even, odd];\n}\n", "  let even_num = 0;\n  let odd_num = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString())) {\n   \
    \   i % 2 === 0 ? even_num++ : odd_num++;\n    }\n  }\n  return [even_num, odd_num];\n\
    }\n", "    let even: number = 0;\n    let odd: number = 0;\n    for (let i = 1;\
    \ i <= n; i++) {\n        let palindrome: boolean = palindrome_check(i);\n   \
    \     if (palindrome) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}", "    let even = 0;\n    let odd = 0;\n    for (let\
    \ i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2\
    \ === 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n    }\n    return [even, odd];\n}\n", "  let array\
    \ = [];\n  for (let i = 1; i <= n; i++) {\n    if (i < 10) {\n      array.push(i);\n\
    \    } else if (i >= 10 && i < 100) {\n      if (i.toString()[0] === i.toString()[1])\
    \ {\n        array.push(i);\n      }\n    } else if (i >= 100 && i < 1000) {\n\
    \      if (i.toString()[0] === i.toString()[2]) {\n        array.push(i);\n  \
    \    }\n    }\n  }\n  let even_palindrome = 0;\n  let odd_palindrome = 0;\n  for\
    \ (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0) {\n      even_palindrome++;\n\
    \    } else {\n      odd_palindrome++;\n    }\n  }\n  return [even_palindrome,\
    \ odd_palindrome];\n}\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "  if (n === 1) return [0, 1];\n  let even_palindrome = 0;\n  let odd_palindrome\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      if\
    \ (i % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n\
    \      }\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n}\n", "  //\
    \ Write your code here\n  if (n < 1 || n > Math.pow(10, 3)) {\n    throw Error(\"\
    Input must be between 1 and 10^3\");\n  }\n  let even = 0;\n  let odd = 0;\n \
    \ for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i.toString())) {\n    \
    \  if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n     \
    \ }\n    }\n  }\n  return [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if\
    \ (i % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    }\n  }\n  return [evenCount, oddCount];\n}\n", "  let even = 0,\n\
    \    odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n\
    \      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n \
    \     }\n    }\n  }\n  return [even, odd];\n}\n", "    let even_count = 0;\n \
    \   let odd_count = 0;\n    let count = 0;\n    let num = '';\n    let arr = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        num = i.toString();\n        for\
    \ (let j = 0; j < num.length; j++) {\n            if (num[j] === num[num.length\
    \ - 1 - j]) {\n                count += 1;\n            }\n        }\n       \
    \ if (count === num.length) {\n            arr.push(num);\n        }\n       \
    \ count = 0;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length\
    \ % 2 === 0) {\n            even_count += 1;\n        } else {\n            odd_count\
    \ += 1;\n        }\n    }\n    return [even_count, odd_count];\n}\nconsole.log(even_odd_palindrome(12));",
  "  let [even, odd] = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      i % 2 === 0 ? even++ : odd++;\n    }\n  }\n  return [even, odd];\n\
    }\nconsole.log(even_odd_palindrome(3));\n", "  const res: [number, number] = [0,\
    \ 0];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if\
    \ (i % 2 === 0) {\n        res[0]++;\n      } else {\n        res[1]++;\n    \
    \  }\n    }\n  }\n  return res;\n}", "    let even = 0;\n    let odd = 0;\n  \
    \  for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n          \
    \  if (i % 2 === 0) {\n                even++;\n            } else {\n       \
    \         odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n\
    \nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "    let [even, odd] = [0, 0];\n    for (let i = 1; i <= n; i++) {\n        let\
    \ str = i.toString();\n        if (isPalindrome(str)) {\n            if (isEven(str))\
    \ {\n                even++;\n            } else {\n                odd++;\n \
    \           }\n        }\n    }\n    return [even, odd];\n}", "  let even = 0;\n\
    \  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const str = i.toString();\n\
    \    if (isPalindrome(str)) {\n      if (i % 2 === 0) {\n        even++;\n   \
    \   } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
  "  let evens = 0;\n  let odds = 0;\n  const odd = (num: number) => {\n    return\
    \ !(num % 2 === 0);\n  };\n  const palindrome = (num: number) => {\n    const\
    \ arr = num.toString().split(\"\");\n    if (arr.length === 1) {\n      return\
    \ true;\n    }\n    for (let i = 0; i < arr.length / 2; i++) {\n      if (arr[i]\
    \ !== arr[arr.length - i - 1]) {\n        return false;\n      }\n    }\n    return\
    \ true;\n  };\n  for (let i = 1; i <= n; i++) {\n    if (palindrome(i)) {\n  \
    \    if (odd(i)) {\n        odds++;\n      } else {\n        evens++;\n      }\n\
    \    }\n  }\n  return [evens, odds];\n}\n", "    let even_count = 0;\n    let\
    \ odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n        let num = i.toString();\n\
    \        let len = num.length;\n        if (len === 1) {\n            odd_count++;\n\
    \        } else if (len === 2) {\n            even_count++;\n        } else {\n\
    \            let front = num.slice(0, len / 2);\n            let back = num.slice(len\
    \ / 2 + 1, len);\n            back = reverse(back);\n            if (front ===\
    \ back) {\n                if (len % 2 === 0) {\n                    even_count++;\n\
    \                } else {\n                    odd_count++;\n                }\n\
    \            }\n        }\n    }\n    return [even_count, odd_count];\n}\n", " \
    \ let result: [number, number] = [0, 0];\n  for (let i = 1; i <= n; i++) {\n \
    \   if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        result[0] += 1;\n\
    \      } else {\n        result[1] += 1;\n      }\n    }\n  }\n  return result;\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ if (i.toString() === i.toString().split(\"\").reverse().join(\"\")) {\n    \
    \  if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n     \
    \ }\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_palindrome(12));",
  "    let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n        let s =\
    \ i.toString();\n        if (s === s.split('').reverse().join('')) {\n       \
    \     if (i % 2 === 0) {\n                even++;\n            } else {\n    \
    \            odd++;\n            }\n        }\n    }\n    return [even, odd];\n\
    }", "  let even_count = 0;\n  let odd_count = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    let rev = Number(\n      i\n        .toString()\n        .split(\"\"\
    )\n        .reverse()\n        .join(\"\")\n    );\n    if (i === rev) {\n   \
    \   if (i % 2 === 0) {\n        even_count++;\n      } else {\n        odd_count++;\n\
    \      }\n    }\n  }\n  return [even_count, odd_count];\n}\n", "    let even =\
    \ 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i))\
    \ {\n            if (i % 2 === 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\n", "  let odd = 0;\n  let even = 0;\n  let i = 1;\n  while (i <= n)\
    \ {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even++;\n \
    \     } else {\n        odd++;\n      }\n    }\n    i++;\n  }\n  return [even,\
    \ odd];\n}\n", "  let even = 0;\n  let odd = 0;\n  let palindrome = \"\";\n  for\
    \ (let i = 1; i <= n; i++) {\n    palindrome = String(i)\n      .split(\"\")\n\
    \      .reverse()\n      .join(\"\");\n    if (i === Number(palindrome)) {\n \
    \     if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n  \
    \    }\n    }\n  }\n  return [even, odd];\n}\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));", "  const even = Math.floor(n / 2);\n \
    \ const odd = Math.ceil(n / 2);\n  return [even, odd];\n}\n\nexport { even_odd_palindrome\
    \ };", "    // This is your job. :)\n    let even = 0;\n    let odd = 0;\n   \
    \ for (let i = 1; i <= n; i++) {\n        let num = i;\n        let reversed =\
    \ 0;\n        while (num > 0) {\n            reversed = reversed * 10 + num %\
    \ 10;\n            num = Math.floor(num / 10);\n        }\n        if (reversed\
    \ === i) {\n            if (i % 2 === 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n        }\n    }\n    return\
    \ [even, odd];\n}\n", "    let even: number = 0;\n    let odd: number = 0;\n \
    \   for (let i = 1; i <= n; i++) {\n        if (i <= 9) {\n            even++;\n\
    \        } else if (i <= 99) {\n            odd++;\n        } else if (i <= 999)\
    \ {\n            if (i % 11 === 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "    let evens = 0;\n    let odds = 0;\n    for (let i = 1; i <= n; i++) {\n   \
    \     if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n               \
    \ evens++;\n            } else {\n                odds++;\n            }\n   \
    \     }\n    }\n    return [evens, odds];\n}\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));\n", "  let countEven = 0;\n  let countOdd\
    \ = 0;\n  let i = 1;\n  while (i <= n) {\n    if (check_palindrome(i)) {\n   \
    \   if (i % 2 === 0) {\n        countEven++;\n      } else {\n        countOdd++;\n\
    \      }\n    }\n    i++;\n  }\n  return [countEven, countOdd];\n}\n", "    if\
    \ (n === 1) {\n        return [0, 1];\n    }\n    let even = 0;\n    let odd =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i.toString()))\
    \ {\n            if (i % 2 === 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\n\nexport function even_odd_palindrome_test() {\n    console.log(even_odd_palindrome(3));\n\
    \    console.log(even_odd_palindrome(12));\n}", "  // n is positive, so we can't\
    \ count 1 or 2,\n  // but we do need to count 0 and 1\n  let [evens, odds] = [0,\
    \ 1];\n  // starting at 3, check whether the number is a palindrome\n  for (let\
    \ i = 3; i <= n; i++) {\n    // if it is, check whether the number is even or\
    \ odd\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        evens++;\n\
    \      } else {\n        odds++;\n      }\n    }\n  }\n  return [evens, odds];\n\
    }\n", "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (isPalindrome(i.toString())) {\n            if (i % 2 === 0) {\n \
    \               even++;\n            } else {\n                odd++;\n      \
    \      }\n        }\n    }\n    return [even, odd];\n}\n", "    //return [evens,\
    \ odds]\n    let evens = 0, odds = 0;\n    for (let i = 1; i <= n; i++) {\n  \
    \      if (is_palindrome(i)) {\n            if (i % 2 === 0) evens++;\n      \
    \      else odds++;\n        }\n    }\n    return [evens, odds];\n}\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));\nconsole.log(even_odd_palindrome(4));\n\
    console.log(even_odd_palindrome(10));\n", "    return [0, 0];\n}\n", "    let\
    \ evens = 0, odds = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i))\
    \ {\n            if (i % 2 == 0) {\n                evens++;\n            } else\
    \ {\n                odds++;\n            }\n        }\n    }\n    return [evens,\
    \ odds];\n}\n", "    const even: number = 0;\n    const odd: number = 0;\n   \
    \ // TODO - you fill in here.\n    return [even, odd];\n}\n", "  let numOfEvenPalindromes\
    \ = 0;\n  let numOfOddPalindromes = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ if (is_palindrome(i)) {\n      if (i % 2 === 0) {\n        numOfEvenPalindromes++;\n\
    \      } else {\n        numOfOddPalindromes++;\n      }\n    }\n  }\n  return\
    \ [numOfEvenPalindromes, numOfOddPalindromes];\n}\n", "  let countEven = 0;\n\
    \  let countOdd = 0;\n  for (let i = 1; i <= n; i++) {\n    let isPalindrome =\
    \ i.toString() === i.toString().split('').reverse().join('');\n    if (isPalindrome)\
    \ {\n      let isEven = i % 2 === 0;\n      if (isEven) {\n        countEven++;\n\
    \      } else {\n        countOdd++;\n      }\n    }\n  }\n  return [countEven,\
    \ countOdd];\n}\n\ndescribe('even_odd_palindrome', () => {\n  it('should return\
    \ [1, 2]', () => {\n    const result = even_odd_palindrome(3);\n    expect(result).toEqual([1,\
    \ 2]);\n  });\n  it('should return [4, 6]', () => {\n    const result = even_odd_palindrome(12);\n\
    \    expect(result).toEqual([4, 6]);\n  });\n});", "    let even = 0, odd = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n        \
    \    if (i % 2 === 0) {\n                even++;\n            } else {\n     \
    \           odd++;\n            }\n        }\n    }\n    return [even, odd];\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n   \
    \ let reversed = parseInt(i.toString().split('').reverse().join(''));\n    if\
    \ (i === reversed) {\n      i % 2 === 0 ? even++ : odd++;\n    }\n  }\n  return\
    \ [even, odd];\n}\n", "  let even = 0,\n    odd = 0;\n  let oddPalindrome = [];\n\
    \  let evenPalindrome = [];\n  for (let i = 1; i <= n; i++) {\n    let intPalindrome\
    \ = i.toString().split(\"\").reverse().join(\"\");\n    if (i == intPalindrome)\
    \ {\n      if (i % 2 == 0) {\n        evenPalindrome.push(i);\n      } else {\n\
    \        oddPalindrome.push(i);\n      }\n    }\n  }\n  return [evenPalindrome.length,\
    \ oddPalindrome.length];\n}\n", "  let odd = 0,\n    even = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    let m = i;\n    let reversed = 0;\n    while (m > 0)\
    \ {\n      let d = m % 10;\n      reversed = reversed * 10 + d;\n      m = Math.floor(m\
    \ / 10);\n    }\n    if (reversed === i) {\n      if (i % 2 === 0) {\n       \
    \ even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even,\
    \ odd];\n}", "    let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (i < 10) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        } else {\n\
    \            if (String(i) === String(i).split('').reverse().join('')) {\n   \
    \             if (i % 2 === 0) {\n                    even++;\n              \
    \  } else {\n                    odd++;\n                }\n            }\n  \
    \      }\n    }\n    return [even, odd];\n}\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));", "  let evens = 0, odds = 0;\n  for (let\
    \ i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      if (i % 2 === 0) {\n\
    \        evens++;\n      } else {\n        odds++;\n      }\n    }\n  }\n  return\
    \ [evens, odds];\n}\n", "    const evenPalindromes = [];\n    const oddPalindromes\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n\
    \            if (i % 2 === 0) {\n                evenPalindromes.push(i);\n  \
    \          } else {\n                oddPalindromes.push(i);\n            }\n\
    \        }\n    }\n    return [evenPalindromes.length, oddPalindromes.length];\n\
    }\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n        }\n    }\n\
    \    return [even, odd];\n}\n", "  const palindromes = []\n  for (let i = 1; i\
    \ <= n; i++) {\n    if (isPalindrome(i)) {\n      palindromes.push(i)\n    }\n\
    \  }\n  return [palindromes.filter(v => v % 2 === 0).length, palindromes.filter(v\
    \ => v % 2 !== 0).length]\n}\n", "    let even_count = 0;\n    let odd_count =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i.toString()))\
    \ {\n            if (i % 2 === 0) {\n                even_count++;\n         \
    \   } else {\n                odd_count++;\n            }\n        }\n    }\n\
    \    return [even_count, odd_count];\n}\n", "    let even_count = 0;\n    let\
    \ odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i))\
    \ {\n            if (i % 2 === 0) {\n                even_count++;\n         \
    \   } else {\n                odd_count++;\n            }\n        }\n    }\n\
    \    return [even_count, odd_count];\n}\n", "  let odds = 0;\n  let evens = 0;\n\
    \  for (let i = 1; i <= n; i++) {\n    if (is_palindrome(i)) {\n      if (i %\
    \ 2 === 0) {\n        evens++;\n      } else {\n        odds++;\n      }\n   \
    \ }\n  }\n  return [evens, odds];\n}\n", "    let even = 0;\n    let odd = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n       \
    \     if (i % 2 === 0) {\n                even++;\n            } else {\n    \
    \            odd++;\n            }\n        }\n    }\n    return [even, odd];\n\
    }\n", "  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        arr.push(1);\n      } else {\n        arr.push(2);\n\
    \      }\n    }\n  }\n  return [arr.filter((n) => n === 1).length, arr.filter((n)\
    \ => n === 2).length];\n}", "    const evenCount = Math.floor(n / 2);\n    const\
    \ oddCount = n - evenCount;\n    return [evenCount, oddCount];\n}\n", "  let count\
    \ = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (i.toString() === i.toString().split(\"\
    \").reverse().join(\"\")) {\n      count[i % 2]++;\n    }\n  }\n  return count;\n\
    }\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));\n",
  "  let even: number = 0;\n  let odd: number = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (isPalindrome(i)) {\n      if (i % 2 == 0) {\n        even++;\n  \
    \    } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n}\n",
  "  if (n <= 1) return [0, 0];\n  let cnt_even: number = 0;\n  let cnt_odd: number\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    const str: string = i.toString();\n\
    \    if (str.length === 1) {\n      cnt_odd++;\n    } else if (str.length ===\
    \ 2) {\n      cnt_even++;\n    } else {\n      if (str.length % 2 === 0) {\n \
    \       cnt_even++;\n      } else {\n        cnt_odd++;\n      }\n    }\n  }\n\
    \  return [cnt_even, cnt_odd];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
