language: ts
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true\n    let decreasing = true\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false\n        }\n        if (l[i] < l[i + 1]) {\n           \
    \ decreasing = false\n        }\n    }\n    return increasing || decreasing\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) return true;\n    let flag = l[1] - l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] - l[i - 1] !== flag)\
    \ return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcn0fu6ej.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcn0fu6ej.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 3) {\n        return true;\n    }\n    let increasing\
    \ = (l[1] > l[0]);\n    for (let i = 1; i < l.length; i++) {\n        if (increasing)\
    \ {\n            if (l[i] < l[i - 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] > l[i - 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((x, i) => {\n    if (i === 0) return true;\n   \
    \ return l[i] >= l[i - 1];\n  }) || l.every((x, i) => {\n    if (i === 0) return\
    \ true;\n    return l[i] <= l[i - 1];\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if(l.length < 2) {\n        return true;\n    }\n    const inc:\
    \ boolean = l[0] < l[1];\n    for(let i = 1; i < l.length; i++) {\n        if(inc)\
    \ {\n            if(l[i] < l[i - 1]) {\n                return false;\n      \
    \      }\n        } else {\n            if(l[i] > l[i - 1]) {\n              \
    \  return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    var a = l[0];\n    var type = null;\n    for (var i = 1; i <\
    \ l.length; i++) {\n        if (type == null) {\n            if (l[i] > a) {\n\
    \                type = \"increasing\";\n            } else if (l[i] < a) {\n\
    \                type = \"decreasing\";\n            }\n        } else if (type\
    \ == \"increasing\") {\n            if (l[i] < a) {\n                return false;\n\
    \            }\n        } else if (type == \"decreasing\") {\n            if (l[i]\
    \ > a) {\n                return false;\n            }\n        }\n        a =\
    \ l[i];\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let a = l[0];\n    let b = l[1];\n    let c = l[2];\n    if (a\
    \ > b && b > c) {\n        return true;\n    } else if (a < b && b < c) {\n  \
    \      return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6eiec1cv.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6eiec1cv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    let prev = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        inc = inc && l[i] >= prev;\n\
    \        dec = dec && l[i] <= prev;\n        prev = l[i];\n    }\n    return inc\
    \ || dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return monotonic_inc(l) || monotonic_dec(l);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3b339fik.ts(9,12): error TS2304: Cannot find name
    ''monotonic_inc''.

    ../../../../../tmp/tmp3b339fik.ts(9,32): error TS2304: Cannot find name ''monotonic_dec''.

    '
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let dif: number = 0;\n  for (let i = 0; i < l.length - 1; i++)\
    \ {\n    if (l[i] < l[i + 1]) {\n      if (dif > 0) {\n        return false;\n\
    \      }\n      dif = 1;\n    } else if (l[i] > l[i + 1]) {\n      if (dif < 0)\
    \ {\n        return false;\n      }\n      dif = -1;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz2sdyouq.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz2sdyouq.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((x, i) => {\n    if (i < l.length - 1) {\n     \
    \ return l[i] <= l[i + 1];\n    }\n    return true;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw6wued16.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw6wued16.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true, dec = true;\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > l[i - 1]) dec = false;\n        if (l[i] < l[i -\
    \ 1]) inc = false;\n    }\n    return dec || inc;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return all(l, (elem: number, ind: number) => {\n    if (ind ===\
    \ 0) {\n      return true;\n    }\n    return (elem - l[ind - 1]) * (l[1] - l[0])\
    \ >= 0;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6xmfc31j.ts(9,10): error TS2304: Cannot find name
    ''all''.

    '
  timestamp: 1659822152
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let m = 0;\n\
    \  for (i = 0; i < l.length - 1; i++) {\n    if (l[i] <= l[i + 1]) {\n      k\
    \ = 1;\n    } else {\n      k = 0;\n      break;\n    }\n  }\n  for (j = l.length\
    \ - 1; j > 0; j--) {\n    if (l[j] >= l[j - 1]) {\n      m = 1;\n    } else {\n\
    \      m = 0;\n      break;\n    }\n  }\n  if (k === 1 || m === 1) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nmonotonic([1, 2, 4, 20]);\n\
    monotonic([1, 20, 4, 10]);\nmonotonic([4, 1, 0, -10]);\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr_rv02ee.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr_rv02ee.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) return true;\n    var inc: boolean = true;\n\
    \    var dec: boolean = true;\n    for (var i = 1; i < l.length; i++) {\n    \
    \    if (l[i - 1] < l[i]) dec = false;\n        if (l[i - 1] > l[i]) inc = false;\n\
    \    }\n    return inc || dec;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let d = l[1] - l[0];\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (d * (l[i] - l[i - 1]) < 0) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return true;\n  }\n  let increasing =\
    \ l[0] < l[1];\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n \
    \   let curr = l[i];\n    if (increasing) {\n      if (curr < prev) {\n      \
    \  return false;\n      }\n    } else {\n      if (curr > prev) {\n        return\
    \ false;\n      }\n    }\n    prev = curr;\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length === 0) {\n        return true;\n    }\n    let prev\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (prev < l[i])\
    \ {\n            if (prev === 0) {\n                prev = l[i];\n           \
    \     continue;\n            }\n            return false;\n        }\n       \
    \ if (prev > l[i]) {\n            if (prev === 0) {\n                prev = l[i];\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n        prev = l[i];\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpslzha1iv.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpslzha1iv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let flag = true;\n    if (l.length == 0) {\n        return true;\n\
    \    }\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i +\
    \ 1]) {\n            if (flag == false) {\n                return false;\n   \
    \         }\n        } else if (l[i] > l[i + 1]) {\n            if (flag == true)\
    \ {\n                flag = false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn7obo0yk.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn7obo0yk.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) return true;\n    let newL = [...l];\n    let\
    \ increasing = newL.sort((a, b) => a - b);\n    let decreasing = newL.sort((a,\
    \ b) => b - a);\n    let equal = true;\n    for (let i = 0; i < newL.length; i++)\
    \ {\n        if (newL[i] !== increasing[i]) {\n            equal = false;\n  \
    \          break;\n        }\n    }\n    if (equal) return true;\n    for (let\
    \ i = 0; i < newL.length; i++) {\n        if (newL[i] !== decreasing[i]) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppvn1k0x9.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppvn1k0x9.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length === 0) return true;\n    let cur = l[0];\n    let\
    \ inc = true;\n    let dec = true;\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] >= cur) {\n            dec = false;\n        } else {\n    \
    \        inc = false;\n        }\n        cur = l[i];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppy82d6rj.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppy82d6rj.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015171
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let c = l[0];\n    let b: boolean;\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] - c >= 0) {\n            b = true;\n        } else\
    \ {\n            b = false;\n        }\n        c = l[i];\n    }\n    return b;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdl4al5dd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdl4al5dd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015171
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] < l[i +\
    \ 1]) {\n      while (i < l.length - 1) {\n        if (l[i] > l[i + 1]) {\n  \
    \        return false;\n        }\n        i++;\n      }\n    } else if (l[i]\
    \ > l[i + 1]) {\n      while (i < l.length - 1) {\n        if (l[i] < l[i + 1])\
    \ {\n          return false;\n        }\n        i++;\n      }\n    }\n    i++;\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015171
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((a, b) => b < l.length - 1 ? a <= l[b + 1] : true)\
    \ || l.every((a, b) => b < l.length - 1 ? a >= l[b + 1] : true);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) {\n        return true;\n    }\n\n    let isIncreasing\
    \ = l[0] < l[1];\n    for (let i = 1; i < l.length - 1; i++) {\n        if (isIncreasing\
    \ && l[i] > l[i + 1]) {\n            return false;\n        } else if (!isIncreasing\
    \ && l[i] < l[i + 1]) {\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isIncreasing = true;\n    let isDecreasing = true;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n     \
    \       isIncreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n   \
    \         isDecreasing = false;\n        }\n    }\n    return isIncreasing ||\
    \ isDecreasing;\n}\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1,\
    \ 20, 4, 10]));\nconsole.log(monotonic([4, 1, 0, -10]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    '
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  var is_monotonic = true;\n  if (l.length < 2) {\n    is_monotonic\
    \ = true;\n  } else {\n    var i = 0;\n    while (i < l.length - 1) {\n      if\
    \ (l[i] < l[i + 1]) {\n        if (l[i + 1] > l[i + 2]) {\n          is_monotonic\
    \ = false;\n          break;\n        }\n      } else if (l[i] > l[i + 1]) {\n\
    \        if (l[i + 1] < l[i + 2]) {\n          is_monotonic = false;\n       \
    \   break;\n        }\n      }\n      i++;\n    }\n  }\n  return is_monotonic;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let count = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n\
    \        if (l[i] < l[i + 1]) {\n            count = count + 1;\n        }\n \
    \       else if (l[i] > l[i + 1]) {\n            count = count - 1;\n        }\n\
    \    }\n    if (count === l.length - 1 || count === -l.length + 1) {\n       \
    \ return true;\n    }\n    else {\n        return false;\n    }\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpplfktwwf.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpplfktwwf.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) {\n        return true;\n    }\n    let hasIncreased\
    \ = true;\n    let hasDecreased = true;\n    for (let i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            hasIncreased = false;\n     \
    \   }\n        if (l[i] > l[i - 1]) {\n            hasDecreased = false;\n   \
    \     }\n    }\n    return hasIncreased || hasDecreased;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015171
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const isInc = l[0] <= l[l.length - 1];\n    for (let i = 0; i\
    \ < l.length - 1; i++) {\n        if (isInc && l[i] > l[i + 1]) {\n          \
    \  return false;\n        }\n        if (!isInc && l[i] < l[i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015171
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let posOrNeg = null;\n  let prev = l[0];\n  let curr: number;\n\
    \  for (let i = 1; i < l.length; i++) {\n    curr = l[i];\n    if (posOrNeg ===\
    \ null) {\n      posOrNeg = curr - prev;\n    } else if (posOrNeg * (curr - prev)\
    \ < 0) {\n      return false;\n    }\n    prev = curr;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increasing = true;\n  let decreasing = true;\n  for (let i\
    \ = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let x: boolean = true;\n    let y: boolean = true;\n    let i:\
    \ number = 0;\n    let j: number = 0;\n    while (i < l.length - 1) {\n      \
    \  if (l[i] < l[i + 1]) {\n            i++;\n        } else {\n            x =\
    \ false;\n            break;\n        }\n    }\n    while (j < l.length - 1) {\n\
    \        if (l[j] > l[j + 1]) {\n            j++;\n        } else {\n        \
    \    y = false;\n            break;\n        }\n    }\n    return x || y;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp27_s1zba.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp27_s1zba.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        inc = inc && l[i] <= l[i + 1];\n        dec =\
    \ dec && l[i] >= l[i + 1];\n    }\n    return inc || dec;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.every((v, i, l) => {\n        if (i == 0) {\n      \
    \      return true;\n        } else {\n            const p = l[i - 1];\n     \
    \       if (p < v) {\n                return true;\n            } else if (p >\
    \ v) {\n                return true;\n            } else {\n                return\
    \ false;\n            }\n        }\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe9e74eg4.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe9e74eg4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 3) {\n    return true;\n  }\n  let a = l[0] < l[1];\n\
    \  let b = l[0] > l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n    if (l[i]\
    \ < l[i + 1] && !a) {\n      return false;\n    }\n    if (l[i] > l[i + 1] &&\
    \ !b) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let r = true;\n    let asc = undefined;\n    let i = 0;\n   \
    \ while (r && i < l.length) {\n        if (asc === undefined) {\n            asc\
    \ = l[i] < l[i + 1];\n        } else {\n            r = asc == (l[i] < l[i + 1]);\n\
    \        }\n        i += 1;\n    }\n    return r;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2deiqcyr.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2deiqcyr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let direction = 0;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        const d = l[i] - l[i + 1];\n        if (d !== 0) {\n            if\
    \ (direction === 0) {\n                direction = d;\n            } else if (direction\
    \ !== d) {\n                return false;\n            }\n        }\n    }\n \
    \   return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2p7aykhs.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2p7aykhs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  // TODO: Implement\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfhnceccb.js:15:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfhnceccb.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015171
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let result = true;\n  let increase = false;\n  let decrease = false;\n\
    \  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) {\n    \
    \  increase = true;\n    } else if (l[i] > l[i + 1]) {\n      decrease = true;\n\
    \    }\n    if (increase && decrease) {\n      result = false;\n      break;\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1,\
    \ 20, 4, 10]));\nconsole.log(monotonic([4, 1, 0, -10]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    '
  timestamp: 1660015171
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let r = true;\n    let size = l.length;\n    if (size > 1) {\n\
    \        let inc = l[1] > l[0];\n        for (let i = 1; i < size; i++) {\n  \
    \          let current = l[i];\n            let previous = l[i - 1];\n       \
    \     if (inc && current < previous) {\n                r = false;\n         \
    \       break;\n            }\n            if (!inc && current > previous) {\n\
    \                r = false;\n                break;\n            }\n        }\n\
    \    }\n    return r;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isIncreasing = true;\n    let isDecreasing = true;\n    let\
    \ i = 0;\n    while (i < l.length - 1) {\n        if (l[i] > l[i + 1]) {\n   \
    \         isIncreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n \
    \           isDecreasing = false;\n        }\n        i++;\n    }\n    return\
    \ isIncreasing || isDecreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.every((v, i, l) => {\n        if (i === 0) return true;\n\
    \        return (l[i - 1] <= v && l[i + 1] <= v) || (l[i - 1] >= v && l[i + 1]\
    \ >= v);\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpokjzb0tk.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpokjzb0tk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015172
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n    let p\
    \ = l[0];\n    let s = l[1] - p;\n    let j = 1;\n    while (j < l.length && s\
    \ * (l[j] - p) >= 0) {\n        p = l[j];\n        s = l[j + 1] - p;\n       \
    \ j++;\n    }\n    return j === l.length;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl28e7iv9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl28e7iv9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let\
    \ i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      isIncreasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isDecreasing = false;\n \
    \   }\n  }\n  return isIncreasing || isDecreasing;\n}\n\nexport default monotonic;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const direction = l[1] - l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (direction * (l[i] - l[i - 1]) < 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nexport { removeDups, removeDupsSet, removeDupsSet2,\
    \ monotonic };\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcuqzwodq.ts(18,10): error TS2304: Cannot find name
    ''removeDups''.

    ../../../../../tmp/tmpcuqzwodq.ts(18,22): error TS2304: Cannot find name ''removeDupsSet''.

    ../../../../../tmp/tmpcuqzwodq.ts(18,37): error TS2304: Cannot find name ''removeDupsSet2''.

    '
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const increasing = isIncreasing(l);\n  const decreasing = isDecreasing(l);\n\
    \  return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpriozlcud.ts(9,22): error TS2552: Cannot find name
    ''isIncreasing''. Did you mean ''increasing''?

    ../../../../../tmp/tmpriozlcud.ts(10,22): error TS2552: Cannot find name ''isDecreasing''.
    Did you mean ''decreasing''?

    '
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let a: boolean = true;\n    let b: boolean = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  a = false;\n        }\n        if (l[i] < l[i + 1]) {\n            b = false;\n\
    \        }\n    }\n    return a || b;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    var increasing = 0;\n    var decreasing = 0;\n    for (var i\
    \ = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            increasing++;\n\
    \        } else if (l[i] > l[i + 1]) {\n            decreasing++;\n        }\n\
    \    }\n    return (increasing == l.length - 1 || decreasing == l.length - 1);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxvxsexj3.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxvxsexj3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increase = true;\n    let decrease = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increase = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decrease\
    \ = false;\n        }\n    }\n    return increase || decrease;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (!l.length) return true;\n  let isIncreasing = l[0] <= l[1];\n\
    \  for (let i = 0; i < l.length - 1; i++) {\n    if (isIncreasing && l[i] > l[i\
    \ + 1]) return false;\n    if (!isIncreasing && l[i] < l[i + 1]) return false;\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const n = l.length;\n  if (n < 2) {\n    return true;\n  }\n  let\
    \ inc = false;\n  let dec = false;\n  for (let i = 1; i < n; i++) {\n    const\
    \ diff = l[i] - l[i - 1];\n    if (diff > 0) {\n      inc = true;\n    } else\
    \ if (diff < 0) {\n      dec = true;\n    }\n    if (inc && dec) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  // \"l.length - 1\" is used because the loop needs to iterate to\
    \ the\n  // second to last element to compare it to the last element.\n  for (let\
    \ i = 0; i < l.length - 1; i++) {\n    if (l[i] <= l[i + 1]) {\n      continue;\n\
    \    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph5_a7yg2.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph5_a7yg2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isNonDecreasing = true;\n    let isNonIncreasing = true;\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          isNonDecreasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n\
    \            isNonIncreasing = false;\n        }\n    }\n    return isNonDecreasing\
    \ || isNonIncreasing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    let\
    \ isIncreasing = undefined;\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] == l[i - 1]) {\n            continue;\n        }\n\n        if (isIncreasing\
    \ === undefined) {\n            isIncreasing = l[i] > l[i - 1];\n        } else\
    \ if (isIncreasing != (l[i] > l[i - 1])) {\n            return false;\n      \
    \  }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((num, index) => {\n    if (index > 0) {\n      if\
    \ (num > l[index - 1]) {\n        return l.every((num2, index2) => {\n       \
    \   if (index2 > 0) {\n            return num2 >= l[index2 - 1];\n          }\n\
    \          return true;\n        });\n      } else if (num < l[index - 1]) {\n\
    \        return l.every((num2, index2) => {\n          if (index2 > 0) {\n   \
    \         return num2 <= l[index2 - 1];\n          }\n          return true;\n\
    \        });\n      }\n    }\n    return true;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let last = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (last != l[i]) {\n            let diff = last - l[i];\n          \
    \  for (let j = i + 1; j < l.length; j++) {\n                if (diff != last\
    \ - l[j]) {\n                    return false;\n                }\n          \
    \  }\n            return true;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3x9_r1em.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3x9_r1em.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let f = 0\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] == l[i + 1]) {\n            continue\n        }\n        else if\
    \ (l[i] < l[i + 1]) {\n            if (f == 0) {\n                f = 1\n    \
    \        }\n            else if (f == -1) {\n                return false\n  \
    \          }\n        }\n        else {\n            if (f == 0) {\n         \
    \       f = -1\n            }\n            else if (f == 1) {\n              \
    \  return false\n            }\n        }\n    }\n    return true\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let up = true;\n    let down = true;\n    for (let i = 1; i <\
    \ l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            down = false;\n\
    \        }\n        if (l[i] < l[i - 1]) {\n            up = false;\n        }\n\
    \    }\n    return up || down;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((element, i) => {\n    if (i === 0) {\n      return\
    \ true;\n    }\n    return element === l[i - 1] || element > l[i - 1] || element\
    \ < l[i - 1];\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2vogg99i.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2vogg99i.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let d = false;\n    let i = 0;\n    while (i < l.length - 1)\
    \ {\n        if (l[i] > l[i + 1]) {\n            if (d === true) {\n         \
    \       return false;\n            }\n            d = false;\n        } else if\
    \ (l[i] < l[i + 1]) {\n            if (d === false) {\n                return\
    \ false;\n            }\n            d = true;\n        }\n        i++;\n    }\n\
    \    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_s99br9u.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_s99br9u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length === 0) {\n    return true;\n  }\n\n  let trend = 0;\n\
    \  for (let i = 1; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n      if\
    \ (trend === -1) {\n        return false;\n      }\n      trend = 1;\n    } else\
    \ if (l[i] < l[i - 1]) {\n      if (trend === 1) {\n        return false;\n  \
    \    }\n      trend = -1;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) {\n        return true;\n    }\n\n    if (l[0]\
    \ < l[1]) {\n        for (let i = 1; i < l.length; i++) {\n            if (l[i]\
    \ < l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ } else {\n        for (let i = 1; i < l.length; i++) {\n            if (l[i]\
    \ > l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((e, i) => (i === 0 || l[i] >= l[i - 1])) || l.every((e,\
    \ i) => (i === 0 || l[i] <= l[i - 1]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length === 0) {\n    return true;\n  }\n\n  let increasing\
    \ = true;\n  let decreasing = true;\n\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] < l[i - 1]) {\n      increasing = false;\n    }\n    if (l[i] >\
    \ l[i - 1]) {\n      decreasing = false;\n    }\n  }\n\n  return increasing ||\
    \ decreasing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015176
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2ro8gqz0.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ro8gqz0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015176
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const direction = Math.sign(l[1] - l[0]);\n  for (let i = 2; i\
    \ < l.length; i++) {\n    if (Math.sign(l[i] - l[i - 1]) !== direction) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu81kzpav.ts(9,26): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    ../../../../../tmp/tmpu81kzpav.ts(11,14): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015176
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.every((i, ind) => {\n        return ind === 0 || (i\
    \ - l[ind - 1]) >= 0;\n    }) || l.every((i, ind) => {\n        return ind ===\
    \ 0 || (i - l[ind - 1]) <= 0;\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015176
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.slice(1).every((x, idx) => x * l[idx] >= 0);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpji8_7cyz.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpji8_7cyz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015176
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isIncreasing = true;\n    let isDecreasing = true;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n     \
    \       isIncreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n   \
    \         isDecreasing = false;\n        }\n    }\n    return isIncreasing ||\
    \ isDecreasing;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015176
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const len = l.length;\n  const dir = l[1] - l[0];\n  for (let i\
    \ = 1; i < len; i++) {\n    if (dir === 0) {\n      continue;\n    }\n    if (dir\
    \ > 0 && l[i + 1] < l[i]) {\n      return false;\n    }\n    if (dir < 0 && l[i\
    \ + 1] > l[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const n = l.length;\n    if (n === 0) return true;\n    let direction\
    \ = null;\n    for (let i = 1; i < n; i++) {\n        const prev = l[i - 1];\n\
    \        const curr = l[i];\n        const increment = curr - prev;\n        if\
    \ (direction == null) {\n            direction = increment;\n        } else if\
    \ (increment > 0 && direction < 0) {\n            return false;\n        } else\
    \ if (increment < 0 && direction > 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\ntest(\"monotonic\", () => {\n    expect(monotonic([])).toBe(true);\n\
    \    expect(monotonic([1, 2, 4, 20])).toBe(true);\n    expect(monotonic([1, 20,\
    \ 4, 10])).toBe(false);\n    expect(monotonic([4, 1, 0, -10])).toBe(true);\n});\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgh0t41sq.ts(27,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpgh0t41sq.ts(28,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpgh0t41sq.ts(29,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpgh0t41sq.ts(30,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpgh0t41sq.ts(31,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015177
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbwjqcgok.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbwjqcgok.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015177
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 3) {\n    return true;\n  }\n  let s = 1;\n  if\
    \ (l[0] > l[1]) {\n    s = -1;\n  }\n  for (let i = 0; i < l.length - 1; i++)\
    \ {\n    if (s * (l[i] - l[i + 1]) < 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_wl2_sl0.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_wl2_sl0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const sorted = l.sort();\n  if (l.every((value, index) => value\
    \ === sorted[index])) {\n    return true;\n  }\n  const reverseSorted = l.sort().reverse();\n\
    \  if (l.every((value, index) => value === reverseSorted[index])) {\n    return\
    \ true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoywqojuq.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoywqojuq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let inc = false,\n    dec = false;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      inc = true;\n    } else if (l[i]\
    \ > l[i + 1]) {\n      dec = true;\n    }\n    if (inc && dec) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nexport { monotonic };\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    var t;\n    if (l.length == 0) return true;\n    else t = l[0];\n\
    \    if (l.length == 1) return true;\n    else {\n        for (var i = 1; i <\
    \ l.length; i++) {\n            if (l[i] - t == 1) t = l[i];\n            else\
    \ if (l[i] - t == -1) t = l[i];\n            else return false;\n        }\n \
    \   }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnr1fe8jy.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnr1fe8jy.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;\n}\n\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) return true;\n    const first = l[0];\n   \
    \ const last = l[l.length - 1];\n    if (first < last) {\n        for (let i =\
    \ 1; i < l.length; i++) {\n            if (l[i] < l[i - 1]) return false;\n  \
    \      }\n    } else {\n        for (let i = 1; i < l.length; i++) {\n       \
    \     if (l[i] > l[i - 1]) return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increasing = l[0] < l[1];\n  for (let i = 0; i < l.length -\
    \ 1; i++) {\n    if (increasing) {\n      if (l[i] > l[i + 1]) {\n        return\
    \ false;\n      }\n    } else {\n      if (l[i] < l[i + 1]) {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    var increasing = true;\n    var decreasing = true;\n    for (var\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const size = l.length;\n    if (size === 0) {\n        return\
    \ true;\n    }\n    let direction = 0;\n    for (let i = 1; i < size; i++) {\n\
    \        const d = l[i] - l[i - 1];\n        if (d !== 0) {\n            if (direction\
    \ === 0) {\n                direction = d;\n            } else if (direction >\
    \ 0 !== d > 0) {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 3) {\n    return true;\n  }\n  const direction =\
    \ Math.sign(l[1] - l[0]);\n  for (let i = 2; i < l.length; i++) {\n    if (Math.sign(l[i]\
    \ - l[i - 1]) !== direction) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzvtqdv4q.ts(12,26): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    ../../../../../tmp/tmpzvtqdv4q.ts(14,14): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    const\
    \ direction = l[1] - l[0];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (direction * (l[i] - l[i - 1]) < 0) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015177
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let inc = false;\n  let dec = false;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      inc = true;\n    } else if (l[i]\
    \ > l[i + 1]) {\n      dec = true;\n    }\n  }\n  return inc && !dec || !inc &&\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp97zaf7n0.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp97zaf7n0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015177
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const s = l.join('');\n  return s === s.split('').sort().join('')\
    \ || s === s.split('').sort().reverse().join('');\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm_8_glid.js:15:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_8_glid.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015177
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n    let inc\
    \ = true;\n    let dec = true;\n    for (let i = 1; i < l.length; i++) {\n   \
    \     inc = inc && l[i] >= l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n\
    \    }\n    return inc || dec;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  var t = l[0]\n  var mode = 0\n  for (var i = 1; i < l.length; i++)\
    \ {\n    if (mode == 0) {\n      if (l[i] > t) {\n        mode = 1\n      } else\
    \ if (l[i] < t) {\n        mode = -1\n      }\n    } else if (mode == 1) {\n \
    \     if (l[i] < t) {\n        return false\n      }\n    } else if (mode == -1)\
    \ {\n      if (l[i] > t) {\n        return false\n      }\n    }\n    t = l[i]\n\
    \  }\n  return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    var isIncreasing = true, isDecreasing = true;\n    for (var i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) {\n            isDecreasing\
    \ = false;\n        }\n        if (l[i] < l[i - 1]) {\n            isIncreasing\
    \ = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\n\
    console.log(monotonic([4, 1, 0, -10]));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    '
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let descending = true;\n    let ascending = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1]) {\n          \
    \  descending = false;\n        }\n        if (l[i] > l[i + 1]) {\n          \
    \  ascending = false;\n        }\n    }\n    return descending || ascending;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let dec = true;\n    let inc = true;\n    for (let i = 1; i <\
    \ l.length; i++) {\n        if (l[i - 1] > l[i]) {\n            inc = false;\n\
    \        }\n        if (l[i - 1] < l[i]) {\n            dec = false;\n       \
    \ }\n    }\n    return dec || inc;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const up = l.every((e, i) => i == 0 || e >= l[i - 1]);\n    const\
    \ down = l.every((e, i) => i == 0 || e <= l[i - 1]);\n    return up || down;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true\n    let decreasing = true\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false\n        }\n        if (l[i] < l[i + 1]) {\n           \
    \ decreasing = false\n        }\n    }\n    return increasing || decreasing\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let decreasing = true;\n    let increasing = true;\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) return true;\n    if (l[0] < l[1]) {\n    \
    \    for (let i = 0; i < l.length - 1; i++) {\n            if (l[i] > l[i + 1])\
    \ return false;\n        }\n    } else {\n        for (let i = 0; i < l.length\
    \ - 1; i++) {\n            if (l[i] < l[i + 1]) return false;\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((e, i) => i === 0 || l[i - 1] < e) || l.every((e,\
    \ i) => i === 0 || l[i - 1] > e);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnm59gnfb.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnm59gnfb.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        inc = inc && l[i] <= l[i + 1];\n        dec =\
    \ dec && l[i] >= l[i + 1];\n    }\n    return inc || dec;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let ordering = '';\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] === l[i + 1]) continue;\n        if (l[i] < l[i + 1]) {\n\
    \            if (ordering !== '' && ordering !== 'increasing') return false;\n\
    \            ordering = 'increasing';\n        } else {\n            if (ordering\
    \ !== '' && ordering !== 'decreasing') return false;\n            ordering = 'decreasing';\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((v, i) => (i < l.length - 1 ? v < l[i + 1] : true))\
    \ || l.every((v, i) => (i < l.length - 1 ? v > l[i + 1] : true));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzpkfmnmh.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzpkfmnmh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015179
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return isIncreasing(l) || isDecreasing(l);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1z7my1i2.ts(9,10): error TS2304: Cannot find name
    ''isIncreasing''.

    ../../../../../tmp/tmp1z7my1i2.ts(9,29): error TS2304: Cannot find name ''isDecreasing''.

    '
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  var inc = true;\n  var dec = true;\n  for (var i = 1; i < l.length;\
    \ i++) {\n    inc = inc && l[i] >= l[i - 1];\n    dec = dec && l[i] <= l[i - 1];\n\
    \  }\n  return inc || dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length <= 1) {\n    return true;\n  }\n  // The initial state\
    \ of the function\n  const [first, second] = l;\n  // We don't care which direction\
    \ the numbers are going yet.\n  let [curr, prev] = [second, first];\n  let ordered\
    \ = curr >= prev;\n  for (let i = 2; i < l.length; i++) {\n    prev = curr;\n\
    \    curr = l[i];\n    if (ordered && curr < prev) {\n      return false;\n  \
    \  } else if (!ordered && curr > prev) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let init = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if ((init > l[i] && init >= l[i - 1]) || (init < l[i] && init <= l[i\
    \ - 1])) {\n            init = l[i];\n        } else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpunhwxb3j.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpunhwxb3j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) return true;\n    const isIncreasing = l[0]\
    \ < l[1];\n    for (let i = 0; i < l.length - 1; i++) {\n        if (isIncreasing\
    \ && l[i] > l[i + 1]) return false;\n        if (!isIncreasing && l[i] < l[i +\
    \ 1]) return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((_, i) => (i === 0 || l[i] === l[i - 1] + 1 || l[i]\
    \ === l[i - 1] - 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp_i7993i.js:14:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp_i7993i.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isIncreasing = true;\n    let isDecreasing = true;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n     \
    \       isIncreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n   \
    \         isDecreasing = false;\n        }\n    }\n    return isIncreasing ||\
    \ isDecreasing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increasing = true;\n  let decreasing = true;\n  for (let i\
    \ = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      decreasing\
    \ = false;\n    }\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015180
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isPositive: boolean = true;\n    let isNegative: boolean\
    \ = true;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < l[i +\
    \ 1]) {\n            isNegative = false;\n        }\n        if (l[i] > l[i +\
    \ 1]) {\n            isPositive = false;\n        }\n    }\n    return isPositive\
    \ || isNegative;\n}\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1,\
    \ 20, 4, 10]));\nconsole.log(monotonic([4, 1, 0, -10]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    '
  timestamp: 1660015180
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  // Your solution goes here\n  let count = 0;\n  let rev = true;\n\
    \  if (l.length <= 1) {\n    return true;\n  }\n  while (count < l.length) {\n\
    \    if (count + 1 < l.length) {\n      if (l[count] > l[count + 1]) {\n     \
    \   rev = false;\n        break;\n      }\n    }\n    count++;\n  }\n  count =\
    \ 0;\n  while (count < l.length) {\n    if (count + 1 < l.length) {\n      if\
    \ (l[count] < l[count + 1]) {\n        rev = false;\n        break;\n      }\n\
    \    }\n    count++;\n  }\n  return rev;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s5xoqxc.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s5xoqxc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increasing = true;\n  let decreasing = true;\n  for (let i\
    \ = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  // 1. check if the array is increasing\n  let increasing = true;\n\
    \  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if\
    \ (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i +\
    \ 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n\
    }\n\ntest('monotonic function', () => {\n  expect(monotonic([1, 2, 4, 20])).toBe(true);\n\
    \  expect(monotonic([1, 20, 4, 10])).toBe(false);\n  expect(monotonic([4, 1, 0,\
    \ -10])).toBe(true);\n});\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt1of82f7.ts(23,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpt1of82f7.ts(24,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpt1of82f7.ts(25,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpt1of82f7.ts(26,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015180
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = 0;\n    let dec = 0;\n    for (let i = 0; i < l.length\
    \ - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            inc++;\n        } else\
    \ if (l[i] > l[i + 1]) {\n            dec++;\n        }\n    }\n    return inc\
    \ > 0 && dec == 0 || inc == 0 && dec > 0;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoj_firwh.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoj_firwh.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015181
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) increasing = false;\n\
    \        if (l[i] < l[i + 1]) decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015181
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length <= 1) {\n    return true;\n  }\n  let increasing =\
    \ l[0] < l[1];\n  let decreasing = l[0] > l[1];\n  for (let i = 1; i < l.length\
    \ - 1; i++) {\n    if (increasing && l[i] > l[i + 1]) {\n      return false;\n\
    \    }\n    if (decreasing && l[i] < l[i + 1]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015181
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const sign = l[1] - l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (sign * (l[i] - l[i - 1]) < 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndescribe(\"monotonic\", () => {\n  \
    \  it(\"[1, 2, 4, 20]\", () => {\n        expect(monotonic([1, 2, 4, 20])).toBe(true);\n\
    \    });\n    it(\"[1, 20, 4, 10]\", () => {\n        expect(monotonic([1, 20,\
    \ 4, 10])).toBe(false);\n    });\n    it(\"[4, 1, 0, -10]\", () => {\n       \
    \ expect(monotonic([4, 1, 0, -10])).toBe(true);\n    });\n});\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp963fu3yd.ts(18,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmp963fu3yd.ts(19,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp963fu3yd.ts(20,9): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp963fu3yd.ts(22,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp963fu3yd.ts(23,9): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp963fu3yd.ts(25,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp963fu3yd.ts(26,9): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015181
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.every((x, i) => i === 0 || (x > l[i - 1] || x < l[i\
    \ - 1]));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoxc24flq.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoxc24flq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015181
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length <= 1) {\n    return true;\n  }\n  const dir = l[1]\
    \ > l[0] ? 1 : -1;\n  for (let i = 2; i < l.length; i++) {\n    if (dir === 1\
    \ && l[i] < l[i - 1]) {\n      return false;\n    }\n    if (dir === -1 && l[i]\
    \ > l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length === 0) {\n        return true;\n    }\n    let diffs\
    \ = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let d = l[i + 1]\
    \ - l[i];\n        diffs.push(d);\n    }\n    return (allEqual(diffs) || allEqual(diffs.map(d\
    \ => d * -1)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7cl2a9h_.ts(17,13): error TS2304: Cannot find name
    ''allEqual''.

    ../../../../../tmp/tmp7cl2a9h_.ts(17,32): error TS2304: Cannot find name ''allEqual''.

    '
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return true;\n  }\n\n  const first = l[0];\n\
    \  const second = l[1];\n  const increasing = second > first;\n  const decreasing\
    \ = second < first;\n\n  if (increasing || decreasing) {\n    for (let i = 1;\
    \ i < l.length; i++) {\n      const prev = l[i - 1];\n      const curr = l[i];\n\
    \      if (increasing && prev > curr) {\n        return false;\n      } else if\
    \ (decreasing && prev < curr) {\n        return false;\n      }\n    }\n  } else\
    \ {\n    return false;\n  }\n\n  return true;\n}\n\ntype Range = { start: number;\
    \ end: number };\ntype Event = { start: number; end: number };\ntype EventWithProcessedTime\
    \ = { start: number; end: number; processedTime: number };\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/lib.dom.d.ts(5348,11):
    error TS2300: Duplicate identifier ''Event''.

    ../../../../../home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/lib.dom.d.ts(5416,13):
    error TS2300: Duplicate identifier ''Event''.

    ../../../../../home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/lib.dom.d.ts(12594,11):
    error TS2300: Duplicate identifier ''Range''.

    ../../../../../home/a.guha/.conda/envs/polyglot/lib/node_modules/typescript/lib/lib.dom.d.ts(12634,13):
    error TS2300: Duplicate identifier ''Range''.

    ../../../../../tmp/tmp0b35zw0b.ts(35,6): error TS2300: Duplicate identifier ''Range''.

    ../../../../../tmp/tmp0b35zw0b.ts(36,6): error TS2300: Duplicate identifier ''Event''.

    '
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let monotonic = true;\n    let inc = l[0] < l[1];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (l[i - 1] < l[i] !== inc) {\n      \
    \      monotonic = false;\n            break;\n        }\n    }\n    return monotonic;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.length == 0 ? true :\n        l.every((_, i) => i ==\
    \ 0 ? true : l[i - 1] <= l[i]) ||\n        l.every((_, i) => i == 0 ? true : l[i\
    \ - 1] >= l[i]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true\n    let decreasing = true\n    let lLen\
    \ = l.length\n    for (let i = 0; i < lLen; i++) {\n        increasing = increasing\
    \ && l[i] >= l[i - 1]\n        decreasing = decreasing && l[i] <= l[i - 1]\n \
    \   }\n    return increasing || decreasing\n}\n\nlet m1 = monotonic([1, 2, 4,\
    \ 20])\nassert(m1, true)\n\nlet m2 = monotonic([1, 20, 4, 10])\nassert(m2, false)\n\
    \nlet m3 = monotonic([4, 1, 0, -10])\nassert(m3, true)\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx8oosrus.ts(20,1): error TS2448: Block-scoped variable
    ''assert'' used before its declaration.

    ../../../../../tmp/tmpx8oosrus.ts(23,1): error TS2448: Block-scoped variable ''assert''
    used before its declaration.

    ../../../../../tmp/tmpx8oosrus.ts(26,1): error TS2448: Block-scoped variable ''assert''
    used before its declaration.

    '
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length === 0) {\n    return true;\n  }\n  let inc = true;\n\
    \  let dec = true;\n  for (let i = 1; i < l.length; i++) {\n    inc = inc && l[i]\
    \ >= l[i - 1];\n    dec = dec && l[i] <= l[i - 1];\n  }\n  return inc || dec;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length <= 1) {\n    return true;\n  }\n  let increasing =\
    \ l[0] < l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n    if (increasing)\
    \ {\n      if (l[i] > l[i + 1]) {\n        return false;\n      }\n    } else\
    \ {\n      if (l[i] < l[i + 1]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return true;\n  }\n  let increasing =\
    \ l[0] < l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n    if (increasing)\
    \ {\n      if (l[i] > l[i + 1]) {\n        return false;\n      }\n    } else\
    \ {\n      if (l[i] < l[i + 1]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return true;\n  }\n  let change: boolean\
    \ = false;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > l[i - 1]) {\n\
    \      if (change === false) {\n        change = true;\n      } else if (change\
    \ === true) {\n        return false;\n      }\n    } else if (l[i] < l[i - 1])\
    \ {\n      if (change === false) {\n        change = false;\n      } else if (change\
    \ === false) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo0ekt0w_.ts(23,18): error TS2367: This condition
    will always return ''false'' since the types ''true'' and ''false'' have no overlap.

    '
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        increasing = increasing && l[i] <=\
    \ l[i + 1];\n        decreasing = decreasing && l[i] >= l[i + 1];\n    }\n   \
    \ return increasing || decreasing;\n}\n\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const direction = l[0] > l[l.length - 1] ? -1 : 1;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (direction * (l[i] - l[i + 1]) <\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph7hauedh.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph7hauedh.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 3) {\n    return true;\n  }\n  let inc: boolean\
    \ = l[1] > l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (inc && l[i]\
    \ < l[i - 1]) {\n      return false;\n    }\n    if (!inc && l[i] > l[i - 1])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return _monotonic(l, true) || _monotonic(l, false);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgdfqk842.ts(9,12): error TS2552: Cannot find name
    ''_monotonic''. Did you mean ''monotonic''?

    ../../../../../tmp/tmpgdfqk842.ts(9,35): error TS2552: Cannot find name ''_monotonic''.
    Did you mean ''monotonic''?

    '
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;\n}\n\ntest(\"testMonotonic\", () => {\n   \
    \ expect(monotonic([1, 2, 4, 20])).toBe(true);\n    expect(monotonic([1, 20, 4,\
    \ 10])).toBe(false);\n    expect(monotonic([4, 1, 0, -10])).toBe(true);\n});\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfe0rrzi7.ts(22,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpfe0rrzi7.ts(23,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpfe0rrzi7.ts(24,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpfe0rrzi7.ts(25,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = true;\n    let dec = true;\n    let i = 0;\n    while\
    \ (i < l.length - 1) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n        i++;\n    }\n    return (inc || dec);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return true;\n  }\n  const head = l[0];\n\
    \  const tail = l.slice(1);\n  const subResult = monotonic(tail);\n  if (!subResult)\
    \ {\n    return false;\n  }\n  if (head < tail[0]) {\n    return tail.every(x\
    \ => x >= head);\n  } else {\n    return tail.every(x => x <= head);\n  }\n}\n\
    \ndescribe(\"monotonic\", () => {\n  it(\"test1\", () => {\n    const l: number[]\
    \ = [1, 2, 4, 20];\n    expect(monotonic(l)).toBe(true);\n  });\n  it(\"test2\"\
    , () => {\n    const l: number[] = [1, 20, 4, 10];\n    expect(monotonic(l)).toBe(false);\n\
    \  });\n  it(\"test3\", () => {\n    const l: number[] = [4, 1, 0, -10];\n   \
    \ expect(monotonic(l)).toBe(true);\n  });\n});\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqe6as9t_.ts(25,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpqe6as9t_.ts(26,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpqe6as9t_.ts(28,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpqe6as9t_.ts(30,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpqe6as9t_.ts(32,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpqe6as9t_.ts(34,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpqe6as9t_.ts(36,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015182
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increase = true;\n  let decrease = true;\n  let len = l.length;\n\
    \  for (let i = 0; i < len - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      decrease\
    \ = false;\n    }\n    if (l[i] > l[i + 1]) {\n      increase = false;\n    }\n\
    \  }\n  return increase || decrease;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015182
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.sort((a, b) => a - b).every((e, i, arr) => e === arr[0]\
    \ || e - arr[i - 1] === arr[1] - arr[0]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptld82n46.js:14:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptld82n46.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015183
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const n = l.length;\n  if (n < 2) {\n    return true;\n  }\n\n\
    \  if (l[0] < l[1]) {\n    for (let i = 1; i < n; i++) {\n      if (l[i - 1] >\
    \ l[i]) {\n        return false;\n      }\n    }\n  } else {\n    for (let i =\
    \ 1; i < n; i++) {\n      if (l[i - 1] < l[i]) {\n        return false;\n    \
    \  }\n    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let isIncreasing = false;\n  let isDecreasing = false;\n  l.forEach((num,\
    \ index) => {\n    if (index === 0) {\n      return;\n    }\n    if (num > l[index\
    \ - 1]) {\n      isIncreasing = true;\n    } else if (num < l[index - 1]) {\n\
    \      isDecreasing = true;\n    }\n  });\n  return isIncreasing || isDecreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt3vb1ob_.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt3vb1ob_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015184
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const ln = l.length;\n    if (ln <= 1) {\n        return true;\n\
    \    }\n    // init\n    let factor = l[1] - l[0];\n    for (let i = 2; i < ln;\
    \ i++) {\n        if (factor === 0) {\n            factor = l[i] - l[i - 1];\n\
    \        } else if (factor < 0) {\n            if (l[i] - l[i - 1] >= 0) {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ (l[i] - l[i - 1] <= 0) {\n                return false;\n            }\n   \
    \     }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5g7mu91e.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5g7mu91e.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increase = true;\n    let decrease = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increase = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decrease\
    \ = false;\n        }\n    }\n    return increase || decrease;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) {\n        return true;\n    }\n\n    let grow\
    \ = l[1] > l[0];\n    for (let i = 2; i < l.length; i++) {\n        let cur =\
    \ l[i] > l[i - 1];\n        if (cur !== grow) {\n            return false;\n \
    \       }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increasing = true;\n  let decreasing = true;\n  let prev =\
    \ l[0];\n  for (let v of l) {\n    if (v > prev) {\n      decreasing = false;\n\
    \    } else if (v < prev) {\n      increasing = false;\n    }\n    prev = v;\n\
    \  }\n  return increasing || decreasing;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const direction = getDirection(l);\n  if (direction == null) {\n\
    \    return false;\n  }\n  for (let i = 1; i < l.length; i++) {\n    if ((direction\
    \ === \"down\" && l[i] > l[i - 1]) || (direction === \"up\" && l[i] < l[i - 1]))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprvwaueh6.ts(9,21): error TS2304: Cannot find name
    ''getDirection''.

    '
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    let\
    \ monotonicIncreasing = true;\n    let monotonicDecreasing = true;\n\n    let\
    \ i = 0;\n    while (i < l.length - 1) {\n        if (l[i] > l[i + 1]) {\n   \
    \         monotonicIncreasing = false;\n        }\n        if (l[i] < l[i + 1])\
    \ {\n            monotonicDecreasing = false;\n        }\n        i++;\n    }\n\
    \n    return monotonicIncreasing || monotonicDecreasing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const ordered = l.sort((a, b) => a - b);\n    return ordered.every((_,\
    \ i) => i == 0 || ordered[i] - ordered[i - 1] >= 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj149dpha.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj149dpha.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const N = l.length;\n    let increasing = true;\n    let decreasing\
    \ = true;\n    for (let i = 0; i < N - 1; i++) {\n        increasing = increasing\
    \ && l[i] <= l[i + 1];\n        decreasing = decreasing && l[i] >= l[i + 1];\n\
    \    }\n    return increasing || decreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length === 0) {\n    return true;\n  }\n\n  let increasing\
    \ = l[0] < l[1];\n  let decreasing = l[0] > l[1];\n\n  for (let i = 2; i < l.length;\
    \ i++) {\n    if (increasing && l[i - 1] > l[i]) {\n      return false;\n    }\n\
    \n    if (decreasing && l[i - 1] < l[i]) {\n      return false;\n    }\n  }\n\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const length = l.length;\n    let i = 0;\n    let j = 1;\n  \
    \  let direction: boolean;\n    while (j < length) {\n        const delta = l[j]\
    \ - l[i];\n        if (delta === 0) {\n            j++;\n            continue;\n\
    \        }\n        if (direction === undefined) {\n            direction = delta\
    \ > 0;\n        }\n        if (direction !== (delta > 0)) {\n            return\
    \ false;\n        }\n        i = j;\n        j++;\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4r8ihssv.js:14:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4r8ihssv.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015185
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = l[0] < l[1];\n    let decreasing = l[0] > l[1];\n\
    \    for (let i = 2; i < l.length; i++) {\n        if (increasing && l[i] < l[i\
    \ - 1]) {\n            return false;\n        }\n        if (decreasing && l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let isMono = true;\n    let pos = 0;\n    let neg = 0;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i + 1]) {\n     \
    \       pos++;\n        } else if (l[i] > l[i + 1]) {\n            neg++;\n  \
    \      }\n    }\n    if (pos > 0 && neg > 0) {\n        isMono = false;\n    }\n\
    \    return isMono;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const incr = (a: number, b: number) => a < b;\n    const decr\
    \ = (a: number, b: number) => a > b;\n    return l.every((v, i, a) => i === 0\
    \ || a[i - 1] === v || incr(a[i - 1], v) || decr(a[i - 1], v));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdflu6s8j.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdflu6s8j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let inc = l[0] <= l[1];\n    for (let i = 1; i < l.length - 1;\
    \ i++) {\n        let curr = l[i];\n        let next = l[i + 1];\n        if (inc\
    \ && curr > next) {\n            return false;\n        } else if (!inc && curr\
    \ < next) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    \n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015184
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length <= 1) {\n    return true;\n  }\n  let a: number =\
    \ Math.sign(l[1] - l[0]);\n  for (let i = 2; i < l.length; i++) {\n    if (a *\
    \ (l[i] - l[i - 1]) < 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppejaiqe_.ts(12,24): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015184
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) return true;\n    let direction = l[1] - l[0];\n\
    \    for (let i = 2; i < l.length; i++) {\n        if (direction * (l[i] - l[i\
    \ - 1]) < 0) return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015185
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  // YOUR CODE HERE\n  let direction: number = l[0] - l[1];\n  let\
    \ isMonotonic: boolean = true;\n  let elmt: number;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (direction === 0) {\n      direction = l[i] - l[i + 1];\n   \
    \ } else {\n      elmt = l[i] - l[i + 1];\n      if (direction * elmt < 0) {\n\
    \        isMonotonic = false;\n        break;\n      }\n    }\n  }\n  return isMonotonic;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015185
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 3) {\n        return true;\n    }\n    let prev\
    \ = l[0];\n    let direction = l[1] - l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        let val = l[i];\n        if (direction * (val - prev) <= 0)\
    \ {\n            return false;\n        }\n        prev = val;\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxbvfe97o.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxbvfe97o.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015185
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let up = true;\n  let down = true;\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (l[i] < l[i - 1]) up = false;\n    if (l[i] > l[i - 1]) down\
    \ = false;\n  }\n  return up || down;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015185
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((v, i) => !i || l[i - 1] <= v) || l.every((v, i)\
    \ => !i || l[i - 1] >= v);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015185
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return isIncreasing(l) || isDecreasing(l);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1z7my1i2.ts(9,10): error TS2304: Cannot find name
    ''isIncreasing''.

    ../../../../../tmp/tmp1z7my1i2.ts(9,29): error TS2304: Cannot find name ''isDecreasing''.

    '
  timestamp: 1660015179
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    let\
    \ direction = l[0] - l[1];\n    for (let i = 1; i < l.length; i++) {\n       \
    \ if (direction == 0) {\n            direction = l[i - 1] - l[i];\n          \
    \  continue;\n        }\n\n        if (Math.sign(direction) != Math.sign(l[i -\
    \ 1] - l[i])) {\n            return false;\n        }\n    }\n\n    return true;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpygt9okl1.ts(20,18): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    ../../../../../tmp/tmpygt9okl1.ts(20,42): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015186
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n    let i\
    \ = 0;\n    let direction = l[i + 1] - l[i];\n    while (i < l.length - 1) {\n\
    \        if (direction * (l[i + 1] - l[i]) < 0) {\n            return false;\n\
    \        }\n        i++;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015186
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length < 2) {\n    return true;\n  }\n  const dir = l[1]\
    \ - l[0];\n  for (let i = 2; i < l.length; i++) {\n    if (dir * (l[i] - l[i -\
    \ 1]) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport const\
    \ primes = (n: number): number[] => {\n  const primes = [];\n  const notPrimes\
    \ = new Set();\n  for (let i = 2; i <= n; i++) {\n    if (!notPrimes.has(i)) {\n\
    \      primes.push(i);\n      for (let j = i * i; j <= n; j += i) {\n        notPrimes.add(j);\n\
    \      }\n    }\n  }\n  return primes;\n};\n\nexport function permutations(s:\
    \ string): string[] {\n  const perms = permutationsR(s);\n  const out = [];\n\
    \  for (const p of perms) {\n    if (!out.includes(p)) {\n      out.push(p);\n\
    \    }\n  }\n  return out;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp080hx4v8.ts(23,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp080hx4v8.ts(36,17): error TS2552: Cannot find name ''permutationsR''.
    Did you mean ''permutations''?

    ../../../../../tmp/tmp080hx4v8.ts(39,14): error TS2339: Property ''includes''
    does not exist on type ''any[]''.

    '
  timestamp: 1660015186
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n    let isAscending\
    \ = l[0] < l[1];\n    for (let i = 1; i < l.length - 1; i++) {\n        if (isAscending)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015186
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let mode = l[0] <= l[1] ? 'inc' : 'dec';\n  return l.every((num,\
    \ index) => {\n    if (index === 0) return true;\n    if (mode === 'inc') return\
    \ num >= l[index - 1];\n    return num <= l[index - 1];\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015186
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let el: number;\n  let prevEl: number;\n  let isIncreasing: boolean\
    \ = null;\n  let isDecreasing: boolean = null;\n  for (let i = 0; i < l.length;\
    \ i++) {\n    prevEl = el;\n    el = l[i];\n    if (prevEl !== undefined) {\n\
    \      if (prevEl < el) {\n        isIncreasing = true;\n      } else if (prevEl\
    \ > el) {\n        isDecreasing = true;\n      }\n    }\n  }\n  return !(isIncreasing\
    \ && isDecreasing);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015186
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return l.every((a, i) => {\n    if (i === 0) return true;\n   \
    \ const r = l[i - 1];\n    return a > r || a < r;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpaj0xewfx.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpaj0xewfx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015186
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let newL = [...l];\n  let result = false;\n  let isIncrease = isIncreasing(newL);\n\
    \  let isDecrease = isDecreasing(newL);\n  if (isIncrease || isDecrease) {\n \
    \   result = true;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzq_5hm05.ts(11,20): error TS2552: Cannot find name
    ''isIncreasing''. Did you mean ''isIncrease''?

    ../../../../../tmp/tmpzq_5hm05.ts(12,20): error TS2552: Cannot find name ''isDecreasing''.
    Did you mean ''isDecrease''?

    '
  timestamp: 1660015186
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let increasing = true;\n  let decreasing = true;\n  for (let i\
    \ = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015172
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let cmp = l[0] < l[1] ? 1 : -1;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (cmp !== (l[i] < l[i + 1] ? 1 : -1)) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const N = l.length;\n  let up = 0;\n  let down = 0;\n  for (let\
    \ i = 1; i < N; i++) {\n    if (l[i] > l[i - 1]) {\n      up += 1;\n    } else\
    \ if (l[i] < l[i - 1]) {\n      down += 1;\n    }\n  }\n  return up === 0 || down\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let asc = true;\n    let desc = true;\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            asc = false;\n\
    \        }\n        if (l[i] > l[i - 1]) {\n            desc = false;\n      \
    \  }\n    }\n    return asc || desc;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let increasing = true;\n    let decreasing = true;\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n          \
    \  decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015174
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const diff = l.map((e, i) => e - l[i + 1]);\n    return diff.every(e\
    \ => e === 0 || e < 0) || diff.every(e => e === 0 || e > 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppz7guw7u.js:15:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppz7guw7u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015187
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.every((v, i, l) => (i === 0 || l[i - 1] <= v) && (i\
    \ === l.length - 1 || v <= l[i + 1]));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = monotonic;\n\
    \  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq5afezn_.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq5afezn_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015187
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.reduce((acc, cur, i, arr) => {\n        return acc ===\
    \ 0 && i > 0 ? acc + Math.sign(cur - arr[i - 1]) : acc;\n    }, 0) === 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptjllirm4.ts(10,48): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n\n    let\
    \ m: number = l[0];\n    let m_decreasing: boolean = false;\n    let m_increasing:\
    \ boolean = false;\n\n    for (let i: number = 1; i < l.length; i++) {\n     \
    \   if (l[i] > m) {\n            m_increasing = true;\n        } else if (l[i]\
    \ < m) {\n            m_decreasing = true;\n        }\n        if (m_increasing\
    \ && m_decreasing) {\n            return false;\n        }\n        m = l[i];\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015187
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  const check = l.map((e, i) => {\n    if (i === 0) {\n      return\
    \ 1;\n    }\n    return Math.sign(e - l[i - 1]);\n  });\n  const result = check.filter((e,\
    \ i) => {\n    if (i === 0) {\n      return e;\n    }\n    return e !== check[i\
    \ - 1];\n  });\n  return result.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjbkcloqa.ts(13,17): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 3) return true;\n    let res: boolean;\n    if\
    \ (l[0] < l[1]) {\n        res = l.slice(1).every((n, i) => n >= l[i]);\n    }\
    \ else {\n        res = l.slice(1).every((n, i) => n <= l[i]);\n    }\n    return\
    \ res;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    const isIncreasing = l[0] < l[1];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (isIncreasing && l[i] < l[i - 1]) {\n            return false;\n\
    \        }\n        if (!isIncreasing && l[i] > l[i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015187
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let first = l[0];\n    let increasing = first < l[1];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (increasing && l[i] < l[i - 1])\
    \ {\n            return false;\n        }\n        if (!increasing && l[i] > l[i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    test('monotonic', () => {\n    expect(monotonic([1, 2, 4, 20])).toBe(true);\n\
    \    expect(monotonic([1, 20, 4, 10])).toBe(false);\n    expect(monotonic([4,\
    \ 1, 0, -10])).toBe(true);\n});\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5a103wz6.ts(22,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmp5a103wz6.ts(23,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5a103wz6.ts(24,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5a103wz6.ts(25,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015187
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length < 2) {\n        return true;\n    }\n    let direction\
    \ = 0;\n    for (let i = 1; i < l.length; i++) {\n        const diff = l[i] -\
    \ l[i - 1];\n        if (diff === 0) {\n            continue;\n        }\n   \
    \     if (direction === 0) {\n            direction = diff;\n        } else if\
    \ (diff !== direction) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnbykyewe.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnbykyewe.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015187
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  if (l.length === 0) {\n    return true;\n  }\n  let i = 0;\n  while\
    \ (i < l.length - 1) {\n    if (Math.sign(l[i] - l[i + 1]) !== Math.sign(l[0]\
    \ - l[1])) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp31a79v5u.ts(14,14): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    ../../../../../tmp/tmp31a79v5u.ts(14,45): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let isIncreasing = true;\n  let isDecreasing = true;\n  for (let\
    \ i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      isIncreasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isDecreasing = false;\n \
    \   }\n  }\n  return isIncreasing || isDecreasing;\n}\n\nconsole.log(monotonic([1,\
    \ 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\nconsole.log(monotonic([4,\
    \ 1, 0, -10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    '
  timestamp: 1660015187
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    return l.every((x, i) => i === 0 || (l[i - 1] <= x && l[i - 1]\
    \ >= x));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbx_lfruk.js:14:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbx_lfruk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015187
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n    let increasing\
    \ = l[0] < l[1];\n    for (let i = 1; i < l.length - 1; i++) {\n        if (increasing)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015188
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let direction = l[1] - l[0];\n  for (let i = 2; i < l.length; i++)\
    \ {\n    if (direction !== 0) {\n      if (direction > 0) {\n        if (l[i]\
    \ < l[i - 1]) {\n          return false;\n        }\n      } else {\n        if\
    \ (l[i] > l[i - 1]) {\n          return false;\n        }\n      }\n    } else\
    \ {\n      direction = l[i] - l[i - 1];\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015188
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    var i = 0;\n    var increasing = true;\n    while (i < l.length\
    \ - 1) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n  \
    \          break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i <\
    \ l.length - 1) {\n        if (l[i] < l[i + 1]) {\n            if (!increasing)\
    \ return false;\n        }\n        i++;\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015188
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    if (l.length <= 1) {\n        return true;\n    }\n    if (l[0]\
    \ < l[1]) {\n        for (let i = 1; i < l.length; i++) {\n            if (l[i]\
    \ < l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ } else {\n        for (let i = 1; i < l.length; i++) {\n            if (l[i]\
    \ > l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015188
- exit_code: 1
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  // TODO your code here\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7nbe3yke.js:15:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7nbe3yke.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015188
- exit_code: 2
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  return isIncreasing(l) || isDecreasing(l);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
    \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1z7my1i2.ts(9,10): error TS2304: Cannot find name
    ''isIncreasing''.

    ../../../../../tmp/tmp1z7my1i2.ts(9,29): error TS2304: Cannot find name ''isDecreasing''.

    '
  timestamp: 1660015179
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n  let direction: string = 'equal';\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      if (direction == 'decreasing')\
    \ {\n        return false;\n      }\n      direction = 'increasing';\n    } else\
    \ if (l[i] > l[i + 1]) {\n      if (direction == 'increasing') {\n        return\
    \ false;\n      }\n      direction = 'decreasing';\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2,\
    \ 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015188
- exit_code: 0
  program: "//Return true is array elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n//\
    \ false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]):\
    \ boolean {\n    let c = l[0];\n    let inc = true;\n    let dec = true;\n   \
    \ for (let i = 1; i < l.length; i++) {\n        inc = inc && (l[i] >= c);\n  \
    \      dec = dec && (l[i] <= c);\n        c = l[i];\n    }\n    return inc ||\
    \ dec;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1,\
    \ 2, 4, 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
    \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n \
    \ assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
    \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015188
