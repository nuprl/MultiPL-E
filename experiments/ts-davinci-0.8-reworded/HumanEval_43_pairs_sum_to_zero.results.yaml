language: ts
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ == 0) {\n        return false;\n    }\n    let s = new Set();\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (s.has(l[i])) {\n            return\
    \ true;\n        }\n        s.add(-l[i]);\n    }\n    return false;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0hfhpk1_.ts(18,17): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const nums:\
    \ number[] = [];\n    let i = 0;\n    let j = 0;\n    let pos = 0;\n    while\
    \ (i < l.length) {\n        j = i + 1;\n        while (j < l.length) {\n     \
    \       if (l[i] + l[j] === 0) {\n                return true;\n            }\n\
    \            j = j + 1;\n        }\n        i = i + 1;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // TODO\n  if\
    \ (l.length <= 1) {\n    return false;\n  }\n  else {\n    var yes: boolean =\
    \ false;\n    for (var i = 0; i < l.length; i++) {\n      for (var j = 0; j <\
    \ l.length; j++) {\n        if (l[i] + l[j] == 0 && l[i] != l[j]) {\n        \
    \  yes = true;\n        }\n      }\n    }\n    return yes;\n  }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    else {\n        for (let i = 0; i\
    \ < l.length; i++) {\n            for (let j = 0; j < l.length; j++) {\n     \
    \           if (i !== j && l[i] + l[j] === 0) {\n                    return true;\n\
    \                }\n            }\n        }\n        return false;\n    }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  //your code here\n\
    \  return false;\n}\n\nexport { pairs_sum_to_zero };\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzs68d0jo.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzs68d0jo.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // FILL IN HERE\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2_mc1tu_.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2_mc1tu_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // check if\
    \ array has at least 2 elements\n    if (l.length < 2) {\n        return false;\n\
    \    }\n    // keep track of numbers that have been seen\n    const seen: number[]\
    \ = [];\n    // iterate through each element\n    for (const elem of l) {\n  \
    \      // check if the element's negative has been seen\n        if (seen.includes(-elem))\
    \ {\n            return true;\n        }\n        // add current element to list\
    \ of elements that have been seen\n        seen.push(elem);\n    }\n    // return\
    \ false if we don't find any pair that sums to zero\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppu_ldrxd.ts(24,18): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1659822153
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    return false;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsms0tah1.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsms0tah1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let seen: {\
    \ [k: number]: number } = {};\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (seen[-l[i]]) {\n            return true;\n        }\n        seen[l[i]]\
    \ = 1;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // Iterate through\
    \ list until we reach halfway point\n  // check if the opposite of each element\
    \ is in the list\n  // if it is, return true\n  // if we have iterated through\
    \ the list and not returned true, return false\n  const length = l.length;\n \
    \ const halfway = Math.ceil(length / 2);\n  for (let i = 0; i < halfway; i++)\
    \ {\n    const value = -l[i];\n    for (let x = i + 1; x < length; x++) {\n  \
    \    if (l[x] === value) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let zero_dict:\
    \ Dictionary<number> = {};\n    let l_length: number = l.length;\n    let result:\
    \ boolean = false;\n    if (l_length === 1) {\n        return result;\n    }\n\
    \    for (let i: number = 0; i < l_length; i++) {\n        if (l[i] !== 0) {\n\
    \            zero_dict[l[i]] = l[i];\n        }\n    }\n    for (let j: number\
    \ = 0; j < l_length; j++) {\n        if (l[j] === 0) {\n            if (zero_dict[0]\
    \ === 0) {\n                result = true;\n            }\n        } else {\n\
    \            if (zero_dict[-l[j]]) {\n                result = true;\n       \
    \     }\n        }\n    }\n    return result;\n}\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphnz8m1kw.ts(15,20): error TS2304: Cannot find name
    ''Dictionary''.

    '
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const sum =\
    \ 0;\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j\
    \ < l.length; j++) {\n            if (l[i] + l[j] === sum) {\n               \
    \ return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let i = 0;\n\
    \    let j = 1;\n    while (i < l.length) {\n        while (j < l.length) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n            j += 1;\n        }\n        i += 1;\n        j = i + 1;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // loop over each\
    \ element of the array\n  for (let i = 0; i < l.length; i++) {\n    // loop over\
    \ each other element of the array\n    for (let j = 0; j < l.length; j++) {\n\
    \      // if i and j are distinct indices, and l[i] + l[j] = 0, return true\n\
    \      if (i !== j && l[i] + l[j] === 0) {\n        return true;\n      }\n  \
    \  }\n  }\n  // no two distinct elements sum to zero, return false\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n\n  for (let i = 0; i < l.length; i++) {\n   \
    \ for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n \
    \       return true;\n      }\n    }\n  }\n\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let pairs = new\
    \ Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    pairs.add(l[i]);\n\
    \  }\n  return l.some(i => pairs.has(-i));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4j3a56a2.ts(15,19): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659822153
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_xdwsivy.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_xdwsivy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let valuesSeen:\
    \ Set<number> = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (valuesSeen.has(l[i]))\
    \ {\n      return true;\n    }\n    valuesSeen.add(-l[i]);\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcu096ie_.ts(15,19): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpcu096ie_.ts(15,37): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const nums = l.sort((a,\
    \ b) => a - b);\n  let i = 0;\n  let j = nums.length - 1;\n  while (i < j) {\n\
    \    if (nums[i] + nums[j] == 0) {\n      return true;\n    } else if (nums[i]\
    \ + nums[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const lsort =\
    \ l.sort();\n  for (let i = 0; i < lsort.length; i++) {\n    if (l.indexOf(-lsort[i])\
    \ > -1 && l.indexOf(-lsort[i]) !== i) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // We need to\
    \ return true if we find any pair of distinct elements that add to 0.\n  // Therefore,\
    \ we can keep track of which elements we've seen so far in a set.\n  // We can\
    \ then look at each element in the list, and check if -element is in our set.\n\
    \  // If it is, we can return true because we've found a pair that adds to 0.\n\
    \  // Otherwise, we add the element to our set of seen elements.\n  const seen_elements:\
    \ Set<number> = new Set();\n  for (const element of l) {\n    if (seen_elements.has(-element))\
    \ {\n      return true;\n    }\n    seen_elements.add(element);\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplzjf9ukq.ts(20,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmplzjf9ukq.ts(20,42): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const set: Set<number>\
    \ = new Set<number>();\n  for (const x of l) {\n    if (set.has(x)) {\n      return\
    \ true;\n    }\n    set.add(-x);\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprz66hvru.ts(15,14): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmprz66hvru.ts(15,32): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // TODO: complete\
    \ function\n  const set1 = new Set(l);\n  for (let i = 0; i < l.length; i++) {\n\
    \    const num = l[i];\n    if (set1.has(-num)) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmwipzpgn.ts(16,20): error TS2552: Cannot find name
    ''Set''. Did you mean ''set1''?

    '
  timestamp: 1660015117
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf3fd42n3.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf3fd42n3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  //  TODO: Implement\
    \ this function.\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnteu0jma.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnteu0jma.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let hs: Map<number,\
    \ number> = new Map<number, number>();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (hs.has(l[i])) {\n            hs.set(l[i], hs.get(l[i]) + 1);\n\
    \        } else {\n            hs.set(l[i], 1);\n        }\n    }\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (hs.has(-l[i])) {\n            if (l[i]\
    \ === 0 && hs.get(l[i]) === 1) {\n                return false;\n            }\
    \ else {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7ub1kdo.ts(15,13): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpu7ub1kdo.ts(15,39): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let s: Set<number>\
    \ = new Set<number>();\n    for (let i of l) {\n        if (s.has(i)) return true;\n\
    \        s.add(-i);\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8q8g9ftl.ts(15,12): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8q8g9ftl.ts(15,30): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // YOUR CODE\
    \ HERE\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpggtbhoxi.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpggtbhoxi.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let found =\
    \ false;\n    let set = new Set<number>();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        set.add(l[i]);\n    }\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (set.has(-l[i])) {\n            found = true;\n        }\n   \
    \ }\n    return found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqbh63_tg.ts(16,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    var seen = new\
    \ Set()\n    for (let num of l) {\n        if (seen.has(-num)) {\n           \
    \ return true\n        }\n        seen.add(num)\n    }\n    return false\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyp3eh010.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  for (let i = 0; i < l.length; i++) {\n    for\
    \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n     \
    \   return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let sum_zero:\
    \ boolean = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i\
    \ + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        sum_zero\
    \ = true;\n      }\n    }\n  }\n  return sum_zero;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let h: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        let c: number = l[i];\n\
    \        if (h.indexOf(-c) != -1) {\n            return true;\n        }\n   \
    \     h.push(c);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const set = new\
    \ Set(l);\n  for (const num of l) {\n    if (set.has(-num)) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbakg9rsg.ts(15,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // You can use\
    \ these sets to keep track of found values\n    const found_positives = new Set();\n\
    \    const found_negatives = new Set();\n    //let found_zero = false;\n    let\
    \ flag = false;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] ===\
    \ 0) {\n            //found_zero = true;\n            flag = true;\n        }\
    \ else if (l[i] > 0) {\n            found_positives.add(l[i]);\n        } else\
    \ {\n            found_negatives.add(l[i]);\n        }\n    }\n    //two values\
    \ on the array sum to zero if one is positive and the other\n    // is negative.\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n         \
    \   if (found_negatives.has(-l[i])) {\n                return true;\n        \
    \    }\n        } else if (l[i] < 0) {\n            if (found_positives.has(-l[i]))\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcio9l70i.ts(16,33): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpcio9l70i.ts(17,33): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    return (new\
    \ Set(l.map(v => v * -1)).size !== new Set(l).size);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdo0xa4x0.ts(15,17): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpdo0xa4x0.ts(15,54): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  var max = l.length;\n\
    \  var temp = l;\n  for (var i = 0; i < max; i++) {\n    for (var j = i + 1; j\
    \ < max; j++) {\n      if (l[i] + l[j] == 0) {\n        return true;\n      }\n\
    \    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ <= 1) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const seen = new\
    \ Set<number>();\n  for (const n of l) {\n    if (seen.has(-n)) {\n      return\
    \ true;\n    }\n    seen.add(n);\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpel9wq11o.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let mymap =\
    \ new Map();\n    for (let i = 0; i < l.length; i++) {\n        if (mymap.has(l[i]))\
    \ {\n            return true;\n        } else {\n            mymap.set(0 - l[i],\
    \ i);\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9qxk358b.ts(15,21): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015119
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (const [i,\
    \ elem] of l.entries()) {\n    for (const [j, el] of l.entries()) {\n      if\
    \ (i !== j && elem + el === 0) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpebbffxup.ts(15,29): error TS2339: Property ''entries''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpebbffxup.ts(16,29): error TS2339: Property ''entries'' does
    not exist on type ''number[]''.

    '
  timestamp: 1660015119
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const nums = new\
    \ Set(l);\n  for (const num of nums) {\n    if (nums.has(-num)) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpekqxe78i.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015119
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let elements:\
    \ number[] = [];\n    let pairs: number[] = [];\n    for (let n of l) {\n    \
    \    if (elements.includes(n)) {\n            pairs.push(n);\n        } else {\n\
    \            elements.push(n);\n        }\n    }\n    for (let p of pairs) {\n\
    \        if (pairs.includes(-p)) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0_obox0s.ts(18,22): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmp0_obox0s.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015119
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // start with\
    \ the first two items in the list\n  let current: number = l[0];\n  let next:\
    \ number = l[1];\n  // create an empty array to store the negative values\n  let\
    \ negs: number[] = [];\n  // loop through the list\n  for (let i: number = 0;\
    \ i < l.length; i++) {\n    // if the current value is negative, push it to the\
    \ negs array\n    if (current < 0) {\n      negs.push(current);\n    }\n    //\
    \ if the next value is in the negs array, return true\n    if (negs.includes(next))\
    \ {\n      return true;\n    }\n    // if the current value is the last one in\
    \ the list, break the loop\n    if (i === l.length - 1) {\n      break;\n    }\n\
    \    // if the current and next values aren't the same, shift them forward\n \
    \   if (current !== next) {\n      current = next;\n      next = l[i + 2];\n \
    \   }\n  }\n  // if nothing is found, return false\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnibd8gg6.ts(27,14): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let zero_found\
    \ = false;\n    for (let i = 0; i < l.length; i++){\n        if(l[i] + l[i+1]\
    \ === 0){\n            zero_found = true;\n        }\n    }\n    return zero_found;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpla0zbk08.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpla0zbk08.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // your code\
    \ here\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0dyad74u.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0dyad74u.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let visited: {\
    \ [index: number]: boolean } = {};\n  for (let elem of l) {\n    visited[elem]\
    \ = true;\n  }\n  for (let elem of l) {\n    if (visited[-elem]) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsozxkgqy.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsozxkgqy.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    return l.length\
    \ !== 1 && l.length !== 0 && l.some((e, i) => l.slice(i + 1).some(e2 => e + e2\
    \ === 0));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015120
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let s = new Set<number>();\n\
    \  for (let i = 0; i < l.length; i++) {\n    if (s.has(l[i])) {\n      return\
    \ true;\n    }\n    s.add(-l[i]);\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppu1z6j_3.ts(15,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015120
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let seen: Set<number>\
    \ = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (seen.has(-l[i]))\
    \ {\n      return true;\n    }\n    seen.add(l[i]);\n  }\n  return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8vuc71nb.ts(15,13): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8vuc71nb.ts(15,31): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015120
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const set = new\
    \ Set();\n  for (const num of l) {\n    set.add(num);\n  }\n  for (const num of\
    \ l) {\n    if (set.has(-num)) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7fvfozg3.ts(15,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let arr = [];\n\
    \    for (let i = 0; i < l.length; i++) {\n        let x = l[i];\n        let\
    \ c = l.filter(e => e == -x);\n        if (c.length > 0) {\n            arr.push(x);\n\
    \        }\n    }\n    return (arr.length > 0) ? true : false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb1kcks67.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb1kcks67.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const target\
    \ = 0;\n    let isPairsSumToZero = false;\n    let seen: number[] = [];\n    l.forEach(\
    \ (n: number) => {\n        if (n === 0) {\n            if (seen.includes(n))\
    \ {\n                isPairsSumToZero = true;\n            } else {\n        \
    \        seen.push(n);\n            }\n        } else {\n            if (seen.includes(target\
    \ - n)) {\n                isPairsSumToZero = true;\n            } else {\n  \
    \              seen.push(n);\n            }\n        }\n    });\n    return isPairsSumToZero;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxl4s1ntb.ts(20,22): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpxl4s1ntb.ts(26,22): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let a = 0;\n\
    \    let b = l.length - 1;\n    while (a < b) {\n        if (l[a] + l[b] === 0)\
    \ {\n            return true;\n        } else if (l[a] + l[b] > 0) {\n       \
    \     b -= 1;\n        } else {\n            a += 1;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnhk_z533.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnhk_z533.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const hash: {\
    \ [key: number]: number } = {};\n  for (let i = 0; i < l.length; i++) {\n    hash[l[i]]\
    \ = i;\n  }\n  for (let i = 0; i < l.length; i++) {\n    const complement = 0\
    \ - l[i];\n    if (hash[complement] && hash[complement] !== i) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let seen: {\
    \ [k: number]: boolean } = {};\n    for (let e of l) {\n        if (seen[-e])\
    \ {\n            return true;\n        }\n        seen[e] = true;\n    }\n   \
    \ return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let result:\
    \ boolean = false;\n    for (let i = 0; i < l.length; i++) {\n        for (let\
    \ j = 0; j < l.length; j++) {\n            if (i !== j && l[i] + l[j] === 0) {\n\
    \                result = true;\n            }\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // your code here\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpenj0m19n.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpenj0m19n.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ === 0) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // Base case\n\
    \    if (l.length <= 1) {\n        return false;\n    }\n    // Remove the first\
    \ element\n    const [_, ...tail] = l;\n    // Take every element in the array\
    \ and check if the absolute value of it is in the list\n    // if it is, return\
    \ true, otherwise return the output of the function called on the tail.\n    //\
    \ this will recursively go through the list\n    return tail.indexOf(Math.abs(l[0]))\
    \ !== -1 || pairs_sum_to_zero(tail);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgi3tbrul.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgi3tbrul.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let set = new\
    \ Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(0 -\
    \ l[i])) {\n      return true;\n    }\n    set.add(l[i]);\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw222niv7.ts(15,17): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015120
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let h: { [index:\
    \ number]: boolean } = {};\n  for (let i of l) {\n    h[i] = true;\n  }\n  for\
    \ (let i of l) {\n    if (h[-i]) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7bdj43vq.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7bdj43vq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015120
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const set: Set<number>\
    \ = new Set();\n  for (const num of l) {\n    if (set.has(num * -1)) {\n     \
    \ return true;\n    }\n    set.add(num);\n  }\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgglvq1u6.ts(15,14): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpgglvq1u6.ts(15,32): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    '
  timestamp: 1660015121
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i: number\
    \ = 0; i < l.length; i++) {\n    for (let j: number = i + 1; j < l.length; j++)\
    \ {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015122
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  let first: number;\n  let second: number;\n\
    \  let isSum = false;\n  for (let i = 0; i < l.length; i++) {\n    first = l[i];\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      second = l[j];\n      if\
    \ (first + second === 0) {\n        isSum = true;\n      }\n    }\n  }\n  return\
    \ isSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015122
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    for (let i: number = 0; i < l.length;\
    \ i++) {\n        for (let j: number = i + 1; j < l.length; j++) {\n         \
    \   if (l[i] + l[j] === 0) {\n                return true;\n            }\n  \
    \      }\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015122
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let l_set = new\
    \ Set(l);\n  for (let i = 0; i < l.length; i++) {\n    if (l_set.has(-l[i])) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjeotrdm2.ts(15,19): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015122
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let hasZero =\
    \ false;\n  let negs: number[] = [];\n  let poss: number[] = [];\n  for (let i\
    \ = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      hasZero = true;\n  \
    \  } else if (l[i] < 0) {\n      negs.push(l[i]);\n    } else {\n      poss.push(l[i]);\n\
    \    }\n  }\n  if (hasZero) {\n    for (let i = 0; i < l.length; i++) {\n    \
    \  if (l[i] === 0) {\n        return true;\n      }\n    }\n  }\n  let n = 0;\n\
    \  let p = 0;\n  while (n < negs.length && p < poss.length) {\n    if (negs[n]\
    \ + poss[p] === 0) {\n      return true;\n    } else if (negs[n] + poss[p] < 0)\
    \ {\n      n++;\n    } else {\n      p++;\n    }\n  }\n  return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmj1jdjp4.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmj1jdjp4.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015122
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let n = l.length;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\nexport {\n    pairs_sum_to_zero\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015122
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // YOUR CODE\
    \ HERE\n    for (let i of l) {\n        for (let j of l) {\n            if (j\
    \ + i === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n    // return raise NotImplementedError();\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmps0oix5iz.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps0oix5iz.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015122
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let s = new Set<number>();\n\
    \  for (let i of l) {\n    if (s.has(-i)) {\n      return true;\n    }\n    s.add(i);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp093rz8zz.ts(15,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015122
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let length = l.length;\n\
    \  if (length <= 1) {\n    return false;\n  }\n  let last_1 = l[length - 1];\n\
    \  let last_2 = l[length - 2];\n  if (last_1 === -last_2) {\n    return true;\n\
    \  }\n  return pairs_sum_to_zero(l.slice(0, -1));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkvhukool.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkvhukool.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015122
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <=\
    \ 1) {\n    return false;\n  }\n\n  let s = new Set<number>();\n  for (let n of\
    \ l) {\n    if (s.has(n)) {\n      return true;\n    }\n    s.add(-n);\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl5lcl6n4.ts(19,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015122
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // TODO: Replace\
    \ me with your code.\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp5w4kwky.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp5w4kwky.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let m: { [key:\
    \ number]: boolean } = {};\n    for (let i = 0; i < l.length; i++) {\n       \
    \ if (m[-l[i]]) {\n            return true;\n        }\n        m[l[i]] = true;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const set = new\
    \ Set<number>();\n  for (const num of l) {\n    if (set.has(num)) {\n      return\
    \ true;\n    }\n    set.add(-num);\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbtvw2sa2.ts(15,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015122
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let c: boolean\
    \ = false;\n    for (let i: number = 0; i < l.length; i++) {\n        for (let\
    \ j: number = 0; j < l.length; j++) {\n            if (i != j && l[i] + l[j] ==\
    \ 0) {\n                c = true;\n            }\n        }\n    }\n    return\
    \ c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <=\
    \ 1) {\n    return false;\n  }\n  let s = new Set();\n  for (let item of l) {\n\
    \    s.add(item);\n  }\n  for (let item of l) {\n    if (s.has(-item)) {\n   \
    \   return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi9w_g_op.ts(18,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015123
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // YOUR CODE HERE\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyyh_6f7x.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyyh_6f7x.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015122
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let lookup = new\
    \ Set<number>();\n  for (let i = 0; i < l.length; i++) {\n    lookup.add(l[i]);\n\
    \  }\n  for (let i = 0; i < l.length; i++) {\n    if (lookup.has(-l[i])) {\n \
    \     return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6e0bzpu7.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015122
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    let absList = l.map(Math.abs);\n \
    \   let sumList = l.reduce((a,b) => a + b);\n    return (Math.max(...absList)\
    \ > sumList);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj04z1ptg.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj04z1ptg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let zeros: number[]\
    \ = l.filter(x => x === 0);\n  if (zeros.length >= 2) {\n    return true;\n  }\
    \ else {\n    for (let i: number = 0; i < l.length; i++) {\n      for (let j:\
    \ number = i + 1; j < l.length; j++) {\n        if (l[i] + l[j] === 0) {\n   \
    \       return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015123
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf3fd42n3.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf3fd42n3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // Your code here!\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6q_owrl5.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6q_owrl5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i of\
    \ l) {\n        for (let j of l) {\n            if (i !== j && i + j === 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (const i of\
    \ l) {\n    for (const j of l) {\n      if (i + j === 0 && i !== j) {\n      \
    \  return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // You must\
    \ implement this function.\n    // Do not change the function name or signature.\n\
    \    let result: boolean = false;\n    let length = l.length;\n    for (let i\
    \ = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n  \
    \          if (l[i] + l[j] === 0) {\n                result = true;\n        \
    \        break;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015124
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let hashmap:\
    \ { [id: number]: number } = {};\n    for (let i = 0; i < l.length; i++) {\n \
    \       let target = 0 - l[i];\n        if (hashmap[target] !== undefined) {\n\
    \            return true;\n        }\n        hashmap[l[i]] = i;\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015124
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // your solution\
    \ here\n    const visited: Set<number> = new Set();\n    for (const i of l) {\n\
    \        if (visited.has(-i)) {\n            return true;\n        }\n       \
    \ visited.add(i);\n    }\n    return false;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptnh8gy4a.ts(16,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmptnh8gy4a.ts(16,38): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015124
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <=\
    \ 1) {\n    return false;\n  }\n  const hash = new Hash();\n  for (let i = 0;\
    \ i < l.length; i++) {\n    const v = l[i];\n    if (hash.hasValue(v)) {\n   \
    \   return true;\n    }\n    hash.setValue(v, i);\n  }\n  return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx3twiwxp.ts(18,20): error TS2552: Cannot find name
    ''Hash''. Did you mean ''hash''?

    '
  timestamp: 1660015124
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // your code here\n\
    \  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015124
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let map = new\
    \ Map();\n    l.forEach(e => {\n        if (map.has(e)) {\n            return\
    \ true;\n        } else {\n            map.set(-e, 1);\n        }\n    });\n \
    \   return false;\n}\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0]));\nconsole.log(pairs_sum_to_zero([1,\
    \ 3, -2, 1]));\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7]));\nconsole.log(pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7]));\nconsole.log(pairs_sum_to_zero([1]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmul92nw9.ts(15,19): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    '
  timestamp: 1660015124
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let result:\
    \ boolean = false;\n    for (let i: number = 0; i < l.length; i++) {\n       \
    \ for (let j: number = 0; j < l.length; j++) {\n            if (l[i] + l[j] ===\
    \ 0 && i !== j) {\n                result = true;\n            }\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015125
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const s = new\
    \ Set<number>();\n    for (const i of l) {\n        if (s.has(-i)) {\n       \
    \     return true;\n        }\n        s.add(i);\n    }\n    return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6utysg_o.ts(15,19): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return l.length\
    \ > 1\n    ? l.slice(1).reduce((acc, el) => acc || l.slice(0, l.length - 1).includes(-el),\
    \ false)\n    : false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppsccpznk.ts(16,70): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n\n  let nums: Set<number> = new Set(l);\n  for\
    \ (let n of nums) {\n    if (nums.has(-n)) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpokbpo1ck.ts(19,13): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpokbpo1ck.ts(19,31): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015124
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // Implement\
    \ this function here.\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi3y27m9c.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi3y27m9c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015125
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (const i of\
    \ l) {\n    if (l.indexOf(-i) > -1) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv_yaa8rt.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv_yaa8rt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015125
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i:\
    \ number = 0; i < l.length; i++) {\n        for (let j: number = i + 1; j < l.length;\
    \ j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i += 1) {\n    for (let j = i + 1; j < l.length; j += 1) {\n \
    \     if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n\ntest('pairs_sum_to_zero', () => {\n  expect(pairs_sum_to_zero([1,\
    \ 3, 5, 0])).toBe(false);\n  expect(pairs_sum_to_zero([1, 3, -2, 1])).toBe(false);\n\
    \  expect(pairs_sum_to_zero([1, 2, 3, 7])).toBe(false);\n  expect(pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7])).toBe(true);\n  expect(pairs_sum_to_zero([1])).toBe(false);\n\
    });\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8um0pf97.ts(25,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmp8um0pf97.ts(26,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp8um0pf97.ts(27,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp8um0pf97.ts(28,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp8um0pf97.ts(29,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp8um0pf97.ts(30,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let visited:\
    \ Set<number> = new Set<number>();\n    for (let el of l) {\n        if (visited.has(-el))\
    \ {\n            return true;\n        }\n        visited.add(el);\n    }\n  \
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5kbworm8.ts(15,18): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp5kbworm8.ts(15,36): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015125
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // TODO\n  \
    \  return true;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx4p7soo7.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx4p7soo7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015125
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // first, check\
    \ that this list has two or more elements in it\n    if (l.length < 2) {\n   \
    \     return false;\n    }\n    // now, iterate through the list from beginning\
    \ to end\n    for (let i = 0; i < l.length; i++) {\n        // check if the negative\
    \ of this element exists in the rest of the list\n        // we have to iterate\
    \ through the rest of the list to do this\n        for (let j = i + 1; j < l.length;\
    \ j++) {\n            if (l[i] === -l[j]) {\n                return true;\n  \
    \          }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const seen =\
    \ new Set<number>();\n    for (const num of l) {\n        if (seen.has(-num))\
    \ {\n            return true;\n        }\n        seen.add(num);\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5n3pztzj.ts(15,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015125
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let m: number\
    \ = 0;\n  let n: number = l.length - 1;\n  while (m < n) {\n    let sum: number\
    \ = l[m] + l[n];\n    if (sum === 0) {\n      return true;\n    } else if (sum\
    \ > 0) {\n      n -= 1;\n    } else {\n      m += 1;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeb_b5we4.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeb_b5we4.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015125
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // if the array\
    \ is empty, there are no pairs\n  if (l.length === 0) {\n    return false;\n \
    \ }\n  // if the array has only one element, there are no pairs\n  if (l.length\
    \ === 1) {\n    return false;\n  }\n  // otherwise, for every element in the array,\
    \ check if the\n  // rest of the array has a complementary element\n  for (let\
    \ i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length; j++) {\n    \
    \  if (l[i] + l[j] === 0 && i !== j) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const seen = new\
    \ Set();\n  for (const i of l) {\n    if (seen.has(-i)) {\n      return true;\n\
    \    }\n    seen.add(i);\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ipvzti6.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015125
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    var a = new\
    \ Set(l);\n    for (var i of a) {\n        if (a.has(-i)) return true;\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphynz7r_c.ts(15,17): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015126
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let dict: { [key:\
    \ number]: number } = {};\n  for (let i = 0; i < l.length; i++) {\n    let num\
    \ = l[i];\n    if (dict[num]) {\n      return true;\n    } else {\n      dict[-num]\
    \ = num;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015126
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    //Base case\
    \ - list is empty\n    if (l.length == 0) {\n        return false;\n    }\n  \
    \  //Base case - list has 1 element\n    else if (l.length == 1) {\n        return\
    \ false;\n    }\n    //Base case - list has 2 elements\n    else if (l.length\
    \ == 2) {\n        return (l[0] + l[1] == 0);\n    }\n    //Inductive case\n \
    \   else {\n        //First, check first two elements of list\n        if (l[0]\
    \ + l[1] == 0) {\n            return true;\n        }\n        //Next, check all\
    \ other pairs in the list\n        else {\n            return pairs_sum_to_zero(l.slice(1));\n\
    \        }\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm8y3olxw.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm8y3olxw.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015126
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let hashtable\
    \ = {};\n    for (let i = 0; i < l.length; i++) {\n        if (hashtable[l[i]])\
    \ {\n            hashtable[l[i]]++;\n        } else {\n            hashtable[l[i]]\
    \ = 1;\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        if\
    \ (hashtable[-l[i]]) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsmn0r8rj.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsmn0r8rj.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015127
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf3fd42n3.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf3fd42n3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let check: boolean\
    \ = false;\n    let num: number = 0;\n    while (num < l.length && !check) {\n\
    \        let num2: number = 0;\n        while (num2 < l.length && !check) {\n\
    \            if (num !== num2 && l[num] + l[num2] === 0) {\n                check\
    \ = true;\n            }\n            num2++;\n        }\n        num++;\n   \
    \ }\n    return check;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015127
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i: number\
    \ = 0; i < l.length; i++) {\n    for (let j: number = i + 1; j < l.length; j++)\
    \ {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n\
    \  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015122
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ntest(pairs_sum_to_zero([1, 3,\
    \ 5, 0]), false);\ntest(pairs_sum_to_zero([1, 3, -2, 1]), false);\ntest(pairs_sum_to_zero([1,\
    \ 2, 3, 7]), false);\ntest(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]), true);\ntest(pairs_sum_to_zero([1]),\
    \ false);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvn3lowtf.ts(25,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpvn3lowtf.ts(26,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpvn3lowtf.ts(27,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpvn3lowtf.ts(28,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpvn3lowtf.ts(29,6): error TS2554: Expected 0 arguments, but
    got 2.

    '
  timestamp: 1660015127
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // your code\
    \ here\n    return true;\n}\n\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi8qxam_o.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi8qxam_o.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015127
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf3fd42n3.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf3fd42n3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const len =\
    \ l.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1;\
    \ j < len; j++) {\n            if (l[i] + l[j] === 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5,\
    \ 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015127
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (const i of\
    \ l) {\n    for (const j of l) {\n      if (i + j === 0 && i !== j) {\n      \
    \  return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015123
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i of\
    \ l) {\n        for (let j of l) {\n            if (i + j === 0 && i !== j) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015127
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const neg_set\
    \ = new Set();\n    for (const n of l) {\n        if (neg_set.has(n)) {\n    \
    \        return true;\n        }\n        neg_set.add(-n);\n    }\n    return\
    \ false;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaw5zm80n.ts(15,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015127
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let bs = new Set<number>();\n\
    \  for (let i of l) {\n    if (bs.has(-i)) {\n      return true;\n    }\n    bs.add(i);\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4oq90pxa.ts(15,16): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015127
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_mvl1zhn.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_mvl1zhn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015127
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf3fd42n3.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf3fd42n3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015117
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let set = new\
    \ Set(l);\n  for (let i = 0; i < l.length; i++) {\n    if (set.has(-l[i])) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi3k67qpa.ts(15,17): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015128
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    '
  timestamp: 1660015128
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // YOUR CODE\
    \ HERE\n    throw new Error(\"unimplemented\");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2kicxssj.js:16\n    throw new Error(\"unimplemented\");\n    ^\n\
    \nError: unimplemented\n    at pairs_sum_to_zero (/tmp/tmp2kicxssj.js:16:11)\n\
    \    at test (/tmp/tmp2kicxssj.js:21:22)\n    at Object.<anonymous> (/tmp/tmp2kicxssj.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015128
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    return false;\n\
    }\n\ndescribe(\"pairs_sum_to_zero\", function() {\n    it(\"returns false if there\
    \ are no pairs that sum to zero\", function() {\n        assert.equal(pairs_sum_to_zero([1,\
    \ 3, 5, 0]), false);\n        assert.equal(pairs_sum_to_zero([1, 3, -2, 1]), false);\n\
    \        assert.equal(pairs_sum_to_zero([1, 2, 3, 7]), false);\n        assert.equal(pairs_sum_to_zero([1]),\
    \ false);\n    });\n    it(\"returns true if there are two distinct elements that\
    \ sum to zero\", function() {\n        assert.equal(pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7]), true);\n    });\n});\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbsam7kad.ts(18,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpbsam7kad.ts(19,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpbsam7kad.ts(25,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    '
  timestamp: 1660015127
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let set: Set<number>\
    \ = new Set(l);\n    for (let n of set) {\n        if (set.has(-n)) {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\nconsole.log(pairs_sum_to_zero([1,\
    \ 3, 5, 0]));\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1]));\nconsole.log(pairs_sum_to_zero([1,\
    \ 2, 3, 7]));\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]));\nconsole.log(pairs_sum_to_zero([1]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpamcvuabq.ts(15,14): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpamcvuabq.ts(15,32): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    '
  timestamp: 1660015127
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // YOUR CODE HERE\n\
    \  throw new Error(\"Not implemented\");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp361brgf6.js:16\n    throw new Error(\"Not implemented\");\n   \
    \ ^\n\nError: Not implemented\n    at pairs_sum_to_zero (/tmp/tmp361brgf6.js:16:11)\n\
    \    at test (/tmp/tmp361brgf6.js:21:22)\n    at Object.<anonymous> (/tmp/tmp361brgf6.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015128
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  var zeros = 0;\n\
    \  var length = l.length;\n  for (var i = 0; i < length; i++) {\n    for (var\
    \ j = i + 1; j < length; j++) {\n      if (l[i] + l[j] === 0) {\n        return\
    \ true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015128
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ <= 1) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015128
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ <= 1) {\n        return false;\n    }\n    let storage = {};\n    for (let i\
    \ = 0; i < l.length; i++) {\n        storage[l[i]] = 1;\n    }\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (storage[-l[i]]) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwp4eogct.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwp4eogct.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015128
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // your code\
    \ here\n    return false;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeothlui4.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeothlui4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015128
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let seen = new\
    \ Set();\n    for (let num of l) {\n        if (seen.has(-num)) {\n          \
    \  return true;\n        }\n        seen.add(num);\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi82i25mn.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015128
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n\n  let s = new Set<number>();\n  for (let i =\
    \ 0; i < l.length; i++) {\n    if (s.has(l[i])) {\n      return true;\n    } else\
    \ {\n      s.add(-l[i]);\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1am9b56z.ts(19,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015128
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  var a: number[]\
    \ = [];\n  var b: number[] = [];\n  var j: number = 0;\n  var sum: number = 0;\n\
    \  while (l.length > 0) {\n    a[j] = l.pop();\n    b[j] = a[j];\n    j = j +\
    \ 1;\n  }\n  j = 0;\n  while (a.length > 0) {\n    if (b.indexOf(-a[j]) != -1)\
    \ {\n      return true;\n    }\n    a.splice(j, 1);\n  }\n  return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6zidldwm.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6zidldwm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015128
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let numset = new\
    \ Set(l);\n  for (let x of numset) {\n    if (numset.has(-x)) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxbxr49uo.ts(15,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015129
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let f: boolean\
    \ = false;\n    for (let n of l) {\n        if (l.includes(-n)) {\n          \
    \  f = true;\n        }\n    }\n    return f;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplot2rlgf.ts(17,15): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015129
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\nexport {\n  is_factor,\n  is_even,\n  is_odd,\n  even_sum,\n  sum_of_digits,\n\
    \  factorial,\n  sum_digits_factorial,\n  pairs_sum_to_zero\n};\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8812_kx.ts(19,3): error TS2304: Cannot find name
    ''is_factor''.

    ../../../../../tmp/tmpo8812_kx.ts(20,3): error TS2304: Cannot find name ''is_even''.

    ../../../../../tmp/tmpo8812_kx.ts(21,3): error TS2304: Cannot find name ''is_odd''.

    ../../../../../tmp/tmpo8812_kx.ts(22,3): error TS2304: Cannot find name ''even_sum''.

    ../../../../../tmp/tmpo8812_kx.ts(23,3): error TS2304: Cannot find name ''sum_of_digits''.

    ../../../../../tmp/tmpo8812_kx.ts(24,3): error TS2304: Cannot find name ''factorial''.

    ../../../../../tmp/tmpo8812_kx.ts(25,3): error TS2304: Cannot find name ''sum_digits_factorial''.

    '
  timestamp: 1660015129
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let i: number\
    \ = 0;\n    let j: number = 1;\n    let pair: number[] = [];\n    while (i < l.length\
    \ && j < l.length) {\n        pair = [l[i], l[j]];\n        if (sum(pair) ===\
    \ 0) {\n            return true;\n        }\n        j++;\n        if (j === l.length)\
    \ {\n            i++;\n            j = i + 1;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppm1qaana.ts(20,13): error TS2304: Cannot find name
    ''sum''.

    '
  timestamp: 1660015129
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let result:\
    \ boolean = false;\n    for (let i: number = 0; i < l.length; i++) {\n       \
    \ for (let j: number = i + 1; j < l.length; j++) {\n            if (l[i] + l[j]\
    \ === 0) {\n                result = true;\n            }\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <=\
    \ 1) {\n    return false;\n  }\n  for (let i = 0; i < l.length; i++) {\n    for\
    \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n     \
    \   return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <=\
    \ 1) {\n    return false;\n  }\n  let nums = new Set(l);\n  let numArr = Array.from(nums);\n\
    \  for (let i = 0; i < numArr.length; i++) {\n    if (nums.has(-numArr[i])) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxo9288fz.ts(18,18): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpxo9288fz.ts(19,22): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660015129
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  for (let i = 0;\
    \ i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if\
    \ (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822153
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let i: number;\n\
    \    let j: number;\n    for (i = 0; i < l.length; i++) {\n        for (j = i\
    \ + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // check for a\
    \ special case\n  if (l.length < 2) {\n    return false;\n  }\n  // sort the input\n\
    \  const sorted = l.sort((a, b) => a - b);\n  // use two indices to check the\
    \ solution\n  let start = 0;\n  let end = sorted.length - 1;\n  while (start <\
    \ end) {\n    const current_sum = sorted[start] + sorted[end];\n    if (current_sum\
    \ === 0) {\n      return true;\n    } else if (current_sum < 0) {\n      start++;\n\
    \    } else {\n      end--;\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n\n    // two pointers.\n    // one starts\
    \ at the begining, one at the end.\n    // if they sum to 0, then we can return\
    \ true,\n    // otherwise, we move them in until the array is sorted.\n    //\
    \ since we are always moving the pointers in, we are eventually going to\n   \
    \ // have them meet, at which point we know that the array does not have a pair\n\
    \    // that sums to 0.\n    let left_pointer = 0;\n    let right_pointer = l.length\
    \ - 1;\n\n    l.sort();\n\n    while (left_pointer < right_pointer) {\n      \
    \  if (l[left_pointer] + l[right_pointer] === 0) {\n            return true;\n\
    \        } else if (l[left_pointer] + l[right_pointer] < 0) {\n            left_pointer++;\n\
    \        } else {\n            right_pointer--;\n        }\n    }\n\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyo2vefjt.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyo2vefjt.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let i: number;\n\
    \    let j: number;\n    let zeroPair: boolean = false;\n    let n: number = l.length;\n\
    \    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n      \
    \      if (l[i] + l[j] === 0) {\n                zeroPair = true;\n          \
    \  }\n        }\n    }\n    return zeroPair;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let found = false;\n\
    \  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        found = true;\n      }\n   \
    \ }\n  }\n  return found;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const map = {}\n\
    \  let result = false\n  for (let i = 0; i < l.length; i++) {\n    if (map[l[i]])\
    \ {\n      map[l[i]]++\n    } else {\n      map[l[i]] = 1\n    }\n  }\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (map[-l[i]]) {\n      result = true\n  \
    \  }\n  }\n  return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt26n24im.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt26n24im.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015130
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    var arr = [];\n\
    \    for (var i = 0; i < l.length; i++) {\n        if (arr.indexOf(Math.abs(l[i]))\
    \ > -1) {\n            return true;\n        }\n        arr.push(l[i]);\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmporxzzchz.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmporxzzchz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    for (let i =\
    \ 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n\
    \            if (l[i] + l[j] === 0) {\n                return true;\n        \
    \    }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  for (let i = 0; i < l.length; i++) {\n    for\
    \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n     \
    \   return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    var flag: boolean\
    \ = false;\n    var pair: boolean = false;\n    var flag1: boolean = false;\n\
    \    var pair1: boolean = false;\n    for (var i = 0; i < l.length; i++) {\n \
    \       for (var j = 0; j < l.length; j++) {\n            if (i != j) {\n    \
    \            if (l[i] + l[j] == 0) {\n                    flag = true;\n     \
    \               if (i < j) {\n                        pair = true;\n         \
    \           }\n                }\n            }\n        }\n    }\n    if (flag\
    \ == true && pair == true) {\n        return true;\n    }\n    else {\n      \
    \  return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let set = new\
    \ Set<number>();\n    for (let elem of l) {\n        if (set.has(elem * -1)) {\n\
    \            return true;\n        }\n        set.add(elem);\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps28ykver.ts(15,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    let allPairs: number[][] = [];\n \
    \   for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length;\
    \ j++) {\n            allPairs.push([l[i], l[j]]);\n        }\n    }\n    return\
    \ allPairs.some(pair => {\n        return pair[0] + pair[1] === 0;\n    });\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // Write your\
    \ code here.\n  // \u4F7F\u7528\u53CC\u5C42\u5FAA\u73AF\n  // for (const index_a\
    \ in l) {\n  //   for (const index_b in l) {\n  //     if (index_a !== index_b\
    \ && Number(index_a) + Number(index_b) === 0) {\n  //       return true;\n  //\
    \     }\n  //   }\n  // }\n  // return false;\n\n  // \u4F7F\u7528set\n  // const\
    \ set = new Set(l);\n  // for (const index in l) {\n  //   if (set.has(-l[index]))\
    \ {\n  //     return true;\n  //   }\n  // }\n  // return false;\n\n  // \u4F7F\
    \u7528hash\n  const hash = {};\n  for (const item of l) {\n    if (hash[-item])\
    \ {\n      return true;\n    }\n    hash[item] = true;\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ === 0) {\n        return false;\n    } else {\n        let s: Set<number> =\
    \ new Set();\n        let result: boolean = false;\n        for (let i = 0; i\
    \ < l.length; i++) {\n            if (s.has(l[i])) {\n                result =\
    \ true;\n            } else {\n                s.add(-l[i]);\n            }\n\
    \        }\n        return result;\n    }\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl5nzly1f.ts(18,16): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpl5nzly1f.ts(18,34): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // since we've\
    \ not talked about sets yet, we'll use what we know\n    // to solve this with\
    \ a double loop.\n    for (let i = 0; i < l.length; i++) {\n        for (let j\
    \ = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n      \
    \          return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // Your solution\
    \ goes here\n  if (l.length < 2) {\n    return false;\n  }\n  let isFound = false;\n\
    \  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        isFound = true;\n      }\n \
    \   }\n  }\n  return isFound;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  return false;\n\
    }\n\nexport {\n  num_ones,\n  num_to_list,\n  list_to_num,\n  prefixes,\n  suffixes,\n\
    \  longest_common_prefix,\n  pairs_sum_to_zero,\n};\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplhakzz9v.ts(19,3): error TS2304: Cannot find name
    ''num_ones''.

    ../../../../../tmp/tmplhakzz9v.ts(20,3): error TS2304: Cannot find name ''num_to_list''.

    ../../../../../tmp/tmplhakzz9v.ts(21,3): error TS2304: Cannot find name ''list_to_num''.

    ../../../../../tmp/tmplhakzz9v.ts(22,3): error TS2304: Cannot find name ''prefixes''.

    ../../../../../tmp/tmplhakzz9v.ts(23,3): error TS2304: Cannot find name ''suffixes''.

    ../../../../../tmp/tmplhakzz9v.ts(24,3): error TS2304: Cannot find name ''longest_common_prefix''.

    '
  timestamp: 1660015130
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    const length\
    \ = l.length;\n    let j = 0;\n    for (let i = 0; i < length; i++) {\n      \
    \  j = i + 1;\n        while (j < length) {\n            if (l[i] + l[j] === 0)\
    \ {\n                return true;\n            }\n            j++;\n        }\n\
    \    }\n    return false;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // TODO: implement\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1aeqxu4x.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1aeqxu4x.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015131
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let seen: number[]\
    \ = [];\n  for (let n of l) {\n    if (seen.includes(-n)) {\n      return true;\n\
    \    }\n    seen.push(n);\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdpan8l4r.ts(17,14): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015131
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let l1 = l.slice();\n\
    \  l1.sort();\n  let l2 = l1.slice();\n  while (l1.length > 0) {\n    let curr\
    \ = l1.pop();\n    if (l2.includes(-curr)) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2oj1mahh.ts(20,12): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015131
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  // YOUR CODE HERE\n\
    \  throw new Error(\"Not implemented yet.\");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpot14ny9o.js:16\n    throw new Error(\"Not implemented yet.\");\n\
    \    ^\n\nError: Not implemented yet.\n    at pairs_sum_to_zero (/tmp/tmpot14ny9o.js:16:11)\n\
    \    at test (/tmp/tmpot14ny9o.js:21:22)\n    at Object.<anonymous> (/tmp/tmpot14ny9o.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let result:\
    \ number = 0;\n    for (let i: number = 0; i < l.length; i++) {\n        for (let\
    \ j: number = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0)\
    \ {\n                result = 1;\n            }\n        }\n    }\n    if (result\
    \ === 1) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nconsole.log(pairs_sum_to_zero([1, 3, 5, 0]));\nconsole.log(pairs_sum_to_zero([1,\
    \ 3, -2, 1]));\nconsole.log(pairs_sum_to_zero([1, 2, 3, 7]));\nconsole.log(pairs_sum_to_zero([2,\
    \ 4, -5, 3, 5, 7]));\nconsole.log(pairs_sum_to_zero([1]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    false

    true

    false

    '
  timestamp: 1660015132
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    l.sort((x, y) => x - y);\n    if (l[0]\
    \ > 0 || l[l.length - 1] < 0) {\n        return false;\n    }\n    let i = 0;\n\
    \    let j = l.length - 1;\n    while (i < j) {\n        if (l[i] + l[j] === 0)\
    \ {\n            return true;\n        } else if (l[i] + l[j] > 0) {\n       \
    \     j--;\n        } else {\n            i++;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // Implement\
    \ this function\n    //Question: what is the run time complexity of this?\n  \
    \  for (let i = 0; i < l.length; i++) {\n        if (list_contains(l, i, -l[i]))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3,\
    \ 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb3wzzjg9.ts(18,13): error TS2304: Cannot find name
    ''list_contains''.

    '
  timestamp: 1660015132
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length ===\
    \ 0) {\n    return false;\n  }\n  for (let i = 0; i < l.length; i++) {\n    for\
    \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n     \
    \   return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length ==\
    \ 0) {\n    return false;\n  }\n  // Pull out the first element\n  const first\
    \ = l[0];\n  const rest = l.slice(1);\n  // if it's in rest, then return true\n\
    \  if (rest.includes(-first)) {\n    return true;\n  }\n  // otherwise, try the\
    \ rest\n  return pairs_sum_to_zero(rest);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n\
    \  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
    \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
    \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgqknciu.ts(22,12): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015132
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    //uses a set\
    \ to keep track of the number of duplicates of each element in the array\n   \
    \ let s: Set<number> = new Set<number>();\n    //adds all elements in the array\
    \ to the set\n    for (let i: number = 0; i < l.length; i++) {\n        s.add(l[i]);\n\
    \    }\n    //goes through the array and checks if the negation of each element\
    \ is in the set\n    for (let i: number = 0; i < l.length; i++) {\n        if\
    \ (s.has(-l[i])) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmz8osxku.ts(16,12): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpmz8osxku.ts(16,30): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015132
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    // base case\n\
    \    if (l.length <= 1) {\n        return false;\n    }\n    let map: Map<number,\
    \ boolean> = new Map();\n    // loop\n    for (let i: number = 0; i < l.length;\
    \ i++) {\n        if (map.has(l[i])) {\n            return true;\n        }\n\
    \        map.set(-l[i], true);\n    }\n    return false;\n}\nconsole.log(pairs_sum_to_zero([1,\
    \ 3, 5, 0]));\nconsole.log(pairs_sum_to_zero([1, 3, -2, 1]));\nconsole.log(pairs_sum_to_zero([1,\
    \ 2, 3, 7]));\nconsole.log(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]));\nconsole.log(pairs_sum_to_zero([1]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8o1ae8yb.ts(19,14): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp8o1ae8yb.ts(19,41): error TS2552: Cannot find name ''Map''.
    Did you mean ''map''?

    '
  timestamp: 1660015132
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const lst = l.sort((a,\
    \ b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i\
    \ + 1; j < lst.length; j++) {\n      if (lst[i] + lst[j] === 0) {\n        return\
    \ true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const seen: number[]\
    \ = [];\n  for (const x of l) {\n    if (seen.includes(-x)) {\n      return true;\n\
    \    }\n    seen.push(x);\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphx0yvejl.ts(17,14): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015132
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  var seen: number[]\
    \ = [];\n  for (var i = 0; i < l.length; i++) {\n    if (seen.indexOf(-l[i]) !=\
    \ -1) {\n      return true;\n    }\n    seen.push(l[i]);\n  }\n  return false;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 2
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  let arr: Set<number>\
    \ = new Set(l);\n  let bool: boolean = false;\n  let i: number = 0;\n  while (i\
    \ < l.length) {\n    if (arr.has(-l[i])) {\n      bool = true;\n    }\n    i++;\n\
    \  }\n  return bool;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv_v_zsiu.ts(15,12): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpv_v_zsiu.ts(15,30): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015132
- exit_code: 1
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let sum = 0;\n\
    \    let unique = {};\n    let i = 0;\n    while (i < l.length) {\n        let\
    \ x = l[i];\n        if (unique[x]) {\n            return true;\n        }\n \
    \       sum += x;\n        unique[-sum] = true;\n        i++;\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwl71a5k2.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwl71a5k2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  if (l.length <\
    \ 2) {\n    return false;\n  }\n  for (let i = 0; i < l.length; i++) {\n    for\
    \ (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n     \
    \   return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
    \ assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015117
- exit_code: 0
  program: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
    \ true if there are two distinct elements in the array that\n// sum to zero, and\
    \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
    // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    if (l.length\
    \ < 2) {\n        return false;\n    }\n    if (l.length === 2) {\n        return\
    \ l[0] + l[1] === 0;\n    }\n    for (let i = 0; i < l.length; i++) {\n      \
    \  for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0)\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
    \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
    \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
    \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
    \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
