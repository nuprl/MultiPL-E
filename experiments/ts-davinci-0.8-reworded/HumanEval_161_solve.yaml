name: HumanEval_161_solve
language: ts
prompt: "//You are given a string s.\n// if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string\
  \ contains no letters, reverse the string.\n// The function should return the resulted\
  \ string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\"\
  )\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"\
  aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
  #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n\
  \  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
  #ccc\"),\"#CCC\");\n}\n\ntest();"
completions: ["  const letters = s.split('').filter(x => /[a-z]/i.test(x));\n  if\
    \ (letters.length === 0) {\n    return s.split('').reverse().join('');\n  }\n\
    \  const out: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    if (/[a-z]/i.test(s[i]))\
    \ {\n      out.push(s[i] === s[i].toUpperCase() ? s[i].toLowerCase() : s[i].toUpperCase());\n\
    \    } else {\n      out.push(s[i]);\n    }\n  }\n  return out.join('');\n}\n",
  "    let temp = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (/[a-z]/.test(s[i]))\
    \ {\n            temp += s[i].toUpperCase();\n        } else if (/[A-Z]/.test(s[i]))\
    \ {\n            temp += s[i].toLowerCase();\n        } else {\n            temp\
    \ += s[i];\n        }\n    }\n    return temp.split(\"\").reverse().join(\"\"\
    );\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"\
    #a@C\"));", "    const letters = /[a-zA-Z]/;\n    let result = \"\";\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (letters.test(s[i])) {\n      \
    \      if (s[i] === s[i].toUpperCase()) {\n                result += s[i].toLowerCase();\n\
    \            } else {\n                result += s[i].toUpperCase();\n       \
    \     }\n        } else {\n            result += s[i];\n        }\n    }\n   \
    \ return result.split(\"\").reverse().join(\"\");\n}\n", "    return '';\n}\n",
  "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase())\
    \ {\n      result += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase())\
    \ {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i];\n\
    \    }\n  }\n  return result.split('').reverse().join('');\n}\n\nconsole.log(solve('1234'));\n\
    console.log(solve('ab'));\nconsole.log(solve('#a@C'));", "    let result = s.split('').reverse().join('');\n\
    \    let regExp = /[a-z]/;\n    for (let i = 0; i < result.length; i++) {\n  \
    \      if (regExp.test(result[i])) {\n            result = result.replace(result[i],\
    \ result[i].toUpperCase());\n        } else if (regExp.test(result[i].toLowerCase()))\
    \ {\n            result = result.replace(result[i], result[i].toLowerCase());\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(solve(\"#a@C\"));\n",
  "    let result: string = \"\";\n    let lastChar: string = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        const element = s[i];\n        if (element\
    \ == lastChar) {\n            continue;\n        }\n        if (isNaN(parseInt(element)))\
    \ {\n            if (element == element.toUpperCase()) {\n                result\
    \ += element.toLowerCase();\n            } else {\n                result += element.toUpperCase();\n\
    \            }\n        } else {\n            result += element;\n        }\n\
    \        lastChar = element;\n    }\n    return result;\n}\n", "    //declare\
    \ variables for the solution\n    let result: string = '';\n    let regex: RegExp\
    \ = /^[A-Za-z]+$/;\n    //check if any letters exist in string\n    if (regex.test(s))\
    \ {\n        //iterate through string\n        for (let i = 0; i < s.length; i++)\
    \ {\n            //check if char is upper\n            if (s[i] === s[i].toUpperCase())\
    \ {\n                //convert char to lower\n                result += s[i].toLowerCase();\n\
    \            } else {\n                //convert char to upper\n             \
    \   result += s[i].toUpperCase();\n            }\n        }\n    } else {\n  \
    \      //reverse string\n        result = s.split('').reverse().join('');\n  \
    \  }\n    return result;\n}\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"\
    ab\"));\nconsole.log(solve(\"#a@C\"));", "    let a = s.split('');\n    for (let\
    \ i = 0; i < a.length; i++) {\n        if (/[a-z]/.test(a[i])) a[i] = a[i].toUpperCase();\n\
    \        else if (/[A-Z]/.test(a[i])) a[i] = a[i].toLowerCase();\n    }\n    return\
    \ a.join('');\n}\nconsole.log(solve(\"ab\"));", "    if (s.match(/[a-z]/gi)) {\n\
    \        return s.split('').map(char => {\n            if (char.match(/[a-z]/gi))\
    \ {\n                return char === char.toUpperCase() ? char.toLowerCase() :\
    \ char.toUpperCase();\n            }\n            return char;\n        }).join('');\n\
    \    }\n    return s.split('').reverse().join('');\n}", "    // Create a function\
    \ that can reverse a String, which is passed as the parameter\n    // Use it on\
    \ this problem to reverse the String passed\n    // return reversed string\n \
    \   return reverse(s);\n}\n", "    let result: string = '';\n    let noLetters:\
    \ boolean = true;\n    for (let i: number = 0; i < s.length; i++) {\n        if\
    \ (/[a-z]/i.test(s[i])) {\n            noLetters = false;\n            if (s[i]\
    \ === s[i].toUpperCase()) {\n                result += s[i].toLowerCase();\n \
    \           } else {\n                result += s[i].toUpperCase();\n        \
    \    }\n        } else {\n            result += s[i];\n        }\n    }\n    if\
    \ (noLetters) {\n        return s.split('').reverse().join('');\n    }\n    return\
    \ result;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"\
    #a@C\"));", "  if(s.length === 0){\n    return s;\n  }\n  if(s.length === 1){\n\
    \    return s.toUpperCase();\n  }\n  const reg = /[a-zA-Z]/g;\n  let result =\
    \ '';\n  if(reg.test(s)){\n    for(let i = 0; i < s.length; i++){\n      if(s[i]\
    \ === s[i].toUpperCase()){\n        result += s[i].toLowerCase();\n      } else\
    \ {\n        result += s[i].toUpperCase();\n      }\n    }\n  } else {\n    for(let\
    \ i = s.length - 1; i >= 0; i--){\n      result += s[i];\n    }\n  }\n  return\
    \ result;\n}", "  const letters: string[] = s.split('').filter(isLetter);\n  if\
    \ (letters.length === 0) {\n    return s.split('').reverse().join('');\n  }\n\
    \  let result: string[] = s.split('').map(char => {\n    return isLetter(char)\
    \ ? toggleCase(char) : char;\n  });\n  return result.join('');\n}\n", "    let\
    \ result: string = \"\";\n    let arr: string[] = s.split(\"\");\n    for (let\
    \ i: number = 0; i < arr.length; i++) {\n        if (arr[i] === arr[i].toUpperCase())\
    \ {\n            result += arr[i].toLowerCase();\n        } else if (arr[i] ===\
    \ arr[i].toLowerCase()) {\n            result += arr[i].toUpperCase();\n     \
    \   } else {\n            result += arr[i];\n        }\n    }\n    return result;\n\
    }\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"\
    #a@C\"));", "    let result: string = \"\";\n    let test1: boolean = false;\n\
    \    let test2: boolean = false;\n    let array = s.split(\"\");\n    for (let\
    \ i = 0; i < array.length; i++) {\n        test1 = /[a-z]/.test(array[i]);\n \
    \       test2 = /[A-Z]/.test(array[i]);\n        if (test1 === true) {\n     \
    \       result += array[i].toUpperCase();\n        } else if (test2 === true)\
    \ {\n            result += array[i].toLowerCase();\n        } else {\n       \
    \     result += array[i];\n        }\n    }\n    return result;\n}\nconsole.log(solve(\"\
    #a@C\"));\n", "    return s.replace(/[a-z]/ig, x => {\n        return x.toUpperCase()\
    \ === x ? x.toLowerCase() : x.toUpperCase();\n    })\n}\nconsole.log(solve(\"\
    ab\"));\nconsole.log(solve(\"#a@C\"));\n", "    let letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (letters.includes(s[i]))\
    \ {\n            result += s[i].toUpperCase() === s[i] ? s[i].toLowerCase() :\
    \ s[i].toUpperCase();\n        } else {\n            result += s[i];\n       \
    \ }\n    }\n    return result.length === 0 ? s.split('').reverse().join('') :\
    \ result;\n}\n", "    let str = s.split('');\n    for (let i = 0; i < str.length;\
    \ i++) {\n        str[i] = str[i].match(/[a-z]/i) ? str[i].toUpperCase() : str[i].toLowerCase();\n\
    \    }\n    return str.join('');\n}", "    if (!s.match(/[a-z]/i)) {\n       \
    \ return reverse(s);\n    }\n    let ans = '';\n    for (let c of s) {\n     \
    \   ans += c.match(/[a-z]/i) ? c.toUpperCase() == c ? c.toLowerCase() : c.toUpperCase()\
    \ : c;\n    }\n    return ans;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
