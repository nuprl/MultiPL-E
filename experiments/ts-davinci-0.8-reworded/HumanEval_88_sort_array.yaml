name: HumanEval_88_sort_array
language: ts
prompt: "//Given an array of non-negative integers, return a cots of the given array\
  \ after sorting,\n// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
  \ change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n\
  // [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
completions: ["    if (array.length === 0) {\n        return [];\n    }\n    let sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return\
    \ array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b)\
    \ => a - b);\n    }\n}\n", "    // TODO\n    if (array.length === 0) {\n     \
    \   return [];\n    }\n    if (array.length === 1) {\n        return array;\n\
    \    }\n    const firstIndex = array[0];\n    const lastIndex = array[array.length\
    \ - 1];\n    const sum = firstIndex + lastIndex;\n    if (sum % 2 === 0) {\n \
    \       const sortedArray = [...array].sort((a, b) => b - a);\n        return\
    \ sortedArray;\n    } else {\n        const sortedArray = [...array].sort((a,\
    \ b) => a - b);\n        return sortedArray;\n    }\n}\n", "    const s = array.length;\n\
    \    if (s === 0 || s === 1) {\n        return array;\n    } else {\n        let\
    \ new_array = array.slice();\n        if ((new_array[0] + new_array[s - 1]) %\
    \ 2 === 0) {\n            new_array.sort((a, b) => b - a);\n        } else {\n\
    \            new_array.sort((a, b) => a - b);\n        }\n        return new_array;\n\
    \    }\n}\n", "    const sum = array[0] + array[array.length - 1];\n    const\
    \ sorted = array.sort((a, b) => sum % 2 === 0 ? b - a : a - b);\n    return sorted;\n\
    }", "    const arraySum = array.reduce((acc, val) => acc + val, 0);\n    const\
    \ result = array.slice().sort((a, b) => arraySum % 2 === 0 ? b - a : a - b);\n\
    \    return result;\n}", "  let sum: number = array[0] + array[array.length -\
    \ 1];\n  if (sum % 2 == 0) {\n    return array.sort((a, b) => b - a);\n  } else\
    \ {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "    let arr: number[]\
    \ = array.slice();\n    if (array.length == 0) {\n        return [];\n    }\n\
    \    if (array.length == 1) {\n        return [array[0]];\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0) {\n        return arr.sort((a, b) => b\
    \ - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
  "  if (array.length === 0) {\n    return [];\n  } else if (array.length === 1) {\n\
    \    return array;\n  }\n  let middleArray = [];\n  let oddArray = [];\n  let\
    \ evenArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]\
    \ % 2 === 0) {\n      evenArray.push(array[i]);\n    } else {\n      oddArray.push(array[i]);\n\
    \    }\n  }\n  evenArray.sort((a, b) => b - a);\n  oddArray.sort((a, b) => a -\
    \ b);\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0)\
    \ {\n      middleArray.push(evenArray.shift());\n    } else {\n      middleArray.push(oddArray.shift());\n\
    \    }\n  }\n  return middleArray;\n}\n", "  if (array.length) {\n    const isEven\
    \ = (array[0] + array[array.length - 1]) % 2 === 0;\n    return array.sort((a,\
    \ b) => (isEven ? b - a : a - b));\n  }\n  return array;\n}\n", "    // your code\
    \ goes here...\n    return array.sort((a, b) => a - b);\n}\n", "  let sum = array[0]\
    \ + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a,\
    \ b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n",
  "    const { first, last } = { first: array[0], last: array[array.length - 1] };\n\
    \    return (first + last) % 2 === 0 ? array.sort((a, b) => b - a) : array.sort((a,\
    \ b) => a - b);\n}\n", "    if(array.length > 1){\n        const sum = array[0]\
    \ + array[array.length - 1];\n        return sum % 2 == 0 ? array.sort().reverse()\
    \ : array.sort();\n    }else{\n        return array;\n    }\n}\n", "  const condition\
    \ = array.length === 0 ? false : (array[0] + array[array.length - 1]) % 2;\n \
    \ return condition ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n\
    }\n\nexport { sort_array };", "  if (array.length === 0) {\n    return [];\n \
    \ }\n  if (array.length === 1) {\n    return array;\n  }\n  let sortedArray: number[]\
    \ = [];\n  let firstIndex: number = array[0];\n  let lastIndex: number = array[array.length\
    \ - 1];\n  let sum: number = firstIndex + lastIndex;\n  if (sum % 2 === 0) {\n\
    \    sortedArray = array.sort((a, b) => b - a);\n  } else {\n    sortedArray =\
    \ array.sort((a, b) => a - b);\n  }\n  return sortedArray;\n}\n\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    if (array.length < 2) return\
    \ array;\n    let left = [];\n    let right = [];\n    const pivot = array[0];\n\
    \    for (let i = 1; i < array.length; i++) {\n        if (array[i] < pivot) {\n\
    \            left.push(array[i]);\n        } else {\n            right.push(array[i]);\n\
    \        }\n    }\n    return (array[0] + array[array.length - 1]) % 2 ? [...sort_array(left),\
    \ pivot, ...sort_array(right)] : [...sort_array(right), pivot, ...sort_array(left)];\n\
    }\n", "    if (array.length === 0) {\n        return array;\n    }\n    if (array.length\
    \ === 1) {\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else\
    \ {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "    const len\
    \ = array.length;\n    return len === 0 || len === 1 ? array :\n        array.sort((a,\
    \ b) => (a + array[len - 1]) % 2 === (b + array[len - 1]) % 2 ?\n            a\
    \ - b : b - a);\n}\n", "  const sum = array[0] + array[array.length - 1];\n  if\
    \ (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a,\
    \ b) => a - b);\n  }\n  return array;\n}\nconsole.log(sort_array([2, 4, 3, 0,\
    \ 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "  // TODO: Write\
    \ your code here\n  let sum: number = array[0] + array[array.length - 1];\n  if\
    \ (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n   \
    \ return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([2, 4,\
    \ 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6,7]));", "    if (array.length % 2 === 0) {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n    return array.sort((a, b) => b - a);\n\
    }\n", "  if (array.length === 0) {\n    return [];\n  } else if (array.length\
    \ === 1) {\n    return array;\n  } else {\n    return array.sort((a, b) => {\n\
    \      if ((a + b) % 2 === 0) {\n        return -1;\n      } else {\n        return\
    \ 1;\n      }\n    });\n  }\n}\n", "    const a = array.length;\n    let b = a\
    \ - 1;\n    if (a % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst\
    \ assert = require('assert');\n\nassert.deepEqual(sort_array([]), []);\nassert.deepEqual(sort_array([5]),\
    \ [5]);\nassert.deepEqual(sort_array([2, 4, 3, 0, 1, 5]), [0, 1, 2, 3, 4, 5]);\n\
    assert.deepEqual(sort_array([2, 4, 3, 0, 1, 5, 6]), [6, 5, 4, 3, 2, 1, 0]);",
  "  return array.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 0)\
    \ {\n      return a < b ? 1 : -1;\n    } else {\n      return a < b ? -1 : 1;\n\
    \    }\n  });\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));", "  let firstElement\
    \ = array[0];\n  let lastElement = array[array.length - 1];\n  let firstAndLastSum\
    \ = firstElement + lastElement;\n  if (firstAndLastSum % 2 === 0) {\n    return\
    \ array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a\
    \ - b);\n  }\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));", "  if (array.length\
    \ === 0) {\n    return [];\n  }\n  if (array.length === 1) {\n    return array;\n\
    \  }\n  if (array[0] + array[array.length - 1] % 2 === 0) {\n    return array.sort((a,\
    \ b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\
    \nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n", "  const l = array.length;\n\
    \  const first = array[0];\n  const last = array[l - 1];\n  const sum = first\
    \ + last;\n  const even = sum % 2 === 0;\n  return even ? array.sort((a, b) =>\
    \ b - a) : array.sort((a, b) => a - b);\n}\n", "    if(array.length === 0) {\n\
    \        return [];\n    } else if(array.length === 1) {\n        return array;\n\
    \    } else {\n        const sort_fuc = (a: number, b: number) => array[0] + array[array.length\
    \ - 1] % 2 === 0 ? b - a : a - b;\n        return array.sort(sort_fuc);\n    }\n\
    }\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    //\
    \ TODO: implement this function\n    return [];\n}\n", "    let newArray = array.slice(0);\n\
    \    if (newArray.length === 0) {\n        return newArray;\n    }\n    if (newArray.length\
    \ === 1) {\n        return newArray;\n    }\n    if ((newArray[0] + newArray[newArray.length\
    \ - 1]) % 2 === 0) {\n        newArray.sort((a, b) => b - a);\n    } else {\n\
    \        newArray.sort((a, b) => a - b);\n    }\n    return newArray;\n}\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "  return\
    \ array.sort((a, b) => (a + b) % 2 === 0 ? b - a : a - b);\n}\n\nexport { sort_array\
    \ };", "    if (array.length === 0) {\n        return array;\n    }\n    if (array.length\
    \ === 1) {\n        return array;\n    }\n    const odd = is_odd(array[0] + array[array.length\
    \ - 1]);\n    const clone = array.slice();\n    clone.sort((a, b) => odd ? a -\
    \ b : b - a);\n    return clone;\n}\n", "  return array.reduce((acc, cur, i) =>\
    \ {\n    if (i === 0 || i === array.length - 1) {\n      return acc;\n    } else\
    \ if (i % 2 === 0) {\n      return acc.concat(cur);\n    } else {\n      return\
    \ acc.concat(array[array.length - i]);\n    }\n  }, []);\n}\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "   \
    \ if (array.length === 0) return [];\n    if (array.length === 1) return array;\n\
    \    if ((array[0] + array[array.length - 1]) % 2 === 0) {\n        return array.sort((a,\
    \ b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n \
    \   }\n}", "    if(array.length == 0) return array;\n    if(array.length == 1)\
    \ return array;\n    let sum: number = array[0] + array[array.length - 1];\n \
    \   let result: number[] = [];\n    if(sum % 2 == 0) {\n        result = array.sort((a,\
    \ b) => b - a);\n    } else {\n        result = array.sort((a, b) => a - b);\n\
    \    }\n    return result;\n}\n", "  let isOdd =\n    array.length > 0 ? (array[0]\
    \ + array[array.length - 1]) % 2 == 1 : false;\n  if (isOdd) {\n    return array.sort((a,\
    \ b) => {\n      return a - b;\n    });\n  } else {\n    return array.sort((a,\
    \ b) => {\n      return b - a;\n    });\n  }\n}\n", "    if (array.length < 2)\
    \ {\n        return array;\n    }\n    let leftSum = array[0];\n    let rightSum\
    \ = array[array.length - 1];\n    const result: number[] = [];\n    const leftPointer\
    \ = 0;\n    const rightPointer = array.length - 1;\n    if (leftSum + rightSum\
    \ % 2 === 0) {\n        for (let i = 0; i < array.length; i++) {\n           \
    \ result.push(array[leftPointer + i]);\n            result.push(array[rightPointer\
    \ - i]);\n        }\n    } else {\n        for (let i = 0; i < array.length; i++)\
    \ {\n            result.push(array[rightPointer - i]);\n            result.push(array[leftPointer\
    \ + i]);\n        }\n    }\n    return result;\n}\n", "  return array.sort((a,\
    \ b) => (array[0] + array[array.length - 1]) % 2 ? a - b : b - a);\n}", "    if\
    \ (array.length == 0) {\n        return array;\n    }\n    if (array.length ==\
    \ 1) {\n        return array;\n    }\n    const lastIndex = array.length - 1;\n\
    \    const sumFirstLastIndex = array[0] + array[lastIndex];\n    if (sumFirstLastIndex\
    \ % 2 == 0) {\n        array.sort((a, b) => a - b);\n    } else {\n        array.sort((a,\
    \ b) => b - a);\n    }\n    return array;\n}\n", "  return array.sort((a, b) =>\
    \ {\n    const [first, last] = [a, b];\n    const sum = first + last;\n    if\
    \ (sum % 2 === 0) {\n      return last - first;\n    }\n    return first - last;\n\
    \  });\n}\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    const\
    \ len = array.length;\n    let isAsc = (array[0] + array[len - 1]) % 2 ? true\
    \ : false;\n    let temp = 0;\n    for (let i = 0; i < len; i++) {\n        for\
    \ (let j = 0; j < len - i - 1; j++) {\n            if (isAsc) {\n            \
    \    if (array[j] > array[j + 1]) {\n                    temp = array[j];\n  \
    \                  array[j] = array[j + 1];\n                    array[j + 1]\
    \ = temp;\n                }\n            } else {\n                if (array[j]\
    \ < array[j + 1]) {\n                    temp = array[j];\n                  \
    \  array[j] = array[j + 1];\n                    array[j + 1] = temp;\n      \
    \          }\n            }\n        }\n    }\n    return array;\n}\n", "    const\
    \ array1 = array.slice(0);\n    if (array.length < 2) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2 == 0) {\n        array1.sort((a,\
    \ b) => {\n            return a - b;\n        });\n    } else {\n        array1.sort((a,\
    \ b) => {\n            return b - a;\n        });\n    }\n    return array1;\n\
    }\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    if\
    \ (array.length === 0) {\n        return array;\n    }\n    const result: number[]\
    \ = [...array];\n    if ((array[0] + array[array.length - 1]) % 2 === 0) {\n \
    \       result.sort((first, second) => second - first);\n    } else {\n      \
    \  result.sort((first, second) => first - second);\n    }\n    return result;\n\
    }\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  let\
    \ sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
    \  }\n  return sum % 2 ? array.sort((a, b) => a - b) : array.sort((a, b) => b\
    \ - a);\n}\n", "    let result: number[] = [];\n    let first: number = array[0];\n\
    \    let last: number = array[array.length - 1];\n    if (first + last % 2 ==\
    \ 0) {\n        result = array.sort((a, b) => b - a);\n    } else {\n        result\
    \ = array.sort((a, b) => a - b);\n    }\n    return result;\n}\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  const\
    \ sum = array[0] + array[array.length - 1];\n  const sorted = array.sort((a, b)\
    \ => (sum % 2 === 0 ? b - a : a - b));\n  return sorted;\n}\n\nexport { sort_array\
    \ };", "  // if the array is empty return the array\n  if (!array.length) {\n\
    \    return array;\n  }\n  // if array has only one element return it\n  if (array.length\
    \ === 1) {\n    return array;\n  }\n  // if the sum of first and last index is\
    \ even sort in descending order\n  if ((array[0] + array[array.length - 1]) %\
    \ 2 === 0) {\n    return array.sort((a, b) => b - a);\n  }\n  // if the sum of\
    \ first and last index is odd sort in ascending order\n  return array.sort((a,\
    \ b) => a - b);\n}\n", "  const middle = Math.floor(array.length / 2);\n  const\
    \ even = middle % 2 === 0;\n  const left = array.slice(0, middle);\n  const right\
    \ = array.slice(middle);\n  const result = even ? left.concat(right.reverse())\
    \ : right.concat(left.reverse());\n  return result;\n}", "    if (array.length\
    \ === 0) {\n        return array;\n    } else if (array.length === 1) {\n    \
    \    return array;\n    } else {\n        if ((array[0] + array[array.length -\
    \ 1]) % 2 === 0) {\n            return array.sort((a, b) => b - a);\n        }\
    \ else {\n            return array.sort((a, b) => a - b);\n        }\n    }\n\
    }\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    const\
    \ sum = array[0] + array[array.length - 1];\n    return sum % 2 == 0 ? array.sort((a,\
    \ b) => b - a) : array.sort((a, b) => a - b);\n}\n", "  if (array.length === 0)\
    \ {\n    return [];\n  }\n  return array.sort((a, b) => ((a + b) % 2 === 0 ? b\
    \ - a : a - b));\n}\n", "    const sum = array[0] + array[array.length - 1];\n\
    \    return sum % 2 === 0 ? [...array].sort((a, b) => b - a) : [...array].sort((a,\
    \ b) => a - b);\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\n", "  if (!array.length) return [];\n  const sumOfIndexes\
    \ = array[0] + array[array.length - 1];\n  if (sumOfIndexes % 2 === 0) {\n   \
    \ return array.sort((a, b) => b - a);\n  }\n  return array.sort((a, b) => a -\
    \ b);\n}\n\nexport { sort_array };", "  if (array.length === 0) {\n    return\
    \ [];\n  }\n  const isEven = (array[0] + array[array.length - 1]) % 2 === 0;\n\
    \  return isEven ? array.sort((a, b) => b - a) : array.sort((a, b) => a - b);\n\
    }\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4,\
    \ 3, 0, 1, 5, 6]));\n", "    let len = array.length;\n    let sum = array[0] +\
    \ array[len - 1];\n    if (sum % 2 == 0) {\n        return (array.sort((a, b)\
    \ => b - a));\n    } else {\n        return (array.sort((a, b) => a - b));\n \
    \   }\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));", "    // Your code goes here!\n    const sum = array[0]\
    \ + array[array.length - 1];\n    if (sum % 2 !== 0) {\n        return array.sort((a,\
    \ b) => a - b);\n    } else {\n        return array.sort((a, b) => b - a);\n \
    \   }\n}", "    // Write your code here\n    // Good luck!\n    return array;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const firstIndex\
    \ = array[0];\n  const lastIndex = array[array.length - 1];\n  const sum = firstIndex\
    \ + lastIndex;\n  if (sum % 2 === 0) {\n    return array.sort((x, y) => y - x);\n\
    \  } else {\n    return array.sort((x, y) => x - y);\n  }\n}\n\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  // 1\n  // let sum = array[0]\
    \ + array[array.length - 1];\n  // if (sum % 2 == 0) {\n  //   return array.sort((a,\
    \ b) => b - a);\n  // } else {\n  //   return array.sort((a, b) => a - b);\n \
    \ // }\n\n  // 2\n  return array.sort((a, b) => (a + array[0] + array[array.length\
    \ - 1]) % 2 ? a - b : b - a);\n}\n", "    if (array.length == 0) return array;\n\
    \    const sum = array[0] + array[array.length - 1];\n    if (sum % 2 == 0) return\
    \ array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}", " \
    \   const sum: number = array[0] + array[array.length - 1];\n    const isOdd:\
    \ boolean = sum % 2 === 1;\n    if (isOdd) {\n        return array.sort((a, b)\
    \ => a - b);\n    } else {\n        return array.sort((a, b) => b - a);\n    }\n\
    }\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));", "    let odd = array.filter(item\
    \ => item % 2 == 1).sort((a, b) => a - b);\n    let even = array.filter(item =>\
    \ item % 2 == 0).sort((a, b) => b - a);\n    let final = [];\n    for (let i =\
    \ 0; i < array.length; i++) {\n        if (array[i] % 2 == 1) {\n            final.push(odd.shift());\n\
    \        } else {\n            final.push(even.shift());\n        }\n    }\n \
    \   return final;\n}\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3,\
    \ 0, 1, 5, 6]));", "  if (array.length == 0) {\n    return array;\n  }\n  let\
    \ sum: number = array[0] + array[array.length - 1];\n  if (sum % 2 == 0) {\n \
    \   return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a,\
    \ b) => a - b);\n  }\n}\n", "    if (array.length < 2) return array;\n    return\
    \ array.map((_, i) => i).sort((a, b) => (a + b) % 2 * 2 - 1 * (array[a] - array[b])).map(i\
    \ => array[i]);\n}\n", "    return array.reduce((a, b, index) => {\n        if\
    \ (index === 0) return [b];\n        if (index === array.length - 1) return [...a,\
    \ b];\n        if ((b + array[index - 1]) % 2 === 0) {\n            return [...a,\
    \ b, ...array.slice(index + 1)];\n        } else {\n            return [...a,\
    \ ...array.slice(index + 1), b];\n        }\n    }, []);\n}\n", "    if (array.length\
    \ < 2) {\n        return array;\n    }\n\n    const isOdd = (array[0] + array[array.length\
    \ - 1]) % 2 === 1;\n    const result = array.sort((a, b) => {\n        if (isOdd)\
    \ {\n            return a - b;\n        } else {\n            return b - a;\n\
    \        }\n    });\n\n    return result;\n}\n\nexport {\n    sort_array\n};",
  "  if (array.length === 0) {\n    return array;\n  }\n  let isEven = (array[0] +\
    \ array[array.length - 1]) % 2 === 0;\n  let sorted = array.sort();\n  if (isEven)\
    \ {\n    return sorted.reverse();\n  }\n  return sorted;\n}\n", "    return (array.length\
    \ > 0 && (array[0] + array[array.length - 1]) % 2 === 0) ? array.sort().reverse()\
    \ : array.sort();\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));", "    if (array.length === 0) {\n        return [];\n\
    \    }\n    const sum = array[0] + array[array.length - 1];\n    const sortedArray\
    \ = array.sort((a, b) => (sum % 2 === 0 ? b - a : a - b));\n    return sortedArray;\n\
    }\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  const\
    \ isOdd = (array[0] + array[array.length - 1]) % 2 === 1;\n  return isOdd ? array.sort((a,\
    \ b) => a - b) : array.sort((a, b) => b - a);\n}\n\nconst array1 = [1, 2, 3, 4,\
    \ 5, 6];\nconst array2 = [1, 2, 3, 4, 5];\n\nconsole.log(sort_array(array1));\n\
    console.log(sort_array(array2));", "    // your code here\n    let odd = 0, even\
    \ = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] % 2\
    \ == 0) {\n            even += array[i];\n        } else {\n            odd +=\
    \ array[i];\n        }\n    }\n    if ((even + array[0]) % 2 == 0) {\n       \
    \ array.sort((a, b) => {\n            return b - a;\n        });\n    } else {\n\
    \        array.sort((a, b) => {\n            return a - b;\n        });\n    }\n\
    \    return array;\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));", "    return (array.length > 0) && (array[0] + array[array.length\
    \ - 1]) % 2 === 0 ?\n        array.sort((a, b) => b - a) : array.sort((a, b) =>\
    \ a - b);\n}\n", "  let first_last_sum = array[0] + array[array.length - 1];\n\
    \  let sorted_array = array.sort((a, b) => {\n    if (first_last_sum % 2 == 0)\
    \ {\n      return b - a;\n    } else {\n      return a - b;\n    }\n  });\n  return\
    \ sorted_array;\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\n", "    if (array.length < 2) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2) {\n        return array.sort((a,\
    \ b) => a - b);\n    } else {\n        return array.sort((a, b) => b - a);\n \
    \   }\n}\n", "    if (array.length == 0) {\n        return array;\n    }\n   \
    \ else if (array.length == 1) {\n        return array;\n    }\n    else {\n  \
    \      let odd_list: number[] = [];\n        let even_list: number[] = [];\n \
    \       for (let i: number = 0; i < array.length; i++) {\n            if (array[i]\
    \ % 2 == 0) {\n                even_list.push(array[i]);\n            }\n    \
    \        else {\n                odd_list.push(array[i]);\n            }\n   \
    \     }\n        if ((array[0] + array[array.length - 1]) % 2 == 0) {\n      \
    \      even_list.sort((a, b) => {\n                return b - a;\n           \
    \ });\n            odd_list.sort((a, b) => {\n                return b - a;\n\
    \            });\n        }\n        else {\n            even_list.sort((a, b)\
    \ => {\n                return a - b;\n            });\n            odd_list.sort((a,\
    \ b) => {\n                return a - b;\n            });\n        }\n       \
    \ let new_array: number[] = [];\n        let even_index: number = 0;\n       \
    \ let odd_index: number = 0;\n        for (let i: number = 0; i < array.length;\
    \ i++) {\n            if (array[i] % 2 == 0) {\n                new_array.push(even_list[even_index]);\n\
    \                even_index++;\n            }\n            else {\n          \
    \      new_array.push(odd_list[odd_index]);\n                odd_index++;\n  \
    \          }\n        }\n        return new_array;\n    }\n}\n", "    if (array.length\
    \ === 0) {\n        return [];\n    }\n    if (array.length === 1) {\n       \
    \ return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if (sum % 2 === 0) {\n        array.sort((a, b) => b - a);\n    } else {\n\
    \        array.sort((a, b) => a - b);\n    }\n    return array;\n}\n\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));", "    return (array.length > 0 && array.length % 2 ===\
    \ 0) ? array.sort().reverse() : array.sort();\n}\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  if (array.length == 0) {\n\
    \    return array;\n  }\n  const sum = array[0] + array[array.length - 1];\n \
    \ const isEven = sum % 2 == 0;\n  return array.sort((a, b) => (isEven ? a - b\
    \ : b - a));\n}\n", "  if (array.length == 0) {\n    return array;\n  } else if\
    \ (array.length == 1) {\n    return array;\n  } else {\n    const a: number =\
    \ array[0];\n    const b: number = array[array.length - 1];\n    if ((a + b) %\
    \ 2 == 0) {\n      return array.sort((a, b) => b - a);\n    } else {\n      return\
    \ array.sort((a, b) => a - b);\n    }\n  }\n}\n", "  if (array.length === 0) {\n\
    \    return array;\n  }\n  const isEven = (array[0] + array[array.length - 1])\
    \ % 2 === 0;\n  const sortedArray = array.sort((a, b) => isEven ? a - b : b -\
    \ a);\n  return sortedArray;\n}\n\nexport { sort_array };", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  if (array.length === 1) {\n    return array;\n\
    \  }\n  let sum: number = array[0] + array[array.length - 1];\n  if (sum % 2 ===\
    \ 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a,\
    \ b) => a - b);\n  }\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));", "    //const\
    \ array.length is even\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 == 0){\n        return array.sort((a, b) => b - a);\n    } else\
    \ {\n        return array.sort((a, b) => a - b);\n    }\n}\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  if (array.length === 0) {\n\
    \    return array;\n  }\n  const sum = array[0] + array[array.length - 1];\n \
    \ const isEven = sum % 2 === 0;\n  if (isEven) {\n    return array.sort((a, b)\
    \ => b - a);\n  }\n  return array.sort((a, b) => a - b);\n}\n", "    //if (array.length\
    \ == 0) {\n    //    return array;\n    //}\n    //var head: number = array[0];\n\
    \    //var tail: number = array[array.length - 1];\n    //var odd: boolean = ((head\
    \ + tail) % 2 == 1);\n    //array.sort( (a, b) => {\n    //    if (odd) {\n  \
    \  //        return a - b;\n    //    } else {\n    //        return b - a;\n\
    \    //    }\n    //});\n    //return array;\n    return array.length ? array.sort((a,\
    \ b) => (a + array[array.length - 1]) % 2 ? a - b : b - a) : array;\n}\n", " \
    \ const length = array.length;\n  if (length <= 1) {\n    return array;\n  }\n\
    \  const temp = array[0] + array[length - 1];\n  return temp % 2 === 0 ? array.sort((a,\
    \ b) => b - a) : array.sort((a, b) => a - b);\n}\n", "  const len = array.length;\n\
    \  if (len <= 1) {\n    return array;\n  }\n  const sum = array[0] + array[len\
    \ - 1];\n  const ret = [...array];\n  if (sum % 2 === 0) {\n    ret.sort((a, b)\
    \ => b - a);\n  } else {\n    ret.sort((a, b) => a - b);\n  }\n  return ret;\n\
    }\n\nexport {\n  sort_array,\n};", "  //   if (array.length === 0) {\n  //   \
    \  return [];\n  //   }\n  //   if (array.length === 1) {\n  //     return array;\n\
    \  //   }\n  //   let sum = array[0] + array[array.length - 1];\n  //   if (sum\
    \ % 2 === 0) {\n  //     return array.sort((a, b) => b - a);\n  //   } else {\n\
    \  //     return array.sort((a, b) => a - b);\n  //   }\n  return array.length\
    \ < 2\n    ? array\n    : array[0] + array[array.length - 1] & 1\n    ? array.sort((a,\
    \ b) => a - b)\n    : array.sort((a, b) => b - a);\n}\n", "  const middle = (array.length\
    \ - 1) / 2;\n  const total = array[0] + array[array.length - 1];\n  const isOdd\
    \ = total % 2 !== 0;\n  if (isOdd) {\n    const left = array.slice(0, middle);\n\
    \    const right = array.slice(middle + 1, array.length);\n    return left.sort().concat(array[middle],\
    \ right.sort().reverse());\n  } else {\n    const left = array.slice(0, middle);\n\
    \    const right = array.slice(middle + 1, array.length);\n    return left.sort().reverse().concat(array[middle],\
    \ right.sort());\n  }\n}\n", "    const oddOrEven =\n        array.length > 0\
    \ && (array[0] + array[array.length - 1]) % 2 === 0\n            ? \"even\"\n\
    \            : \"odd\";\n    const sortedArray = array.sort((a, b) => a - b);\n\
    \    return oddOrEven === \"even\" ? sortedArray.reverse() : sortedArray;\n}\n",
  "  const n = array.length;\n  return n % 2 === 0\n    ? array.sort((a, b) => b -\
    \ a)\n    : array.sort((a, b) => a - b);\n}\n", "  if (array.length === 0) {\n\
    \    return array;\n  } else if (array.length === 1) {\n    return array;\n  }\
    \ else if (array.length === 2) {\n    if (array[0] % 2 === 0) {\n      let temp\
    \ = array[0];\n      array[0] = array[1];\n      array[1] = temp;\n      return\
    \ array;\n    } else {\n      return array;\n    }\n  } else {\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 === 0) {\n      array.sort((a, b) => b - a);\n\
    \      return array;\n    } else {\n      array.sort((a, b) => a - b);\n     \
    \ return array;\n    }\n  }\n}", "  return !array.length || array.length === 1\n\
    \    ? array\n    : array[0] + array[array.length - 1] % 2 === 0\n    ? array.sort((a,\
    \ b) => b - a)\n    : array.sort((a, b) => a - b);\n}\n", "    // function to\
    \ get sum of first and last index\n    const getSum = (arr: number[]): number\
    \ => {\n        return arr[0] + arr[arr.length - 1];\n    };\n    // check the\
    \ array length is 0 or not\n    if (array.length === 0) {\n        return array;\n\
    \    }\n    // check the array length is 1 or not\n    if (array.length === 1)\
    \ {\n        return array;\n    }\n    // sorting the array\n    let sortedArray\
    \ = array.sort((a, b) => {\n        return a - b;\n    });\n    // check sum of\
    \ first and last index is odd or even\n    if (getSum(sortedArray) % 2 !== 0)\
    \ {\n        return sortedArray;\n    } else {\n        return sortedArray.reverse();\n\
    \    }\n}\n", "  return array.sort((a, b) => {\n    const total: number = a +\
    \ b;\n    return total % 2 ? -1 : 1;\n  });\n}\n\nexport { sort_array };", " \
    \   if (array.length <= 1) return array;\n    let isAscending: boolean = (array[0]\
    \ + array[array.length - 1]) % 2 === 0;\n    return array.sort((a, b) => (isAscending\
    \ ? 1 : -1) * (a - b));\n}\n", "    if (array.length < 2) {\n        return array;\n\
    \    }\n    let array_copy = [...array];\n    if ((array_copy[0] + array_copy[array_copy.length\
    \ - 1]) % 2 === 0) {\n        return array_copy.sort((a, b) => b - a);\n    }\
    \ else {\n        return array_copy.sort((a, b) => a - b);\n    }\n}\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "    const even = array.length\
    \ % 2 === 0;\n    const first = array[0];\n    const last = array[array.length\
    \ - 1];\n    const sum = first + last;\n    return even ? array.sort((a, b) =>\
    \ b - a) : array.sort((a, b) => a - b);\n}\n", "    let sum = array[0] + array[array.length\
    \ - 1];\n    let subArray: number[] = array.slice(1, array.length - 1).sort((x,\
    \ y) => sum % 2 == 0 ? y - x : x - y);\n    let res: number[] = [array[0]];\n\
    \    for (let i = 0; i < subArray.length; i++) {\n        res.push(subArray[i]);\n\
    \    }\n    res.push(array[array.length - 1]);\n    return res;\n}\n\n", "   \
    \ if (array.length == 0) {\n        return array;\n    }\n    var direction =\
    \ (array[0] + array[array.length - 1]) % 2 == 0 ? -1 : 1;\n    return array.sort((x,\
    \ y) => direction * (x - y));\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    if (array.length === 0)\
    \ {\n        return [];\n    }\n    else if (array.length === 1) {\n        return\
    \ array;\n    }\n    else {\n        if ((array[0] + array[array.length - 1])\
    \ % 2 !== 0) {\n            array.sort((a, b) => a - b);\n        }\n        else\
    \ {\n            array.sort((a, b) => b - a);\n        }\n        return array;\n\
    \    }\n}\n", "    if (array.length % 2 == 0) {\n        return array.sort((a,\
    \ b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n \
    \   }\n}", "    if (array.length === 0) {\n        return [];\n    }\n    const\
    \ indexSum = array[0] + array[array.length - 1];\n    if (indexSum % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a,\
    \ b) => a - b);\n}\n", "    if (array.length == 0) {\n        return array;\n\
    \    }\n    let odd_or_even: boolean = (array[0] + array[array.length - 1]) %\
    \ 2 == 0;\n    if (odd_or_even) {\n        array.sort((a, b) => {\n          \
    \  return b - a;\n        });\n    } else {\n        array.sort((a, b) => {\n\
    \            return a - b;\n        });\n    }\n    return array;\n}\n", "   \
    \ let result: number[] = array.slice();\n    if ((result[0] + result[result.length\
    \ - 1]) % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n  \
    \      result.sort((a, b) => a - b);\n    }\n    return result;\n}\n", "  // var\
    \ last = array.pop();\n  // var first = array.shift();\n  // let sum = first +\
    \ last;\n  // console.log(first);\n  // console.log(last);\n  // console.log(sum);\n\
    \  // if (sum % 2 === 0) {\n  //   array.sort((a, b) => b - a);\n  // } else {\n\
    \  //   array.sort((a, b) => a - b);\n  // }\n  // array.unshift(first);\n  //\
    \ array.push(last);\n  // return array;\n  const last = array.pop();\n  const\
    \ first = array.shift();\n  let sum = first + last;\n  array.sort((a, b) => sum\
    \ % 2 === 0 ? b - a : a - b);\n  array.unshift(first);\n  array.push(last);\n\
    \  return array;\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  return\
    \ array;\n}\n\nexport { sort_array };", "    let sum: number = array[0] + array[array.length\
    \ - 1];\n    let arr_out: number[] = [];\n    let arr_even: number[] = [];\n \
    \   let arr_odd: number[] = [];\n    if (sum % 2 !== 0) {\n        for (let i\
    \ = 0; i < array.length; i++) {\n            if (array[i] % 2 === 0) {\n     \
    \           arr_even.push(array[i]);\n            } else {\n                arr_odd.push(array[i]);\n\
    \            }\n        }\n        arr_odd.sort(function (a, b) {\n          \
    \  return a - b;\n        });\n        arr_even.sort(function (a, b) {\n     \
    \       return b - a;\n        });\n        for (let i = 0; i < array.length;\
    \ i++) {\n            if (array[i] % 2 === 0) {\n                arr_out.push(arr_even.shift());\n\
    \            } else {\n                arr_out.push(arr_odd.shift());\n      \
    \      }\n        }\n    } else {\n        array.sort(function (a, b) {\n    \
    \        return b - a;\n        });\n        arr_out = array;\n    }\n    return\
    \ arr_out;\n}", "  return array.sort((a, b) => {\n    if (a + b % 2) {\n     \
    \ return a - b;\n    } else {\n      return b - a;\n    }\n  });\n}\n", "    const\
    \ sum = array[0] + array[array.length - 1];\n    const sorted = sum % 2 === 0\
    \ ? array.sort((a, b) => b - a) : array.sort((a, b) => a - b);\n    return sorted;\n\
    }\n", "  // Good Luck!\n  let flag = (array[0] + array[array.length - 1]) % 2;\n\
    \  if (flag === 0) {\n    array.sort((a, b) => {\n      return b - a;\n    });\n\
    \  } else {\n    array.sort((a, b) => {\n      return a - b;\n    });\n  }\n \
    \ return array;\n}\n\nexport default sort_array;", "  const sortedArray = array.sort((a,\
    \ b) => a - b);\n  const firstVal = sortedArray[0];\n  const lastVal = sortedArray[sortedArray.length\
    \ - 1];\n  if ((firstVal + lastVal) % 2 === 0) {\n    return sortedArray.reverse();\n\
    \  }\n  return sortedArray;\n}\n", "    if (array.length == 0) {\n        return\
    \ array;\n    }\n    let sortArray = array.map(val => val).sort((a, b) => a -\
    \ b);\n    if ((array[0] + array[array.length - 1]) % 2 == 0) {\n        return\
    \ sortArray.reverse();\n    }\n    return sortArray;\n}\n", "    if (array.length\
    \ === 0) return [];\n    let result = array.slice();\n    let firstIndex = array[0];\n\
    \    let lastIndex = array[array.length - 1];\n    let sum = firstIndex + lastIndex;\n\
    \    if (sum % 2 === 0) {\n        result.sort((a, b) => b - a);\n    } else {\n\
    \        result.sort((a, b) => a - b);\n    }\n    return result;\n}\n", "   \
    \ if(!array.length || array.length === 1) return array;\n    const sum = array[0]\
    \ + array[array.length - 1];\n    const sort = (sum & 1) === 0 ? (a, b) => b -\
    \ a : (a, b) => a - b;\n    return array.sort(sort);\n}\n", "  // First, check\
    \ if the array is empty and return it if so.\n  if (array.length === 0) {\n  \
    \  return array;\n  }\n  // Next, check if the sum of the first and last indices\
    \ is even. If so, use the built-in sort method.\n  if ((array[0] + array[array.length\
    \ - 1]) % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  }\n  // Finally,\
    \ return the array sorted in ascending order.\n  return array.sort((a, b) => a\
    \ - b);\n}\n\nconsole.log(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(sort_array([5,\
    \ 3, 2, 8, 1, 4]));\nconsole.log(sort_array([5, 3, 1, 8, 0]));\nconsole.log(sort_array([]));\n\
    console.log(sort_array([1]));", "  const odd = array.filter((x) => x % 2).sort((a,\
    \ b) => a - b);\n  const even = array.filter((x) => x % 2 === 0).sort((a, b) =>\
    \ b - a);\n  return array.map((x) => (x % 2 ? odd.shift() : even.shift()));\n\
    }\n\nexport { sort_array };", "    let sum: number = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "    return array.slice().sort((a,\
    \ b) => a + b);\n}", "    if (array.length < 2) {\n        return array;\n   \
    \ }\n    if ((array[0] + array[array.length - 1]) % 2 === 0) {\n        return\
    \ array.sort(function (a, b) {\n            return b - a;\n        });\n    }\
    \ else {\n        return array.sort(function (a, b) {\n            return a -\
    \ b;\n        });\n    }\n}\n", "    if(array.length > 0) {\n        if((array[0]\
    \ + array[array.length - 1]) % 2 === 0) {\n            return array.sort((a, b)\
    \ => b - a);\n        } else {\n            return array.sort((a, b) => a - b);\n\
    \        }\n    } else {\n        return array;\n    }\n}\n\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sort_array([2,\
    \ 2, 2, 2, 2, 2, 2]));\nconsole.log(sort_array([]));\nconsole.log(sort_array([1]));",
  "    // implement the function here\n    let sum = array[0] + array[array.length\
    \ - 1];\n    return sum % 2 === 0 ? array.sort((a, b) => b - a) : array.sort((a,\
    \ b) => a - b);\n}", "  let sum = array[0] + array[array.length - 1];\n  if (sum\
    \ % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return\
    \ array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([2, 4, 3, 0,\
    \ 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  if (array.length\
    \ === 0) {\n    return [];\n  } else if (array.length === 1) {\n    return array;\n\
    \  }\n  let total: number = array[0] + array[array.length - 1];\n  if (total %\
    \ 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return\
    \ array.sort((a, b) => a - b);\n  }\n}\n", "    const sum = array[0] + array[array.length\
    \ - 1];\n    return array.sort((a, b) => sum % 2 === 0 ? b - a : a - b);\n}\n",
  "  let newArray = [];\n  let sum = array[0] + array[array.length - 1];\n  if (sum\
    \ % 2 == 0) {\n    newArray = array.sort((a, b) => b - a);\n  } else {\n    newArray\
    \ = array.sort((a, b) => a - b);\n  }\n  return newArray;\n}\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "  return\
    \ array.length % 2 === 0\n    ? array.sort((a, b) => b - a)\n    : array.sort((a,\
    \ b) => a - b);\n}\n", "  let sum = array[0] + array[array.length - 1];\n  let\
    \ result = sum % 2 == 0 ? array.sort((a, b) => b - a) : array.sort((a, b) => a\
    \ - b);\n  return result;\n}\n\ndescribe(\"sort_array\", function() {\n  it(\"\
    sort_array([])\", function() {\n    assert.deepEqual(sort_array([]), []);\n  });\n\
    \  it(\"sort_array([5])\", function() {\n    assert.deepEqual(sort_array([5]),\
    \ [5]);\n  });\n  it(\"sort_array([2, 4, 3, 0, 1, 5])\", function() {\n    assert.deepEqual(sort_array([2,\
    \ 4, 3, 0, 1, 5]), [0, 1, 2, 3, 4, 5]);\n  });\n  it(\"sort_array([2, 4, 3, 0,\
    \ 1, 5, 6])\", function() {\n    assert.deepEqual(sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]), [6, 5, 4, 3, 2, 1, 0]);\n  });\n});", "  // your code here\n  return [];\n\
    }\n", "  let result: number[] = [];\n  if (!array.length) {\n    return array;\n\
    \  }\n  if (array.length === 1) {\n    return array;\n  }\n  if (array[0] + array[array.length\
    \ - 1] % 2 === 0) {\n    result = array.sort((a, b) => b - a);\n  } else {\n \
    \   result = array.sort((a, b) => a - b);\n  }\n  return result;\n}\n", "    if(array.length\
    \ === 0 || array.length === 1) return array;\n    let sum = array[0] + array[array.length\
    \ - 1];\n    return sum % 2 === 0 ? [...array].sort((a, b) => b - a) : [...array].sort((a,\
    \ b) => a - b);\n}\n", "  if (array.length === 0) {\n    return [];\n  }\n  if\
    \ (array.length === 1) {\n    return array;\n  }\n  const key = array[0] + array[array.length\
    \ - 1];\n  const sortArray = key % 2 === 0 ? descending : ascending;\n  return\
    \ sortArray(array);\n}\n", "  const newArray = [...array];\n  const sum = newArray[0]\
    \ + newArray[newArray.length - 1];\n  if (sum % 2 === 0) {\n    return newArray.sort((a,\
    \ b) => b - a);\n  } else {\n    return newArray.sort((a, b) => a - b);\n  }\n\
    }\n", "  const sum = array[0] + array[array.length - 1];\n  return array.sort((a,\
    \ b) => (sum % 2 === 0 ? b - a : a - b));\n}\n\nexport { sort_array };", "  let\
    \ first = array[0];\n  let last = array[array.length - 1];\n  let sum = first\
    \ + last;\n  let result = array.sort((a, b) => {\n    if (sum % 2 !== 0) {\n \
    \     return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return\
    \ result;\n}\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3,\
    \ 0, 1, 5, 6]));", "    let sum = array[0] + array[array.length - 1];\n    return\
    \ array.sort((a, b) => sum % 2 == 0 ? b - a : a - b);\n}\n\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  if (array.length === 0) {\n\
    \    return array;\n  }\n  let isOdd = array[0] + array[array.length - 1] % 2;\n\
    \  return isOdd ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n\
    }\n", "    // TODO: implement function\n    return array.sort((a, b) => (a + b)\
    \ % 2 === 0 ? b - a : a - b);\n}\n", "    // Given a list of numbers, determine\
    \ whether the sum of its elements is odd or even.\n    // Give your answer as\
    \ a string matching \"odd\" or \"even\".\n    // If the input array is empty consider\
    \ it as: [0] (array with a zero).\n    function odd_or_even(array: number[]):\
    \ string {\n        return (array.reduce((acc, cur) => acc + cur, 0) % 2 === 0)\
    \ ? 'even' : 'odd';\n    }\n\n    if (array.length === 0) {\n        return array;\n\
    \    }\n\n    return (odd_or_even(array) === 'even') ? array.sort((a, b) => b\
    \ - a) : array.sort((a, b) => a - b);\n}", "    if (array.length === 0) return\
    \ array;\n    let res = array.slice();\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 !== 0) {\n        res.sort((a, b) => a - b);\n    } else\
    \ {\n        res.sort((a, b) => b - a);\n    }\n    return res;\n}\n", "    if\
    \ (array.length < 2) {\n        return array;\n    }\n    const [head, ...tail]\
    \ = array;\n    return array_sum(array) % 2 ? [...tail, head].sort((a, b) => a\
    \ - b) : [...tail, head].sort((a, b) => b - a);\n}\n", "    let sum = array[0]\
    \ + array[array.length - 1];\n    if (sum % 2 === 0) {\n        array.sort((a,\
    \ b) => b - a);\n    } else {\n        array.sort((a, b) => a - b);\n    }\n \
    \   return array;\n}", "  const sum: number = array[0] + array[array.length -\
    \ 1];\n  if (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else\
    \ {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "  let arr1 = [];\n \
    \ let arr2 = [];\n  for (let i = 0; i < array.length; i++) {\n    if (i % 2 ==\
    \ 0) {\n      arr1.push(array[i]);\n    } else {\n      arr2.push(array[i]);\n\
    \    }\n  }\n  arr1.sort(function(a, b) {\n    return a - b;\n  });\n  arr2.sort(function(a,\
    \ b) {\n    return b - a;\n  });\n  return array.map(function(value, index) {\n\
    \    if (index % 2 == 0) {\n      return arr1.shift();\n    } else {\n      return\
    \ arr2.shift();\n    }\n  });\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "    if (array.length ===\
    \ 0) {\n        return array;\n    } else if (array.length === 1) {\n        return\
    \ array;\n    } else {\n        if ((array[0] + array[array.length - 1]) % 2 ===\
    \ 0) {\n            return array.sort((a, b) => a - b);\n        } else {\n  \
    \          return array.sort((a, b) => b - a);\n        }\n    }\n}\n\nexport\
    \ { binary_gap, sort_array };", "  if (!array.length) return array;\n  let [odd,\
    \ even] = [[], []];\n  array.forEach((v, i) => (i % 2) ? odd.push(v) : even.push(v));\n\
    \  const res = array.slice(0);\n  return (array[0] + array[array.length - 1])\
    \ % 2 ?\n    res.map((v, i) => i % 2 ? odd.pop() : even.pop()) :\n    res.map((v,\
    \ i) => i % 2 ? even.pop() : odd.pop());\n}\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3,\
    \ 0, 1, 5, 6]));", "    if (array.length == 0) return array;\n    if (array.length\
    \ == 1) return array;\n    if (array[0] + array[array.length - 1] % 2 == 0) {\n\
    \        array.sort((a, b) => b - a);\n    } else {\n        array.sort((a, b)\
    \ => a - b);\n    }\n    return array;\n}", "  //Your code here!\n  return array.sort((a,\
    \ b) => {\n    const sum = a + b;\n    if (sum % 2 === 0) {\n      return b -\
    \ a;\n    } else {\n      return a - b;\n    }\n  });\n}\n", "  let sort_array\
    \ = array.slice(0);\n  return array.length == 0 || array.length == 1 || array[0]\
    \ + array[array.length - 1] % 2 == 0\n    ? sort_array.sort((a, b) => b - a)\n\
    \    : sort_array.sort((a, b) => a - b);\n}\n\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  return array.sort((a, b)\
    \ =>\n    (a + array[array.length - 1]) % 2 === 0 ? b - a : a - b\n  );\n}\n\n\
    export default sort_array;", "  let firstElement = array[0];\n  let lastElement\
    \ = array[array.length - 1];\n  let sum = firstElement + lastElement;\n  if (sum\
    \ % 2 == 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return\
    \ array.sort((a, b) => a - b);\n  }\n}\n", "    if (array.length === 0) {\n  \
    \      return array;\n    }\n    if (array.length === 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.length - 1]) % 2 === 0) {\n        array.sort((a,\
    \ b) => a - b);\n    } else {\n        array.sort((a, b) => b - a);\n    }\n \
    \   return array;\n}\n", "    let sum = array[0] + array[array.length - 1];\n\
    \    return sum % 2 === 0 ? array.sort((a, b) => b - a) : array.sort((a, b) =>\
    \ a - b);\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));",
  "  if (!array.length) return array;\n  let is_even = array[0] + array[array.length\
    \ - 1] % 2 === 0;\n  return is_even ? array.sort((a, b) => b - a) : array.sort((a,\
    \ b) => a - b);\n}\n", "    let len = array.length;\n    return array.sort((a,\
    \ b) => {\n        if (len % 2 === 0) {\n            return a - b;\n        }\
    \ else {\n            return b - a;\n        }\n    });\n}\n", "  if (array.length\
    \ === 0) {\n    return [];\n  }\n  const result = array.slice(0);\n  if ((array[0]\
    \ + array[array.length - 1]) % 2 === 0) {\n    result.sort((a, b) => b - a);\n\
    \  } else {\n    result.sort((a, b) => a - b);\n  }\n  return result;\n}\n", " \
    \   // implement here...\n    return array;\n}\n", "    let res: number[] = [];\n\
    \    if (array.length == 0) return res;\n    let sum: number = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0) {\n        array.sort((a, b) => b - a);\n    }\
    \ else {\n        array.sort((a, b) => a - b);\n    }\n    return array;\n}",
  "  const len = array.length;\n  const sum = array[0] + array[len - 1];\n  let sort\
    \ = \"asc\";\n  if (sum % 2 === 0) {\n    sort = \"desc\";\n  }\n  if (sort ===\
    \ \"asc\") {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "    const isEven = (array[0] + array[array.length\
    \ - 1]) % 2 === 0;\n    const sortFunction = isEven ? (a, b) => b - a : (a, b)\
    \ => a - b;\n    return array.sort(sortFunction);\n}\n\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "   \
    \ if (array.length == 0) return array;\n    let even: boolean = (array[0] + array[array.length\
    \ - 1]) % 2 == 0;\n    if (even) {\n        array.sort((a, b) => b - a);\n   \
    \ } else {\n        array.sort((a, b) => a - b);\n    }\n    return array;\n}\n\
    \nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4,\
    \ 3, 0, 1, 5, 6]));", "    const sum = array[0] + array[array.length - 1];\n \
    \   return sum % 2 !== 0 ? array.sort((a, b) => a - b) : array.sort((a, b) =>\
    \ b - a);\n}\n", "  // TODO\n  var sum = 0;\n  var result = [];\n  if (array.length\
    \ > 0) {\n    sum = array[0] + array[array.length - 1];\n  }\n  if (sum % 2 ==\
    \ 0) {\n    array.sort((a, b) => {\n      return b - a;\n    });\n  } else {\n\
    \    array.sort((a, b) => {\n      return a - b;\n    });\n  }\n  return array;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  let sorted: number[]\
    \ = [];\n  for (let i = 0; i < array.length; i++) {\n    sorted.push(array[i]);\n\
    \  }\n  let result: number[] = [];\n  let isSumOdd: boolean =\n    sorted[0] +\
    \ sorted[sorted.length - 1] % 2 === 0 ? false : true;\n  if (isSumOdd) {\n   \
    \ sorted.sort((a, b) => a - b);\n  } else {\n    sorted.sort((a, b) => b - a);\n\
    \  }\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n\
    \  }\n  return result;\n}\n", "    let first_value = array[0];\n    let last_value\
    \ = array[array.length - 1];\n    let is_odd = (first_value + last_value) % 2\
    \ !== 0;\n    return is_odd ? array.sort((a, b) => a - b) : array.sort((a, b)\
    \ => b - a);\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  return array.sort((first, second) => first\
    \ + array.length % 2 - second - array.length % 2);\n}\n\nexport { sort_array };",
  "    if (array.length == 0) {\n        return [];\n    }\n    else if (array.length\
    \ == 1) {\n        return array;\n    }\n    else {\n        let sum = array[0]\
    \ + array[array.length - 1];\n        if (sum % 2 == 0) {\n            array.sort((a,\
    \ b) => b - a);\n        }\n        else {\n            array.sort((a, b) => a\
    \ - b);\n        }\n        return array;\n    }\n}\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "  if (array.length === 0) {\n\
    \    return array;\n  } else if (array.length % 2 === 0) {\n    return array.sort((a,\
    \ b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n\
    \nexport default sort_array;", "    if(array.length == 0 || array.length == 1){\n\
    \        return array;\n    }\n    let firstElem = array[0];\n    let lastElem\
    \ = array[array.length - 1];\n    if((firstElem + lastElem) % 2 == 0){\n     \
    \   return array.sort((a, b) => b - a);\n    }else{\n        return array.sort((a,\
    \ b) => a - b);\n    }\n}\n", "    return array.reduce((sum, num, idx) => sum\
    \ + num + idx, 0) % 2 ? array.sort((a, b) => a - b) : array.sort((a, b) => b -\
    \ a);\n}\n", "  let odd_sum: number = 0;\n  let even_sum: number = 0;\n  let odd_array:\
    \ number[] = [];\n  let even_array: number[] = [];\n  for (let i = 0; i < array.length;\
    \ i++) {\n    if (i % 2 == 0) {\n      odd_sum += array[i];\n      odd_array.push(array[i]);\n\
    \    } else {\n      even_sum += array[i];\n      even_array.push(array[i]);\n\
    \    }\n  }\n  odd_array.sort((a, b) => a - b);\n  even_array.sort((a, b) => b\
    \ - a);\n  let result_array: number[] = [];\n  for (let i = 0; i < array.length;\
    \ i++) {\n    if (i % 2 == 0) {\n      result_array.push(odd_array.shift());\n\
    \    } else {\n      result_array.push(even_array.shift());\n    }\n  }\n  return\
    \ result_array;\n}\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3,\
    \ 0, 1, 5, 6]));", "  return array.reduce((acc, val, i) => {\n    if (array.length\
    \ === 1) {\n      return acc.concat(val);\n    }\n    if (i === 0 || i === array.length\
    \ - 1) {\n      return acc.concat(val);\n    }\n    if (array[0] + array[array.length\
    \ - 1] % 2 !== 0) {\n      acc.splice(1, 0, val);\n    } else {\n      acc.splice(acc.length\
    \ - 1, 0, val);\n    }\n    return acc;\n  }, []);\n}\n", "    // This is a more\
    \ advanced version than the one in the test\n    const sum: number = array[0]\
    \ + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a,\
    \ b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n \
    \   }\n}", "  if (array.length === 0) {\n    return [];\n  }\n  if (array.length\
    \ === 1) {\n    return array;\n  }\n  if (array[0] + array[array.length - 1] %\
    \ 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return\
    \ array.sort((a, b) => a - b);\n  }\n}\n", "  const result = [];\n  const odd\
    \ = [];\n  const even = [];\n  for (let i = 0; i < array.length; i++) {\n    if\
    \ (array[i] % 2 === 0) {\n      even.push(array[i]);\n    } else {\n      odd.push(array[i]);\n\
    \    }\n  }\n  odd.sort((a, b) => b - a);\n  even.sort((a, b) => a - b);\n  let\
    \ j = 0;\n  let k = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]\
    \ % 2 === 0) {\n      result.push(even[j]);\n      j++;\n    } else {\n      result.push(odd[k]);\n\
    \      k++;\n    }\n  }\n  return result;\n}\n\ntest(\"sort_array\", () => {\n\
    \  expect(sort_array([])).toEqual([]);\n  expect(sort_array([5])).toEqual([5]);\n\
    \  expect(sort_array([2, 4, 3, 0, 1, 5])).toEqual([0, 1, 2, 3, 4, 5]);\n  expect(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6])).toEqual([6, 5, 4, 3, 2, 1, 0]);\n});", "    if (array.length\
    \ === 0) return array;\n    const sumOfFirstAndLast = array[0] + array[array.length\
    \ - 1];\n    if (sumOfFirstAndLast % 2 === 0) {\n        return array.sort((a,\
    \ b) => b - a);\n    } else {\n        return array.sort((a, b) => a - b);\n \
    \   }\n}\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6, 8]));\n",
  "    if (array.length > 0) {\n        let first_last_sum = array[0] + array[array.length\
    \ - 1];\n        if (first_last_sum % 2 === 0) {\n            return array.sort((a,\
    \ b) => b - a);\n        } else {\n            return array.sort((a, b) => a -\
    \ b);\n        }\n    } else {\n        return array;\n    }\n}\n", "    // write\
    \ your code here...\n    const result: number[] = [];\n    let total: number =\
    \ 0;\n    for (let index = 0; index < array.length; index++) {\n        total\
    \ += array[index];\n    }\n    if (total % 2 === 0) {\n        let newArray =\
    \ array.sort((a, b) => b - a);\n        return newArray;\n    } else {\n     \
    \   let newArray = array.sort((a, b) => a - b);\n        return newArray;\n  \
    \  }\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));", "    if (array.length\
    \ === 0) {\n        return array;\n    }\n    if (array.length === 1) {\n    \
    \    return array;\n    }\n    let isOdd: boolean = (array[0] + array[array.length\
    \ - 1]) % 2;\n    if (isOdd) {\n        return array.sort((a, b) => a - b);\n\
    \    } else {\n        return array.sort((a, b) => b - a);\n    }\n}\n", "  return\
    \ array.sort((a, b) => (a + b) % 2 - (b + a) % 2);\n}\n", "    if(array.length\
    \ <= 1){\n        return array;\n    }\n    let sum: number = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n", "  let copy = array.slice();\n\
    \  return array.length % 2 === 0 ? copy.sort((a, b) => b - a) : copy.sort((a,\
    \ b) => a - b);\n}", "    const odd = array.length % 2;\n    const sortAscending\
    \ = odd === 1;\n    const sortDescending = odd === 0;\n    const sort = (i: number,\
    \ j: number) => {\n        return sortAscending\n            ? i - j\n       \
    \     : j - i;\n    };\n    return sortAscending || sortDescending\n        ?\
    \ array.sort(sort)\n        : array;\n}\n", "    if (array.length === 0) {\n \
    \       return array;\n    }\n    const length = array.length;\n    if (array[0]\
    \ + array[length - 1] % 2 === 0) {\n        return array.sort(descending);\n \
    \   } else {\n        return array.sort(ascending);\n    }\n}\n", "    if (array.length\
    \ == 0) {\n        return [];\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0) {\n        return array.sort((a, b) => {\n    \
    \        return b - a;\n        });\n    } else {\n        return array.sort((a,\
    \ b) => {\n            return a - b;\n        });\n    }\n}", "  if (array.length\
    \ == 0) {\n    return array;\n  }\n  var temp_sum = array[0] + array[array.length\
    \ - 1];\n  if (temp_sum % 2 == 0) {\n    return array.sort((x, y) => y - x);\n\
    \  } else {\n    return array.sort((x, y) => x - y);\n  }\n}\n", "    if (array.length\
    \ <= 1) return array;\n    let sortedArray = array.sort((a, b) => b - a);\n  \
    \  if ((array[0] + array[array.length - 1]) % 2 !== 0) {\n        return sortedArray;\n\
    \    } else {\n        return sortedArray.reverse();\n    }\n}\n\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    if\
    \ (array.length > 0) {\n        if ((array[0] + array[array.length - 1]) % 2 ==\
    \ 0) {\n            return array.sort((a, b) => b - a);\n        } else {\n  \
    \          return array.sort((a, b) => a - b);\n        }\n    } else {\n    \
    \    return array;\n    }\n}\n\ndescribe(\"sort_array\", function () {\n    it(\"\
    should works\", function () {\n        assert.deepEqual(sort_array([]), []);\n\
    \        assert.deepEqual(sort_array([5]), [5]);\n        assert.deepEqual(sort_array([2,\
    \ 4, 3, 0, 1, 5]), [0, 1, 2, 3, 4, 5]);\n        assert.deepEqual(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]), [6, 5, 4, 3, 2, 1, 0]);\n    });\n});", "    const sum =\
    \ array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return\
    \ array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b)\
    \ => a - b);\n    }\n}\n", "  if (array.length === 0) {\n    return [];\n  }\n\
    \  return array.sort((a, b) => (a + b) % 2 ? b - a : a - b);\n}", "    if (array.length\
    \ <= 1) {\n        return array;\n    }\n    var tempArray = array.slice();\n\
    \    var sort_func = (a: number, b: number) => {\n        if (a > b) return 1;\n\
    \        if (a < b) return -1;\n        return 0;\n    };\n    if ((array[0] +\
    \ array[array.length - 1]) % 2 === 0) {\n        tempArray.sort(sort_func).reverse();\n\
    \    } else {\n        tempArray.sort(sort_func);\n    }\n    return tempArray;\n\
    }\n", "    const result: number[] = array.sort((a, b) => {\n        if (a + b\
    \ % 2 === 0) {\n            return b - a;\n        } else {\n            return\
    \ a - b;\n        }\n    });\n    return result;\n}\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\n", "  // TODO: insert your code here\n  return array;\n}",
  "  if (array.length === 0) {\n    return array;\n  }\n  return array.sort((a, b)\
    \ => (a + b) % 2 === 0 ? b - a : a - b);\n}\n", "  if (array.length < 2) {\n \
    \   return array;\n  }\n  const sumOfFirstAndLast = array[0] + array[array.length\
    \ - 1];\n  const sortedArr = array.sort((a, b) => a - b);\n  if (sumOfFirstAndLast\
    \ % 2) {\n    return sortedArr;\n  }\n  return sortedArr.reverse();\n}\n", " \
    \ if (array.length === 0) {\n    return [];\n  }\n  if (array.length === 1) {\n\
    \    return array;\n  }\n  const sorted: number[] = array.sort();\n  const firstLastSum\
    \ = sorted[0] + sorted[sorted.length - 1];\n  if (firstLastSum % 2 === 0) {\n\
    \    return sorted.reverse();\n  }\n  return sorted;\n}\n", "  if (array.length\
    \ === 0) {\n    return [];\n  } else if (array.length === 1) {\n    return array;\n\
    \  } else {\n    const isEven: boolean = (array[0] + array[array.length - 1])\
    \ % 2 === 0;\n    const sortedArray: number[] = array.sort(\n      (a: number,\
    \ b: number): number => a - b\n    );\n    if (isEven) {\n      return sortedArray.reverse();\n\
    \    } else {\n      return sortedArray;\n    }\n  }\n}\n\nconst testCases: [number[],\
    \ number[]][] = [\n  [[], []],\n  [[1], [1]],\n  [[1, 2], [2, 1]],\n  [[2, 4,\
    \ 3, 0, 1, 5], [0, 1, 2, 3, 4, 5]],\n  [[2, 4, 3, 0, 1, 5, 6], [6, 5, 4, 3, 2,\
    \ 1, 0]],\n];\n\ntestCases.forEach((testCase, index) => {\n  const result = sort_array(testCase[0]);\n\
    \  console.log(`${index + 1}) expect ${result} to be ${testCase[1]}`);\n});",
  "  return array.length ? array.sort((a, b) => (array[0] + array[array.length - 1])\
    \ % 2 ? a - b : b - a) : array;\n}\n", "    if (array.length === 0) return array;\n\
    \    if (array.length === 1) return array;\n    const sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nexport\
    \ { sort_array };", "    let sum = array[0] + array[array.length - 1];\n    if\
    \ (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else {\n\
    \        return array.sort((a, b) => a - b);\n    }\n}\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "    if (array.length == 0)\
    \ {\n        return [];\n    }\n    let result = sort_array_rec(array);\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
