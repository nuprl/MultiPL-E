name: HumanEval_88_sort_array
language: ts
prompt: "//Given an array of non-negative integers, return a cots of the given array\
  \ after sorting,\n// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
  \ change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n\
  // [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
completions: ["    if (array.length === 0) {\n        return [];\n    }\n    let sum\
    \ = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        return\
    \ array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a, b)\
    \ => a - b);\n    }\n}\n", "    // TODO\n    if (array.length === 0) {\n     \
    \   return [];\n    }\n    if (array.length === 1) {\n        return array;\n\
    \    }\n    const firstIndex = array[0];\n    const lastIndex = array[array.length\
    \ - 1];\n    const sum = firstIndex + lastIndex;\n    if (sum % 2 === 0) {\n \
    \       const sortedArray = [...array].sort((a, b) => b - a);\n        return\
    \ sortedArray;\n    } else {\n        const sortedArray = [...array].sort((a,\
    \ b) => a - b);\n        return sortedArray;\n    }\n}\n", "    const s = array.length;\n\
    \    if (s === 0 || s === 1) {\n        return array;\n    } else {\n        let\
    \ new_array = array.slice();\n        if ((new_array[0] + new_array[s - 1]) %\
    \ 2 === 0) {\n            new_array.sort((a, b) => b - a);\n        } else {\n\
    \            new_array.sort((a, b) => a - b);\n        }\n        return new_array;\n\
    \    }\n}\n", "    const sum = array[0] + array[array.length - 1];\n    const\
    \ sorted = array.sort((a, b) => sum % 2 === 0 ? b - a : a - b);\n    return sorted;\n\
    }", "    const arraySum = array.reduce((acc, val) => acc + val, 0);\n    const\
    \ result = array.slice().sort((a, b) => arraySum % 2 === 0 ? b - a : a - b);\n\
    \    return result;\n}", "  let sum: number = array[0] + array[array.length -\
    \ 1];\n  if (sum % 2 == 0) {\n    return array.sort((a, b) => b - a);\n  } else\
    \ {\n    return array.sort((a, b) => a - b);\n  }\n}\n", "    let arr: number[]\
    \ = array.slice();\n    if (array.length == 0) {\n        return [];\n    }\n\
    \    if (array.length == 1) {\n        return [array[0]];\n    }\n    if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0) {\n        return arr.sort((a, b) => b\
    \ - a);\n    } else {\n        return arr.sort((a, b) => a - b);\n    }\n}\n",
  "  if (array.length === 0) {\n    return [];\n  } else if (array.length === 1) {\n\
    \    return array;\n  }\n  let middleArray = [];\n  let oddArray = [];\n  let\
    \ evenArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]\
    \ % 2 === 0) {\n      evenArray.push(array[i]);\n    } else {\n      oddArray.push(array[i]);\n\
    \    }\n  }\n  evenArray.sort((a, b) => b - a);\n  oddArray.sort((a, b) => a -\
    \ b);\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 === 0)\
    \ {\n      middleArray.push(evenArray.shift());\n    } else {\n      middleArray.push(oddArray.shift());\n\
    \    }\n  }\n  return middleArray;\n}\n", "  if (array.length) {\n    const isEven\
    \ = (array[0] + array[array.length - 1]) % 2 === 0;\n    return array.sort((a,\
    \ b) => (isEven ? b - a : a - b));\n  }\n  return array;\n}\n", "    // your code\
    \ goes here...\n    return array.sort((a, b) => a - b);\n}\n", "  let sum = array[0]\
    \ + array[array.length - 1];\n  if (sum % 2 === 0) {\n    return array.sort((a,\
    \ b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n",
  "    const { first, last } = { first: array[0], last: array[array.length - 1] };\n\
    \    return (first + last) % 2 === 0 ? array.sort((a, b) => b - a) : array.sort((a,\
    \ b) => a - b);\n}\n", "    if(array.length > 1){\n        const sum = array[0]\
    \ + array[array.length - 1];\n        return sum % 2 == 0 ? array.sort().reverse()\
    \ : array.sort();\n    }else{\n        return array;\n    }\n}\n", "  const condition\
    \ = array.length === 0 ? false : (array[0] + array[array.length - 1]) % 2;\n \
    \ return condition ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a);\n\
    }\n\nexport { sort_array };", "  if (array.length === 0) {\n    return [];\n \
    \ }\n  if (array.length === 1) {\n    return array;\n  }\n  let sortedArray: number[]\
    \ = [];\n  let firstIndex: number = array[0];\n  let lastIndex: number = array[array.length\
    \ - 1];\n  let sum: number = firstIndex + lastIndex;\n  if (sum % 2 === 0) {\n\
    \    sortedArray = array.sort((a, b) => b - a);\n  } else {\n    sortedArray =\
    \ array.sort((a, b) => a - b);\n  }\n  return sortedArray;\n}\n\nconsole.log(sort_array([]));\n\
    console.log(sort_array([5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    if (array.length < 2) return\
    \ array;\n    let left = [];\n    let right = [];\n    const pivot = array[0];\n\
    \    for (let i = 1; i < array.length; i++) {\n        if (array[i] < pivot) {\n\
    \            left.push(array[i]);\n        } else {\n            right.push(array[i]);\n\
    \        }\n    }\n    return (array[0] + array[array.length - 1]) % 2 ? [...sort_array(left),\
    \ pivot, ...sort_array(right)] : [...sort_array(right), pivot, ...sort_array(left)];\n\
    }\n", "    if (array.length === 0) {\n        return array;\n    }\n    if (array.length\
    \ === 1) {\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else\
    \ {\n        return array.sort((a, b) => a - b);\n    }\n}\n", "    const len\
    \ = array.length;\n    return len === 0 || len === 1 ? array :\n        array.sort((a,\
    \ b) => (a + array[len - 1]) % 2 === (b + array[len - 1]) % 2 ?\n            a\
    \ - b : b - a);\n}\n", "  const sum = array[0] + array[array.length - 1];\n  if\
    \ (sum % 2 === 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a,\
    \ b) => a - b);\n  }\n  return array;\n}\nconsole.log(sort_array([2, 4, 3, 0,\
    \ 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "  // TODO: Write\
    \ your code here\n  let sum: number = array[0] + array[array.length - 1];\n  if\
    \ (sum % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  } else {\n   \
    \ return array.sort((a, b) => a - b);\n  }\n}\n\nconsole.log(sort_array([2, 4,\
    \ 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6,7]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
