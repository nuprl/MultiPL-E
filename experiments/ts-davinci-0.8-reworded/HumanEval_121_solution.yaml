name: HumanEval_121_solution
language: ts
prompt: "//Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n\
  // >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\n\
  function solution(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i: number = 0; i < lst.length; i +=\
    \ 2) {\n        if (lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nexport function runTests(): void {\n    const inputs:\
    \ [number[], number][] = [\n        [[5, 8, 7, 1], 12],\n        [[3, 3, 3, 3,\
    \ 3], 9],\n        [[30, 13, 24, 321], 0],\n    ];\n    inputs.forEach(input =>\
    \ {\n        const answer = solution(input[0]);\n        console.log(answer ===\
    \ input[1], answer, input[1]);\n    });\n}", "  return lst.filter((v, i) => v\
    \ % 2 && i % 2 === 0).reduce((p, c) => p + c, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((_, i) => i % 2 !== 0).reduce((acc, curr)\
    \ => (curr % 2 !== 0 ? acc + curr : acc), 0);\n}\n\nexport default solution;",
  "  return lst.filter((v, i) => i % 2 == 0 && v % 2 == 1).reduce((a, v) => a + v,\
    \ 0);\n}\n", "    return lst.filter((_, idx) => idx % 2 === 0).filter(num => num\
    \ % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n", "    let result = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 ==\
    \ 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n\
    }\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    return lst.filter((num, i) =>\
    \ i % 2 === 0 && num % 2 === 1).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n        if (lst[i] % 2 === 1) sum += lst[i];\n    }\n    return sum;\n\
    }\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\n", "  return lst.filter((v, i) => i\
    \ % 2 === 0 && v % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((num, index) => num % 2 && index % 2\
    \ === 0).reduce((acc, num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8,\
    \ 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    //return lst.filter((x, i) => i % 2 === 0 && x % 2 ===\
    \ 1).reduce((a, b) => a + b, 0);\n    let sum = 0;\n    lst.forEach((x, i) =>\
    \ {\n        if (i % 2 === 0 && x % 2 === 1) {\n            sum += x;\n      \
    \  }\n    });\n    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  const result = lst.filter((element, index) => {\n    return\
    \ element % 2 !== 0 && index % 2 === 0;\n  });\n  return result.reduce((acc, current)\
    \ => acc + current, 0);\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    return lst.filter((val,\
    \ idx) => val % 2 !== 0 && idx % 2 === 0).reduce((x, y) => x + y, 0);\n}\n", " \
    \   return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((sum,\
    \ num) => sum + num);\n}\n", "  return lst.filter((num, index) => index % 2 !==\
    \ 0 && num % 2 !== 0).reduce((num, acc) => acc + num, 0);\n}\n\nexport default\
    \ solution;", "    return lst.filter((el, i) => el % 2 === 1 && i % 2 === 0).reduce((acc,\
    \ cur) => acc + cur, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let lst_even:\
    \ number[] = lst.filter((x, i) => i % 2 === 0);\n    let lst_odd: number[] = lst_even.filter(x\
    \ => x % 2 !== 0);\n    return lst_odd.reduce((x, y) => x + y, 0);\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i]\
    \ % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n   \
    \ }\n  }\n  return oddSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
