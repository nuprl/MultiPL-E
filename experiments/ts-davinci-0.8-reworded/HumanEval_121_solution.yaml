name: HumanEval_121_solution
language: ts
prompt: "//Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n\
  // >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\n\
  function solution(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i: number = 0; i < lst.length; i +=\
    \ 2) {\n        if (lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nexport function runTests(): void {\n    const inputs:\
    \ [number[], number][] = [\n        [[5, 8, 7, 1], 12],\n        [[3, 3, 3, 3,\
    \ 3], 9],\n        [[30, 13, 24, 321], 0],\n    ];\n    inputs.forEach(input =>\
    \ {\n        const answer = solution(input[0]);\n        console.log(answer ===\
    \ input[1], answer, input[1]);\n    });\n}", "  return lst.filter((v, i) => v\
    \ % 2 && i % 2 === 0).reduce((p, c) => p + c, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((_, i) => i % 2 !== 0).reduce((acc, curr)\
    \ => (curr % 2 !== 0 ? acc + curr : acc), 0);\n}\n\nexport default solution;",
  "  return lst.filter((v, i) => i % 2 == 0 && v % 2 == 1).reduce((a, v) => a + v,\
    \ 0);\n}\n", "    return lst.filter((_, idx) => idx % 2 === 0).filter(num => num\
    \ % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n", "    let result = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 ==\
    \ 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n\
    }\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    return lst.filter((num, i) =>\
    \ i % 2 === 0 && num % 2 === 1).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n        if (lst[i] % 2 === 1) sum += lst[i];\n    }\n    return sum;\n\
    }\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\n", "  return lst.filter((v, i) => i\
    \ % 2 === 0 && v % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((num, index) => num % 2 && index % 2\
    \ === 0).reduce((acc, num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8,\
    \ 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    //return lst.filter((x, i) => i % 2 === 0 && x % 2 ===\
    \ 1).reduce((a, b) => a + b, 0);\n    let sum = 0;\n    lst.forEach((x, i) =>\
    \ {\n        if (i % 2 === 0 && x % 2 === 1) {\n            sum += x;\n      \
    \  }\n    });\n    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  const result = lst.filter((element, index) => {\n    return\
    \ element % 2 !== 0 && index % 2 === 0;\n  });\n  return result.reduce((acc, current)\
    \ => acc + current, 0);\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    return lst.filter((val,\
    \ idx) => val % 2 !== 0 && idx % 2 === 0).reduce((x, y) => x + y, 0);\n}\n", " \
    \   return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((sum,\
    \ num) => sum + num);\n}\n", "  return lst.filter((num, index) => index % 2 !==\
    \ 0 && num % 2 !== 0).reduce((num, acc) => acc + num, 0);\n}\n\nexport default\
    \ solution;", "    return lst.filter((el, i) => el % 2 === 1 && i % 2 === 0).reduce((acc,\
    \ cur) => acc + cur, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let lst_even:\
    \ number[] = lst.filter((x, i) => i % 2 === 0);\n    let lst_odd: number[] = lst_even.filter(x\
    \ => x % 2 !== 0);\n    return lst_odd.reduce((x, y) => x + y, 0);\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i]\
    \ % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n   \
    \ }\n  }\n  return oddSum;\n}\n", "  return lst.filter((x,i) => i % 2 === 0 &&\
    \ x % 2 === 1).reduce((acc, x) => acc + x, 0);\n}", "  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n            count += lst[i];\n        }\n    }\n\
    \    return count;\n}\n\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\nconsole.log(solution([5, 8, 7, 1]));", "  // todo\n  return\
    \ 0;\n}\n", "  return lst.filter((val, idx) => idx % 2 == 0 && val % 2 == 1).reduce((sum,\
    \ val) => sum + val, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let sum: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 &&\
    \ lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nlet myArray: number[] = [5, 8, 7, 1];\nconsole.log(solution(myArray));\n\
    myArray = [3, 3, 3, 3, 3];\nconsole.log(solution(myArray));\nmyArray = [30, 13,\
    \ 24, 321];\nconsole.log(solution(myArray));", "  let sum = 0;\n  let index =\
    \ 0;\n  while (index < lst.length) {\n    if (index % 2 === 0 && lst[index] %\
    \ 2 !== 0) {\n      sum += lst[index];\n    }\n    index++;\n  }\n  return sum;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((num,\
    \ idx) => num % 2 && idx % 2).reduce((a, b) => a + b, 0);\n}\n", "    return lst.filter((v,\
    \ i) => v % 2 === 1 && i % 2 === 0).reduce((a, c) => a + c, 0);\n}\n", "  return\
    \ lst.filter((element, index) => {\n    return element % 2 == 1 && index % 2 ==\
    \ 0;\n  }).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    return lst.filter((n, i) => n % 2 === 1 && i %\
    \ 2 === 0).reduce((acc, cur) => acc + cur, 0);\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(solution([30,\
    \ 13, 24, 321]));\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));", "  let result = 0;\n  let counter = 0;\n  while (counter <\
    \ lst.length) {\n    if (counter % 2 === 0 && lst[counter] % 2 !== 0) {\n    \
    \  result += lst[counter];\n    }\n    counter++;\n  }\n  return result;\n}\n\n\
    export default solution;", "  return lst.filter((n, i) => i % 2 === 0 && n % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}\n\nexport default solution;", "    return\
    \ lst.filter((x, index) => index % 2 === 0 && x % 2 === 1).reduce((acc, x) =>\
    \ acc + x, 0);\n}\n\nconsole.log(solution([30, 13, 24, 321]));", "  let sum =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nexport {\
    \ solution };", "  return lst.filter((n, i) => i % 2).reduce((acc, cur) => acc\
    \ + cur, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let total = 0;\n\
    \  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 != 0) {\n   \
    \   total += lst[i];\n    }\n  }\n  return total;\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((x,i) => i % 2 != 0 && x % 2 != 0).reduce((a,b)\
    \ => a + b);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  const evens =\
    \ lst.filter((num, index) => index % 2 === 0);\n  const odds = evens.filter(num\
    \ => num % 2 !== 0);\n  return odds.reduce((total, num) => total + num, 0);\n\
    }\n\nexport default solution;", "  let solution = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      solution += lst[i];\n\
    \    }\n  }\n  return solution;\n}\n\nconst output = solution([5, 8, 7, 1]);\n\
    console.log(output);", "  return lst.filter((number, index) => index % 2 === 0\
    \ && number % 2 === 1)\n    .reduce((total, number) => total + number, 0);\n}\n\
    \nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  let total = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n    \
    \  total += lst[i];\n    }\n  }\n  return total;\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let result = 0;\n  for (let i = 0; i < lst.length; i +=\
    \ 2) {\n    if (lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 == 0 && lst[i] % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n\
    }\n\nconsole.log(solution([3, 3, 3, 3, 3]));", "    let sum: number = 0;\n   \
    \ for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 1) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  let solution\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i]\
    \ % 2 == 1) {\n      solution += lst[i];\n    }\n  }\n  return solution;\n}\n\
    console.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "  let oddIndex = 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0) {\n      if (lst[i] % 2 !== 0) {\n        result +=\
    \ lst[i];\n      }\n    }\n  }\n  return result;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let res = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n            res += lst[i];\n        }\n    }\n    return res;\n\
    }\n", "    // your code here\n    return 0;\n}", "  return lst.filter((val, i)\
    \ => i % 2 !== 0 && val % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nexport default\
    \ solution;", "  return lst.filter((number, index) => number % 2 === 1 && index\
    \ % 2 === 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((num, idx) => idx % 2 !== 0 && num %\
    \ 2 !== 0).reduce((acc, curr) => acc + curr);\n}\n\nexport default solution;",
  "    return lst.filter((v, i) => v % 2 == 1 && i % 2 == 0).reduce((a, b) => a +\
    \ b, 0);\n}\n", "  let odds: number[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      odds.push(lst[i]);\n\
    \    }\n  }\n  return odds.reduce((sum, current) => sum + current, 0);\n}\n\n\
    export default solution;", "  return lst.filter((n, i) => n % 2 === 1 && i % 2\
    \ === 0).reduce((a, b) => a + b, 0);\n}\n", "  let sum = 0;\n  let count = 0;\n\
    \  while (count < lst.length) {\n    if (count % 2 === 0 && lst[count] % 2 !==\
    \ 0) {\n      sum += lst[count];\n    }\n    count++;\n  }\n  return sum;\n}\n\
    \nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  return lst.filter((item, index)\
    \ => item % 2 === 1 && index % 2 === 0).reduce((acc, val) => acc + val, 0);\n\
    }\n", "  return lst.filter((e, i) => (i % 2 !== 0) && (e % 2 === 0)).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;", "    let counter = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] %\
    \ 2 == 1) {\n            counter += lst[i];\n        }\n    }\n    return counter;\n\
    }\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  return lst.filter((e, i) => e %\
    \ 2 && i % 2).reduce((a, b) => a + b, 0);\n}\n\nexport default solution;", " \
    \   let sum: number = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n    \
    \    if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}", "  return lst.filter((e, i) => i % 2 == 0 && e % 2 != 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;", "  let acc = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n\
    \      acc += lst[i];\n    }\n  }\n  return acc;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 == 1) {\n            count += lst[i];\n        }\n    }\n    return count;\n\
    }", "  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((s, v) =>\
    \ s + v, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 ===\
    \ 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    return lst.filter((n,\
    \ i) => n % 2 == 1 && i % 2 == 0).reduce((a, b) => a + b, 0);\n}\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i]\
    \ % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((val, ind) => ind % 2 === 0 && val\
    \ % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  return lst.filter((x, i) => i % 2 == 0 && x % 2 !=\
    \ 0).reduce((a, b) => a + b, 0);\n}\n", "    let sum: number = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((val, idx) => val % 2 === 1 && idx\
    \ % 2 === 0).reduce((prev, curr) => prev + curr);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((v, i) => v % 2 === 1 && i % 2 ===\
    \ 0).reduce((a, b) => a + b, 0);\n}\n", "    return lst.filter((x,i) => i % 2\
    \ === 0 && x % 2 !== 0).reduce((sum,x) => sum + x, 0);\n}\n", "  return lst.filter((item,\
    \ index) => item % 2 !== 0 && index % 2 === 0).reduce((prev, curr) => prev + curr,\
    \ 0);\n}\n\nexport default solution;", "    return lst.filter((e, i) => e % 2\
    \ && !(i % 2)).reduce((a, e) => a + e, 0);\n}\nconsole.log(solution([5, 8, 7,\
    \ 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13,\
    \ 24, 321]));", "  const oddLst = lst.filter((v, i) => v % 2 !== 0 && i % 2 ===\
    \ 0);\n  return oddLst.reduce((acc, v) => acc + v, 0);\n}\n\nexport function isEven(num:\
    \ number): boolean {\n  return num % 2 === 0;\n}\n\nexport function isOdd(num:\
    \ number): boolean {\n  return num % 2 !== 0;\n}\n\nexport function isPositive(num:\
    \ number): boolean {\n  return num > 0;\n}\n\nexport function isNegative(num:\
    \ number): boolean {\n  return num < 0;\n}\n\nexport function isZero(num: number):\
    \ boolean {\n  return num === 0;\n}\n\nexport function isEvenAt(lst: number[],\
    \ index: number): boolean {\n  return isEven(lst[index]);\n}\n\nexport function\
    \ isOddAt(lst: number[], index: number): boolean {\n  return isOdd(lst[index]);\n\
    }\n\nexport function sum(lst: number[]): number {\n  return lst.reduce((acc, v)\
    \ => acc + v, 0);\n}\n\nexport function solution2(lst: number[]): number {\n \
    \ const evenPositions = [...Array(lst.length).keys()].filter(isEven);\n  const\
    \ oddAtEvenPositions = lst.filter((v, i) => isOdd(v) && evenPositions.includes(i));\n\
    \  return sum(oddAtEvenPositions);\n}\n\nexport function solution3(lst: number[]):\
    \ number {\n  const evenPositions = [...Array(lst.length).keys()].filter(isEven);\n\
    \  const oddAtEvenPositions = lst.filter((v, i) => isOdd(v) && evenPositions.includes(i));\n\
    \  return sum(oddAtEvenPositions);\n}\n\nexport function solution4(lst: number[]):\
    \ number {\n  const evenPositions = [...Array(lst.length).keys()].filter(isEven);\n\
    \  const oddAtEvenPositions = lst.filter((v, i) => isOdd(v) &&", "  return lst.filter((x,\
    \ i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) => a + b, 0);\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2)\
    \ {\n    if (lst[i] % 2) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));", "  let sum = 0;\n  lst.forEach((element,\
    \ index) => {\n    if (index % 2 === 0 && element % 2 !== 0) {\n      sum += element;\n\
    \    }\n  });\n  return sum;\n}\n", "  return lst.filter((x, i) => i % 2 === 0\
    \ && x % 2 !== 0).reduce((x, y) => x + y, 0);\n}\n\nexport function runTests():\
    \ void {\n  const input = [5, 8, 7, 1];\n  const result = solution(input);\n \
    \ console.log(result);\n}", "  let total: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      total += lst[i];\n\
    \    }\n  }\n  return total;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((_,\
    \ i) => i % 2 !== 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nexport default\
    \ solution;", "  // Uncomment this line to write code in this editor\n  let result\
    \ = 0;\n  let even = false;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (even) {\n      result += lst[i];\n    }\n    even = !even;\n  }\n  return result;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    return lst.filter((e,i) => i\
    \ % 2 === 0 && e % 2 !== 0).reduce((acc, e) => acc + e, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let count = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 0 && lst[i] % 2 != 0) {\n      count += lst[i];\n    }\n\
    \  }\n  return count;\n}\n\nexport default solution;", "    return lst.filter((x,\
    \ i) => x % 2 == 1 && i % 2 == 0).reduce((x, y) => x + y, 0);\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((x, i) => x % 2 === 1 && i % 2 ===\
    \ 0).reduce((s, v) => s + v, 0);\n}\n", "  let result = 0;\n  let evenIndex =\
    \ 0;\n  while (evenIndex < lst.length) {\n    if (lst[evenIndex] % 2 !== 0) {\n\
    \      result += lst[evenIndex];\n    }\n    evenIndex += 2;\n  }\n  return result;\n\
    }\n", "    return lst.filter((val, ind) => ind % 2 === 0 && val % 2 === 1).reduce((a,\
    \ b) => a + b);\n}", "    return lst.filter((el, i) => el % 2 !== 0 && i % 2 ===\
    \ 0).reduce((acc, el) => acc + el, 0);\n}", "    let counter = 0;\n    lst.forEach((v,\
    \ i) => {\n        if (i % 2 === 0 && v % 2 !== 0) counter += v;\n    });\n  \
    \  return counter;\n}\n", "    return lst.filter((value, index) => index % 2 ===\
    \ 0 && value % 2 !== 0).reduce((a, b) => a + b, 0);\n}", "    // Write your code\
    \ here\n    return 0;\n}\n", "    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i+=2) {\n        if (lst[i] % 2 === 1) {\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 &&\
    \ lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nexport\
    \ default solution;", "    return lst.filter((v, i) => i % 2 == 0 && v % 2 !=\
    \ 0).reduce((a, b) => a + b, 0);\n}\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}", "  let result\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i]\
    \ % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const element =\
    \ lst[i];\n    if (i % 2 === 0 && element % 2 !== 0) {\n      sum += element;\n\
    \    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) sum += lst[i];\n    }\n    return sum;\n}\n\nlet test1 = [5, 8, 7,\
    \ 1];\nlet test2 = [3, 3, 3, 3, 3];\nlet test3 = [30, 13, 24, 321];\nconsole.log(solution(test1));\n\
    console.log(solution(test2));\nconsole.log(solution(test3));", "  // init result\n\
    \  let result = 0;\n  // go through the list\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    // get number\n    const num = lst[i];\n    // if the number is\
    \ odd, and at an even position, add it to the result\n    if (num % 2 === 1 &&\
    \ i % 2 === 0) {\n      result += num;\n    }\n  }\n  // return the result\n \
    \ return result;\n}\n", "  // TODO: Add your code here\n  return 0;\n}\n\nexport\
    \ { solution };", "    let new_lst = []\n    lst.forEach((value, index) => {\n\
    \        if(index % 2 !== 0 && value % 2 === 1) {\n            new_lst.push(value)\n\
    \        }\n    })\n    return new_lst.reduce((a,b) => a + b, 0)\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30,\
    \ 13, 24, 321]))", "    return lst.filter((el, index) => index % 2 == 0 && el\
    \ % 2 == 1).reduce((acc, curr) => acc + curr, 0);\n}\n\nexport default solution;",
  "  return lst.filter((item, index) => index % 2 && item % 2).reduce((a, b) => a\
    \ + b, 0);\n}\n", "    return lst.filter((num, index) => index % 2 == 0 && num\
    \ % 2 != 0).reduce((sum, num) => sum + num);\n}\n", "  return lst.filter((element,\
    \ index) => element % 2 != 0 && index % 2 === 0).reduce((sum, element) => sum\
    \ + element, 0);\n}\n\nexport default solution;", "    let oddSum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 !==\
    \ 0) {\n            oddSum += lst[i];\n        }\n    }\n    return oddSum;\n\
    }\n", "    let result = 0;\n    lst.forEach((num, index) => {\n        if (index\
    \ % 2 !== 0 && num % 2 !== 0) {\n            result += num;\n        }\n    });\n\
    \    return result;\n}\n", "  let oddSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n\
    \    }\n  }\n  return oddSum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((item,\
    \ index) => index % 2 === 0 && item % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\
    \nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    let sum = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 == 1) sum\
    \ += lst[i];\n    }\n    return sum;\n}\n", "    let oddEvenSum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 ===\
    \ 1) {\n            oddEvenSum += lst[i];\n        }\n    }\n    return oddEvenSum;\n\
    }\n", "  return lst.filter((e, i) => i % 2 !== 0 && e % 2 !== 0).reduce((a, b)\
    \ => a + b);\n}\n", "  return lst.filter((x, i) => x % 2 == 1 && i % 2 == 0).reduce((a,\
    \ b) => a + b);\n}\n\nexport default solution;", "  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  return lst.filter((a,\
    \ i) => a % 2 === 1 && i % 2 === 0).reduce((x, y) => x + y, 0);\n}\n\nexport default\
    \ solution;", "    return lst.filter((num, index) => index % 2 != 0 && num % 2\
    \ != 0).reduce((prev, curr) => prev + curr);\n}", "  return lst.filter((e, i)\
    \ => i % 2 !== 0 && e % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n", "    // Your\
    \ code here...\n}\n", "  let ans = 0;\n  for (let i = 0; i < lst.length; i +=\
    \ 2) {\n    if (lst[i] % 2 == 1) {\n      ans += lst[i];\n    }\n  }\n  return\
    \ ans;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3,\
    \ 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((v,\
    \ i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) => a + b, 0);\n}\n\nexport default\
    \ solution;", "  let s = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n      s += lst[i];\n    }\n  }\n  return\
    \ s;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3,\
    \ 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let i = 0;\n\
    \    let oddElements = 0;\n    let even = false;\n    for (const i of lst) {\n\
    \        if (even) {\n            if (i % 2 == 1) {\n                oddElements\
    \ += i;\n            }\n        }\n        even = !even;\n    }\n    return oddElements;\n\
    }\nconsole.log(solution([1, 0, 3, 1, 0, 3]));\nconsole.log(solution([1, 0, 3,\
    \ 1, 0, 3, 9, 1, 2, 5, 9, 4, 4, 1, 9, 0, 2, 5, 9, 4, 4, 5, 2, 4, 8, 5, 9, 8, 2,\
    \ 5, 0, 3, 8, 5, 9, 8, 2, 5, 0, 3, 2, 5, 9, 1, 2, 5, 9, 4, 4, 1, 9, 0, 2, 5, 9,\
    \ 4, 4, 5, 2, 4, 8, 5, 9, 8, 2, 5, 0, 3, 8, 5, 9, 8, 2, 5, 0, 3, 2, 5, 9, 1, 2,\
    \ 5, 9, 4, 4, 1, 9, 0, 2, 5, 9, 4, 4, 5, 2, 4, 8, 5, 9, 8, 2, 5, 0, 3, 8, 5, 9,\
    \ 8, 2, 5, 0, 3, 2, 5, 9, 1, 2, 5, 9, 4, 4, 1, 9, 0, 2, 5, 9, 4, 4, 5, 2, 4, 8,\
    \ 5, 9, 8, 2, 5, 0, 3, 8, 5, 9, 8, 2, 5, 0, 3, 2, 5, 9, 1, 2, 5, 9, 4, 4, 1, 9,\
    \ 0, 2, 5, 9, 4, 4, 5, 2, 4, 8, 5, 9, 8, 2, 5, 0, 3, 8, 5, 9, 8, 2, 5, 0, 3, 2,\
    \ 5, 9, 1, 2, 5, 9, 4, 4, 1, 9, 0, 2, 5, 9,", "  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 == 1) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "    return lst.filter((e,i) =>\
    \ i % 2 === 0 && e % 2 !== 0).reduce((a,b) => a + b, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\nconsole.log(solution([5, 8, 7, 1]));", "    let oddSum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 == 1) {\n            oddSum += lst[i];\n        }\n    }\n    return oddSum;\n\
    }\n", "    return lst.filter((x, index) => x % 2 !== 0 && index % 2 === 0).reduce((sum,\
    \ x) => sum + x, 0);\n}\n", "  return lst.filter((_, i) => i % 2 === 0).filter(n\
    \ => n % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nexport default solution;",
  "  return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  const lstSize\
    \ = lst.length;\n  let sum = 0;\n  for (let i = 0; i < lstSize; i += 2) {\n  \
    \  if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "    let oddElementsInEvenPosition: number = 0;\n    lst.forEach((elem,\
    \ index) => {\n        if (index % 2 === 0 && elem % 2 === 1) {\n            oddElementsInEvenPosition\
    \ += elem;\n        }\n    });\n    return oddElementsInEvenPosition;\n}\nexport\
    \ { solution };", "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n\
    \    if (lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "    let arr: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            arr.push(lst[i]);\n\
    \        }\n    }\n    return arr.reduce((a, b) => a + b, 0);\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((num, i) => num % 2 === 1 && i % 2\
    \ === 0).reduce((a, b) => a + b, 0);\n}\n", "    let result = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0)\
    \ {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n\
    console.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    let result = 0;\n    for (let\
    \ i = 0; i < lst.length; i+=2) {\n        if (lst[i] % 2 === 1) {\n          \
    \  result += lst[i];\n        }\n    }\n    return result;\n}", "  let answer\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 !== 0) {\n      answer += lst[i];\n    }\n  }\n  return answer;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let result = 0;\n  for (let i = 0; i < lst.length; i +=\
    \ 2) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n", "  const oddPositions = lst.filter((num, i) => {\n    return\
    \ i % 2 === 0;\n  });\n  return oddPositions.reduce((sum, num) => {\n    return\
    \ sum + num;\n  }, 0);\n}\n", "    return lst.filter((e, i) => i % 2 === 0 &&\
    \ e % 2 !== 0).reduce((a, b) => a + b);\n}\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "  const [res, lngth] = [0, lst.length];\n  for (let i = 0; i < lngth; i += 2) {\n\
    \    if (lst[i] % 2 === 1) {\n      res += lst[i];\n    }\n  }\n  return res;\n\
    }\n\nexport default solution;", "    let total = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            total +=\
    \ lst[i];\n        }\n    }\n    return total;\n}\n", "  let oddList: number[]\
    \ = [];\n  let index = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 1 &&\
    \ index % 2 === 0) {\n      oddList.push(num);\n    }\n    index++;\n  });\n \
    \ return oddList.reduce((sum, num) => sum + num, 0);\n}\n\nexport { solution };",
  "  // TODO: implement this solution\n  return lst.filter((_, i) => i % 2 === 0).filter(item\
    \ => item % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n", "  return lst.filter((v,\
    \ i) => v % 2 === 1 && i % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nexport default\
    \ solution;", "  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (i % 2 == 0 && lst[i] % 2 == 1) {\n      oddSum += lst[i];\n    }\n  }\n\
    \  return oddSum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));", "    let sum =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 === 1) sum += lst[i];\n    }\n    return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  return lst.filter((e, index) => (index + 1) % 2 == 0 &&\
    \ e % 2 == 1).reduce((acc, e) => acc + e, 0);\n}\n\nconsole.log(solution([5, 8,\
    \ 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((n, i) => n % 2 === 1 && i % 2 ===\
    \ 0).reduce((total, current) => total + current, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3, 3, 3])); // 9\nconsole.log(solution([30,\
    \ 13, 24, 321])); // 0", "  return lst.filter((e, i) => i % 2 === 0 && e % 2 ===\
    \ 1).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 === 1) sum += lst[i];\n    }\n    return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nlet lst1 = [5, 8, 7, 1];\nlet lst2 = [3, 3, 3, 3, 3];\nlet lst3 = [30, 13,\
    \ 24, 321];\n\nconsole.log(solution(lst1));\nconsole.log(solution(lst2));\nconsole.log(solution(lst3));",
  "  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) => a +\
    \ b, 0);\n}\n", "  let i = 0,\n    j = 0,\n    answer = 0;\n  for (i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 == 0) {\n      if (lst[i] % 2 == 1) {\n  \
    \      answer += lst[i];\n      }\n    }\n  }\n  return answer;\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let odd: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      odd += lst[i];\n \
    \   }\n  }\n  return odd;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let counter\
    \ = 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ counter++;\n        if (counter % 2 === 0 && lst[i] % 2 !== 0) {\n         \
    \   sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nexport { solution\
    \ };", "  let x: number = 0;\n  let y: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      x += lst[i];\n    } else {\n      y +=\
    \ lst[i];\n    }\n  }\n  return x - y;\n}\nconsole.log(solution([5, 8, 7, 1]));\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 &&\
    \ lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  return lst.filter((v, i) => v % 2 && i % 2 === 0).reduce((a, b) => a + b, 0);\n\
    }\nconsole.log(solution([5, 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3,\
    \ 3, 3])); // 9\nconsole.log(solution([30, 13, 24, 321])); // 0", "    return\
    \ lst.filter((item, index) => index % 2 === 0 && item % 2 === 1).reduce((a, b)\
    \ => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let sum: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 &&\
    \ lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3,\
    \ 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((num,\
    \ i) => i % 2 !== 0 && num % 2 !== 0).reduce((acc, curr) => acc + curr, 0);\n\
    }\n\nconsole.log(solution([5, 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3,\
    \ 3, 3])); // 9\nconsole.log(solution([30, 13, 24, 321])); // 0", "  return lst.filter((el,\
    \ ind) => el % 2 !== 0 && ind % 2 === 0).reduce((acc, cur) => acc + cur, 0);\n\
    }\n\nexport default solution;", "    return lst.filter((item, index) => item %\
    \ 2 && index % 2 === 0).reduce((prev, curr) => prev + curr, 0);\n}", "  let sum\
    \ = 0;\n  lst.forEach((value, index) => {\n    if (index % 2 == 0 && value % 2\
    \ == 1) {\n      sum += value;\n    }\n  });\n  return sum;\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((x, i) => i % 2 === 0 && x % 2 !==\
    \ 0).reduce((sum, n) => sum + n, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "    return lst.filter((n, i) => (i % 2) == 0 && (n % 2) != 0).reduce((a,b) => a\
    \ + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  return lst.filter((num,\
    \ index) => num % 2 === 1 && index % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\
    \nexport function runTests(): void {\n  const inputs = [\n    [5, 8, 7, 1],\n\
    \    [3, 3, 3, 3, 3],\n    [30, 13, 24, 321],\n  ];\n\n  inputs.forEach(input\
    \ => {\n    const answer = solution(input);\n    console.log(answer);\n  });\n\
    }", "    return lst.filter((e,i) => i % 2 !== 0 && e % 2 !== 0).reduce((acc, n)\
    \ => acc + n, 0);\n}\n\nexport default solution;", "    // let result = 0;\n \
    \   // for (let i = 0; i < lst.length; i++) {\n    //     if (i % 2 !== 0 && lst[i]\
    \ % 2 !== 0) {\n    //         result += lst[i];\n    //     }\n    // }\n   \
    \ // return result;\n    return lst.reduce((acc, curr, i) => i % 2 === 0 && curr\
    \ % 2 !== 0 ? acc + curr : acc, 0);\n}\n\nlet myArr = [8, 3, 5, 6, 7, 3, 1, 0,\
    \ 4, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 10, 11, 1, 0, 5, 7, 2, 3, 2, 1, 2, 6, 2, 7,\
    \ 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4,\
    \ 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7,\
    \ 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1,\
    \ 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7,\
    \ 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4,\
    \ 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7, 2, 1, 2, 7, 2, 4, 2, 7,\
    \ 2, 1, 2", "    let result = 0;\n    for (let i = 0; i < lst.length; i+=2) {\n\
    \        if (lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n \
    \   }\n    return result;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let oddSum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 &&\
    \ lst[i] % 2 !== 0) {\n            oddSum += lst[i];\n        }\n    }\n    return\
    \ oddSum;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3,\
    \ 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let count = 0;\n\
    \    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 != 0) {\n\
    \            count += lst[i];\n        }\n    }\n    return count;\n}\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 === 0 && lst[i] % 2 === 1) sum += lst[i];\n    }\n    return\
    \ sum;\n}\n", "    return lst.filter((num, index) => index % 2 == 0 && num % 2\
    \ != 0).reduce((acc, curr) => acc + curr, 0);\n}\n", "  return lst.filter((el,\
    \ i) => i % 2 === 0 && el % 2 === 1).reduce((acc, cur) => acc + cur, 0);\n}\n\n\
    export default solution;", "    let oddSum = 0;\n    lst.forEach((element, index)\
    \ => {\n        if (index % 2 === 0 && element % 2 !== 0) {\n            oddSum\
    \ += element;\n        }\n    });\n    return oddSum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "    return lst.filter((x, i) => i % 2 === 0 && x % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "  return lst.filter((x, index) => x % 2 == 1 && index % 2 == 0).reduce((x, y) =>\
    \ x + y, 0);\n}\n", "    return lst.filter((e, i) => e % 2 !== 0 && i % 2 ===\
    \ 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\n\
    console.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));",
  "  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n}\n\n\
    console.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    let sum: number = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 !==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));", "  return lst.filter((n,\
    \ idx) => n % 2 && idx % 2 === 0).reduce((acc, cur) => acc + cur, 0);\n}\n\nexport\
    \ default solution;", "  let sum = 0;\n  for (let i = 0; i < lst.length; i +=\
    \ 2) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nexport default solution;"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
