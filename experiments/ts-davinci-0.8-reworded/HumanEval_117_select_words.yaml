name: HumanEval_117_select_words
language: ts
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns an array of all words from string s that contain\
  \ exactly \n// n consonants, in order these words appear in the string s.\n// If\
  \ the string s is empty then the function should return an empty array.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"\
  Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple\
  \ white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"\
  ]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s:\
  \ string, n: number): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
  \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
  \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple\
  \ white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
  ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
  \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
  d\", \"f\"]);\n}\n\ntest();"
completions: ["    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const res: string[]\
    \ = [];\n    const words = s.split(' ');\n    words.forEach(word => {\n      \
    \  let consonants = 0;\n        for (let i = 0; i < word.length; i++) {\n    \
    \        if (!vowels.includes(word[i])) {\n                consonants++;\n   \
    \         }\n        }\n        if (consonants === n) {\n            res.push(word);\n\
    \        }\n    });\n    return res;\n}\n", "    //assume the input string contains\
    \ only letters and spaces\n    const arr = s.split(\" \");\n    return arr.filter(word\
    \ => get_count(word) === n);\n}\n", "    let x = s.split(\" \");\n    let res\
    \ = [];\n    for (let i = 0; i < x.length; i++) {\n        let cons = 0;\n   \
    \     for (let j = 0; j < x[i].length; j++) {\n            if (x[i][j] !== \"\
    a\" && x[i][j] !== \"e\" && x[i][j] !== \"i\" && x[i][j] !== \"o\" && x[i][j]\
    \ !== \"u\") {\n                cons++;\n            }\n        }\n        if\
    \ (cons === n) {\n            res.push(x[i]);\n        }\n    }\n    return res;\n\
    }\n", "    let words: string[] = s.split(' ');\n    let results: string[] = [];\n\
    \    let consonants: string = 'bcdfghjklmnpqrstvwxyz';\n    let countConsonants:\
    \ number = 0;\n    for (let i: number = 0; i < words.length; i++) {\n        countConsonants\
    \ = 0;\n        for (let j: number = 0; j < words[i].length; j++) {\n        \
    \    if (consonants.indexOf(words[i][j]) > -1) {\n                countConsonants++;\n\
    \            }\n        }\n        if (countConsonants === n) {\n            results.push(words[i]);\n\
    \        }\n    }\n    return results;\n}\n\ndescribe('select_words', () => {\n\
    \    it('should return an array of all words from string s that contain exactly\
    \ n consonants, in order these words appear in the string s', () => {\n      \
    \  assert.deepEqual(select_words(\"Mary had a little lamb\", 4), [\"little\"]);\n\
    \        assert.deepEqual(select_words(\"Mary had a little lamb\", 3), [\"Mary\"\
    , \"lamb\"]);\n        assert.deepEqual(select_words(\"simple white space\", 2),\
    \ []);\n        assert.deepEqual(select_words(\"Hello world\", 4), [\"world\"\
    ]);\n        assert.deepEqual(select_words(\"Uncle sam\", 3), [\"Uncle\"]);\n\
    \    });\n});", "    let res: string[] = [];\n    let vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n    let words = s.split(\" \");\n    words.forEach(w\
    \ => {\n        let c = 0;\n        for (let i = 0; i < w.length; i++) {\n   \
    \         if (!vowels.includes(w[i])) c++;\n        }\n        if (c === n) res.push(w);\n\
    \    });\n    return res;\n}\n", "  let consString = s.replace(/[aeiou]/g, '');\n\
    \  if (consString.length === 0) {\n    return [];\n  }\n  let words = s.split('\
    \ ');\n  let results = [];\n  words.forEach(function(word) {\n    let consWord\
    \ = word.replace(/[aeiou]/g, '');\n    if (consWord.length === n) {\n      results.push(word);\n\
    \    }\n  });\n  return results;\n}", "    let result: string[] = [];\n    s.split(\"\
    \ \").forEach(str => {\n        if (str.match(/[qwrtpsdfghjklzxcvbnm]/gi) !==\
    \ null && str.match(/[qwrtpsdfghjklzxcvbnm]/gi).length === n) {\n            result.push(str);\n\
    \        }\n    });\n    return result;\n}\n", "    let arr = s.split(' ');\n\
    \    let results = [];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for\
    \ (let word of arr) {\n        let letters = word.split('');\n        let count\
    \ = 0;\n        for (let letter of letters) {\n            if (!vowels.includes(letter))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            results.push(word);\n        }\n    }\n    return results;\n\
    }\n", "    let words: string[] = s.split(' ');\n    let result: string[] = [];\n\
    \    for (let word of words) {\n        if (countVowels(word) === n) {\n     \
    \       result.push(word);\n        }\n    }\n    return result;\n}\nconsole.log(select_words(\"\
    Hello world\", 4));\n", "  const words = s.split(' ');\n  return words.filter(w\
    \ => countConsonants(w) === n);\n}\n", "    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    const words = s.split(' ');\n    const result = [];\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let currentWord = words[i];\n     \
    \   let count = 0;\n        for (let j = 0; j < currentWord.length; j++) {\n \
    \           if (!vowels.includes(currentWord[j])) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(currentWord);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));", "    //  let\
    \ words: string[] = s.split(\" \");\n    //  let consonants: string[] = [];\n\
    \    //  for (let i = 0; i < words.length; i++) {\n    //      let numberOfConsonants:\
    \ number = 0;\n    //      for (let j = 0; j < words[i].length; j++) {\n    //\
    \          if (words[i][j] !== \"a\" && words[i][j] !== \"i\" && words[i][j] !==\
    \ \"u\" && words[i][j] !== \"e\" && words[i][j] !== \"o\") {\n    //         \
    \     numberOfConsonants += 1;\n    //          }\n    //      }\n    //     \
    \ if (numberOfConsonants === n) {\n    //          consonants.push(words[i]);\n\
    \    //      }\n    //  }\n    //  return consonants;\n    // return s.split(\"\
    \ \").filter(w => w.match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n);\n    return\
    \ s.split(\" \").filter(word => word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length\
    \ === n);\n}\n", "    const output: string[] = [];\n    const vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    s.split(' ').forEach(word => {\n        let wordConsonantsCount\
    \ = 0;\n        word.split('').forEach(letter => {\n            if (!vowels.includes(letter))\
    \ wordConsonantsCount++;\n        });\n        if (wordConsonantsCount === n)\
    \ output.push(word);\n    });\n    return output;\n}\n", "    if (!s) return [];\n\
    \    const words = s.split(' ');\n    const result = [];\n    for (let i = 0;\
    \ i < words.length; i++) {\n        const word = words[i];\n        const vowels\
    \ = word.match(/[aeiouAEIOU]/g);\n        if (vowels && vowels.length === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n", " \
    \ if (s.length < 1) {\n    return [];\n  }\n  let consonants: number;\n  let words\
    \ = s.split(\" \");\n  let result: string[] = [];\n  words.forEach(word => {\n\
    \    consonants = 0;\n    word.split(\"\").forEach(letter => {\n      if (letter.match(/[bcdfghjklmnpqrstvwxyz]/i))\
    \ {\n        consonants++;\n      }\n    });\n    if (consonants === n) {\n  \
    \    result.push(word);\n    }\n  });\n  return result;\n}\n", "  const words\
    \ = s.split(\" \");\n  const result = [];\n  const vowels = \"aeiou\";\n  words.forEach(word\
    \ => {\n    const filtered = word.split(\"\").filter(char => !vowels.includes(char));\n\
    \    if (filtered.length === n) {\n      result.push(word);\n    }\n  });\n  return\
    \ result;\n}\n", "    let input = s.split(\" \");\n    let output = [];\n    let\
    \ consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for (let i = 0; i < input.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < input[i].length;\
    \ j++) {\n            if (consonants.includes(input[i][j].toLowerCase())) {\n\
    \                count++;\n            }\n        }\n        if (count === n)\
    \ {\n            output.push(input[i]);\n        }\n    }\n    return output;\n\
    }\n", "  let result: string[] = [];\n  const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  const words = s.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n\
    \    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      for\
    \ (let k = 0; k < consonants.length; k++) {\n        if (words[i][j] === consonants[k])\
    \ {\n          count++;\n        }\n      }\n    }\n    if (count === n) {\n \
    \     result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "  const words\
    \ = s.split(' ');\n  return words.filter(x => x.replace(/[aeiou]/gi, '').length\
    \ === n);\n}\n", "    const consonants = /[qwrtpsdfghjklzxcvbnm]/gi;\n    const\
    \ words = s.split(' ');\n    return words.filter(w => {\n        return (w.match(consonants)\
    \ || []).length === n;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
