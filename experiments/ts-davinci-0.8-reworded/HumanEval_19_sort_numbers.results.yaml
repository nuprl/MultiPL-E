language: ts
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let numArray = numbers.split(\"\
    \ \");\n  const results: number[] = [];\n  const numDict = {\n    zero: 0,\n \
    \   one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  for (let i = 0; i < numArray.length;\
    \ i++) {\n    results.push(numDict[numArray[i]]);\n  }\n  results.sort();\n  const\
    \ stringResults: string[] = [];\n  for (let j = 0; j < results.length; j++) {\n\
    \    for (let key in numDict) {\n      if (numDict[key] === results[j]) {\n  \
    \      stringResults.push(key);\n      }\n    }\n  }\n  return stringResults.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // const numberMap = {\n\
    \    //     'zero': 0,\n    //     'one': 1,\n    //     'two': 2,\n    //   \
    \  'three': 3,\n    //     'four': 4,\n    //     'five': 5,\n    //     'six':\
    \ 6,\n    //     'seven': 7,\n    //     'eight': 8,\n    //     'nine': 9\n \
    \   // };\n    const nums = numbers.split(' ');\n    nums.sort(function (a, b)\
    \ {\n        if (a.length !== b.length) {\n            return a.length - b.length;\n\
    \        }\n        return a.localeCompare(b);\n    });\n    return nums.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five nine three'\n\
    \nshould loosely deep-equal\n\n'three five nine'\n    at test (/tmp/tmphh16349d.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmphh16349d.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = ['zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  const nums_array\
    \ = numbers.split(' ');\n  const nums_with_idx = nums_array.map(x => nums.indexOf(x));\n\
    \  const sorted_idx = nums_with_idx.sort((a, b) => a - b);\n  const sorted_nums\
    \ = sorted_idx.map(x => nums[x]);\n  return sorted_nums.join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numArray = numbers.split(\"\
    \ \");\n    numArray.sort(numSort);\n    return numArray.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvgjoz6e0.ts(8,19): error TS2304: Cannot find name
    ''numSort''.

    '
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const digitToOrdinal = {\n\
    \        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n\
    \        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split(' ').sort((a,\
    \ b) => digitToOrdinal[a] - digitToOrdinal[b]).join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  //split the string into an\
    \ array \n  //sort numbers based on the index in the sorted array\n  let sorted:\
    \ string = \"\";\n  let arr_numbers: string[] = numbers.split(\" \");\n  let sorted_arr:\
    \ string[] = [];\n  //this is a loop that iterates the length of the arr_numbers\
    \ array.\n  for (let i: number = 0; i < arr_numbers.length; i++) {\n    if (numbers_map.has(arr_numbers[i]))\
    \ {\n      sorted_arr.push(numbers_map.get(arr_numbers[i]));\n    }\n  }\n  let\
    \ lowest: number = sorted_arr[0];\n  for (let i: number = 0; i < sorted_arr.length;\
    \ i++) {\n    for (let j: number = 0; j < sorted_arr.length; j++) {\n      if\
    \ (sorted_arr[j] < lowest) {\n        lowest = sorted_arr[j];\n      }\n    }\n\
    \    sorted = sorted + lowest + \" \";\n    sorted_arr.splice(sorted_arr.indexOf(lowest),\
    \ 1);\n    lowest = sorted_arr[0];\n  }\n  //return the sorted array as a string.\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg9ikxz96.ts(14,9): error TS2304: Cannot find name
    ''numbers_map''.

    ../../../../../tmp/tmpg9ikxz96.ts(15,23): error TS2304: Cannot find name ''numbers_map''.

    ../../../../../tmp/tmpg9ikxz96.ts(18,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpg9ikxz96.ts(21,11): error TS2365: Operator ''<'' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpg9ikxz96.ts(22,9): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpg9ikxz96.ts(26,42): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpg9ikxz96.ts(27,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = numbers.split(\"\
    \ \");\n  const result = [];\n  for (let i = 0; i < 10; i++) {\n    nums.forEach(num\
    \ => {\n      if (num === \"zero\" && i === 0) {\n        result.push(num);\n\
    \      } else if (num === \"one\" && i === 1) {\n        result.push(num);\n \
    \     } else if (num === \"two\" && i === 2) {\n        result.push(num);\n  \
    \    } else if (num === \"three\" && i === 3) {\n        result.push(num);\n \
    \     } else if (num === \"four\" && i === 4) {\n        result.push(num);\n \
    \     } else if (num === \"five\" && i === 5) {\n        result.push(num);\n \
    \     } else if (num === \"six\" && i === 6) {\n        result.push(num);\n  \
    \    } else if (num === \"seven\" && i === 7) {\n        result.push(num);\n \
    \     } else if (num === \"eight\" && i === 8) {\n        result.push(num);\n\
    \      } else if (num === \"nine\" && i === 9) {\n        result.push(num);\n\
    \      }\n    });\n  }\n  return result.join(\" \");\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums = numbers.split('\
    \ ');\n    nums.sort(function(a, b) {\n        return Number(a) - Number(b);\n\
    \    });\n    return nums.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five zero four\
    \ seven nine eight'\n\nshould loosely deep-equal\n\n'zero four five seven eight\
    \ nine'\n    at test (/tmp/tmpo0nksdum.js:19:12)\n    at Object.<anonymous> (/tmp/tmpo0nksdum.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five zero\
    \ four seven nine eight',\n  expected: 'zero four five seven eight nine',\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const number_order = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n  const nums = numbers.split(\" \");\n  const sorted_nums = nums.sort((a,\
    \ b) => number_order.indexOf(a) - number_order.indexOf(b));\n  return sorted_nums.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numbers_string = numbers.split(\"\
    \ \");\n    let numbers_digit = numbers_string.map(x => convert_num_to_digit(x));\n\
    \    numbers_digit.sort((a, b) => a - b);\n    let numbers_string_ordered = numbers_digit.map(x\
    \ => convert_digit_to_num(x));\n    return numbers_string_ordered.join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj1ww704i.ts(8,49): error TS2304: Cannot find name
    ''convert_num_to_digit''.

    ../../../../../tmp/tmpj1ww704i.ts(10,57): error TS2304: Cannot find name ''convert_digit_to_num''.

    '
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) =>\n      words_to_numbers[a] > words_to_numbers[b] ?\
    \ 1 : -1\n    )\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzbpj0u3a.ts(10,7): error TS2304: Cannot find name
    ''words_to_numbers''.

    ../../../../../tmp/tmpzbpj0u3a.ts(10,29): error TS2304: Cannot find name ''words_to_numbers''.

    '
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums = numbers.split('\
    \ ');\n    const map = new Map([\n        ['zero', 0],\n        ['one', 1],\n\
    \        ['two', 2],\n        ['three', 3],\n        ['four', 4],\n        ['five',\
    \ 5],\n        ['six', 6],\n        ['seven', 7],\n        ['eight', 8],\n   \
    \     ['nine', 9],\n    ]);\n    const nums2 = nums.map(n => map.get(n));\n  \
    \  const sorted = nums2.sort((a, b) => a - b);\n    const words = sorted.map(n\
    \ => [...map.entries()].find(e => e[1] === n)[0]);\n    return words.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3_ifnc6w.ts(8,21): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    ../../../../../tmp/tmp3_ifnc6w.ts(22,54): error TS2339: Property ''find'' does
    not exist on type ''any[]''.

    '
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numMap = {\n     \
    \   'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n  \
    \      'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    let numArr = numbers.split('\
    \ ');\n    let res = numArr.sort((a, b) => {\n        return numMap[a] - numMap[b];\n\
    \    });\n    return res.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = numbers.split(\"\
    \ \");\n  return nums.sort((a, b) => {\n    return toNumber(a) - toNumber(b);\n\
    \  }).join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmenmxvxs.ts(9,12): error TS2552: Cannot find name
    ''toNumber''. Did you mean ''numbers''?

    ../../../../../tmp/tmpmenmxvxs.ts(9,26): error TS2552: Cannot find name ''toNumber''.
    Did you mean ''numbers''?

    '
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const num_map = {\n    \
    \    zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four:\
    \ 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n\
    \        nine: 9\n    };\n    const nums = numbers.split(\" \").map(s => num_map[s]);\n\
    \    return nums.sort((a, b) => a - b).map(i => ({0: \"zero\", 1: \"one\", 2:\
    \ \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8:\
    \ \"eight\", 9: \"nine\"}[i])).join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(' ').sort((a,\
    \ b) => {\n        const numberals = ['zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n        return numberals.indexOf(a) - numberals.indexOf(b);\n\
    \    }).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) =>\n      [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"].indexOf(a) -\n      [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"].indexOf(b)\n    )\n    .join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) => number_to_number_sort(a, b))\n    .join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv65368gh.ts(9,21): error TS2304: Cannot find name
    ''number_to_number_sort''.

    '
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  // const value = 0;\n  const\
    \ splitArray = numbers.split(\" \");\n  // console.log(splitArray);\n  const numberArray\
    \ = [...splitArray];\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two:\
    \ 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n\
    \    eight: 8,\n    nine: 9,\n  };\n  let newArray = [];\n  numberArray.forEach((elem)\
    \ => {\n    newArray.push(numberMap[elem]);\n  });\n  newArray.sort((a, b) =>\
    \ a - b);\n  const finalArray = [];\n  newArray.forEach((elem) => {\n    finalArray.push(\n\
    \      Object.keys(numberMap).find((key) => numberMap[key] === elem)\n    );\n\
    \  });\n  return finalArray.join(\" \");\n}\nconsole.log(sort_numbers(\"three\
    \ one five\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2gicvlic.ts(31,30): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers\n       \
    \ .split(' ')\n        .map(number => numbersToInts[number])\n        .sort((a,\
    \ b) => a - b)\n        .map(number => intsToNumbers[number])\n        .join('\
    \ ');\n}\n\nvar testSortNumbers = function() {\n    var test = function(numbers,\
    \ expected) {\n        var actual = sort_numbers(numbers);\n        if (actual\
    \ !== expected) {\n            console.log(`ERROR:  For ${numbers}, expected ${expected},\
    \ but got ${actual}`);\n        }\n    };\n\n    test('nine eight one', 'one eight\
    \ nine');\n    test('one one five nine', 'one one five nine');\n    test('two\
    \ three five nine', 'two three five nine');\n    test('nine nine zero one', 'zero\
    \ one nine nine');\n    test('five five six seven seven seven zero', 'zero five\
    \ five six seven seven seven');\n    test('one two six five', 'one two five six');\n\
    \    test('one two one one', 'one one one two');\n    test('one one one one',\
    \ 'one one one one');\n    test('zero zero zero zero', 'zero zero zero zero');\n\
    \    test('one one two three zero', 'zero one one two three');\n    test('zero\
    \ one zero one', 'zero zero one one');\n    test('seven four two nine two nine\
    \ one', 'one two two four seven nine nine');\n    test('zero one two zero', 'zero\
    \ zero one two');\n    test('two three seven zero', 'zero two three seven');\n\
    \    test('four four five five one', 'one four four five five');\n    test('four\
    \ one zero seven', 'zero one four seven');\n    test('zero five four one', 'zero\
    \ one four five');\n    test('seven two nine two', 'two two seven nine');\n  \
    \  test('five five one four', 'one four five five');\n    test('two one eight\
    \ eight', 'one two eight eight');\n    test('three four zero zero', 'zero zero\
    \ three four');\n    test('one zero five six', 'zero one five six');\n    test('eight\
    \ six three zero', 'zero three six eight');\n    test('six eight eight five',\
    \ 'five six eight\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5vb0nigd.ts(46,49): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp5vb0nigd.ts(47,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp5vb0nigd.ts(47,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp5vb0nigd.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659822032
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numeralMap = {\n   \
    \ zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n\
    \    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const result\
    \ = numbers\n    .split(\" \")\n    .map((numeral) => numeralMap[numeral])\n \
    \   .sort((a, b) => a - b)\n    .map((num) => {\n      for (const [key, value]\
    \ of Object.entries(numeralMap)) {\n        if (value === num) {\n          return\
    \ key;\n        }\n      }\n    })\n    .join(\" \");\n  return result;\n}\n\n\
    console.log(sort_numbers(\"three one five\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyj8bpmu4.ts(24,41): error TS2339: Property ''entries''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numbersLookup: any\
    \ = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n\
    \        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n    \
    \    eight: 8,\n        nine: 9\n    };\n    const numbersArray = numbers.split(\"\
    \ \");\n    const numbersArraySorted = numbersArray.sort((num1, num2) => {\n \
    \       return numbersLookup[num1] - numbersLookup[num2];\n    });\n    return\
    \ numbersArraySorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .map(word => numeralMap[word])\n    .sort((a, b) => a - b)\n    .map(num\
    \ => numeralMap.find(word => word.value === num).word)\n    .join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_7xid5ac.ts(9,18): error TS2304: Cannot find name
    ''numeralMap''.

    ../../../../../tmp/tmp_7xid5ac.ts(11,17): error TS2304: Cannot find name ''numeralMap''.

    '
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const NUMBERS: Map<string,\
    \ number> = new Map([\n        ['zero', 0],\n        ['one', 1],\n        ['two',\
    \ 2],\n        ['three', 3],\n        ['four', 4],\n        ['five', 5],\n   \
    \     ['six', 6],\n        ['seven', 7],\n        ['eight', 8],\n        ['nine',\
    \ 9]\n    ]);\n    const filteredNumbers = numbers.split(' ').filter(x => {\n\
    \        return NUMBERS.has(x);\n    });\n    filteredNumbers.sort((a, b) => {\n\
    \        return NUMBERS.get(a) - NUMBERS.get(b);\n    });\n    return filteredNumbers.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm1y4i5ha.ts(7,20): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpm1y4i5ha.ts(7,46): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660014453
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberWords = numbers.split(\"\
    \ \");\n  const numberMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9\n  };\n  const numberList = numberWords.map(word => numberMap[word]);\n\
    \  const sortedNumbers = numberList.sort((a, b) => a - b);\n  const sortedWords\
    \ = sortedNumbers.map(number => numberWords[number]);\n  return sortedWords.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmpy4ng8td5.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy4ng8td5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = numbers.split(\"\
    \ \");\n  const sorted = nums.sort((a, b) => {\n    const num1 = numeralToInt(a);\n\
    \    const num2 = numeralToInt(b);\n    return num1 - num2;\n  });\n  return sorted.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7a59x50m.ts(9,18): error TS2304: Cannot find name
    ''numeralToInt''.

    ../../../../../tmp/tmp7a59x50m.ts(10,18): error TS2304: Cannot find name ''numeralToInt''.

    '
  timestamp: 1660014453
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \").map(x => x.split(\"\").reduce((a,b) => a + b.charCodeAt(0) - 96, 0));\n\
    \    nums.sort((a,b) => a - b);\n    return nums.map(x => {\n        let word\
    \ = \"\";\n        while (x >= 27) {\n            word += \"z\";\n           \
    \ x -= 26;\n        }\n        return word + String.fromCharCode(x + 96);\n  \
    \  }).join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'`'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpnfvyo4cn.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnfvyo4cn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '`',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let arrayOfNumbers: string[]\
    \ = numbers.split(\" \");\n    let sort: number[] = [];\n    for (let i = 0; i\
    \ < arrayOfNumbers.length; i++) {\n        switch (arrayOfNumbers[i]) {\n    \
    \        case \"zero\":\n                sort.push(0);\n                break;\n\
    \            case \"one\":\n                sort.push(1);\n                break;\n\
    \            case \"two\":\n                sort.push(2);\n                break;\n\
    \            case \"three\":\n                sort.push(3);\n                break;\n\
    \            case \"four\":\n                sort.push(4);\n                break;\n\
    \            case \"five\":\n                sort.push(5);\n                break;\n\
    \            case \"six\":\n                sort.push(6);\n                break;\n\
    \            case \"seven\":\n                sort.push(7);\n                break;\n\
    \            case \"eight\":\n                sort.push(8);\n                break;\n\
    \            case \"nine\":\n                sort.push(9);\n                break;\n\
    \        }\n    }\n    sort.sort(function (a, b) { return a - b });\n    for (let\
    \ i = 0; i < sort.length; i++) {\n        switch (sort[i]) {\n            case\
    \ 0:\n                arrayOfNumbers[i] = \"zero\";\n                break;\n\
    \            case 1:\n                arrayOfNumbers[i] = \"one\";\n         \
    \       break;\n            case 2:\n                arrayOfNumbers[i] = \"two\"\
    ;\n                break;\n            case 3:\n                arrayOfNumbers[i]\
    \ = \"three\";\n                break;\n            case 4:\n                arrayOfNumbers[i]\
    \ = \"four\";\n                break;\n            case 5:\n                arrayOfNumbers[i]\
    \ = \"five\";\n                break;\n            case 6:\n                arrayOfNumbers[i]\
    \ = \"six\";\n                break;\n            case 7:\n                arrayOfNumbers[i]\
    \ = \"seven\";\n                break;\n            case 8:\n                arrayOfNumbers[i]\
    \ = \"eight\";\n                break;\n            case 9:\n                arrayOfNumbers[i]\
    \ = \"nine\";\n                break;\n        }\n    }\n    return arrayOfNumbers.join(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcdhvj2dx.ts(78,33): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpcdhvj2dx.ts(79,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpcdhvj2dx.ts(79,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpcdhvj2dx.ts(92,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numeralStrMap = {\n\
    \        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three':\
    \ '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n    \
    \    'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    };\n    const\
    \ numeralMap = {\n        '0': 'zero',\n        '1': 'one',\n        '2': 'two',\n\
    \        '3': 'three',\n        '4': 'four',\n        '5': 'five',\n        '6':\
    \ 'six',\n        '7': 'seven',\n        '8': 'eight',\n        '9': 'nine'\n\
    \    };\n    let convertNumString = numbers.split(' ').map(x => {\n        return\
    \ numeralStrMap[x];\n    }).sort().join(' ');\n    let convertNumToString = convertNumString.split('\
    \ ').map(x => {\n        return numeralMap[x];\n    }).join(' ');\n    return\
    \ convertNumToString;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numsArray = numbers.split(\"\
    \ \");\n    let numsDict = {\n        zero: 0,\n        one: 1,\n        two:\
    \ 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n\
    \        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    let numsToSort\
    \ = [];\n    numsArray.forEach(element => {\n        numsToSort.push(numsDict[element]);\n\
    \    });\n    numsToSort.sort(function(a, b) {\n        return a - b;\n    });\n\
    \    numsArray = [];\n    numsToSort.forEach(element => {\n        for (let i\
    \ in numsDict) {\n            if (numsDict[i] === element) {\n               \
    \ numsArray.push(i);\n            }\n        }\n    });\n    return numsArray.join(\"\
    \ \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = numbers.split(\"\
    \ \").map(convertToNumber);\n  nums.sort((a, b) => a - b);\n  return nums.map(convertToNumberString).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm5rzxay6.ts(7,39): error TS2304: Cannot find name
    ''convertToNumber''.

    ../../../../../tmp/tmpm5rzxay6.ts(8,23): error TS2362: The left-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    ../../../../../tmp/tmpm5rzxay6.ts(8,27): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpm5rzxay6.ts(9,19): error TS2304: Cannot find name ''convertToNumberString''.

    '
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \");\n    for (let i = 0; i < nums.length; i++) {\n        nums[i] = get_number(nums[i]);\n\
    \    }\n    nums.sort(function (a, b) {\n        return a - b;\n    });\n    for\
    \ (let i = 0; i < nums.length; i++) {\n        nums[i] = get_number_string(nums[i]);\n\
    \    }\n    return nums.join(\" \");\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdq4yz3ql.ts(9,19): error TS2304: Cannot find name
    ''get_number''.

    ../../../../../tmp/tmpdq4yz3ql.ts(12,16): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpdq4yz3ql.ts(12,20): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpdq4yz3ql.ts(15,19): error TS2304: Cannot find name ''get_number_string''.

    '
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numeral_dict = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    let num_arr = numbers.split(\" \");\n    num_arr.sort((num1,\
    \ num2) => numeral_dict[num1] - numeral_dict[num2]);\n    return num_arr.join(\"\
    \ \");\n}\n\nexport const sort_numbers_test = (): void => {\n    assert(sort_numbers(\"\
    three one five\") === \"one three five\");\n    assert(sort_numbers(\"four nine\
    \ nine zero\") === \"zero four nine nine\");\n    assert(sort_numbers(\"eight\
    \ five six seven\") === \"five six seven eight\");\n    assert(sort_numbers(\"\
    zero one two five nine\") === \"zero one two five nine\");\n};\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberals: string[]\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n  const numeral_numbers: number[] = [];\n  numbers.split(\"\
    \ \").forEach(element => {\n    numeral_numbers.push(numberals.indexOf(element));\n\
    \  });\n  numeral_numbers.sort((a, b) => a - b);\n  const sorted_numbers: string[]\
    \ = [];\n  numeral_numbers.forEach(element => {\n    sorted_numbers.push(numberals[element]);\n\
    \  });\n  return sorted_numbers.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums_arr = numbers.split(\"\
    \ \");\n    nums_arr.sort(compare_numbers);\n    return nums_arr.join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps_efbvr9.ts(8,19): error TS2304: Cannot find name
    ''compare_numbers''.

    '
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let nums = numbers.split(\"\
    \ \");\n  return nums.sort((a, b) => {\n    let numA = convert_to_num(a);\n  \
    \  let numB = convert_to_num(b);\n    return numA - numB;\n  }).join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpig8m71tk.ts(9,16): error TS2304: Cannot find name
    ''convert_to_num''.

    ../../../../../tmp/tmpig8m71tk.ts(10,16): error TS2304: Cannot find name ''convert_to_num''.

    '
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let numMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  let nums = numbers.split(\"\
    \ \");\n  let numsToSort = nums.map(num => numMap[num]);\n  numsToSort.sort((a,\
    \ b) => a - b);\n  return numsToSort.map(num => {\n    if (num === 0) return \"\
    zero\";\n    if (num === 1) return \"one\";\n    if (num === 2) return \"two\"\
    ;\n    if (num === 3) return \"three\";\n    if (num === 4) return \"four\";\n\
    \    if (num === 5) return \"five\";\n    if (num === 6) return \"six\";\n   \
    \ if (num === 7) return \"seven\";\n    if (num === 8) return \"eight\";\n   \
    \ if (num === 9) return \"nine\";\n  }).join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums: number[] = [];\n\
    \    numbers.split(\" \").forEach(numeral => {\n        switch (numeral) {\n \
    \           case \"zero\":\n                nums.push(0);\n                break;\n\
    \            case \"one\":\n                nums.push(1);\n                break;\n\
    \            case \"two\":\n                nums.push(2);\n                break;\n\
    \            case \"three\":\n                nums.push(3);\n                break;\n\
    \            case \"four\":\n                nums.push(4);\n                break;\n\
    \            case \"five\":\n                nums.push(5);\n                break;\n\
    \            case \"six\":\n                nums.push(6);\n                break;\n\
    \            case \"seven\":\n                nums.push(7);\n                break;\n\
    \            case \"eight\":\n                nums.push(8);\n                break;\n\
    \            case \"nine\":\n                nums.push(9);\n                break;\n\
    \        }\n    });\n    nums.sort((a, b) => a - b);\n    let response: string\
    \ = \"\";\n    nums.forEach(num => {\n        switch (num) {\n            case\
    \ 0:\n                response += \"zero \";\n                break;\n       \
    \     case 1:\n                response += \"one \";\n                break;\n\
    \            case 2:\n                response += \"two \";\n                break;\n\
    \            case 3:\n                response += \"three \";\n              \
    \  break;\n            case 4:\n                response += \"four \";\n     \
    \           break;\n            case 5:\n                response += \"five \"\
    ;\n                break;\n            case 6:\n                response += \"\
    six \";\n                break;\n            case 7:\n                response\
    \ += \"seven \";\n                break;\n            case 8:\n              \
    \  response += \"eight \";\n                break;\n            case 9:\n    \
    \            response += \"nine \";\n                break;\n        }\n    });\n\
    \    return response.trim();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numMap = {\n    \"zero\"\
    : 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n\
    \    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n   \
    \ \"nine\": 9\n  };\n  const split: string[] = numbers.split(\" \");\n  const\
    \ nums: number[] = split.map(x => numMap[x]);\n  nums.sort((a, b) => a - b);\n\
    \  return nums.map(x => Object.keys(numMap).find(k => numMap[k] === x)).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpga56rffo.ts(22,44): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    var nummap = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9};\n    var numarray = numbers.split(' ');\n    var result\
    \ = numarray.sort(function(a, b) {\n        return nummap[a] - nummap[b];\n  \
    \  });\n    return result.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const num_map = {'zero':\
    \ 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven':\
    \ 7, 'eight': 8, 'nine': 9};\n    const nums = numbers.split(' ');\n    return\
    \ nums.sort((a, b) => num_map[a] - num_map[b]).join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const words = numbers.split(\"\
    \ \");\n  const nums = words.map(word => wordToNum(word));\n  const sorted = nums.sort((a,\
    \ b) => a - b);\n  return sorted.map(num => numToWord(num)).join(\" \");\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplsl2ltk9.ts(8,34): error TS2304: Cannot find name
    ''wordToNum''.

    ../../../../../tmp/tmplsl2ltk9.ts(10,28): error TS2304: Cannot find name ''numToWord''.

    '
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numeralDict = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    const numeralArray = numbers.split(\" \");\n\
    \    const digitArray = numeralArray.map(x => numeralDict[x]);\n    const sortedDigits\
    \ = digitArray.sort((a, b) => a - b);\n    const sortedNumeralArray = sortedDigits.map(x\
    \ => {\n        for (const key in numeralDict) {\n            if (numeralDict[key]\
    \ === x) {\n                return key;\n            }\n        }\n    });\n \
    \   return sortedNumeralArray.join(\" \");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014453
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const mapping = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numArr =\
    \ numbers.split(\" \");\n  const sorted = numArr.sort((a, b) => mapping[a] - mapping[b]);\n\
    \  return sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014457
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numStr = ['zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n  let numArr\
    \ = numbers.split(' ');\n  let map = new Map();\n  for (let i = 0; i < numStr.length;\
    \ i++) {\n    map.set(numStr[i], i);\n  }\n  numArr.sort((a, b) => {\n    return\
    \ map.get(a) - map.get(b);\n  });\n  return numArr.join(' ');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsl9pah48.ts(9,17): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    '
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .map(num => names_to_numbers[num])\n    .sort((n1, n2) => n1 - n2)\n\
    \    .map(num => numbers_to_names[num])\n    .join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7hpzrpad.ts(9,17): error TS2304: Cannot find name
    ''names_to_numbers''.

    ../../../../../tmp/tmp7hpzrpad.ts(11,17): error TS2304: Cannot find name ''numbers_to_names''.

    '
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let sortedNumbers: string[]\
    \ = numbers.split(\" \").sort((a, b) => {\n        return numberLookup[a] - numberLookup[b];\n\
    \    });\n    return sortedNumbers.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbxovpq5_.ts(8,16): error TS2304: Cannot find name
    ''numberLookup''.

    ../../../../../tmp/tmpbxovpq5_.ts(8,34): error TS2304: Cannot find name ''numberLookup''.

    '
  timestamp: 1660014457
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let nums: string[] = numbers.split(\"\
    \ \");\n  nums.sort((a, b) => {\n    return word_to_num(a) - word_to_num(b);\n\
    \  });\n  return nums.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1cz5tx64.ts(9,12): error TS2304: Cannot find name
    ''word_to_num''.

    ../../../../../tmp/tmp1cz5tx64.ts(9,29): error TS2304: Cannot find name ''word_to_num''.

    '
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numeralValues = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    let numWordsArray = numbers.split(\" \");\n\
    \    let numValuesArray = [];\n    for (let i = 0; i < numWordsArray.length; i++)\
    \ {\n        numValuesArray.push(numeralValues[numWordsArray[i]]);\n    }\n  \
    \  numValuesArray.sort(function(a, b) {\n        return a - b;\n    });\n    let\
    \ numWordsSortedArray = [];\n    for (let i = 0; i < numValuesArray.length; i++)\
    \ {\n        for (let numeral in numeralValues) {\n            if (numeralValues[numeral]\
    \ === numValuesArray[i]) {\n                numWordsSortedArray.push(numeral);\n\
    \            }\n        }\n    }\n    return numWordsSortedArray.join(\" \");\n\
    }\nconsole.log(sort_numbers(\"three one five\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    '
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums = numbers.split('\
    \ ');\n    const numsSorted = nums.sort((a, b) => numberValue(a) - numberValue(b));\n\
    \    return numsSorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy1sfdx3p.ts(8,44): error TS2304: Cannot find name
    ''numberValue''.

    ../../../../../tmp/tmpy1sfdx3p.ts(8,61): error TS2304: Cannot find name ''numberValue''.

    '
  timestamp: 1660014457
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums: string[] = numbers.split(\"\
    \ \");\n  const dict: { [key: string]: number } = {\n    zero: 0,\n    one: 1,\n\
    \    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven:\
    \ 7,\n    eight: 8,\n    nine: 9\n  };\n  const sorted: string[] = nums.sort((a,\
    \ b) => dict[a] - dict[b]);\n  return sorted.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) => numberals[a] - numberals[b])\n    .join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4fke8jpv.ts(9,21): error TS2552: Cannot find name
    ''numberals''. Did you mean ''numbers''?

    ../../../../../tmp/tmp4fke8jpv.ts(9,36): error TS2552: Cannot find name ''numberals''.
    Did you mean ''numbers''?

    '
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(\"\
    \ \").sort((a, b) => alphaToNum(a) - alphaToNum(b)).join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptfl_jvm8.ts(7,46): error TS2304: Cannot find name
    ''alphaToNum''.

    ../../../../../tmp/tmptfl_jvm8.ts(7,62): error TS2304: Cannot find name ''alphaToNum''.

    '
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers\n       \
    \ .split(' ')\n        .map(word => {\n            return { num: Number(word_to_numeral(word)),\
    \ word: word };\n        })\n        .sort((a, b) => {\n            return a.num\
    \ - b.num;\n        })\n        .map(obj => {\n            return obj.word;\n\
    \        })\n        .join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx_6tmux9.ts(10,34): error TS2304: Cannot find name
    ''word_to_numeral''.

    '
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    var ones = ['zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n    var array_numbers\
    \ = numbers.split(' ');\n    array_numbers.sort(function (a, b) {\n        return\
    \ ones.indexOf(a) - ones.indexOf(b);\n    });\n    return array_numbers.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const dict = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numArray\
    \ = numbers.split(\" \");\n  numArray.sort((a, b) => dict[a] - dict[b]);\n  return\
    \ numArray.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numOrder: { [numeral:\
    \ string]: number } = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  let words = numbers.split(' ');\n    let nums = words.map(w => numOrder[w]);\n\
    \    nums.sort((a, b) => a - b);\n    let newWords = nums.map(n => {\n       \
    \ for (let key in numOrder) {\n            if (numOrder[key] === n) {\n      \
    \          return key;\n            }\n        }\n    });\n    return newWords.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014458
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberWords: number[]\
    \ = numbers.split(\" \").map(numberWord => {\n    switch (numberWord) {\n    \
    \  case \"zero\":\n        return 0;\n      case \"one\":\n        return 1;\n\
    \      case \"two\":\n        return 2;\n      case \"three\":\n        return\
    \ 3;\n      case \"four\":\n        return 4;\n      case \"five\":\n        return\
    \ 5;\n      case \"six\":\n        return 6;\n      case \"seven\":\n        return\
    \ 7;\n      case \"eight\":\n        return 8;\n      case \"nine\":\n       \
    \ return 9;\n      default:\n        throw new Error(\"Invalid number word\");\n\
    \    }\n  });\n  return numberWords.sort((a, b) => a - b).map(numberWord => {\n\
    \    switch (numberWord) {\n      case 0:\n        return \"zero\";\n      case\
    \ 1:\n        return \"one\";\n      case 2:\n        return \"two\";\n      case\
    \ 3:\n        return \"three\";\n      case 4:\n        return \"four\";\n   \
    \   case 5:\n        return \"five\";\n      case 6:\n        return \"six\";\n\
    \      case 7:\n        return \"seven\";\n      case 8:\n        return \"eight\"\
    ;\n      case 9:\n        return \"nine\";\n      default:\n        throw new\
    \ Error(\"Invalid number word\");\n    }\n  }).join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: Exception
  stderr: "/tmp/tmpafkwkqvv.js:30\n                throw new Error(\"Invalid number\
    \ word\");\n                ^\n\nError: Invalid number word\n    at /tmp/tmpafkwkqvv.js:30:23\n\
    \    at Array.map (<anonymous>)\n    at sort_numbers (/tmp/tmpafkwkqvv.js:7:42)\n\
    \    at test (/tmp/tmpafkwkqvv.js:63:22)\n    at Object.<anonymous> (/tmp/tmpafkwkqvv.js:69:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numbers_in_words = numbers.split(\"\
    \ \");\n  const word_to_number = {\n    zero: 0,\n    one: 1,\n    two: 2,\n \
    \   three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight:\
    \ 8,\n    nine: 9,\n  };\n  const numbers_in_int = numbers_in_words.map((number_in_word)\
    \ =>\n    word_to_number[number_in_word]\n  );\n  const sorted_numbers_in_int\
    \ = numbers_in_int.sort((a, b) => a - b);\n  const number_to_word = {\n    0:\
    \ \"zero\",\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\"\
    ,\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n \
    \   9: \"nine\",\n  };\n  const sorted_numbers_in_words = sorted_numbers_in_int.map((number_in_int)\
    \ =>\n    number_to_word[number_in_int]\n  );\n  return sorted_numbers_in_words.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  // Split the input string\
    \ into an array\n  const numArray = numbers.split(\" \");\n  // Initialize a new\
    \ array to put the sorted numbers in\n  const sortedArray = [];\n  // Loop through\
    \ the original array and\n  // sort the numeral values into the new array\n  for\
    \ (let i = 0; i < numArray.length; i++) {\n    // Check if numeral 'zero' is present\
    \ in the original array\n    if (numArray.includes(\"zero\")) {\n      // Check\
    \ if numeral 'zero' is already in the sorted array\n      if (!sortedArray.includes(\"\
    zero\")) {\n        // If numeral 'zero' is not already in the sorted array\n\
    \        // add it to the sorted array\n        sortedArray.push(\"zero\");\n\
    \      }\n    }\n    // Check if numeral 'one' is present in the original array\n\
    \    if (numArray.includes(\"one\")) {\n      // Check if numeral 'one' is already\
    \ in the sorted array\n      if (!sortedArray.includes(\"one\")) {\n        //\
    \ If numeral 'one' is not already in the sorted array\n        // add it to the\
    \ sorted array\n        sortedArray.push(\"one\");\n      }\n    }\n    // Check\
    \ if numeral 'two' is present in the original array\n    if (numArray.includes(\"\
    two\")) {\n      // Check if numeral 'two' is already in the sorted array\n  \
    \    if (!sortedArray.includes(\"two\")) {\n        // If numeral 'two' is not\
    \ already in the sorted array\n        // add it to the sorted array\n       \
    \ sortedArray.push(\"two\");\n      }\n    }\n    // Check if numeral 'three'\
    \ is present in the original array\n    if (numArray.includes(\"three\")) {\n\
    \      // Check if numeral 'three' is already in the sorted array\n      if (!sortedArray.includes(\"\
    three\")) {\n        // If numeral 'three' is not already in the sorted array\n\
    \        // add it to the sorted array\n        sortedArray.push(\"three\");\n\
    \      }\n    }\n    // Check if numeral 'four' is present in the original array\n\
    \    if (numArray.includes(\"four\")) {\n      // Check if numeral 'four' is already\
    \ in\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq8fleasa.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014458
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = numbers.split(\"\
    \ \");\n  let sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    let\
    \ temp = +nums[i];\n    sorted.push(temp);\n  }\n  sorted.sort((a, b) => a - b);\n\
    \  sorted = sorted.map(n => nums[n]);\n  return sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmpub012iyx.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpub012iyx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const num_map = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\"\
    \ \");\n  const nums_sorted = nums.sort((a, b) => num_map[a] - num_map[b]);\n\
    \  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort(numbersSort)\n    .join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf6ifqp_o.ts(9,11): error TS2304: Cannot find name
    ''numbersSort''.

    '
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    var num = numbers.split(\"\
    \ \");\n    num.sort((a, b) => {\n        return numberLookup(a) - numberLookup(b);\n\
    \    });\n    return num.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcjwqo7r8.ts(9,16): error TS2304: Cannot find name
    ''numberLookup''.

    ../../../../../tmp/tmpcjwqo7r8.ts(9,34): error TS2304: Cannot find name ''numberLookup''.

    '
  timestamp: 1660014458
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  var nums = numbers.split(\"\
    \ \");\n  var sortedNums = nums.sort(function(a, b) {\n    var zero = [\"zero\"\
    , \"two\", \"four\", \"six\", \"eight\"];\n    var one = [\"one\", \"three\",\
    \ \"five\", \"seven\", \"nine\"];\n    var x = zero.indexOf(a) > -1 ? 0 : 1;\n\
    \    var y = zero.indexOf(b) > -1 ? 0 : 1;\n    return x - y;\n  });\n  return\
    \ sortedNums.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'zero four eight\
    \ five seven nine'\n\nshould loosely deep-equal\n\n'zero four five seven eight\
    \ nine'\n    at test (/tmp/tmpyvgqkbdd.js:23:12)\n    at Object.<anonymous> (/tmp/tmpyvgqkbdd.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'zero four\
    \ eight five seven nine',\n  expected: 'zero four five seven eight nine',\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014458
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numberArray = numbers.split(\"\
    \ \");\n    const result = numberArray.sort((a, b) => {\n        return (numberNameToNumber(a)\
    \ - numberNameToNumber(b));\n    });\n    return result.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgnvqhzrz.ts(9,17): error TS2304: Cannot find name
    ''numberNameToNumber''.

    ../../../../../tmp/tmpgnvqhzrz.ts(9,41): error TS2304: Cannot find name ''numberNameToNumber''.

    '
  timestamp: 1660014458
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let result: string = \"\"\
    ;\n    let nums: number[] = [];\n    let nums_str: string[] = numbers.split(\"\
    \ \");\n    for (let i = 0; i < nums_str.length; i++) {\n        switch (nums_str[i])\
    \ {\n            case \"zero\":\n                nums.push(0);\n             \
    \   break;\n            case \"one\":\n                nums.push(1);\n       \
    \         break;\n            case \"two\":\n                nums.push(2);\n \
    \               break;\n            case \"three\":\n                nums.push(3);\n\
    \                break;\n            case \"four\":\n                nums.push(4);\n\
    \                break;\n            case \"five\":\n                nums.push(5);\n\
    \                break;\n            case \"six\":\n                nums.push(6);\n\
    \                break;\n            case \"seven\":\n                nums.push(7);\n\
    \                break;\n            case \"eight\":\n                nums.push(8);\n\
    \                break;\n            case \"nine\":\n                nums.push(9);\n\
    \                break;\n        }\n    }\n    let new_nums: number[] = nums.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < new_nums.length; i++) {\n\
    \        switch (new_nums[i]) {\n            case 0:\n                result +=\
    \ \"zero \";\n                break;\n            case 1:\n                result\
    \ += \"one \";\n                break;\n            case 2:\n                result\
    \ += \"two \";\n                break;\n            case 3:\n                result\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  result += \"four \";\n                break;\n            case 5:\n       \
    \         result += \"five \";\n                break;\n            case 6:\n\
    \                result += \"six \";\n                break;\n            case\
    \ 7:\n                result += \"seven \";\n                break;\n        \
    \    case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.trim();\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014462
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) => {\n      return numeral_to_number(a) - numeral_to_number(b);\n\
    \    })\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd2n6nkg7.ts(10,14): error TS2304: Cannot find name
    ''numeral_to_number''.

    ../../../../../tmp/tmpd2n6nkg7.ts(10,37): error TS2304: Cannot find name ''numeral_to_number''.

    '
  timestamp: 1660014462
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // TODO\n    throw new Error(\"\
    Not Implemented\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: Exception
  stderr: "/tmp/tmpm086m8sk.js:8\n    throw new Error(\"Not Implemented\");\n    ^\n\
    \nError: Not Implemented\n    at sort_numbers (/tmp/tmpm086m8sk.js:8:11)\n   \
    \ at test (/tmp/tmpm086m8sk.js:13:22)\n    at Object.<anonymous> (/tmp/tmpm086m8sk.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014463
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // if only numbers\n   \
    \ // return numbers.split(\" \").sort().join(\" \");\n    const words = ['zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n \
    \   const num_map = { zero: 0, one: 1, two: 2, three: 3, four: 4, five: 5, six:\
    \ 6, seven: 7, eight: 8, nine: 9 };\n    return numbers.split(\" \").sort((a,\
    \ b) => num_map[a] - num_map[b]).join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014462
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \");\n    let newNums = nums.map(function(num: string) {\n        return num_to_numeral(numeral_to_num(num));\n\
    \    });\n    newNums.sort(function(num1: string, num2: string) {\n        return\
    \ numeral_to_num(num1) - numeral_to_num(num2);\n    });\n    return newNums.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_abjf1un.ts(9,16): error TS2304: Cannot find name
    ''num_to_numeral''.

    ../../../../../tmp/tmp_abjf1un.ts(9,31): error TS2304: Cannot find name ''numeral_to_num''.

    ../../../../../tmp/tmp_abjf1un.ts(12,16): error TS2304: Cannot find name ''numeral_to_num''.

    ../../../../../tmp/tmp_abjf1un.ts(12,39): error TS2304: Cannot find name ''numeral_to_num''.

    '
  timestamp: 1660014462
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let arr: string[] = numbers.split(\"\
    \ \");\n    let num_arr: number[] = [];\n    for (let num of arr) {\n        num_arr.push(number_to_numeral[num]);\n\
    \    }\n    let sorted_num_arr: number[] = num_arr.sort((a, b) => a - b);\n  \
    \  let sorted_arr: string[] = [];\n    for (let num of sorted_num_arr) {\n   \
    \     sorted_arr.push(numeral_to_number[num]);\n    }\n    return sorted_arr.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyvq662ud.ts(10,22): error TS2304: Cannot find name
    ''number_to_numeral''.

    ../../../../../tmp/tmpyvq662ud.ts(15,25): error TS2304: Cannot find name ''numeral_to_number''.

    '
  timestamp: 1660014462
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numDict = {\n    \
    \    zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four:\
    \ 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n\
    \        nine: 9\n    };\n    const nums = numbers.split(\" \");\n    const numsInts\
    \ = nums.map(n => numDict[n]);\n    numsInts.sort((a, b) => a - b);\n    const\
    \ numsWords = numsInts.map(n => {\n        for (const word in numDict) {\n   \
    \         if (numDict[word] === n) {\n                return word;\n         \
    \   }\n        }\n    });\n    return numsWords.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014463
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numbersAry = numbers.split('\
    \ ');\n    const sortNumber: (a: string, b: string) => number = (a, b) => {\n\
    \        return numbersAry.indexOf(a) - numbersAry.indexOf(b);\n    };\n    return\
    \ numbersAry.sort(sortNumber).join(' ');\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five zero four\
    \ seven nine eight'\n\nshould loosely deep-equal\n\n'zero four five seven eight\
    \ nine'\n    at test (/tmp/tmp8m9sv9rv.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8m9sv9rv.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five zero\
    \ four seven nine eight',\n  expected: 'zero four five seven eight nine',\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let num_to_int: Record<string,\
    \ number> = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n    \
    \    'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n\
    \        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    let\
    \ nums = numbers.split(' ');\n    let num_as_int = nums.map(n => num_to_int[n]);\n\
    \    let sorted_nums = num_as_int.sort((a, b) => a - b);\n    let sorted_words\
    \ = sorted_nums.map(n => Object.keys(num_to_int).find(num => num_to_int[num] ===\
    \ n));\n    return sorted_words.join(' ');\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9y05yjk5.ts(22,69): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014462
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let lookup = {\n       \
    \ 'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n    \
    \    'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split(' ').sort((a,\
    \ b) => {\n        return lookup[a] - lookup[b];\n    }).join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014463
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const map: { [key: string]:\
    \ number } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four:\
    \ 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n\
    \  };\n  return numbers\n    .split(\" \")\n    .map((n) => map[n])\n    .sort((a,\
    \ b) => a - b)\n    .map((n) => (n === 0 ? \"zero\" : n))\n    .join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmp1gohiiwf.js:30:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp1gohiiwf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let num_map = new Map([\n\
    \    [\"zero\", 0],\n    [\"one\", 1],\n    [\"two\", 2],\n    [\"three\", 3],\n\
    \    [\"four\", 4],\n    [\"five\", 5],\n    [\"six\", 6],\n    [\"seven\", 7],\n\
    \    [\"eight\", 8],\n    [\"nine\", 9],\n  ]);\n  let nums = numbers.split(\"\
    \ \");\n  let num_ints = nums.map((n) => num_map.get(n));\n  let sorted_ints =\
    \ num_ints.sort((a, b) => a - b);\n  let sorted_strs = sorted_ints.map((i) =>\
    \ {\n    for (let [k, v] of num_map) {\n      if (v === i) {\n        return k;\n\
    \      }\n    }\n  });\n  return sorted_strs.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdv51qdwv.ts(7,21): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014462
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // Get all the numbers as\
    \ an array\n    let nums = numbers.split(\" \");\n    // Create an object with\
    \ the numbers mapped to the place they hold.\n    let number_mapping = {\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    // Sort\
    \ the numbers and return them as a string.\n    return nums.sort((a, b) => number_mapping[a]\
    \ - number_mapping[b]).join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014463
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const string_map = {\"zero\"\
    : 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9};\n    const num_list = numbers.split(\"\
    \ \").map(n => string_map[n]);\n    num_list.sort();\n    const rev_string_map\
    \ = {0: \"zero\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\"\
    , 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"};\n    const string_list\
    \ = num_list.map(n => rev_string_map[n]);\n    return string_list.join(\" \");\n\
    }\nconsole.log(sort_numbers(\"three one five\"));\nconsole.log(sort_numbers(\"\
    four seven eight two zero\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    zero two four seven eight

    '
  timestamp: 1660014463
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const number_array = numbers.split(\"\
    \ \");\n  const numbers_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9\n  };\n  const sorted_array = number_array.sort((a, b) => {\n   \
    \ return numbers_map[a] - numbers_map[b];\n  });\n  return sorted_array.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let number: string = \"\"\
    ;\n    let result: string = \"\";\n    let index: number = 0;\n    let temp: number\
    \ = 0;\n    let tempArray: number[] = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] !== \" \") {\n            number += numbers[i];\n\
    \        } else {\n            index = Number(number_to_numeral(number));\n  \
    \          tempArray.push(index);\n            number = \"\";\n        }\n   \
    \ }\n    index = Number(number_to_numeral(number));\n    tempArray.push(index);\n\
    \    number = \"\";\n    for (let i: number = 0; i < tempArray.length; i++) {\n\
    \        for (let j: number = i + 1; j < tempArray.length; j++) {\n          \
    \  if (tempArray[i] > tempArray[j]) {\n                temp = tempArray[i];\n\
    \                tempArray[i] = tempArray[j];\n                tempArray[j] =\
    \ temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < tempArray.length;\
    \ i++) {\n        index = tempArray[i];\n        number = numeral_to_number(index);\n\
    \        result += number + \" \";\n    }\n    return result.slice(0, result.length\
    \ - 1);\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcpyqd_de.ts(16,28): error TS2304: Cannot find name
    ''number_to_numeral''.

    ../../../../../tmp/tmpcpyqd_de.ts(21,20): error TS2304: Cannot find name ''number_to_numeral''.

    ../../../../../tmp/tmpcpyqd_de.ts(35,18): error TS2304: Cannot find name ''numeral_to_number''.

    '
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numDict = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  let numArray =\
    \ numbers.split(\" \");\n  return numArray\n    .map((num) => numDict[num])\n\
    \    .sort((a, b) => a - b)\n    .map((num) => Object.keys(numDict).find((key)\
    \ => numDict[key] === num))\n    .join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnqikq2f_.ts(23,40): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return '';\n}\n\nexport\
    \ {\n    longest_string,\n    string_index_sort,\n    sort_numbers\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeq0t1ila.ts(11,5): error TS2304: Cannot find name
    ''longest_string''.

    ../../../../../tmp/tmpeq0t1ila.ts(12,5): error TS2304: Cannot find name ''string_index_sort''.

    '
  timestamp: 1660014463
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numberMap = {\n  \
    \      zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n       \
    \ four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    const numberArray = numbers.split(\" \");\n\
    \    const numArray = numberArray.map(num => numberMap[num]);\n    numArray.sort((a,\
    \ b) => a - b);\n    const sortedNumArray = numArray.map(num => {\n        let\
    \ strNum = \"\";\n        for (let prop in numberMap) {\n            if (numberMap[prop]\
    \ === num) {\n                strNum = prop;\n            }\n        }\n     \
    \   return strNum;\n    });\n    return sortedNumArray.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let matches = numbers.match(/zero|one|two|three|four|five|six|seven|eight|nine/g);\n\
    \    let conv_nums = matches.map(conv_to_int);\n    let sorted_nums = conv_nums.sort((a,\
    \ b) => a - b);\n    let string_nums = sorted_nums.map(conv_to_string);\n    return\
    \ string_nums.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb3iafrol.ts(8,33): error TS2304: Cannot find name
    ''conv_to_int''.

    ../../../../../tmp/tmpb3iafrol.ts(9,48): error TS2362: The left-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    ../../../../../tmp/tmpb3iafrol.ts(9,52): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpb3iafrol.ts(10,39): error TS2304: Cannot find name ''conv_to_string''.

    '
  timestamp: 1660014463
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const number_dictionary =\
    \ {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four':\
    \ 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine':\
    \ 9\n  };\n  let sorted_array = numbers.split(' ').sort((a, b) => {\n    if (number_dictionary[a]\
    \ > number_dictionary[b]) {\n      return 1;\n    } else if (number_dictionary[a]\
    \ < number_dictionary[b]) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  });\n  return sorted_array.join(' ');\n}\n\nconsole.log(sort_numbers('three\
    \ one five'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    '
  timestamp: 1660014463
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // >>> sort_numbers(\"three\
    \ one five\")\n    // \"one three five\"\n    let numbersDict = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    let sort = (a: string, b: string) => {\n\
    \        let aNum = numbersDict[a];\n        let bNum = numbersDict[b];\n    \
    \    return aNum - bNum;\n    };\n    return numbers.split(' ').sort(sort).join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const num_map = new Map<string,\
    \ number>();\n    num_map.set(\"zero\", 0);\n    num_map.set(\"one\", 1);\n  \
    \  num_map.set(\"two\", 2);\n    num_map.set(\"three\", 3);\n    num_map.set(\"\
    four\", 4);\n    num_map.set(\"five\", 5);\n    num_map.set(\"six\", 6);\n   \
    \ num_map.set(\"seven\", 7);\n    num_map.set(\"eight\", 8);\n    num_map.set(\"\
    nine\", 9);\n\n    const num_arr = numbers.split(\" \");\n    num_arr.sort((a,\
    \ b) => num_map.get(a) - num_map.get(b));\n    return num_arr.join(\" \");\n}\n\
    \nconsole.log(sort_numbers(\"zero one two three five six seven four nine\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq497jq4q.ts(7,25): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014463
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const stringArr\
    \ = numbers.split(\" \");\n  const numArr = stringArr.map((el) => numMap[el]);\n\
    \  numArr.sort((a, b) => a - b);\n  const stringArr2 = numArr.map((el) => Object.keys(numMap).find((key)\
    \ => numMap[key] === el));\n  return stringArr2.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv1c7nzqk.ts(22,61): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014467
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numbers_mapped = numbers.split('\
    \ ').map(number => {\n        switch (number) {\n            case 'zero':\n  \
    \              return 0;\n            case 'one':\n                return 1;\n\
    \            case 'two':\n                return 2;\n            case 'three':\n\
    \                return 3;\n            case 'four':\n                return 4;\n\
    \            case 'five':\n                return 5;\n            case 'six':\n\
    \                return 6;\n            case 'seven':\n                return\
    \ 7;\n            case 'eight':\n                return 8;\n            case 'nine':\n\
    \                return 9;\n            default:\n                return null;\n\
    \        }\n    });\n    const numbers_sorted = numbers_mapped.sort((a, b) =>\
    \ a - b);\n    const numbers_sorted_string = numbers_sorted.map(number => {\n\
    \        switch (number) {\n            case 0:\n                return 'zero';\n\
    \            case 1:\n                return 'one';\n            case 2:\n   \
    \             return 'two';\n            case 3:\n                return 'three';\n\
    \            case 4:\n                return 'four';\n            case 5:\n  \
    \              return 'five';\n            case 6:\n                return 'six';\n\
    \            case 7:\n                return 'seven';\n            case 8:\n \
    \               return 'eight';\n            case 9:\n                return 'nine';\n\
    \            default:\n                return null;\n        }\n    });\n    return\
    \ numbers_sorted_string.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums: number[] = numbers.split('\
    \ ').map(n => parseInt(word_to_number(n)));\n    nums.sort((a, b) => a - b);\n\
    \    return nums.map(n => number_to_word(n)).join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0c7dit5a.ts(7,65): error TS2304: Cannot find name
    ''word_to_number''.

    ../../../../../tmp/tmp0c7dit5a.ts(9,26): error TS2304: Cannot find name ''number_to_word''.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return numbers\n\
    \    .split(\" \")\n    .map((num) => numberMap[num])\n    .sort((a, b) => a -\
    \ b)\n    .map((num) => Object.keys(numberMap).find((key) => numberMap[key] ===\
    \ num))\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxw1jk52s.ts(23,42): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const sorted = numbers.split('\
    \ ').sort((a, b) => {\n    return number_values[a] - number_values[b];\n  });\n\
    \  return sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7uhd9t57.ts(8,12): error TS2304: Cannot find name
    ''number_values''.

    ../../../../../tmp/tmp7uhd9t57.ts(8,31): error TS2304: Cannot find name ''number_values''.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let sorted_numbers: string\
    \ = \"\";\n    let map_of_numbers: Map<string, number> = new Map<string, number>();\n\
    \    let list_of_numbers: string[] = numbers.split(\" \");\n    map_of_numbers.set(\"\
    zero\", 0);\n    map_of_numbers.set(\"one\", 1);\n    map_of_numbers.set(\"two\"\
    , 2);\n    map_of_numbers.set(\"three\", 3);\n    map_of_numbers.set(\"four\"\
    , 4);\n    map_of_numbers.set(\"five\", 5);\n    map_of_numbers.set(\"six\", 6);\n\
    \    map_of_numbers.set(\"seven\", 7);\n    map_of_numbers.set(\"eight\", 8);\n\
    \    map_of_numbers.set(\"nine\", 9);\n    list_of_numbers.sort((a, b) => {\n\
    \        return map_of_numbers.get(a) - map_of_numbers.get(b);\n    });\n    sorted_numbers\
    \ = list_of_numbers.join(\" \");\n    return sorted_numbers;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk6xhy05d.ts(8,25): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpk6xhy05d.ts(8,51): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const translations = [0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const words = numbers.split(' ');\n    const\
    \ nums = words.map(w => {\n        const index = translations.indexOf(w);\n  \
    \      return index !== -1 ? index : w;\n    });\n    return nums.sort((a, b)\
    \ => a - b).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv6lm_bad.ts(10,44): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpv6lm_bad.ts(13,32): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpv6lm_bad.ts(13,36): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // TODO: Calculate\n   \
    \ let n = numbers.split(\" \");\n    n.sort((a, b) => {\n        let n1 = convert(a);\n\
    \        let n2 = convert(b);\n        return n1 - n2;\n    });\n    return n.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9lfp7olx.ts(10,18): error TS2304: Cannot find name
    ''convert''.

    ../../../../../tmp/tmp9lfp7olx.ts(11,18): error TS2304: Cannot find name ''convert''.

    '
  timestamp: 1660014467
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const input: string[] =\
    \ numbers.split(\" \");\n    const output: string[] = [];\n    input.forEach((i)\
    \ => {\n        if (isNaN(parseInt(i, 10))) {\n            if (typeof(i) === \"\
    string\") {\n                switch (i) {\n                    case \"zero\":\n\
    \                        output.push(\"0\");\n                        break;\n\
    \                    case \"one\":\n                        output.push(\"1\"\
    );\n                        break;\n                    case \"two\":\n      \
    \                  output.push(\"2\");\n                        break;\n     \
    \               case \"three\":\n                        output.push(\"3\");\n\
    \                        break;\n                    case \"four\":\n        \
    \                output.push(\"4\");\n                        break;\n       \
    \             case \"five\":\n                        output.push(\"5\");\n  \
    \                      break;\n                    case \"six\":\n           \
    \             output.push(\"6\");\n                        break;\n          \
    \          case \"seven\":\n                        output.push(\"7\");\n    \
    \                    break;\n                    case \"eight\":\n           \
    \             output.push(\"8\");\n                        break;\n          \
    \          case \"nine\":\n                        output.push(\"9\");\n     \
    \                   break;\n                    default:\n                   \
    \     output.push(i);\n                        break;\n                }\n   \
    \         }\n        } else {\n            output.push(i);\n        }\n    });\n\
    \    return output.sort().join(\" \");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmplmhzhdl_.js:59:12)\n   \
    \ at Object.<anonymous> (/tmp/tmplmhzhdl_.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014468
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let numbers_as_ints: Array<number>\
    \ = numbers.split(\" \").map(sort_numbers_helper);\n  let sorted_numbers: Array<number>\
    \ = numbers_as_ints.sort((a, b) => a - b);\n  return sorted_numbers.map(int_to_numeral).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplkgmdj1k.ts(7,63): error TS2304: Cannot find name
    ''sort_numbers_helper''.

    ../../../../../tmp/tmplkgmdj1k.ts(9,29): error TS2304: Cannot find name ''int_to_numeral''.

    '
  timestamp: 1660014467
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numeralMap = {\n \
    \       zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n      \
    \  four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    const numberArray = numbers.split(\" \");\n\
    \    const nums = numberArray.map(num => numeralMap[num]);\n    const sorted =\
    \ nums.sort((a, b) => a - b);\n    return sorted.map(num => {\n        let numeral\
    \ = \"\";\n        for (const key in numeralMap) {\n            if (numeralMap[key]\
    \ === num) {\n                numeral = key;\n            }\n        }\n     \
    \   return numeral;\n    }).join(\" \");\n}\n\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014467
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberals: { [number:\
    \ string]: number } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9,\n  };\n  const sorted_numbers = numbers\n    .split(\" \")\n    .sort((a,\
    \ b) => numberals[a] - numberals[b]);\n  return sorted_numbers.join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014468
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numerals: { [key: string]:\
    \ number } = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five:\
    \ 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    zero: 0,\n\
    \  };\n  let newNumbers = numbers.split(\" \");\n  newNumbers = newNumbers.sort((a,\
    \ b) => numerals[a] - numerals[b]);\n  return newNumbers.join(\" \");\n}\n\nexport\
    \ {\n  transform_numbers,\n  generate_random_numbers,\n  sort_numbers,\n};\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7oap663d.ts(25,3): error TS2304: Cannot find name
    ''transform_numbers''.

    ../../../../../tmp/tmp7oap663d.ts(26,3): error TS2304: Cannot find name ''generate_random_numbers''.

    '
  timestamp: 1660014467
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums_dict = {\n    \
    \    'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n \
    \       'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    let nums = numbers.split('\
    \ ');\n    nums.sort((a, b) => {\n        return nums_dict[a] - nums_dict[b];\n\
    \    });\n    return nums.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014468
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numbersMap = { zero:\
    \ 0, one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine:\
    \ 9 };\n  const numbersList = numbers.split(\" \");\n  const sortedNumbersList\
    \ = numbersList.sort((a, b) => numbersMap[a] - numbersMap[b]);\n  return sortedNumbersList.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014468
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(' ').sort((a,\
    \ b) => numeral_to_int(a) - numeral_to_int(b)).join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4l05b5wk.ts(7,46): error TS2304: Cannot find name
    ''numeral_to_int''.

    ../../../../../tmp/tmp4l05b5wk.ts(7,66): error TS2304: Cannot find name ''numeral_to_int''.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberOrder = {\n  \
    \  zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five:\
    \ 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const unsortedNumbers\
    \ = numbers.split(\" \");\n  const sortedNumbers = unsortedNumbers.sort((a, b)\
    \ => {\n    return numberOrder[a] - numberOrder[b];\n  });\n  return sortedNumbers.join(\"\
    \ \");\n}\n\nexport {\n  to_camel_case,\n  is_isogram,\n  is_triangle,\n  sort_numbers,\n\
    };\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpifyyamsi.ts(27,3): error TS2304: Cannot find name
    ''to_camel_case''.

    ../../../../../tmp/tmpifyyamsi.ts(28,3): error TS2304: Cannot find name ''is_isogram''.

    ../../../../../tmp/tmpifyyamsi.ts(29,3): error TS2304: Cannot find name ''is_triangle''.

    '
  timestamp: 1660014467
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const map: Map<string, number>\
    \ = new Map([\n    ['zero', 0],\n    ['one', 1],\n    ['two', 2],\n    ['three',\
    \ 3],\n    ['four', 4],\n    ['five', 5],\n    ['six', 6],\n    ['seven', 7],\n\
    \    ['eight', 8],\n    ['nine', 9],\n  ]);\n  const numbersArr = numbers.split('\
    \ ');\n  const valuesArr = numbersArr.map((num) => map.get(num) || 0);\n  valuesArr.sort((a,\
    \ b) => a - b);\n  return valuesArr.map((value) => {\n    const numbersKey = Array.from(map.keys()).find((key)\
    \ => map.get(key) === value);\n    return numbersKey;\n  }).join(' ');\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc0cxa3gs.ts(7,14): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpc0cxa3gs.ts(7,40): error TS2552: Cannot find name ''Map''.
    Did you mean ''map''?

    ../../../../../tmp/tmpc0cxa3gs.ts(23,30): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660014468
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numbersMap = {\n \
    \       zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n      \
    \  four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    return numbers\n        .split(\" \")\n   \
    \     .map(n => numbersMap[n])\n        .sort((a, b) => a - b)\n        .map(n\
    \ => {\n            let key = Object.keys(numbersMap).find(key => numbersMap[key]\
    \ === n);\n            return key;\n        })\n        .join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3b__tqr0.ts(24,47): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014468
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const num_map = {\n    \
    \    'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n \
    \       'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    const nums = numbers.split('\
    \ ');\n    nums.sort((a, b) => num_map[a] - num_map[b]);\n    return nums.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014468
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums: number[] = numbers.split('\
    \ ').map(Number);\n    nums.sort((a, b) => a - b);\n    return nums.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpbaezoao6.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbaezoao6.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014468
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  // TODO: implement\n  return\
    \ \"\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmpj9zcrbup.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj9zcrbup.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014468
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let ordered_numbers: string\
    \ = \"\";\n    let unordered_numbers: string[] = numbers.split(\" \");\n    let\
    \ number_dictionary: number[] = [];\n    for (let i = 0; i < unordered_numbers.length;\
    \ i++) {\n        number_dictionary.push(numeral_to_number(unordered_numbers[i]));\n\
    \    }\n    number_dictionary.sort(function (a, b) { return a - b });\n    for\
    \ (let i = 0; i < number_dictionary.length; i++) {\n        ordered_numbers +=\
    \ \" \" + number_to_numeral(number_dictionary[i]);\n    }\n    return ordered_numbers.trim();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnslkto5u.ts(11,32): error TS2304: Cannot find name
    ''numeral_to_number''.

    ../../../../../tmp/tmpnslkto5u.ts(15,34): error TS2304: Cannot find name ''number_to_numeral''.

    '
  timestamp: 1660014468
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let nums: number[] = get_numbers(numbers);\n\
    \  nums.sort((a, b) => a - b);\n  return get_numbers_from_array(nums);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw8_7wxpk.ts(7,24): error TS2304: Cannot find name
    ''get_numbers''.

    ../../../../../tmp/tmpw8_7wxpk.ts(9,10): error TS2304: Cannot find name ''get_numbers_from_array''.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .map(numberToNumeral)\n    .sort((a, b) => a - b)\n    .map(numeralToNumber)\n\
    \    .join(\" \");\n}\n\nexport { sort_numbers };\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu38u6wfh.ts(9,10): error TS2304: Cannot find name
    ''numberToNumeral''.

    ../../../../../tmp/tmpu38u6wfh.ts(10,21): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpu38u6wfh.ts(10,25): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpu38u6wfh.ts(11,10): error TS2304: Cannot find name ''numeralToNumber''.

    '
  timestamp: 1660014471
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \");\n    let num: number[] = [];\n    for (let n of nums) {\n        if (n\
    \ === \"zero\") num.push(0);\n        if (n === \"one\") num.push(1);\n      \
    \  if (n === \"two\") num.push(2);\n        if (n === \"three\") num.push(3);\n\
    \        if (n === \"four\") num.push(4);\n        if (n === \"five\") num.push(5);\n\
    \        if (n === \"six\") num.push(6);\n        if (n === \"seven\") num.push(7);\n\
    \        if (n === \"eight\") num.push(8);\n        if (n === \"nine\") num.push(9);\n\
    \    }\n    //console.log(num);\n    num.sort(function (a, b) { return a - b });\n\
    \    //console.log(num);\n    let result: string[] = [];\n    for (let n of num)\
    \ {\n        if (n === 0) result.push(\"zero\");\n        if (n === 1) result.push(\"\
    one\");\n        if (n === 2) result.push(\"two\");\n        if (n === 3) result.push(\"\
    three\");\n        if (n === 4) result.push(\"four\");\n        if (n === 5) result.push(\"\
    five\");\n        if (n === 6) result.push(\"six\");\n        if (n === 7) result.push(\"\
    seven\");\n        if (n === 8) result.push(\"eight\");\n        if (n === 9)\
    \ result.push(\"nine\");\n    }\n    return result.join(\" \");\n}\n\nexport function\
    \ main() {\n    //console.log(sort_numbers(\"zero one two three four five six\
    \ seven eight nine\"));\n    //console.log(sort_numbers(\"nine seven three one\
    \ five six four eight two zero\"));\n    //console.log(sort_numbers(\"seven four\
    \ eight nine zero three two six one five\"));\n    //console.log(sort_numbers(\"\
    nine one two five six three four eight seven zero\"));\n    //console.log(sort_numbers(\"\
    zero one two\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdbwjmub0.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014471
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(' ').sort((a,\
    \ b) => Number(numbers_dict[a]) - Number(numbers_dict[b])).join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4r5v7big.ts(7,53): error TS2304: Cannot find name
    ''numbers_dict''.

    ../../../../../tmp/tmp4r5v7big.ts(7,79): error TS2304: Cannot find name ''numbers_dict''.

    '
  timestamp: 1660014471
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numList = numbers.split(\"\
    \ \");\n    let sortedNumList = [];\n    for (let word of numList) {\n       \
    \ sortedNumList.push(convertWordToNumber(word));\n    }\n    sortedNumList.sort((a,\
    \ b) => {\n        return a - b;\n    });\n    return sortedNumList.join(\" \"\
    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpse7tg0ri.ts(10,28): error TS2304: Cannot find name
    ''convertWordToNumber''.

    '
  timestamp: 1660014472
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numNumeral = {\n \
    \       'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n\
    \        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    const numbersArr = numbers.split('\
    \ ');\n    const numNumArr = numbersArr.map(num => numNumeral[num]);\n    numNumArr.sort();\n\
    \    const numNumString = numNumArr.join(' ');\n    return numNumString;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmpfgnlza2k.js:29:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpfgnlza2k.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const number_words: string[]\
    \ = numbers.split(\" \");\n    const numbers_obj: { [index: string]: number }\
    \ = {};\n    number_words.forEach((number_word: string) => {\n        numbers_obj[number_word]\
    \ = number_word_to_number(number_word);\n    });\n    const sorted_numbers: number[]\
    \ = number_words.map((number_word: string) => numbers_obj[number_word]);\n   \
    \ const sorted_number_words: string[] = sorted_numbers.map((sorted_number: number)\
    \ =>\n        number_to_number_word(sorted_number)\n    );\n    return sorted_number_words.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2vuc58wh.ts(10,36): error TS2304: Cannot find name
    ''number_word_to_number''.

    ../../../../../tmp/tmp2vuc58wh.ts(14,9): error TS2304: Cannot find name ''number_to_number_word''.

    '
  timestamp: 1660014472
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \");\n    let numsToSort = nums.map(digit => {\n        switch (digit) {\n \
    \           case \"zero\":\n                return 0;\n            case \"one\"\
    :\n                return 1;\n            case \"two\":\n                return\
    \ 2;\n            case \"three\":\n                return 3;\n            case\
    \ \"four\":\n                return 4;\n            case \"five\":\n         \
    \       return 5;\n            case \"six\":\n                return 6;\n    \
    \        case \"seven\":\n                return 7;\n            case \"eight\"\
    :\n                return 8;\n            case \"nine\":\n                return\
    \ 9;\n        }\n    });\n    let sortedNums = numsToSort.sort();\n    return\
    \ sortedNums.join(\" \");\n}\nconsole.log(sort_numbers(\"three one five\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmpn1ipco6p.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpn1ipco6p.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1 3 5

    '
  timestamp: 1660014472
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const wordToNumber: Record<string,\
    \ number> = {\n        zero: 0,\n        one: 1,\n        two: 2,\n        three:\
    \ 3,\n        four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n\
    \        eight: 8,\n        nine: 9,\n    };\n    let numberArray = numbers.split(\"\
    \ \");\n    numberArray.sort((a, b) => wordToNumber[a] - wordToNumber[b]);\n \
    \   return numberArray.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014472
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let num_map = {\n    \"zero\"\
    : 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n\
    \    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n   \
    \ \"nine\": 9\n  };\n  let num_arr = numbers.split(\" \");\n  let converted =\
    \ num_arr.map(num => num_map[num]);\n  converted.sort((a, b) => a - b);\n  let\
    \ result = converted.map(num => {\n    for (let k in num_map) {\n      if (num_map[k]\
    \ === num) {\n        return k;\n      }\n    }\n  });\n  return result.join(\"\
    \ \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014472
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numbersArray = numbers.split(\"\
    \ \");\n  const numbersObject = {\n    zero: 0,\n    one: 1,\n    two: 2,\n  \
    \  three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight:\
    \ 8,\n    nine: 9\n  };\n  const sortedNumbers = numbersArray.sort((a, b) => {\n\
    \    return numbersObject[a] - numbersObject[b];\n  });\n  const result = sortedNumbers.join(\"\
    \ \");\n  return result;\n}\nconsole.log(sort_numbers(\"three one five\"));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    '
  timestamp: 1660014473
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums = numbers.split('\
    \ ');\n    const sorted = nums.sort((a, b) => {\n        return zero_to_nine.indexOf(a)\
    \ - zero_to_nine.indexOf(b);\n    });\n    return sorted.join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpojq3iwm7.ts(9,16): error TS2304: Cannot find name
    ''zero_to_nine''.

    ../../../../../tmp/tmpojq3iwm7.ts(9,42): error TS2304: Cannot find name ''zero_to_nine''.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .map(n => numeralValue(n))\n    .sort((a, b) => a - b)\n    .map(n\
    \ => numeralName(n))\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8ddu3lju.ts(9,15): error TS2304: Cannot find name
    ''numeralValue''.

    ../../../../../tmp/tmp8ddu3lju.ts(11,15): error TS2304: Cannot find name ''numeralName''.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return numbers\n\
    \    .split(\" \")\n    .map((num) => numberMap[num])\n    .sort((a, b) => a -\
    \ b)\n    .map((num) => Object.keys(numberMap).find((k) => numberMap[k] === num))\n\
    \    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5a2zngla.ts(23,42): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numList\
    \ = numbers.split(\" \");\n  numList.sort((a, b) => nums[a] - nums[b]);\n  return\
    \ numList.join(\" \");\n}\n\nconsole.log(sort_numbers(\"three one five\"));\n\
    console.log(sort_numbers(\"nine two seven six five four three two one\"));\nconsole.log(sort_numbers(\"\
    eight seven six five four three two one\"));\nconsole.log(sort_numbers(\"eight\
    \ eight eight eight eight eight eight eight eight eight\"));\nconsole.log(sort_numbers(\"\
    eight seven six five four three two one seven seven seven\"));\nconsole.log(sort_numbers(\"\
    eight seven six five four three two one seven seven seven seven seven seven seven\"\
    ));\nconsole.log(sort_numbers(\"zero one two three four five six seven eight nine\"\
    ));\nconsole.log(sort_numbers(\"zero zero zero zero zero zero zero zero zero zero\"\
    ));\nconsole.log(sort_numbers(\"nine two seven six five four three two one seven\
    \ seven seven seven seven seven seven\"));\nconsole.log(sort_numbers(\"nine two\
    \ seven six five four three two one nine nine nine nine nine nine nine nine\"\
    ));\nconsole.log(sort_numbers(\"eight seven six five four three two one nine nine\
    \ nine nine nine nine nine nine\"));\nconsole.log(sort_numbers(\"eight seven six\
    \ five four three two one nine\"));\nconsole.log(sort_numbers(\"eight seven six\
    \ five four three two one zero\"));\nconsole.log(sort_numbers(\"one zero\"));\n\
    console.log(sort_numbers(\"one zero zero\"));\nconsole.log(sort_numbers(\"one\
    \ zero one\"));\nconsole.log(sort_numbers(\"one one one one one one one one one\
    \ one\"));\nconsole.log(sort_numbers(\"zero zero zero zero zero zero zero zero\
    \ zero zero\"));\nconsole.log(sort_\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp37s5c5am.ts(43,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp37s5c5am.ts(43,9): error TS1005: '','' expected.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const words: string[] =\
    \ numbers.split(' ');\n    words.sort((a, b) => convert_numeral_to_digit(a) -\
    \ convert_numeral_to_digit(b));\n    return words.join(' ');\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp73onlfaw.ts(8,26): error TS2304: Cannot find name
    ''convert_numeral_to_digit''.

    ../../../../../tmp/tmp73onlfaw.ts(8,56): error TS2304: Cannot find name ''convert_numeral_to_digit''.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const mapping = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return numbers\n\
    \    .split(\" \")\n    .map((num) => mapping[num])\n    .sort((a, b) => a - b)\n\
    \    .map((num) => Object.keys(mapping).find((k) => mapping[k] === num))\n   \
    \ .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmgeq96z5.ts(23,40): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014472
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const string_to_numeral =\
    \ {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n   \
    \ five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const\
    \ numeral_to_string = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n\
    \    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7:\
    \ \"seven\",\n    8: \"eight\",\n    9: \"nine\",\n  };\n  const numeral_input\
    \ = numbers.split(\" \").map((numeral) => {\n    return string_to_numeral[numeral];\n\
    \  });\n  numeral_input.sort((a, b) => a - b);\n  const string_output = numeral_input.map((numeral)\
    \ => {\n    return numeral_to_string[numeral];\n  });\n  return string_output.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014473
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  // create map\n  const nums\
    \ = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n \
    \   five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\
    \  const result = numbers.split(\" \").sort((a, b) => nums[a] - nums[b]);\n  return\
    \ result.join(\" \");\n}\n\nconsole.log(sort_numbers(\"three one five\"));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    '
  timestamp: 1660014473
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numbersMap = new Map<string,\
    \ number>([\n    ['zero', 0],\n    ['one', 1],\n    ['two', 2],\n    ['three',\
    \ 3],\n    ['four', 4],\n    ['five', 5],\n    ['six', 6],\n    ['seven', 7],\n\
    \    ['eight', 8],\n    ['nine', 9],\n  ]);\n  return numbers\n    .split(' ')\n\
    \    .map((value) => numbersMap.get(value))\n    .sort((a, b) => a - b)\n    .map((value)\
    \ => [...numbersMap.entries()].find(([, v]) => v === value)[0])\n    .join(' ');\n\
    }\n\ndescribe('', () => {\n  it('', () => {\n    const input = 'three one five';\n\
    \    const expected = 'one three five';\n    expect(sort_numbers(input)).toEqual(expected);\n\
    \  });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp47py1lhv.ts(7,26): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp47py1lhv.ts(23,47): error TS2339: Property ''find'' does
    not exist on type ''any[]''.

    ../../../../../tmp/tmp47py1lhv.ts(27,1): error TS2582: Cannot find name ''describe''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp47py1lhv.ts(28,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp47py1lhv.ts(31,5): error TS2552: Cannot find name ''expect''.
    Did you mean ''expected''?

    '
  timestamp: 1660014473
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const wordToNumber = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    return numbers\n        .split(\" \")\n   \
    \     .map(str => wordToNumber[str])\n        .sort((a, b) => a - b)\n       \
    \ .map(number => Object.keys(wordToNumber).find(key => wordToNumber[key] === number))\n\
    \        .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplglslhgh.ts(23,50): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014472
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numToDigit = new Map<string,\
    \ number>([\n        [\"zero\", 0],\n        [\"one\", 1],\n        [\"two\",\
    \ 2],\n        [\"three\", 3],\n        [\"four\", 4],\n        [\"five\", 5],\n\
    \        [\"six\", 6],\n        [\"seven\", 7],\n        [\"eight\", 8],\n   \
    \     [\"nine\", 9]\n    ]);\n    let result: number[] = numbers.split(\" \").map(numeral\
    \ => numToDigit.get(numeral));\n    result.sort((a, b) => a - b);\n    return\
    \ result.map(digit => [...numToDigit.entries()].find(entry => entry[1] === digit)[0]).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplb6vaoky.ts(7,26): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmplb6vaoky.ts(21,58): error TS2339: Property ''find'' does
    not exist on type ''any[]''.

    '
  timestamp: 1660014473
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const sorted = numbers.split('\
    \ ').sort(n2n);\n    return sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr_sk2fq6.ts(7,44): error TS2304: Cannot find name
    ''n2n''.

    '
  timestamp: 1660014473
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numberWords = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    const result = numbers.split(\" \").map(numberWord\
    \ => numberWords[numberWord]).sort();\n    const resultString = result.join(\"\
    \ \");\n    return resultString;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmp6lpfhcsu.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp6lpfhcsu.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers.split(\" \"\
    ).sort((a, b) => word_to_number(a) - word_to_number(b)).join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpallt8it1.ts(7,44): error TS2304: Cannot find name
    ''word_to_number''.

    ../../../../../tmp/tmpallt8it1.ts(7,64): error TS2304: Cannot find name ''word_to_number''.

    '
  timestamp: 1660014476
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  var res: string = \"\";\n\
    \  numbers = numbers.replace(/\\s/g, \",\");\n  numbers = numbers.replace(/zero/g,\
    \ \"0\");\n  numbers = numbers.replace(/one/g, \"1\");\n  numbers = numbers.replace(/two/g,\
    \ \"2\");\n  numbers = numbers.replace(/three/g, \"3\");\n  numbers = numbers.replace(/four/g,\
    \ \"4\");\n  numbers = numbers.replace(/five/g, \"5\");\n  numbers = numbers.replace(/six/g,\
    \ \"6\");\n  numbers = numbers.replace(/seven/g, \"7\");\n  numbers = numbers.replace(/eight/g,\
    \ \"8\");\n  numbers = numbers.replace(/nine/g, \"9\");\n  var num: string[] =\
    \ numbers.split(\",\");\n  num.sort();\n  for (var i = 0; i < num.length; i++)\
    \ {\n    if (num[i] == \"0\") num[i] = \"zero\";\n    if (num[i] == \"1\") num[i]\
    \ = \"one\";\n    if (num[i] == \"2\") num[i] = \"two\";\n    if (num[i] == \"\
    3\") num[i] = \"three\";\n    if (num[i] == \"4\") num[i] = \"four\";\n    if\
    \ (num[i] == \"5\") num[i] = \"five\";\n    if (num[i] == \"6\") num[i] = \"six\"\
    ;\n    if (num[i] == \"7\") num[i] = \"seven\";\n    if (num[i] == \"8\") num[i]\
    \ = \"eight\";\n    if (num[i] == \"9\") num[i] = \"nine\";\n    res += num[i]\
    \ + \" \";\n  }\n  return res.trim();\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014476
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \");\n    nums.sort((a, b) => {\n        let num_dict = {\n            'zero':\
    \ 0,\n            'one': 1,\n            'two': 2,\n            'three': 3,\n\
    \            'four': 4,\n            'five': 5,\n            'six': 6,\n     \
    \       'seven': 7,\n            'eight': 8,\n            'nine': 9\n        };\n\
    \        return num_dict[a] - num_dict[b];\n    });\n    return nums.join(\" \"\
    );\n}\n\nconsole.log(sort_numbers(\"three one five\"));\nconsole.log(sort_numbers(\"\
    three one nine\"));\nconsole.log(sort_numbers(\"nine one three\"));\nconsole.log(sort_numbers(\"\
    zero one two three four five six seven eight nine\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    one three nine

    one three nine

    zero one two three four five six seven eight nine

    '
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const dict = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const n = numbers.split(\"\
    \ \").map((word) => dict[word]);\n  n.sort((a, b) => a - b);\n  return n.map((num)\
    \ => Object.keys(dict).find((k) => dict[k] === num)).join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_rm2tjpl.ts(21,43): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014476
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const sorted = numbers.split('\
    \ ').sort((a, b) => word_to_int(a) - word_to_int(b));\n  return sorted.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3_onqy28.ts(7,52): error TS2304: Cannot find name
    ''word_to_int''.

    ../../../../../tmp/tmp3_onqy28.ts(7,69): error TS2304: Cannot find name ''word_to_int''.

    '
  timestamp: 1660014476
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let nums = numbers.split(\"\
    \ \");\n    let res: string[] = [];\n    let n = new Map<string, number>();\n\
    \    n.set(\"zero\", 0);\n    n.set(\"one\", 1);\n    n.set(\"two\", 2);\n   \
    \ n.set(\"three\", 3);\n    n.set(\"four\", 4);\n    n.set(\"five\", 5);\n   \
    \ n.set(\"six\", 6);\n    n.set(\"seven\", 7);\n    n.set(\"eight\", 8);\n   \
    \ n.set(\"nine\", 9);\n    let sortByNum = nums.sort((a, b) => n.get(a) - n.get(b));\n\
    \    return sortByNum.join(\" \");\n}\nconsole.log(sort_numbers(\"zero one two\
    \ three four five six seven eight nine\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaju586ha.ts(9,17): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) => numeral_to_number(a) - numeral_to_number(b))\n    .join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj3b5vtxy.ts(9,21): error TS2304: Cannot find name
    ''numeral_to_number''.

    ../../../../../tmp/tmpj3b5vtxy.ts(9,44): error TS2304: Cannot find name ''numeral_to_number''.

    '
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numToInt = { zero: 0,\
    \ one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine:\
    \ 9 };\n  const numArray = numbers.split(\" \");\n  return numArray.sort((a, b)\
    \ => numToInt[a] - numToInt[b]).join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numbersArray = numbers.split(\"\
    \ \");\n  const numbersArraySorted = numbersArray.sort((a, b) => numbersToNumbers[a]\
    \ - numbersToNumbers[b]);\n  return numbersArraySorted.join(\" \");\n}\n\nconsole.log(sort_numbers(\"\
    five three two one eight eight eight six\"));\nconsole.log(sort_numbers(\"four\
    \ four three three two two five five\"));\nconsole.log(sort_numbers(\"seven five\
    \ one nine one four one\"));\nconsole.log(sort_numbers(\"nine seven five four\"\
    ));\nconsole.log(sort_numbers(\"seven nine five four\"));\nconsole.log(sort_numbers(\"\
    three one five\"));\nconsole.log(sort_numbers(\"one five five three\"));\nconsole.log(sort_numbers(\"\
    nine nine nine nine nine nine seven seven seven seven seven seven five five five\
    \ five five five four four four four four four three three three three three three\
    \ two two two two two two one one one one one one\"));\nconsole.log(sort_numbers(\"\
    two two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two two two two two two two two two two two two two two two two two two two\
    \ two\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3j6z29c1.ts(20,1098): error TS1002: Unterminated
    string literal.

    ../../../../../tmp/tmp3j6z29c1.ts(21,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3j6z29c1.ts(21,9): error TS1005: '','' expected.

    '
  timestamp: 1660014477
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    // TODO: implement this\
    \ function\n    return \"\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmpd89n01ga.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd89n01ga.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let stringToNumberMapping\
    \ = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n      \
    \  \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\"\
    : 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n\
    \    let strings = numbers.split(\" \");\n    let sortedStrings = [];\n    for\
    \ (let i = 0; i < strings.length; i++) {\n        let string = strings[i];\n \
    \       if (i === 0) {\n            sortedStrings.push(string);\n        } else\
    \ {\n            let existingSortedStrings = sortedStrings.slice();\n        \
    \    let inserted = false;\n            for (let j = 0; j < existingSortedStrings.length;\
    \ j++) {\n                let existingSortedString = existingSortedStrings[j];\n\
    \                if (stringToNumberMapping[string] < stringToNumberMapping[existingSortedString])\
    \ {\n                    sortedStrings.splice(j, 0, string);\n               \
    \     inserted = true;\n                    break;\n                }\n      \
    \      }\n            if (!inserted) {\n                sortedStrings.push(string);\n\
    \            }\n        }\n    }\n    return sortedStrings.join(\" \");\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberals = numbers.split(\"\
    \ \");\n  const dict = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const numbersArray = numberals.map(number => dict[number]);\n  numbersArray.sort((a,\
    \ b) => a - b);\n  let result = \"\";\n  for (let i = 0; i < numbersArray.length;\
    \ i++) {\n    for (let key in dict) {\n      if (dict[key] === numbersArray[i])\
    \ {\n        result += key + \" \";\n      }\n    }\n  }\n  return result.trim();\n\
    }\n\nconsole.log(sort_numbers(\"one one zero zero one three five\"));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'zero zero one one one three five

    '
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    var number_map = {\n   \
    \     'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n\
    \        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    var result = numbers.split('\
    \ ').map(function (i) {\n        return number_map[i];\n    }).sort().map(function\
    \ (i) {\n        return _.invert(number_map)[i];\n    }).join(' ');\n    return\
    \ result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpggf2g_xn.ts(22,16): error TS2304: Cannot find name
    ''_''.

    '
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const strs = numbers.split(\"\
    \ \");\n  const nums = strs.map((str) => numMap[str]);\n  const sorted = [...nums].sort((a,\
    \ b) => a - b);\n  const result = sorted.map((num) => strs[nums.indexOf(num)]);\n\
    \  return result.join(\" \");\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const nums = [\"zero\",\
    \ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n    const numArr = numbers.split(\" \");\n    for (let i = 0; i\
    \ < numArr.length; i++) {\n        for (let j = i + 1; j < numArr.length; j++)\
    \ {\n            if (nums.indexOf(numArr[i]) > nums.indexOf(numArr[j])) {\n  \
    \              const tmp = numArr[i];\n                numArr[i] = numArr[j];\n\
    \                numArr[j] = tmp;\n            }\n        }\n    }\n    return\
    \ numArr.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberMapping = {\n\
    \    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five:\
    \ 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return\
    \ numbers\n    .split(\" \")\n    .map((n) => numberMapping[n])\n    .sort((a,\
    \ b) => a - b)\n    .map((n) => {\n      for (const key in numberMapping) {\n\
    \        if (numberMapping[key] === n) {\n          return key;\n        }\n \
    \     }\n    })\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) => numberals.indexOf(a) - numberals.indexOf(b))\n    .join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt55l0b9l.ts(9,21): error TS2552: Cannot find name
    ''numberals''. Did you mean ''numbers''?

    ../../../../../tmp/tmpt55l0b9l.ts(9,44): error TS2552: Cannot find name ''numberals''.
    Did you mean ''numbers''?

    '
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numList = numbers.split('\
    \ ');\n    let digits = [];\n    numList.forEach(n => {\n        switch (n) {\n\
    \            case 'zero':\n                digits.push(0);\n                break;\n\
    \            case 'one':\n                digits.push(1);\n                break;\n\
    \            case 'two':\n                digits.push(2);\n                break;\n\
    \            case 'three':\n                digits.push(3);\n                break;\n\
    \            case 'four':\n                digits.push(4);\n                break;\n\
    \            case 'five':\n                digits.push(5);\n                break;\n\
    \            case 'six':\n                digits.push(6);\n                break;\n\
    \            case 'seven':\n                digits.push(7);\n                break;\n\
    \            case 'eight':\n                digits.push(8);\n                break;\n\
    \            case 'nine':\n                digits.push(9);\n                break;\n\
    \        }\n    });\n    let sorted = false;\n    let temp;\n    while (!sorted)\
    \ {\n        sorted = true;\n        for (let i = 0; i < digits.length - 1; i++)\
    \ {\n            if (digits[i] > digits[i + 1]) {\n                temp = digits[i];\n\
    \                digits[i] = digits[i + 1];\n                digits[i + 1] = temp;\n\
    \                sorted = false;\n            }\n        }\n    }\n    return\
    \ digits.reduce((acc, cur) => {\n        if (acc.length > 0) {\n            acc\
    \ = acc + ' ';\n        }\n        switch (cur) {\n            case 0:\n     \
    \           acc = acc + 'zero';\n                break;\n            case 1:\n\
    \                acc = acc + 'one';\n                break;\n            case\
    \ 2:\n                acc = acc + 'two';\n                break;\n           \
    \ case 3:\n                acc = acc + 'three';\n                break;\n    \
    \        case 4:\n                acc = acc + 'four';\n                break;\n\
    \            case 5:\n                acc = acc + 'five';\n                break;\n\
    \            case 6:\n                acc = acc + 'six';\n                break;\n\
    \            case 7:\n                acc = acc\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxhgenweu.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014477
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let numMap = new Map();\n\
    \  let numArr = numbers.split(\" \");\n  numMap.set(\"zero\", 0);\n  numMap.set(\"\
    one\", 1);\n  numMap.set(\"two\", 2);\n  numMap.set(\"three\", 3);\n  numMap.set(\"\
    four\", 4);\n  numMap.set(\"five\", 5);\n  numMap.set(\"six\", 6);\n  numMap.set(\"\
    seven\", 7);\n  numMap.set(\"eight\", 8);\n  numMap.set(\"nine\", 9);\n  let result\
    \ = \"\";\n  let resultArr = [];\n  for (let i = 0; i < numArr.length; i++) {\n\
    \    resultArr.push(numMap.get(numArr[i]));\n  }\n  resultArr.sort((a, b) => a\
    \ - b);\n  for (let i = 0; i < resultArr.length; i++) {\n    for (let [key, value]\
    \ of numMap.entries()) {\n      if (resultArr[i] === value) {\n        result\
    \ += key + \" \";\n      }\n    }\n  }\n  return result.trim();\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2vf5vbvv.ts(7,20): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let nums: number[] = [];\n\
    \  const numDict = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9,\n  };\n  numbers.split(\" \").forEach((num) => {\n    nums.push(numDict[num]);\n\
    \  });\n  nums.sort((a, b) => a - b);\n  let result: string = \"\";\n  for (let\
    \ i = 0; i < nums.length; i++) {\n    for (let key in numDict) {\n      if (numDict[key]\
    \ === nums[i]) {\n        result += `${key} `;\n      }\n    }\n  }\n  return\
    \ result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014478
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(' ').sort((a,\
    \ b) => {\n        return numberal_to_number(a) - numberal_to_number(b);\n   \
    \ }).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ymnhr7v.ts(8,16): error TS2304: Cannot find name
    ''numberal_to_number''.

    ../../../../../tmp/tmp4ymnhr7v.ts(8,40): error TS2304: Cannot find name ''numberal_to_number''.

    '
  timestamp: 1660014477
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let numbers_map = {\n    'zero':\
    \ 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five':\
    \ 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n \
    \ return numbers.split(' ').sort((a, b) => numbers_map[a] - numbers_map[b]).join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014478
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const num_map = {\n    \
    \    'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n \
    \       'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    const nums = numbers.split('\
    \ ');\n    const num_vals = nums.map(x => num_map[x]);\n    num_vals.sort((a,\
    \ b) => a - b);\n    const sorted_num_strs = num_vals.map(x => Object.keys(num_map).find(k\
    \ => num_map[k] === x));\n    return sorted_num_strs.join(' ');\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9uxjunzu.ts(22,68): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014480
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    var nums = numbers.split(\"\
    \ \");\n    var num_digit: number[] = [];\n    var ordered_nums: string[] = [];\n\
    \    for (var i = 0; i < nums.length; i++) {\n        switch (nums[i]) {\n   \
    \         case \"zero\":\n                num_digit.push(0);\n               \
    \ break;\n            case \"one\":\n                num_digit.push(1);\n    \
    \            break;\n            case \"two\":\n                num_digit.push(2);\n\
    \                break;\n            case \"three\":\n                num_digit.push(3);\n\
    \                break;\n            case \"four\":\n                num_digit.push(4);\n\
    \                break;\n            case \"five\":\n                num_digit.push(5);\n\
    \                break;\n            case \"six\":\n                num_digit.push(6);\n\
    \                break;\n            case \"seven\":\n                num_digit.push(7);\n\
    \                break;\n            case \"eight\":\n                num_digit.push(8);\n\
    \                break;\n            case \"nine\":\n                num_digit.push(9);\n\
    \                break;\n        }\n    }\n    num_digit.sort(function (a, b)\
    \ { return a - b });\n    for (var i = 0; i < num_digit.length; i++) {\n     \
    \   switch (num_digit[i]) {\n            case 0:\n                ordered_nums.push(\"\
    zero\");\n                break;\n            case 1:\n                ordered_nums.push(\"\
    one\");\n                break;\n            case 2:\n                ordered_nums.push(\"\
    two\");\n                break;\n            case 3:\n                ordered_nums.push(\"\
    three\");\n                break;\n            case 4:\n                ordered_nums.push(\"\
    four\");\n                break;\n            case 5:\n                ordered_nums.push(\"\
    five\");\n                break;\n            case 6:\n                ordered_nums.push(\"\
    six\");\n                break;\n            case 7:\n                ordered_nums.push(\"\
    seven\");\n                break;\n            case 8:\n                ordered_nums.push(\"\
    eight\");\n                break;\n            case 9:\n                ordered_nums\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoh3kvm9t.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014481
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  // Write your code here\n\
    \  const numberals = [\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\"\
    ,\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n\
    \    \"nine\",\n  ];\n  const nums = numbers.split(\" \");\n  const nums_sorted\
    \ = nums.sort((a, b) => {\n    return numberals.indexOf(a) - numberals.indexOf(b);\n\
    \  });\n  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014481
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const words = numbers.split(\"\
    \ \");\n  const number = words.map((word) => getNumberFromWord(word));\n  const\
    \ sortedNumbers = number.sort((a, b) => a - b);\n  const sortedWords = sortedNumbers.map((num)\
    \ => getWordFromNumber(num));\n  return sortedWords.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpos_oj5_0.ts(8,38): error TS2304: Cannot find name
    ''getNumberFromWord''.

    ../../../../../tmp/tmpos_oj5_0.ts(10,50): error TS2304: Cannot find name ''getWordFromNumber''.

    '
  timestamp: 1660014481
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort((a, b) => numberals[a] - numberals[b])\n    .join(\" \");\n}\n\
    \nexport { sort_numbers };\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphd30f53f.ts(9,21): error TS2552: Cannot find name
    ''numberals''. Did you mean ''numbers''?

    ../../../../../tmp/tmphd30f53f.ts(9,36): error TS2552: Cannot find name ''numberals''.
    Did you mean ''numbers''?

    '
  timestamp: 1660014481
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  // Empty string is falsey\n\
    \  if (!numbers) {\n    return '';\n  }\n\n  // Split the string into an array\
    \ of numeral strings\n  const numeralArray = numbers.split(' ');\n\n  // Define\
    \ an object to match numeral strings to numerical values\n  const numeralDictionary\
    \ = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n \
    \   five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\n\
    \  // Swap out the numeral strings for their numerical equivalents\n  const numberArray\
    \ = numeralArray.map((numeral) => numeralDictionary[numeral]);\n\n  // Sort the\
    \ numberals from smallest to largest\n  const sortedNumberArray = numberArray.sort((a,\
    \ b) => a - b);\n\n  // Swap out the numerical equivalents for their numeral strings\n\
    \  const sortedNumeralArray = sortedNumberArray.map((number) => {\n    for (const\
    \ [key, value] of Object.entries(numeralDictionary)) {\n      if (value === number)\
    \ {\n        return key;\n      }\n    }\n  });\n\n  // Rejoin the numeral strings\
    \ and return\n  return sortedNumeralArray.join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2mekygfs.ts(37,39): error TS2339: Property ''entries''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1660014481
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let newArray = numbers.split(\"\
    \ \").sort(function(a, b) {\n    if (getNumber(a) > getNumber(b)) {\n      return\
    \ 1;\n    } else if (getNumber(a) < getNumber(b)) {\n      return -1;\n    } else\
    \ {\n      return 0;\n    }\n  });\n  return newArray.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8x2b8zob.ts(8,9): error TS2304: Cannot find name
    ''getNumber''.

    ../../../../../tmp/tmp8x2b8zob.ts(8,24): error TS2304: Cannot find name ''getNumber''.

    ../../../../../tmp/tmp8x2b8zob.ts(10,16): error TS2304: Cannot find name ''getNumber''.

    ../../../../../tmp/tmp8x2b8zob.ts(10,31): error TS2304: Cannot find name ''getNumber''.

    '
  timestamp: 1660014482
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numberMap = {\n  \
    \      zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n       \
    \ four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    const nums = numbers.split(\" \");\n    const\
    \ numsToSort = nums.map(num => numberMap[num]);\n    numsToSort.sort((a, b) =>\
    \ a - b);\n    const sortedNums = numsToSort.map(num => {\n        let sortedNum\
    \ = \"\";\n        for (const key in numberMap) {\n            if (numberMap[key]\
    \ === num) {\n                sortedNum = key;\n            }\n        }\n   \
    \     return sortedNum;\n    });\n    return sortedNums.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014482
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    let numbersArray = numbers.split(\"\
    \ \");\n    numbersArray.sort(function (a, b) {\n        let words = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n        return words.indexOf(a) - words.indexOf(b);\n    });\n \
    \   return numbersArray.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const a = numbers.split('\
    \ ');\n    const i = a.map(n => {\n        return Number(translate_number(n));\n\
    \    })\n    i.sort((a, b) => a - b);\n    return i.map(n => {\n        return\
    \ translate_number(n);\n    }).join(' ');\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9cu1ekun.ts(9,23): error TS2304: Cannot find name
    ''translate_number''.

    ../../../../../tmp/tmp9cu1ekun.ts(13,16): error TS2304: Cannot find name ''translate_number''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(\"\
    \ \").sort((a, b) => {\n        return numeralDict[a] - numeralDict[b];\n    }).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxn87h5qv.ts(8,16): error TS2304: Cannot find name
    ''numeralDict''.

    ../../../../../tmp/tmpxn87h5qv.ts(8,33): error TS2304: Cannot find name ''numeralDict''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return numbers\n\
    \    .split(\" \")\n    .map((num) => nums[num])\n    .sort((a, b) => a - b)\n\
    \    .map((num) => Object.keys(nums).find((key) => nums[key] === num))\n    .join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbg4qggmn.ts(23,37): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numbersAsNums = numbers.split(\"\
    \ \").map(n => numberToNumeral[n]);\n  numbersAsNums.sort((a, b) => a - b);\n\
    \  return numbersAsNums.map(n => numeralToNumber[n]).join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcr0x012v.ts(7,53): error TS2304: Cannot find name
    ''numberToNumeral''.

    ../../../../../tmp/tmpcr0x012v.ts(9,33): error TS2304: Cannot find name ''numeralToNumber''.

    '
  timestamp: 1660014482
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const num_word_lookup = {\n\
    \    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"\
    four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\"\
    : 8,\n    \"nine\": 9\n  };\n  return numbers.split(\" \").sort((a, b) => num_word_lookup[a]\
    \ - num_word_lookup[b]).join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014482
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return numbers\n    .split(\"\
    \ \")\n    .sort(\n      (a, b) =>\n        [\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"].indexOf(a) -\n\
    \        [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\",\
    \ \"seven\", \"eight\", \"nine\"].indexOf(b)\n    )\n    .join(\" \");\n}\n\n\
    console.log(sort_numbers(\"three one five\"));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  return (\n    numbers\n  \
    \    .split(\" \")\n      .map((number) => ({\n        number,\n        value:\
    \ numbers_to_value[number],\n      }))\n      .sort((a, b) => a.value - b.value)\n\
    \      .map((entry) => entry.number)\n      .join(\" \")\n  );\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1laccv2x.ts(12,16): error TS2304: Cannot find name
    ''numbers_to_value''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const translatedNumbers =\
    \ numbers.split(' ').map(toNumber);\n  translatedNumbers.sort((a, b) => a - b);\n\
    \  return translatedNumbers.map(toWord).join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmx1ufalb.ts(7,52): error TS2552: Cannot find name
    ''toNumber''. Did you mean ''numbers''?

    ../../../../../tmp/tmpmx1ufalb.ts(8,36): error TS2362: The left-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    ../../../../../tmp/tmpmx1ufalb.ts(8,40): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpmx1ufalb.ts(9,32): error TS2304: Cannot find name ''toWord''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const map = {\n    zero: 0,\n\
    \    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return numbers\n   \
    \ .split(\" \")\n    .map((a) => map[a])\n    .sort((a, b) => a - b)\n    .map((a)\
    \ => Object.keys(map).find((k) => map[k] === a))\n    .join(\" \");\n}\n\nconsole.log(sort_numbers(\"\
    three one five\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplduc1_lu.ts(23,34): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const toNumber = (num: string):\
    \ number => {\n        switch (num) {\n            case 'zero': return 0;\n  \
    \          case 'one': return 1;\n            case 'two': return 2;\n        \
    \    case 'three': return 3;\n            case 'four': return 4;\n           \
    \ case 'five': return 5;\n            case 'six': return 6;\n            case\
    \ 'seven': return 7;\n            case 'eight': return 8;\n            case 'nine':\
    \ return 9;\n        }\n    }\n    const numbersArray = numbers.split(' ').map(toNumber);\n\
    \    const sortedNumbers = numbersArray.sort((a, b) => a - b);\n    const sortedNumbersString\
    \ = sortedNumbers.map(toWord).join(' ');\n    return sortedNumbersString;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvgqtxxgw.ts(23,51): error TS2304: Cannot find name
    ''toWord''.

    '
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const NUMBERS = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  return numbers\n\
    \    .split(\" \")\n    .map((n) => NUMBERS[n])\n    .sort((a, b) => a - b)\n\
    \    .map((n) => Object.keys(NUMBERS).find((k) => NUMBERS[k] === n))\n    .join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8fyvy3nh.ts(23,38): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014482
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numHash: { [key: string]:\
    \ number } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four:\
    \ 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n\
    \  };\n  let stringArray = numbers.split(\" \");\n  stringArray.sort((a, b) =>\
    \ {\n    return numHash[a] - numHash[b];\n  });\n  return stringArray.join(\"\
    \ \");\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014482
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const words = numbers.split(\"\
    \ \");\n  const sortable = words.map(number_to_numerals);\n  const sorted = sortable.sort();\n\
    \  const words_sorted = sorted.map(numerals_to_number);\n  return words_sorted.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpejqxonip.ts(8,30): error TS2304: Cannot find name
    ''number_to_numerals''.

    ../../../../../tmp/tmpejqxonip.ts(10,35): error TS2304: Cannot find name ''numerals_to_number''.

    '
  timestamp: 1660014482
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  let num_lookup = {\n    \"\
    zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\"\
    : 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n\
    \    \"nine\": 9\n  };\n  let str_lookup = {\n    0: \"zero\",\n    1: \"one\"\
    ,\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n  \
    \  6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\"\n  };\n\
    \  let num_arr = numbers.split(\" \");\n  let str_arr = [];\n  for (let num of\
    \ num_arr) {\n    str_arr.push(num_lookup[num]);\n  }\n  let sorted_arr = str_arr.sort((a,\
    \ b) => a - b);\n  let answer = \"\";\n  for (let str of sorted_arr) {\n    answer\
    \ += str_lookup[str] + \" \";\n  }\n  return answer.slice(0, -1);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmpclx7nzlc.js:48:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpclx7nzlc.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014483
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numerals: { [key: string]:\
    \ number } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four:\
    \ 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n\
    \  };\n  return numbers\n    .split(\" \")\n    .sort((a, b) => numerals[a] -\
    \ numerals[b])\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014485
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    //Create a set of numberals\
    \ to look up\n    const numberals: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\
    \    const numeralMap: Record<string, number> = {\n        zero: 0,\n        one:\
    \ 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n\
    \        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9,\n   \
    \ };\n    //Create a dictionary to store the results of our look up\n    const\
    \ results: Record<string, number> = {};\n    //Split the string into an array\
    \ of words\n    const parts: string[] = numbers.split(\" \");\n    //Iterate through\
    \ the array of words and look up their value in the dictionary\n    for (let i\
    \ = 0; i < parts.length; i++) {\n        //Get the current value for this word\n\
    \        const word: string = parts[i];\n        //Make sure we have a result\
    \ for this word\n        if (results[word] === undefined) {\n            //Look\
    \ up the word in the dictionary\n            results[word] = numeralMap[word];\n\
    \        }\n    }\n    //Convert our results object into an array of values\n\
    \    const values: number[] = Object.values(results);\n    //Sort the values from\
    \ smallest to largest\n    values.sort();\n    //Build the results string\n  \
    \  let result: string = \"\";\n    //Iterate through the sorted values\n    for\
    \ (let i = 0; i < values.length; i++) {\n        //Get the value to test\n   \
    \     const value: number = values[i];\n        //Make sure we haven't added the\
    \ last value\n        if (i !== values.length - 1) {\n            //Add the value\
    \ to the result string\n            result += `${value} `;\n        } else {\n\
    \            //Add the last value to the result string\n            result +=\
    \ `${value}`;\n        }\n    }\n    //Return the result\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8rtvam0o.ts(36,37): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    '
  timestamp: 1660014485
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const hash: { [index: string]:\
    \ number } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four:\
    \ 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n\
    \  };\n  const nums: number[] = numbers.split(\" \").map((num) => hash[num]);\n\
    \  return nums.sort((a, b) => a - b).map((num) => Object.keys(hash).find((k) =>\
    \ hash[k] === num)).join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsnn9mfsj.ts(20,68): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660014485
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const NUMBERS: any = {\n\
    \        zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n     \
    \   four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    return numbers\n        .split(\" \")\n   \
    \     .sort((n1, n2) => NUMBERS[n1] - NUMBERS[n2])\n        .join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nums = numbers.split(\"\
    \ \");\n  nums.sort((n1, n2) => number_to_numeral(n1) - number_to_numeral(n2));\n\
    \  return nums.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5ld8ltgw.ts(8,25): error TS2304: Cannot find name
    ''number_to_numeral''.

    ../../../../../tmp/tmp5ld8ltgw.ts(8,49): error TS2304: Cannot find name ''number_to_numeral''.

    '
  timestamp: 1660014485
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  var numbers_split = numbers.split(\"\
    \ \");\n  var numbers_sorted = numbers_split.sort();\n  return numbers_sorted.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five nine three'\n\
    \nshould loosely deep-equal\n\n'three five nine'\n    at test (/tmp/tmpfn7ww6je.js:16:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfn7ww6je.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numeralToValue = {\n\
    \    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five:\
    \ 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numeralArr\
    \ = numbers.split(\" \");\n  const numeralValArr = numeralArr.map((numeral) =>\
    \ {\n    return numeralToValue[numeral];\n  });\n  numeralValArr.sort((a, b) =>\
    \ a - b);\n  const sortedArr = numeralValArr.map((val) => {\n    for (let numeral\
    \ in numeralToValue) {\n      if (numeralToValue[numeral] === val) {\n       \
    \ return numeral;\n      }\n    }\n  });\n  return sortedArr.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const sortedNumbers = numbers.split('\
    \ ').sort((a, b) => NUMERALS.indexOf(a) - NUMERALS.indexOf(b));\n  return sortedNumbers.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzrqestao.ts(7,59): error TS2552: Cannot find name
    ''NUMERALS''. Did you mean ''numbers''?

    ../../../../../tmp/tmpzrqestao.ts(7,81): error TS2552: Cannot find name ''NUMERALS''.
    Did you mean ''numbers''?

    '
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numWordMap = {\n   \
    \ zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n\
    \    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums =\
    \ numbers.split(\" \");\n  const sortedNums = nums.sort((a, b) => numWordMap[a]\
    \ - numWordMap[b]);\n  return sortedNums.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    return numbers.split(\"\
    \ \").sort((a, b) => numberals[a] - numberals[b]).join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8i51_ywg.ts(7,46): error TS2552: Cannot find name
    ''numberals''. Did you mean ''numbers''?

    ../../../../../tmp/tmp8i51_ywg.ts(7,61): error TS2552: Cannot find name ''numberals''.
    Did you mean ''numbers''?

    '
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numberDict = {\n \
    \       zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n      \
    \  four: 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight:\
    \ 8,\n        nine: 9\n    };\n    const sorted: string[] = numbers.split(\" \"\
    ).sort((x, y) => {\n        return numberDict[x] - numberDict[y];\n    });\n \
    \   return sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numeralNumbers: {\
    \ [key: string]: number } = {\n        zero: 0,\n        one: 1,\n        two:\
    \ 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n\
    \        seven: 7,\n        eight: 8,\n        nine: 9,\n    };\n    return numbers\n\
    \        .split(\" \")\n        .map((x) => numeralNumbers[x])\n        .sort((a,\
    \ b) => a - b)\n        .map((x) => {\n            for (const key in numeralNumbers)\
    \ {\n                if (numeralNumbers[key] === x) {\n                    return\
    \ key;\n                }\n            }\n            return null;\n        })\n\
    \        .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const words = numbers.split(\"\
    \ \");\n  const lookup = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9,\n  };\n  const wordValues = words.map((word) => lookup[word]);\n\
    \  wordValues.sort((a, b) => a - b);\n  return wordValues.map((value) => {\n \
    \   const keys = Object.keys(lookup);\n    for (let i = 0; i < keys.length; i++)\
    \ {\n      if (lookup[keys[i]] === value) {\n        return keys[i];\n      }\n\
    \    }\n  }).join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const vals = numbers.split('\
    \ ').map(function(num) {\n        return { num: num, val: to_val(num) };\n   \
    \ });\n    const sorted = vals.sort(function(a, b) {\n        return a.val - b.val;\n\
    \    });\n    return sorted.map(function(obj) {\n        return obj.num;\n   \
    \ }).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4p7qnc62.ts(8,33): error TS2304: Cannot find name
    ''to_val''.

    '
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numerals = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n  const numArr = numbers.split(\" \");\n  numArr.sort((a, b) =>\
    \ {\n    return numerals.indexOf(a) - numerals.indexOf(b);\n  });\n  return numArr.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const NUMBERS = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"];\n    const split = numbers.split(\" \");\n    const ints = split.map(s\
    \ => NUMBERS.indexOf(s));\n    const sortedInts = ints.sort((a, b) => a - b);\n\
    \    const sortedNums = sortedInts.map(i => NUMBERS[i]);\n    return sortedNums.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const numberMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const splittedNumbers\
    \ = numbers.split(\" \");\n  const sortedNumbers = splittedNumbers.sort((a, b)\
    \ => {\n    return numberMap[a] - numberMap[b];\n  });\n  return sortedNumbers.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014486
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n    const numMap = new Map([\n\
    \        ['zero', 0],\n        ['one', 1],\n        ['two', 2],\n        ['three',\
    \ 3],\n        ['four', 4],\n        ['five', 5],\n        ['six', 6],\n     \
    \   ['seven', 7],\n        ['eight', 8],\n        ['nine', 9]\n    ]);\n    return\
    \ numbers.split(' ').sort((a, b) => numMap.get(a) - numMap.get(b)).join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55jqq_pv.ts(7,24): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014486
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: string): string {\n  const nummap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numarr =\
    \ numbers.split(\" \");\n  const result = numarr.sort((a, b) => nummap[a] - nummap[b]);\n\
    \  return result.join(\" \");\n}\n\nconst sort_numbers_simple = (numbers: string):\
    \ string => {\n  return numbers\n    .split(\" \")\n    .sort((a, b) => Number(a)\
    \ - Number(b))\n    .join(\" \");\n};\n\nconsole.log(sort_numbers(\"three one\
    \ five\"));\nconsole.log(sort_numbers_simple(\"three one five\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    three one five

    '
  timestamp: 1660014486
