name: HumanEval_108_count_nums
language: ts
prompt: "//Write a function count_nums which takes an array of integers and returns\n\
  // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
  \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
  // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
  \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
  \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
  }\n\ntest();"
completions: ["    return 0;\n}\n", "  let num_count = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (get_sum_of_digits(arr[i]) > 0) {\n      num_count++;\n    }\n\
    \  }\n  return num_count;\n}\n", "  let count = 0;\n  arr.forEach(num => {\n \
    \   if (Math.abs(num) > 9) {\n      let digits = num.toString().split(\"\");\n\
    \      let sum = 0;\n      digits.forEach(digit => (sum += Number(digit)));\n\
    \      if (sum > 0) {\n        count++;\n      }\n    } else {\n      if (num\
    \ > 0) {\n        count++;\n      }\n    }\n  });\n  return count;\n}\n", "  \
    \  var count: number = 0;\n    for (var i = 0; i < arr.length; i++) {\n      \
    \  if (sum_signed_digits(arr[i]) > 0) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n", "    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            if (arr[i] % 10 > 0) {\n    \
    \            count++;\n            }\n        } else {\n            if (arr[i]\
    \ % 10 > 0) {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n", "    return arr.filter(x => Math.abs(x).toString().split('').reduce((a,b)\
    \ => a + parseInt(b), 0) > 0).length;\n}\n", "    let count = 0;\n    arr.forEach(element\
    \ => {\n        let sum = 0;\n        if (element < 0) {\n            element\
    \ = element * -1;\n        }\n        while (element > 0) {\n            sum +=\
    \ element % 10;\n            element = Math.floor(element / 10);\n        }\n\
    \        if (sum > 0) {\n            count++;\n        }\n    });\n    return\
    \ count;\n}\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1,\
    \ 1, 2]));\n", "    let count = 0;\n    for (let num of arr) {\n        let digits\
    \ = Math.abs(num).toString().split('');\n        let sum = 0;\n        for (let\
    \ digit of digits) {\n            sum += parseInt(digit);\n        }\n       \
    \ if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  // return arr.filter(n => n.toString().split('').reduce((a, c) => a +\
    \ Math.abs(parseInt(c)), 0) > 0).length;\n  return arr.filter(n => n.toString().split('').reduce((a,\
    \ c) => a + Math.abs(parseInt(c)), 0) > 0).length;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n    \
    \    let sum = 0;\n        while (temp != 0) {\n            sum += temp % 10;\n\
    \            temp = Math.floor(temp / 10);\n        }\n        if (sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "    var result\
    \ = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (sum_digits(arr[i])\
    \ > 0) {\n            result++;\n        }\n    }\n    return result;\n}\n", " \
    \ let count = 0;\n  for (let num of arr) {\n    if (sum_of_digits(num) > 0) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    // your code here\n \
    \   var total = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (sum_digits(arr[i])\
    \ > 0) {\n            total++;\n        }\n    }\n    return total;\n}\n", " \
    \   let total: number = 0;\n    arr.forEach(function (value) {\n        let digit:\
    \ number = Math.abs(value);\n        let sum: number = 0;\n        while (digit\
    \ > 0) {\n            sum += digit % 10;\n            digit = Math.floor(digit\
    \ / 10);\n        }\n        if (sum > 0) {\n            total++;\n        }\n\
    \    });\n    return total;\n}\n", "  let sum: number = 0;\n  let result: number\
    \ = 0;\n  let res: string;\n  arr.forEach(x => {\n    res = x.toString();\n  \
    \  sum = 0;\n    res.split(\"\").forEach(y => {\n      if (y !== \"-\") {\n  \
    \      sum += Number(y);\n      }\n    });\n    if (sum > 0) {\n      result++;\n\
    \    }\n  });\n  return result;\n}\n", "  return arr.filter(x => sum_of_digits(x)\
    \ > 0).length;\n}\n", "    let result = 0;\n    for (let i of arr) {\n       \
    \ let digits = i.toString().split('');\n        let sum = 0;\n        for (let\
    \ j of digits) {\n            sum += parseInt(j);\n        }\n        if (sum\
    \ > 0) {\n            result++;\n        }\n    }\n    return result;\n}\n", " \
    \   return 0;\n}\n", "  let count = 0;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    let arr_sum = 0;\n    let current = Math.abs(arr[i]);\n    while (current)\
    \ {\n      arr_sum += current % 10;\n      current = Math.floor(current / 10);\n\
    \    }\n    if (arr_sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}",
  "    var result = 0;\n    for (var i = 0; i < arr.length; i++) {\n        var temp\
    \ = arr[i];\n        var sum = 0;\n        if (temp < 0) {\n            var x\
    \ = temp * -1;\n            var y = x % 10;\n            var z = x - y;\n    \
    \        var a = z / 10;\n            sum = sum + y + a;\n        }\n        else\
    \ {\n            while (temp > 0) {\n                var y = temp % 10;\n    \
    \            var z = temp - y;\n                var a = z / 10;\n            \
    \    sum = sum + y;\n                temp = a;\n            }\n        }\n   \
    \     if (sum > 0) {\n            result = result + 1;\n        }\n    }\n   \
    \ return result;\n}\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));", "    let count = 0;\n   \
    \ arr.forEach(e => {\n        if (Math.abs(e) > 0) {\n            count++;\n \
    \       }\n    });\n    return count;\n}\n", "    return arr.filter(\n       \
    \ x => {\n            let tmp = Math.abs(x);\n            let cnt = 0;\n     \
    \       while (tmp > 0) {\n                cnt += tmp % 10;\n                tmp\
    \ = Math.floor(tmp / 10);\n            }\n            return cnt > 0;\n      \
    \  }\n    ).length;\n}\n", "  let count = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    let digits = arr[i]\n      .toString()\n      .split(\"\")\n   \
    \   .map(str => parseInt(str, 10));\n    let sum = 0;\n    for (let j = 0; j <\
    \ digits.length; j++) {\n      sum += digits[j];\n    }\n    if (sum > 0) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    let cnt = 0;\n    arr.forEach(element\
    \ => {\n        let digitSum = getDigitSum(element);\n        if (digitSum > 0)\
    \ {\n            cnt += 1;\n        }\n    });\n    return cnt;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n\
    \        let sum = 0;\n        while (num != 0) {\n            let digit = num\
    \ % 10;\n            sum += digit;\n            num = (num - digit) / 10;\n  \
    \      }\n        if (sum > 0) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n", "    let count = 0;\n    for (let num of arr) {\n     \
    \   if (num < 0) {\n            num = num*-1;\n        }\n        if (get_digit_sum(num)\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "   \
    \ let count = 0;\n    arr.forEach(value => {\n        let total = 0;\n       \
    \ if (value < 0) {\n            total = value * -1;\n        } else {\n      \
    \      total = value;\n        }\n        while (total > 0) {\n            total\
    \ = total - (total % 10);\n            total = total / 10;\n            count++;\n\
    \        }\n    });\n    return count;\n}\n", "    let sum: number = 0;\n    for\
    \ (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n    \
    \        sum += -Math.floor(arr[i] / 10) % 10;\n        } else {\n           \
    \ sum += Math.floor(arr[i] / 10) % 10;\n        }\n    }\n    return sum;\n}\n\
    console.log(count_nums([]));\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1,\
    \ 1, 2]));", "    let result = 0;\n    for (let i of arr) {\n        let k = 0;\n\
    \        if (i < 0) {\n            i = -i;\n        }\n        while (i > 0) {\n\
    \            k += i % 10;\n            i = Math.floor(i / 10);\n        }\n  \
    \      if (k > 0) {\n            result++;\n        }\n    }\n    return result;\n\
    }\n", "    if (arr.length === 0) {\n        return 0;\n    }\n    let count =\
    \ 0;\n    for (let i = 0; i < arr.length; i++) {\n        let digSum = 0;\n  \
    \      let dig: number;\n        if (arr[i] < 0) {\n            dig = arr[i] %\
    \ 10;\n            dig = -dig;\n            digSum += dig;\n            arr[i]\
    \ = arr[i] / 10;\n            arr[i] = Math.floor(arr[i]);\n        }\n      \
    \  while (arr[i] > 0) {\n            dig = arr[i] % 10;\n            digSum +=\
    \ dig;\n            arr[i] = arr[i] / 10;\n            arr[i] = Math.floor(arr[i]);\n\
    \        }\n        if (digSum > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n", "    if (arr.length ===\
    \ 0) {\n        return 0;\n    } else {\n        const digits: number[] = arr.map(x\
    \ => Math.abs(x));\n        const digitSum: number[] = digits.map(x => x.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n        const sumCheck: number[] = digitSum.map(x => x >\
    \ 0 ? 1 : 0);\n        return sumCheck.reduce((a, b) => a + b, 0);\n    }\n}\n",
  "  var count = 0;\n  arr.forEach( (i) => {\n    if (sum_digits(i) > 0) {\n     \
    \ count++;\n    }\n  });\n  return count;\n}\n", "    return arr.filter(v => Number.isInteger(v)\
    \ && v != 0).map(v => Math.abs(v)).map(v => Array.from(v.toString()).map(v =>\
    \ parseInt(v)).reduce((sum, val) => sum + val, 0)).filter(v => v > 0).length;\n\
    }\n", "    return arr.filter(i => i < 0 ? i.toString().split('').slice(1).reduce((a,\
    \ b) => +a + +b) : i.toString().split('').reduce((a, b) => +a + +b)).length;\n\
    }\n\n", "    // arr.forEach(function(element) {\n    //     console.log(element);\n\
    \    // });\n    // return 0;\n    let nums = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (sum_digits(arr[i]) > 0) {\n            nums++;\n       \
    \ }\n    }\n    return nums;\n}\n\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n", "    let count = 0;\n \
    \   let sum_digits = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let\
    \ a = arr[i];\n        if (a < 0) {\n            a = -a;\n        }\n        sum_digits\
    \ = 0;\n        while (a != 0) {\n            sum_digits += a % 10;\n        \
    \    a = Math.floor(a / 10);\n        }\n        if (sum_digits > 0) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n", "    let result =\
    \ 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n\
    \            let sum = -arr[i] % 10 + -arr[i] / 10;\n            if (sum > 0)\
    \ {\n                result++;\n            }\n        } else {\n            let\
    \ sum = arr[i] % 10 + arr[i] / 10;\n            if (sum > 0) {\n             \
    \   result++;\n            }\n        }\n    }\n    return result;\n}\n", "  \
    \  let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num =\
    \ arr[i];\n        if (num < 0) {\n            num = -num;\n        }\n      \
    \  let currentSum = 0;\n        while (num > 0) {\n            currentSum += num\
    \ % 10;\n            num = Math.floor(num / 10);\n        }\n        if (currentSum\
    \ > 0) {\n            sum++;\n        }\n    }\n    return sum;\n}\n", "  if (!arr.length)\
    \ return 0;\n  return arr.reduce((count, num) => {\n    if (Math.abs(Math.abs(num)\
    \ - num) && get_digits(num).reduce((acc, x) => acc + x) > 0) {\n      return count\
    \ + 1;\n    }\n    return count;\n  }, 0);\n}\n", "  return arr.filter(value =>\
    \ {\n    let sumOfDigits = 0;\n    let valStr = value.toString();\n    if (valStr[0]\
    \ === '-') {\n      valStr = valStr.slice(1);\n    }\n    for (let i = 0; i <\
    \ valStr.length; i++) {\n      sumOfDigits += Number(valStr[i]);\n    }\n    return\
    \ sumOfDigits > 0;\n  }).length;\n}\n", "  let num = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] < 0) {\n      if (Math.ceil(Math.log10(Math.abs(arr[i])))\
    \ +\n        Math.floor(arr[i] / Math.pow(10, Math.ceil(Math.log10(Math.abs(arr[i])))))\
    \ > 0) {\n        num++;\n      }\n    } else {\n      if (Math.floor(arr[i] /\
    \ Math.pow(10, Math.floor(Math.log10(arr[i])))) +\n        Math.floor(arr[i] /\
    \ Math.pow(10, Math.ceil(Math.log10(arr[i])))) > 0) {\n        num++;\n      }\n\
    \    }\n  }\n  return num;\n}", "    return arr.reduce((acc, curr) => {\n    \
    \    return acc + (Math.abs(curr).toString().split('').reduce((acc, curr) => acc\
    \ + Number(curr), 0) > 0 ? 1 : 0);\n    }, 0);\n}\n", "    let res = 0;\n    for\
    \ (let i of arr) {\n        let sum = Math.abs(i % 10);\n        let f = 0;\n\
    \        if (i < 0) {\n            f = -1;\n        }\n        i = Math.abs(i);\n\
    \        while (i >= 10) {\n            i = Math.floor(i / 10);\n            sum\
    \ += i % 10;\n        }\n        res += f === 0 && sum > 0 ? 1 : 0;\n    }\n \
    \   return res;\n}", "    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            let number: number = arr[i] *\
    \ -1;\n            let digits: number[] = splitNumber(number);\n            if\
    \ (calculateSum(digits) > 0) {\n                count++;\n            }\n    \
    \    } else {\n            let digits: number[] = splitNumber(arr[i]);\n     \
    \       if (calculateSum(digits) > 0) {\n                count++;\n          \
    \  }\n        }\n    }\n    return count;\n}\n", "  return arr.reduce((acc: number,\
    \ curr: number) =>\n    curr > 0 ?\n      acc + curr.toString().split('').reduce((acc:\
    \ number, curr: string) => acc + parseInt(curr), 0) > 0 ? 1 : 0\n      : acc,\
    \ 0);\n}\n", "  return arr.filter(\n    x =>\n      x >= 0\n        ? get_digit_sum(x)\
    \ > 0\n        : get_digit_sum(Math.abs(x)) > 0\n  ).length;\n}\n", "    return\
    \ arr.filter(n => n > 0).length;\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    let sum = 0;\n    let temp = Math.abs(arr[i]);\n\
    \    while (temp != 0) {\n      sum += temp % 10;\n      temp = Math.floor(temp\
    \ / 10);\n    }\n    if (sum != 0) {\n      result++;\n    }\n  }\n  return result;\n\
    }\n", "    return arr.filter(e =>\n        e < 0\n            ? (e + \"\").split(\"\
    \").map(Number).reduce((a, c) => a + c) < 0\n            : (e + \"\").split(\"\
    \").map(Number).reduce((a, c) => a + c) > 0\n    ).length;\n}\n\n", "    return\
    \ arr.filter(element => (element / 10) >= 1 || (element / 10) <= -1).length;\n\
    }\nconsole.log(\"count_nums\", count_nums([-1, 11, -11]));\nconsole.log(\"count_nums\"\
    , count_nums([1, 1, 2]));\n", "  //let sum = 0;\n  //for (let num of arr) {\n\
    \  //  let abs = Math.abs(num);\n  //  let digits = 0;\n  //  do {\n  //    digits\
    \ += abs % 10;\n  //    abs = Math.floor(abs / 10);\n  //  } while (abs > 0);\n\
    \  //  if (digits > 0) {\n  //    sum++;\n  //  }\n  //}\n  //return sum;\n  return\
    \ arr.filter(num => Math.abs(num).toString().split('').reduce((a, b) => +a + +b,\
    \ 0) > 0).length;\n}\n", "    let n: number = 0;\n    for (let i: number = 0;\
    \ i < arr.length; i++) {\n        let abs: number = Math.abs(arr[i]);\n      \
    \  let sum: number = 0;\n        while (abs > 0) {\n            sum += abs % 10;\n\
    \            abs = Math.floor(abs / 10);\n        }\n        if (sum > 0) {\n\
    \            n++;\n        }\n    }\n    return n;\n}\nconsole.log(\"count_nums([])\"\
    );\nconsole.log(count_nums([]));\nconsole.log(\"count_nums([-1, 11, -11])\");\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(\"count_nums([1, 1, 2])\"\
    );\nconsole.log(count_nums([1, 1, 2]));\n", "  let count = 0;\n  for (let element\
    \ of arr) {\n    let sum = 0;\n    for (let digit of element.toString()) {\n \
    \     let number = parseInt(digit);\n      sum += number;\n    }\n    if (sum\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}", "  let count = 0;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i]\
    \ = arr[i] * -1;\n    }\n    if (arr[i] >= 0 && arr[i] <= 9) {\n      count++;\n\
    \    } else if (arr[i] >= 10 && arr[i] <= 99) {\n      let num = arr[i].toString();\n\
    \      if (parseInt(num[0]) + parseInt(num[1]) > 0) {\n        count++;\n    \
    \  }\n    } else if (arr[i] >= 100 && arr[i] <= 999) {\n      let num = arr[i].toString();\n\
    \      if (parseInt(num[0]) + parseInt(num[1]) + parseInt(num[2]) > 0) {\n   \
    \     count++;\n      }\n    } else if (arr[i] >= 1000 && arr[i] <= 9999) {\n\
    \      let num = arr[i].toString();\n      if (\n        parseInt(num[0]) +\n\
    \          parseInt(num[1]) +\n          parseInt(num[2]) +\n          parseInt(num[3])\
    \ >\n        0\n      ) {\n        count++;\n      }\n    } else if (arr[i] >=\
    \ 10000 && arr[i] <= 99999) {\n      let num = arr[i].toString();\n      if (\n\
    \        parseInt(num[0]) +\n          parseInt(num[1]) +\n          parseInt(num[2])\
    \ +\n          parseInt(num[3]) +\n          parseInt(num[4]) >\n        0\n \
    \     ) {\n        count++;\n      }\n    } else if (arr[i] >= 100000 && arr[i]\
    \ <= 999999) {\n      let num = arr[i].toString();\n      if (\n        parseInt(num[0])\
    \ +\n          parseInt(num[1]) +\n          parseInt(num[2]) +\n          parseInt(num[3])\
    \ +\n          parseInt(num[4]) +\n          parseInt(num[5]) >\n        0\n \
    \     ) {", "    // your code here\n    let count = 0;\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        if (arr[i] < 0) {\n            count = count +\
    \ 1;\n        }\n    }\n    return count;\n}\n", "  return 0;\n}\n", "    let\
    \ newArr: number[] = [];\n    let length = arr.length;\n    let count = 0;\n \
    \   let num = 0;\n    if (length === 0) {\n        return 0;\n    } else {\n \
    \       for (let i = 0; i < length; i++) {\n            num = Math.abs(arr[i]);\n\
    \            while (num > 0) {\n                newArr.push(num % 10);\n     \
    \           num = Math.floor(num / 10);\n            }\n            let sum =\
    \ newArr.reduce((a, b) => a + b, 0);\n            if (sum > 0) {\n           \
    \     count++;\n            }\n            newArr = [];\n        }\n        return\
    \ count;\n    }\n}\n", "  // TODO: finish this\n  return 0;\n}\n", "  return arr.filter(function(num)\
    \ {\n    return (\n      num.toString()\n        .split(\"\")\n        .reduce(function(a,\
    \ b) {\n          return parseInt(a) + parseInt(b);\n        }) > 0\n    );\n\
    \  }).length;\n}\n\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n", "  return arr.reduce((counter,\
    \ value) =>\n    counter + ((value > 0) ? value : -value) % 10 > 0 ? 1 : 0, 0);\n\
    }\n", "    let count = 0;\n    for (let num of arr) {\n        if (sum_of_signed_digits(num)\
    \ > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
  "  let num: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ >= 0) {\n      if (arr[i] % 10 != 0) {\n        num++;\n      }\n    } else\
    \ {\n      if (arr[i] % 10 != 0) {\n        num++;\n      }\n    }\n  }\n  return\
    \ num;\n}\n", "  // let count = 0;\n  // for (let i = 0; i < arr.length; i++)\
    \ {\n  //   if (check_arr(arr[i])) {\n  //     count += 1;\n  //   }\n  // }\n\
    \  // return count;\n  return arr.filter(check_arr).length;\n}", "    let count\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (sum_digits(arr[i])\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}", "   \
    \ return 0;\n}\n", "  return arr.filter(x => Math.abs(x).toString().split('').reduce((prev,curr)\
    \ => prev + parseInt(curr), 0) > 0).length;\n}\n", "    return arr.filter(num\
    \ => signed_digit_sum(num) > 0).length;\n}\n", "  return arr.reduce((count, num)\
    \ => {\n    let sum = num < 0 ? -num : num;\n    while (sum > 0) {\n      count\
    \ += sum % 10 > 0 ? 1 : 0;\n      sum = Math.floor(sum / 10);\n    }\n    return\
    \ count;\n  }, 0);\n}\n", "    let sum: number = 0;\n    for (let i: number =\
    \ 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        if (num\
    \ < 0) {\n            num = -num;\n        }\n        let count: number = 0;\n\
    \        while (num > 0) {\n            count += num % 10;\n            num =\
    \ Math.floor(num / 10);\n        }\n        if (count > 0) {\n            sum++;\n\
    \        }\n    }\n    return sum;\n}\n\n", "  return arr.filter(element => element\
    \ % 10 > 0 || element < 0).length;\n}", "    let result = 0;\n    arr.forEach(function\
    \ (value) {\n        if (sum_digits(value) > 0) {\n            result += 1;\n\
    \        }\n    });\n    return result;\n}\n", "    return arr.filter(\n     \
    \   (x) => x\n            .toString()\n            .split(\"\")\n            .map((x)\
    \ => parseInt(x))\n            .reduce((x, y) => x + y) > 0\n    ).length;\n}\n",
  "  let counter = 0;\n  for (let num of arr) {\n    if (count_digits(num) > 0) {\n\
    \      counter++;\n    }\n  }\n  return counter;\n}\n", "    return arr.filter(x\
    \ => x < 0 ? Math.abs(x) : x).reduce((sum, curr) => sum + curr).toString().split('').reduce((sum,\
    \ curr) => sum + parseInt(curr), 0);\n}\n", "  let result = 0;\n  for (let num\
    \ of arr) {\n    if (num < 0) {\n      num = num * -1;\n    }\n    let str_num\
    \ = num.toString();\n    let sum = 0;\n    for (let i = 0; i < str_num.length;\
    \ i++) {\n      sum += parseInt(str_num[i]);\n    }\n    if (sum > 0) {\n    \
    \  result++;\n    }\n  }\n  return result;\n}\n", "  return arr.filter(num =>\
    \ sum_signed_digits(num) > 0).length;\n}\n", "  let number: number = 0;\n  arr.forEach((e)\
    \ => {\n    if (Math.abs(e) > 9) {\n      let e_str: string = e.toString();\n\
    \      let e_sum: number = 0;\n      for (let i = 0; i < e_str.length; i++) {\n\
    \        let e_num: number = parseInt(e_str[i]);\n        e_sum += e_num;\n  \
    \    }\n      if (e_sum > 0) {\n        number++;\n      }\n    } else {\n   \
    \   if (e > 0) {\n        number++;\n      }\n    }\n  });\n  return number;\n\
    }\n", "  return arr.reduce((acc, curr) => {\n    if (curr < 0) {\n      curr =\
    \ Math.abs(curr);\n    }\n    let first = Math.floor(curr / 10);\n    let second\
    \ = curr % 10;\n    if (first + second > 0) {\n      return acc + 1;\n    }\n\
    \    return acc;\n  }, 0);\n}\n", "  let result = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (digit_sum(arr[i]) > 0) {\n      result += 1;\n    }\n  }\n \
    \ return result;\n}", "    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const num = Math.abs(arr[i]);\n        let sum = 0;\n      \
    \  while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\n", "    return arr.filter(sum_abs).length;\n}\n",
  "    let sum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] < 0) {\n            sum += -1 * Math.floor(arr[i] / 10);\n        }\
    \ else {\n            sum += Math.floor(arr[i] / 10);\n        }\n    }\n    return\
    \ sum;\n}\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1,\
    \ 1, 2]));\n", "    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n\
    \        let sum = Math.abs(arr[i]).toString().split('').reduce((a, b) => a +\
    \ b);\n        if (Number(sum) > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    for (let i of arr) {\n    \
    \    const stringi = i.toString();\n        let total = 0;\n        for (let i\
    \ of stringi) {\n            if (i !== '-') {\n                total += parseInt(i);\n\
    \            }\n        }\n        if (total > 0) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n", "    return arr.filter(n => n >= 0 ?\
    \ n.toString().split('').reduce((acc, cur) => acc + +cur, 0) > 0 : n.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0) < 0).length;\n}\n\n\n", "  let result = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (sum_digits(arr[i]) > 0) {\n      result++;\n\
    \    }\n  }\n  return result;\n}", "  // implement your code here\n  return 0;\n\
    }", "    var result = 0;\n    var i = 0;\n    while (i < arr.length) {\n     \
    \   result = result + check_sum(arr[i]);\n        i = i + 1;\n    }\n    return\
    \ result;\n}\n", "    let count = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let sum = 0;\n        let digits = arr[i].toString().split('');\n\
    \        for (let j = 0; j < digits.length; j++) {\n            sum += +digits[j];\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n", "  if (arr.length === 0) {\n    return 0;\n  }\n  let\
    \ count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let check = String(arr[i]);\n\
    \    if (check[0] === \"-\") {\n      count += check\n        .slice(1)\n    \
    \    .split(\"\")\n        .reduce((a, b) => Number(a) + Number(b));\n    } else\
    \ {\n      count += check\n        .split(\"\")\n        .reduce((a, b) => Number(a)\
    \ + Number(b));\n    }\n  }\n  return count;\n}", "    return arr.filter(num =>\
    \ {\n        const sign = Math.sign(num);\n        const unsigned = Math.abs(num);\n\
    \        let sum = 0;\n        while (unsigned > 0) {\n            sum += unsigned\
    \ % 10;\n            unsigned = unsigned / 10 | 0;\n        }\n        return\
    \ sum > 0;\n    }).length;\n}\n", "  let cnt = 0;\n  arr.forEach(x => {\n    let\
    \ tmp = x;\n    let sum = 0;\n    while (tmp !== 0) {\n      sum += tmp % 10;\n\
    \      tmp = Math.floor(tmp / 10);\n    }\n    if (sum > 0) {\n      cnt++;\n\
    \    }\n  });\n  return cnt;\n}\n", "    let result = 0;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        let num = Math.abs(arr[i]);\n        let sum\
    \ = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\n", "    return arr.reduce((count, num)\
    \ => {\n        return sum_digits(num) > 0 ? count + 1 : count;\n    }, 0);\n\
    }\n", "    let sum_arr: number[] = [];\n    let sum: number = 0;\n    let sum_of_digits:\
    \ number = 0;\n    let count: number = 0;\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        sum_arr.push(Math.abs(arr[i]));\n    }\n    for (let i: number\
    \ = 0; i < sum_arr.length; i++) {\n        sum += sum_arr[i];\n    }\n    while\
    \ (sum !== 0) {\n        sum_of_digits += sum % 10;\n        sum = Math.floor(sum\
    \ / 10);\n    }\n    for (let i: number = 0; i < arr.length; i++) {\n        if\
    \ (sum_of_digits > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  let cnt = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (sumOfDigits(arr[i])\
    \ > 0) {\n      cnt++;\n    }\n  }\n  return cnt;\n}\n", "    var count = 0;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        var nums = arr[i].toString().split('');\n\
    \        var total = 0;\n        for (var j = 0; j < nums.length; j++) {\n   \
    \         total += parseInt(nums[j]);\n        }\n        if (total > 0) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\n", "    return arr.filter(x\
    \ => sumDigits(x) > 0).length;\n}\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));", "  let ans = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let n = arr[i];\n    while\
    \ (n !== 0) {\n      sum += Math.abs(n % 10);\n      n = Math.floor(n / 10);\n\
    \    }\n    if (sum > 0) {\n      ans++;\n    }\n  }\n  return ans;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n\
    \    if (temp < 0) {\n      temp = -temp;\n    }\n    if (sum_digits(temp) > 0)\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n", "  let count = 0;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (arr[i] <\
    \ 0) {\n      num = -num;\n    }\n    let sum = 0;\n    while (num > 0) {\n  \
    \    sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum >\
    \ 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let sum: number\
    \ = 0;\n    for (let num of arr) {\n        if (num < 0) {\n            sum +=\
    \ num[num.length-1];\n        } else {\n            sum += num;\n        }\n \
    \   }\n    return sum;\n}\n", "    let total = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (Math.sign(arr[i]) == -1) {\n            total += Math.abs(arr[i]);\n\
    \        } else {\n            total += arr[i];\n        }\n    }\n    return\
    \ total;\n}\n", "    return arr.filter(num => num > 0 ? sum_digits(num) > 0 :\
    \ sum_digits(num) < 0).length;\n}\n", "    let res = 0;\n    for (let i of arr)\
    \ {\n        res += sumDigits(i);\n    }\n    return res;\n}\n", "    let res\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n\
    \        let sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n\
    \            res++;\n        }\n    }\n    return res;\n}\n", "  if (arr.length\
    \ === 0) {\n    return 0;\n  }\n  let count = 0;\n  let num = arr.pop();\n  while\
    \ (num) {\n    const remainder = Math.abs(num % 10);\n    count += remainder;\n\
    \    num = Math.floor(num / 10);\n  }\n  return count_nums(arr) + count;\n}\n",
  "  let sum: number = 0;\n  let count: number = 0;\n  if (arr.length > 0) {\n   \
    \ arr.forEach(element => {\n      sum = 0;\n      element = Math.abs(element);\n\
    \      while (element > 0) {\n        sum += element % 10;\n        element =\
    \ Math.floor(element / 10);\n      }\n      if (sum > 0) {\n        count++;\n\
    \      }\n    });\n  }\n  return count;\n}\n", "  let res = 0;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    const item = arr[i];\n    let sum = 0;\n    if\
    \ (item < 0) {\n      sum += item * -1;\n    } else {\n      sum += item;\n  \
    \  }\n    while (sum > 0) {\n      sum -= sum % 10;\n      sum /= 10;\n    }\n\
    \    if (sum < 0) {\n      res++;\n    }\n  }\n  return res;\n}\n", "    let counter:\
    \ number = 0;\n    for (let item of arr) {\n        if (get_signed_digits_sum(item)\
    \ > 0) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
  "  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] < 0) {\n      num = arr[i] * -1;\n    } else {\n      num = arr[i];\n\
    \    }\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      sum = 0;\n      continue;\n    } else\
    \ {\n      return i;\n    }\n  }\n  return arr.length;\n}\n", "    let length\
    \ = arr.length;\n    let count = 0;\n    for (let i = 0; i < length; i++) {\n\
    \        let sum = 0;\n        for (let j = 0; j < arr[i].toString().length; j++)\
    \ {\n            sum += Number(arr[i].toString()[j]);\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(count_nums([]));\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n",
  "  let count = 0;\n  arr.forEach(number => {\n    const signedDigits: number[] =\
    \ getSignedDigits(number);\n    const sumOfDigits = signedDigits.reduce((acc,\
    \ current) => acc + current);\n    if (sumOfDigits > 0) {\n      count++;\n  \
    \  }\n  });\n  return count;\n}\n", "  let nums = arr.filter(i => i > 0);\n  return\
    \ nums.length;\n}\n\ndescribe(\"count_nums\", () => {\n  it(\"should return the\
    \ number of elements which has a sum of digits > 0\", () => {\n    expect(count_nums([])).toEqual(0);\n\
    \    expect(count_nums([-1, 11, -11])).toEqual(1);\n    expect(count_nums([1,\
    \ 1, 2])).toEqual(3);\n  });\n});\n", "  let count = 0;\n  arr.forEach(element\
    \ => {\n    if (sum_digits(element) > 0) {\n      count++;\n    }\n  });\n  return\
    \ count;\n}\n", "    let count = 0;\n    arr.forEach(num => {\n        let numberSum\
    \ = 0;\n        if (num < 0) {\n            numberSum += Math.floor(num / 10);\n\
    \            numberSum += Math.abs(num % 10);\n        } else {\n            while\
    \ (num > 0) {\n                numberSum += num % 10;\n                num = Math.floor(num\
    \ / 10);\n            }\n        }\n        if (numberSum > 0) {\n           \
    \ count++;\n        }\n    });\n    return count;\n}\n", "    let nums = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        const num = Math.abs(arr[i]);\n\
    \        if (sum_digits(num) > 0) {\n            nums += 1;\n        }\n    }\n\
    \    return nums;\n}\n", "  if (arr.length == 0) {\n    return 0;\n  } else {\n\
    \    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i]\
    \ < 0) {\n        let s = arr[i].toString();\n        let sarr = s.split(\"\"\
    );\n        let signed_digit = Number(sarr[1]);\n        if (signed_digit == 1)\
    \ {\n          count++;\n        }\n      } else {\n        let digit = arr[i]\
    \ % 10;\n        if (digit == 1) {\n          count++;\n        }\n      }\n \
    \   }\n    return count;\n  }\n}\n", "    var count: number = 0;\n    for (var\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            arr[i]\
    \ = arr[i] * -1;\n        }\n        var sum = 0;\n        while (arr[i] > 0)\
    \ {\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i] /\
    \ 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n \
    \   }\n    return count;\n}\n", "  let sum = 0;\n  arr.forEach(element => {\n\
    \    let sign = 1;\n    if (element < 0) {\n      sign = -1;\n    }\n    let temp\
    \ = element;\n    while (temp) {\n      sum += temp % 10;\n      temp = temp /\
    \ 10;\n    }\n    sum = sign * sum;\n  });\n  return sum;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let abs = Math.abs(arr[i]);\n\
    \        let sum = 0;\n        while (abs !== 0) {\n            sum += abs % 10;\n\
    \            abs = Math.floor(abs / 10);\n        }\n        if (sum > 0) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    arr.forEach(element => {\n        let num = element;\n        if (num\
    \ < 0) {\n            num = -num;\n        }\n        let sum = 0;\n        while\
    \ (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    });\n    return count;\n}\n\n", "    return arr.filter(val => val > 0 &&\
    \ val.toString().split('').reduce((a, b) => +a + +b) > 0).length;\n}\n\ncount_nums([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "    let\
    \ result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = sum_digits(arr[i]);\n\
    \        if (sum > 0) {\n            result++;\n        }\n    }\n    return result;\n\
    }\n", "    let count: number = 0;\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        let digits: number[] = (arr[i] < 0) ? arr[i].toString().substring(1).split('')\
    \ : arr[i].toString().split('');\n        let sum: number = 0;\n        for (let\
    \ j: number = 0; j < digits.length; j++) {\n            sum += parseInt(digits[j]);\n\
    \        }\n        if (sum > 0) count++;\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num\
    \ = arr[i] < 0 ? arr[i] * -1 : arr[i];\n        if (sum_digits(num) > 0) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            arr[i] = arr[i] * -1;\n        }\n        if (sum_digits(arr[i])\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", " \
    \ return arr.filter(x =>\n    Math.abs(x)\n      .toString()\n      .split(\"\"\
    )\n      .reduce((a, b) => Number(a) + Number(b)) > 0\n  ).length;\n}\nconsole.log(count_nums([]));\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n",
  "    let count: number = 0;\n    arr.forEach(element => {\n        let sum = 0;\n\
    \        let num = Math.abs(element);\n        while (num > 0) {\n           \
    \ sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n     \
    \   if (sum !== 0) {\n            count++;\n        }\n    });\n    return count;\n\
    }\n", "  return arr.reduce((acc: number, curr: number) => {\n    if (sum_digits(curr)\
    \ > 0) {\n      return acc + 1;\n    } else {\n      return acc;\n    }\n  },\
    \ 0);\n}\n", "    return arr.filter(x => String(x).split('').reduce((acc, x) =>\
    \ Number(acc) + Number(x), 0) > 0).length;\n}\n", "    let count = 0;\n    for\
    \ (let num of arr) {\n        let sum = 0;\n        let n = num;\n        if (n\
    \ < 0) {\n            n = Math.abs(n);\n            sum += n % 10;\n         \
    \   n = Math.floor(n / 10);\n        }\n        while (n !== 0) {\n          \
    \  sum += n % 10;\n            n = Math.floor(n / 10);\n        }\n        if\
    \ (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "    let sum = 0;\n    for (let num of arr) {\n        if (num < 0) {\n        \
    \    sum += Math.floor(num / 10);\n        } else {\n            sum += num;\n\
    \        }\n    }\n    return sum;\n}\n", "  let i: number;\n  let sum: number;\n\
    \  let count: number = 0;\n  for (i = 0; i < arr.length; i++) {\n    sum = 0;\n\
    \    for (const num of `${arr[i]}`) {\n      sum += parseInt(num, 10);\n    }\n\
    \    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let\
    \ output: number = 0;\n    let i: number = 0;\n    let sum: number = 0;\n    while\
    \ (i < arr.length) {\n        let strNum: string = arr[i].toString();\n      \
    \  let j: number = 0;\n        while (j < strNum.length) {\n            sum +=\
    \ +strNum[j];\n            j++;\n        }\n        if (sum > 0) {\n         \
    \   output++;\n        }\n        sum = 0;\n        i++;\n    }\n    return output;\n\
    }\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1,\
    \ 1, 2]));\n", "    let result = 0;\n    arr.forEach(element => {\n        if\
    \ (sum_digits(element) > 0) {\n            result++;\n        }\n    });\n   \
    \ return result;\n}\n", "    let count = 0;\n    for (let num of arr) {\n    \
    \    if (sum_digits(num) > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "  // TODO: Implement.\n  return undefined;\n}\n", "  let count\
    \ = 0;\n  for (let item of arr) {\n    count += Math.abs(item) % 10 > 0 ? 1 :\
    \ 0;\n    count += (Math.abs(item) % 100 - Math.abs(item) % 10) / 10 > 0 ? 1 :\
    \ 0;\n    count += Math.abs(item) / 100 > 0 ? 1 : 0;\n  }\n  return count;\n}\n\
    console.log(count_nums([-1, 11, -11]));\n", "  let count = 0;\n  arr.forEach(function(el)\
    \ {\n    if (el < 0) {\n      count += 1;\n    } else {\n      while (el > 0)\
    \ {\n        count += el % 10;\n        el = Math.floor(el / 10);\n      }\n \
    \   }\n  });\n  return count;\n}\n", "    let count = 0;\n    for (let num of\
    \ arr) {\n        let num_str = num.toString();\n        let sum = 0;\n      \
    \  for (let i = 0; i < num_str.length; i++) {\n            let digit = num_str[i];\n\
    \            if (digit === '-') {\n                continue;\n            }\n\
    \            sum += parseInt(digit);\n        }\n        if (sum > 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\n", "    let count\
    \ = 0;\n    let length = arr.length;\n    for (let i = 0; i < length; i++) {\n\
    \        let current = arr[i];\n        let sum = 0;\n        while (current >\
    \ 0) {\n            sum += current % 10;\n            current = Math.floor(current\
    \ / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\n", "    let count = 0;\n    for (let i of arr)\
    \ {\n        if (sum_digits(i) > 0) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "  let count = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (sum_digits(arr[i]) > 0) {\n      count += 1;\n    }\n  }\n \
    \ return count;\n}\n", "    return arr.reduce((acc: number, curr: number) => acc\
    \ + (\n        String(Math.abs(curr)).split('').reduce((curr_acc: number, curr_curr:\
    \ string) => curr_acc + Number(curr_curr), 0) > 0 ? 1 : 0\n    ), 0);\n}\n", " \
    \ let count = 0;\n  arr.forEach(num => {\n    let sum = 0;\n    while (num) {\n\
    \      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum\
    \ > 0) {\n      count++;\n    }\n  });\n  return count;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (sum_digits(arr[i])\
    \ > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(count_nums([]));\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));",
  "    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let n\
    \ = arr[i];\n        if (n < 0) n = -n;\n        let sum = 0;\n        while (n\
    \ != 0) {\n            sum += n % 10;\n            n = Math.floor(n / 10);\n \
    \       }\n        if (sum > 0) result++;\n    }\n    return result;\n}\n", " \
    \ return arr.filter(e => e > 0 ? e.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0) > 0 : e < 0 ? e.toString().split('').reduce((acc, cur) =>\
    \ acc + parseInt(cur), 0) < 0 : false).length;\n}\n", "    if (!arr) return 0;\n\
    \    return arr.reduce((acc, curr) => acc + curr > 0 ? 1 : 0, 0);\n}\n\nconsole.log(count_nums([]));\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));",
  "  let result = 0;\n  arr.forEach(x => {\n    if (x > 0) {\n      result += 1;\n\
    \    } else if (x < 0) {\n      result += 1;\n    }\n  });\n  return result;\n\
    }\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n",
  "  return arr.reduce((count, num) => {\n    return count + (Math.abs(num) > 0 ?\
    \ 1 : 0);\n  }, 0);\n}\nconsole.log(\"count_nums([-1, 11, -11])\", count_nums([-1,\
    \ 11, -11])); //Expected: 1\nconsole.log(\"count_nums([1, 1, 2])\", count_nums([1,\
    \ 1, 2])); //Expected: 3\nconsole.log(\"count_nums([])\", count_nums([])); //Expected:\
    \ 0\n", "    return arr.filter(a => sum_digits(a) > 0).length;\n}\n", "    return\
    \ arr.filter(x => x > 0 ? sum_digits(x) > 0 : sum_digits(x * -1) > 0).length;\n\
    }\n", "    var count = 0;\n    var len = arr.length;\n    var sum = 0;\n    for\
    \ (var i = 0; i < len; i++) {\n        if (arr[i] < 0) {\n            var num\
    \ = arr[i] * -1;\n            var digits = num.toString().split('');\n       \
    \     var dig_len = digits.length;\n            for (var j = 0; j < dig_len; j++)\
    \ {\n                sum += parseInt(digits[j]);\n            }\n        } else\
    \ {\n            var digits = arr[i].toString().split('');\n            var dig_len\
    \ = digits.length;\n            for (var j = 0; j < dig_len; j++) {\n        \
    \        sum += parseInt(digits[j]);\n            }\n        }\n        if (sum\
    \ > 0) {\n            count++;\n        }\n        sum = 0;\n    }\n    return\
    \ count;\n}", "    // TODO: Implement this function\n    return 0;\n}\n\n", " \
    \   let count = 0;\n    arr.forEach(num => {\n        let sum = 0;\n        let\
    \ n = Math.abs(num);\n        while (n > 0) {\n            sum += n % 10;\n  \
    \          n = Math.floor(n / 10);\n        }\n        if (sum > 0) {\n      \
    \      count++;\n        }\n    });\n    return count;\n}\n", "  return arr.reduce((acc,\
    \ curr) => {\n    const currSign = curr < 0 ? -1 : 1;\n    const str = String(curr\
    \ * currSign);\n    let sumOfDigits = 0;\n    for (let i = 0; i < str.length;\
    \ i++) {\n      sumOfDigits += Number(str[i]);\n    }\n    return acc + (sumOfDigits\
    \ > 0 ? 1 : 0);\n  }, 0);\n}\n\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n", "    return arr.filter(x\
    \ => {\n        let sum = 0;\n        let num: number = x;\n        if (num <\
    \ 0) {\n            num = num * -1;\n        }\n        while (num > 0) {\n  \
    \          sum += num % 10;\n            num = num / 10;\n        }\n        return\
    \ sum > 0;\n    }).length;\n}\n", "  if (arr.length == 0) {\n    return 0;\n \
    \ }\n  const sumFn = function(total: number, num: number): number {\n    return\
    \ total + Math.abs(num % 10);\n  };\n  const sum = arr.reduce(sumFn, 0);\n  return\
    \ sum > 0 ? arr.length : 0;\n}\n", "    var output: number = 0;\n    for (var\
    \ i: number = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n         \
    \   output += 2;\n        } else {\n            output += 1;\n        }\n    }\n\
    \    return output;\n}\n\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1,\
    \ 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n", "    let res = 0;\n   \
    \ for (let el of arr) {\n        res += el > 0 ?\n            el.toString().split('').reduce((sum,\
    \ item) => sum + parseInt(item), 0) :\n            el.toString().split('').reduce((sum,\
    \ item) => sum + parseInt(item), 0) === 0 ?\n                0 :\n           \
    \     1;\n    }\n    return res;\n}\n", "    // TODO: Your code here\n    return\
    \ -1;\n}\n", "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       let num = arr[i];\n        if (num < 0) {\n            num = num * -1;\n\
    \        }\n        let str = num.toString();\n        for (let j = 0; j < str.length;\
    \ j++) {\n            sum += parseInt(str[j]);\n        }\n        if (sum > 0)\
    \ {\n            sum = 0;\n            return i + 1;\n        }\n    }\n    return\
    \ 0;\n}\n\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1, 11, -11]));\n\
    console.log(count_nums([1, 1, 2]));\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        let nums = arr[i];\n        while (nums > 0)\
    \ {\n            sum += nums % 10;\n            nums = Math.floor(nums / 10);\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(count_nums([-1, 11, -11]));\n\
    console.log(count_nums([1, 1, 2]));\nconsole.log(count_nums([]));", "    let count\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n\
    \        if (num < 0) {\n            if (num.toString().split('').reduce((a, b)\
    \ => +a + +b) > 0) {\n                count++;\n            }\n        } else\
    \ {\n            if (num.toString().split('').reduce((a, b) => +a + +b) > 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   if (arr[i] > 0) {\n            if (arr[i] % 10 != 0) {\n                result\
    \ += 1;\n            }\n        } else {\n            if (arr[i] % 10 != 0) {\n\
    \                result += 1;\n            }\n        }\n    }\n    return result;\n\
    }", "  return arr.reduce((acc, n) => {\n    let digits = String(Math.abs(n))\n\
    \      .split(\"\")\n      .map(c => parseInt(c));\n    let sum = digits.reduce((acc2,\
    \ n2) => {\n      return acc2 + n2;\n    }, 0);\n    return sum > 0 ? acc + 1\
    \ : acc;\n  }, 0);\n}\n", "  return arr.reduce((acc: number, curr: number) =>\
    \ {\n    return acc + (curr == 0 ? 0 : 1);\n  }, 0);\n}\n\nconsole.log(count_nums([]));\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n",
  "  var count = 0;\n  arr.forEach(function(num){\n    var sum = 0;\n    var s = num.toString();\n\
    \    for (var i = 0; i < s.length; i++) {\n      sum += parseInt(s[i]);\n    }\n\
    \    if (sum > 0) {\n      count += 1;\n    }\n  });\n  return count;\n}\n", " \
    \   if (arr.length === 0) return 0;\n    let count = 0;\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        if (sum_signed_digits(arr[i]) > 0) count++;\n\
    \    }\n    return count;\n}", "    var count: number = 0;\n    for (var i = 0;\
    \ i < arr.length; i++) {\n        var sum: number = 0;\n        if (arr[i] < 0)\
    \ {\n            var x: number = arr[i] * -1;\n            var y: number = x.toString();\n\
    \            var z: string[] = y.split(\"\");\n            for (var j = 0; j <\
    \ z.length; j++) {\n                sum += Number(z[j]);\n            }\n    \
    \    } else {\n            var x: number = arr[i];\n            var y: number\
    \ = x.toString();\n            var z: string[] = y.split(\"\");\n            for\
    \ (var j = 0; j < z.length; j++) {\n                sum += Number(z[j]);\n   \
    \         }\n        }\n        if (sum > 0) {\n            count += 1;\n    \
    \    }\n    }\n    return count;\n}\n", "  return 0;\n}\n", "    let answer: number\
    \ = 0;\n    for (let num of arr) {\n        let numCopy: number = num;\n     \
    \   let sum: number = 0;\n        if (num < 0) {\n            numCopy = num *\
    \ -1;\n        }\n        while (numCopy > 0) {\n            sum += numCopy %\
    \ 10;\n            numCopy = Math.floor(numCopy / 10);\n        }\n        if\
    \ (sum > 0) {\n            answer++;\n        }\n    }\n    return answer;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n\
    \    let sum = 0;\n    while (num) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "    let count = 0;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        sum = 0;\n        let current = arr[i];\n        if (current\
    \ < 0) {\n            current = current * -1;\n        }\n        while (current\
    \ > 0) {\n            sum += current % 10;\n            current = Math.floor(current\
    \ / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] < 0) {\n            arr[i] = -arr[i];\n\
    \        }\n        while (arr[i] != 0) {\n            count += arr[i] % 10;\n\
    \            arr[i] = Math.floor(arr[i] / 10);\n        }\n    }\n    return count;\n\
    }\n", "    return 0;\n}\n", "  return arr.filter(function(a) {\n    return sum_of_digits(a)\
    \ > 0;\n  }).length;\n}\n", "    let counter: number = 0;\n    arr.forEach(element\
    \ => {\n        if (Math.abs(element) > 9) {\n            element = Math.abs(element);\n\
    \            while (element > 0) {\n                counter += element % 10;\n\
    \                element = Math.floor(element / 10);\n            }\n        }\
    \ else if (element < 0) {\n            counter -= element;\n        } else {\n\
    \            counter += element;\n        }\n    });\n    return counter;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const digits =\
    \ Math.abs(arr[i]).toString().split(\"\");\n    let sum = 0;\n    for (let j =\
    \ 0; j < digits.length; j++) {\n      sum += parseInt(digits[j]);\n    }\n   \
    \ if (sum !== 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    return\
    \ arr.filter(num => num != 0 && num != null).map(\n        num => num < 0 ? num\
    \ * -1 : num).map(num => sum_digits(num)).reduce((a, b) => a + b, 0);\n}\n", " \
    \ let sum: number = 0;\n  if (arr.length === 0) {\n    return 0;\n  }\n  for (let\
    \ i: number = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n\
    }\n", "  // TODO return the right thing\n  return arr.length;\n}\n", "  let sum\
    \ = 0;\n  arr.forEach(e => {\n    if (e.toString().split(\"\").map(Number).reduce((a,\
    \ b) => a + b) > 0) {\n      sum++;\n    }\n  });\n  return sum;\n}\nconsole.log(count_nums([]));\n\
    console.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));",
  "    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            if (Math.abs(arr[i] % 10) + Math.abs(Math.floor(arr[i] /\
    \ 10) % 10) > 0) {\n                count++;\n            }\n        } else {\n\
    \            if (arr[i] % 10 + Math.floor(arr[i] / 10) % 10 > 0) {\n         \
    \       count++;\n            }\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (get_sum_of_digits(arr[i])\
    \ > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}", " \
    \   let count = 0;\n    arr.forEach(num => {\n        let str = Math.abs(num).toString();\n\
    \        let sum = 0;\n        for (let i = 0; i < str.length; i++) {\n      \
    \      sum += Number(str[i]);\n        }\n        if (sum !== 0) {\n         \
    \   count++;\n        }\n    });\n    return count;\n}\n", "    let count = 0;\n\
    \    let sum = 0;\n    for (let a of arr) {\n        if (a < 0) {\n          \
    \  a = a * -1;\n        }\n        while (a > 0) {\n            sum += a % 10;\n\
    \            a = Math.floor(a / 10);\n        }\n        if (sum > 0) {\n    \
    \        count++;\n        }\n        sum = 0;\n    }\n    return count;\n}",
  "  let count = 0;\n  for (let element of arr) {\n    let num = element;\n    let\
    \ sum = 0;\n    while (num != 0) {\n      sum += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }", "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (add_digits(arr[i])\
    \ > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n\
    \  arr.forEach(num => {\n    let digitSum = 0;\n    num = Math.abs(num);\n   \
    \ while (num > 0) {\n      digitSum += num % 10;\n      num = Math.floor(num /\
    \ 10);\n    }\n    if (digitSum > 0) {\n      count++;\n    }\n  });\n  return\
    \ count;\n}\n", "  let count = 0;\n  let helper = (n: number): boolean => {\n\
    \    let s = 0;\n    if (n < 0) {\n      n = -n;\n    }\n    for (let i = 0; i\
    \ < String(n).length; i++) {\n      s += Number(String(n)[i]);\n    }\n    return\
    \ s > 0;\n  };\n  arr.forEach(n => {\n    if (helper(n)) {\n      count++;\n \
    \   }\n  });\n  return count;\n}\n", "  let count = 0;\n  arr.forEach(num => {\n\
    \    if (Math.abs(num).toString().split(\"\").reduce((a, b) => +a + +b) > 0) {\n\
    \      count++;\n    }\n  });\n  return count;\n}\n", "    return arr.filter(a\
    \ => a > 0 ? Math.floor(a / 10) + a % 10 > 0 : Math.floor(a / 10) + a % 10 < 0).length;\n\
    }\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1,\
    \ 1, 2]));", "    let count = 0;\n    arr.forEach(element => {\n        if (sum_digits(element)\
    \ > 0) {\n            count++;\n        }\n    });\n    return count;\n}\n", " \
    \   return arr.filter(el => el < 0 ? el.toString().split('').reduce((a, b) =>\
    \ parseInt(a) + parseInt(b)) > 0 : el.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b)) > 0).length;\n}\n", "  return sum_of_digits(arr) ? 0 : 1;\n}\n",
  "  return arr.filter(num => num < 0 ? String(num).slice(1).split('').reduce((a,b)\
    \ => Number(a) + Number(b)) : String(num).split('').reduce((a,b) => Number(a)\
    \ + Number(b))).length;\n}\n", "  return arr.reduce((acc: number, curr: number)\
    \ => {\n    if (sum_digits(curr) > 0) {\n      return acc + 1;\n    }\n    return\
    \ acc;\n  }, 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
