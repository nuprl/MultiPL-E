name: HumanEval_17_parse_music
language: ts
prompt: "//Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n// Your task is to parse this string and return array of integers\
  \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
  // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n//\
  \ '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .|\
  \ .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string:\
  \ string): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
  \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
  .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o\
  \ o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o\
  \ o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
completions: ["    const beatSequence: number[] = [];\n    const beatsPerMeasure:\
    \ number = 4;\n    const beat = {\n        o: beatsPerMeasure,\n        oBar:\
    \ beatsPerMeasure / 2,\n        dotBar: beatsPerMeasure / 4\n    };\n    const\
    \ noteTypes = Object.keys(beat);\n    const notes: string[] = music_string.split(\"\
    \ \");\n    for (let note of notes) {\n        for (let type of noteTypes) {\n\
    \            if (note.indexOf(type) === 0) {\n                let repeat: number\
    \ = Number(note.charAt(type.length));\n                if (isNaN(repeat)) {\n\
    \                    repeat = 1;\n                }\n                for (let\
    \ i = 0; i < repeat; i++) {\n                    beatSequence.push(beat[type]);\n\
    \                }\n            }\n        }\n    }\n    return beatSequence;\n\
    }\n", "  let parse_music = music_string.split(' ');\n  let note_duration: number[]\
    \ = [];\n  for (let i = 0; i < parse_music.length; i++) {\n    let notes = parse_music[i];\n\
    \    if (notes === 'o') {\n      note_duration.push(4);\n    } else if (notes\
    \ === 'o|') {\n      note_duration.push(2);\n    } else if (notes === '.|') {\n\
    \      note_duration.push(1);\n    }\n  }\n  return note_duration;\n}\n", "  \
    \  return music_string.split(' ').map(char => {\n        switch (char) {\n   \
    \         case 'o':\n                return 4;\n            case 'o|':\n     \
    \           return 2;\n            case '.|':\n                return 1;\n   \
    \         default:\n                return 0;\n        }\n    });\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n", "  const notes = music_string.split(\"\
    \ \");\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const\
    \ currentNote = notes[i];\n    switch (currentNote) {\n      case \"o\":\n   \
    \     beats.push(4);\n        break;\n      case \"o|\":\n        beats.push(2);\n\
    \        break;\n      case \".|\":\n        beats.push(1);\n        break;\n\
    \    }\n  }\n  return beats;\n}\n", "    return music_string.split(\" \").map(note\
    \ => {\n        switch (note) {\n            case \"o\":\n                return\
    \ 4;\n            case \"o|\":\n                return 2;\n            case \"\
    .|\":\n                return 1;\n            default:\n                return\
    \ 0;\n        }\n    });\n}\n", "  return music_string.split(' ').map(s => {\n\
    \    switch (s) {\n      case 'o':\n        return 4;\n      case 'o|':\n    \
    \    return 2;\n      case '.|':\n        return 1;\n      default:\n        return\
    \ 0;\n    }\n  });\n}\n", "  // TODO: Your code here!\n  return [];\n}\n", " \
    \   let result: number[] = []\n    const notes = music_string.split(\" \")\n \
    \   for (let note of notes) {\n        switch (note) {\n            case \"o\"\
    :\n                result.push(4)\n                break\n            case \"\
    o|\":\n                result.push(2)\n                break\n            case\
    \ \".|\":\n                result.push(1)\n                break\n        }\n\
    \    }\n    return result\n}\n", "  const beats = ['o|', '.|', 'o'];\n  const\
    \ beats_num = [2, 1, 4];\n  let result = music_string.split(' ');\n  return result.map(x\
    \ => beats_num[beats.indexOf(x)]);\n}\n\ntest('test parse_music', () => {\n  expect(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n\
    });", "    return music_string.split(' ').map(note => {\n        if (note == 'o')\
    \ return 4;\n        if (note == 'o|') return 2;\n        if (note == '.|') return\
    \ 1;\n    });\n}\n", "    const notes: string[] = music_string.split(' ');\n \
    \   return notes.map(note => {\n        switch (note) {\n            case 'o':\n\
    \                return 4;\n            case 'o|':\n                return 2;\n\
    \            case '.|':\n                return 1;\n            default:\n   \
    \             throw new Error('Unrecognized note: ' + note);\n        }\n    });\n\
    }\n", "  const music = music_string.split(\" \");\n  const music_values = [];\n\
    \  music.forEach(m => {\n    if (m === \"o\") {\n      music_values.push(4);\n\
    \    } else if (m === \"o|\") {\n      music_values.push(2);\n    } else if (m\
    \ === \".|\") {\n      music_values.push(1);\n    }\n  });\n  return music_values;\n\
    }\n\ndescribe(\"parse_music\", () => {\n  it(\"should parse music\", () => {\n\
    \    const notes = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4];\n    expect(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")).toEqual(notes);\n  });\n});\n", "    let result\
    \ = [];\n    let beats = 0;\n    for (let i = 0; i < music_string.length; i++)\
    \ {\n        if (music_string[i] === 'o') {\n            beats += 4;\n       \
    \ } else if (music_string[i] === 'o' && music_string[i + 1] === '|') {\n     \
    \       beats += 2;\n            i++;\n        } else if (music_string[i] ===\
    \ '.' && music_string[i + 1] === '|') {\n            beats += 1;\n           \
    \ i++;\n        } else if (music_string[i] === ' ') {\n            result.push(beats);\n\
    \            beats = 0;\n        }\n    }\n    result.push(beats);\n    return\
    \ result;\n}\n\ndescribe('music', () => {\n    it('should parse music', () =>\
    \ {\n        expect(parse_music(\"o o| .| o| o| .| .| .| .| o o\")).to.deep.equal([4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n    });\n});", "  return music_string.split('\
    \ ').map(e => e[0] === 'o' ?\n  e.length > 1 ? 2 : 4 : 1);\n}", "  return music_string.split(\"\
    \ \").map(single => {\n    if (single === \"o\") {\n      return 4;\n    } else\
    \ if (single === \"o|\") {\n      return 2;\n    } else if (single === \".|\"\
    ) {\n      return 1;\n    }\n  });\n}\n", "    let sp = music_string.split(\"\
    \ \");\n    let res = [];\n    for (let x of sp) {\n        if (x == \"o\") {\n\
    \            res.push(4);\n        } else if (x == \"o|\") {\n            res.push(2);\n\
    \        } else if (x == \".|\") {\n            res.push(1);\n        }\n    }\n\
    \    return res;\n}\n", "    const beats: number[] = [];\n    for (let note of\
    \ music_string.split(' ')) {\n        switch (note) {\n            case 'o':\n\
    \                beats.push(4);\n                break;\n            case 'o|':\n\
    \                beats.push(2);\n                break;\n            case '.|':\n\
    \                beats.push(1);\n                break;\n        }\n    }\n  \
    \  return beats;\n}", "    let notes = music_string.split(' ');\n    return notes.map(function\
    \ (note) {\n        if (note === 'o') {\n            return 4;\n        } else\
    \ if (note === 'o|') {\n            return 2;\n        } else if (note === '.|')\
    \ {\n            return 1;\n        }\n    });\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n", "    let notes: string[] = music_string.trim().split(\"\
    \ \");\n    let note_values: number[] = [];\n    let whole_note_value: number\
    \ = 4;\n    let half_note_value: number = 2;\n    let quarter_note_value: number\
    \ = 1;\n    let note_value: number = 0;\n\n    for (let note of notes) {\n   \
    \     if (note === \"o\") {\n            note_value = whole_note_value;\n    \
    \    } else if (note === \"o|\") {\n            note_value = half_note_value;\n\
    \        } else if (note === \".|\") {\n            note_value = quarter_note_value;\n\
    \        } else {\n            throw new Error(\"Invalid note format\");\n   \
    \     }\n        note_values.push(note_value);\n    }\n    return note_values;\n\
    }\n", "    const result: number[] = [];\n    const notes = music_string.split('\
    \ ');\n    for (const note of notes) {\n        if (note === 'o') {\n        \
    \    result.push(4);\n        } else if (note === 'o|') {\n            result.push(2);\n\
    \        } else if (note === '.|') {\n            result.push(1);\n        }\n\
    \    }\n    return result;\n}", "    const beats: number[] = [];\n    let music_arr\
    \ = music_string.split(\" \");\n    for (let i = 0; i < music_arr.length; i++)\
    \ {\n        if (music_arr[i] === \"o\") {\n            beats.push(4);\n     \
    \   } else if (music_arr[i] === \"o|\") {\n            beats.push(2);\n      \
    \  } else if (music_arr[i] === \".|\") {\n            beats.push(1);\n       \
    \ }\n    }\n    return beats;\n}\n\ntest('test parse_music', function () {\n \
    \   console.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n});", "  const\
    \ music_array = music_string.split(' ');\n  const beats = [];\n  music_array.forEach(element\
    \ => {\n    switch (element) {\n      case 'o':\n        beats.push(4);\n    \
    \    break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case\
    \ '.|':\n        beats.push(1);\n        break;\n    }\n  });\n  return beats;\n\
    }\n", "    let ret: number[] = []\n    music_string.split(' ').forEach(el => {\n\
    \        if (el.includes('|')) {\n            if (el[0] === 'o') ret.push(2)\n\
    \            else ret.push(1)\n        } else {\n            ret.push(4)\n   \
    \     }\n    })\n    return ret\n}\n", "    let arr: string[] = music_string.split('\
    \ ');\n    return arr.map(x => {\n        if (x == 'o') {\n            return\
    \ 4;\n        } else if (x == 'o|') {\n            return 2;\n        } else if\
    \ (x == '.|') {\n            return 1;\n        }\n    });\n}\n", "    const noteLength\
    \ = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    return\
    \ music_string.split(\" \").map(note => noteLength[note]);\n}\n", "    return\
    \ music_string.split(' ').map(token => {\n        if (token == 'o') {\n      \
    \      return 4;\n        } else if (token == 'o|') {\n            return 2;\n\
    \        } else if (token == '.|') {\n            return 1;\n        }\n    });\n\
    }\n\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));", "  return\
    \ Array.from(music_string).map(\n    (char) => {\n      switch (char) {\n    \
    \    case 'o':\n          return 4;\n        case '|':\n          return 2;\n\
    \        case '.':\n          return 1;\n        default:\n          return 0;\n\
    \      }\n    }\n  ).filter(num => num > 0);\n}\n", "  return music_string.split(\"\
    \ \").map(parseNote);\n}\n", "    const note_to_beats: any = {\n        'o': 4,\n\
    \        'o|': 2,\n        '.|': 1\n    };\n    return music_string.split(' ').map(note\
    \ => note_to_beats[note]);\n}\n\n", "    let music_string_array = music_string.split(\"\
    \ \");\n    let result: number[] = [];\n    for (let i = 0; i < music_string_array.length;\
    \ i++) {\n        if (music_string_array[i] === \"o\") {\n            result.push(4);\n\
    \        } else if (music_string_array[i] === \"o|\") {\n            result.push(2);\n\
    \        } else if (music_string_array[i] === \".|\") {\n            result.push(1);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\"));\n", "  const musicArr = music_string.split(' ');\n \
    \ return musicArr.map(note => {\n    switch (note) {\n      case 'o':\n      \
    \  return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n        return\
    \ 1;\n      default:\n        return 0;\n    }\n  });\n}\n", "    // Solution\
    \ 1\n    // return music_string.split(' ').map(note => {\n    //     switch (note)\
    \ {\n    //         case 'o':\n    //             return 4;\n    //         case\
    \ 'o|':\n    //             return 2;\n    //         case '.|':\n    //     \
    \        return 1;\n    //     }\n    // });\n\n    // Solution 2\n    return\
    \ music_string.split(' ').map(note => {\n        switch (note) {\n           \
    \ case 'o':\n                return 4;\n            case 'o|':\n            case\
    \ '.|':\n                return 2;\n            default:\n                return\
    \ 1;\n        }\n    });\n}\n", "  return music_string.split(\" \").map(notes\
    \ => {\n    if (notes === \"o\") {\n      return 4;\n    } else if (notes ===\
    \ \"o|\") {\n      return 2;\n    } else if (notes === \".|\") {\n      return\
    \ 1;\n    }\n  });\n}\n", "  //replace all whitespace with empty string\n  music_string\
    \ = music_string.replace(/\\s/g, \"\");\n  let result: number[] = [];\n  const\
    \ beats = {\n    \"o\": 4,\n    \"o|\": 2,\n    \".|\": 1\n  };\n  let temp =\
    \ music_string.split(\"\");\n  temp.forEach(e => {\n    if (e == \"|\") {\n  \
    \    return;\n    }\n    else {\n      result.push(beats[e + temp[temp.indexOf(e)\
    \ + 1]]);\n    }\n  });\n  return result;\n}\n", "    const symbol_to_beats =\
    \ {'o': 4, 'o|': 2, '.|': 1};\n    return music_string.split(' ').map(s => symbol_to_beats[s]);\n\
    }\n\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));", "    const\
    \ beatDict = {\"o\": 4, \"o|\": 2, \".|\": 1};\n    return music_string.split('\
    \ ').map(i => beatDict[i]);\n}\n\n\ndescribe(\"test parse_music()\", () => {\n\
    \    test(\"parse_music('o o| .| o| o| .| .| .| .| o o') should return [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4]\", () => {\n        expect(parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\")).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n    });\n\
    });", "    const result: number[] = [];\n    let bpm: number = 4;\n    for (let\
    \ i = 0; i < music_string.length; i++) {\n        if (music_string[i] === ' ')\
    \ {\n            continue;\n        } else if (music_string[i] === 'o') {\n  \
    \          result.push(bpm);\n        } else if (music_string[i] === '.') {\n\
    \            result.push(bpm / 2);\n        } else if (music_string[i] === '|')\
    \ {\n            bpm = 2;\n        }\n    }\n    return result;\n}", "    let\
    \ beats: number[] = [];\n    let beat_unit: number = 1;\n    music_string.split('\
    \ ').forEach(function (note: string) {\n        switch (note) {\n            case\
    \ 'o':\n                beats.push(4 * beat_unit);\n                break;\n \
    \           case 'o|':\n                beats.push(2 * beat_unit);\n         \
    \       break;\n            case '.|':\n                beats.push(beat_unit);\n\
    \                break;\n            case '>':\n                beat_unit *= 2;\n\
    \                break;\n            case '<':\n                beat_unit /= 2;\n\
    \                break;\n        }\n    });\n    return beats;\n}\n", "    return\
    \ music_string.split(' ').map(str => {\n        if (str === 'o') {\n         \
    \   return 4;\n        } else if (str === 'o|') {\n            return 2;\n   \
    \     } else if (str === '.|') {\n            return 1;\n        }\n    });\n\
    }\n", "    // \u97F3\u7B26\u3001\u611F\u53F9\u53F7\u3001\u5347\u964D\u53F7\u3001\
    \u9644\u70B9\u8BA1\u6570\n    let note = false;\n    let exclaim = false;\n  \
    \  let octave = 0;\n    let dot = 0;\n    // \u8BA1\u7B97\u97F3\u7B26\u8282\u62CD\
    \u957F\u5EA6\n    let beats = 0;\n    // \u6BCF\u4E2A\u5B57\u7B26\u64CD\u4F5C\n\
    \    const music = music_string.split('');\n    for (let i = 0; i < music.length;\
    \ i++) {\n        const m = music[i];\n        // \u5982\u679C\u4E0A\u4E00\u4E2A\
    \u5B57\u7B26\u662F\u97F3\u7B26\uFF0C\u5219\u9700\u8981\u589E\u52A0\u9644\u70B9\
    \u8BA1\u6570\n        if (note) {\n            if (m === '.') {\n            \
    \    dot++;\n            } else {\n                note = false;\n           \
    \ }\n        }\n        // \u5982\u679C\u4E0A\u4E00\u4E2A\u5B57\u7B26\u662F\u611F\
    \u53F9\u53F7\uFF0C\u5219\u9700\u8981\u589E\u52A0\u5347\u964D\u53F7\u8BA1\u6570\
    \n        if (exclaim) {\n            if (m === '+') {\n                octave++;\n\
    \            } else if (m === '-') {\n                octave--;\n            }\
    \ else {\n                exclaim = false;\n            }\n        }\n       \
    \ // \u5982\u679C\u5B57\u7B26\u662Fo\uFF0C\u5219\u8BBE\u7F6E\u5F53\u524D\u97F3\
    \u7B26\u4E3A\u97F3\u7B26\n        if (m === 'o') {\n            note = true;\n\
    \        }\n        // \u5982\u679C\u5B57\u7B26\u662F!\uFF0C\u5219\u8BBE\u7F6E\
    \u5F53\u524D\u97F3\u7B26\u4E3A\u611F\u53F9\u53F7\n        if (m === '!') {\n \
    \           exclaim = true;\n        }\n        // \u5982\u679C\u5B57\u7B26\u662F\
    \u5206\u9694\u7B26\uFF0C\u8BA1", "  let result: number[] = [];\n  let music_arr:\
    \ string[] = music_string.split(\" \");\n  for (let char of music_arr) {\n   \
    \ switch (char) {\n      case \"o\":\n        result.push(4);\n        break;\n\
    \      case \"o|\":\n        result.push(2);\n        break;\n      case \".|\"\
    :\n        result.push(1);\n        break;\n    }\n  }\n  return result;\n}",
  "    var notes: string[] = music_string.split(\" \");\n    var result: number[]\
    \ = [];\n    notes.forEach(function (note: string) {\n        if (note === \"\
    o\")\n            result.push(4);\n        else if (note === \"o|\")\n       \
    \     result.push(2);\n        else if (note === \".|\")\n            result.push(1);\n\
    \    });\n    return result;\n}\n", "  return music_string.split(\" \").map(e\
    \ => {\n    return e === \"o\" ? 4 : e.length;\n  });\n}\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n", "    var result = [];\n    let note = '';\n\
    \    let beats = 0;\n    let octave_signs = '';\n    let octave_up = '';\n   \
    \ let octave_down = '';\n    let _c = '';\n    let _c_sharp = '';\n    let _d\
    \ = '';\n    let _d_sharp = '';\n    let _e = '';\n    let _f = '';\n    let _f_sharp\
    \ = '';\n    let _g = '';\n    let _g_sharp = '';\n    let _a = '';\n    let _a_sharp\
    \ = '';\n    let _b = '';\n    let note_letters = \"CDEFGAB\";\n    let sharp_symbol\
    \ = \"#\";\n    let _music_string = music_string.toUpperCase();\n    let _music_string_beats\
    \ = _music_string.split(\"|\");\n    for (let i = 0; i < _music_string_beats.length;\
    \ i++) {\n        let _music_string_beat = _music_string_beats[i];\n        if\
    \ (_music_string_beat.includes('O')) {\n            beats = 4;\n        } else\
    \ if (_music_string_beat.includes('.')) {\n            beats = 1;\n        }\n\
    \        if (_music_string_beat.includes(sharp_symbol)) {\n            note =\
    \ _music_string_beat.charAt(0) + _music_string_beat.charAt(1);\n        } else\
    \ {\n            note = _music_string_beat.charAt(0);\n        }\n        if (note_letters.includes(note))\
    \ {\n            let note_index = note_letters.indexOf(note);\n            if\
    \ (note_index === 0) {\n                _c = _c + beats;\n            } else if\
    \ (note_index === 1) {\n                _d = _d + beats;\n            } else if\
    \ (note_index === 2) {\n                _e = _e + beats;\n            } else if\
    \ (note_index === 3) {\n                _f = _f + beats;\n            } else if\
    \ (note_index === 4) {", "  const notes = music_string.split(\" \");\n  const\
    \ music_arr = [];\n  for (let note of notes) {\n    switch (note) {\n      case\
    \ \"o\":\n        music_arr.push(4);\n        break;\n      case \"o|\":\n   \
    \     music_arr.push(2);\n        break;\n      case \".|\":\n        music_arr.push(1);\n\
    \        break;\n    }\n  }\n  return music_arr;\n}\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));", "  return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4,\
    \ 4];\n}\n\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n", " \
    \ let music_array = music_string.split(\" \");\n  let beats_array = [];\n  music_array.forEach(element\
    \ => {\n    let note = element.length;\n    beats_array.push(note);\n  });\n \
    \ return beats_array;\n}", "    let result: number[] = [];\n    let index: number\
    \ = 0;\n    while (index < music_string.length) {\n        if (music_string[index]\
    \ === 'o') {\n            if (music_string[index + 1] === ' ') {\n           \
    \     result.push(4);\n                index += 2;\n            } else if (music_string[index\
    \ + 1] === '|') {\n                result.push(2);\n                index += 3;\n\
    \            }\n        } else if (music_string[index] === '.') {\n          \
    \  result.push(1);\n            index += 3;\n        }\n    }\n    return result;\n\
    }\n", "  // your solution goes here\n  var result = [];\n  if (music_string) {\n\
    \    var notes = music_string.split(' ');\n    notes.forEach(e => {\n      if\
    \ (e.includes('o')) {\n        result.push(4);\n      } else if (e.includes('.'))\
    \ {\n        result.push(1);\n      } else {\n        result.push(2);\n      }\n\
    \    });\n  }\n  return result;\n}", "    return music_string.split(' ').map(function\
    \ (note) {\n        switch (note) {\n            case 'o':\n                return\
    \ 4;\n            case 'o|':\n                return 2;\n            case '.|':\n\
    \                return 1;\n            default:\n                throw new Error('Invalid\
    \ note: ' + note);\n        }\n    });\n}\n\nexport const parseMusic = parse_music;",
  "    const res: number[] = [];\n    const beats: { [key: string]: number } = {\n\
    \        o: 4,\n        'o|': 2,\n        '.|': 1\n    };\n    const notes = music_string.split('\
    \ ');\n    for (const note of notes) {\n        res.push(beats[note]);\n    }\n\
    \    return res;\n}\n", "  let notes = music_string.split(\" \");\n  let results\
    \ = [];\n  for (let note of notes) {\n    switch (note) {\n      case \"o\":\n\
    \        results.push(4);\n        break;\n      case \"o|\":\n        results.push(2);\n\
    \        break;\n      case \".|\":\n        results.push(1);\n        break;\n\
    \    }\n  }\n  return results;\n}\n\nconsole.log(parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\"));", "    let res = [];\n    let beat = 4;\n    let bar = 0;\n\
    \    let state = 0;\n    let bar_index = 0;\n    for (let i = 0; i < music_string.length;\
    \ i++) {\n        if (music_string[i] === 'o') {\n            if (state == 0)\
    \ {\n                res.push(beat);\n                bar += beat;\n         \
    \   } else {\n                res.push(beat / state);\n                bar +=\
    \ beat / state;\n            }\n        } else if (music_string[i] === '|') {\n\
    \            state = 0;\n            if (bar !== beat) {\n                res[bar_index]\
    \ += beat - bar;\n                bar = beat;\n            }\n            bar_index\
    \ = res.length;\n        } else if (music_string[i] === '.') {\n            state++;\n\
    \        }\n    }\n    return res;\n}\n", "    return music_string.split(' ').map(note\
    \ => note.length);\n}", "  let count_list: number[] = [];\n  let music_count:\
    \ number = 0;\n  music_string.split(\" \").forEach(function(char: string) {\n\
    \    if (char == \"o\") {\n      music_count += 4;\n    } else if (char == \"\
    o|\") {\n      music_count += 2;\n    } else if (char == \".|\") {\n      music_count\
    \ += 1;\n    }\n    count_list.push(music_count);\n  });\n  return count_list;\n\
    }\n\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n", "    const\
    \ music_table = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n\
    \    };\n    const result = [];\n    const splitted_music = music_string.split(\"\
    \ \");\n    for (let i = 0; i < splitted_music.length; i++) {\n        result.push(music_table[splitted_music[i]]);\n\
    \    }\n    return result;\n}\n", "  let result: number[] = [];\n  let reg = /(\\\
    w+|.)/g;\n  let regResult: RegExpExecArray;\n  while (regResult = reg.exec(music_string))\
    \ {\n    if (regResult[1] === 'o') {\n      result.push(4);\n    } else if (regResult[1]\
    \ === 'o|') {\n      result.push(2);\n    } else if (regResult[1] === '.|') {\n\
    \      result.push(1);\n    }\n  }\n  return result;\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));", "  const number_of_beats: number[] = [];\n\
    \  const beats_map: { [key: string]: number } = { 'o': 4, 'o|': 2, '.|': 1 };\n\
    \  const beats_map_in_reverse: { [key: string]: string } = { '4': 'o', '2': 'o|',\
    \ '1': '.|' };\n  const notes: string[] = music_string.split(' ');\n  for (let\
    \ i = 0; i < notes.length; i++) {\n    number_of_beats.push(beats_map[notes[i]]);\n\
    \  }\n  return number_of_beats;\n}\n", "    let notes = music_string.split(' ');\n\
    \    let beats = [];\n    for (let note of notes) {\n        if (note === 'o')\
    \ {\n            beats.push(4);\n        } else if (note === 'o|') {\n       \
    \     beats.push(2);\n        } else if (note === '.|') {\n            beats.push(1);\n\
    \        }\n    }\n    return beats;\n}\n", "    return music_string.split(\"\
    \ \").map(x => x.length);\n}\n\nconst parse_music_test_1 = parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\");\nconsole.log(JSON.stringify(parse_music_test_1)\
    \ === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]));\n", "    let output:\
    \ number[] = [];\n    let music_array: string[] = music_string.split(\" \");\n\
    \    for (let music_note of music_array) {\n        switch (music_note) {\n  \
    \          case \"o\":\n                output.push(4);\n                break;\n\
    \            case \"o|\":\n                output.push(2);\n                break;\n\
    \            case \".|\":\n                output.push(1);\n                break;\n\
    \        }\n    }\n    return output;\n}\n", "    let result: number[] = [];\n\
    \    const values = music_string.split(\" \");\n    values.forEach(value => {\n\
    \        if (value === \"o\") {\n            result.push(4);\n        } else if\
    \ (value === \"o|\") {\n            result.push(2);\n        } else if (value\
    \ === \".|\") {\n            result.push(1);\n        }\n    });\n    return result;\n\
    }\n", "  //let music_string_format = music_string.replace(/o|o|./g,\"\");\n  return\
    \ music_string.split(\" \").map(note => {\n    switch (note) {\n      case \"\
    o\":\n        return 4;\n      case \"o|\":\n        return 2;\n      case \"\
    .|\":\n        return 1;\n      default:\n        throw new Error(\"Invalid input\"\
    );\n    }\n  });\n}\n", "    var res: number[] = [];\n    const music_string_array\
    \ = music_string.split(\" \");\n    music_string_array.forEach(element => {\n\
    \        if (element === \"o\") {\n            res.push(4);\n        } else if\
    \ (element === \"o|\") {\n            res.push(2);\n        } else if (element\
    \ === \".|\") {\n            res.push(1);\n        }\n    });\n    return res;\n\
    }\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n", "  let result:\
    \ number[] = [];\n  let regex = new RegExp(\"[o|.]\", \"g\");\n  music_string.split(\"\
    \ \").forEach(note => {\n    result.push(note.match(regex).length);\n  });\n \
    \ return result;\n}\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));\n", "  let array = music_string.split(\" \");\n  let result = [];\n  for (let\
    \ i = 0; i < array.length; i++) {\n    if (array[i] === \"o\") {\n      result.push(4);\n\
    \    } else if (array[i] === \"o|\") {\n      result.push(2);\n    } else if (array[i]\
    \ === \".|\") {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", " \
    \ let beat_counter = 0;\n  let beats: number[] = [];\n  let oCounter = 0;\n  let\
    \ oBarCounter = 0;\n  let dotBarCounter = 0;\n  let barFound = false;\n  let dotFound\
    \ = false;\n  let oFound = false;\n  let oBarFound = false;\n  let dotBarFound\
    \ = false;\n  for (let i = 0; i < music_string.length; i++) {\n    let symbol\
    \ = music_string[i];\n    switch (symbol) {\n      case \" \":\n        if (oFound)\
    \ {\n          oFound = false;\n          oCounter = 0;\n        }\n        if\
    \ (oBarFound) {\n          oBarFound = false;\n          oBarCounter = 0;\n  \
    \      }\n        if (dotBarFound) {\n          dotBarFound = false;\n       \
    \   dotBarCounter = 0;\n        }\n        if (dotFound) {\n          dotFound\
    \ = false;\n          dotBarCounter = 0;\n        }\n        if (barFound) {\n\
    \          barFound = false;\n          if (oCounter === 1) {\n            beats.push(4);\n\
    \          } else if (oBarCounter === 1) {\n            beats.push(2);\n     \
    \     } else if (dotBarCounter === 1) {\n            beats.push(1);\n        \
    \  }\n        }\n        break;\n      case \"o\":\n        if (oFound) {\n  \
    \        oFound = false;\n          oCounter = 0;\n        }\n        if (oBarFound)\
    \ {\n          oBarFound = false;\n          oBarCounter = 0;\n        }\n   \
    \     if (dotBarFound) {\n          dotBarFound = false;\n          dotBarCounter\
    \ = 0;\n        }\n        if (dotFound) {\n          dotFound = false;\n    \
    \      dotBarCounter = 0;\n        }\n        if (barFound) {\n          barFound\
    \ = false;\n          if (oCounter === 1) {\n            beats.push(4);\n    \
    \      } else if (oBarCounter === 1) {\n            beats.push(2);\n         \
    \ } else if (dotBarCounter === 1) {\n            beats.push(1);\n", "  let result:\
    \ number[] = [];\n  for (let char of music_string) {\n    if (char === \"o\")\
    \ {\n      result.push(4);\n    } else if (char === \"o\" || char === \"|\") {\n\
    \      result.push(2);\n    } else if (char === \".\") {\n      result.push(1);\n\
    \    }\n  }\n  return result;\n}\n", "  return music_string.split(\" \").map(x\
    \ => {\n    if (x.startsWith(\"o\")) {\n      return x.length;\n    } else {\n\
    \      return 1;\n    }\n  });\n}\n\nexport { parse_music };", "    return music_string.replace(/\\\
    |/g, \"\").replace(/\\s{2,}/g, \" \").split(\" \").map(x => {\n        switch\
    \ (x) {\n            case \"o\":\n                return 4;\n            case\
    \ \".\":\n                return 1;\n            default:\n                return\
    \ 0;\n        }\n    });\n}\n", "    let beats_per_music_chart = {\n        'o':\
    \ 4,\n        'o|': 2,\n        '.|': 1\n    };\n    let chart_count: number[]\
    \ = [];\n    for (let i = 0; i < music_string.length; i++) {\n        if (music_string[i]\
    \ === 'o') {\n            if (music_string[i + 1] === ' ') {\n               \
    \ chart_count.push(beats_per_music_chart[music_string[i]]);\n            } else\
    \ if (music_string[i + 1] === '|') {\n                chart_count.push(beats_per_music_chart[music_string[i]\
    \ + music_string[i + 1]]);\n                i++;\n            }\n        } else\
    \ if (music_string[i] === '.') {\n            chart_count.push(beats_per_music_chart[music_string[i]\
    \ + music_string[i + 1]]);\n            i++;\n        }\n    }\n    return chart_count;\n\
    }\n", "    return music_string.split(' ').map(note => {\n        if (note.startsWith('o'))\
    \ {\n            return 4;\n        } else if (note.startsWith('o|')) {\n    \
    \        return 2;\n        } else if (note.startsWith('.|')) {\n            return\
    \ 1;\n        }\n    });\n}\n", "  const notes = music_string.split(\" \");\n\
    \  const convertedNotes = [];\n  for (let note of notes) {\n    if (note === \"\
    o\") {\n      convertedNotes.push(4);\n    } else if (note === \"o|\") {\n   \
    \   convertedNotes.push(2);\n    } else if (note === \".|\") {\n      convertedNotes.push(1);\n\
    \    }\n  }\n  return convertedNotes;\n}\n\nconsole.log(parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\"));", "    let beats: number[] = [];\n    for (let i\
    \ = 0; i < music_string.length; i++) {\n        switch (music_string[i]) {\n \
    \           case 'o': beats.push(4); break;\n            case '|': i++; break;\n\
    \            case '.': beats.push(1); break;\n        }\n    }\n    return beats;\n\
    }\n\n", "    const music_char_codes = music_string.split('').map(x => x.charCodeAt(0));\n\
    \    const total_music_length = music_char_codes.length;\n    const q_length =\
    \ music_char_codes.filter(x => x === 46).length;\n    const o_length = music_char_codes.filter(x\
    \ => x === 111).length;\n    const o_bar_length = music_char_codes.filter(x =>\
    \ x === 124).length;\n    const output = [];\n    let index = 0;\n    while (index\
    \ < total_music_length) {\n        const current_element = music_char_codes[index];\n\
    \        if (current_element === 46) {\n            output.push(1);\n        \
    \    index += 2;\n        } else if (current_element === 111) {\n            output.push(4);\n\
    \            index += 1;\n        } else if (current_element === 124) {\n    \
    \        output.push(2);\n            index += 2;\n        }\n    }\n    return\
    \ output;\n}\n", "    const beats: number[] = [];\n    for (let c of music_string)\
    \ {\n        if (c === 'o') {\n            beats.push(4);\n        } else if (c\
    \ === 'o|') {\n            beats.push(2);\n        } else if (c === '.|') {\n\
    \            beats.push(1);\n        }\n    }\n    return beats;\n}\n", "  let\
    \ beats: number[] = [];\n  music_string.split(\" \").forEach(str => {\n    switch\
    \ (str) {\n      case \"o\":\n        beats.push(4);\n        break;\n      case\
    \ \"o|\":\n        beats.push(2);\n        break;\n      case \".|\":\n      \
    \  beats.push(1);\n        break;\n    }\n  });\n  return beats;\n}\n\ndescribe(\"\
    Music Parser\", () => {\n  test(\"o o| .| o| o| .| .| .| .| o o\", () => {\n \
    \   expect(parse_music(\"o o| .| o| o| .| .| .| .| o o\")).toEqual([\n      4,\n\
    \      2,\n      1,\n      2,\n      2,\n      1,\n      1,\n      1,\n      1,\n\
    \      4,\n      4\n    ]);\n  });\n});", "  // TODO: solve it\n  return music_string.split(\"\
    \ \").map(note => {\n    switch (note) {\n      case \"o\":\n        return 4;\n\
    \      case \"o|\":\n        return 2;\n      case \".|\":\n        return 1;\n\
    \      default:\n        return 1;\n    }\n  });\n}\n", "  let beatsArray: number[]\
    \ = [];\n  let wholeNote: string = \"o\";\n  let halfNote: string = \"o|\";\n\
    \  let quarterNote: string = \".|\";\n  let prevIndex: number = 0;\n  for (let\
    \ i: number = 0; i < music_string.length; i++) {\n    if (music_string.substring(i,\
    \ i + 1) === \" \") {\n      let currentNote: string = music_string.substring(prevIndex,\
    \ i);\n      if (currentNote === wholeNote) {\n        beatsArray.push(4);\n \
    \     } else if (currentNote === halfNote) {\n        beatsArray.push(2);\n  \
    \    } else if (currentNote === quarterNote) {\n        beatsArray.push(1);\n\
    \      }\n      prevIndex = i + 1;\n    }\n  }\n  let lastNote: string = music_string.substring(prevIndex,\
    \ music_string.length);\n  if (lastNote === wholeNote) {\n    beatsArray.push(4);\n\
    \  } else if (lastNote === halfNote) {\n    beatsArray.push(2);\n  } else if (lastNote\
    \ === quarterNote) {\n    beatsArray.push(1);\n  }\n  return beatsArray;\n}\n",
  "  return [];\n}\n", "    return music_string.split(\" \").map(v => {\n        if\
    \ (v === \"o\") return 4;\n        else if (v === \"o|\") return 2;\n        else\
    \ if (v === \".|\") return 1;\n        return 0;\n    });\n}\n", "    let duration\
    \ : number[] = [];\n    let note : string = \"\";\n    let beats : number = 0;\n\
    \    for (let i = 0; i < music_string.length; i++) {\n        note = music_string.charAt(i);\n\
    \        if (note === \"o\") {\n            beats = 4;\n        } else if (note\
    \ === \"|\") {\n            if (music_string.charAt(i - 1) === \"o\") {\n    \
    \            beats = 2;\n            } else {\n                beats = 1;\n  \
    \          }\n        } else if (note === \".\") {\n            beats = 0;\n \
    \       } else {\n            beats = 4;\n        }\n        duration.push(beats);\n\
    \    }\n    return duration;\n}\n", "    const result: number[] = [];\n    const\
    \ notes = music_string.split(' ');\n    notes.forEach(note => {\n        switch\
    \ (note) {\n            case 'o':\n                result.push(4);\n         \
    \       break;\n            case 'o|':\n                result.push(2);\n    \
    \            break;\n            case '.|':\n                result.push(1);\n\
    \                break;\n        }\n    });\n    return result;\n}\n", "  return\
    \ music_string.split(' ').map(note => {\n    switch (note) {\n      case 'o':\n\
    \        return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n  \
    \      return 1;\n      default:\n        throw new Error('unknown note');\n \
    \   }\n  });\n}\n", "    const result = [];\n    for (let i = 0; i < music_string.length;\
    \ i++) {\n        if (music_string[i] === 'o') {\n            result.push(4);\n\
    \        } else if (music_string[i] === '.') {\n            result.push(1);\n\
    \        } else if (music_string[i] === '|') {\n            result[result.length\
    \ - 1] /= 2;\n        }\n    }\n    return result;\n}\n", "    const symbols =\
    \ music_string.split(\" \");\n    return symbols.map(symbol => {\n        if (symbol\
    \ === \"o\") {\n            return 4;\n        } else if (symbol === \"o|\") {\n\
    \            return 2;\n        } else if (symbol === \".|\") {\n            return\
    \ 1;\n        }\n    });\n}", "    var res: number[] = [];\n    var arr: string[]\
    \ = music_string.split(' ');\n    for (var i: number = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] == 'o') {\n            res.push(4);\n        } else if\
    \ (arr[i] == 'o|') {\n            res.push(2);\n        } else if (arr[i] == '.|')\
    \ {\n            res.push(1);\n        }\n    }\n    return res;\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));", "    const notes = {'o': 4, 'o|': 2, '.|':\
    \ 1};\n    return music_string.split(' ').map(note => notes[note]);\n}\n", " \
    \ const result: number[] = [];\n  const symbols: string[] = music_string.split('\
    \ ');\n  symbols.forEach((symbol: string) => {\n    switch (symbol) {\n      case\
    \ 'o':\n        result.push(4);\n        break;\n      case 'o|':\n        result.push(2);\n\
    \        break;\n      case '.|':\n        result.push(1);\n        break;\n \
    \   }\n  });\n  return result;\n}\n", "    const notes_durations = {\n       \
    \ \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n    return music_string.split(\"\
    \ \").map(x => notes_durations[x]);\n}\n\ntest(parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\"), [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\ntest(parse_music(\"\"\
    ), []);\ntest(parse_music(\"o|\"), [2]);\ntest(parse_music(\"o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o", "  return\
    \ music_string.split(' ').map(s => {\n    switch (s) {\n      case 'o':\n    \
    \    return 4;\n      case 'o|':\n        return 2;\n      case '.|':\n      \
    \  return 1;\n      default:\n        return null;\n    }\n  });\n}\n", "  const\
    \ beats: number[] = [];\n  const notes: string[] = music_string.split(' ');\n\
    \  for (let note of notes) {\n    if (note === 'o') {\n      beats.push(4);\n\
    \    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note ===\
    \ '.|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n", "    let result:\
    \ number[] = []\n    for (let i = 0; i < music_string.length; i++) {\n       \
    \ if (music_string[i] === 'o') {\n            result.push(4)\n        } else if\
    \ (music_string[i] === 'o' && music_string[i + 1] === '|') {\n            result.push(2)\n\
    \            i++\n        } else if (music_string[i] === '.' && music_string[i\
    \ + 1] === '|') {\n            result.push(1)\n            i++\n        }\n  \
    \  }\n    return result\n}\n", "    const out: number[] = [];\n    const beats:\
    \ { [key: string]: number } = {\n        'o': 4,\n        'o|': 2,\n        '.|':\
    \ 1\n    };\n    for (const item of music_string.split(' ')) {\n        if (beats[item])\
    \ {\n            out.push(beats[item]);\n        }\n    }\n    return out;\n}\n",
  "    const beats_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n \
    \   };\n    return music_string.split(' ').map(e => beats_map[e]);\n}\n\nconst\
    \ run_solution_02 = (input: string): void => {\n    const music_input = 'o o|\
    \ .| o| o| .| .| .| .| o o';\n    const solution = parse_music(music_input);\n\
    \    console.log(solution);\n};\n\n", "  return music_string.split(\" \").map(x\
    \ => {\n    switch (x) {\n      case \"o\":\n        return 4;\n      case \"\
    o|\":\n        return 2;\n      case \".|\":\n        return 1;\n      default:\n\
    \        return 0;\n    }\n  });\n}\n\nconsole.log(parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\"));\n", "    let beats = [];\n    for (let note of music_string.split('\
    \ ')) {\n        if (note.includes('|')) {\n            let [whole_note, half_note]\
    \ = note.split('|');\n            if (whole_note === 'o') {\n                beats.push(4);\n\
    \            } else {\n                beats.push(2);\n            }\n       \
    \     if (half_note === '.') {\n                beats.push(1);\n            }\
    \ else {\n                beats.push(2);\n            }\n        } else {\n  \
    \          beats.push(4);\n        }\n    }\n    return beats;\n}", "    return\
    \ music_string.split(\" \").map( (part: string) => {\n        switch (part) {\n\
    \            case \"o\": return 4;\n            case \"o|\": return 2;\n     \
    \       case \".|\": return 1;\n            default: throw Error(\"unexpected\
    \ string passed\");\n        }\n    });\n}\n\n", "    let split_array = music_string.split(\"\
    \ \");\n    let result: number[] = [];\n    split_array.forEach(element => {\n\
    \        if (element == \"o\") {\n            result.push(4);\n        } else\
    \ if (element == \"o|\") {\n            result.push(2);\n        } else if (element\
    \ == \".|\") {\n            result.push(1);\n        }\n    });\n    return result;\n\
    }\n\nexport { parse_music }", "    const beats: number[] = [];\n    const beatsMapping:\
    \ any = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    };\n\
    \    music_string.split(\" \").forEach((note: string) => {\n        beats.push(beatsMapping[note]);\n\
    \    });\n    return beats;\n}", "    let words = music_string.split(' ');\n \
    \   let result = [];\n    words.forEach(function (word) {\n        let lastChar\
    \ = word.substr(word.length - 1);\n        let number = 4;\n        if (lastChar\
    \ === '|') {\n            number = 2;\n        }\n        if (word === '.|') {\n\
    \            number = 1;\n        }\n        result.push(number);\n    });\n \
    \   return result;\n}\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));\n", "  const beats: number[] = [];\n  const map: { [key: string]: number }\
    \ = {\n    o: 4,\n    \"o|\": 2,\n    \".|\": 1\n  };\n  music_string.split(\"\
    \ \").forEach(str => {\n    beats.push(map[str]);\n  });\n  return beats;\n}\n",
  "  // TODO: Place your solution here\n  return [];\n}\n", "    // let a = music_string.split(\"\
    \ \");\n    let a = music_string.match(/o|o\\||.\\|/g);\n    // console.log(a);\n\
    \    return a.map(x => x === \"o\" ? 4 : x === \"o|\" ? 2 : 1);\n}", "    // 0\
    \ - whole note (4); 1 - half note (2); 2 - quater note (1)\n    let note_types\
    \ = [4, 2, 1];\n    let note_values = [];\n    let current_note = \"\";\n    let\
    \ i = 0;\n    while (i < music_string.length) {\n        if (music_string[i] ===\
    \ \" \") {\n            note_values.push(note_types[current_note.length - 1]);\n\
    \            current_note = \"\";\n        } else {\n            current_note\
    \ += music_string[i];\n        }\n        i++;\n    }\n    note_values.push(note_types[current_note.length\
    \ - 1]);\n    return note_values;\n}\n", "    const beats: number[] = [];\n  \
    \  for (let i = 0; i < music_string.length; i++) {\n        switch (music_string[i])\
    \ {\n            case 'o':\n                beats.push(4);\n                break;\n\
    \            case '|':\n                beats.push(2);\n                break;\n\
    \            case '.':\n                beats.push(1);\n                break;\n\
    \        }\n    }\n    return beats;\n}\n", "    const result: number[] = [];\n\
    \    let count = 0;\n    music_string.split(\" \").forEach(element => {\n    \
    \    if (element.startsWith(\"o\")) {\n            result.push(4);\n        }\
    \ else if (element.startsWith(\".\")) {\n            result.push(1);\n       \
    \ } else {\n            result.push(2);\n        }\n    });\n    return result;\n\
    }", "  const notes: { [key: string]: number } = {\n    o: 4,\n    \"o|\": 2,\n\
    \    \".|\": 1\n  };\n  const result: number[] = [];\n  music_string.split(\"\
    \ \").forEach(note => {\n    result.push(notes[note]);\n  });\n  return result;\n\
    }\n", "  let arr = music_string.split(\" \");\n  let res = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    let temp = arr[i];\n    let count = 0;\n    for\
    \ (let j = 0; j < temp.length; j++) {\n      if (temp[j] === \"o\") {\n      \
    \  count += 4;\n      } else if (temp[j] === \"|\") {\n        count += 1;\n \
    \     }\n    }\n    res.push(count);\n  }\n  return res;\n}\n", "  const arrayOfStrings\
    \ = music_string.split(\" \");\n  const arrayOfNumber = [];\n  arrayOfStrings.forEach(elem\
    \ => {\n    switch (elem) {\n      case \"o\":\n        arrayOfNumber.push(4);\n\
    \        break;\n      case \"o|\":\n        arrayOfNumber.push(2);\n        break;\n\
    \      case \".|\":\n        arrayOfNumber.push(1);\n        break;\n    }\n \
    \ });\n  return arrayOfNumber;\n}\n", "  const result: number[] = [];\n  music_string.split(\"\
    \ \").forEach((substr) => {\n    switch (substr) {\n      case \"o\":\n      \
    \  result.push(4);\n        break;\n      case \"o|\":\n        result.push(2);\n\
    \        break;\n      case \".|\":\n        result.push(1);\n        break;\n\
    \    }\n  });\n  return result;\n}\n\nconsole.log(parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\"));", "    const beats: number[] = [];\n    const pattern =\
    \ /o|o\\||\\.\\|/g;\n    let match;\n    while ((match = pattern.exec(music_string))\
    \ !== null) {\n        switch (match[0]) {\n            case 'o': beats.push(4);\
    \ break;\n            case 'o|': beats.push(2); break;\n            case '.|':\
    \ beats.push(1); break;\n        }\n    }\n    return beats;\n}\n\ndescribe('parse\
    \ music', () => {\n    it('should parse simple song', () => {\n        const result\
    \ = parse_music(\"o o| .| o| o| .| .| .| .| o o\");\n        expect(result).to.deep.equal([4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n    });\n});\n", "  let arr: number[] = [];\n\
    \  let str: string[] = music_string.split(\" \");\n  for (let i: number = 0; i\
    \ < str.length; i++) {\n    switch (str[i]) {\n      case \"o\":\n        arr.push(4);\n\
    \        break;\n      case \"o|\":\n        arr.push(2);\n        break;\n  \
    \    case \".|\":\n        arr.push(1);\n        break;\n    }\n  }\n  return\
    \ arr;\n}\n", "    let result = [];\n    music_string.split(\" \").forEach(value\
    \ => {\n        switch (value) {\n            case \"o\":\n                result.push(4);\n\
    \                break;\n            case \"o|\":\n                result.push(2);\n\
    \                break;\n            case \".|\":\n                result.push(1);\n\
    \                break;\n        }\n    });\n    return result;\n}\n", "    let\
    \ arr: number[] = [];\n    music_string.split(\" \").forEach(e => {\n        if\
    \ (e == \"o\") {\n            arr.push(4);\n        } else if (e == \"o|\") {\n\
    \            arr.push(2);\n        } else if (e == \".|\") {\n            arr.push(1);\n\
    \        }\n    });\n    return arr;\n}", "  let beats: number[] = [];\n  const\
    \ beats_per_symbol = {\n    o: 4,\n    'o|': 2,\n    '.|': 1,\n  };\n  const notes:\
    \ string[] = music_string.split(' ');\n  notes.forEach((note) => {\n    beats.push(beats_per_symbol[note]);\n\
    \  });\n  return beats;\n}\n\nexport default parse_music;", "  // let music_list\
    \ = music_string.split(\" \");\n  // console.log(music_list);\n  // let music_list_count\
    \ = music_list.length;\n  // let music_list_count_placeholder = music_list_count;\n\
    \  // let music_result = [];\n  // for (music_list_count; music_list_count > 0;\
    \ music_list_count--) {\n  //   let music_count_placeholder = music_list[music_list_count\
    \ - 1];\n  //   let music_count_length = music_count_placeholder.length;\n  //\
    \   let music_count_number = parseInt(music_count_placeholder[0]);\n  //   if\
    \ (music_count_number > 0) {\n  //     let music_count_number_placeholder = 0;\n\
    \  //     for (let i = 0; i < music_count_number; i++) {\n  //       music_count_number_placeholder\
    \ +=\n  //         music_count_length === 2 ? 4 : 2;\n  //     }\n  //     music_result.push(music_count_number_placeholder);\n\
    \  //   } else {\n  //     music_result.push(music_count_length === 2 ? 4 : 2);\n\
    \  //   }\n  // }\n  // return music_result;\n  let music_result = [];\n  music_string.split(\"\
    \ \").forEach(music_list => {\n    let music_list_length = music_list.length;\n\
    \    let music_list_number = parseInt(music_list[0]);\n    if (music_list_number\
    \ > 0) {\n      let music_list_number_placeholder = 0;\n      for (let i = 0;\
    \ i < music_list_number; i++) {\n        music_list_number_placeholder +=\n  \
    \        music_list_length === 2 ? 4 : 2;\n      }\n      music_result.push(music_list_number_placeholder);\n\
    \    } else {\n      music_result.push(music_list_length === 2 ? 4 : 2);\n   \
    \ }\n  });\n  return music_result;\n}\n", "  let result = [];\n  const array =\
    \ music_string.split(' ');\n  array.forEach(element => {\n    switch (element)\
    \ {\n      case 'o':\n        result.push(4);\n        break;\n      case 'o|':\n\
    \        result.push(2);\n        break;\n      case '.|':\n        result.push(1);\n\
    \        break;\n    }\n  });\n  return result;\n}\n", "  const dur = {\n    \"\
    o\": 4,\n    \"o|\": 2,\n    \".|\": 1\n  };\n  return music_string.split(\" \"\
    ).map(x => dur[x]);\n}\n", "  const music_parts = music_string.split(' ');\n \
    \ return music_parts.map(p => {\n    if (p === 'o') {\n      return 4;\n    }\n\
    \    if (p === 'o|') {\n      return 2;\n    }\n    if (p === '.|') {\n      return\
    \ 1;\n    }\n  });\n}\n", "  const beats: number[] = [];\n  for (const note of\
    \ music_string.split(\" \")) {\n    if (note === \"o\") {\n      beats.push(4);\n\
    \    } else if (note === \"o|\") {\n      beats.push(2);\n    } else if (note\
    \ === \".|\") {\n      beats.push(1);\n    }\n  }\n  return beats;\n}\n", "  \
    \  const notes_table = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\"\
    : 1\n    };\n    let notes = music_string.split(\" \");\n    return notes.map(note\
    \ => notes_table[note]);\n}\n", "    let count = 0;\n    let parsed: number[]\
    \ = [];\n    for (let note of music_string) {\n        if (note === 'o') {\n \
    \           parsed.push(4);\n        } else if (note === 'o' && music_string[count\
    \ + 1] === '|') {\n            parsed.push(2);\n        } else if (note === '.'\
    \ && music_string[count + 1] === '|') {\n            parsed.push(1);\n       \
    \ }\n        count++;\n    }\n    return parsed;\n}\n", "  const result: number[]\
    \ = [];\n  let temp: string[] = [];\n  let element: string;\n  temp = music_string.split(\"\
    \ \");\n  for (element of temp) {\n    if (element === \"o\") {\n      result.push(4);\n\
    \    } else if (element === \"o|\") {\n      result.push(2);\n    } else if (element\
    \ === \".|\") {\n      result.push(1);\n    }\n  }\n  return result;\n}\n", " \
    \   let result: number[] = [];\n    const beat = new Map<string, number>([\n \
    \       ['o', 4],\n        ['o|', 2],\n        ['.|', 1]\n    ]);\n    const array\
    \ = music_string.split(' ');\n    for (let i = 0; i < array.length; i++) {\n \
    \       result.push(beat.get(array[i]));\n    }\n    return result;\n}\n", " \
    \ const music: string[] = music_string.split(\" \");\n  const beats: number[]\
    \ = [];\n  for (let i = 0; i < music.length; i++) {\n    if (music[i] === \"o\"\
    ) {\n      beats.push(4);\n    } else if (music[i] === \"o|\") {\n      beats.push(2);\n\
    \    } else if (music[i] === \".|\") {\n      beats.push(1);\n    }\n  }\n  return\
    \ beats;\n}\n", "    let notes_array: string[] = music_string.split(\" \");\n\
    \    let beats_array: number[] = [];\n    for (let note of notes_array) {\n  \
    \      if (note === \"o\") {\n            beats_array.push(4);\n        } else\
    \ if (note === \"o|\") {\n            beats_array.push(2);\n        } else if\
    \ (note === \".|\") {\n            beats_array.push(1);\n        }\n    }\n  \
    \  return beats_array;\n}\n\nconsole.log(parse_music(\"o o| .| o| o| .| .| .|\
    \ .| o o\"));", "    const beats = [4, 2, 1];\n    const notes = music_string.split('\
    \ ');\n    const beats_output = [];\n    notes.forEach(note => {\n        beats_output.push(beats[note.length\
    \ - 1]);\n    });\n    return beats_output;\n}\n\nconsole.log(parse_music(\"o\
    \ o| .| o| o| .| .| .| .| o o\"));\n", "  const result: number[] = [];\n  const\
    \ divider: string = \"|\";\n  const beatLengths: [string, number][] = [\n    [\"\
    o\", 4],\n    [\"o|\", 2],\n    [\".|\", 1]\n  ];\n  music_string.split(\" \"\
    ).forEach(item => {\n    beatLengths.forEach(beatLength => {\n      if (item.includes(beatLength[0]))\
    \ {\n        result.push(beatLength[1]);\n      }\n    });\n  });\n  return result;\n\
    }\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n", "    let res\
    \ = [];\n    let string_arr = music_string.split(\" \");\n    for (let i = 0;\
    \ i < string_arr.length; i++) {\n        if (string_arr[i] === \"o\") {\n    \
    \        res.push(4);\n        } else if (string_arr[i] === \"o|\") {\n      \
    \      res.push(2);\n        } else if (string_arr[i] === \".|\") {\n        \
    \    res.push(1);\n        }\n    }\n    return res;\n}\n", "    const musicArray\
    \ = [];\n    let index = 0;\n    while (index < music_string.length) {\n     \
    \   if (music_string[index] === 'o') {\n            if (music_string[index + 1]\
    \ === ' ') {\n                musicArray.push(4);\n                index += 2;\n\
    \            } else if (music_string[index + 1] === '|') {\n                musicArray.push(2);\n\
    \                index += 3;\n            }\n        } else if (music_string[index]\
    \ === '.') {\n            musicArray.push(1);\n            index += 3;\n     \
    \   }\n    }\n    return musicArray;\n}\n", "    let music_string_arr = music_string.split('\
    \ ');\n    let music_arr = [];\n    for (let i = 0; i < music_string_arr.length;\
    \ i++) {\n        let note = music_string_arr[i];\n        if (note === 'o') {\n\
    \            music_arr.push(4);\n        } else if (note === 'o|') {\n       \
    \     music_arr.push(2);\n        } else if (note === '.|') {\n            music_arr.push(1);\n\
    \        }\n    }\n    return music_arr;\n}\n", "  let beats = 0;\n  let music:\
    \ number[] = [];\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i]\
    \ === \"o\") {\n      beats = 4;\n    } else if (music_string[i] === \"|\") {\n\
    \      beats /= 2;\n    } else if (music_string[i] === \".\") {\n      music.push(beats);\n\
    \      beats = 0;\n    }\n  }\n  return music;\n}\n", "    let beat_array: number[]\
    \ = [];\n    for (let char of music_string) {\n        if (char === 'o') {\n \
    \           beat_array.push(4);\n        } else if (char === 'o|') {\n       \
    \     beat_array.push(2);\n        } else if (char === '.|') {\n            beat_array.push(1);\n\
    \        }\n    }\n    return beat_array;\n}\n\nparse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\");", "    let output = [];\n    let music_arr = music_string.split(\"\
    \ \");\n    for (let i = 0; i < music_arr.length; i++) {\n        if (music_arr[i]\
    \ === \"o\") {\n            output.push(4);\n        } else if (music_arr[i] ===\
    \ \"o|\") {\n            output.push(2);\n        } else if (music_arr[i] ===\
    \ \".|\") {\n            output.push(1);\n        }\n    }\n    return output;\n\
    }\n\nassert_eq(parse_music(\"o o| .| o| o| .| .| .| .| o o\"), [4, 2, 1, 2, 2,\
    \ 1, 1, 1, 1, 4, 4], \"Ex 1\");\nassert_eq(parse_music(\"o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o|", "    return music_string.split(\"\
    \ \").map(note => {\n        if (note === \"o\") {\n            return 4;\n  \
    \      } else if (note === \"o|\") {\n            return 2;\n        } else if\
    \ (note === \".|\") {\n            return 1;\n        }\n    });\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));", "  let result: number[] = [];\n  let split_music_string\
    \ = music_string.split(\" \");\n  split_music_string.forEach(element => {\n  \
    \  if (element === \"o\") {\n      result.push(4);\n    } else if (element ===\
    \ \"o|\") {\n      result.push(2);\n    } else if (element === \".|\") {\n   \
    \   result.push(1);\n    }\n  });\n  return result;\n}\n", "  return music_string.split('\
    \ ').map(beat => {\n    if (beat === 'o') {\n      return 4;\n    } else if (beat\
    \ === 'o|') {\n      return 2;\n    } else if (beat === '.|') {\n      return\
    \ 1;\n    }\n  });\n}\n", "  const beats: number[] = [];\n  for (const note of\
    \ music_string.split(\" \")) {\n    switch (note) {\n      case \"o\":\n     \
    \   beats.push(4);\n        break;\n      case \"o|\":\n        beats.push(2);\n\
    \        break;\n      case \".|\":\n        beats.push(1);\n        break;\n\
    \    }\n  }\n  return beats;\n}\n\nexport { parse_music };", "    const output:\
    \ number[] = [];\n    for (let i = 0; i < music_string.length; i++) {\n      \
    \  switch (music_string[i]) {\n            case 'o':\n                output.push(4);\n\
    \                break;\n            case '.':\n                output.push(1);\n\
    \                i++;\n                break;\n            default:\n        \
    \        break;\n        }\n    }\n    return output;\n}\n", "    //let result\
    \ = [];\n    let result = music_string.split(' ').map(item => item.match(/[\\\
    .|o]/g)).map(item => {\n        if (item.length == 1) return item[0] == 'o' ?\
    \ 4 : 1;\n        if (item.length == 2) return item[0] == 'o' ? 2 : 1;\n    });\n\
    \    return result;\n}", "  const l = music_string.split(\" \").map(s => (s.length\
    \ === 2 ? 1 : s.length));\n  return l;\n}\n\nconsole.log(parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\"));\n", "    const beats: number[] = [];\n    let duration:\
    \ number = 4;\n    let index: number = 0;\n    let beatCounter: number = 0;\n\
    \    for (let i = 0; i < music_string.length; i++) {\n        if (music_string[i]\
    \ === 'o') {\n            beatCounter += duration;\n        } else if (music_string[i]\
    \ === '.') {\n            beatCounter += duration / 2;\n        } else if (music_string[i]\
    \ === '|') {\n            if (music_string[i - 1] === 'o') {\n               \
    \ duration = 2;\n            } else if (music_string[i - 1] === '.') {\n     \
    \           duration = 1;\n            }\n            beats[index] = beatCounter;\n\
    \            beatCounter = 0;\n            index++;\n        }\n    }\n    return\
    \ beats;\n}\nconsole.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n",
  "  const beat_notes = music_string.split(' ');\n  const beat_numbers = [];\n  beat_notes.forEach(note\
    \ => {\n    switch (note) {\n      case 'o':\n        beat_numbers.push(4);\n\
    \        break;\n      case 'o|':\n        beat_numbers.push(2);\n        break;\n\
    \      case '.|':\n        beat_numbers.push(1);\n        break;\n    }\n  });\n\
    \  return beat_numbers;\n}\n\nexport { parse_music };", "    return music_string.split(\"\
    \ \").map(x => {\n        switch (x) {\n            case \"o\":\n            \
    \    return 4;\n            case \"o|\":\n                return 2;\n        \
    \    case \".|\":\n                return 1;\n            default:\n         \
    \       return 0;\n        }\n    });\n}\n", "  const beats: number[] = [];\n\
    \  const arr = music_string.split(\" \");\n  let total = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] === \"o\") {\n      beats.push(4);\n\
    \      total += 4;\n    } else if (arr[i] === \"o|\") {\n      beats.push(2);\n\
    \      total += 2;\n    } else if (arr[i] === \".|\") {\n      beats.push(1);\n\
    \      total += 1;\n    }\n  }\n  return beats;\n}\n\nparse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\");\n", "    // Your code here\n    return [];\n}\n", " \
    \   const result = [];\n    const music_arr = music_string.split(' ');\n    for\
    \ (let note of music_arr) {\n        if (note === 'o') {\n            result.push(4);\n\
    \        } else if (note === 'o|') {\n            result.push(2);\n        } else\
    \ if (note === '.|') {\n            result.push(1);\n        }\n    }\n    return\
    \ result;\n}\n", "  const notes = {\n    \"o\": 4,\n    \"o|\": 2,\n    \".|\"\
    : 1\n  };\n  const result = music_string.split(\" \").map(note => notes[note]);\n\
    \  return result;\n}\n", "    let beat_count: number[] = [];\n    let index: number\
    \ = 0;\n    while (index < music_string.length) {\n        if (music_string[index]\
    \ === 'o') {\n            if (music_string[index + 1] === ' ') {\n           \
    \     beat_count.push(4);\n                index += 2;\n            } else if\
    \ (music_string[index + 1] === '|') {\n                beat_count.push(2);\n \
    \               index += 3;\n            }\n        } else if (music_string[index]\
    \ === '.') {\n            beat_count.push(1);\n            index += 3;\n     \
    \   }\n    }\n    return beat_count;\n}\n", "  // remove whitespace\n  music_string\
    \ = music_string.replace(/\\s/g, '');\n  const notes = music_string.split('');\n\
    \  const beats: number[] = [];\n  for (let i = 0; i < notes.length; i++) {\n \
    \   if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] ===\
    \ '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats[beats.length\
    \ - 1] /= 2;\n    }\n  }\n  return beats;\n}\n", "  let result = [];\n  let music\
    \ = music_string.split(\" \");\n  for (let i = 0; i < music.length; i++) {\n \
    \   if (music[i] === \"o\") {\n      result.push(4);\n    } else if (music[i]\
    \ === \"o|\") {\n      result.push(2);\n    } else if (music[i] === \".|\") {\n\
    \      result.push(1);\n    }\n  }\n  return result;\n}\n", "  let result: number[]\
    \ = [];\n  const music: string[] = music_string.split(\" \");\n  music.forEach((x)\
    \ => {\n    if (x === \"o\") {\n      result.push(4);\n    } else if (x === \"\
    o|\") {\n      result.push(2);\n    } else if (x === \".|\") {\n      result.push(1);\n\
    \    }\n  });\n  return result;\n}\n", "    return music_string.split(' ').map(s\
    \ => {\n        if (s.length === 1) {\n            return 4;\n        }\n    \
    \    if (s[0] === 'o') {\n            return 2;\n        }\n        return 1;\n\
    \    });\n}\n", "  let beats: number[] = [];\n  let bar: number = 0;\n  let current_beat:\
    \ number = 0;\n  let beat_length: number = 0;\n  let notes: string[] = music_string.split('\
    \ ');\n  for (let i: number = 0; i < notes.length; i++) {\n    if (notes[i] ===\
    \ 'o') {\n      current_beat = 4;\n      beat_length = 4;\n    } else if (notes[i]\
    \ === 'o|') {\n      current_beat = 2;\n      beat_length = 2;\n    } else if\
    \ (notes[i] === '.|') {\n      current_beat = 1;\n      beat_length = 1;\n   \
    \ } else {\n      current_beat = 0;\n      beat_length = 0;\n    }\n    if (bar\
    \ + beat_length <= 4) {\n      bar += beat_length;\n      beats.push(current_beat);\n\
    \    } else {\n      beats.push(current_beat - (bar + beat_length - 4));\n   \
    \   bar = beat_length - (bar + beat_length - 4);\n    }\n  }\n  return beats;\n\
    }\n", "    let music_array: string[] = music_string.split(\" \");\n    let music_result:\
    \ number[] = [];\n    music_array.forEach(x => {\n        if (x === \"o\") {\n\
    \            music_result.push(4);\n        } else if (x === \"o|\") {\n     \
    \       music_result.push(2);\n        } else if (x === \".|\") {\n          \
    \  music_result.push(1);\n        }\n    });\n    return music_result;\n}\n",
  "  const beats: number[] = [];\n  music_string.split(' ').forEach(note => {\n  \
    \  if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n\
    \      beats.push(2);\n    } else if (note === '.|') {\n      beats.push(1);\n\
    \    }\n  });\n  return beats;\n}\n", "    return music_string.split(' ').map(x\
    \ => {\n        switch (x) {\n            case 'o':\n                return 4;\n\
    \            case 'o|':\n                return 2;\n            case '.|':\n \
    \               return 1;\n            default:\n                return 0;\n \
    \       }\n    });\n}", "  const beats: { [key: string]: number } = {\n    o:\
    \ 4,\n    'o|': 2,\n    '.|': 1,\n  };\n  return music_string.split(' ').map((note)\
    \ => beats[note]);\n}\n", "    return music_string.split(' ').map(symbol => {\n\
    \        switch (symbol) {\n            case 'o':\n                return 4;\n\
    \            case 'o|':\n                return 2;\n            case '.|':\n \
    \               return 1;\n            default:\n                throw new Error(`Unrecognized\
    \ symbol '${symbol}'`);\n        }\n    });\n}\n\nexport function test(): void\
    \ {\n    console.log(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n}", " \
    \ const length: number = music_string.length;\n  const result: number[] = [];\n\
    \  let i: number = 0;\n  while (i < length) {\n    if (music_string[i] === 'o')\
    \ {\n      if (music_string[i + 1] === ' ') {\n        result.push(4);\n     \
    \   i += 2;\n      } else if (music_string[i + 1] === '|') {\n        result.push(2);\n\
    \        i += 3;\n      }\n    } else if (music_string[i] === '.') {\n      result.push(1);\n\
    \      i += 3;\n    }\n  }\n  return result;\n}\n", "    let beats = [1, 1, 1,\
    \ 1];\n    let result = [];\n    let token = ' ';\n    for (let i = 0; i < music_string.length;\
    \ i++) {\n        if (token === ' ') {\n            token = music_string[i];\n\
    \        } else if (token === 'o') {\n            if (music_string[i] === ' ')\
    \ {\n                result.push(4);\n                token = ' ';\n         \
    \   } else if (music_string[i] === '|') {\n                result.push(2);\n \
    \               token = '|';\n            }\n        } else if (token === '.')\
    \ {\n            if (music_string[i] === ' ') {\n                result.push(1);\n\
    \                token = ' ';\n            } else if (music_string[i] === '|')\
    \ {\n                result.push(1);\n                token = '|';\n         \
    \   }\n        } else if (token === '|') {\n            if (music_string[i] ===\
    \ ' ') {\n                token = ' ';\n            } else if (music_string[i]\
    \ === 'o') {\n                token = 'o';\n            } else if (music_string[i]\
    \ === '.') {\n                token = '.';\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    //throw \"Not implemented\";\n    const beatsPerNote:\
    \ { [key: string]: number } = {\n        \"o\": 4,\n        \"o|\": 2,\n     \
    \   \".|\": 1\n    };\n    return music_string.split(\" \").map(n => beatsPerNote[n]);\n\
    }\n", "    let res: number[] = [];\n    let parsed: string[] = music_string.split(\"\
    \ \");\n    for (let i = 0; i < parsed.length; i++) {\n        switch (parsed[i])\
    \ {\n            case \"o\":\n                res.push(4);\n                break;\n\
    \            case \"o|\":\n                res.push(2);\n                break;\n\
    \            case \".|\":\n                res.push(1);\n                break;\n\
    \        }\n    }\n    return res;\n}\n\nconsole.log(parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\"));", "  let beats = [];\n  music_string.split(' ').forEach(value\
    \ => {\n    switch (value) {\n      case 'o':\n        beats.push(4);\n      \
    \  break;\n      case 'o|':\n        beats.push(2);\n        break;\n      case\
    \ '.|':\n        beats.push(1);\n        break;\n    }\n  });\n  return beats;\n\
    }\n", "    const beats: { [index: string]: number } = {\n        'o': 4,\n   \
    \     'o|': 2,\n        '.|': 1\n    };\n    const notes: string[] = music_string.split('\
    \ ');\n    return notes.map(note => beats[note]);\n}\n\nexport {\n    parse_music\n\
    }", "  const map = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  return music_string.match(/[o|.]+/g).map(v\
    \ => map[v]);\n}\n", "    // TODO\n    let beats: number[] = [];\n    let len:\
    \ number = music_string.length;\n    for (let i = 0; i < len; i++) {\n       \
    \ if (music_string[i] === 'o') {\n            if (music_string[i + 1] === ' ')\
    \ {\n                beats.push(4);\n            } else if (music_string[i + 1]\
    \ === '|') {\n                beats.push(2);\n                i++;\n         \
    \   }\n        } else if (music_string[i] === '.') {\n            beats.push(1);\n\
    \            i++;\n        }\n    }\n    return beats;\n}\n\n", "    let result:\
    \ number[] = [];\n    let note_lengths: Object = { 'o': 4, 'o|': 2, '.|': 1 };\n\
    \    music_string.split(' ').forEach(element => {\n        result.push(note_lengths[element]);\n\
    \    });\n    return result;\n}\n", "  // let resultArray: number[] = [];\n  //\
    \ const beats = {\n  //   '.': 1,\n  //   'o': 4,\n  //   '|': 2\n  // }\n  //\
    \ for (let i = 0; i < music_string.length; i++) {\n  //   if (music_string[i]\
    \ === 'o' && music_string[i + 1] === '|') {\n  //     resultArray.push(beats['o']\
    \ + beats['|']);\n  //     i++;\n  //   } else if (music_string[i] === '.' &&\
    \ music_string[i + 1] === '|') {\n  //     resultArray.push(beats['.'] + beats['|']);\n\
    \  //     i++;\n  //   } else {\n  //     resultArray.push(beats[music_string[i]]);\n\
    \  //   }\n  // }\n  // return resultArray;\n  return music_string.match(/o(?:|\\\
    |)|\\.\\||o/g).map(v => v === 'o' ? 4 : v === 'o|' ? 2 : 1);\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));", "    const musicArray = music_string.split('\
    \ ');\n    const result = [];\n    for (let i = 0; i < musicArray.length; i++)\
    \ {\n        switch (musicArray[i]) {\n            case 'o':\n               \
    \ result.push(4);\n                break;\n            case 'o|':\n          \
    \      result.push(2);\n                break;\n            case '.|':\n     \
    \           result.push(1);\n                break;\n        }\n    }\n    return\
    \ result;\n}\n", "    const music_notes = [\n        { note: 'o', duration: 4\
    \ },\n        { note: 'o|', duration: 2 },\n        { note: '.|', duration: 1\
    \ }\n    ];\n    const string_array = music_string.split(' ');\n    const result:\
    \ number[] = [];\n    for (let i = 0; i < string_array.length; i++) {\n      \
    \  for (let j = 0; j < music_notes.length; j++) {\n            if (string_array[i]\
    \ === music_notes[j].note) {\n                result.push(music_notes[j].duration);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nexport const exercise_7\
    \ = { parse_music };", "    let r: number[] = [];\n    let a: string[] = music_string.split(\"\
    \ \");\n    for (let i = 0; i < a.length; i++) {\n        switch (a[i]) {\n  \
    \          case \"o\":\n                r.push(4);\n                break;\n \
    \           case \"o|\":\n                r.push(2);\n                break;\n\
    \            case \".|\":\n                r.push(1);\n                break;\n\
    \        }\n    }\n    return r;\n}", "    let beats: number[] = [];\n    // TODO:\
    \ Your implementation here.\n    const arr = music_string.split(' ');\n    arr.forEach(note\
    \ => {\n        if (note === 'o') {\n            beats.push(4);\n        } else\
    \ if (note === 'o|') {\n            beats.push(2);\n        } else if (note ===\
    \ '.|') {\n            beats.push(1);\n        }\n    });\n    return beats;\n\
    }\n", "  const beats: number[] = [];\n  music_string.split(\" \").forEach(beat\
    \ => {\n    switch (beat) {\n      case \"o\":\n        beats.push(4);\n     \
    \   break;\n      case \"o|\":\n        beats.push(2);\n        break;\n     \
    \ case \".|\":\n        beats.push(1);\n        break;\n    }\n  });\n  return\
    \ beats;\n}\n", "    let notes: Array<string> = [...music_string];\n    let beats:\
    \ number[] = [];\n    let beat: number = 0;\n    notes.forEach(note => {\n   \
    \     if (note === 'o') {\n            beat = 4;\n        } else if (note ===\
    \ 'o|') {\n            beat = 2;\n        } else if (note === '.|') {\n      \
    \      beat = 1;\n        } else {\n            beats.push(beat);\n          \
    \  beat = 0;\n        }\n    });\n    return beats;\n}\n", "  let beats: number[]\
    \ = [];\n  let beats_so_far: number = 0;\n  let current_note: string = \"\";\n\
    \  for (let char of music_string) {\n    if (char == \" \") {\n      // Store\
    \ the note and reset the current note string.\n      beats.push(beats_so_far);\n\
    \      beats_so_far = 0;\n      current_note = \"\";\n    } else {\n      current_note\
    \ += char;\n      if (current_note == \"o\") {\n        beats_so_far += 4;\n \
    \     } else if (current_note == \"o|\") {\n        beats_so_far += 2;\n     \
    \ } else if (current_note == \".|\") {\n        beats_so_far += 1;\n      }\n\
    \    }\n  }\n  return beats;\n}\n", "    let beats: number[] = [];\n    let numberOfBeats\
    \ = 0;\n    for (let i = 0; i < music_string.length; i++) {\n        if (music_string[i]\
    \ === 'o') {\n            if (music_string[i + 1] === ' ') {\n               \
    \ beats.push(4);\n            } else if (music_string[i + 1] === '|') {\n    \
    \            beats.push(2);\n            }\n        } else if (music_string[i]\
    \ === '.') {\n            if (music_string[i + 1] === '|') {\n               \
    \ beats.push(1);\n            }\n        }\n    }\n    return beats;\n}\n\n",
  "  return music_string.split(' ').map(x => {\n    let char = x.charAt(0);\n    switch\
    \ (char) {\n      case 'o':\n        return 4;\n      case 'o|':\n        return\
    \ 2;\n      case '.|':\n        return 1;\n      default:\n        return 0;\n\
    \    }\n  });\n}", "    const result: number[] = [];\n    let tmpArr: string[]\
    \ = music_string.split(\" \");\n    for (let i: number = 0; i < tmpArr.length;\
    \ i++) {\n        switch (tmpArr[i]) {\n            case \"o\":\n            \
    \    result.push(4);\n                break;\n            case \"o|\":\n     \
    \           result.push(2);\n                break;\n            case \".|\":\n\
    \                result.push(1);\n                break;\n        }\n    }\n \
    \   return result;\n}\n", "  const result: number[] = [];\n  let currentNum =\
    \ 4;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i]\
    \ === \"o\") {\n      if (music_string[i + 1] === \" \") {\n        result.push(currentNum);\n\
    \      } else if (music_string[i + 1] === \"|\") {\n        currentNum = currentNum\
    \ / 2;\n        result.push(currentNum);\n      }\n    } else if (music_string[i]\
    \ === \".\") {\n      if (music_string[i + 1] === \"|\") {\n        currentNum\
    \ = currentNum / 2;\n        result.push(currentNum);\n      }\n    }\n  }\n \
    \ return result;\n}\n", "    let arr: number[] = [], result = 0;\n    for (let\
    \ char of music_string) {\n        if (char === 'o') {\n            arr.push(4);\n\
    \        } else if (char === '|') {\n            result += arr.pop();\n      \
    \      arr.push(2);\n        } else if (char === '.') {\n            result +=\
    \ arr.pop();\n            arr.push(1);\n        } else if (char === ' ') {\n \
    \           result += arr.pop();\n        }\n    }\n    return [result + arr.pop()];\n\
    }\n", "    let res = [];\n    music_string.split(\" \").forEach(s => {\n     \
    \   if (s === \"o\") {\n            res.push(4);\n        } else if (s === \"\
    o|\") {\n            res.push(2);\n        } else if (s === \".|\") {\n      \
    \      res.push(1);\n        }\n    });\n    return res;\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n", "    return music_string.split(' ').map(x\
    \ => {\n        if (x == 'o') return 4;\n        if (x == 'o|') return 2;\n  \
    \      if (x == '.|') return 1;\n    });\n}\n", "  const map = {\n    'o': 4,\n\
    \    'o|': 2,\n    '.|': 1\n  };\n  const matches = music_string.match(/o|o\\\
    ||\\.\\|/g);\n  return matches.map(item => map[item]);\n}\n", "    return [...music_string].reduce((result,\
    \ note) => {\n        switch (note) {\n            case 'o':\n               \
    \ result.push(4);\n                break;\n            case 'o|':\n          \
    \      result.push(2);\n                break;\n            case '.|':\n     \
    \           result.push(1);\n                break;\n        }\n        return\
    \ result;\n    }, []);\n}\n", "    const music_arr = music_string.split(\" \"\
    );\n    const notes = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\"\
    : 1\n    };\n    return music_arr.map(function (value: string): number {\n   \
    \     return notes[value];\n    });\n}\n", "  const notes = {\n    o: 4,\n   \
    \ \"o|\": 2,\n    \".|\": 1\n  };\n  const music_notes = music_string.split(\"\
    \ \");\n  return music_notes.map(note => notes[note]);\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n", "  let array = music_string.split(\" \"\
    );\n  let output = [];\n  array.forEach(function(element) {\n    if (element ==\
    \ \"o\") {\n      output.push(4);\n    } else if (element == \"o|\") {\n     \
    \ output.push(2);\n    } else if (element == \".|\") {\n      output.push(1);\n\
    \    }\n  });\n  return output;\n}\n", "    // your code here\n    return [];\n\
    }\n", "  const music_array = music_string.split(\" \");\n  let beats_array: number[]\
    \ = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i]\
    \ === \"o\") {\n      beats_array.push(4);\n    } else if (music_array[i] ===\
    \ \"o|\") {\n      beats_array.push(2);\n    } else if (music_array[i] === \"\
    .|\") {\n      beats_array.push(1);\n    }\n  }\n  return beats_array;\n}", " \
    \   let res: number[] = [];\n    music_string.split(' ').forEach(element => {\n\
    \        switch (element) {\n            case 'o':\n                res.push(4);\n\
    \                break;\n            case 'o|':\n                res.push(2);\n\
    \                break;\n            case '.|':\n                res.push(1);\n\
    \                break;\n        }\n    });\n    return res;\n}\n\nconsole.log(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\nconsole.log(parse_music(\"o o| o| o| o| o|\
    \ o| o| o| o o\"));\nconsole.log(parse_music(\"o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o| o|\
    \ o| o| o| o|", "    var beats: number[] = [];\n    const beatsMap = {\n     \
    \   'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n    music_string.split('\
    \ ').forEach(m => {\n        const beat = beatsMap[m];\n        if (beat) {\n\
    \            beats.push(beat);\n        }\n    });\n    return beats;\n}\n\ndescribe('parse_music',\
    \ () => {\n    it('should work', () => {\n        expect(parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\")).toEqual([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]);\n    });\n\
    });", "  return [];\n}\n", "    return music_string.split(\" \").map(item => {\n\
    \        if (item === \"o\") {\n            return 4;\n        } else if (item\
    \ === \"o|\") {\n            return 2;\n        } else if (item === \".|\") {\n\
    \            return 1;\n        }\n    });\n}\n", "  return music_string.split(\"\
    \ \").map(note => {\n    return note === \"o\" ? 4 : note.length === 2 ? 2 : 1;\n\
    \  });\n}\n", "  return music_string.split(' ').map(note => {\n    const [n, d]\
    \ = note.split('|');\n    const note_values = {\n      o: 4,\n      '.': 1,\n\
    \    };\n    const base_duration = note_values[n];\n    if (d === undefined) {\n\
    \      return base_duration;\n    }\n    return base_duration / 2;\n  });\n}\n\
    \ntest('test parse_music', () => {\n  const music = \"o o| .| o| o| .| .| .| .|\
    \ o o\";\n  const beats = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4];\n  expect(parse_music(music)).toEqual(beats);\n\
    });\n", "  let arr: string[] = music_string.split(\" \");\n  let parsed_arr: number[]\
    \ = [];\n  let i: number = 0;\n  while (i < arr.length) {\n    switch (arr[i])\
    \ {\n      case \"o\":\n        parsed_arr.push(4);\n        break;\n      case\
    \ \"o|\":\n        parsed_arr.push(2);\n        break;\n      case \".|\":\n \
    \       parsed_arr.push(1);\n        break;\n    }\n    i++;\n  }\n  return parsed_arr;\n\
    }\n\nlet input: string = \"o o| .| o| o| .| .| .| .| o o\";\n\nconsole.log(parse_music(input));",
  "    return music_string.split(\" \").map(s => {\n        if (s.length == 1) return\
    \ 4;\n        else if (s.length == 2) return 2;\n        else return 1;\n    });\n\
    }\n", "  const music_arr = music_string.split(' ');\n  const beats_arr = [];\n\
    \  for (let note of music_arr) {\n    if (note.length === 1) {\n      beats_arr.push(4);\n\
    \    } else if (note.length === 2) {\n      if (note[1] === '|') {\n        beats_arr.push(2);\n\
    \      } else {\n        beats_arr.push(1);\n      }\n    }\n  }\n  return beats_arr;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
