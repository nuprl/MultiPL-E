name: HumanEval_55_fib
language: ts
prompt: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n//\
  \ 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n \
  \ assert.deepEqual(candidate(12),144);\n}\n\ntest();"
completions: ["  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 2) {\n      \
    \  return n;\n    }\n    let f0 = 0;\n    let f1 = 1;\n    for (let i = 2; i <=\
    \ n; i++) {\n        const f2 = f0 + f1;\n        f0 = f1;\n        f1 = f2;\n\
    \    }\n    return f1;\n}\n", "    if (n <= 2) {\n        return 1;\n    }\n \
    \   return fib(n - 1) + fib(n - 2);\n}\n", "  if (n <= 1) {\n    return n;\n \
    \ }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  let a = 1, b = 0, x;\n  while\
    \ (n >= 0){\n    x = a;\n    a = a + b;\n    b = x;\n    n--;\n  }\n  return b;\n\
    }\n", "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n    \
    \    return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\
    }\n", "  return (n <= 1) ? n : fib(n - 1) + fib(n - 2);\n}\n", "  // Add code\
    \ here\n  return 0;\n}\n", "  let sum = 0;\n  let a = 0;\n  let b = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    sum = a + b;\n    a = b;\n    b = sum;\n  }\n\
    \  return sum;\n}\n", "  let a = 1, b = 0, temp = 0;\n  while (n >= 0) {\n   \
    \ temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n  }\n  return b;\n}\n",
  "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return\
    \ 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nassertEqual(fib(10),\
    \ 55);\nassertEqual(fib(1), 1);\nassertEqual(fib(8), 21);\n", "    if (n <= 1)\
    \ {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }\n}\n", "    if (n <= 1) {\n        return n;\n    }\n    let [pre, cur]\
    \ = [0, 1];\n    for (let i = 1; i < n; i++) {\n        [pre, cur] = [cur, pre\
    \ + cur];\n    }\n    return cur;\n}\n", "    let a = 0;\n    let b = 1;\n   \
    \ let c = 1;\n    for (let i = 0; i < n; i++) {\n        a = b;\n        b = c;\n\
    \        c = a + b;\n    }\n    return a;\n}\n", "  if (n < 1) {\n    return 0;\n\
    \  }\n  let result = 1;\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n  \
    \  let temp = result;\n    result += prev;\n    prev = temp;\n  }\n  return result;\n\
    }\n", "  //Initialize the pre and current value.\n  let pre: number = 0;\n  let\
    \ cur: number = 1;\n  //Compute the n-th Fibonacci number.\n  while (n > 1) {\n\
    \    [pre, cur] = [cur, pre + cur];\n    n -= 1;\n  }\n  return cur;\n}\n", " \
    \   if (n <= 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  //TODO\
    \ - you fill in here, and replace the line below with your return statement\n\
    \  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n\
    \  return fib(n - 1) + fib(n - 2);\n}\n", "  // TODO return the nth Fibonacci\
    \ number\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n", "  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\n", "   \
    \ if (n < 0) {\n        throw new Error(\"Fibonacci number must be positive!\"\
    );\n    }\n\n    if (n === 0) {\n        return 0;\n    }\n\n    if (n === 1)\
    \ {\n        return 1;\n    }\n\n    let curr = 0;\n    let next = 1;\n    for\
    \ (let i = 1; i < n; i++) {\n        let temp = curr + next;\n        curr = next;\n\
    \        next = temp;\n    }\n\n    return next;\n}\n", "    // TODO: implement\
    \ this function\n    let a: number = 0;\n    let b: number = 1;\n    if (n ===\
    \ 0) {\n        return a;\n    } else if (n === 1) {\n        return b;\n    }\
    \ else {\n        for (let i: number = 2; i <= n; i++) {\n            let c: number\
    \ = a + b;\n            a = b;\n            b = c;\n        }\n        return\
    \ b;\n    }\n}\n", "    if (n === 0) {\n        return 0;\n    }\n    if (n ===\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \   let a = 0, b = 1;\n    for (let i = 0; i < n; i++) {\n        let t = a;\n\
    \        a = b;\n        b = t + b;\n    }\n    return a;\n}\n", "  if (n < 2)\
    \ {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  let previousFib\
    \ = 0;\n  let currentFib = 1;\n  for (let i = 0; i < n; i++) {\n    const nextFib\
    \ = previousFib + currentFib;\n    previousFib = currentFib;\n    currentFib =\
    \ nextFib;\n  }\n  return currentFib;\n}\n", "    if (n < 2) {\n        return\
    \ n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n == 0) {\n \
    \       return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "  if (n < 2) {\n    return\
    \ n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "  if (n <=\
    \ 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if (n\
    \ <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}",
  "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nexport { fib };", "  if\
    \ (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  let\
    \ a = 1;\n  let b = 1;\n  let c;\n  for (let i = 3; i <= n; i++) {\n    c = a\
    \ + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}", "  let fib1 = 0;\n  let\
    \ fib2 = 1;\n  for (let i = 0; i < n; i++) {\n    fib2 = fib1 + fib2;\n    fib1\
    \ = fib2 - fib1;\n  }\n  return fib1;\n}\n", "    let a = 0;\n    let b = 1;\n\
    \    let f = 1;\n    for (let i = 2; i <= n; i++) {\n        f = a + b;\n    \
    \    a = b;\n        b = f;\n    }\n    return f;\n}\n", "    let fib0 = 0;\n\
    \    let fib1 = 1;\n    for (let i = 2; i <= n; i++) {\n        const temp = fib0;\n\
    \        fib0 = fib1;\n        fib1 = temp + fib1;\n    }\n    return fib1;\n\
    }\n", "  let a = 1, b = 0, x;\n  while (n >= 0){\n    x = a;\n    a = a + b;\n\
    \    b = x;\n    n--;\n  }\n  return b;\n}\n", "  let result = 1;\n  let prev\
    \ = 0;\n  for (let i = 1; i < n; i++) {\n    let temp = result;\n    result +=\
    \ prev;\n    prev = temp;\n  }\n  return result;\n}\n", "  return n;\n}\n", " \
    \ if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n\
    export default fib;", "    const fibs: number[] = [0, 1];\n    for (let i = 2;\
    \ i <= n; i++) {\n        fibs[i] = fibs[i - 1] + fibs[i - 2];\n    }\n    return\
    \ fibs[n];\n}\n", "    return n < 2 ? n : fib(n - 1) + fib(n - 2);\n}\n", "  if\
    \ (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else\
    \ {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "    const memory: number[]\
    \ = [];\n    for (let i = 0; i <= n; i++) {\n        if (i <= 1) {\n         \
    \   memory[i] = i;\n        } else {\n            memory[i] = memory[i - 1] +\
    \ memory[i - 2];\n        }\n    }\n    return memory[n];\n}\n", "  if (n <= 2)\
    \ {\n    return 1;\n  }\n  let n0 = 1;\n  let n1 = 1;\n  let n2;\n  for (let i\
    \ = 2; i < n; i++) {\n    n2 = n0 + n1;\n    n0 = n1;\n    n1 = n2;\n  }\n  return\
    \ n2;\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if (n == 0) {\n     \
    \   return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "  if (n <= 1) {\n    return n;\n  }\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\nconsole.log(fib(2));\n", "    if (n < 2) return\
    \ n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n -\
    \ 2);\n}\n", "    let [a, b] = [0, 1];\n    for (let i = 0; i < n; i++) {\n  \
    \      [a, b] = [b, a + b];\n    }\n    return a;\n}\n", "    if (n === 0) {\n\
    \        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "    if (n == 0) {\n  \
    \      return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "    if (n == 0) return 0;\n    if (n == 1)\
    \ return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 1) {\n  \
    \      return 0;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n \
    \   else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "  if (n ===\
    \ 0) {\n    return 0;\n  }\n  let a = 0;\n  let b = 1;\n  let temp = 0;\n  for\
    \ (let i = 1; i < n; i++) {\n    temp = a + b;\n    a = b;\n    b = temp;\n  }\n\
    \  return b;\n}\n", "    let fibNumbers: Array<number> = [0, 1];\n    for (let\
    \ i = 2; i <= n; i++) {\n        fibNumbers.push(fibNumbers[i - 1] + fibNumbers[i\
    \ - 2]);\n    }\n    return fibNumbers[n];\n}", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n -\
    \ 2);\n}\n", "  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n\
    \ - 2);\n}\n", "  let first = 0;\n  let second = 1;\n  if (n === 1) {\n    return\
    \ 1;\n  } else {\n    for (let i = 2; i <= n; i++) {\n      let temp = first +\
    \ second;\n      first = second;\n      second = temp;\n    }\n    return second;\n\
    \  }\n}\nconsole.log(fib(10));\n", "    let a = 0;\n    let b = 1;\n    let c\
    \ = 0;\n    if (n == 0) {\n        return a;\n    }\n    if (n == 1) {\n     \
    \   return b;\n    }\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n    }\n    return c;\n}\n", "    if (n === 0)\
    \ {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else\
    \ {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "  let arr = [0, 1];\n\
    \  for (let i = 2; i < n + 1; i++) {\n    arr.push(arr[i - 2] + arr[i - 1]);\n\
    \  }\n  return arr[n];\n}\n", "  let a = 1;\n  let b = 1;\n  for (let i = 3; i\
    \ <= n; i++) {\n    let c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n\
    }", "  if (n < 2) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n\
    \ - 2);\n  }\n}\n", "    if (n <= 1) {\n        return n;\n    }\n    else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "  const result = [0, 1];\n\
    \n  for (let i = 2; i <= n; i++) {\n    const a = result[i - 1];\n    const b\
    \ = result[i - 2];\n\n    result.push(a + b);\n  }\n\n  return result[n];\n}\n",
  "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return\
    \ 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "  \
    \  if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "    let a = 0;\n    let\
    \ b = 1;\n    while (n > 0) {\n        const next = a + b;\n        a = b;\n \
    \       b = next;\n        n--;\n    }\n    return a;\n}\n", "    let nums = [0,\
    \ 1];\n    for (let i = 2; i <= n; i++) {\n        nums.push(nums[i - 1] + nums[i\
    \ - 2]);\n    }\n    return nums[n];\n}\n", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n", "  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n\ntest(fib(10), 55);\ntest(fib(1), 1);\ntest(fib(8), 21);\n", "  const sqrt5\
    \ = Math.sqrt(5);\n  const phi = (1 + sqrt5) / 2;\n  return Math.round(Math.pow(phi,\
    \ n) / sqrt5);\n}\n\nexport default fib;", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n", "    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n\
    \ - 2);\n}\n", "    let curr = 1;\n    let prev = 0;\n    for (let i = 0; i <\
    \ n; i++) {\n        let next = curr + prev;\n        prev = curr;\n        curr\
    \ = next;\n    }\n    return prev;\n}\n", "  if (n === 0) {\n    return 0;\n \
    \ } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n\
    \ - 2);\n  }\n}\n", "    let arr = [0, 1];\n    for (let i = 2; i < n + 1; i++)\
    \ {\n        arr.push(arr[i - 2] + arr[i - 1]);\n    }\n    return arr[n];\n}\n",
  "  if (n <= 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n\
    \  }\n}\n", "    return n === 0 ? 0 : n === 1 ? 1 : fib(n - 1) + fib(n - 2);\n\
    }\n", "    if (n <= 2) {\n        return 1;\n    } else {\n        return fib(n\
    \ - 1) + fib(n - 2);\n    }\n}", "    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n == 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n -\
    \ 2);\n}\n", "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return\
    \ 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}", "    return 0;\n\
    }\n", "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n\
    \  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\nconsole.log(fib(10));\n\
    console.log(fib(1));\nconsole.log(fib(8));", "    let a = 0, b = 1, c = 1, d =\
    \ 0;\n    while (n > 0) {\n        if (n & 1) {\n            d = a * b + c * d;\n\
    \            a = a * b + b * c;\n        }\n        c = b * b + c * c;\n     \
    \   b = a * b + b * c;\n        n >>= 1;\n    }\n    return d;\n}\n\nconst _fib\
    \ = fib;\nexport { _fib as fib };", "    let a = 0;\n    let b = 1;\n    for (let\
    \ i = 0; i < n; i++) {\n        [a, b] = [b, a + b];\n    }\n    return a;\n}\n",
  "  let fibPrev: number = 0;\n  let fibNext: number = 1;\n  for (let i = 1; i < n;\
    \ i++) {\n    const temp: number = fibNext;\n    fibNext = fibPrev + fibNext;\n\
    \    fibPrev = temp;\n  }\n  return fibNext;\n}\n\nexport { fib };", "    if (n\
    \ == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n  \
    \  }\n\n    let first = 0;\n    let second = 1;\n    let curr = 1;\n    for (let\
    \ i = 2; i <= n; i++) {\n        curr = first + second;\n        first = second;\n\
    \        second = curr;\n    }\n    return curr;\n}\n", "    if (n <= 1) {\n \
    \       return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n   \
    \ }\n}\n", "  if (n <= 2) {\n    return 1;\n  } else {\n    return fib(n - 1)\
    \ + fib(n - 2);\n  }\n}\n", "  let a = 1;\n  let b = 1;\n  let c = 1;\n  for (let\
    \ i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return\
    \ a;\n}\nfib(10);\nfib(1);\nfib(8);\n", "    let a = 0;\n    let b = 1;\n    let\
    \ c = 0;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a =\
    \ b;\n        b = c;\n    }\n    return b;\n}\n", "    if (n == 0) return 0;\n\
    \    if (n == 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if\
    \ (n <= 2) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }\n}\n", "    let arr: number[] = [0, 1];\n    for (let i = 2; i\
    \ < n + 1; i++) {\n        arr.push(arr[i - 2] + arr[i - 1]);\n    }\n    return\
    \ arr[n];\n}\n\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\n",
  "  if (n < 0) {\n    throw new Error(\"Argument must be positive or zero\");\n \
    \ }\n\n  // TODO: implement fib function\n  let a = 0;\n  let b = 1;\n  let f\
    \ = 1;\n  let i = 1;\n  while (i < n) {\n    f = a + b;\n    a = b;\n    b = f;\n\
    \    i = i + 1;\n  }\n  return f;\n}\n\nexport { fib };", "    const list: number[]\
    \ = [0, 1];\n    if (n < 3) {\n        return list[n];\n    }\n    for (let i\
    \ = 2; i <= n; i++) {\n        list.push(list[i - 1] + list[i - 2]);\n    }\n\
    \    return list[n];\n}\n", "  let [a, b] = [0, 1];\n  let temp;\n  for (let i\
    \ = 0; i < n; i++) {\n    temp = a;\n    a = b;\n    b = temp + b;\n  }\n  return\
    \ a;\n}\n", "  if (n <= 2) {\n    return 1;\n  }\n  let prev = 1;\n  let prevprev\
    \ = 1;\n  let curr = 2;\n  for (let i = 3; i <= n; i++) {\n    curr = prev + prevprev;\n\
    \    prevprev = prev;\n    prev = curr;\n  }\n  return curr;\n}\n", "    return\
    \ 0;\n}\n", "    const sqrtFive = Math.sqrt(5);\n    const fibN = (1 / sqrtFive)\
    \ * Math.pow((1 + sqrtFive) / 2, n) - (1 / sqrtFive) * Math.pow((1 - sqrtFive)\
    \ / 2, n);\n    return Math.round(fibN);\n}\n\nconsole.log(fib(10));\nconsole.log(fib(1));\n\
    console.log(fib(8));\n", "    return n <= 1 ? n : fib(n - 1) + fib(n - 2);\n}\n",
  "  const fibs: number[] = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fibs[i]\
    \ = fibs[i - 1] + fibs[i - 2];\n  }\n  return fibs[n];\n}\n", "    let fibArray\
    \ = [0, 1];\n    if (n > 1) {\n        for (let i = 2; i <= n; i++) {\n      \
    \      fibArray.push(fibArray[i - 1] + fibArray[i - 2]);\n        }\n    }\n \
    \   return fibArray[n];\n}\n", "    let a = 0, b = 1;\n    for (let i = 0; i <\
    \ n; i++) {\n        let t = a;\n        a = b;\n        b = t + b;\n    }\n \
    \   return a;\n}\n", "    let f1 = 0;\n    let f2 = 1;\n    for (let i = 0; i\
    \ < n; i++) {\n        const temp = f1;\n        f1 = f2;\n        f2 = temp +\
    \ f2;\n    }\n    return f1;\n}\n", "  return n == 0 || n == 1 ? n : fib(n - 1)\
    \ + fib(n - 2);\n}\n", "    if (n === 0) {\n        return 0;\n    } else if (n\
    \ === 1) {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }\n}\n", "    return n < 2 ? n : fib(n - 1) + fib(n - 2);\n}\n",
  "    let first = 0;\n    let second = 1;\n    for (let i = 0; i < n; i++) {\n  \
    \      let temp = first;\n        first = second;\n        second = temp + second;\n\
    \    }\n    return first;\n}\n", "    const fibs: number[] = [];\n    fibs[0]\
    \ = 0;\n    fibs[1] = 1;\n    let count = 2;\n    while (count <= n) {\n     \
    \   fibs[count] = fibs[count - 1] + fibs[count - 2];\n        count++;\n    }\n\
    \    return fibs[n];\n}\n", "  if (n === 0) {\n    return 0;\n  } else if (n ===\
    \ 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n\
    }\n", "    if (n <= 2) {\n        return 1;\n    } else {\n        return fib(n\
    \ - 1) + fib(n - 2);\n    }\n}\n", "    const result = [0, 1];\n\n    for (let\
    \ i = 2; i <= n; i++) {\n        const a = result[i - 1];\n        const b = result[i\
    \ - 2];\n\n        result.push(a + b);\n    }\n\n    return result[n];\n}\n",
  "    if (n <= 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n\
    \ === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n\
    \    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "    if (n\
    \ < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n <= 2)\
    \ {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "  \
    \  return n === 0 ? 0 : n === 1 ? 1 : fib(n - 1) + fib(n - 2);\n}\n", "    let\
    \ arr: number[] = [0, 1];\n    for (let i = 2; i < n + 1; i++) {\n        arr.push(arr[i\
    \ - 2] + arr[i - 1]);\n    }\n    return arr[n];\n}\n", "    // Insert code here\n\
    \    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "  if (n < 2) {\n    return\
    \ n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if (n <= 2) {\n     \
    \   return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\
    }\n", "    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \   let a = 0, b = 1, f = 1;\n    for (let i = 2; i <= n; i++) {\n        f =\
    \ a + b;\n        a = b;\n        b = f;\n    }\n    return f;\n}\n", "  let a\
    \ = 1, b = 0, temp;\n\n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b\
    \ = temp;\n    n--;\n  }\n\n  return b;\n}\n", "    let f0 = 0;\n    let f1 =\
    \ 1;\n    for (let i = 2; i <= n; i++) {\n        const f2 = f0 + f1;\n      \
    \  f0 = f1;\n        f1 = f2;\n    }\n    return f1;\n}\n", "    if (n <= 2) return\
    \ 1;\n    let f1 = 1;\n    let f2 = 1;\n    let i = 2;\n    while (i < n) {\n\
    \        let f3 = f1 + f2;\n        f1 = f2;\n        f2 = f3;\n        i++;\n\
    \    }\n    return f2;\n}\n", "    if (n === 0) {\n        return 0;\n    }\n\
    \    if (n === 1) {\n        return 1;\n    }\n    let a = 0;\n    let b = 1;\n\
    \    let c;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n        a\
    \ = b;\n        b = c;\n    }\n    return c;\n}\n", "  let a = 1, b = 0, temp;\n\
    \n  while (n >= 0){\n    temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n\
    \  }\n\n  return b;\n}\n\n\n", "    if (n < 2) {\n        return n;\n    }\n \
    \   return fib(n - 1) + fib(n - 2);\n}\n", "  //We define an additional function\
    \ to allow recursion.\n  //This is not a necessary step, but is to illustrate\
    \ the pattern.\n  function innerFib(n: number, last: number, current: number):\
    \ number {\n    if (n === 0) {\n      return last;\n    } else {\n      return\
    \ innerFib(n - 1, current, last + current);\n    }\n  }\n  return innerFib(n,\
    \ 0, 1);\n}\n", "    if (n == 0) {\n        return 0;\n    } else if (n == 1)\
    \ {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }\n}\n", "    if (n < 2) {\n        return n;\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2);\n    }\n}\n", "    const f = [0, 1];\n    for (let\
    \ i = 2; i <= n; i++) {\n        f[i] = f[i - 1] + f[i - 2];\n    }\n    return\
    \ f[n];\n}\n", "  let a = 1;\n  let b = 1;\n  let tmp;\n  for (let i = 3; i <=\
    \ n; i++) {\n    tmp = a + b;\n    a = b;\n    b = tmp;\n  }\n  return b;\n}\n",
  "    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fib(n - 1) +\
    \ fib(n - 2);\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n <= 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  // ----YOUR CODE\
    \ BELOW------\n}\n", "    if (n < 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "  if (n <= 2) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "  // TODO\n  throw new Error('Not implemented');\n\
    }\n", "  let a = 1;\n  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    let c\
    \ = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}\n", "  if (n <= 1) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    const knownFibValues\
    \ = {\n        1: 1,\n        2: 1,\n    };\n\n    if (knownFibValues[n]) {\n\
    \        return knownFibValues[n];\n    }\n\n    const prevFibValue = fib(n -\
    \ 1);\n    const prevPrevFibValue = fib(n - 2);\n\n    knownFibValues[n] = prevFibValue\
    \ + prevPrevFibValue;\n\n    return knownFibValues[n];\n}\n", "  let a = 1;\n\
    \  let b = 1;\n  for (let i = 3; i <= n; i++) {\n    let c = a + b;\n    a = b;\n\
    \    b = c;\n  }\n  return b;\n}\n", "    // TODO your code:\n    throw new Error(\"\
    Method not implemented.\");\n}\n\nexport { fib };", "    return n;\n}\n", "  return\
    \ n === 0 ? 0 : n === 1 ? 1 : fib(n - 1) + fib(n - 2);\n}\n", "    let a = 0,\
    \ b = 1;\n    for (let i = 0; i < n; i++) {\n        let temp = a;\n        a\
    \ = b;\n        b = temp + b;\n    }\n    return a;\n}\ntest('fib', function()\
    \ {\n    equal(fib(10), 55);\n    equal(fib(1), 1);\n    equal(fib(8), 21);\n\
    });\n", "    let array = [0, 1];\n    for (let i = 2; i <= n; i++) {\n       \
    \ array.push(array[i - 2] + array[i - 1]);\n    }\n    return array[n];\n}\n",
  "  return n <= 1 ? n : fib(n - 1) + fib(n - 2);\n}\nconsole.log(fib(10));", "  \
    \  if (n <= 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\nconsole.log(fib(10));\n",
  "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else\
    \ {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "  let lastNum = 0;\n  let\
    \ currNum = 1;\n  for (let i = 0; i < n; i++) {\n    let temp = currNum;\n   \
    \ currNum = lastNum + currNum;\n    lastNum = temp;\n  }\n  return lastNum;\n\
    }\n", "    // TODO\n    return 0;\n}\n", "    if (n < 2) {\n        return n;\n\
    \    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 1) {\n       \
    \ return 0;\n    }\n    let a = 0;\n    let b = 1;\n    let c = a + b;\n    let\
    \ i = 2;\n    while (i < n) {\n        a = b;\n        b = c;\n        c = a +\
    \ b;\n        i = i + 1;\n    }\n    return c;\n}\n", "  let x: number = 0;\n\
    \  let y: number = 1;\n  for (let i: number = 0; i < n; i++) {\n    let z: number\
    \ = x + y;\n    x = y;\n    y = z;\n  }\n  return x;\n}\n", "    const cache =\
    \ {};\n    function fibHelper(n: number): number {\n        if (n === 0 || n ===\
    \ 1) {\n            return n;\n        }\n        if (cache[n]) {\n          \
    \  return cache[n];\n        }\n        const result = fibHelper(n - 1) + fibHelper(n\
    \ - 2);\n        cache[n] = result;\n        return result;\n    }\n    return\
    \ fibHelper(n);\n}\n", "    return 0;\n}\n", "    if (n == 0) return 0;\n    if\
    \ (n == 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "    if (n <=\
    \ 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \ return (n == 0) ? 0 : (n == 1) ? 1 : fib(n - 1) + fib(n - 2);\n}\n", "    let\
    \ a = 0;\n    let b = 1;\n    for (let i = 0; i < n; i++) {\n        let c = a\
    \ + b;\n        a = b;\n        b = c;\n    }\n    return a;\n}\n", "    let a\
    \ = 0, b = 1, c = 0;\n    for (let i = 0; i < n; i++) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n    }\n    return a;\n}\n", "    return (n <\
    \ 2) ? n : fib(n - 1) + fib(n - 2);\n}\n", "  if (n <= 1) {\n    return n;\n \
    \ }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n\
    \ - 2);\n  }\n}\n", "    const memo: number[] = [];\n    function fibonacci(n:\
    \ number): number {\n        if (n === 0 || n === 1) {\n            return n;\n\
    \        }\n        if (memo[n] !== undefined) {\n            return memo[n];\n\
    \        }\n        memo[n] = fibonacci(n - 1) + fibonacci(n - 2);\n        return\
    \ memo[n];\n    }\n    return fibonacci(n);\n}", "  if (n < 2) {\n    return n;\n\
    \  }\n  let last = 1;\n  let nextLast = 1;\n  let result = 1;\n  for (let i =\
    \ 2; i < n; i++) {\n    result = last + nextLast;\n    nextLast = last;\n    last\
    \ = result;\n  }\n  return result;\n}\n", "  if (n < 2) {\n    return n;\n  }\
    \ else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "    let a = 0, b =\
    \ 1, temp;\n    while (n >= 0) {\n        temp = a;\n        a = a + b;\n    \
    \    b = temp;\n        n--;\n    }\n    return b;\n}", "    if (n === 0) {\n\
    \        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "    if (n == 0) {\n  \
    \      return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2);\n    }\n}\n", "    return n;\n}\n", " \
    \   let a = 0;\n    let b = 1;\n    let temp;\n    if (n === 0 || n === 1) {\n\
    \        return n;\n    } else {\n        for (let i = 2; i <= n; i++) {\n   \
    \         temp = a + b;\n            a = b;\n            b = temp;\n        }\n\
    \        return b;\n    }\n}\n", "    // return nth number in Fibonacci sequence\n\
    \    return nth_fibonacci(n);\n}\n\nconst fibonacci = (function() {\n    let memo\
    \ = {};\n\n    function f(n: number): number {\n        let value;\n\n       \
    \ if (n in memo) {\n            value = memo[n];\n        } else {\n         \
    \   if (n === 0 || n === 1)\n                value = n;\n            else\n  \
    \              value = f(n - 1) + f(n - 2);\n\n            memo[n] = value;\n\
    \        }\n\n        return value;\n    }\n\n    return f;\n})();\n", "  let\
    \ f1 = 0;\n  let f2 = 1;\n  for (let i = 0; i < n; i++) {\n    let f = f1 + f2;\n\
    \    f1 = f2;\n    f2 = f;\n  }\n  return f1;\n}\n", "  return n < 2 ? n : fib(n\
    \ - 1) + fib(n - 2);\n}\n", "    if (n === 0) {\n        return 0;\n    }\n  \
    \  else if (n === 1) {\n        return 1;\n    }\n    else {\n        return fib(n\
    \ - 1) + fib(n - 2);\n    }\n}\n", "    if (n < 0) {\n        throw new Error(\"\
    Index was negative. No such thing as a negative index in a series.\");\n    }\
    \ else if (n === 0 || n === 1) {\n        return n;\n    }\n\n    let prevPrev\
    \ = 0;\n    let prev = 1;\n    let current = prevPrev + prev;\n\n    for (let\
    \ i = 1; i < n; i++) {\n        prevPrev = prev;\n        prev = current;\n  \
    \      current = prevPrev + prev;\n    }\n\n    return current;\n}\n", "  return\
    \ fibRecursive(n);\n}\n", "  if (n <= 2) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n", "  if (n < 1) {\n    return -1;\n  } else if (n ==\
    \ 1 || n == 2) {\n    return 1;\n  } else {\n    let a = 1;\n    let b = 1;\n\
    \    let c = 0;\n    for (let i = 0; i < n - 2; i++) {\n      c = a + b;\n   \
    \   a = b;\n      b = c;\n    }\n    return c;\n  }\n}\n", "    let a = 0;\n \
    \   let b = 1;\n    for (let i = 0; i < n; i++) {\n        let c = a + b;\n  \
    \      a = b;\n        b = c;\n    }\n    return a;\n}\n\ntest(fib(10), 55);\n\
    test(fib(1), 1);\ntest(fib(8), 21);", "  // Fill-in\n  return 0;\n}\n", "    if\
    \ (n < 2) {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }\n}\n\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\n",
  "    const result = [0, 1];\n\n    for (let i = 2; i <= n; i++) {\n        const\
    \ a = result[i - 1];\n        const b = result[i - 2];\n\n        result.push(a\
    \ + b);\n    }\n\n    return result[n];\n}\n\nexport {\n    fib\n}", "    const\
    \ fibs: number[] = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        fibs[i]\
    \ = fibs[i - 1] + fibs[i - 2];\n    }\n    return fibs[n];\n}\n", "    // Your\
    \ code here\n    if (n <= 1) {\n        return n;\n    }\n    let a = 0;\n   \
    \ let b = 1;\n    for (let i = 2; i <= n; i++) {\n        let tmp = a + b;\n \
    \       a = b;\n        b = tmp;\n    }\n    return b;\n}\n", "    if (n < 1)\
    \ throw new Error(\"Invalid input.\")\n    if (n === 1) return 1\n    if (n ===\
    \ 2) return 1\n    return fib(n - 1) + fib(n - 2)\n}\n\n", "  const fib_arr =\
    \ [0, 1];\n  if (n === 1) {\n    return 1;\n  }\n  for (let i = 2; i <= n; i++)\
    \ {\n    fib_arr.push(fib_arr[i - 1] + fib_arr[i - 2]);\n  }\n  return fib_arr[n];\n\
    }\n", "    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \   return n < 2 ? n : fib(n - 1) + fib(n - 2);\n}\n", "  if (n === 0) {\n   \
    \ return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return fib(n\
    \ - 1) + fib(n - 2);\n  }\n}\n", "  if (n <= 2) {\n    return 1;\n  }\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
