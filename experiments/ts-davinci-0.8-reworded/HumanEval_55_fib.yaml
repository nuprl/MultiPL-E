name: HumanEval_55_fib
language: ts
prompt: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n//\
  \ 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n \
  \ assert.deepEqual(candidate(12),144);\n}\n\ntest();"
completions: ["  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if (n < 2) {\n      \
    \  return n;\n    }\n    let f0 = 0;\n    let f1 = 1;\n    for (let i = 2; i <=\
    \ n; i++) {\n        const f2 = f0 + f1;\n        f0 = f1;\n        f1 = f2;\n\
    \    }\n    return f1;\n}\n", "    if (n <= 2) {\n        return 1;\n    }\n \
    \   return fib(n - 1) + fib(n - 2);\n}\n", "  if (n <= 1) {\n    return n;\n \
    \ }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  let a = 1, b = 0, x;\n  while\
    \ (n >= 0){\n    x = a;\n    a = a + b;\n    b = x;\n    n--;\n  }\n  return b;\n\
    }\n", "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n    \
    \    return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n\
    }\n", "  return (n <= 1) ? n : fib(n - 1) + fib(n - 2);\n}\n", "  // Add code\
    \ here\n  return 0;\n}\n", "  let sum = 0;\n  let a = 0;\n  let b = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    sum = a + b;\n    a = b;\n    b = sum;\n  }\n\
    \  return sum;\n}\n", "  let a = 1, b = 0, temp = 0;\n  while (n >= 0) {\n   \
    \ temp = a;\n    a = a + b;\n    b = temp;\n    n--;\n  }\n  return b;\n}\n",
  "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return\
    \ 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nassertEqual(fib(10),\
    \ 55);\nassertEqual(fib(1), 1);\nassertEqual(fib(8), 21);\n", "    if (n <= 1)\
    \ {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }\n}\n", "    if (n <= 1) {\n        return n;\n    }\n    let [pre, cur]\
    \ = [0, 1];\n    for (let i = 1; i < n; i++) {\n        [pre, cur] = [cur, pre\
    \ + cur];\n    }\n    return cur;\n}\n", "    let a = 0;\n    let b = 1;\n   \
    \ let c = 1;\n    for (let i = 0; i < n; i++) {\n        a = b;\n        b = c;\n\
    \        c = a + b;\n    }\n    return a;\n}\n", "  if (n < 1) {\n    return 0;\n\
    \  }\n  let result = 1;\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n  \
    \  let temp = result;\n    result += prev;\n    prev = temp;\n  }\n  return result;\n\
    }\n", "  //Initialize the pre and current value.\n  let pre: number = 0;\n  let\
    \ cur: number = 1;\n  //Compute the n-th Fibonacci number.\n  while (n > 1) {\n\
    \    [pre, cur] = [cur, pre + cur];\n    n -= 1;\n  }\n  return cur;\n}\n", " \
    \   if (n <= 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n", "  //TODO\
    \ - you fill in here, and replace the line below with your return statement\n\
    \  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n\
    \  return fib(n - 1) + fib(n - 2);\n}\n", "  // TODO return the nth Fibonacci\
    \ number\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n", "  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
