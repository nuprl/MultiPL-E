name: HumanEval_94_skjkasdkd
language: ts
prompt: "//You are given an array of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n//\
  \ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n//\
  \ 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,\
  \ 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,\
  \ 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0,\
  \ 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["    let sorted = lst.sort((a, b) => a - b);\n    let max = sorted[sorted.length\
    \ - 1];\n    let primes = [];\n    for (let i = 0; i < max; i++) {\n        if\
    \ (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    let largestPrime:\
    \ number = primes[primes.length - 1];\n    let primeNumbers = largestPrime.toString().split('');\n\
    \    let sum: number = 0;\n    for (let i = 0; i < primeNumbers.length; i++) {\n\
    \        sum += parseInt(primeNumbers[i]);\n    }\n    return sum;\n}\n", "  \
    \  let result = 0;\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let flag = true;\n        for (let j = 2; j < lst[i]; j++) {\n\
    \            if (lst[i] % j == 0) {\n                flag = false;\n         \
    \       break;\n            }\n        }\n        if (flag) {\n            if\
    \ (lst[i] > maxPrime) {\n                maxPrime = lst[i];\n            }\n \
    \       }\n    }\n    let string: string = maxPrime.toString();\n    for (let\
    \ k = 0; k < string.length; k++) {\n        result += parseInt(string[k]);\n \
    \   }\n    return result;\n}\n", "    let largestPrime: number = 0;\n    let sum:\
    \ number = 0;\n    let temp: number = 0;\n    let counter: number = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        for (let j = 1; j <= lst[i]; j++)\
    \ {\n            if (lst[i] % j == 0) {\n                counter++;\n        \
    \    }\n        }\n        if (counter == 2) {\n            if (lst[i] > largestPrime)\
    \ {\n                largestPrime = lst[i];\n            }\n        }\n      \
    \  counter = 0;\n    }\n    while (largestPrime > 0) {\n        temp = largestPrime\
    \ % 10;\n        largestPrime = Math.floor(largestPrime / 10);\n        sum =\
    \ sum + temp;\n    }\n    return sum;\n}", "  let i = lst.reduce((a, b) => a >\
    \ b ? a : b)\n  while (!isPrime(i)) {\n    i--\n  }\n  return i.toString().split('').reduce((a,\
    \ b) => +a + +b)\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\nconsole.log(skjkasdkd([1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\nconsole.log(skjkasdkd([1, 3,\
    \ 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]))\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]))", "    let result:\
    \ number[] = [];\n    let sum = 0;\n    let i: number;\n    let j: number;\n \
    \   let highest: number = 0;\n    let prime: boolean = true;\n    for (i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] != 0) {\n            for (j = 2;\
    \ j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n               \
    \     prime = false;\n                    break;\n                }\n        \
    \    }\n            if (prime) {\n                result.push(lst[i]);\n     \
    \       }\n            prime = true;\n        }\n    }\n    for (i = 0; i < result.length;\
    \ i++) {\n        if (result[i] > highest) {\n            highest = result[i];\n\
    \        }\n    }\n    for (i = 0; i < String(highest).length; i++) {\n      \
    \  sum += Number(String(highest)[i]);\n    }\n    return sum;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  const\
    \ map = lst.reduce((acc, cur) => {\n    acc[cur] = acc[cur] ? acc[cur] + 1 : 1;\n\
    \    return acc;\n  }, {});\n  let bigPrime = 0;\n  Object.keys(map).forEach(e\
    \ => {\n    const num = Number(e);\n    if (isPrime(num) && num > bigPrime) {\n\
    \      bigPrime = num;\n    }\n  });\n  return bigPrime.toString().split('').reduce((acc,\
    \ cur) => acc + Number(cur), 0);\n}\n", "    const primeNumbers = getPrimes(Math.max(...lst));\n\
    \    const maxPrime = getMaxPrime(lst, primeNumbers);\n    return getSumOfDigits(maxPrime);\n\
    }\n", "    return 0;\n}\n", "  let largestPrime = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (isPrime(lst[i]) && lst[i] > largestPrime) {\n      largestPrime\
    \ = lst[i];\n    }\n  }\n  return sumOfDigits(largestPrime);\n}\n", "    let prime\
    \ = lst.filter(num => {\n        for (let i = 2; i < num; i++) {\n           \
    \ if (num % i === 0) return false;\n        }\n        return num > 1;\n    });\n\
    \    let sum = prime.reduce((a, b) => a + b, 0);\n    return sum;\n}\n", "   \
    \ // write your code here\n    let max: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (primes(lst[i]) && lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    return sum(max);\n}\n", "    let digitArr: number[] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n\
    \            digitArr.push(lst[i]);\n        }\n    }\n    let maxDigit = Math.max(...digitArr);\n\
    \    let numStr: string = maxDigit.toString();\n    let sum = 0;\n    for (let\
    \ i = 0; i < numStr.length; i++) {\n        sum += Number(numStr[i]);\n    }\n\
    \    return sum;\n}\n", "    let prime: number[] = [];\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 1) {\n            if (lst[i] ===\
    \ 2) {\n                prime.push(lst[i]);\n            } else {\n          \
    \      for (let j = 2; j < lst[i]; j++) {\n                    if (lst[i] % j\
    \ !== 0) {\n                        prime.push(lst[i]);\n                    }\n\
    \                }\n            }\n        }\n    }\n    console.log(prime);\n\
    \    let largestPrime = prime[0];\n    for (let i = 0; i < prime.length; i++)\
    \ {\n        if (prime[i] > largestPrime) {\n            largestPrime = prime[i];\n\
    \        }\n    }\n    let sum: number = 0;\n    let divider: number = 10;\n \
    \   while (largestPrime > 1) {\n        sum += largestPrime % divider;\n     \
    \   largestPrime = Math.floor(largestPrime / divider);\n    }\n    return sum;\n\
    }\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
    \ 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34,\
    \ 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81,\
    \ 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "  const reverse\
    \ = lst.reverse();\n  const largestPrime = reverse.find(x => isPrime(x) && isPrime(sumDigits(x)));\n\
    \  return sumDigits(largestPrime);\n}\n", "  function isPrime(n: number): boolean\
    \ {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    if (n\
    \ % 2 === 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n      if\
    \ (n % i === 0) return false;\n    }\n    return true;\n  }\n  let primeNums =\
    \ lst.filter(n => isPrime(n));\n  let maxPrime = Math.max(...primeNums);\n  let\
    \ maxPrimeStr = maxPrime.toString();\n  let maxPrimeDigits = maxPrimeStr.split(\"\
    \").map(n => Number(n));\n  return maxPrimeDigits.reduce((a, b) => a + b);\n}\n\
    console.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40,\
    \ 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12,\
    \ 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  let primeNumbers:\
    \ number[] = [];\n  let largestPrimeNumber: number = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (isPrime(lst[i])) {\n      primeNumbers.push(lst[i]);\n\
    \    }\n  }\n  largestPrimeNumber = Math.max(...primeNumbers);\n  return digitSum(largestPrimeNumber);\n\
    }\n", "    if (lst.length == 0) {\n        return -1;\n    }\n    let uniq: number[]\
    \ = Array.from(new Set(lst));\n    let maxPrime: number = Math.max(...uniq.filter(e\
    \ => primeCheck(e)));\n    let result: number = 0;\n    while (maxPrime > 0) {\n\
    \        result += maxPrime % 10;\n        maxPrime = (maxPrime - maxPrime % 10)\
    \ / 10;\n    }\n    return result;\n}\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));", "    // write your code here\n   \
    \ let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n\
    \        }\n    }\n    let result = 0;\n    while (largestPrime > 0) {\n     \
    \   result += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime\
    \ / 10);\n    }\n    return result;\n}", "    let lstOfPrimes: number[] = []\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] !== 1) {\n   \
    \         let isPrime: boolean = true\n            for (let j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j === 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) {\n                lstOfPrimes.push(lst[i])\n           \
    \ }\n        }\n    }\n    return sum(lstOfPrimes.sort((a, b) => b - a)[0].toString().split(''))\n\
    }\n", "    //for every iteration, find the largest prime number\n    // break\
    \ down the number by digits\n    // return the sum of digits\n    let sum = 0;\n\
    \    while (lst.length > 0) {\n        let largest = 0;\n        let largest_idx\
    \ = 0;\n        for (let i = 0; i < lst.length; i++) {\n            if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n                largest_idx\
    \ = i;\n            }\n        }\n        lst.splice(largest_idx, 1);\n      \
    \  if (isPrime(largest)) {\n            sum += addDigits(largest);\n        }\n\
    \    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
