name: HumanEval_94_skjkasdkd
language: ts
prompt: "//You are given an array of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n//\
  \ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n//\
  \ 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,\
  \ 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,\
  \ 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0,\
  \ 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2,\
  \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1,\
  \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["    let sorted = lst.sort((a, b) => a - b);\n    let max = sorted[sorted.length\
    \ - 1];\n    let primes = [];\n    for (let i = 0; i < max; i++) {\n        if\
    \ (isPrime(i)) {\n            primes.push(i);\n        }\n    }\n    let largestPrime:\
    \ number = primes[primes.length - 1];\n    let primeNumbers = largestPrime.toString().split('');\n\
    \    let sum: number = 0;\n    for (let i = 0; i < primeNumbers.length; i++) {\n\
    \        sum += parseInt(primeNumbers[i]);\n    }\n    return sum;\n}\n", "  \
    \  let result = 0;\n    let maxPrime = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let flag = true;\n        for (let j = 2; j < lst[i]; j++) {\n\
    \            if (lst[i] % j == 0) {\n                flag = false;\n         \
    \       break;\n            }\n        }\n        if (flag) {\n            if\
    \ (lst[i] > maxPrime) {\n                maxPrime = lst[i];\n            }\n \
    \       }\n    }\n    let string: string = maxPrime.toString();\n    for (let\
    \ k = 0; k < string.length; k++) {\n        result += parseInt(string[k]);\n \
    \   }\n    return result;\n}\n", "    let largestPrime: number = 0;\n    let sum:\
    \ number = 0;\n    let temp: number = 0;\n    let counter: number = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        for (let j = 1; j <= lst[i]; j++)\
    \ {\n            if (lst[i] % j == 0) {\n                counter++;\n        \
    \    }\n        }\n        if (counter == 2) {\n            if (lst[i] > largestPrime)\
    \ {\n                largestPrime = lst[i];\n            }\n        }\n      \
    \  counter = 0;\n    }\n    while (largestPrime > 0) {\n        temp = largestPrime\
    \ % 10;\n        largestPrime = Math.floor(largestPrime / 10);\n        sum =\
    \ sum + temp;\n    }\n    return sum;\n}", "  let i = lst.reduce((a, b) => a >\
    \ b ? a : b)\n  while (!isPrime(i)) {\n    i--\n  }\n  return i.toString().split('').reduce((a,\
    \ b) => +a + +b)\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\nconsole.log(skjkasdkd([1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\nconsole.log(skjkasdkd([1, 3,\
    \ 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]))\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]))", "    let result:\
    \ number[] = [];\n    let sum = 0;\n    let i: number;\n    let j: number;\n \
    \   let highest: number = 0;\n    let prime: boolean = true;\n    for (i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] != 0) {\n            for (j = 2;\
    \ j < lst[i]; j++) {\n                if (lst[i] % j == 0) {\n               \
    \     prime = false;\n                    break;\n                }\n        \
    \    }\n            if (prime) {\n                result.push(lst[i]);\n     \
    \       }\n            prime = true;\n        }\n    }\n    for (i = 0; i < result.length;\
    \ i++) {\n        if (result[i] > highest) {\n            highest = result[i];\n\
    \        }\n    }\n    for (i = 0; i < String(highest).length; i++) {\n      \
    \  sum += Number(String(highest)[i]);\n    }\n    return sum;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  const\
    \ map = lst.reduce((acc, cur) => {\n    acc[cur] = acc[cur] ? acc[cur] + 1 : 1;\n\
    \    return acc;\n  }, {});\n  let bigPrime = 0;\n  Object.keys(map).forEach(e\
    \ => {\n    const num = Number(e);\n    if (isPrime(num) && num > bigPrime) {\n\
    \      bigPrime = num;\n    }\n  });\n  return bigPrime.toString().split('').reduce((acc,\
    \ cur) => acc + Number(cur), 0);\n}\n", "    const primeNumbers = getPrimes(Math.max(...lst));\n\
    \    const maxPrime = getMaxPrime(lst, primeNumbers);\n    return getSumOfDigits(maxPrime);\n\
    }\n", "    return 0;\n}\n", "  let largestPrime = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (isPrime(lst[i]) && lst[i] > largestPrime) {\n      largestPrime\
    \ = lst[i];\n    }\n  }\n  return sumOfDigits(largestPrime);\n}\n", "    let prime\
    \ = lst.filter(num => {\n        for (let i = 2; i < num; i++) {\n           \
    \ if (num % i === 0) return false;\n        }\n        return num > 1;\n    });\n\
    \    let sum = prime.reduce((a, b) => a + b, 0);\n    return sum;\n}\n", "   \
    \ // write your code here\n    let max: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (primes(lst[i]) && lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    return sum(max);\n}\n", "    let digitArr: number[] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n\
    \            digitArr.push(lst[i]);\n        }\n    }\n    let maxDigit = Math.max(...digitArr);\n\
    \    let numStr: string = maxDigit.toString();\n    let sum = 0;\n    for (let\
    \ i = 0; i < numStr.length; i++) {\n        sum += Number(numStr[i]);\n    }\n\
    \    return sum;\n}\n", "    let prime: number[] = [];\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 1) {\n            if (lst[i] ===\
    \ 2) {\n                prime.push(lst[i]);\n            } else {\n          \
    \      for (let j = 2; j < lst[i]; j++) {\n                    if (lst[i] % j\
    \ !== 0) {\n                        prime.push(lst[i]);\n                    }\n\
    \                }\n            }\n        }\n    }\n    console.log(prime);\n\
    \    let largestPrime = prime[0];\n    for (let i = 0; i < prime.length; i++)\
    \ {\n        if (prime[i] > largestPrime) {\n            largestPrime = prime[i];\n\
    \        }\n    }\n    let sum: number = 0;\n    let divider: number = 10;\n \
    \   while (largestPrime > 1) {\n        sum += largestPrime % divider;\n     \
    \   largestPrime = Math.floor(largestPrime / divider);\n    }\n    return sum;\n\
    }\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
    \ 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34,\
    \ 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81,\
    \ 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "  const reverse\
    \ = lst.reverse();\n  const largestPrime = reverse.find(x => isPrime(x) && isPrime(sumDigits(x)));\n\
    \  return sumDigits(largestPrime);\n}\n", "  function isPrime(n: number): boolean\
    \ {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    if (n\
    \ % 2 === 0) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n      if\
    \ (n % i === 0) return false;\n    }\n    return true;\n  }\n  let primeNums =\
    \ lst.filter(n => isPrime(n));\n  let maxPrime = Math.max(...primeNums);\n  let\
    \ maxPrimeStr = maxPrime.toString();\n  let maxPrimeDigits = maxPrimeStr.split(\"\
    \").map(n => Number(n));\n  return maxPrimeDigits.reduce((a, b) => a + b);\n}\n\
    console.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40,\
    \ 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12,\
    \ 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  let primeNumbers:\
    \ number[] = [];\n  let largestPrimeNumber: number = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (isPrime(lst[i])) {\n      primeNumbers.push(lst[i]);\n\
    \    }\n  }\n  largestPrimeNumber = Math.max(...primeNumbers);\n  return digitSum(largestPrimeNumber);\n\
    }\n", "    if (lst.length == 0) {\n        return -1;\n    }\n    let uniq: number[]\
    \ = Array.from(new Set(lst));\n    let maxPrime: number = Math.max(...uniq.filter(e\
    \ => primeCheck(e)));\n    let result: number = 0;\n    while (maxPrime > 0) {\n\
    \        result += maxPrime % 10;\n        maxPrime = (maxPrime - maxPrime % 10)\
    \ / 10;\n    }\n    return result;\n}\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));", "    // write your code here\n   \
    \ let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n\
    \        }\n    }\n    let result = 0;\n    while (largestPrime > 0) {\n     \
    \   result += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime\
    \ / 10);\n    }\n    return result;\n}", "    let lstOfPrimes: number[] = []\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] !== 1) {\n   \
    \         let isPrime: boolean = true\n            for (let j = 2; j < lst[i];\
    \ j++) {\n                if (lst[i] % j === 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) {\n                lstOfPrimes.push(lst[i])\n           \
    \ }\n        }\n    }\n    return sum(lstOfPrimes.sort((a, b) => b - a)[0].toString().split(''))\n\
    }\n", "    //for every iteration, find the largest prime number\n    // break\
    \ down the number by digits\n    // return the sum of digits\n    let sum = 0;\n\
    \    while (lst.length > 0) {\n        let largest = 0;\n        let largest_idx\
    \ = 0;\n        for (let i = 0; i < lst.length; i++) {\n            if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n                largest_idx\
    \ = i;\n            }\n        }\n        lst.splice(largest_idx, 1);\n      \
    \  if (isPrime(largest)) {\n            sum += addDigits(largest);\n        }\n\
    \    }\n    return sum;\n}\n", "  return lst.filter(n => isPrime(n)).reduce((prev,\
    \ curr) => prev + curr);\n}\n", "  let arr: number[] = [];\n  for (let i: number\
    \ = 0; i < lst.length; i++) {\n    let j: number = 2;\n    while (j <= lst[i])\
    \ {\n      if (lst[i] % j == 0) {\n        lst[i] /= j;\n      } else {\n    \
    \    j++;\n      }\n    }\n    arr.push(j);\n  }\n  arr.sort((a, b) => b - a);\n\
    \  let s: number = 0;\n  while (arr[0] > 0) {\n    s += arr[0] % 10;\n    arr[0]\
    \ = Math.floor(arr[0] / 10);\n  }\n  return s;\n}\n", "    let primes = lst.filter(x\
    \ => x % 2 !== 0)\n    let array = primes.reduce((acc, next) => {\n        return\
    \ acc * next\n    })\n    let sum = 0\n    for (let i = 0; i < array.toString().length;\
    \ i++) {\n        sum += parseInt(array.toString()[i])\n    }\n    return sum\n\
    }\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
    \ 30, 1, 9, 3]))", "    let largest: number = 0;\n    for (let i: number = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > largest) {\n            largest\
    \ = lst[i];\n        }\n    }\n    for (let j: number = largest; j > 0; j--) {\n\
    \        let isprime: boolean = true;\n        for (let k: number = 2; k < j;\
    \ k++) {\n            if (j % k == 0) {\n                isprime = false;\n  \
    \          }\n        }\n        if (isprime) {\n            let num: number =\
    \ j;\n            let sum: number = 0;\n            while (num > 0) {\n      \
    \          sum += num % 10;\n                num = Math.floor(num / 10);\n   \
    \         }\n            return sum;\n        }\n    }\n    return 0;\n}", " \
    \ const sortedList = lst.sort((a, b) => b - a);\n  const biggest = sortedList[0];\n\
    \  let prime = 0;\n  let sum = 0;\n  for (let i = 0; i < biggest; i++) {\n   \
    \ if (isPrime(i)) {\n      prime = i;\n      break;\n    }\n  }\n  const str =\
    \ prime.toString();\n  for (let i = 0; i < str.length; i++) {\n    sum += Number(str[i]);\n\
    \  }\n  return sum;\n}\n", "    var set = [];\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        var temp = lst[i];\n        while (temp != 1) {\n          \
    \  for (var j = 2; j <= temp; j++) {\n                if (temp % j == 0) {\n \
    \                   if (set.indexOf(j) < 0) {\n                        set.push(j);\n\
    \                    }\n                    temp = temp / j;\n               \
    \     break;\n                }\n            }\n        }\n    }\n    var max_num\
    \ = 0;\n    for (var i = 0; i < set.length; i++) {\n        max_num = Math.max(max_num,\
    \ set[i]);\n    }\n    var result = 0;\n    while (max_num != 0) {\n        result\
    \ += max_num % 10;\n        max_num = max_num / 10;\n    }\n    return result;\n\
    }\n", "    let largestPrime: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        const num = lst[i];\n        if (isPrime(num) && num > largestPrime)\
    \ {\n            largestPrime = num;\n        }\n    }\n    const str = String(largestPrime);\n\
    \    let total = 0;\n    for (let i = 0; i < str.length; i++) {\n        total\
    \ += parseInt(str[i]);\n    }\n    return total;\n}\n", "    let largestPrime\
    \ = getLargestPrime(Math.max(...lst));\n    return getSumOfDigits(largestPrime);\n\
    }", "    let primes = lst.filter(isPrime);\n    let largest = primes.reduce((a,\
    \ b) => Math.max(a, b));\n    let digits = digitsOf(largest);\n    return digits.reduce((a,\
    \ b) => a + b);\n}\n", "    //two lines of code\n    return 0;\n}\n\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "  function\
    \ isPrime(x: number): boolean {\n    if (x === 1) {\n      return false;\n   \
    \ } else if (x === 2) {\n      return true;\n    } else {\n      for (let i =\
    \ 2; i < x; i++) {\n        if (x % i === 0) {\n          return false;\n    \
    \    }\n      }\n      return true;\n    }\n  }\n  let max_prime = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i]) && lst[i] > max_prime)\
    \ {\n      max_prime = lst[i];\n    }\n  }\n  let total = 0;\n  for (let i = 0;\
    \ i < max_prime.toString().length; i++) {\n    total += Number(max_prime.toString()[i]);\n\
    \  }\n  return total;\n}", "    let largest_prime = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (is_prime(lst[i]) && lst[i] > largest_prime)\
    \ {\n            largest_prime = lst[i];\n        }\n    }\n    return sum_digits(largest_prime);\n\
    }\n", "    let primes: number[] = lst.filter(v => {\n        for (let i = 2; i\
    \ < v; i++) {\n            if (v % i === 0) return false;\n        }\n       \
    \ return v > 1;\n    })\n    let max: number = Math.max(...primes);\n    let ans:\
    \ number = 0;\n    while (max > 0) {\n        ans += max % 10;\n        max =\
    \ Math.floor(max / 10);\n    }\n    return ans;\n}\n", "  let ans = 0;\n  let\
    \ res = lst\n    .map((x) => x)\n    .sort((a, b) => (a < b ? 1 : a > b ? -1 :\
    \ 0))\n    .filter((x) => isPrime(x))[0];\n  for (let i = 0; i < String(res).length;\
    \ i++) {\n    ans += Number(String(res)[i]);\n  }\n  return ans;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "    let\
    \ largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    if (largest === 0) {\n        return 0;\n\
    \    } else {\n        let nrs = [];\n        let k = 0;\n        while (largest\
    \ > 0) {\n            nrs[k] = largest % 10;\n            largest = Math.floor(largest\
    \ / 10);\n            k++;\n        }\n        let sum = 0;\n        for (let\
    \ i = 0; i < nrs.length; i++) {\n            sum += nrs[i];\n        }\n     \
    \   return sum;\n    }\n}", "    let largestPrime = lst[0];\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > largestPrime)\
    \ {\n            largestPrime = lst[i];\n        }\n    }\n    let sumOfDigits\
    \ = 0;\n    let splittedLargestPrime = largestPrime.toString().split(\"\");\n\
    \    for (let i = 0; i < splittedLargestPrime.length; i++) {\n        sumOfDigits\
    \ += Number(splittedLargestPrime[i]);\n    }\n    return sumOfDigits;\n}", " \
    \   let list = lst;\n    let lst_primes = [];\n    for (let i = 0; i < list.length;\
    \ i++) {\n        if (list[i] < 2) {\n            list.splice(i, 1);\n       \
    \     i--;\n        }\n    }\n    for (let i = 0; i < list.length; i++) {\n  \
    \      let is_it_prime = false;\n        for (let j = 2; j < list[i]; j++) {\n\
    \            if (list[i] % j === 0) {\n                is_it_prime = true;\n \
    \               break;\n            }\n        }\n        if (!is_it_prime) {\n\
    \            lst_primes.push(list[i]);\n        }\n    }\n    let largest_prime\
    \ = lst_primes[0];\n    for (let i = 0; i < lst_primes.length; i++) {\n      \
    \  if (lst_primes[i] > largest_prime) {\n            largest_prime = lst_primes[i];\n\
    \        }\n    }\n    let temp_lst = largest_prime.toString().split('');\n  \
    \  let sum = 0;\n    for (let i = 0; i < temp_lst.length; i++) {\n        sum\
    \ += Number(temp_lst[i]);\n    }\n    return sum;\n}", "    let sum: number =\
    \ 0;\n    let max: number = 0;\n    let temp: number;\n    let isPrime: boolean;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        temp = lst[i];\n        isPrime\
    \ = true;\n        for (let j = 2; j < temp / 2; j++) {\n            if (temp\
    \ % j == 0) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        if (isPrime && max < temp) {\n            max =\
    \ temp;\n        }\n    }\n    for (let i = 0; i < max.toString().length; i++)\
    \ {\n        sum += Number(max.toString()[i]);\n    }\n    return sum;\n}\n",
  "    let primes = [];\n    let largestPrime = 0;\n    let largestPrimeTotal = 0;\n\
    \    for (let n of lst) {\n        if (isPrime(n)) {\n            if (n > largestPrime)\
    \ {\n                largestPrime = n;\n            }\n        }\n    }\n    while\
    \ (largestPrime > 0) {\n        largestPrimeTotal += largestPrime % 10;\n    \
    \    largestPrime = Math.floor(largestPrime / 10);\n    }\n    return largestPrimeTotal;\n\
    }\n", "  let largestPrime = 1;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ if (\n      lst[i] > largestPrime &&\n      isPrime(lst[i]) &&\n      lst[i]\
    \ % 10 !== 0 &&\n      Math.floor(lst[i] / 10) % 10 !== 0\n    ) {\n      largestPrime\
    \ = lst[i];\n    }\n  }\n  let sum = 0;\n  while (largestPrime > 0) {\n    sum\
    \ += largestPrime % 10;\n    largestPrime = Math.floor(largestPrime / 10);\n \
    \ }\n  return sum;\n}\n", "  return 0;\n}\n", "  let a: number[] = [];\n  let\
    \ b: number[] = [];\n  let c: number[] = [];\n  let large: number = 0;\n  let\
    \ sum: number = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] %\
    \ 2 == 0) {\n      a.push(lst[i]);\n    } else {\n      b.push(lst[i]);\n    }\n\
    \  }\n  for (let i = 0; i < b.length; i++) {\n    if (b[i] % 3 == 0) {\n     \
    \ c.push(b[i]);\n    }\n  }\n  large = c[0];\n  for (let i = 0; i < c.length;\
    \ i++) {\n    if (c[i] > large) {\n      large = c[i];\n    }\n  }\n  let lst1:\
    \ number[] = [];\n  for (let i = 0; i < large.toString().length; i++) {\n    lst1.push(large.toString().charAt(i));\n\
    \  }\n  for (let i = 0; i < lst1.length; i++) {\n    sum = sum + lst1[i];\n  }\n\
    \  return sum;\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
    \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8,\
    \ 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0",
  "  let sum = 0;\n  lst.map(x => {\n    if (isPrime(x)) {\n      const dg = Array.from(x.toString());\n\
    \      sum += Math.max(...dg);\n    }\n  });\n  return sum;\n}\n", "    let maxPrime:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n\
    \        let count = 0;\n        for (let j = 1; j <= num; j++) {\n          \
    \  if (num % j == 0) {\n                count++;\n            }\n        }\n \
    \       if (count == 2) {\n            if (num > maxPrime) {\n               \
    \ maxPrime = num;\n            }\n        }\n    }\n    let sum: number = 0;\n\
    \    for (let i = 0; i < maxPrime.toString().length; i++) {\n        sum += parseInt(maxPrime.toString()[i]);\n\
    \    }\n    return sum;\n}\n", "    return -1;\n}\n", "    let answer = 0;\n \
    \   let largestPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n      \
    \  for (let j = 2; j < lst[i]; j++) {\n            if (lst[i] % j === 0) {\n \
    \               break;\n            }\n            if (j === lst[i] - 1) {\n \
    \               largestPrime = lst[i];\n            }\n        }\n    }\n    if\
    \ (largestPrime === 0) {\n        answer = 0;\n    } else {\n        while (largestPrime\
    \ >= 1) {\n            answer += largestPrime % 10;\n            largestPrime\
    \ = Math.floor(largestPrime / 10);\n        }\n    }\n    return answer;\n}\n",
  "  let largestPrime: number = 0;\n  lst.forEach((element) => {\n    const primeElement\
    \ = checkPrime(element);\n    if (primeElement > largestPrime) {\n      largestPrime\
    \ = primeElement;\n    }\n  });\n  return getDigitSum(largestPrime);\n}\n", " \
    \   let result: number = 0;\n    let i: number = 0;\n    let k: number = 0;\n\
    \    let prime: number = 0;\n    let prime_list: number[] = [];\n    let int_list:\
    \ number[] = [];\n    let prime_list_len: number = 0;\n    let res_list: number[]\
    \ = [];\n    for (i = 2; i < 10000; i++) {\n        for (k = 2; k < i; k++) {\n\
    \            if (i % k === 0) {\n                break;\n            }\n     \
    \   }\n        if (i === k) {\n            prime_list.push(i);\n        }\n  \
    \  }\n    prime_list_len = prime_list.length;\n    for (i = 0; i < lst.length;\
    \ i++) {\n        for (k = 0; k < prime_list_len; k++) {\n            if (lst[i]\
    \ === prime_list[k]) {\n                int_list.push(lst[i]);\n            }\n\
    \        }\n    }\n    prime = Math.max(...int_list);\n    if (prime === -Infinity)\
    \ {\n        return 0;\n    }\n    res_list = prime.toString().split('');\n  \
    \  for (i = 0; i < res_list.length; i++) {\n        result += parseInt(res_list[i]);\n\
    \    }\n    return result;\n}\n", "  let maxPrime = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > maxPrime && isPrime(lst[i])) {\n      maxPrime\
    \ = lst[i];\n    }\n  }\n  return getDigitSum(maxPrime);\n}\n", "    function\
    \ isPrime(n: number): boolean {\n        for (let i = 2; i < n; i++) {\n     \
    \       if (n % i === 0) {\n                return false;\n            }\n   \
    \     }\n        return n > 1;\n    }\n\n    function getSum(n: number): number\
    \ {\n        let res = 0;\n        while (n) {\n            res += n % 10;\n \
    \           n = Math.floor(n / 10);\n        }\n        return res;\n    }\n\n\
    \    return getSum(Math.max(...lst.filter(isPrime)));\n}\n", "    let sortedList\
    \ = lst.sort((a, b) => b - a);\n    let currentNumber = sortedList[0];\n    let\
    \ isPrime = true;\n    while (currentNumber > 1) {\n        if (currentNumber\
    \ % 2 === 0) {\n            currentNumber = currentNumber / 2;\n            continue;\n\
    \        }\n        for (let i = 3; i < currentNumber / 2; i++) {\n          \
    \  if (currentNumber % i === 0) {\n                isPrime = false;\n        \
    \        break;\n            }\n        }\n        if (isPrime) {\n          \
    \  break;\n        }\n        currentNumber = currentNumber - 1;\n    }\n    let\
    \ currentNumberString = currentNumber.toString();\n    let result = 0;\n    for\
    \ (let i = 0; i < currentNumberString.length; i++) {\n        result += Number(currentNumberString[i]);\n\
    \    }\n    return result;\n}", "  const a = max(lst);\n  const b = digits(a);\n\
    \  return sum(b);\n}", "    let maxPrime = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > maxPrime && isPrime(lst[i])) {\n            maxPrime\
    \ = lst[i];\n        }\n    }\n    let digit = 0;\n    while (maxPrime > 0) {\n\
    \        digit += maxPrime % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n\
    \    }\n    return digit;\n}\n", "    let largestPrime = 0;\n    let sum = 0;\n\
    \    for (let num of lst) {\n        if (isPrime(num)) {\n            if (num\
    \ > largestPrime) {\n                largestPrime = num;\n            }\n    \
    \    }\n    }\n    for (let digit of largestPrime.toString()) {\n        sum +=\
    \ parseInt(digit);\n    }\n    return sum;\n}\n", "    let largestPrime = 0;\n\
    \    let sumOfDigits = 0;\n    for (let i = 0; i < lst.length; i++) {\n      \
    \  if (isPrime(lst[i])) {\n            if (lst[i] > largestPrime) {\n        \
    \        largestPrime = lst[i];\n            }\n        }\n    }\n    while (largestPrime\
    \ >= 1) {\n        sumOfDigits += largestPrime % 10;\n        largestPrime = largestPrime\
    \ / 10;\n    }\n    return sumOfDigits;\n}\n", "    return 3;\n}\n", "    let\
    \ num = 0;\n    let maxPrm = 0;\n    for (let i of lst) {\n        let isPrime\
    \ = true;\n        if (i < 2) isPrime = false;\n        for (let j = 2; j < i;\
    \ j++) {\n            if (i % j == 0) {\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n        if (isPrime && i > maxPrm)\
    \ {\n            maxPrm = i;\n        }\n    }\n    while (maxPrm != 0) {\n  \
    \      num += maxPrm % 10;\n        maxPrm = Math.floor(maxPrm / 10);\n    }\n\
    \    return num;\n}\n", "    let result = 0;\n    let primes = getPrimesLessThan(lst.reduce((a,\
    \ b) => Math.max(a, b)));\n    let flatLst = lst.map(val => primes.reduce((a,\
    \ b) => val % b == 0 ? val / b : a, val));\n    while (flatLst.reduce((a, b) =>\
    \ Math.max(a, b)) != 1) {\n        flatLst = flatLst.map(val => primes.reduce((a,\
    \ b) => val % b == 0 ? val / b : a, val));\n    }\n    result = flatLst.reduce((a,\
    \ b) => a + b);\n    return result;\n}", "    function isPrime(n: number): boolean\
    \ {\n        for (let i = 2; i < n; i++) {\n            if (n % i === 0) {\n \
    \               return false;\n            }\n        }\n        return n > 1;\n\
    \    }\n\n    return lst.filter(isPrime).reduce((p, c) => p > c ? p : c, 0).toString().split('').reduce((p,\
    \ c) => p + parseInt(c), 0);\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7,\
    \ 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  return\
    \ 0;\n}\n", "  let arr=lst.filter(isPrime);\n  let largest=Math.max(...arr);\n\
    \  let str=largest.toString();\n  let arr1=str.split('');\n  let arr2=arr1.map(Number);\n\
    \  let sum=arr2.reduce((a,b)=>a+b);\n  return sum;\n}\n", "  const sieve = new\
    \ Sieve(Math.max(...lst));\n  let max_prime = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (sieve.isPrime(lst[i])) {\n      max_prime = Math.max(max_prime,\
    \ lst[i]);\n    }\n  }\n  return max_prime.toString().split('').reduce((a, b)\
    \ => a + +b, 0);\n}\n", "    let st = ''\n    let a = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        st += lst[i]\n    }\n    let j = st.split('')\n\
    \    for (let i = 0; i < j.length; i++) {\n        if (j[i] != 0) {\n        \
    \    a += parseInt(j[i])\n        }\n    }\n    return a\n}\n\n", "    var sum:\
    \ number = 0;\n    var max: number = 0;\n    for (var i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] >= max) {\n            max = lst[i];\n        }\n\
    \    }\n    for (var i: number = 2; i <= max; i++) {\n        if (max % i == 0)\
    \ {\n            var k: number = max / i;\n            for (var j: number = 2;\
    \ j <= k; j++) {\n                if (k % j == 0) {\n                    break;\n\
    \                }\n                else if (j == k - 1) {\n                 \
    \   while (max > 0) {\n                        sum += max % 10;\n            \
    \            max = Math.floor(max / 10);\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return sum;\n}\n", "    let max =\
    \ 0;\n    for (let num of lst) {\n        if (isPrime(num) && num > max) {\n \
    \           max = num;\n        }\n    }\n    return sumDigits(max);\n}\n", " \
    \   let largestPrime: number = 0;\n    let sumOfDigits: number = 0;\n    let isPrime:\
    \ boolean = true;\n    let sum: number = 0;\n    let d: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        let n: number = lst[i];\n   \
    \     if (n < 1) {\n            n = n * -1;\n        }\n        for (let j: number\
    \ = 2; j < n; j++) {\n            if (n % j == 0) {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        if (isPrime\
    \ && largestPrime < n) {\n            largestPrime = n;\n        }\n        isPrime\
    \ = true;\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n       \
    \ if (lst[i] == largestPrime) {\n            lst.splice(i, 1);\n        }\n  \
    \  }\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i];\n\
    \    }\n    while (sum > 0) {\n        d = sum % 10;\n        sumOfDigits += d;\n\
    \        sum = sum / 10;\n    }\n    return sumOfDigits;\n}\n\ntest(skjkasdkd,\
    \ [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3], 10);\n\
    test(skjkasdkd, [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1], 25);\n\
    test(skjkasdkd, [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1,\
    \ 9, 3], 13);\ntest(skjkasdkd, [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5,\
    \ 6], 11);\ntest", "    let max = lst[0];\n    for (let val of lst) {\n      \
    \  if (val > max) {\n            max = val;\n        }\n    }\n    let f = findPrime(max);\n\
    \    let str = f.toString();\n    let s = 0;\n    for (let c of str) {\n     \
    \   s += Number(c);\n    }\n    return s;\n}\n", "  let sum: number = 0;\n  let\
    \ max: number = Math.max(...lst);\n  let primes: number[] = primeList(max);\n\
    \  let primesDic: { [key: number]: number } = {};\n  for (let i: number = 0; i\
    \ < primes.length; i++) {\n    primesDic[primes[i]] = 1;\n  }\n  let primes2:\
    \ number[] = Object.keys(primesDic).map(x => Number(x));\n  max = Math.max(...primes2);\n\
    \  while (max > 0) {\n    sum += max % 10;\n    max = Math.floor(max / 10);\n\
    \  }\n  return sum;\n}\n", "    let largestPrime = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        let n = lst[i];\n        if (n < 1) {\n        \
    \    continue;\n        }\n        let d = 2;\n        while (n > 1) {\n     \
    \       while (n % d === 0) {\n                if (d > largestPrime) {\n     \
    \               largestPrime = d;\n                }\n                n /= d;\n\
    \            }\n            d += 1;\n        }\n    }\n    let sumOfDigits = 0;\n\
    \    let digit = 0;\n    while (largestPrime > 0) {\n        digit = largestPrime\
    \ % 10;\n        sumOfDigits += digit;\n        largestPrime = (largestPrime -\
    \ digit) / 10;\n    }\n    return sumOfDigits;\n}\n", "    const prime = findPrime(lst)\n\
    \    return prime\n        .toString()\n        .split('')\n        .map(Number)\n\
    \        .reduce((sum, cur) => sum + cur, 0)\n}\n", "    const prime = lst.filter(x\
    \ => isPrime(x)).sort((a, b) => b - a)[0];\n    return String(prime).split('').map(x\
    \ => Number(x)).reduce((a, b) => a + b);\n}\n", "    return undefined;\n}\n",
  "  let max: number = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (max <\
    \ lst[i]) {\n      max = lst[i];\n    }\n  }\n  while (true) {\n    if (isPrime(max))\
    \ {\n      break;\n    }\n    max -= 1;\n  }\n  let lst2: number[] = [];\n  while\
    \ (max > 0) {\n    lst2.push(max % 10);\n    max = Math.floor(max / 10);\n  }\n\
    \  let sum: number = 0;\n  for (let i = 0; i < lst2.length; i++) {\n    sum +=\
    \ lst2[i];\n  }\n  return sum;\n}", "  function isPrime(n: number): boolean {\n\
    \    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \      if (n % i === 0) return false;\n    }\n    return true;\n  }\n  let nums\
    \ = lst.filter(isPrime);\n  let max = Math.max(...nums);\n  let arr = String(max).split(\"\
    \");\n  let sum = arr.reduce((a, b) => Number(a) + Number(b));\n  return sum;\n\
    }\n", "    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n    \
    \    let fact = 1;\n        let prime = lst[i];\n        for (let j = 2; j <=\
    \ lst[i]; j++) {\n            if (lst[i] % j == 0) {\n                fact++;\n\
    \            }\n        }\n        if (fact == 2) {\n            if (prime > largest)\
    \ {\n                largest = prime;\n            }\n        }\n    }\n    let\
    \ sum = 0;\n    while (largest > 0) {\n        sum += largest % 10;\n        largest\
    \ = Math.floor(largest / 10);\n    }\n    return sum;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "  let\
    \ max = lst[0];\n  let maxPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  for (let\
    \ j = 2; j <= max; j++) {\n    if (isPrime(j)) {\n      maxPrime = j;\n    }\n\
    \  }\n  for (let i = 0; i < maxPrime.toString().length; i++) {\n    sum += parseInt(maxPrime.toString()[i]);\n\
    \  }\n  return sum;\n}", "    let sum = 0\n    for (let n of lst) {\n        if\
    \ (isPrime(n)) {\n            sum += n\n        }\n    }\n    return sum\n}\n",
  "  let largestPrime = 0;\n  lst.forEach(num => {\n    if (isPrime(num) && num >\
    \ largestPrime) {\n      largestPrime = num;\n    }\n  });\n  return separateDigits(largestPrime).reduce((a,\
    \ b) => a + b);\n}", "  return 0;\n}\n", "    var primes = [];\n    for (var i\
    \ = 2; i < Math.max.apply(null, lst); i++) {\n        if (lst.indexOf(i) > -1)\
    \ {\n            for (var j = 2; j < i; j++) {\n                if (i % j ===\
    \ 0) {\n                    break;\n                }\n            }\n       \
    \     if (j === i) {\n                primes.push(i);\n            }\n       \
    \ }\n    }\n    return primes.sort(function (a, b) { return b - a; })[0].toString().split('').reduce(function\
    \ (a, b) { return +a + +b; });\n}\n", "    let largestPrime = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let current = lst[i];\n        if (current\
    \ > largestPrime && isPrime(current)) {\n            largestPrime = current;\n\
    \        }\n    }\n    let result = 0;\n    for (let digit of largestPrime.toString())\
    \ {\n        result += Number(digit);\n    }\n    return result;\n}", "  return\
    \ 0;\n}", "  let primes = new Set<number>([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n  let max = 0;\n\
    \  let res = 0;\n  for (let item of lst) {\n    if (primes.has(item)) {\n    \
    \  let sum = 0;\n      while (item > 0) {\n        sum += item % 10;\n       \
    \ item = Math.floor(item / 10);\n      }\n      if (sum > max) {\n        max\
    \ = sum;\n        res = sum;\n      }\n    }\n  }\n  return res;\n}\n", "  let\
    \ max: number = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >\
    \ max) {\n      max = lst[i];\n    }\n  }\n  let sums: number = 0;\n  while (max\
    \ > 0) {\n    sums += max % 10;\n    max = Math.floor(max / 10);\n  }\n  return\
    \ sums;\n}\n", "    let largest_prime: number = -1;\n    for (let i: number =\
    \ 0; i < lst.length; i++) {\n        if (is_prime(lst[i])) {\n            if (lst[i]\
    \ > largest_prime) {\n                largest_prime = lst[i];\n            }\n\
    \        }\n    }\n    let sum_of_digits: number = sum_of_digits_(largest_prime);\n\
    \    return sum_of_digits;\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "  let\
    \ ans = 0;\n  let primes = [];\n  for (let i = 2; i < 10000; i++) {\n    primes.push(i);\n\
    \  }\n  primes = primes.filter(function (el) {\n    for (let j = 2; j < Math.sqrt(el);\
    \ j++) {\n      if (el % j === 0) {\n        return false;\n      }\n    }\n \
    \   return true;\n  });\n  let aaa = lst.filter(function (el) {\n    return primes.includes(el);\n\
    \  });\n  let bbb = Math.max(...aaa);\n  let ccc = bbb.toString().split(\"\");\n\
    \  for (let i = 0; i < ccc.length; i++) {\n    ans += parseInt(ccc[i]);\n  }\n\
    \  return ans;\n}\n", "    let largestPrimeNumber: number = 0;\n    let largestPrimeNumberSum:\
    \ number = 0;\n    let largestPrimeNumberDigits: number[];\n    let isPrime: boolean;\n\
    \    lst.forEach(element => {\n        if (element % 2 != 0 && element % 3 !=\
    \ 0 && element % 5 != 0 && element % 7 != 0) {\n            largestPrimeNumber\
    \ = element;\n        }\n    });\n    largestPrimeNumberDigits = String(largestPrimeNumber).split(\"\
    \").map(Number);\n    largestPrimeNumberDigits.forEach(element => {\n        largestPrimeNumberSum\
    \ += element;\n    });\n    return largestPrimeNumberSum;\n}", "    let a = lst.map(n\
    \ => skjkasdkd2(n)).sort((a, b) => b - a)[0];\n    return a.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    const isPrime = (num: number): boolean => {\n \
    \       for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n  \
    \              return false;\n            }\n        }\n        return num > 1;\n\
    \    };\n    let i = Math.max(...lst);\n    while (!isPrime(i)) {\n        i--;\n\
    \    }\n    return i.toString().split('').reduce((acc, val) => +acc + +val);\n\
    }\n", "  let largestPrime = 0;\n  for (let num of lst) {\n    if (isPrime(num)\
    \ && num > largestPrime) {\n      largestPrime = num;\n    }\n  }\n  return largestPrime.toString().split(\"\
    \").reduce((a, b) => Number(a) + Number(b));\n}\n", "    let lp: number = 0;\n\
    \    for (let i: number = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            if (lst[i] > lp) {\n                lp = lst[i];\n          \
    \  }\n        }\n    }\n    return sumOfDigits(lp);\n}", "    let lastPrime =\
    \ 0;\n    let sumOfDigits: number = 0;\n    const primes: number[] = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\
    \ 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,\
    \ 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\
    \ 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\
    \ 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,\
    \ 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,\
    \ 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,\
    \ 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\
    \ 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,\
    \ 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 115", "    let cur_prime\
    \ = 2;\n    let found_prime = 0;\n    let cur_digits_sum = 0;\n    let best_digits_sum\
    \ = 0;\n    let prime_arr = [];\n    // \u0417\u0430\u043F\u043E\u043B\u043D\u044F\
    \u0435\u043C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u043E\u0441\u0442\u0430\
    \u0432\u043D\u044B\u043C\u0438 \u0447\u0438\u0441\u043B\u0430\u043C\u0438\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        prime_arr.push(true);\n   \
    \ }\n    // \u041F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u043D\u0430\
    \ \u043F\u0440\u043E\u0441\u0442\u043E\u0442\u0443\n    while (true) {\n     \
    \   found_prime = 0;\n        for (let i = 0; i < lst.length; i++) {\n       \
    \     if (lst[i] === cur_prime) {\n                prime_arr[i] = false;\n   \
    \             found_prime = 1;\n                cur_digits_sum = 0;\n        \
    \        for (let j = 0; j < String(lst[i]).length; j++) {\n                 \
    \   cur_digits_sum += Number(String(lst[i])[j]);\n                }\n        \
    \        if (cur_digits_sum > best_digits_sum) {\n                    best_digits_sum\
    \ = cur_digits_sum;\n                }\n            }\n        }\n        if (found_prime\
    \ === 0) {\n            for (let i = 0; i < lst.length; i++) {\n             \
    \   if (lst[i] % cur_prime === 0) {\n                    prime_arr[i] = false;\n\
    \                }\n            }\n        }\n        cur_prime++;\n        if\
    \ (found_prime === 1) {\n            break;\n        }\n    }\n    // \u0418\u0449\
    \u0435\u043C \u043F\u0440\u043E\u0441\u0442\u043E\u0435 \u0447\u0438\u0441\u043B\
    \u043E \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (prime_arr[i] === true) {\n            return\
    \ lst[i];\n        }\n    }\n    return best_digits_sum;\n}\n", "  let maxPrm:\
    \ number = -1;\n  for (let i: number = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])\
    \ && maxPrm < lst[i]) {\n      maxPrm = lst[i];\n    }\n  }\n  if (maxPrm == -1)\
    \ {\n    return 0;\n  }\n  return prmSum(maxPrm);\n}\n", "    let max = 0;\n \
    \   let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            if (lst[i] > max) {\n                max = lst[i];\n        \
    \    }\n        }\n    }\n    if (max == 0) {\n        return 0;\n    } else {\n\
    \        let str = max.toString();\n        for (let i = 0; i < str.length; i++)\
    \ {\n            sum += parseInt(str[i]);\n        }\n        return sum;\n  \
    \  }\n}", "    let prime: number = 0;\n    let sum: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n    \
    \        if (lst[i] > prime) {\n                prime = lst[i];\n            }\n\
    \        }\n    }\n    for (let i: number = 0; i < prime.toString().length; i++)\
    \ {\n        sum += parseInt(prime.toString()[i]);\n    }\n    return sum;\n}\n",
  "  let prime;\n  let max = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n \
    \   prime = true;\n    if (lst[i] == 1) {\n      prime = false;\n    }\n    for\
    \ (let j = 2; j < lst[i]; j++) {\n      if (lst[i] % j == 0) {\n        prime\
    \ = false;\n      }\n    }\n    if (prime == true && lst[i] > max) {\n      max\
    \ = lst[i];\n    }\n  }\n  let str = max.toString();\n  let sum = 0;\n  for (let\
    \ i = 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return sum;\n\
    }\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]));\n", "  var largestPrime = 0;\n  var sumOfDigits = 0;\n\
    \  var isPrime = true;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  for (var j =\
    \ 2; j < largestPrime; j++) {\n    if (largestPrime % j == 0) {\n      isPrime\
    \ = false;\n    }\n  }\n  if (isPrime) {\n    var largestPrimeString = largestPrime.toString();\n\
    \    for (var k = 0; k < largestPrimeString.length; k++) {\n      sumOfDigits\
    \ += parseInt(largestPrimeString[k]);\n    }\n  }\n  return sumOfDigits;\n}\n",
  "    let largest = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num\
    \ = lst[i];\n        if (num > largest && isPrime(num)) {\n            largest\
    \ = num;\n        }\n    }\n    return sumDigits(largest);\n}\n", "  let maxPrime\
    \ = Math.max(...lst.filter(isPrime));\n  return maxPrime\n    .toString()\n  \
    \  .split(\"\")\n    .map(Number)\n    .reduce((a, b) => a + b);\n}\n\nexport\
    \ function isPrime(num: number): boolean {\n  if (num < 2) return false;\n  for\
    \ (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return\
    \ true;\n}\n\nexport const sum_of_digits_of_largest_prime = skjkasdkd;", "   \
    \ let largest_prime = 0;\n    for (let item of lst) {\n        if (item % 2 !==\
    \ 0 && item % 3 !== 0 && item % 5 !== 0 && item > largest_prime) {\n         \
    \   largest_prime = item;\n        }\n    }\n    let num_arr = largest_prime.toString().split('');\n\
    \    let sum = 0;\n    for (let item of num_arr) {\n        sum += Number(item);\n\
    \    }\n    return sum;\n}\n", "    let p = lst.filter(x => isPrime(x));\n   \
    \ let bigPrime = Math.max(...p);\n    return sumOfDigits(bigPrime);\n}\n", " \
    \   function isPrime(num: number): boolean {\n        for (let i = 2; i < num;\
    \ i++) {\n            if (num % i === 0) {\n                return false;\n  \
    \          }\n        }\n        return num > 1;\n    }\n\n    let largestPrime\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])\
    \ && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n\
    \    }\n    return largestPrime.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b));\n}\n", "  let largestPrime = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const prime = lst[i];\n    if (isPrime(prime) && largestPrime <\
    \ prime) {\n      largestPrime = prime;\n    }\n  }\n  return String(largestPrime).split(\"\
    \").reduce((acc, curr) => acc + Number(curr), 0);\n}\n", "  let largestPrime =\
    \ findLargestPrime(lst);\n  return sumDigits(largestPrime);\n}\n", "    let array:\
    \ number[] = lst.filter(x => x % 2 != 0 && x != 1);\n    let set = new Set();\n\
    \    array.forEach(element => {\n        for (let i = 2; i < element; i++) {\n\
    \            if (element % i == 0) {\n                set.add(element);\n    \
    \        }\n        }\n    });\n    let sum: number = 0;\n    set.forEach(element\
    \ => {\n        sum += element;\n    });\n    return sum;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    const\
    \ maxPrime = lst.filter(x => {\n        if (x <= 1) return false;\n        for\
    \ (let i = 2; i < x; i++) if (x % i === 0) return false;\n        return true;\n\
    \    }).reduce((x, y) => x > y ? x : y);\n    return maxPrime > 0 ? maxPrime.toString().split('').map(x\
    \ => parseInt(x)).reduce((x, y) => x + y) : 0;\n}\nconsole.log(skjkasdkd([0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "  let\
    \ output = 0;\n  let prime = 0;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (isPrime(lst[i])) {\n      if (lst[i] > prime) {\n        prime = lst[i];\n\
    \      }\n    }\n  }\n  let lstString = prime.toString();\n  let lstStringArr\
    \ = lstString.split(\"\");\n  for (let i = 0; i < lstStringArr.length; i++) {\n\
    \    output += parseInt(lstStringArr[i]);\n  }\n  return output;\n}\n", "    return\
    \ lst.reduce((prev, curr) => {\n        for (let i = 1; i <= curr; i++) {\n  \
    \          if (curr % i === 0 && i > prev) {\n                prev = i;\n    \
    \        }\n        }\n        return prev;\n    }, 0).toString().split('').reduce((prev,\
    \ curr) => prev + +curr, 0);\n}\n", "    if (lst.length === 0) {\n        return\
    \ -1;\n    }\n    let prime = Math.max(...lst.filter(x => isPrime(x)));\n    if\
    \ (prime < 2) {\n        return -1;\n    }\n    return sumDigits(prime);\n}",
  "    return lst.reduce((a, e) => {\n        if (isPrime(e))\n            return\
    \ a + sumOfDigits(e);\n        return a;\n    }, 0);\n}", "    function isPrime(n:\
    \ number): boolean {\n        if (n < 2) {\n            return false;\n      \
    \  }\n        if (n === 2) {\n            return true;\n        }\n        for\
    \ (let i = 2; i < n; i++) {\n            if (n % i === 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n\n    const sorted\
    \ = lst.filter(isPrime).sort((a, b) => b - a);\n    const largestPrime = sorted[0];\n\
    \    const digits = largestPrime.toString().split('');\n    const sum = digits.reduce((a,\
    \ b) => a + parseInt(b), 0);\n    return sum;\n}\n", "  let max_prime = 0;\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (is_prime(lst[i]) && lst[i] >\
    \ max_prime) {\n      max_prime = lst[i];\n    }\n  }\n  let sum = 0;\n  for (let\
    \ i = 0; i < String(max_prime).length; i++) {\n    sum += parseInt(String(max_prime)[i]);\n\
    \  }\n  return sum;\n}\n\nconst check: Checker = checker(assert);\ncheck.equal(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]), 10);\n\
    check.equal(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5,\
    \ 1]), 25);\ncheck.equal(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23,\
    \ 2323, 32, 30, 1, 9, 3]), 13);\ncheck.equal(skjkasdkd([0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]), 11);\ncheck.equal(skjkasdkd([0, 81, 12, 3, 1, 21]),\
    \ 3);\ncheck.equal(skjkasdkd([0, 8, 1, 2, 1, 7]), 7);\n\nexport const V = skjkasdkd;",
  "    let prime: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n      \
    \  if (prime < lst[i] && isPrime(lst[i])) {\n            prime = lst[i];\n   \
    \     }\n    }\n    return sumOfDigits(prime);\n}", "    return 0;\n}", "    let\
    \ max_prime = 0\n    for (let el of lst) {\n        if (is_prime(el) && el > max_prime)\
    \ {\n            max_prime = el\n        }\n    }\n    return sum_digits(max_prime)\n\
    }\n", "  const maxPrime = lst.reduce((acc, n) => (isPrime(n) && n > acc ? n :\
    \ acc), 0);\n  return [...maxPrime.toString()].reduce((acc, c) => acc + +c, 0);\n\
    }\n", "  let hasil = [];\n  let x = 0;\n  let z = 0;\n  let angka = 0;\n  let\
    \ index = 0;\n  let prime = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3];\n  let hasil2 = [];\n  let result = [];\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    for (let j = 0; j < prime.length; j++) {\n\
    \      if (lst[i] == prime[j]) {\n        hasil.push(lst[i]);\n      }\n    }\n\
    \  }\n  for (let i = 0; i < hasil.length; i++) {\n    x = hasil[i] % 10;\n   \
    \ z = Math.floor(hasil[i] / 10);\n    if (z == 0) {\n      angka = x;\n    } else\
    \ {\n      angka = x + z;\n    }\n    hasil2.push(angka);\n  }\n  for (let i =\
    \ 0; i < hasil2.length; i++) {\n    let count = 0;\n    for (let j = 0; j < hasil2.length;\
    \ j++) {\n      if (hasil2[i] > hasil2[j]) {\n        count++;\n      }\n    }\n\
    \    if (count == hasil2.length - 1) {\n      result.push(hasil2[i]);\n    }\n\
    \  }\n  return result[0];\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4,\
    \ 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107,", "    let result = 0;\n    for (let el of lst) {\n        let\
    \ prime = true;\n        for (let i = 2; i < el; i++) {\n            if (el %\
    \ i === 0) {\n                prime = false;\n                break;\n       \
    \     }\n        }\n        if (prime) {\n            result = el;\n        }\n\
    \    }\n    let sumOfDigits = 0;\n    for (let i = 0; i < result.toString().length;\
    \ i++) {\n        sumOfDigits += parseInt(result.toString()[i]);\n    }\n    return\
    \ sumOfDigits;\n}\n", "    return 0;\n}\n", "  let largestPrime = lst.filter(isPrime).sort((a,\
    \ b) => b - a)[0];\n  let digits = largestPrime.toString().split(\"\");\n  return\
    \ digits.reduce((acc, curr) => (acc += +curr), 0);\n}\n\nconst isPrime = (n: number):\
    \ boolean => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n    \
    \  return false;\n    }\n  }\n  return n > 1;\n};\n\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    let\
    \ max_prime: number = max(lst.filter(num => isPrime(num)));\n    return  max_prime.toString().split('').map(num\
    \ => Number(num)).reduce((acc, curr) => acc + curr);\n}\n", "    let prime: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n\
    \        if (prime < num && isPrime(num)) {\n            prime = num;\n      \
    \  }\n    }\n    console.log(prime);\n    let sum: number = 0;\n    let arr: number[]\
    \ = prime.toString().split('').map(Number);\n    for (let x = 0; x < arr.length;\
    \ x++) {\n        sum += arr[x];\n    }\n    return sum;\n}", "  return lst.filter(v\
    \ => isPrime(v)).sort((a, b) => b - a)[0]\n    .toString()\n    .split('')\n \
    \   .map(n => parseInt(n))\n    .reduce((a, b) => a + b);\n}\n", "    let lp =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            if (lst[i] > lp) {\n                lp = lst[i];\n          \
    \  }\n        }\n    }\n    return calcDigits(lp);\n}\n", "  return String(\n\
    \    lst\n      .filter(n => {\n        let primes = 0;\n        for (let i =\
    \ 2; i < n; i++) {\n          if (n % i === 0) {\n            primes++;\n    \
    \      }\n        }\n        return primes > 0 ? true : false;\n      })\n   \
    \   .sort((a, b) => b - a)[0]\n  )\n    .split(\"\")\n    .map(Number)\n    .reduce((a,\
    \ b) => a + b);\n}\n", "    let prime = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > prime && isPrime(lst[i])) {\n            prime\
    \ = lst[i];\n        }\n    }\n    let primeStr = prime.toString();\n    let sum\
    \ = 0;\n    for (let i = 0; i < primeStr.length; i++) {\n        sum += parseInt(primeStr[i]);\n\
    \    }\n    return sum;\n}\n", "  let largestPrime = 0;\n  for (let i of lst)\
    \ {\n    if (checkPrime(i) && i > largestPrime) {\n      largestPrime = i;\n \
    \   }\n  }\n  return largestPrime ? largestPrime.toString().split(\"\").reduce((acc,\
    \ cur) => +acc + +cur) : 0;\n}\n", "  const m = lst.reduce((a, b) => Math.max(a,\
    \ b));\n  const primes = prime(m);\n  const primes2 = new Set(primes);\n  let\
    \ max = 0;\n  for (let x of lst) {\n    let y = x;\n    while (y > 1) {\n    \
    \  let f = false;\n      for (let p of primes) {\n        if (p * p > y) break;\n\
    \        if (y % p == 0) {\n          y /= p;\n          f = true;\n         \
    \ break;\n        }\n      }\n      if (!f) break;\n    }\n    if (primes2.has(y))\
    \ {\n      let s = 0;\n      for (; y > 0; y = Math.floor(y / 10)) {\n       \
    \ s += y % 10;\n      }\n      max = Math.max(max, s);\n    }\n  }\n  return max;\n\
    }\n", "  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n\
    \    if (isPrime(n) && n > max) {\n      max = n;\n    }\n  }\n  return max;\n\
    }\n", "    let primes = lst.filter(isPrime);\n    let max = Math.max(...primes);\n\
    \    return max.toString().split('').map(s => +s).reduce((a, b) => a + b);\n}\n",
  "  const sieved = sieve(Math.max(...lst));\n  const prime = sieved.find(x => lst.indexOf(x)\
    \ > -1);\n  return prime\n    .toString()\n    .split(\"\")\n    .map(x => parseInt(x))\n\
    \    .reduce((a, b) => a + b);\n}", "    let maxPrime: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i]\
    \ > maxPrime) {\n            maxPrime = lst[i];\n        }\n    }\n    let result:\
    \ number = 0;\n    while (maxPrime > 0) {\n        result += maxPrime % 10;\n\
    \        maxPrime = Math.floor(maxPrime / 10);\n    }\n    return result;\n}\n\
    console.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40,\
    \ 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32,\
    \ 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12,\
    \ 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "    return 1;\n\
    }\n", "    let najvecjiPrastevilski = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (jePrastevilo(lst[i])) {\n            if (lst[i] > najvecjiPrastevilski)\
    \ {\n                najvecjiPrastevilski = lst[i];\n            }\n        }\n\
    \    }\n    let steviloSum: number = 0;\n    while (najvecjiPrastevilski != 0)\
    \ {\n        steviloSum += najvecjiPrastevilski % 10;\n        najvecjiPrastevilski\
    \ = Math.floor(najvecjiPrastevilski / 10);\n    }\n    return steviloSum;\n}\n",
  "    let primes = [];\n    for (let num of lst) {\n        if (isPrime(num)) {\n\
    \            primes.push(num);\n        }\n    }\n    return sumDigits(Math.max(...primes));\n\
    }\n", "  const max = Math.max(...lst);\n  let check = 0;\n  for (let i = 2; i\
    \ < max; i++) {\n    let flag = true;\n    for (let j = 2; j < i; j++) {\n   \
    \   if (i % j === 0) {\n        flag = false;\n        break;\n      }\n    }\n\
    \    if (flag && i > check) {\n      check = i;\n    }\n  }\n  return check\n\
    \    .toString()\n    .split(\"\")\n    .map(Number)\n    .reduce((a, b) => a\
    \ + b);\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32,\
    \ 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    let\
    \ [_, __, res] = [...lst].map(v => [...v.toString()]).reduce(\n        (acc, cur)\
    \ => {\n            if (cur.length > acc[0].length) {\n                [acc[0],\
    \ acc[1]] = [cur, acc[0]];\n            } else if (cur.length === acc[0].length)\
    \ {\n                acc[1] = cur;\n            }\n            return acc;\n \
    \       },\n        [[], []]\n    );\n    return [...res].reduce((acc, cur) =>\
    \ acc + +cur, 0);\n}", "    let sum = 0\n    let max = Math.max(...lst)\n    let\
    \ primes = []\n    let j = 0\n    for (let i = 2; i <= max; i++) {\n        if\
    \ (isPrime(i)) {\n            primes[j] = i\n            j++\n        }\n    }\n\
    \    let big = Math.max(...primes)\n    let splitter = big.toString().split('')\n\
    \    splitter.forEach(x => {\n        sum += Number(x)\n    })\n    return sum\n\
    }", "  let result = 0;\n  let res = lst.filter(x => x % 2 != 0 && x % 3 != 0 &&\
    \ x % 5 != 0 && x % 7 != 0);\n  let max = Math.max(...res);\n  while (max > 0)\
    \ {\n    result += max % 10;\n    max = Math.floor(max / 10);\n  }\n  return result;\n\
    }\n", "    let max: number = lst[0];\n    for (let index = 0; index < lst.length;\
    \ index++) {\n        const element = lst[index];\n        if (element > max)\
    \ {\n            max = element;\n        }\n    }\n    let maxsum: number = 0;\n\
    \    while (max != 0) {\n        let dig: number = max % 10;\n        maxsum =\
    \ maxsum + dig;\n        max = Math.floor(max / 10);\n    }\n    return maxsum;\n\
    }\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
    \ 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34,\
    \ 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81,\
    \ 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", "    let max\
    \ = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (max < lst[i]) {\n\
    \            max = lst[i]\n        }\n    }\n    let isPrime = true\n    for (let\
    \ div = 2; div <= max / 2; div++) {\n        if (max % div == 0) {\n         \
    \   isPrime = false\n            break\n        }\n    }\n    if (isPrime == true)\
    \ {\n        let num = \"\" + max\n        let sum = 0\n        for (let i = 0;\
    \ i < num.length; i++) {\n            sum += Number(num[i])\n        }\n     \
    \   return sum\n    }\n    else {\n        return -1\n    }\n}\n", "  let max\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n  \
    \  if (num > max && isPrime(num)) {\n      max = num;\n    }\n  }\n  return max;\n\
    }\n", "    function isPrime(n: number): boolean {\n        if (n < 2) return false;\n\
    \        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n   \
    \     for (let i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return\
    \ false;\n        }\n        return true;\n    }\n    let max = 0;\n    for (let\
    \ x of lst) {\n        if (isPrime(x) && x > max) max = x;\n    }\n    return\
    \ max.toString().split('').map(x => parseInt(x)).reduce((x, y) => x + y);\n}",
  "    let maxPrime: number = Math.max(...lst.filter(e => isPrime(e)));\n    let digits:\
    \ number[] = (maxPrime.toString()).split('').map(e => Number(e));\n    return\
    \ digits.reduce((acc, cur) => acc + cur);\n}\n", "    let result = 0;\n    let\
    \ max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n        }\n    }\n    if (isPrime(max)) {\n  \
    \      while (max > 0) {\n            result += max % 10;\n            max = Math.floor(max\
    \ / 10);\n        }\n    }\n    return result;\n}", "    const isPrime = (num:\
    \ number): boolean => {\n        let n = 2;\n        let squareRoot = Math.sqrt(num);\n\
    \        while (n <= squareRoot) {\n            if (num % n === 0) {\n       \
    \         return false;\n            }\n            n++;\n        }\n        return\
    \ true;\n    };\n    const getLargestPrime = (lst: number[]): number => {\n  \
    \      return lst.reduce((num, value) =>\n            isPrime(value) && num <\
    \ value ? value : num,\n        0);\n    };\n    const getSumOfDigits = (num:\
    \ number): number => {\n        const str = num.toString();\n        let sum =\
    \ 0;\n        for (let i = 0; i < str.length; i++) {\n            sum += parseInt(str[i]);\n\
    \        }\n        return sum;\n    };\n    return getSumOfDigits(getLargestPrime(lst));\n\
    }\n", "    let max_prime: number = 0;\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max_prime && is_prime(lst[i])) {\n            max_prime\
    \ = lst[i];\n        }\n    }\n    let split_max_prime: string[] = max_prime.toString().split(\"\
    \");\n    let result: number = 0;\n    for (let i: number = 0; i < split_max_prime.length;\
    \ i++) {\n        result += Number(split_max_prime[i]);\n    }\n    return result;\n\
    }\n", "    let myLst = lst.sort((a, b) => b - a);\n    let myLst2 = myLst.filter(x\
    \ => x % 2 != 0);\n    let myLst3 = myLst2.filter(x => x % 3 != 0);\n    let myLst4\
    \ = myLst3.filter(x => x % 5 != 0);\n    let myLst5 = myLst4.filter(x => x % 7\
    \ != 0);\n    let myLst6 = myLst5.filter(x => x % 11 != 0);\n    let myLst7 =\
    \ myLst6.filter(x => x % 13 != 0);\n    let myLst8 = myLst7.filter(x => x % 17\
    \ != 0);\n    let myLst9 = myLst8.filter(x => x % 19 != 0);\n    let largestNum\
    \ = myLst9[0];\n    let strArray = largestNum.toString().split(\"\");\n    let\
    \ sum: number = 0;\n    for (let x = 0; x < strArray.length; x++) {\n        sum\
    \ += parseInt(strArray[x]);\n    }\n    return sum;\n}\n\ntest('skjkasdkd #1',\
    \ () => {\n    expect(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])).toEqual(10);\n});\n\ntest('skjkasdkd #2', () =>\
    \ {\n    expect(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2,\
    \ 5, 1])).toEqual(25);\n});\n\ntest('skjkasdkd #3', () => {\n    expect(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])).toEqual(13);\n\
    });\n\ntest('skjkasdkd #4',", "    let max: number = 0;\n    let sum: number =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (primes(lst[i]) &&\
    \ lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (let i\
    \ = 0; i < String(max).length; i++) {\n        sum += Number(String(max)[i]);\n\
    \    }\n    return sum;\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  let largest\
    \ = Math.max(...lst);\n  return prime(largest);\n}\n", "  return 0;\n}\n\nexport\
    \ { skjkasdkd };", "    let largestPrime: number = 0;\n    let sum: number = 0;\n\
    \    lst.forEach(element => {\n        if (isPrime(element)) {\n            if\
    \ (element > largestPrime) {\n                largestPrime = element;\n      \
    \      }\n        }\n    });\n    let temp = largestPrime.toString();\n    for\
    \ (let index = 0; index < temp.length; index++) {\n        sum += Number(temp[index]);\n\
    \    }\n    return sum;\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  const\
    \ nums = lst.sort((a, b) => a - b);\n  const len = nums.length;\n  let ans = 0;\n\
    \  let index = len - 1;\n  let flag = true;\n  while (index >= 0 && flag) {\n\
    \    const num = nums[index];\n    for (let i = 0; i < index; i++) {\n      if\
    \ (num % nums[i] === 0) {\n        index--;\n        break;\n      }\n      if\
    \ (i === index - 1) {\n        flag = false;\n        while (num !== 0) {\n  \
    \        ans += num % 10;\n          num = Math.floor(num / 10);\n        }\n\
    \      }\n    }\n  }\n  return ans;\n}\n", "    let new_lst = lst.filter(i =>\
    \ i % 2 != 0 && i % 3 != 0 && i % 5 != 0 && i % 7 != 0)\n    let largest = new_lst.reduce((a,\
    \ b) => Math.max(a, b));\n    let str = largest.toString()\n    let sum = 0\n\
    \    for (let i = 0; i < str.length; i++) {\n        sum += parseInt(str[i])\n\
    \    }\n    return sum\n}\n", "\tconst largestPrime = Math.max(...lst.filter(x\
    \ => isPrime(x)));\n\treturn largestPrime.toString().split('').reduce((acc, curr)\
    \ => acc + parseInt(curr), 0);\n}\n", "    let primes = lst.filter(isPrime);\n\
    \    let largestPrime = Math.max(...primes);\n    let digitSum = getDigitSum(largestPrime);\n\
    \    return digitSum;\n}\n", "    let lst2 = lst.map(x => x.toString().split('').map(y\
    \ => Number(y))).flat()\n    let n = lst2.length\n    let s = 0\n    let k = 0\n\
    \    while (n--) {\n        s += lst2[k]\n        k++\n    }\n    return s\n}\n",
  "    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let flag\
    \ = 0;\n        for (let j = 2; j <= lst[i] / 2; j++) {\n            if (lst[i]\
    \ % j == 0) {\n                flag = 1;\n                break;\n           \
    \ }\n        }\n        if (flag == 0) {\n            if (lst[i] > max) {\n  \
    \              max = lst[i];\n            }\n        }\n    }\n    let sum = 0;\n\
    \    while (max > 0) {\n        sum += max % 10;\n        max = Math.floor(max\
    \ / 10);\n    }\n    return sum;\n}\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]);\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]);\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278,\
    \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]);\nskjkasdkd([0, 724, 32, 71, 99, 32, 6,\
    \ 0, 5, 91, 83, 0, 5, 6]);\nskjkasdkd([0, 81, 12, 3, 1, 21]);\nskjkasdkd([0, 8,\
    \ 1, 2, 1, 7]);", "  var sum = 0;\n  var largestPrime = 0;\n  for (var i in lst)\
    \ {\n    if (isPrime(lst[i])) {\n      if (lst[i] > largestPrime) {\n        largestPrime\
    \ = lst[i];\n      }\n    }\n  }\n  var primeString = largestPrime.toString();\n\
    \  for (var i in primeString) {\n    sum += Number(primeString[i]);\n  }\n  return\
    \ sum;\n}\n", "    let primes: number[] = [];\n    for (let num of lst) {\n  \
    \      let isPrime: boolean = true;\n        for (let div = 2; div < num; div++)\
    \ {\n            if (num % div == 0) {\n                isPrime = false;\n   \
    \             break;\n            }\n        }\n        if (isPrime) {\n     \
    \       primes.push(num);\n        }\n    }\n    let maxPrime: number = Math.max(...primes);\n\
    \    let sum: number = 0;\n    while (maxPrime > 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime = Math.floor(maxPrime / 10);\n    }\n    return sum;\n\
    }\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
    \ 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34,\
    \ 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81,\
    \ 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    let maxPrime\
    \ = lst.reduce((currentMax, number) => {\n        return isPrime(number) && number\
    \ > currentMax ? number : currentMax;\n    }, 0);\n    return maxPrime === 0 ?\
    \ 0 : getDigitsSum(maxPrime);\n}", "  const primeNumbers = getPrimeNumbers(Math.max(...lst));\n\
    \  const largestPrimeValue = getLargestPrimeValue(lst, primeNumbers);\n  return\
    \ getSumOfDigits(largestPrimeValue);\n}\n", "  let max_prime = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    let prime = true;\n    for (let j = 2; j\
    \ < lst[i]; j++) {\n      if (lst[i] % j == 0) {\n        prime = false;\n   \
    \     break;\n      }\n    }\n    if (prime && lst[i] > max_prime) {\n      max_prime\
    \ = lst[i];\n    }\n  }\n  return max_prime\n    .toString()\n    .split(\"\"\
    )\n    .map(Number)\n    .reduce((acc, cur) => acc + cur);\n}\n", "    return\
    \ 0;\n}\n", "    let largestPrime = 0;\n    let sum = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        let isPrime = true;\n        for (let j = 2;\
    \ j < lst[i]; j++) {\n            if (lst[i] % j === 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime\
    \ && lst[i] > largestPrime) {\n            largestPrime = lst[i];\n        }\n\
    \    }\n    for (let i = 0; i < largestPrime.toString().length; i++) {\n     \
    \   sum += +largestPrime.toString()[i];\n    }\n    return sum;\n}", "  let max:\
    \ number = Math.max(...lst);\n  let result: number = 0;\n  for (let i: number\
    \ = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      let digit: number\
    \ = max;\n      while (digit !== 0) {\n        result += digit % 10;\n       \
    \ digit = Math.floor(digit / 10);\n      }\n    }\n  }\n  return result;\n}\n\
    console.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3,\
    \ 2, 32, 324, 4, 3]));\n", "    let max: number = lst[0];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n\
    \        }\n    }\n    let sum: number = 0;\n    let temp: number = max;\n   \
    \ while (temp !== 0) {\n        sum += temp % 10;\n        temp = Math.floor(temp\
    \ / 10);\n    }\n    return sum;\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    let\
    \ primes = lst.filter(x => isPrime(x));\n    let largest = Math.max(...primes);\n\
    \    return largest.toString().split('').map(Number).reduce((a, b) => a + b);\n\
    }\n", "    return \"\";\n}\n", "    let largestPrime = 0;\n    let largestPrimeDigitSum\
    \ = 0;\n    let isPrime = true;\n    let digitSum = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        for (let j = 2; j < lst[i]; j++) {\n         \
    \   if (lst[i] % j === 0) {\n                isPrime = false;\n              \
    \  break;\n            }\n        }\n        if (isPrime) {\n            if (lst[i]\
    \ > largestPrime) {\n                largestPrime = lst[i];\n            }\n \
    \       }\n        isPrime = true;\n    }\n    let largestPrimeString = largestPrime.toString();\n\
    \    for (let i = 0; i < largestPrimeString.length; i++) {\n        largestPrimeDigitSum\
    \ += parseInt(largestPrimeString[i]);\n    }\n    return largestPrimeDigitSum;\n\
    }\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
    \ 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34,\
    \ 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81,\
    \ 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "  let result\
    \ = 0;\n  let lstmax = Math.max(...lst);\n  if (lstmax == 1) {\n    return result;\n\
    \  }\n  let max = Math.max(...lst);\n  if (isPrime(max)) {\n    for (let i = 0;\
    \ i < max.toString().length; i++) {\n      result += Number(max.toString()[i]);\n\
    \    }\n  } else {\n    while (!isPrime(max)) {\n      max--;\n    }\n    for\
    \ (let i = 0; i < max.toString().length; i++) {\n      result += Number(max.toString()[i]);\n\
    \    }\n  }\n  return result;\n}", "    let curr_prime: number = -1;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (helper.is_prime(lst[i])) {\n\
    \            if (lst[i] > curr_prime) {\n                curr_prime = lst[i];\n\
    \            }\n        }\n    }\n    if (curr_prime == -1) {\n        throw \"\
    Error: No prime found!\";\n    }\n    let digits: number[] = helper.digits(curr_prime);\n\
    \    let sum: number = helper.list_sum(digits);\n    return sum;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    return\
    \ largestPrime(lst)\n        .toString()\n        .split(\"\")\n        .map(s\
    \ => parseInt(s))\n        .reduce((a, b) => a + b);\n}\n", "    let uniqueArray\
    \ = Array.from(new Set(lst));\n    let counter = 0;\n    let temp = 0;\n    let\
    \ sum = 0;\n    let max = 0;\n    let primes = [];\n    for (let i = 0; i < uniqueArray.length;\
    \ i++) {\n        for (let j = 1; j <= uniqueArray[i]; j++) {\n            if\
    \ (uniqueArray[i] % j == 0) {\n                counter++;\n            }\n   \
    \     }\n        if (counter == 2) {\n            primes.push(uniqueArray[i]);\n\
    \        }\n        counter = 0;\n    }\n    if (primes.length == 0) {\n     \
    \   return 0;\n    }\n    else {\n        max = Math.max(...primes);\n       \
    \ while (max > 0) {\n            temp = max % 10;\n            sum += temp;\n\
    \            max = Math.floor(max / 10);\n        }\n        return sum;\n   \
    \ }\n}\n", "  let item = Math.max(...lst);\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (item % lst[i] === 0) {\n      item = lst[i];\n    }\n  }\n \
    \ let digits = item.toString().split(\"\");\n  let sum = 0;\n  for (let i = 0;\
    \ i < digits.length; i++) {\n    sum += Number(digits[i]);\n  }\n  return sum;\n\
    }\n", "    let n: number = 0;\n    let m: number = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] >\
    \ n) {\n                n = lst[i];\n            }\n        }\n    }\n    while\
    \ (n > 0) {\n        m += n % 10;\n        n = Math.floor(n / 10);\n    }\n  \
    \  return m;\n}\n", "    let primeList: number[] = [];\n    let sum: number =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            primeList.push(lst[i]);\n        }\n    }\n    let maxPrime:\
    \ number = Math.max(...primeList);\n    let maxPrimeString: string = String(maxPrime);\n\
    \    for (let i = 0; i < maxPrimeString.length; i++) {\n        sum += Number(maxPrimeString[i]);\n\
    \    }\n    return sum;\n}", "    const largestPrimeNumber = function(n: number):\
    \ number {\n        if (n <= 3) {\n            return n;\n        }\n\n      \
    \  let primeNumber: number = 2;\n        for (let i = 2; i < n; i++) {\n     \
    \       if (n % i === 0) {\n                primeNumber = largestPrimeNumber(n\
    \ - 1);\n                break;\n            }\n        }\n\n        return primeNumber;\n\
    \    };\n\n    const largestPrimeValue = largestPrimeNumber(Math.max(...lst));\n\
    \    let largestPrimeValueString = largestPrimeValue.toString();\n    let largestPrimeValueStringArray\
    \ = largestPrimeValueString.split('');\n    let largestPrimeValueStringArrayNumbers\
    \ = largestPrimeValueStringArray.map(function(el) {\n        return parseInt(el);\n\
    \    });\n\n    return largestPrimeValueStringArrayNumbers.reduce(function(el,\
    \ sum) {\n        return sum + el;\n    });\n}\n", "    let answer: number = 0;\n\
    \    let primes: number[] = [];\n    let primesLetters: string[] = [];\n    let\
    \ primesSum: number[] = [];\n    let biggestNum: number = 0;\n    let index: number\
    \ = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]))\
    \ {\n            primes.push(lst[i]);\n        }\n    }\n    for (let i: number\
    \ = 0; i < primes.length; i++) {\n        primesLetters.push(primes[i].toString());\n\
    \    }\n    for (let i: number = 0; i < primesLetters.length; i++) {\n       \
    \ for (let j: number = 0; j < primesLetters[i].length; j++) {\n            answer\
    \ += parseInt(primesLetters[i][j]);\n        }\n        primesSum.push(answer);\n\
    \        answer = 0;\n    }\n    for (let i: number = 0; i < primesSum.length;\
    \ i++) {\n        if (primesSum[i] > biggestNum) {\n            biggestNum = primesSum[i];\n\
    \            index = i;\n        }\n    }\n    return primesSum[index];\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skj", "    let\
    \ prime = 0;\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        let number = lst[i];\n        if (isPrime(number)) {\n            if\
    \ (number > prime) {\n                prime = number;\n            }\n       \
    \ }\n    }\n    for (let i = 0; i < prime.toString().length; i++) {\n        result\
    \ += +prime.toString()[i];\n    }\n    return result;\n}\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\n", "  let max_prime = lst.filter(isPrime).reduce((a, b)\
    \ => Math.max(a, b), -1);\n  let sum_digits = String(max_prime).split(\"\").reduce((a,\
    \ b) => Number(a) + Number(b), 0);\n  return sum_digits;\n}", "    let sum: number\
    \ = 0;\n    let results: number = 0;\n    let max: number = 0;\n    for (let i:\
    \ number = 0; i < lst.length; i++) {\n        if (lst[i] % lst[i] === 0 && lst[i]\
    \ % 1 === 0) {\n            results += lst[i];\n        }\n    }\n    console.log(results);\n\
    \    return results;\n}\n\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n", " \
    \   let prime: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n\
    \        if (isPrime(lst[i])) {\n            if (lst[i] > prime) {\n         \
    \       prime = lst[i];\n            }\n        }\n    }\n    let n: number =\
    \ 0;\n    for (let i: number = 0; i < prime.toString().length; i++) {\n      \
    \  n += parseInt(prime.toString()[i]);\n    }\n    return n;\n}\nconsole.log(skjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    const\
    \ num = maxPrime(lst);\n    return strSum(num);\n}", "    let largest_prime =\
    \ 0;\n    let current_prime = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > largest_prime) {\n            if (is_prime(lst[i])) {\n\
    \                largest_prime = lst[i];\n            }\n        }\n    }\n  \
    \  let sum = 0;\n    while (largest_prime != 0) {\n        sum += largest_prime\
    \ % 10;\n        largest_prime = largest_prime / 10;\n    }\n    return sum;\n\
    }\n", "  const prime = lst.sort((a, b) => b - a).find(value => {\n    let flag\
    \ = true;\n    for (let i = 2; i < value; i++) {\n      if (value % i === 0) {\n\
    \        flag = false;\n        break;\n      }\n    }\n    return flag;\n  });\n\
    \  return split(prime).reduce((a, b) => a + b);\n}", "    var largestPrime = 0;\n\
    \    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] > largestPrime\
    \ && isPrime(lst[i])) {\n            largestPrime = lst[i];\n        }\n    }\n\
    \    return sumOfDigits(largestPrime);\n}", "    const isPrime = (n: number):\
    \ boolean => {\n        if (n <= 1) return false;\n        for (let i = 2; i <\
    \ n; i++) {\n            if (n % i === 0) return false;\n        }\n        return\
    \ true;\n    };\n    const sumDigits = (n: number): number => {\n        const\
    \ digits = n.toString().split('');\n        let sum = 0;\n        for (let i =\
    \ 0; i < digits.length; i++) {\n            sum += parseInt(digits[i]);\n    \
    \    }\n        return sum;\n    };\n    let primes = [];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (isPrime(lst[i])) primes.push(lst[i]);\n\
    \    }\n    let max = Math.max(...primes);\n    return sumDigits(max);\n}\n",
  "    let lst_copy = lst.slice();\n    lst_copy.sort((a, b) => b - a);\n    let max_primes\
    \ = lst_copy.filter(isPrime);\n    let first_prime = max_primes[0];\n    let sum_digits\
    \ = 0;\n    for (let i = 0; i < String(first_prime).length; i++) {\n        sum_digits\
    \ += Number(String(first_prime)[i]);\n    }\n    return sum_digits;\n}\n", " \
    \ let idx = 0;\n  let max_prime = 0;\n  for (let j = 2; j < Math.max(...lst);\
    \ j++) {\n    for (let i = 2; i < j; i++) {\n      if (j % i === 0) idx++;\n \
    \   }\n    if (idx === 0) {\n      for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] === j) {\n          max_prime = j;\n        }\n      }\n   \
    \ }\n    idx = 0;\n  }\n  let sum = 0;\n  while (max_prime > 0) {\n    sum +=\
    \ max_prime % 10;\n    max_prime = Math.floor(max_prime / 10);\n  }\n  return\
    \ sum;\n}", "    let primes = lst.filter(x => isPrime(x)).sort((a, b) => a - b).reverse();\n\
    \    let largest_prime = primes[0];\n    return largest_prime.toString().split('').map(x\
    \ => Number(x)).reduce((a, b) => a + b);\n}\nconsole.log(skjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\nconsole.log(\"\
    ===============================================================\");\n", "    let\
    \ prime: number = 0;\n    let tmp: number = 0;\n    let primeArr: number[] = [];\n\
    \    let digit: number = 0;\n    let j: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        tmp = lst[i];\n        for (j = 2; j < tmp; j++) {\n       \
    \     if (tmp % j == 0) {\n                prime = 0;\n                break;\n\
    \            }\n            else {\n                prime = tmp;\n           \
    \ }\n        }\n        if (j == tmp) {\n            primeArr.push(prime);\n \
    \       }\n    }\n    console.log(primeArr);\n    let max: number = Math.max(...primeArr);\n\
    \    while (max != 0) {\n        digit += max % 10;\n        max = Math.floor(max\
    \ / 10);\n    }\n    return digit;\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5,\
    \ 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    let\
    \ num = 0;\n    let primes = [];\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (isPrime(lst[i])) {\n            primes.push(lst[i]);\n        }\n\
    \    }\n    primes.sort(function (a, b) { return b - a });\n    num = primes[0];\n\
    \    return sum(num);\n}\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5,\
    \ 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0,\
    \ 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0,\
    \ 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));", "    return\
    \ 10;\n}\n", "    let result = 0;\n    let largest = 0;\n    lst.forEach(v =>\
    \ {\n        if (isPrime(v)) {\n            if (v > largest) {\n             \
    \   largest = v;\n            }\n        }\n    });\n    largest.toString().split('').forEach(c\
    \ => {\n        result += parseInt(c);\n    });\n    return result;\n}\n\nlet\
    \ wasm: WebAssembly.Instance;\nlet imports = {\n    env: {\n        abort(_msg:\
    \ number, _file: number, line: number, column: number): void {\n            console.error(\"\
    abort called at index.ts:\" + line + \":\" + column);\n        }\n    }\n};\n",
  "    var largestPrime = 0;\n    for (var i = 0; i < lst.length; i++) {\n       \
    \ if (isPrime(lst[i]) && lst[i] > largestPrime) {\n            largestPrime =\
    \ lst[i];\n        }\n    }\n    return digitSum(largestPrime);\n}\n", "    let\
    \ largestPrime = 0;\n    // find largest prime\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (isPrime(lst[i])) {\n            if (lst[i] > largestPrime)\
    \ {\n                largestPrime = lst[i];\n            }\n        }\n    }\n\
    \    let sumOfDigits = 0;\n    // sum digits\n    while (largestPrime > 0) {\n\
    \        sumOfDigits += largestPrime % 10;\n        largestPrime = Math.floor(largestPrime\
    \ / 10);\n    }\n    return sumOfDigits;\n}", "    return lst.filter(v => isPrime(v)).reduce((p,\
    \ c) => p + c, 0).toString().split('').map(v => +v).reduce((p, c) => p + c, 0);\n\
    }", "    if (lst.length === 0) {\n        return 0;\n    }\n    let maxPrime =\
    \ 0;\n    let sum = 0;\n    for (let item of lst) {\n        if (isPrime(item))\
    \ {\n            if (item > maxPrime) {\n                maxPrime = item;\n  \
    \          }\n        }\n    }\n    while (maxPrime !== 0) {\n        sum += maxPrime\
    \ % 10;\n        maxPrime = maxPrime / 10 | 0;\n    }\n    return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
