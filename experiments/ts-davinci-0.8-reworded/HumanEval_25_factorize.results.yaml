language: ts
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const result: number[] = [];\n    let currentNumber = n;\n \
    \   for (let divisor = 2; divisor <= n; divisor++) {\n        while (currentNumber\
    \ % divisor === 0) {\n            result.push(divisor);\n            currentNumber\
    \ /= divisor;\n        }\n    }\n    return result;\n}\n\nconst result = factorize(8);\n\
    console.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 2, 2 ]

    '
  timestamp: 1659821971
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let numbers: number[] = [];\n    let i: number = 2;\n    while\
    \ (n >= i) {\n        if (n % i === 0) {\n            numbers.push(i);\n     \
    \       n = n / i;\n        } else {\n            i++;\n        }\n    }\n   \
    \ return numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (isPrime(n)) {\n    return [n];\n  }\n  const factors: number[]\
    \ = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      factors.push(i);\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk5ovaapt.ts(11,7): error TS2304: Cannot find name
    ''isPrime''.

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factorArr: number[] = [];\n  let counter: number = 2;\n  while\
    \ (n > 1) {\n    if (n % counter === 0) {\n      factorArr.push(counter);\n  \
    \    n = n / counter;\n    } else {\n      counter++;\n    }\n  }\n  return factorArr;\n\
    }\n\nfactorize(8);\nfactorize(25);\nfactorize(70);\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let testFactor: number = 2;\n\
    \    while (n > 1) {\n        while (n % testFactor === 0) {\n            factors.push(testFactor);\n\
    \            n /= testFactor;\n        }\n        testFactor += 1;\n    }\n  \
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let i = 2;\n  let factors: number[] = [];\n  while (i <= n) {\n\
    \    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let result: number[] = [];\n    let i: number = 2;\n    while\
    \ (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n       \
    \     n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    // your code here\n    let result = [];\n    let prime = 2;\n\
    \    while (n > 1) {\n        while (n % prime === 0) {\n            result.push(prime);\n\
    \            n = n / prime;\n        }\n        prime++;\n    }\n    return result;\n\
    }\nconsole.log(factorize(8)); // [2, 2, 2]\nconsole.log(factorize(25)); // [5,\
    \ 5]\nconsole.log(factorize(70)); // [2, 5, 7]\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 2, 2 ]

    [ 5, 5 ]

    [ 2, 5, 7 ]

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let m = n;\n    let result: number[] = [];\n    for (let i =\
    \ 2; i < m; i++) {\n        while (m % i === 0) {\n            result.push(i);\n\
    \            m = m / i;\n        }\n    }\n    if (m > 1) result.push(m);\n  \
    \  return result;\n}\nconsole.log(factorize(70));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 5, 7 ]

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const result: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        while (n % i === 0) {\n            result.push(i);\n            n\
    \ /= i;\n        }\n    }\n    return result;\n}\n\nconsole.log(factorize(8));\n\
    console.log(factorize(25));\nconsole.log(factorize(70));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 2, 2 ]

    [ 5, 5 ]

    [ 2, 5, 7 ]

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let arr = []\n    let divisor = 2\n    while (n >= divisor)\
    \ {\n        if (n % divisor === 0) {\n            arr.push(divisor)\n       \
    \     n = n / divisor\n        } else {\n            divisor++\n        }\n  \
    \  }\n    return arr\n}\nconsole.log(factorize(8))\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 2, 2 ]

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let dividend = n;\n    for\
    \ (let divisor = 2; divisor <= n; divisor++) {\n        while (dividend % divisor\
    \ === 0) {\n            factors.push(divisor);\n            dividend /= divisor;\n\
    \        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        while (n % i === 0) {\n            factors.push(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  if (n === 0) {\n    return factors;\n\
    \  }\n  let divisor = 2;\n  while (n !== 1) {\n    while (n % divisor === 0) {\n\
    \      factors.push(divisor);\n      n /= divisor;\n    }\n    divisor++;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let num = n;\n    let factorArr = [];\n    let divisor = 2;\n\
    \    while (num > 2) {\n        if (num % divisor === 0) {\n            factorArr.push(divisor);\n\
    \            num = num / divisor;\n        } else {\n            divisor++;\n\
    \        }\n    }\n    return factorArr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpsq9dwvkz.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsq9dwvkz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= n; i++)\
    \ {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    return [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpcbcg2c_z.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcbcg2c_z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const result: number[] = [];\n    let i = 2;\n    while (n >\
    \ 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n < 2) return [n];\n    let result: number[] = [];\n   \
    \ let prime = 2;\n    while (n >= 2) {\n        if (n % prime == 0) {\n      \
    \      result.push(prime);\n            n = n / prime;\n        } else {\n   \
    \         prime++;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const result: number[] = [];\n    let factor = 2;\n    while\
    \ (n >= factor) {\n        if (n % factor === 0) {\n            result.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor += factor ===\
    \ 2 ? 1 : 2;\n        }\n    }\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
