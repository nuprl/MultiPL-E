name: HumanEval_76_is_simple_power
language: ts
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
  \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
  \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
  \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
  \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
  \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
completions: ["  let res = 0;\n  if (x === 1) {\n    return true;\n  }\n  for (let\
    \ i = 0; i < x; i++) {\n    if (n ** i > x) {\n      return false;\n    }\n  \
    \  if (n ** i === x) {\n      return true;\n    }\n  }\n}\n\nconsole.log(is_simple_power(2,\
    \ 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    // your code here\n    return\
    \ undefined;\n}\n\n", "    return Number.isInteger(Math.log(x) / Math.log(n));\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\n", "  for (let i = 0; i < x; i++)\
    \ {\n    if (Math.pow(n, i) === x) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   if (typeof n === 'number' && n > 0 && n < Number.MAX_VALUE && typeof x ===\
    \ 'number' && x > 0 && x < Number.MAX_VALUE) {\n        let y = Math.floor(Math.log(x)\
    \ / Math.log(n));\n        return (Math.pow(n, y) === x);\n    }\n    return false;\n\
    }\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(6, 2));\n\
    console.log(is_simple_power(4, 4));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(8,\
    \ 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(10, 2));\n\
    console.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ let result = 1;\n  while (result < x) {\n    result *= n;\n  }\n  return result\
    \ === x;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ // Good luck!\n  const floatPower = Math.log(x) / Math.log(n);\n  const intPower\
    \ = Math.pow(n, Math.floor(floatPower));\n  return intPower === x;\n}\n", "  \
    \  let test = n;\n    if (x === 1) {\n        return true;\n    }\n    if (n ===\
    \ 1) {\n        return false;\n    }\n    while (test < x) {\n        test *=\
    \ n;\n    }\n    return test === x;\n}\n", "  let check = false;\n  for (let i\
    \ = 0; i < x; i++) {\n    if (n ** i === x) {\n      check = true;\n    }\n  }\n\
    \  return check;\n}\n", "  let counter = 1;\n  while (Math.pow(n, counter) < x)\
    \ {\n    counter++;\n  }\n  if (Math.pow(n, counter) === x) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nconsole.log(is_simple_power(5, 3));",
  "    return false;\n}\n", "  return (Math.log(x) / Math.log(n)) % 1 === 0;\n}\n\n\
    export default is_simple_power;", "    let result = false;\n    if (x === Math.pow(n,\
    \ Math.floor(Math.log(x) / Math.log(n)))) {\n        result = true;\n    }\n \
    \   return result;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ return Number.isInteger(Math.log(x) / Math.log(n));\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let max = Math.max(x, n);\n  let min = Math.min(x, n);\n  for (let\
    \ i = min; i <= max; i++) {\n    let y = Math.pow(n, i);\n    if (y === x) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "  const result = Math.log(x)\
    \ / Math.log(n);\n  return result === Math.floor(result);\n}\n", "    let a: number\
    \ = 1;\n    while (a < x) {\n        a *= n;\n    }\n    return a === x;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));", "  let power = Math.log(x) / Math.log(n);\n\
    \  return Math.pow(n, Math.round(power)) === x;\n}\n", "  let result = false;\n\
    \  if (Math.log2(x) % 1 === 0) {\n    result = true;\n  }\n  return result;\n\
    }\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    const result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
