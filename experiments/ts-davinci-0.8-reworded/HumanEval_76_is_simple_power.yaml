name: HumanEval_76_is_simple_power
language: ts
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
  \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
  \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
  \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
  \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
  \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
completions: ["  let res = 0;\n  if (x === 1) {\n    return true;\n  }\n  for (let\
    \ i = 0; i < x; i++) {\n    if (n ** i > x) {\n      return false;\n    }\n  \
    \  if (n ** i === x) {\n      return true;\n    }\n  }\n}\n\nconsole.log(is_simple_power(2,\
    \ 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    // your code here\n    return\
    \ undefined;\n}\n\n", "    return Number.isInteger(Math.log(x) / Math.log(n));\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\n", "  for (let i = 0; i < x; i++)\
    \ {\n    if (Math.pow(n, i) === x) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   if (typeof n === 'number' && n > 0 && n < Number.MAX_VALUE && typeof x ===\
    \ 'number' && x > 0 && x < Number.MAX_VALUE) {\n        let y = Math.floor(Math.log(x)\
    \ / Math.log(n));\n        return (Math.pow(n, y) === x);\n    }\n    return false;\n\
    }\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(6, 2));\n\
    console.log(is_simple_power(4, 4));\nconsole.log(is_simple_power(9, 3));\nconsole.log(is_simple_power(8,\
    \ 3));\nconsole.log(is_simple_power(1, 1));\nconsole.log(is_simple_power(10, 2));\n\
    console.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ let result = 1;\n  while (result < x) {\n    result *= n;\n  }\n  return result\
    \ === x;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ // Good luck!\n  const floatPower = Math.log(x) / Math.log(n);\n  const intPower\
    \ = Math.pow(n, Math.floor(floatPower));\n  return intPower === x;\n}\n", "  \
    \  let test = n;\n    if (x === 1) {\n        return true;\n    }\n    if (n ===\
    \ 1) {\n        return false;\n    }\n    while (test < x) {\n        test *=\
    \ n;\n    }\n    return test === x;\n}\n", "  let check = false;\n  for (let i\
    \ = 0; i < x; i++) {\n    if (n ** i === x) {\n      check = true;\n    }\n  }\n\
    \  return check;\n}\n", "  let counter = 1;\n  while (Math.pow(n, counter) < x)\
    \ {\n    counter++;\n  }\n  if (Math.pow(n, counter) === x) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nconsole.log(is_simple_power(5, 3));",
  "    return false;\n}\n", "  return (Math.log(x) / Math.log(n)) % 1 === 0;\n}\n\n\
    export default is_simple_power;", "    let result = false;\n    if (x === Math.pow(n,\
    \ Math.floor(Math.log(x) / Math.log(n)))) {\n        result = true;\n    }\n \
    \   return result;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ return Number.isInteger(Math.log(x) / Math.log(n));\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let max = Math.max(x, n);\n  let min = Math.min(x, n);\n  for (let\
    \ i = min; i <= max; i++) {\n    let y = Math.pow(n, i);\n    if (y === x) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n", "  const result = Math.log(x)\
    \ / Math.log(n);\n  return result === Math.floor(result);\n}\n", "    let a: number\
    \ = 1;\n    while (a < x) {\n        a *= n;\n    }\n    return a === x;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));", "  let power = Math.log(x) / Math.log(n);\n\
    \  return Math.pow(n, Math.round(power)) === x;\n}\n", "  let result = false;\n\
    \  if (Math.log2(x) % 1 === 0) {\n    result = true;\n  }\n  return result;\n\
    }\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    const result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let b = Math.log(x) / Math.log(n);\n    let a = Math.ceil(b);\n\
    \    return a === b;\n}\n", "  return x > 0 ? Number.isInteger(Math.log(x) / Math.log(n))\
    \ : false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ const result = Math.log(x) / Math.log(n);\n  return (result === Math.floor(result));\n\
    }\n", "  let i = 1;\n  let result = Math.pow(n, i);\n  while (result <= x) {\n\
    \    if (result === x) {\n      return true;\n    }\n    i++;\n    result = Math.pow(n,\
    \ i);\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ let found = false;\n  let i = 1;\n  while (found === false) {\n    if (Math.pow(n,\
    \ i) === x) {\n      found = true;\n    } else if (Math.pow(n, i) > x) {\n   \
    \   found = false;\n    }\n    i++;\n  }\n  return found;\n}\n", "  let num: number\
    \ = 1;\n  while (num <= x) {\n    if (num === x) {\n      return true;\n    }\n\
    \    num *= n;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));",
  "    let i: number = n;\n    while (i < x) {\n        i *= n;\n    }\n    return\
    \ i === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ if (x <= 0 || n <= 0) {\n    return false;\n  }\n  let num = x;\n  while (num\
    \ > 1) {\n    if (num / n !== num / n) {\n      return false;\n    }\n    num\
    \ /= n;\n  }\n  return true;\n}", "    return x ** (1 / n) % 1 === 0\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "    return Math.pow(n, Math.round(Math.log(x) / Math.log(n))) ===\
    \ x;\n}", "  if (n < 1) {\n    return false;\n  }\n  if (x % n !== 0) {\n    return\
    \ false;\n  }\n  if (x === n) {\n    return true;\n  }\n  return is_simple_power(x\
    \ / n, n);\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   if (x < 1 || n < 1) {\n        return false;\n    }\n    for (let i = 1; i\
    \ <= x; i++) {\n        if (n ** i === x) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  return Number.isInteger(Math.log(x) / Math.log(n));\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let y = x/n;\n    if (y < 1) {\n        return false;\n    }\n \
    \   if (y === 1) {\n        return true;\n    }\n    return is_simple_power(y,\
    \ n);\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "    let i = 1;\n    let result = Math.pow(n, i);\n    while (result\
    \ < x) {\n        i++;\n        result = Math.pow(n, i);\n    }\n    return result\
    \ === x;\n}\n\nexport { is_simple_power }", "  return x === Math.pow(n, Math.log(x)\
    \ / Math.log(n));\n}\n\nexport default is_simple_power;", "  let a = 0;\n  let\
    \ flag = false;\n  while (x >= 1) {\n    if (x % n === 0) {\n      x = x / n;\n\
    \      a += 1;\n    } else {\n      break;\n    }\n  }\n  if (x === 1) {\n   \
    \ flag = true;\n  }\n  return flag;\n}\n", "  return Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n))) === x;\n}\n\nconsole.log(is_simple_power(5, 3));\n", "  if (n\
    \ > x) {\n    return false;\n  } else if (n === x) {\n    return true;\n  } else\
    \ {\n    return is_simple_power(x / n, n);\n  }\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let i = 0;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n,\
    \ i) === x) {\n            return true;\n        }\n        i++;\n    }\n    return\
    \ false;\n}\n", "    return Math.pow(n, Math.log(x) / Math.log(n)) === x;\n}\n",
  "    return Math.pow(n, (Math.log(x) / Math.log(n))) === x;\n}\n", "    let res\
    \ = Math.log(x) / Math.log(n);\n    return (res) % 1 === 0;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "  let power = 1;\n  while (power < x) {\n    power *= n;\n  }\n  return\
    \ power === x;\n}\n", "    if (n > x) {\n        return false;\n    }\n    for\
    \ (let i = 1; i < x; i++) {\n        if (Math.pow(n, i) == x) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "  let count = 0;\n  let powerOfN\
    \ = n;\n  while (powerOfN <= x) {\n    if (powerOfN === x) {\n      return true;\n\
    \    }\n    powerOfN *= n;\n  }\n  return false;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "  let isPower: boolean = false;\n  for (let i = 0; i < x; i++) {\n\
    \    if (Math.pow(n, i) === x) {\n      isPower = true;\n    }\n  }\n  return\
    \ isPower;\n}\n", "    let result = false;\n    let temp = x;\n    while (temp\
    \ % n === 0) {\n        temp = temp / n;\n    }\n    if (temp === 1) {\n     \
    \   result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    // Place your code here\n    let result = 1;\n    let count = 0;\n\
    \    while (result <= x) {\n        if (result === x) {\n            return true;\n\
    \        }\n        count++;\n        result = n ** count;\n    }\n    return\
    \ false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ //your code here\n  let count = 0;\n  for (let i = 1; i <= x; i++) {\n    if\
    \ (x % i === 0) {\n      count++;\n    }\n  }\n  return x === n ** count;\n}\n",
  "  return Number.isInteger(Math.log(x) / Math.log(n));\n}\n\nexport default is_simple_power;",
  "  if (x == n) {\n    return true;\n  }\n  if (n % x !== 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x, n / x);\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "  const sqrt =\
    \ Math.sqrt(x);\n  const root = Math.pow(n, Math.floor(sqrt));\n  return root\
    \ === x;\n}", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(5, 3));\nconsole.log(is_simple_power(3, 2));",
  "  let counter = 1;\n  while (Math.pow(n, counter) <= x) {\n    if (Math.pow(n,\
    \ counter) === x) {\n      return true;\n    }\n    counter++;\n  }\n  return\
    \ false;\n}\n", "    if(x == n) {\n        return true;\n    }\n    if(x < n)\
    \ {\n        return false;\n    }\n    return is_simple_power(x/n, n);\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n", "  for (let i = 0; i < x; i++) {\n   \
    \ if (Math.pow(n, i) === x) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\nexport default is_simple_power;", "  let power: number = 1;\n  while (power\
    \ < x) {\n    power *= n;\n  }\n  return power === x;\n}\n", "  let power = n;\n\
    \  let result = false;\n  for (let i = 1; i < x; i++) {\n    power *= n;\n   \
    \ if (power === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n", "  return (Math.log(x) / Math.log(n))\
    \ % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ let result = Math.pow(n, Math.log(x) / Math.log(n));\n  return Number.isInteger(result);\n\
    }\n", "  return Math.log2(x) % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));",
  "  return x !== 0 && Number.isInteger(Math.log(x) / Math.log(n));\n}\n\nconsole.log(is_simple_power(9,\
    \ 3));", "    // My solution\n    // let output = false;\n    // let i = 1;\n\
    \    // while (n ** i < x) {\n    //     i++;\n    // }\n    // if (n ** i ===\
    \ x) {\n    //     output = true;\n    // }\n    // return output;\n\n    //Best\
    \ solution found\n    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "    //your code\n    let result: boolean = false;\n    let count:\
    \ number = 0;\n    while (x > n) {\n        x = x / n;\n        count++;\n   \
    \ }\n    if (Math.pow(n, count) === x) {\n        result = true;\n    }\n    return\
    \ result;\n}", "  if (n == 1) {\n    return true;\n  }\n  if (x == 1) {\n    return\
    \ false;\n  }\n  let i = 0;\n  let n1 = n;\n  while (n1 <= x) {\n    if (n1 ==\
    \ x) {\n      return true;\n    }\n    n1 *= n;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  if (x === 1) {\n    return true;\n  }\n  let exponent = 1;\n  let\
    \ product = n;\n  while (product < x) {\n    product *= n;\n    exponent++;\n\
    \  }\n  return product === x;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \   return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  return (\n    Math.pow(x, 1 / n) % 1 === 0 ||\n    Number(Math.pow(x,\
    \ 1 / n).toFixed(15)) === Math.pow(x, 1 / n)\n  );\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "    let temp: number = n;\n    while (x > 1) {\n        temp *= n;\n\
    \        if (temp == x) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   // return x == Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n    let\
    \ index = 0;\n    while (Math.pow(n, index) < x) {\n        index++;\n    }\n\
    \    if (Math.pow(n, index) == x) {\n        return true;\n    }\n    return false;\n\
    }\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    return [...Array(101).keys()].some(v\
    \ => v ** n === x);\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   if(x <= 0 || n <= 0) return false;\n    if(n === 1 && x === 1) return true;\n\
    \    let result = n;\n    while(result < x){\n        result *= n;\n    }\n  \
    \  return result === x;\n}\n", "  //Happy Coding ^_^\n  return x / n === Math.sqrt(x)\
    \ ? true : false;\n}\n", "    let result: number = 1;\n    while (result < x)\
    \ {\n        result *= n;\n    }\n    return result === x;\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    let a = Math.floor(result);\n    return a\
    \ === result;\n}\n", "    return x == Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n\
    }\n", "  return (Math.log(x) / Math.log(n)) % 1 === 0;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \ return Math.sqrt(x) % 1 === 0 ? true : false;\n}\n\nconsole.log(is_simple_power(4,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n", "  let remainder = x;\n  let multiplier\
    \ = n;\n  while (remainder >= multiplier) {\n    if (remainder % multiplier ===\
    \ 0) {\n      remainder = remainder / multiplier;\n    } else {\n      return\
    \ false;\n    }\n  }\n  return remainder === 1;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "  let result = false;\n  let div = 1;\n  let i = 0;\n  while (div\
    \ < x) {\n    div = n * i;\n    i++;\n  }\n  if (div === x) {\n    result = true;\n\
    \  }\n  return result;\n}", "    let result = n;\n    let power: number = 1;\n\
    \    while (result < x) {\n        result *= n;\n        power += 1;\n    }\n\
    \    return result === x;\n}\n", "  let count = 0;\n  let i = 1;\n  while (x >=\
    \ Math.pow(n, i)) {\n    if (x == Math.pow(n, i)) {\n      count++;\n    }\n \
    \   i++;\n  }\n  return count > 0 ? true : false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= n;\n\
    \    if (result === x) {\n      return true;\n    }\n  }\n  return false;\n}\n",
  "    let root = Math.pow(x, 1 / n);\n    return root % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let i = 1;\n  while (i < x) {\n    if (Math.pow(n, i) === x) {\n \
    \     return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nexport { is_simple_power\
    \ };", "    return Number.isInteger(Math.log(x) / Math.log(n));\n}\n", "    if(x\
    \ === 1){\n        return true;\n    }\n    if(n === 1){\n        return false;\n\
    \    }\n    while(x % n === 0){\n        x = x / n;\n    }\n    return x === 1;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "  if (x === 1) {\n    return true;\n\
    \  }\n  let a = 1;\n  while (a <= x) {\n    a *= n;\n    if (a === x) {\n    \
    \  return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let int = Math.log(x) / Math.log(n);\n    return Math.pow(n, int)\
    \ === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \   return Number.isInteger(Math.log(x) / Math.log(n));\n}\n\nconsole.log(is_simple_power(4,\
    \ 2));\nconsole.log(is_simple_power(4, 5));\nconsole.log(is_simple_power(4, 4));\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));", "  if (x === 1 && n !== 1) {\n    return\
    \ false;\n  }\n  let integer = 0;\n  while (n ** integer < x) {\n    integer++;\n\
    \  }\n  if (n ** integer !== x) {\n    return false;\n  }\n  return true;\n}\n",
  "    let power = Math.pow(n, x);\n    if (power === x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nconsole.log(is_simple_power(8,\
    \ 2));\n", "    let result = Math.log(x) / Math.log(n);\n    return result % 1\
    \ === 0;\n}\n\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(5, 3));\n",
  "    let out: number = 1;\n    let pow: number = 0;\n    if (x == 1) {\n       \
    \ return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    while\
    \ (out < x) {\n        out *= n;\n        pow++;\n    }\n    if (out == x) {\n\
    \        return true;\n    }\n    return false;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let result = Math.pow(n, 2);\n  while (result < x) {\n    result =\
    \ Math.pow(n, result);\n  }\n  if (result === x) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ return x == Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n}\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n", "  let value = n;\n  while (value < x)\
    \ {\n    value *= n;\n  }\n  return value === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  return x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "  return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   return Math.pow(n, Math.round(Math.log(x) / Math.log(n))) === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let count = 1;\n    let result = 1;\n    while (count <= 10) {\n\
    \        result = result * n;\n        if (result === x) {\n            return\
    \ true;\n        }\n        count++;\n    }\n    return false;\n}\n", "  for (let\
    \ i = 0; i < 1000; i++) {\n    let y = Math.pow(n, i);\n    if (y === x) {\n \
    \     return true;\n    }\n  }\n  return false;\n}\n", "  return x ** (1 / n)\
    \ % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   for (let i = 1; i <= Math.sqrt(x); i++) {\n        if (x === Math.pow(n, i))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    if (x === n) {\n        return true;\n    } else if (x % n === 0)\
    \ {\n        return is_simple_power(x / n, n);\n    } else {\n        return false;\n\
    \    }\n}\n\nexport { is_simple_power };", "    return (x > 0 && Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n))) === x);\n}\n", "    if (x === 1) {\n        return true;\n \
    \   }\n    if (n === 1) {\n        return false;\n    }\n    let max = Math.floor(Math.log(x)\
    \ / Math.log(n));\n    return n ** max === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  if (x == n) {\n    return true;\n  } else if (x % n == 0) {\n    return\
    \ is_simple_power(x / n, n);\n  } else {\n    return false;\n  }\n}\n", "  let\
    \ result = false;\n  if (n === 1) {\n    result = true;\n  } else {\n    for (let\
    \ i = 1; i <= x; i++) {\n      if (n ** i === x) {\n        result = true;\n \
    \     }\n    }\n  }\n  return result;\n}\n\nexport { is_simple_power };", "  \
    \  return x && Number.isInteger(Math.log(x) / Math.log(n));\n}\n", "    return\
    \ Math.pow(n, Math.round(Math.log(x) / Math.log(n))) === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\nconsole.log(is_simple_power(8, 3));", "  let calc: number = n;\n  while\
    \ (calc < x) {\n    calc *= n;\n  }\n  return calc === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let exponent = 0;\n  let result = 1;\n  while (result < x) {\n   \
    \ result *= n;\n    exponent++;\n  }\n  return result === x ? true : false;\n\
    }\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "  return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n\nexport default is_simple_power;", "  // console.log(`${x} ${n}`);\n\
    \  let k = Math.floor(Math.log(x) / Math.log(n));\n  // console.log(`${Math.pow(n,\
    \ k)} ${Math.pow(n, k + 1)}`);\n  return (\n    (Math.pow(n, k) === x && x < Math.pow(n,\
    \ k + 1)) || x === 1 || x === n\n  );\n}\n", "  return Number.isInteger(Math.log(x)\
    \ / Math.log(n));\n}\n", "    let y = x / n;\n    let z = y / n;\n    let power\
    \ = Math.log(x) / Math.log(n);\n    return (power === Math.round(power)) ? true\
    \ : false;\n}\nconsole.log(is_simple_power(3, 2));", "  let y = Math.log(x) /\
    \ Math.log(n);\n  return Number.isInteger(y);\n}\n", "  return Math.sqrt(x) %\
    \ 1 === 0 && Math.pow(Math.sqrt(x), 2) === x;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n", "  if (x == 1) {\n    return true;\n  }\n  let result = x;\n  for (let\
    \ i = 1; i < 1000000; i++) {\n    result = result / n;\n    if (result == 1) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let temp = 1;\n    for (let i = 0; i < n; i++) {\n        temp *=\
    \ n;\n        if (temp === x) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \ if (x <= 0 || n <= 0) {\n    return false;\n  }\n  let p = 1;\n  let k = 1;\n\
    \  while (p < x) {\n    p *= n;\n    k++;\n  }\n  return p === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let i = 1;\n    while (n ** i <= x) {\n        if (n ** i === x)\
    \ {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nconsole.log(is_simple_power(4, 2));\nconsole.log(is_simple_power(6, 2));\n\
    console.log(is_simple_power(1, 3));\n", "    let answer: number = 1;\n    let\
    \ int: number = 1;\n    while (answer < x) {\n        answer = Math.pow(n, int);\n\
    \        int++;\n    }\n    if (answer === x) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  for (let i = 1; i <= x; i++) {\n    if (n ** i === x) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    let initialN = n;\n    while (n <= x) {\n        if (n\
    \ == x) {\n            return true;\n        }\n        n *= initialN;\n    }\n\
    \    return false;\n}\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\n", "  let power = 0;\n  let res = n;\n  while (res <= x) {\n    res *=\
    \ n;\n    power++;\n  }\n  return res / n === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    return Number.isInteger(Math.log(x) / Math.log(n));\n}\n", "  //throw\
    \ new Error(\"Not implemented yet\");\n}\n", "  return x === Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "  return (\n    Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n))) === x &&\n    Math.log(x) / Math.log(n) % 1 === 0\n  );\n}\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n", "  return Number.isInteger(Math.log(x)\
    \ / Math.log(n));\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   return (Math.log(x) / Math.log(n)) % 1 === 0;\n}\n", "    return (x == Math.pow(n,\
    \ Math.round(Math.log(x) / Math.log(n))));\n}\n", "  let rest: number = x;\n \
    \ let nToPower: number = n;\n  while (rest % nToPower === 0) {\n    rest = rest\
    \ / nToPower;\n    nToPower = nToPower * n;\n  }\n  return rest === 1;\n}\n",
  "  return false;\n}\n", "    return x == n**Math.round(Math.log(x)/Math.log(n));\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    return Math.pow(n, Math.log(x)\
    \ / Math.log(n)) === x;\n}\n", "    // if x is less than 0, return false\n   \
    \ if (x < 0) {\n        return false;\n    }\n    // while x is greater than or\
    \ equal to 1\n    while (x >= 1) {\n        // if x equals 1, return true\n  \
    \      if (x === 1) {\n            return true;\n        }\n        // if x is\
    \ divisible by n, then divide x by n\n        if (x % n === 0) {\n           \
    \ x /= n;\n        }\n        // else return false\n        else {\n         \
    \   return false;\n        }\n    }\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n",
  "    if (n < 1) return false;\n    let product = n;\n    while (product < x) {\n\
    \        product *= n;\n    }\n    return product === x;\n}\n", "  const factors:\
    \ number[] = [];\n  for (let i = 1; i <= x; i++) {\n    if (x % i === 0) {\n \
    \     factors.push(i);\n    }\n  }\n  for (let i = 0; i < factors.length; i++)\
    \ {\n    for (let j = 0; j < factors.length; j++) {\n      if (Math.pow(factors[i],\
    \ factors[j]) === x) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n", "    // all x is a simple power of itself\n    if (x === n) {\n        return\
    \ true;\n    }\n    // 0 is not a simple power of anything\n    if (x === 0) {\n\
    \        return false;\n    }\n    // to get the int, divide and round down\n\
    \    const int = Math.floor(Math.log(x) / Math.log(n));\n    // if true, it's\
    \ a simple power\n    return Math.pow(n, int) === x;\n}\n", "  return Math.pow(n,\
    \ (Math.log(x) / Math.log(n))) === x;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));",
  "    let flag: boolean = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n,\
    \ i) === x) {\n            flag = true;\n        }\n    }\n    return flag;\n\
    }\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    if (x === 1) {\n        return\
    \ true;\n    }\n    const iter = (acc: number, count: number): boolean => {\n\
    \        if (acc > x) {\n            return false;\n        }\n        if (acc\
    \ === x) {\n            return true;\n        }\n        return iter(acc * n,\
    \ count + 1);\n    };\n    return iter(n, 1);\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    return (Math.log(x) / Math.log(n) % 1) === 0;\n}\n", "    //let\
    \ squared: number = 1;\n    let squared: number = n;\n    while (squared < x)\
    \ {\n        //squared = squared * n;\n        squared = squared * squared;\n\
    \    }\n    if (squared === x) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n", "  const remainder = x % n;\n  return !remainder\
    \ || remainder === 1;\n}\n\nexport default is_simple_power;", "    for (let i\
    \ = 1; i < x; i++) {\n        if (n ** i === x) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "  if (x === 1) {\n    return true;\n\
    \  }\n  let l = n;\n  let i = 1;\n  while (l < x) {\n    l *= n;\n    i++;\n \
    \ }\n  return l === x;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \   let pow = Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n    return\
    \ pow === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \   let p = 1;\n    while (x > p) {\n        p *= n;\n    }\n    return x ===\
    \ p;\n}\n", "    let powered = n;\n    while (powered < x) {\n        powered\
    \ *= n;\n    }\n    return powered === x;\n}\n", "    return (Math.log(x) / Math.log(n))\
    \ % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n", " \
    \   return Math.pow(n, Math.round(Math.log(x) / Math.log(n))) === x;\n}\n\nconsole.log(is_simple_power(27,\
    \ 3));\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    let result = false;\n    if\
    \ (Math.pow(n, Math.sqrt(x)) === x) {\n        result = true;\n    }\n    return\
    \ result;\n}\n", "    let result = 1;\n    let i = 1;\n    while (result < x)\
    \ {\n        result = Math.pow(n, i);\n        i++;\n    }\n    return (result\
    \ === x) ? true : false;\n}\n", "  let result = 1;\n  let count = 0;\n  while\
    \ (result < x) {\n    result *= n;\n    count++;\n  }\n  return result === x;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    if (x === 1 && n === 1) {\n\
    \        return true;\n    }\n    if (n === 1) {\n        return false;\n    }\n\
    \    let i = 0;\n    while (true) {\n        const powered = Math.pow(n, i);\n\
    \        if (powered === x) {\n            return true;\n        }\n        if\
    \ (powered > x) {\n            return false;\n        }\n        i++;\n    }\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    return x % n === 0 ? is_simple_power(x / n, n) : x === 1;\n}", " \
    \ if (x < 0 || n < 0) {\n    return false;\n  }\n  while (n <= x) {\n    if (n\
    \ === x) {\n      return true;\n    }\n    n *= n;\n  }\n  return false;\n}\n",
  "    if (Math.pow(n, Math.round(Math.log(x) / Math.log(n))) === x) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "  return (Math.log(x) / Math.log(n)\
    \ % 1) === 0;\n}\n", "  return Number.isInteger(Math.log(x) / Math.log(n));\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "  return Math.log2(x) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));", "    let res = 1;\n    for (let\
    \ i = 0; i < n; i++) {\n        res *= n;\n        if (res === x) return true;\n\
    \    }\n    return false;\n}\n", "  return x === 1 ? true : (x / n) % 1 === 0\
    \ ? is_simple_power(x / n, n) : false;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));",
  "  return n ** Math.log(x) / Math.log(n) === x;\n}\nconsole.log(is_simple_power(5,\
    \ 3));", "  let num = n;\n  while (num < x) {\n    num *= n;\n  }\n  return num\
    \ === x;\n}\n\nexport { is_simple_power };", "  if (x === 1) {\n    return true;\n\
    \  }\n  if (x < 1 || n < 1) {\n    return false;\n  }\n  const p: number = Math.pow(n,\
    \ Math.floor(Math.log(x) / Math.log(n)));\n  return p === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  for (let i = 0; i < x; i++) {\n    if (n ** i === x) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n",
  "    let maxPower = Math.floor(Math.log(x) / Math.log(n));\n    for (let i = 1;\
    \ i <= maxPower; i++) {\n        if (Math.pow(n, i) === x) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n", "    let temp = 1;\n   \
    \ while (temp < x) {\n        temp *= n;\n    }\n    return temp === x;\n}\n",
  "    return x == 1 ? true : (Math.log(x) / Math.log(n)) % 1 == 0;\n}\n", "    let\
    \ _x = x;\n    let _n = n;\n    while (_x > 1) {\n        if (_x % _n !== 0) return\
    \ false;\n        _x /= _n;\n    }\n    return true;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "    let result = Math.log(x) / Math.log(n);\n    if (result % 1 == 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", " \
    \ const power = Math.log(x) / Math.log(n);\n  return Math.pow(n, Math.round(power))\
    \ === x;\n}\n", "    const n_root = Math.pow(x, 1 / n);\n    return n_root ==\
    \ Math.round(n_root);\n}\n", "  let num: number = 1;\n  while (num < x) {\n  \
    \  num *= n;\n  }\n  return num === x;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));",
  "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "  let result = false;\n\
    \  let i = 1;\n  while (i <= x) {\n    if (n ** i === x) {\n      result = true;\n\
    \    }\n    i++;\n  }\n  return result;\n}", "  if (x === 1 && n > 1) {\n    return\
    \ false;\n  } else if (n === 1) {\n    return true;\n  } else if (x % n === 0)\
    \ {\n    return is_simple_power(x / n, n);\n  } else {\n    return false;\n  }\n\
    }\n", "    let res = Math.log(x) / Math.log(n);\n    let res1 = Math.floor(res);\n\
    \    return res === res1;\n}\n", "    if (x < 0 || n < 0) return false;\n    if\
    \ (x === 1) return true;\n    if (n === 1) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\n", "  let result = 0;\n  for (let i = 0; i < x; i++) {\n    result\
    \ = Math.pow(n, i);\n    if (result === x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "  // Write your code here\n\
    \  // Good luck!\n  for (let i = 1; i < x; i++) {\n    if (Math.pow(n, i) ===\
    \ x) {\n      return true;\n    }\n  }\n  return false;\n}\n", "    const sqr\
    \ = Math.sqrt(x);\n    if (sqr === parseInt(sqr.toString())) {\n        let pow\
    \ = Math.pow(sqr, 2);\n        if (pow === x) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\n", "    for (let i = 1; i < x; i++) {\n\
    \        if (Math.pow(n, i) === x) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ const num = Math.pow(n, x);\n  if (num % n === 0) {\n    return true;\n  }\n\
    \  return false;\n}\n", "  let simple_power: number = n\n  for (let i: number\
    \ = 1; simple_power < x; i++) {\n    simple_power *= n\n  }\n  return simple_power\
    \ === x\n}\nconsole.log(is_simple_power(1, 4))\nconsole.log(is_simple_power(2,\
    \ 2))\nconsole.log(is_simple_power(8, 2))\nconsole.log(is_simple_power(3, 2))\n\
    console.log(is_simple_power(3, 1))\nconsole.log(is_simple_power(5, 3))\n", " \
    \ // Good luck!\n  return false;\n}\n\nexport { is_simple_power };", "    let\
    \ y = n;\n    while (y < x) {\n        y *= n;\n    }\n    return y === x;\n}\n",
  "  let result = Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n  return result\
    \ === x;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
