name: HumanEval_24_largest_divisor
language: ts
prompt: "//For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_divisor;\n  assert.deepEqual(candidate(3),1);\n\
  \  assert.deepEqual(candidate(7),1);\n  assert.deepEqual(candidate(10),5);\n  assert.deepEqual(candidate(100),50);\n\
  \  assert.deepEqual(candidate(49),7);\n}\n\ntest();"
completions: ["    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n\
    \            return i;\n        }\n    }\n    return 0;\n}\n", "    let largest\
    \ = 0;\n    for (let i = 1; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      largest = i;\n        }\n    }\n    return largest;\n}\nconsole.log(largest_divisor(15));\n",
  "    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n           \
    \ return i;\n        }\n    }\n    return 0;\n}\nconsole.log(largest_divisor(15));\n\
    console.log(largest_divisor(17));\n", "  for (let i = n - 1; i > 0; i--) {\n \
    \   if (n % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n}\n", "    for\
    \ (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n            return\
    \ i;\n        }\n    }\n    return 0;\n}\n", "  let divisor = n;\n  while (divisor\
    \ > 0) {\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    divisor--;\n\
    \  }\n  return divisor;\n}\n", "    if (n === 1) {\n        return n;\n    }\n\
    \n    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n        \
    \    return i;\n        }\n    }\n}\n", "  if (n === 1) {\n    return 1;\n  }\n\
    \  if (n % 2 === 0) {\n    return largest_divisor(n / 2);\n  }\n  return largest_divisor(n\
    \ - 1);\n}\n", "  let largestDivisor = 0;\n  for (let i = n - 1; i > 0; i--) {\n\
    \    if (n % i === 0) {\n      largestDivisor = i;\n      break;\n    }\n  }\n\
    \  return largestDivisor;\n}\n\ndescribe(\"largest_divisor\", () => {\n  it(\"\
    returns the largest divisor when number is odd\", () => {\n    expect(largest_divisor(15)).toEqual(5);\n\
    \  });\n  it(\"returns the largest divisor when number is odd\", () => {\n   \
    \ expect(largest_divisor(2)).toEqual(1);\n  });\n  it(\"returns the largest divisor\
    \ when number is even\", () => {\n    expect(largest_divisor(20)).toEqual(10);\n\
    \  });\n});\n", "  let i = n - 1;\n  while (n % i !== 0) {\n    i--;\n  }\n  return\
    \ i;\n}\n", "  return 0;\n}\n", "  return 0;\n}\n", "    for (let i = n - 1; i\
    \ > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\n", "  for (let i = n - 1; i > 0; i--) {\n    if (n\
    \ % i === 0) {\n      return i;\n    }\n  }\n  return 1;\n}\n", "  return 1;\n\
    }\n", "  let divisor = 2;\n  while (n > divisor) {\n    if (n % divisor == 0)\
    \ {\n      return n / divisor;\n    }\n    divisor += 1;\n  }\n  return 1;\n}\n",
  "    for (let i = n - 1; i > 0; i--) {\n        if (n % i === 0) {\n           \
    \ return i;\n        }\n    }\n    return 0;\n}\n", "    let i = n - 1;\n    while\
    \ (i > 0) {\n        if (n % i === 0) {\n            return i;\n        }\n  \
    \      i--;\n    }\n    return i;\n}\nconsole.log(largest_divisor(15));\n", " \
    \ let i = 1;\n  let largDiv = 1;\n  for (i; i < n; i++) {\n    if (n % i === 0)\
    \ {\n      largDiv = i;\n    }\n  }\n  return largDiv;\n}\n", "  return _.findLast(_.range(1,\
    \ n), (i) => n % i === 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
