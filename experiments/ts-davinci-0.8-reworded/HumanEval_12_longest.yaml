name: HumanEval_12_longest
language: ts
prompt: "//Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n// strings of the same length. Return undefined in case the\
  \ input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\"\
  , \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\
  \nfunction longest(strings: string[]): string | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"
completions: ["    if (strings.length === 0) {\n        return undefined;\n    }\n\
    \n    let max = strings[0];\n    strings.forEach(str => {\n        if (str.length\
    \ > max.length) {\n            max = str;\n        }\n    });\n    return max;\n\
    }\n", "    if (strings.length === 0) {\n        return undefined;\n    }\n   \
    \ const len = strings.map(s => s.length);\n    const maxLen = Math.max(...len);\n\
    \    return strings[len.indexOf(maxLen)];\n}\n", "    let longestStringLength\
    \ = 0;\n    let longestString: string | undefined;\n    for (let i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longestStringLength) {\n           \
    \ longestStringLength = strings[i].length;\n            longestString = strings[i];\n\
    \        }\n    }\n    return longestString;\n}\n", "  if (strings.length ===\
    \ 0) {\n    return undefined;\n  }\n  let currentLongest = strings[0];\n  for\
    \ (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > currentLongest.length)\
    \ {\n      currentLongest = strings[i];\n    }\n  }\n  return currentLongest;\n\
    }\n\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));\n", "    let idx: number\
    \ = 0;\n    let longest: string = '';\n    while (idx < strings.length) {\n  \
    \      if (strings[idx].length > longest.length) {\n            longest = strings[idx];\n\
    \        }\n        idx++;\n    }\n    return longest;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let max = strings[0];\n    for\
    \ (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > max.length)\
    \ {\n            max = strings[i];\n        }\n    }\n    return max;\n}", " \
    \ if (strings.length === 0) {\n    return undefined;\n  }\n  if (strings.length\
    \ === 1) {\n    return strings[0];\n  }\n  let maxLength = strings[0].length;\n\
    \  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++)\
    \ {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n\
    \      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n",
  "    let longestStr = \"\";\n    strings.forEach(function (str) {\n        if (str.length\
    \ > longestStr.length) {\n            longestStr = str;\n        }\n    });\n\
    \    return longestStr;\n}\n", "  let max: string = \"\";\n  for (let i = 0; i\
    \ < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max\
    \ = strings[i];\n    }\n  }\n  return max.length == 0 ? undefined : max;\n}\n",
  "    let longest = strings[0];\n    for (let index = 1; index < strings.length;\
    \ index++) {\n        if (strings[index].length > longest.length) {\n        \
    \    longest = strings[index];\n        }\n    }\n    return longest;\n}\n", " \
    \   let theLongest = strings[0];\n    for (let i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].length > theLongest.length) {\n            theLongest\
    \ = strings[i];\n        }\n    }\n    return theLongest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longestString = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  return strings.reduce((a,\
    \ b) => a.length > b.length ? a : b);\n}\n", "    let maxLength = 0;\n    let\
    \ longestStrings: string[] = [];\n    for (let i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n\
    \            longestStrings = [strings[i]];\n        } else if (strings[i].length\
    \ === maxLength) {\n            longestStrings.push(strings[i]);\n        }\n\
    \    }\n    return longestStrings[0];\n}\n", "  let longestString: string | undefined\
    \ = undefined;\n  if (strings.length > 0) {\n    longestString = strings[0];\n\
    \    for (let str of strings) {\n      if (str.length > longestString.length)\
    \ {\n        longestString = str;\n      }\n    }\n  }\n  return longestString;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let [longest,\
    \ ...rest] = strings;\n  for (let str of rest) {\n    if (str.length > longest.length)\
    \ {\n      longest = str;\n    }\n  }\n  return longest;\n}", "  return strings.reduce((a,\
    \ b) => a.length > b.length ? a : b);\n}\n", "    if (strings.length === 0) return\
    \ undefined;\n    let longest: string = strings[0];\n    for (let i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longest: string = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length)\
    \ {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "  return\
    \ strings.reduce((acc, str) => (str.length > acc.length ? str : acc), '');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
