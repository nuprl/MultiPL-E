name: HumanEval_12_longest
language: ts
prompt: "//Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n// strings of the same length. Return undefined in case the\
  \ input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\"\
  , \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\
  \nfunction longest(strings: string[]): string | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = longest;\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([\"x\", \"y\", \"z\"]),\"x\");\n  assert.deepEqual(candidate([\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]),\"zzzz\");\n}\n\ntest();"
completions: ["    if (strings.length === 0) {\n        return undefined;\n    }\n\
    \n    let max = strings[0];\n    strings.forEach(str => {\n        if (str.length\
    \ > max.length) {\n            max = str;\n        }\n    });\n    return max;\n\
    }\n", "    if (strings.length === 0) {\n        return undefined;\n    }\n   \
    \ const len = strings.map(s => s.length);\n    const maxLen = Math.max(...len);\n\
    \    return strings[len.indexOf(maxLen)];\n}\n", "    let longestStringLength\
    \ = 0;\n    let longestString: string | undefined;\n    for (let i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longestStringLength) {\n           \
    \ longestStringLength = strings[i].length;\n            longestString = strings[i];\n\
    \        }\n    }\n    return longestString;\n}\n", "  if (strings.length ===\
    \ 0) {\n    return undefined;\n  }\n  let currentLongest = strings[0];\n  for\
    \ (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > currentLongest.length)\
    \ {\n      currentLongest = strings[i];\n    }\n  }\n  return currentLongest;\n\
    }\n\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));\n", "    let idx: number\
    \ = 0;\n    let longest: string = '';\n    while (idx < strings.length) {\n  \
    \      if (strings[idx].length > longest.length) {\n            longest = strings[idx];\n\
    \        }\n        idx++;\n    }\n    return longest;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let max = strings[0];\n    for\
    \ (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > max.length)\
    \ {\n            max = strings[i];\n        }\n    }\n    return max;\n}", " \
    \ if (strings.length === 0) {\n    return undefined;\n  }\n  if (strings.length\
    \ === 1) {\n    return strings[0];\n  }\n  let maxLength = strings[0].length;\n\
    \  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++)\
    \ {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n\
    \      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n",
  "    let longestStr = \"\";\n    strings.forEach(function (str) {\n        if (str.length\
    \ > longestStr.length) {\n            longestStr = str;\n        }\n    });\n\
    \    return longestStr;\n}\n", "  let max: string = \"\";\n  for (let i = 0; i\
    \ < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max\
    \ = strings[i];\n    }\n  }\n  return max.length == 0 ? undefined : max;\n}\n",
  "    let longest = strings[0];\n    for (let index = 1; index < strings.length;\
    \ index++) {\n        if (strings[index].length > longest.length) {\n        \
    \    longest = strings[index];\n        }\n    }\n    return longest;\n}\n", " \
    \   let theLongest = strings[0];\n    for (let i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].length > theLongest.length) {\n            theLongest\
    \ = strings[i];\n        }\n    }\n    return theLongest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longestString = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  return strings.reduce((a,\
    \ b) => a.length > b.length ? a : b);\n}\n", "    let maxLength = 0;\n    let\
    \ longestStrings: string[] = [];\n    for (let i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n\
    \            longestStrings = [strings[i]];\n        } else if (strings[i].length\
    \ === maxLength) {\n            longestStrings.push(strings[i]);\n        }\n\
    \    }\n    return longestStrings[0];\n}\n", "  let longestString: string | undefined\
    \ = undefined;\n  if (strings.length > 0) {\n    longestString = strings[0];\n\
    \    for (let str of strings) {\n      if (str.length > longestString.length)\
    \ {\n        longestString = str;\n      }\n    }\n  }\n  return longestString;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let [longest,\
    \ ...rest] = strings;\n  for (let str of rest) {\n    if (str.length > longest.length)\
    \ {\n      longest = str;\n    }\n  }\n  return longest;\n}", "  return strings.reduce((a,\
    \ b) => a.length > b.length ? a : b);\n}\n", "    if (strings.length === 0) return\
    \ undefined;\n    let longest: string = strings[0];\n    for (let i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longest: string = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length)\
    \ {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "  return\
    \ strings.reduce((acc, str) => (str.length > acc.length ? str : acc), '');\n}\n",
  "    let longest = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n\
    \        if (strings[i].length > longest.length) {\n            longest = strings[i];\n\
    \        }\n    }\n    return longest;\n}\n", "    //TODO\n    return strings.reduce((a,b)\
    \ => a.length > b.length ? a : b);\n}\n", "  if (strings.length === 0) {\n   \
    \ return undefined;\n  }\n\n  let longestString = strings[0];\n  for (let i =\
    \ 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "    return strings.reduce((acc: string, curr: string) => {\n        return\
    \ acc.length > curr.length ? acc : curr;\n    });\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longestString = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "    if (strings.length === 0) {\n        return undefined;\n    }\n   \
    \ const sorted = strings.sort((a, b) => {\n        if (a.length > b.length) {\n\
    \            return -1;\n        }\n        if (a.length < b.length) {\n     \
    \       return 1;\n        }\n        return 0;\n    });\n    return sorted[0];\n\
    }", "  let longestString: string | undefined = undefined;\n  if (strings.length\
    \ === 0) {\n    return longestString;\n  } else {\n    longestString = strings[0];\n\
    \    for (let i = 1; i < strings.length; i++) {\n      if (strings[i].length >\
    \ longestString.length) {\n        longestString = strings[i];\n      }\n    }\n\
    \    return longestString;\n  }\n}\n", "    let longest: string | undefined =\
    \ undefined;\n    for (let string of strings) {\n        if (longest === undefined\
    \ || string.length > longest.length) {\n            longest = string;\n      \
    \  }\n    }\n    return longest;\n}\n", "  if (strings.length === 0) {\n    return\
    \ undefined;\n  }\n  return strings.reduce((acc, curr) => {\n    return acc.length\
    \ > curr.length ? acc : curr;\n  });\n}\n", "    if (strings.length < 1) {\n \
    \       return undefined;\n    }\n    let newStrings = strings.sort(function (str1,\
    \ str2) {\n        return str2.length - str1.length;\n    });\n    return newStrings[0];\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let longest\
    \ = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length\
    \ > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n\
    }\n", "    if (strings.length == 0) return undefined;\n    let lngStr = strings[0];\n\
    \    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > lngStr.length) {\n            lngStr = strings[i];\n        }\n    }\n   \
    \ return lngStr;\n}\n", "  // TODO\n  let ln: number = strings.length;\n  if (ln\
    \ === 0) {\n    return undefined;\n  } else {\n    let max = strings[0];\n   \
    \ for (let i = 1; i < ln; i++) {\n      if (strings[i].length > max.length) {\n\
    \        max = strings[i];\n      }\n    }\n    return max;\n  }\n}", "  return\
    \ strings.reduce((prev, current) => {\n    return prev.length > current.length\
    \ ? prev : current;\n  });\n}\n", "    var longest = \"\";\n    for (var i = 0;\
    \ i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\n", "    if (strings.length > 0) {\n        let longest: string = strings[0];\n\
    \        for (let i = 1; i < strings.length; i++) {\n            if (strings[i].length\
    \ > longest.length) {\n                longest = strings[i];\n            }\n\
    \        }\n        return longest;\n    }\n    return undefined;\n}\n", "   \
    \ if (strings.length === 0) {\n        return undefined;\n    }\n    let currentLongest\
    \ = strings[0];\n    strings.forEach(s => {\n        if (s.length > currentLongest.length)\
    \ {\n            currentLongest = s;\n        }\n    });\n    return currentLongest;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestIndex\
    \ = 0;\n  let longestLength = strings[0].length;\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longestLength) {\n      longestIndex = i;\n\
    \      longestLength = strings[i].length;\n    }\n  }\n  return strings[longestIndex];\n\
    }\n", "    let longestString = strings[0];\n    for (let str of strings) {\n \
    \       if (str.length > longestString.length) {\n            longestString =\
    \ str;\n        }\n    }\n    return longestString;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n  let result = strings[0];\n  for (let\
    \ i = 1; i < strings.length; i++) {\n    if (strings[i].length > result.length)\
    \ {\n      result = strings[i];\n    }\n  }\n  return result;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    return strings.reduce((a, b)\
    \ => a.length > b.length ? a : b);\n}\n", "  if (strings.length === 0) {\n   \
    \ return undefined;\n  }\n  const lengths = strings.map(value => value.length);\n\
    \  const maxLength = Math.max(...lengths);\n  const indexOfMaxLength = lengths.indexOf(maxLength);\n\
    \  return strings[indexOfMaxLength];\n}\n\ndescribe(\"test longest\", () => {\n\
    \  it(\"test empty\", () => {\n    expect(longest([])).toBeUndefined();\n  });\n\
    \  it(\"test one\", () => {\n    expect(longest([\"a\"])).toBe(\"a\");\n  });\n\
    \  it(\"test two\", () => {\n    expect(longest([\"a\", \"b\"])).toBe(\"a\");\n\
    \  });\n  it(\"test two\", () => {\n    expect(longest([\"bb\", \"a\"])).toBe(\"\
    bb\");\n  });\n  it(\"test many\", () => {\n    expect(longest([\"a\", \"bb\"\
    , \"ccc\"])).toBe(\"ccc\");\n  });\n});\n", "    if (strings.length == 0) return\
    \ undefined;\n    return strings.reduce((prev, current) =>\n        (prev.length\
    \ > current.length) ? prev : current);\n}\n", "    // If the array of strings\
    \ is empty, return undefined.\n    if (strings.length === 0) {\n        return\
    \ undefined;\n    }\n    // Sort the array of strings alphabetically.\n    let\
    \ newStrings = strings.sort();\n    // Return the last element of the array.\n\
    \    return newStrings[newStrings.length - 1];\n}\n", "    let result: string\
    \ | undefined = undefined;\n    let longestLength: number = 0;\n    for (let string\
    \ of strings) {\n        if (string.length > longestLength) {\n            longestLength\
    \ = string.length;\n            result = string;\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));\nconsole.log(longest([\"\
    a\", \"b\", \"c\"]));\nconsole.log(longest([]));\n", "  let maxLen = -1\n  let\
    \ maxStr = \"\"\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length\
    \ > maxLen) {\n      maxLen = strings[i].length\n      maxStr = strings[i]\n \
    \   }\n  }\n  return maxStr\n}\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]))\n",
  "    let maxLength = 0;\n    let maxString = undefined;\n    for (let i = 0; i <\
    \ strings.length; i++) {\n        if (strings[i].length > maxLength) {\n     \
    \       maxLength = strings[i].length;\n            maxString = strings[i];\n\
    \        }\n    }\n    return maxString;\n}\n", "    if (strings.length == 0)\
    \ {\n        return undefined;\n    }\n    return strings.reduce((prev, curr)\
    \ => prev.length > curr.length ? prev : curr);\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    return strings.reduce((prev,\
    \ curr) => {\n        return prev.length > curr.length ? prev : curr;\n    });\n\
    }\n", "    if (strings.length === 0) return undefined;\n    let longestStr: string\
    \ = \"\";\n    strings.forEach(str => {\n        if (str.length > longestStr.length)\
    \ longestStr = str;\n    });\n    return longestStr;\n}\n", "    if (strings.length\
    \ == 0) {\n        return undefined;\n    }\n\n    let sorted = strings.sort((a,\
    \ b) => b.length - a.length);\n    return sorted[0];\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let result = strings[0];\n \
    \   for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > result.length) {\n            result = strings[i];\n        }\n    }\n   \
    \ return result;\n}\n", "    let longest: string = \"\";\n    for (let i = 0;\
    \ i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest.length\
    \ > 0 ? longest : undefined;\n}\n\ntest(\"test longest() with []\", () => {\n\
    \    expect(longest([])).toBe(undefined);\n});\n\ntest(\"test longest() with ['a',\
    \ 'b', 'c']\", () => {\n    expect(longest([\"a\", \"b\", \"c\"])).toBe(\"a\"\
    );\n});\n\ntest(\"test longest() with ['a', 'bb', 'ccc']\", () => {\n    expect(longest([\"\
    a\", \"bb\", \"ccc\"])).toBe(\"ccc\");\n});\n", "  const n = strings.length;\n\
    \  if (n === 0) {\n    return undefined;\n  }\n  let longest = strings[0];\n \
    \ for (let i = 1; i < n; i++) {\n    if (strings[i].length > longest.length) {\n\
    \      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    if (strings.length\
    \ < 1) {\n        return undefined;\n    }\n    let long: string = strings[0];\n\
    \    for (let i: number = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > long.length) {\n            long = strings[i];\n        }\n    }\n    return\
    \ long;\n}\n", "    return strings.reduce((a, b) => (a.length > b.length) ? a\
    \ : b, '');\n}\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for\
    \ (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "    if (strings.length > 0) {\n        var longestString = strings[0];\n\
    \        for (var i = 1; i < strings.length; i++) {\n            if (strings[i].length\
    \ > longestString.length) {\n                longestString = strings[i];\n   \
    \         }\n        }\n        return longestString;\n    }\n    return undefined;\n\
    }\n", "    let longestStr: string = \"\";\n    for (let str of strings) {\n  \
    \      if (str.length > longestStr.length) {\n            longestStr = str;\n\
    \        }\n    }\n    return longestStr;\n}\n", "  // return strings.sort((a,\
    \ b) => b.length - a.length)[0];\n  return strings.reduce((a, b) => (a.length\
    \ > b.length ? a : b));\n}\n", "  let long = \"\";\n  for (let str of strings)\
    \ {\n    if (str.length > long.length) {\n      long = str;\n    }\n  }\n  return\
    \ long.length === 0 ? undefined : long;\n}\n", "    if (strings.length === 0)\
    \ return undefined;\n    let longest = strings[0];\n    for (let i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let maxLength = 0;\n  let longestString\
    \ = strings[0];\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length\
    \ > maxLength) {\n      maxLength = strings[i].length;\n      longestString =\
    \ strings[i];\n    }\n  }\n\n  return longestString;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longestString = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));\nconsole.log(longest([\"\
    a\", \"b\", \"c\"]));\nconsole.log(longest([]));\n", "    if (strings.length ===\
    \ 0) {\n        return undefined;\n    }\n    let longest = strings[0];\n    for\
    \ (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\n", "  let result = undefined;\n  for (let i = 0; i < strings.length; i++) {\n\
    \    if (result == undefined || strings[i].length > result.length) {\n      result\
    \ = strings[i];\n    }\n  }\n  return result;\n}\n", "  return strings.reduce((longest:\
    \ string, current: string) => {\n    return current.length > longest.length ?\
    \ current : longest;\n  }, \"\");\n}\n", "  if (!strings.length) {\n    return\
    \ undefined;\n  }\n\n  let longestString = \"\";\n  for (let i = 0; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longestString.length) {\n      longestString\
    \ = strings[i];\n    }\n  }\n  return longestString;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let longest: string = strings[0];\n\
    \    strings.forEach(item => {\n        if (item.length > longest.length) {\n\
    \            longest = item;\n        }\n    });\n    return longest;\n}\n", " \
    \ if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString\
    \ = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length\
    \ > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n \
    \ return longestString;\n}\n", "    if (strings.length === 0) return undefined;\n\
    \    let longestString = strings[0];\n    strings.forEach(\n        (string: string)\
    \ => {\n            if (string.length > longestString.length) {\n            \
    \    longestString = string;\n            }\n        }\n    );\n    return longestString;\n\
    }\n", "    if (strings.length == 0) {\n        return undefined;\n    }\n    let\
    \ longest = strings[0];\n    strings.forEach(str => {\n        if (str.length\
    \ > longest.length) {\n            longest = str;\n        }\n    });\n    return\
    \ longest;\n}\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n\
    \n  let longest = strings[0];\n  for (let string of strings) {\n    if (string.length\
    \ > longest.length) {\n      longest = string;\n    }\n  }\n  return longest;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let result\
    \ = strings[0];\n  for (let str of strings) {\n    if (str.length > result.length)\
    \ {\n      result = str;\n    }\n  }\n  return result;\n}\n", "  return undefined;\n\
    }\n\ntest(`Longest string`, () => {\n  expect(longest([])).toBe(undefined);\n\
    \  expect(longest([\"a\", \"b\", \"c\"])).toBe(\"a\");\n  expect(longest([\"a\"\
    , \"bb\", \"ccc\"])).toBe(\"ccc\");\n});\n", "  let longestWord = '';\n  for (let\
    \ i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestWord.length)\
    \ {\n      longestWord = strings[i];\n    }\n  }\n  return longestWord;\n}\n\n\
    let x = longest(['a', 'bb', 'ccc']);\nconsole.log(x);\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    var result = strings[0];\n \
    \   for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > result.length) {\n            result = strings[i];\n        }\n    }\n   \
    \ return result;\n}\n", "  let lngst: string = \"\";\n  for (let i = 0; i < strings.length;\
    \ i++) {\n    if (strings[i].length > lngst.length) {\n      lngst = strings[i];\n\
    \    }\n  }\n  return lngst;\n}\n", "  if (strings.length === 0) {\n    return\
    \ undefined;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n\
    \    }\n  }\n  return longest;\n}\n", "  if (strings.length === 0) {\n    return\
    \ undefined;\n  }\n  const result = [];\n  let counter = 0;\n  let index = 0;\n\
    \  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > counter)\
    \ {\n      counter = strings[i].length;\n      index = i;\n    }\n  }\n  return\
    \ strings[index];\n}\n", "    let longest = strings[0];\n    for (let i = 1; i\
    \ < strings.length; i++) {\n        if (strings[i].length > longest.length) {\n\
    \            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\
    \nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));\nconsole.log(longest([\"a\"\
    , \"b\", \"c\"]));\nconsole.log(longest([]));\n", "    // TODO:\n    return undefined;\n\
    }\n", "    let longestLength = 0;\n    let longestString = undefined;\n    for\
    \ (let i = 0; i < strings.length; i++) {\n        const curr = strings[i];\n \
    \       if (curr.length > longestLength) {\n            longestLength = curr.length;\n\
    \            longestString = curr;\n        }\n    }\n    return longestString;\n\
    }\n", "    if (strings.length === 0) {\n        return undefined;\n    }\n   \
    \ return strings.reduce((p, c) => p.length > c.length ? p : c);\n}\n", "  if (strings.length\
    \ == 0) {\n    return undefined;\n  }\n  let longest = strings[0];\n  for (let\
    \ i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length)\
    \ {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "  return\
    \ strings.reduce((p, c) => (p.length > c.length ? p : c));\n}\n\nconsole.log(longest([\"\
    a\", \"bb\", \"ccc\"]));\n", "  if (strings.length === 0) {\n    return undefined;\n\
    \  }\n  let max: string = strings[0];\n  for (let i = 1; i < strings.length; i++)\
    \ {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n\
    \  }\n  return max;\n}\n", "  // Enter your implementation here\n  return undefined;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let ans =\
    \ strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length\
    \ > ans.length) {\n      ans = strings[i];\n    }\n  }\n  return ans;\n}\n", " \
    \ if (strings.length === 0) {\n    return undefined;\n  }\n  let longest = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length)\
    \ {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    return\
    \ \"\";\n}\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  const\
    \ sorted = strings.sort((a, b) => b.length - a.length);\n  return sorted[0];\n\
    }\n", "  let longest: string = \"\";\n  for (let i = 0; i < strings.length; i++)\
    \ {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n\
    \    }\n  }\n  return longest;\n}\n", "  if (strings.length === 0) {\n    return\
    \ undefined;\n  }\n  let result = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > result.length) {\n      result = strings[i];\n\
    \    }\n  }\n  return result;\n}\n", "    // Your code here\n    return undefined;\n\
    }\n", "  let longestString = undefined;\n  for (let i = 0; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longestString) {\n      longestString =\
    \ strings[i];\n    }\n  }\n  return longestString;\n}\n", "    if (strings.length\
    \ === 0) return undefined;\n    let longest = strings[0];\n    for (let i=1; i<strings.length;\
    \ i++) {\n        if (strings[i].length > longest.length) {\n            longest\
    \ = strings[i];\n        }\n    }\n    return longest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n  return strings.reduce((a, b) => a.length\
    \ > b.length ? a : b);\n}\n", "    return undefined;\n}\n", "  // let len = 0;\n\
    \  // let word = \"\";\n  // if (strings.length === 0) {\n  //   return undefined;\n\
    \  // }\n  // for (let i = 0; i < strings.length; i++) {\n  //   if (strings[i].length\
    \ > len) {\n  //     len = strings[i].length;\n  //     word = strings[i];\n \
    \ //   }\n  // }\n  // return word;\n  return strings.reduce((len, string) =>\
    \ (string.length > len ? string : len), \"\");\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let longestString: string =\
    \ strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longestString.length) {\n            longestString = strings[i];\n       \
    \ }\n    }\n    return longestString;\n}\n", "    if (strings.length === 0) {\n\
    \        return undefined;\n    }\n    let longestWord = strings[0];\n    strings.forEach(s\
    \ => {\n        if (s.length > longestWord.length) {\n            longestWord\
    \ = s;\n        }\n    });\n    return longestWord;\n}", "    return undefined;\n\
    }\n", "    if (strings.length === 0) {\n        return undefined;\n    }\n\n \
    \   return strings.reduce((acc, curr) => acc.length > curr.length ? acc : curr);\n\
    }\n", "  if (strings.length < 1) {\n    return undefined;\n  }\n\n  let longest:\
    \ string = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length\
    \ > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n\
    }\nconsole.log(`longest([\"a\", \"bb\", \"ccc\"]) === \"ccc\": ${longest([\"a\"\
    , \"bb\", \"ccc\"]) === \"ccc\"}`);\nconsole.log(`longest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\"]) === \"dddd\": ${longest([\"a\", \"bb\", \"ccc\", \"dddd\"]) === \"\
    dddd\"}`);\nconsole.log(`longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\"\
    ]) === \"eeeeee\": ${longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\"]) ===\
    \ \"eeeeee\"}`);\nconsole.log(`longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\"\
    , \"fffffffff\"]) === \"fffffffff\": ${longest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeeee\", \"fffffffff\"]) === \"fffffffff\"}`);\nconsole.log(`longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\", \"fffffffff\", \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg",
  "  let longestString = strings[0];\n  strings.forEach(str => {\n    if (str.length\
    \ > longestString.length) {\n      longestString = str;\n    }\n  });\n  return\
    \ longestString;\n}\n", "  if (strings.length === 0) {\n    return undefined;\n\
    \  }\n\n  let lgthStr = strings[0];\n  for (let i = 1; i < strings.length; i++)\
    \ {\n    if (strings[i].length > lgthStr.length) {\n      lgthStr = strings[i];\n\
    \    }\n  }\n  return lgthStr;\n}\n", "    let max_len = 0;\n    let result: string\
    \ | undefined = undefined;\n    strings.forEach(function (elem) {\n        if\
    \ (elem.length > max_len) {\n            max_len = elem.length;\n            result\
    \ = elem;\n        }\n    });\n    return result;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let res = strings[0];\n    for\
    \ (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > res.length)\
    \ {\n            res = strings[i];\n        }\n    }\n    return res;\n}\n", " \
    \ const result = strings.reduce((acc: string, cur: string) => {\n    if (cur.length\
    \ > acc.length) {\n      return cur;\n    }\n    return acc;\n  }, strings[0]);\n\
    \  return result === \"\" ? undefined : result;\n}\n", "  if (strings.length ===\
    \ 0) {\n    return undefined;\n  }\n  let maxLength: number = strings[0].length;\n\
    \  let longestString: string = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > maxLength) {\n      maxLength = strings[i].length;\n\
    \      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n",
  "    if (strings.length === 0) {\n        return undefined;\n    }\n    let longStr\
    \ = strings[0];\n    for (let str of strings) {\n        if (str.length > longStr.length)\
    \ {\n            longStr = str;\n        }\n    }\n    return longStr;\n}\n",
  "    // TODO: Implement this function\n    return undefined;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for\
    \ (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n\
    }\n", "    let longestString: string | undefined = undefined;\n    if (strings.length\
    \ > 0) {\n        longestString = strings[0];\n        for (let i = 1; i < strings.length;\
    \ i++) {\n            if (strings[i].length > longestString.length) {\n      \
    \          longestString = strings[i];\n            }\n        }\n    }\n    return\
    \ longestString;\n}", "  let longest = undefined;\n  if (strings.length === 0)\
    \ {\n    return longest;\n  } else {\n    longest = strings[0];\n    for (let\
    \ i = 1; i < strings.length; i++) {\n      if (strings[i].length > longest.length)\
    \ {\n        longest = strings[i];\n      }\n    }\n    return longest;\n  }\n\
    }\n", "    if (strings.length === 0) {\n        return undefined;\n    }\n\n \
    \   return strings.reduce((longest, str) => str.length > longest.length ? str\
    \ : longest);\n}\n", "    if (strings.length === 0) {\n        return undefined;\n\
    \    }\n    let result = strings[0];\n    for (let s of strings) {\n        if\
    \ (s.length > result.length) {\n            result = s;\n        }\n    }\n  \
    \  return result;\n}\n", "  let result: string | undefined = undefined;\n  let\
    \ longestStringLength: number = 0;\n  strings.forEach((str) => {\n    if (str.length\
    \ > longestStringLength) {\n      longestStringLength = str.length;\n      result\
    \ = str;\n    }\n  });\n  return result;\n}\n", "    // TODO: implement me\n \
    \   let longestString = undefined;\n    for (let element of strings) {\n     \
    \   if (longestString === undefined) {\n            longestString = element;\n\
    \        } else if (element.length > longestString.length) {\n            longestString\
    \ = element;\n        }\n    }\n    return longestString;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let longest = strings[0];\n\
    \    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\n", "    if (strings.length === 0) return undefined;\n\
    \    const longest = strings.reduce((a, b) => (a.length > b.length ? a : b));\n\
    \    return longest;\n}", "    if (!strings.length) {\n        return undefined;\n\
    \    }\n    var maxString = strings[0];\n    for (let i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > maxString.length) {\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n  const lengths = strings.map(s => s.length);\n\
    \  const maxLength = Math.max(...lengths);\n  const firstLongest = strings.find(s\
    \ => s.length === maxLength);\n  return firstLongest;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n\
    \    for (let str of strings) {\n        if (str.length > longestString.length)\
    \ {\n            longestString = str;\n        }\n    }\n    return longestString;\n\
    }\n", "    // TODO\n    // return strings[0];\n    if (strings.length == 0) {\n\
    \        return undefined;\n    } else {\n        let longestString = strings[0];\n\
    \        strings.forEach(element => {\n            if (element.length > longestString.length)\
    \ {\n                longestString = element;\n            }\n        });\n  \
    \      return longestString;\n    }\n}\n", "  if (strings.length === 0) {\n  \
    \  return undefined;\n  }\n\n  let maxLength = 0;\n  let maxString: string | undefined\
    \ = undefined;\n\n  for (let i = 0; i < strings.length; i++) {\n    const string\
    \ = strings[i];\n    if (string.length > maxLength) {\n      maxLength = string.length;\n\
    \      maxString = string;\n    }\n  }\n\n  return maxString;\n}\n", "  let maxLength:\
    \ number = 0;\n  let maxString: string | undefined = undefined;\n  for (let i:\
    \ number = 0; i < strings.length; i++) {\n    if (strings[i].length > maxLength)\
    \ {\n      maxLength = strings[i].length;\n      maxString = strings[i];\n   \
    \ }\n  }\n  return maxString;\n}\n", "  let result = strings[0];\n  if (strings.length\
    \ === 0) {\n    return undefined;\n  } else {\n    for (let i = 0; i < strings.length;\
    \ i++) {\n      if (strings[i].length > result.length) {\n        result = strings[i];\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    let longestString: string |\
    \ undefined = undefined;\n    let longestStringLength: number = 0;\n    strings.forEach(function\
    \ (currentString: string) {\n        if (currentString.length > longestStringLength)\
    \ {\n            longestString = currentString;\n            longestStringLength\
    \ = currentString.length;\n        }\n    });\n    return longestString;\n}\n",
  "    let max = undefined;\n    strings.forEach(str => {\n        if (max === undefined\
    \ || str.length > max.length) {\n            max = str;\n        }\n    });\n\
    \    return max;\n}\n", "    let longest: string | undefined = undefined;\n  \
    \  for (let s of strings) {\n        if (longest === undefined || s.length > longest.length)\
    \ {\n            longest = s;\n        }\n    }\n    return longest;\n}\n", " \
    \   // TODO\n    if (strings.length == 0) {\n        return undefined;\n    }\n\
    \    let maxLen = strings[0].length;\n    let retStr = strings[0];\n    for (let\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length > maxLen) {\n\
    \            maxLen = strings[i].length;\n            retStr = strings[i];\n \
    \       }\n    }\n    return retStr;\n}\n", "    var length = 0;\n    var longest:\
    \ string;\n    strings.forEach(el => {\n        if (el.length > length) {\n  \
    \          length = el.length;\n            longest = el;\n        }\n    });\n\
    \    return longest;\n}\nconsole.log(longest([\"a\", \"bb\", \"ccc\"]));\n", " \
    \ let maxLength = 0;\n  let longestString: string | undefined;\n  for (let string\
    \ of strings) {\n    if (string.length > maxLength) {\n      maxLength = string.length;\n\
    \      longestString = string;\n    }\n  }\n  return longestString;\n}\n", " \
    \ let longestString = strings[0];\n  strings.forEach(string => {\n    if (string.length\
    \ > longestString.length) {\n      longestString = string;\n    }\n  });\n  return\
    \ longestString || undefined;\n}\n", "    // TODO\n    return undefined;\n}\n",
  "  let long: string | undefined = undefined;\n  if (strings.length > 0) {\n    long\
    \ = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n      if (strings[i].length\
    \ > long.length) {\n        long = strings[i];\n      }\n    }\n  }\n  return\
    \ long;\n}", "    let longest: string | undefined = undefined;\n    if (strings.length\
    \ === 0) return longest;\n    strings.forEach(element => {\n        if (longest\
    \ === undefined || element.length > longest.length) {\n            longest = element;\n\
    \        }\n    });\n    return longest;\n}\n", "  if (strings.length === 0) {\n\
    \    return undefined;\n  }\n  let longestStr = strings[0];\n  for (let i = 1;\
    \ i < strings.length; i++) {\n    if (strings[i].length > longestStr.length) {\n\
    \      longestStr = strings[i];\n    }\n  }\n  return longestStr;\n}\n", "   \
    \ //fill in code here\n    let maxLength = 0;\n    let stringMaxLength = \"\"\
    ;\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length\
    \ > maxLength) {\n            maxLength = strings[i].length;\n            stringMaxLength\
    \ = strings[i];\n        }\n    }\n    return stringMaxLength;\n}\nconsole.log(longest([\"\
    a\", \"bb\", \"ccc\"]));\n", "    if (strings.length === 0) {\n        return\
    \ undefined;\n    }\n\n    let longestString: string = strings[0];\n    for (let\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length)\
    \ {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n\
    }\n", "  if (strings.length == 0) {\n    return undefined;\n  }\n\n  let longestString\
    \ = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length\
    \ > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n \
    \ return longestString;\n}\n", "  let longestString: string | undefined = undefined;\n\
    \  if (strings.length === 0) {\n    return longestString;\n  }\n  for (let str\
    \ of strings) {\n    if (longestString === undefined || str.length > longestString.length)\
    \ {\n      longestString = str;\n    }\n  }\n  return longestString;\n}\n", " \
    \ return undefined;\n}\n", "    return undefined;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    return strings.reduce((acc,\
    \ str) => acc.length > str.length ? acc : str);\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n\n    let longest = strings[0];\n\
    \    strings.forEach(str => {\n        if (str.length > longest.length) {\n  \
    \          longest = str;\n        }\n    });\n\n    return longest;\n}\n\nconsole.log(longest([\"\
    a\", \"bb\", \"ccc\"]));\n", "    if (strings.length === 0) {\n        return\
    \ undefined;\n    }\n    let longestStr = strings[0];\n    for (let i = 1; i <\
    \ strings.length; i++) {\n        if (strings[i].length > longestStr.length) {\n\
    \            longestStr = strings[i];\n        }\n    }\n    return longestStr;\n\
    }\n", "    // write your code here\n    let longestWord: string = strings[0];\n\
    \    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longestWord.length) {\n            longestWord = strings[i];\n        }\n\
    \    }\n    return longestWord;\n}\n", "    let length: number = 0;\n    let longestStr:\
    \ string | undefined = undefined;\n    for (let str of strings) {\n        if\
    \ (str.length > length) {\n            length = str.length;\n            longestStr\
    \ = str;\n        }\n    }\n    return longestStr;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n\n    return strings.reduce((l,\
    \ s) => s.length > l.length ? s : l);\n}\n", "  return strings.reduce((acc: string,\
    \ str: string) => (acc.length > str.length ? acc : str), '');\n}\n", "    let\
    \ longestString: string | undefined = undefined;\n    if (strings.length == 0)\
    \ {\n        return longestString;\n    }\n    else {\n        let lengthOfLongestString:\
    \ number = 0;\n        for (let i = 0; i < strings.length; i++) {\n          \
    \  if (strings[i].length > lengthOfLongestString) {\n                lengthOfLongestString\
    \ = strings[i].length;\n                longestString = strings[i];\n        \
    \    }\n        }\n        return longestString;\n    }\n}\n", "  if (!strings\
    \ || strings.length === 0) {\n    return undefined;\n  }\n  let maxLength = 0;\n\
    \  let maxStr = \"\";\n  for (let i = 0; i < strings.length; i++) {\n    const\
    \ str = strings[i];\n    if (str.length > maxLength) {\n      maxLength = str.length;\n\
    \      maxStr = str;\n    }\n  }\n  return maxStr;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longestString: string = strings[0];\n\
    \n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length)\
    \ {\n      longestString = strings[i];\n    }\n  }\n\n  return longestString;\n\
    }\n", "  return strings.reduce((memo, str) => {\n    if (memo === undefined) {\n\
    \      return str;\n    } else if (str.length > memo.length) {\n      return str;\n\
    \    } else {\n      return memo;\n    }\n  }, undefined);\n}\n", "    // TODO:\
    \ your code here\n    return strings.reduce((max, val) => max.length >= val.length\
    \ ? max : val);\n}\n", "    let result = undefined;\n    if (strings.length ==\
    \ 0) {\n        return result;\n    } else {\n        let max = 0;\n        for\
    \ (let i = 0; i < strings.length; i++) {\n            if (strings[i].length >\
    \ max) {\n                max = strings[i].length;\n                result = strings[i];\n\
    \            }\n        }\n        return result;\n    }\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longest = strings[0];\n  for (let\
    \ i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length)\
    \ {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    return\
    \ strings.reduce((max, s) => s.length > max.length ? s : max);\n}\n", "    let\
    \ result: string | undefined = undefined;\n    if (strings.length > 0) {\n   \
    \     let maxLength = strings[0].length;\n        for (let i = 1; i < strings.length;\
    \ i++) {\n            if (strings[i].length > maxLength) {\n                maxLength\
    \ = strings[i].length;\n                result = strings[i];\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    if (strings.length === 0) return\
    \ undefined;\n    let longest = strings[0];\n    for (let i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longest.length) longest = strings[i];\n\
    \    }\n    return longest;\n}\n", "  if (strings.length == 0) {\n    return undefined;\n\
    \  }\n\n  let longestString = strings[0];\n  for (let string of strings) {\n \
    \   if (string.length > longestString.length) {\n      longestString = string;\n\
    \    }\n  }\n  return longestString;\n}\n", "  if (strings.length == 0) {\n  \
    \  return undefined;\n  }\n  let result = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > result.length) {\n      result = strings[i];\n\
    \    }\n  }\n  return result;\n}\n", "  let index = 0;\n  let longest: string\
    \ | undefined = undefined;\n  while (index < strings.length) {\n    if (longest\
    \ === undefined || strings[index].length > longest.length) {\n      longest =\
    \ strings[index];\n    }\n    index++;\n  }\n  return longest;\n}\n", "    if\
    \ (strings.length === 0) {\n        return undefined;\n    }\n    else {\n   \
    \     let longest: string = strings[0];\n        for (let i = 1; i < strings.length;\
    \ i++) {\n            if (strings[i].length > longest.length) {\n            \
    \    longest = strings[i];\n            }\n        }\n        return longest;\n\
    \    }\n}\n", "    if (strings.length === 0) return undefined;\n    let longest\
    \ = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longest.length) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\n", "  if (strings.length === 0) {\n    return undefined;\n\
    \  }\n  let currentLongest: string = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > currentLongest.length) {\n      currentLongest\
    \ = strings[i];\n    }\n  }\n  return currentLongest;\n}\n", "  if (!strings.length)\
    \ {\n    return undefined;\n  }\n  const sorted = strings.sort((s1, s2) => {\n\
    \    if (s1.length > s2.length) {\n      return -1;\n    }\n    if (s1.length\
    \ < s2.length) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted[0];\n\
    }\n", "    let l: number = 0;\n    let maxLength: number = 0;\n    let i: number\
    \ = 0;\n    let maxIndex: number = 0;\n    let result: string = \"\";\n    while\
    \ (i < strings.length) {\n        if (strings[i].length > maxLength) {\n     \
    \       maxLength = strings[i].length;\n            maxIndex = i;\n        }\n\
    \        i++;\n    }\n    if (maxLength === 0) {\n        return undefined;\n\
    \    }\n    else {\n        return strings[maxIndex];\n    }\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n  let longestStr = strings[0];\n  for\
    \ (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestStr.length)\
    \ {\n      longestStr = strings[i];\n    }\n  }\n  return longestStr;\n}\n", " \
    \   let longest: string = \"\";\n    for (let i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].length > longest.length) {\n            longest =\
    \ strings[i];\n        }\n    }\n    return longest;\n}\n", "    if (!strings.length)\
    \ {\n        return undefined;\n    }\n    return strings.reduce((acc, str) =>\
    \ acc.length > str.length ? acc : str);\n}", "  if (strings.length === 0) {\n\
    \    return undefined;\n  }\n  let longest = strings[0];\n  for (let i = 1; i\
    \ < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n  \
    \    longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    return strings.reduce((a,\
    \ b) => a.length > b.length ? a : b);\n}\n", "    return;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n\n    let longestIndex = 0;\n  \
    \  let longestLength = strings[0].length;\n\n    for (let i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length > longestLength) {\n            longestIndex\
    \ = i;\n            longestLength = strings[i].length;\n        }\n    }\n\n \
    \   return strings[longestIndex];\n}\n", "  if (!strings.length) {\n    return\
    \ undefined;\n  }\n  let longStr = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longStr.length) {\n      longStr = strings[i];\n\
    \    }\n  }\n  return longStr;\n}\n", "  if (strings.length === 0) {\n    return\
    \ undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longestString.length) {\n      longestString\
    \ = strings[i];\n    }\n  }\n  return longestString;\n}\n", "    let largestString:\
    \ string | undefined = undefined;\n    if (strings.length > 0) {\n        for\
    \ (let i = 0; i < strings.length; i++) {\n            if (largestString === undefined\
    \ || largestString.length < strings[i].length) {\n                largestString\
    \ = strings[i];\n            }\n        }\n    }\n    return largestString;\n\
    }\n", "  if (strings.length === 0) {\n    return undefined;\n  }\n  let res =\
    \ strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length\
    \ > res.length) {\n      res = strings[i];\n    }\n  }\n  return res;\n}\n", " \
    \ let longest: string | undefined = undefined;\n  for (let i = 0; i < strings.length;\
    \ i++) {\n    const currentString = strings[i];\n    if (longest == undefined\
    \ || currentString.length > longest.length) {\n      longest = currentString;\n\
    \    }\n  }\n  return longest;\n}\n", "    let longestString: string | undefined\
    \ = undefined;\n    if (strings.length > 0) {\n        let longestStringLength\
    \ = 0;\n        strings.forEach(element => {\n            if (element.length >\
    \ longestStringLength) {\n                longestStringLength = element.length;\n\
    \                longestString = element;\n            }\n        });\n    }\n\
    \    return longestString;\n}\n", "  if (!strings.length) {\n    return undefined;\n\
    \  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length;\
    \ i++) {\n    if (strings[i].length > longestString.length) {\n      longestString\
    \ = strings[i];\n    }\n  }\n  return longestString;\n}\n", "    let longs = [];\n\
    \    for (let i = 0; i < strings.length; i++) {\n        longs.push(strings[i].length);\n\
    \    }\n    let longest = Math.max(...longs);\n    for (let i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].length === longest) {\n            return strings[i];\n\
    \        }\n    }\n    return undefined;\n}\n", "  let longestString = undefined;\n\
    \  let longestLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if\
    \ (strings[i].length > longestLength) {\n      longestString = strings[i];\n \
    \     longestLength = strings[i].length;\n    }\n  }\n  return longestString;\n\
    }\n", "  // 1. Solution using sort()\n  // strings.sort((a, b) => b.length - a.length);\n\
    \  // return strings[0];\n\n  // 2. Solution using reduce()\n  return strings.reduce((a,\
    \ b) => {\n    return a.length > b.length ? a : b;\n  }, '');\n}\n", "    if (strings.length\
    \ === 0) return undefined;\n    let max = strings[0];\n    for (let i = 1; i <\
    \ strings.length; i++) {\n        if (strings[i].length > max.length) {\n    \
    \        max = strings[i];\n        }\n    }\n    return max;\n}", "  let longest:\
    \ string | undefined = undefined;\n  for (let i = 0; i < strings.length; i++)\
    \ {\n    if (longest === undefined || strings[i].length > longest.length) {\n\
    \      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    if (strings.length\
    \ === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n\
    \    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length\
    \ > longestString.length) {\n            longestString = strings[i];\n       \
    \ }\n    }\n    return longestString;\n}\n", "    if (strings.length === 0) {\n\
    \        return undefined;\n    }\n\n    let longestString = strings[0];\n   \
    \ for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length >\
    \ longestString.length) {\n            longestString = strings[i];\n        }\n\
    \    }\n\n    return longestString;\n}\n", "  if (strings.length === 0) {\n  \
    \  return undefined;\n  }\n\n  let longest = strings[0];\n  for (let string of\
    \ strings) {\n    if (string.length > longest.length) {\n      longest = string;\n\
    \    }\n  }\n  return longest;\n}\n", "  if (strings.length == 0) {\n    return\
    \ undefined;\n  }\n  let max_length = strings[0].length;\n  let max_string = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max_length)\
    \ {\n      max_length = strings[i].length;\n      max_string = strings[i];\n \
    \   }\n  }\n  return max_string;\n}\n", "    let long = \"\";\n    for (let i\
    \ = 0; i < strings.length; i++) {\n        if (strings[i].length > long.length)\
    \ {\n            long = strings[i];\n        }\n    }\n    return long;\n}", " \
    \ if (strings.length === 0) {\n    return undefined;\n  }\n\n  return strings.reduce((prev,\
    \ curr) =>\n    prev.length > curr.length ? prev : curr\n  );\n}\n", "    let\
    \ longest: string | undefined = undefined;\n    strings.forEach(function (string)\
    \ {\n        if (!longest || string.length > longest.length) {\n            longest\
    \ = string;\n        }\n    });\n    return longest;\n}\n", "  if (strings.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let longest: string = strings[0];\n\
    \  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length)\
    \ {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n", "    if\
    \ (strings.length === 0) {\n        return undefined;\n    }\n    let maxLength\
    \ = 0;\n    let longestString = strings[0];\n    for (let i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].length > maxLength) {\n            maxLength\
    \ = strings[i].length;\n            longestString = strings[i];\n        }\n \
    \   }\n    return longestString;\n}\n", "  return \"\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
