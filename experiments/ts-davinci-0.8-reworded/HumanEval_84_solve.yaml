name: HumanEval_84_solve
language: ts
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N: number):\
  \ string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n\
  \  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"\
  1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"\
  10010\");\n}\n\ntest();"
completions: ["    let result: string = '';\n    while (N > 0) {\n        result =\
    \ (N % 2).toString() + result;\n        N = Math.floor(N / 2);\n    }\n    return\
    \ result;\n}\n\nconsole.log(solve(123));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // get the N in binary, then turn into a number array\n  const binaryNumber =\
    \ parseInt(N.toString(2), 10).toString().split(\"\");\n  let sum = 0;\n  // loop\
    \ the number array to get the sum\n  for (let i = 0; i < binaryNumber.length;\
    \ i++) {\n    sum += parseInt(binaryNumber[i], 10);\n  }\n  return sum.toString();\n\
    }\nconsole.log(solve(1));", "  return (N >>> 0).toString(2);\n}\n\nexport default\
    \ solve;", "    let bitString = \"\";\n    while (N > 0) {\n        bitString\
    \ = (N % 2) + bitString;\n        N = Math.floor(N / 2);\n    }\n    return bitString;\n\
    }\n", "  let sum = 0;\n  let binary = N.toString(2);\n  for (let i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n\
    console.log(solve(150));\nconsole.log(solve(147));\n", "    return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    const binaryNumber = N.toString(2)\n    let result = 0\n    for (let i = 0;\
    \ i < binaryNumber.length; i++) {\n        const char = binaryNumber.charAt(i)\n\
    \        if (char !== '1') continue\n        result++\n    }\n    return result.toString()\n\
    }\n\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))",
  "    let binary: string = N.toString(2);\n    let total: number = 0;\n    for (let\
    \ i = 0; i < binary.length; i++) {\n        total += parseInt(binary[i], 10);\n\
    \    }\n    return total.toString();\n}\n", "    const num = Number(N).toString(2);\n\
    \    return num;\n}\nconsole.log(solve(150));", "    return N.toString(2)\n}\n\
    \nconsole.log(solve(147));", "  const binary = N.toString(2).split(\"\");\n  return\
    \ binary.reduce((acc, num) => {\n    acc += parseInt(num);\n    return acc;\n\
    \  }, 0).toString();\n}\n", "  // First i need to convert the number to binary\
    \ number and store it in a string\n  let binary: string = Number(N).toString(2);\n\
    \  // Map over each character in the string to get its number value\n  let sum:\
    \ number = binary\n    .split(\"\")\n    .map((char) => parseInt(char))\n    .reduce((acc,\
    \ curr) => acc + curr);\n  return sum.toString();\n}", "    return (N >>> 0).toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    return N.toString(2);\n}\n", "  let binaryNumber = \"\";\n  while (N > 0) {\n\
    \    const leftOver = N % 2;\n    binaryNumber = leftOver + binaryNumber;\n  \
    \  N = Math.floor(N / 2);\n  }\n  return binaryNumber;\n}\n", "    return N.toString(2);\n\
    }\n\nexport default solve;", "  let binN = \"\";\n  while (N > 0) {\n    const\
    \ remainder = N % 2;\n    binN = remainder + binN;\n    N = (N - remainder) /\
    \ 2;\n  }\n  return binN;\n}\n", "  return parseInt(N.toString(2)).toString(10);\n\
    }", "  // create a variable that holds a binary number\n  let binary = '';\n \
    \ // create a while loop that will run while number is greater than 0\n  while\
    \ (N > 0) {\n    // create a variable to hold the remainder of the number mod\
    \ 2\n    let remainder = N % 2;\n    // add the remainder to the binary number\
    \ and then divide the number by 2 and floor it\n    binary = remainder + binary;\n\
    \    N = Math.floor(N / 2);\n  }\n  // return the binary\n  return binary;\n}\n\
    \nconsole.log(solve(150));", "    return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    return N.toString(2);\n\
    }\n", "    return N.toString(2);\n}\n\nconsole.log(solve(1000));", "    let result:\
    \ string = '';\n    let binary: string = '';\n    binary = N.toString(2);\n  \
    \  result = binary.split('').reduce((a, b) => parseInt(a) + parseInt(b)).toString();\n\
    \    return result;\n}\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    return N.toString(2);\n}\n", "  let output: string\
    \ = \"\";\n  while (N > 0) {\n    output = (N % 2).toString() + output;\n    N\
    \ = Math.floor(N / 2);\n  }\n  return output.split(\"\").reduce((a, b) => +a +\
    \ +b).toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    const binaryNum: string = N.toString(2);\n   \
    \ let result: number = 0;\n    for (let i: number = 0; i < binaryNum.length; i++)\
    \ {\n        result += Number(binaryNum[i]);\n    }\n    return result.toString();\n\
    }\n", "    return N.toString(2);\n}\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\nconsole.log(solve(147));",
  "  // Write your code here\n  let result = \"\";\n  let n = N;\n  while (n >= 1)\
    \ {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return\
    \ result;\n}\n", "    return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    let bin_val: number\
    \ = 0;\n    let val: number = 1;\n    while (N > 0) {\n        bin_val += N %\
    \ 2 * val;\n        N = Math.floor(N / 2);\n        val *= 10;\n    }\n    return\
    \ bin_val.toString();\n}\n\nconsole.log(solve(1000));", "    return N.toString(2);\n\
    }\nconsole.log(solve(1234));", "    //our string to add our binary number to\n\
    \    let binString: string = \"\";\n    //edge case where we have to add a 1 if\
    \ N === 0\n    if (N === 0) {\n        binString = \"1\";\n    }\n    //while\
    \ N is greater than 0\n    while (N > 0) {\n        //if there is a remainder,\
    \ add a 1 to our binString\n        if (N % 2) {\n            binString = \"1\"\
    \ + binString;\n        }\n        //if there is no remainder, add a 0 to our\
    \ binString\n        else {\n            binString = \"0\" + binString;\n    \
    \    }\n        //divide N by 2 to get the next digit (shifting our number over\
    \ 1)\n        N = Math.floor(N / 2);\n    }\n    //return our binary number\n\
    \    return binString;\n}", "  return `${N.toString(2)}`;\n}\nconsole.log(solve(15));",
  "  let bin: string = N.toString(2);\n  let sum: number = 0;\n  for (let i = 0; i\
    \ < bin.length; i++) {\n    sum += Number(bin[i]);\n  }\n  return sum.toString();\n\
    }\n\nconsole.log(solve(150));", "  return N.toString(2);\n}\n", "  let result\
    \ = '';\n  while (N > 0) {\n    result = (N % 2).toString() + result;\n    N =\
    \ Math.floor(N / 2);\n  }\n  return result;\n}\n", "  return N.toString(2);\n\
    }\n\nexport { solve };", "  const binaryN = (+N).toString(2);\n  let result =\
    \ 0;\n  for (let i = 0; i < binaryN.length; i++) {\n    result += parseInt(binaryN[i]);\n\
    \  }\n  return result.toString();\n}\n\nexport default solve;", "    let binaryArray:\
    \ string[] = [];\n    let binaryString: string = \"\";\n    // check if the number\
    \ is a multiple of 2.\n    // if so, store in array\n    // divide the number\
    \ by 2 and round to the nearest integer\n    // repeat until number is 0\n   \
    \ while (N > 0) {\n        let remainder = N % 2;\n        binaryArray.push(remainder.toString());\n\
    \        N = Math.floor(N / 2);\n    }\n    // reverse and join the array into\
    \ a string.\n    binaryString = binaryArray.reverse().join(\"\");\n    return\
    \ binaryString;\n}\n\nconsole.log(solve(150));\nconsole.log(solve(147));\nconsole.log(solve(1000));",
  "  const bits = Math.floor(Math.log2(N)) + 1;\n  const binary = [...Array(bits)].map((_,\
    \ i) => (N >> i) & 1);\n  console.log(binary);\n  return binary.reduce((sum, next)\
    \ => sum + next, 0).toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return (+N).toString(2);\n}\n\nexport default solve;",
  "  return N.toString(2);\n}\n", "    // return N.toString(2)\n    let num = N\n\
    \    let output: string = ''\n    if (num === 0) return '0'\n    while (num >\
    \ 0) {\n        output = num % 2 + output\n        num = Math.floor(num / 2)\n\
    \    }\n    return output\n}\nconsole.log(solve(1000))\nconsole.log(solve(150))\n\
    console.log(solve(147))", "  const binaryArr = [];\n  let num = N;\n  while (num\
    \ >= 1) {\n    const remainder = num % 2;\n    num = Math.floor(num / 2);\n  \
    \  binaryArr.push(remainder);\n  }\n  return binaryArr.reverse().join(\"\");\n\
    }\n", "    let string: string = \"\";\n    do {\n        string = N % 2 + string;\n\
    \        N = Math.floor(N / 2);\n    } while (N > 0);\n    return string;\n}\n\
    \nlet N: number = 1000;\nconsole.log(solve(N));", "  const bin = N.toString(2);\n\
    \  let sum = 0;\n  let i = 0;\n  while (i < bin.length) {\n    const num = Number(bin[i]);\n\
    \    sum += num;\n    i++;\n  }\n  return String(sum);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    return N.toString(2);\n\
    }\n\nconsole.log(solve(2));\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let binString = '';\n    const binDigits = N.toString(2).split('');\n\
    \    for (let i = 0; i < binDigits.length; i++) {\n        binString += binDigits[i];\n\
    \    }\n    return binString;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let sum: string = \"\";\n    const digits: number[]\
    \ = [];\n    while (N > 0) {\n        digits.push(N % 2);\n        N = Math.floor(N\
    \ / 2);\n    }\n    sum = digits.reverse().join(\"\");\n    return sum;\n}", " \
    \ let totalSum: number = 0;\n  let binaryNumber: string = \"\";\n  while (N >\
    \ 0) {\n    totalSum += N % 2;\n    N = Math.floor(N / 2);\n    binaryNumber =\
    \ totalSum.toString() + binaryNumber;\n  }\n  return binaryNumber;\n}\n\nconsole.log(solve(147));",
  "  let binaryNumber: string = '';\n  let divider: number = 2;\n  let quotient: number\
    \ = 0;\n  let remainder: number = 0;\n  let sum: number = 0;\n  let binarySum:\
    \ string = '';\n\n  if (N < 0 || N > 10000) {\n    return 'Please enter a number\
    \ between 0 and 10000.';\n  }\n\n  while (N !== 0) {\n    quotient = Math.floor(N\
    \ / divider);\n    remainder = N % divider;\n    if (remainder === 1) {\n    \
    \  binaryNumber = '1' + binaryNumber;\n    } else {\n      binaryNumber = '0'\
    \ + binaryNumber;\n    }\n    N = quotient;\n  }\n\n  for (let i = 0; i < binaryNumber.length;\
    \ i++) {\n    sum += parseInt(binaryNumber[i]);\n  }\n\n  while (sum !== 0) {\n\
    \    quotient = Math.floor(sum / divider);\n    remainder = sum % divider;\n \
    \   if (remainder === 1) {\n      binarySum = '1' + binarySum;\n    } else {\n\
    \      binarySum = '0' + binarySum;\n    }\n    sum = quotient;\n  }\n\n  return\
    \ binarySum;\n}\n\nconsole.log(solve(1000));", "    // Placeholder - change me!\n\
    \    return \"1\";\n}", "  return N.toString(2);\n}\n\nconsole.log(solve(2));\n\
    console.log(solve(21));\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n", "    return (N.toString(2));\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  let sum = N\n    .toString(2)\n    .split(\"\")\n    .reduce((total, value) =>\
    \ total + parseInt(value), 0);\n  return sum.toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    // Write your code here.\n\
    \    // return N.toString(2);\n    let convertedNum: string = \"\";\n    let num:\
    \ number = N;\n    while (num > 0) {\n        convertedNum = (num % 2) + convertedNum;\n\
    \        num = Math.floor(num / 2);\n    }\n    return convertedNum;\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    //return (N >>> 0).toString(2)\n\
    \    return N.toString(2)\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let result = '';\n  while (N > 0) {\n    const rem\
    \ = N % 2;\n    N = Math.floor(N / 2);\n    result = rem + result;\n  }\n  return\
    \ result;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // base case\n  if (N < 2) {\n    return N.toString();\n  }\n\n  return (N %\
    \ 2).toString() + solve(Math.floor(N / 2));\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  let result = N.toString(2);\n\
    \  let sum = 0;\n  for (let i = 0; i < result.length; i++) {\n    sum += parseInt(result[i]);\n\
    \  }\n  return sum.toString();\n}\n\nconsole.log(solve(147));", "  return (N).toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n", "  const newN = N.toString(2);\n  const sum = newN.split(\"\
    \").reduce((a, b) => parseInt(a) + parseInt(b));\n  return sum.toString();\n}\n\
    \nexport function runTests(): void {\n  const inputs = [1000, 150, 147];\n  const\
    \ outputs = [\"1\", \"110\", \"1100\"];\n\n  inputs.forEach((input, index) =>\
    \ {\n    const myOutput = solve(input);\n    if (myOutput !== outputs[index])\
    \ {\n      console.error(\"Failed test\");\n      console.log(`Expected: ${outputs[index]}`);\n\
    \      console.log(`Received: ${myOutput}`);\n    }\n  });\n}", "  return N.toString(2);\n\
    }\n\nexport default solve;", "  return N.toString(2);\n}\n\nconsole.log(solve(147));",
  "  let binary: string = \"\";\n  let num: number = N;\n  let count: number = 0;\n\
    \  let digit: number = 0;\n  let total: number = 0;\n  while (num > 0) {\n   \
    \ count = 0;\n    digit = num % 2;\n    num = Math.floor(num / 2);\n    binary\
    \ = String(digit) + binary;\n    for (let i = 0; i < binary.length; i++) {\n \
    \     if (binary[i] === \"1\") {\n        count++;\n      }\n    }\n    total\
    \ = count;\n  }\n  return String(total);\n}\n\nconsole.log(solve(100));\nconsole.log(solve(1000));\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // return (N.toString(2));\n  return (\n    N\n      .toString(2)\n      .split(\"\
    \")\n      .reduce((acc, curr) => acc + parseInt(curr), 0)\n  );\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  // convert num to binary\n\
    \  let num: string = N.toString(2);\n  let total: number = 0;\n  // iterate over\
    \ num and find the total of its binary digits\n  for (let i = 0; i < num.length;\
    \ i++) {\n    total += parseInt(num[i]);\n  }\n  return total.toString();\n}\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n\ndescribe(\"ToString\", () => {\n  it(\"should solve\
    \ example 1\", () => {\n    expect(solve(1000)).toBe(\"1111101000\");\n  });\n\
    \  it(\"should solve example 2\", () => {\n    expect(solve(150)).toBe(\"10010110\"\
    );\n  });\n  it(\"should solve example 3\", () => {\n    expect(solve(147)).toBe(\"\
    10010011\");\n  });\n});", "    let binary = N.toString(2);\n    let sum = 0;\n\
    \    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n\
    \    }\n    return sum.toString();\n}\n\nlet N = 1000;\nconsole.log(solve(N));",
  "  // You need to solve the puzzle here.\n  let result = \"\";\n  let totalSum =\
    \ 0;\n  let remainder = 0;\n  let number = N;\n  while (number > 0) {\n    //\
    \ Isolate last digit\n    remainder = number % 2;\n    // Add to result\n    result\
    \ = remainder + result;\n    // Divide number by 2 to remove last digit\n    number\
    \ = number / 2;\n    number = Math.floor(number);\n  }\n  for (let i = 0; i <\
    \ result.length; i++) {\n    totalSum += Number(result[i]);\n  }\n  return totalSum.toString();\n\
    }\nconsole.log(solve(147));", "    let result: string = '';\n    let num = N;\n\
    \    while (num > 0) {\n        let num_2 = num % 2;\n        num = Math.floor(num\
    \ / 2);\n        result = num_2 + result;\n    }\n    return result;\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  let string = N.toString(2);\n\
    \  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]);\n\
    \  }\n  return sum.toString();\n}\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    return N.toString(2);\n}\nconsole.log(solve(1000));",
  "    const binary = N.toString(2);\n    return binary;\n}\n\nexport default solve;",
  "    let result: string = \"\";\n    while (N > 0) {\n        let binary: number\
    \ = N % 2;\n        result = binary + result;\n        N = Math.floor(N / 2);\n\
    \    }\n    return result;\n}\n\nconsole.log(solve(150));\nconsole.log(solve(1000));\n\
    console.log(solve(147));", "  return N.toString(2);\n}", "    return N.toString(2);\n\
    }\n", "    return N.toString(2);\n}\n\nexport { solve }", "  let sum: number =\
    \ 0;\n  let arr: number[] = [];\n  let deci: number = N;\n  let str: string =\
    \ \"\";\n  while (deci > 0) {\n    sum = deci % 2;\n    arr.push(sum);\n    deci\
    \ = Math.floor(deci / 2);\n  }\n  str = arr.reverse().join(\"\");\n  return str;\n\
    }\nconsole.log(solve(1));\nconsole.log(solve(2));\nconsole.log(solve(147));\n\
    console.log(solve(1000));\n", "    // length of binary representation\n    const\
    \ binaryLength = Math.ceil(Math.log2(N));\n    // create array of binary number\n\
    \    const binary = Array(binaryLength).fill('0');\n    for (let i = 0; i < binaryLength;\
    \ i++) {\n        if (N % 2) {\n            binary[binaryLength - i - 1] = '1';\n\
    \        }\n        N = Math.floor(N / 2);\n    }\n    return binary.join('');\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  const result: number[] = [];\n  while (N > 0) {\n    result.push(N % 2);\n  \
    \  N = Math.floor(N / 2);\n  }\n  return result.reverse().join(\"\");\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    return N.toString(2);\n\
    }", "  let bin = \"\";\n  let remainder = 0;\n  while (N > 0) {\n    remainder\
    \ = N % 2;\n    N = Math.floor(N / 2);\n    bin = remainder + bin;\n  }\n  return\
    \ bin;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // return N.toString(2);\n  return N.toString(2).split('').reduce((a, b) => +a\
    \ + +b);\n}\n\nconsole.log(solve(150));\nconsole.log(solve(147));\nconsole.log(solve(1000));",
  "    let result: string = '';\n    while (N > 0) {\n        result = (N % 2).toString()\
    \ + result;\n        N = Math.floor(N / 2);\n    }\n    return result;\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return N.toString(2);\n}\n\nconsole.log(solve(147));", "    return N.toString(2)\n\
    }\n", "  const binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i <\
    \ binary.length; i++) {\n    sum += Number(binary[i]);\n  }\n  return sum.toString();\n\
    }\nconsole.log(solve(1000));", "  return Number(N)\n    .toString(2)\n    .split(\"\
    \")\n    .reduce((a, b) => parseInt(a) + parseInt(b), 0)\n    .toString();\n}\n\
    \nexport const answer = solve;", "  return N.toString(2);\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n\nsolve(1000);\nsolve(150);\nsolve(147);", "  return Number(N).toString(2);\n\
    }\n\nconsole.log(solve(10000));", "  return N.toString(2);\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));", "  const a: number[] = [];\n  while (N > 0) {\n\
    \    a.push(N % 2);\n    N = Math.floor(N / 2);\n  }\n  let num = 0;\n  for (let\
    \ i = 0; i < a.length; i++) {\n    num += a[i] * Math.pow(10, i);\n  }\n  return\
    \ num.toString();\n}\nconsole.log(solve(150));\n", "  let sum: number = 0;\n \
    \ const binary: string = N.toString(2);\n  for (let i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    // return N.toString(2);\n    let result = '';\n    let remaining: number;\n\
    \    let number = N;\n    while (number) {\n        remaining = number % 2;\n\
    \        number = Math.floor(number / 2);\n        result = remaining.toString()\
    \ + result;\n    }\n    return result;\n}\n\nconst input = 1000;\n\nconst start\
    \ = new Date().getTime();\nconsole.log(solve(input));\nconst end = new Date().getTime();\n\
    console.log(`Operation took ${end - start} ms`);", "    return (N).toString(2)\n\
    }\n\nconsole.log(solve(10000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    let sum: number = 0;\n    let binary: string = \"\";\n    while (N > 0) {\n\
    \        sum += N % 2;\n        N = Math.floor(N / 2);\n        binary = (N %\
    \ 2) + binary;\n    }\n    return binary + \" => \" + sum;\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));", "  let binStr = \"\";\n  let counter = 0;\n \
    \ const quotient = N;\n  // let remainder = 1;\n  while (quotient > 0) {\n   \
    \ binStr += (quotient % 2).toString();\n    quotient = Math.floor(quotient / 2);\n\
    \    counter++;\n  }\n  // console.log(binStr.split(\"\").reverse().join(\"\"\
    ));\n  return binStr\n    .split(\"\")\n    .reverse()\n    .join(\"\");\n}",
  "  let result = (N >>> 0).toString(2);\n  return result.split(\"\").reduce((a, b)\
    \ => parseInt(a) + parseInt(b), 0).toString();\n}\n\nconsole.log(solve(150));",
  "  // convert number to binary string\n  let binNum = N.toString(2);\n  // convert\
    \ binary string to array\n  let binArr = binNum.split(\"\");\n  // set sum of\
    \ binary digits to 0\n  let binSum = 0;\n  // loop over binary array\n  for (let\
    \ i = 0; i < binArr.length; i++) {\n    // add binary digit to sum\n    binSum\
    \ += Number(binArr[i]);\n  }\n  // return sum of binary digits as string\n  return\
    \ binSum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let binaryString = N.toString(2);\n    let numberSum\
    \ = 0;\n    for (let i = 0; i < binaryString.length; i++) {\n        numberSum\
    \ += Number(binaryString[i]);\n    }\n    return numberSum.toString();\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    // let bin = N.toString(2)\n    // console.log(bin)\n    // let total = 0\n\
    \    // for (let i = 0; i < bin.length; i++) {\n    //     let j = parseInt(bin[i])\n\
    \    //     total += j\n    // }\n    // return total.toString()\n    let total\
    \ = 0\n    while (N !== 0) {\n        total += N % 2\n        N = Math.floor(N\
    \ / 2)\n    }\n    return total.toString()\n}\n\nconsole.log(solve(5))\nconsole.log(solve(12))\n\
    console.log(solve(12345))\nconsole.log(solve(0))\nconsole.log(solve(23456))\n\
    console.log(solve(87))\nconsole.log(solve(894))\nconsole.log(solve(34))\nconsole.log(solve(1000))\n\
    console.log(solve(150))\nconsole.log(solve(147))", "  const binary = N.toString(2);\n\
    \  let result = 0;\n  for (let i = 0; i < binary.length; i++) {\n    result +=\
    \ Number(binary[i]);\n  }\n  return result.toString();\n}\n\nconsole.log(solve(150));\n\
    console.log(solve(147));\nconsole.log(solve(1000));", "  return N.toString(2);\n\
    }\n\nconsole.log(solve(147));", "  return (N >>> 0).toString(2);\n}\n", "    return\
    \ N.toString(2);\n}\n\nconsole.log(solve(150));", "    return (N).toString(2)\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    const binary: string = N.toString(2);\n    const array: string[] = binary.split('');\n\
    \    let total: number = 0;\n    for (let i: number = 0; i < array.length; i++)\
    \ {\n        total += Number(array[i]);\n    }\n    return total.toString();\n\
    }\n\nconsole.log(solve(150));\nconsole.log(solve(1000));\nconsole.log(solve(147));",
  "    return N.toString(2);\n}\nconsole.log(solve(128));\nconsole.log(solve(149));\n\
    console.log(solve(1000));", "  return Number(N)\n    .toString(2)\n    .split(\"\
    \")\n    .reduce((a, b) => +a + +b, 0)\n    .toString();\n}\n\nexport function\
    \ main() {\n  console.log(solve(0));\n  console.log(solve(1));\n  console.log(solve(2));\n\
    \  console.log(solve(4));\n  console.log(solve(8));\n  console.log(solve(1000));\n\
    \  console.log(solve(1111));\n  console.log(solve(150));\n  console.log(solve(147));\n\
    }", "    // Write your code here.\n    const result = [];\n    while (N !== 0)\
    \ {\n        if (N % 2 === 0) {\n            result.push(0);\n        } else {\n\
    \            result.push(1);\n        }\n        N = Math.floor(N / 2);\n    }\n\
    \    return result.reverse().join('');\n}\n\nconsole.log(solve(150));\nconsole.log(solve(1000));\n\
    console.log(solve(147));", "  let result = '';\n  while (N > 0) {\n    result\
    \ = (N % 2) + result;\n    N = Math.floor(N / 2);\n  }\n  return result;\n}\n",
  "  let result = \"\"\n  let i = 1\n  while (i <= N) {\n    if (i & N) {\n      result\
    \ = \"1\" + result\n    } else {\n      result = \"0\" + result\n    }\n    i\
    \ <<= 1\n  }\n  return result\n}\nconsole.log(solve(1000))\nconsole.log(solve(150))\n\
    console.log(solve(147))", "    const baseConverter = (baseFrom: number, baseTo:\
    \ number, num: number) => {\n        return parseInt(num.toString(), baseFrom).toString(baseTo);\n\
    \    };\n    return baseConverter(10, 2, N);\n}\nconsole.log(solve(1000));", " \
    \ let result = '';\n  while (N > 0) {\n    result = (N % 2) + result;\n    N =\
    \ Math.floor(N / 2);\n  }\n  return result;\n}\n", "  let res = \"\";\n  for (let\
    \ i = N; i > 0; i >>= 1) {\n    res = i & 1 + res;\n  }\n  return res;\n}\n\n\
    console.log(solve(14));\nconsole.log(solve(100));\nconsole.log(solve(1000));",
  "    const NtoB = N.toString(2);\n\n    let result = 0;\n    for (let index = 0;\
    \ index < NtoB.length; index++) {\n        result += parseInt(NtoB[index]);\n\
    \    }\n    return result.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(147));\n\
    console.log(solve(150));", "  const binary = N.toString(2);\n  return binary;\n\
    }\n\nexport default solve;", "  // get number in binary\n  const binaryNumber\
    \ = (N).toString(2);\n  // get each number and add it together\n  const digits\
    \ = binaryNumber.split('').map(Number);\n  const sum = digits.reduce((sum, value)\
    \ => sum + value, 0);\n  return sum.toString();\n}", "    return (N >>> 0).toString(2)\n\
    }\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  let result = '';\n  let remainder = 0;\n  while (N > 0) {\n    remainder = N\
    \ % 2;\n    N = Math.floor(N / 2);\n    result = remainder + result;\n  }\n  return\
    \ result;\n}\n\nconsole.log(solve(147));", "  let result = '';\n  if (N > 0) {\n\
    \    result = solve(Math.floor(N / 2)) + (N % 2).toString();\n  }\n  return result;\n\
    }\n", "  return (N >>> 0).toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return (N >>> 0).toString(2);\n\
    }\nconsole.log(solve(8));", "    return N.toString(2)\n}\n", "  let result = '';\n\
    \  let number = N;\n  while (number > 0) {\n    result = (number % 2) + result;\n\
    \    number = Math.floor(number / 2);\n  }\n  return result;\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n", "  let res = \"\"\n  let div = N\n  while (div > 0) {\n    res = div % 2\
    \ + res\n    div = Math.floor(div / 2)\n  }\n  return res\n}\n", "  let result\
    \ = \"\";\n  let power = 0;\n  let number = N;\n  while (number > 0) {\n    const\
    \ bit = Math.floor(number / Math.pow(2, power)) % 2;\n    result = `${bit}${result}`;\n\
    \    power++;\n    number = number - Math.pow(2, power - 1);\n  }\n  return result;\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    const bin = N.toString(2);\n    let sum = 0;\n    for (let i = 0; i < bin.length;\
    \ i++) {\n        sum += parseInt(bin[i]);\n    }\n    return sum.toString();\n\
    }\n\nconsole.log(solve(147));", "    let result: string = \"\";\n    if (N ==\
    \ 0) return \"0\";\n    while (N != 0) {\n        let r = N % 2;\n        N =\
    \ Math.floor(N / 2);\n        result = r + result;\n    }\n    return result;\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    return N.toString(2);\n}\n\nconsole.log(solve(150));", "    return N.toString(2);\n\
    }\n", "    let number: string = N.toString(2);\n    let sum: number = 0;\n   \
    \ for (let i: number = 0; i < number.length; i++) {\n        sum += parseInt(number[i]);\n\
    \    }\n    return sum.toString();\n}\n\nexport { solve }", "    let binArray:\
    \ string[] = [];\n    let binString: string = '';\n    let sum: number = 0;\n\
    \    let remainder: number = 0;\n    let temporary: number = N;\n    if (N ===\
    \ 0) {\n        return '0';\n    }\n    while (temporary > 0) {\n        remainder\
    \ = temporary % 2;\n        binArray.push(remainder.toString());\n        temporary\
    \ = Math.floor(temporary / 2);\n    }\n    binArray.reverse();\n    binString\
    \ = binArray.join('');\n    for (let index: number = 0; index < binString.length;\
    \ index++) {\n        sum += Number(binString[index]);\n    }\n    return sum.toString();\n\
    }\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // go through each value and add it to the overall\n  // sum of the result\n\
    \  let result = [];\n  let sum = 0;\n  // get the binary representation of the\
    \ number\n  let binaryNumber = N.toString(2);\n  // add the sum of the digits\
    \ in the string to result\n  for (let i = 0; i < binaryNumber.length; i++) {\n\
    \    result.push(parseInt(binaryNumber[i]));\n  }\n  return result.reduce((a,\
    \ b) => a + b, 0).toString();\n}\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    let result: number = N.toString(2).split('').reduce((a,b)\
    \ => parseInt(a) + parseInt(b), 0);\n    return result.toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\n", "    let binaryString = \"\";\n    let sum = 0;\n    let remain = 0;\n \
    \   let quotient = 0;\n    let binarySum = \"\";\n    let counter = 0;\n    let\
    \ flag = false;\n    // checks for 0 or 1.\n    if (N === 0) {\n        return\
    \ \"0\";\n    } else if (N === 1) {\n        return \"1\";\n    } else {\n   \
    \     while (N !== 0) {\n            remain = N % 2;\n            quotient = Math.floor(N\
    \ / 2);\n            if (flag) {\n                binaryString += String(remain);\n\
    \            } else {\n                binaryString += String(remain);\n     \
    \           flag = true;\n            }\n            N = quotient;\n        }\n\
    \        // console.log(binaryString);\n        for (let index = 0; index < binaryString.length;\
    \ index++) {\n            sum += Number(binaryString[index]);\n        }\n   \
    \     // console.log(sum);\n        while (sum !== 0) {\n            remain =\
    \ sum % 2;\n            quotient = Math.floor(sum / 2);\n            binarySum\
    \ += String(remain);\n            sum = quotient;\n        }\n        // console.log(binarySum);\n\
    \        for (let index = binarySum.length - 1; index >= 0; index--) {\n     \
    \       binaryString += binarySum[index];\n        }\n        // console.log(binaryString);\n\
    \        return binaryString;\n    }\n}\nconsole.log(solve(147));\nconsole.log(solve(0));\n\
    console.log(solve(1));\nconsole.log(solve(150));\nconsole.log(solve(1000));",
  "  // convert N to binary and then back to decimal for easier parsing\n  return\
    \ parseInt(N.toString(2), 10).toString().split('').reduce((a,b) => {\n    return\
    \ parseInt(a, 10) + parseInt(b, 10);\n  }, 0).toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  const convertedN = N.toString(2);\n\
    \  const arrayOfDigits = convertedN.split(\"\");\n  const sumOfDigits = arrayOfDigits.reduce(\n\
    \    (accumulator, currentValue) => accumulator + parseInt(currentValue),\n  \
    \  0\n  );\n  return sumOfDigits.toString();\n}\n\nconsole.log(solve(150));\n\
    console.log(solve(1000));\nconsole.log(solve(147));", "    return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    let binary = N.toString(2);\n    let sum = 0;\n    for (let i = 0; i < binary.length;\
    \ i++) {\n        sum += parseInt(binary[i], 10);\n    }\n    return sum.toString();\n\
    }\n\nconsole.log(solve(147));", "    return N.toString(2);\n}\n\nlet N = 1000;\n\
    \nconsole.log(solve(N));", "    let nums = N.toString(2).split('');\n    return\
    \ nums.reduce((a,b) => parseInt(a) + parseInt(b)).toString();\n}\n\nconst n1 =\
    \ 1000;\nconst n2 = 150;\nconst n3 = 147;\n\nconsole.log(solve(n1));\nconsole.log(solve(n2));\n\
    console.log(solve(n3));", "    return N.toString(2);\n}\n\nsolve(1000);", "  \
    \  return N.toString(2);\n}\n\nconsole.log(solve(1000));", "  return N.toString(2)\n\
    \    .split('')\n    .reduce((total, num) => {\n      return total + parseInt(num);\n\
    \    }, 0)\n    .toString();\n}\n\nexport default solve;", "  let result = '';\n\
    \  while (N > 0) {\n    result = (N % 2) + result;\n    N = Math.floor(N / 2);\n\
    \  }\n  return result;\n}\n", "  return N.toString(2);\n}\n", "    let res: string\
    \ = \"\";\n    let stack: number[] = [];\n    let n: number = N;\n    while (n\
    \ > 0) {\n        stack.push(n % 2);\n        n = Math.floor(n / 2);\n    }\n\
    \    while (stack.length > 0) {\n        res += stack.pop();\n    }\n    return\
    \ res;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    return (N).toString(2)\n}\n\nconsole.log(solve(150));", "    let S: string\
    \ = N.toString(2);\n    let s: number = 0;\n    for (let n of S) {\n        s\
    \ += parseInt(n);\n    }\n    return s.toString();\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    return N.toString(2);\n\
    }\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  let out: string = \"\";\n  let current = N;\n  while (current > 0) {\n    out\
    \ = (current % 2).toString() + out;\n    current = Math.floor(current / 2);\n\
    \  }\n  return out;\n}\n\nconsole.log(solve(150));", "    return N.toString(2)\n\
    }\n", "    const binary: string = convertToBinary(N);\n    const binaryDigits:\
    \ string[] = binary.split('');\n    let result: number = 0;\n    binaryDigits.forEach((digit:\
    \ string) => {\n        result += Number(digit);\n    });\n    return String(result);\n\
    }\n", "  let binary: string = \"\";\n  while (N > 0) {\n    binary = (N % 2) +\
    \ binary;\n    N = Math.floor(N / 2);\n  }\n  return binary;\n}\n", "    return\
    \ (N).toString(2);\n}\n", "  const binaryN = N.toString(2);\n  const answer =\
    \ binaryN.split(\"\").reduce((acc, char) => acc + parseInt(char), 0);\n  return\
    \ answer.toString();\n}\n\nconsole.log(solve(1000));", "  let result = 0;\n  let\
    \ temp: number;\n  while (N > 0) {\n    temp = N % 2;\n    result += temp;\n \
    \   N = Math.floor(N / 2);\n  }\n  return result.toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  return N.toString(2);\n\
    }\nconsole.log(solve(1000));", "    let strBin: string = '';\n    let intR: number\
    \ = 0;\n    if (N < 1) {\n        strBin = N.toString();\n    } else {\n     \
    \   while (N >= 1) {\n            intR = N % 2;\n            N = Math.floor(N\
    \ / 2);\n            strBin = strBin + intR.toString();\n        }\n    }\n  \
    \  return strBin;\n}\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    let binary = N.toString(2);\n    return binary;\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  let num: string = N.toString(2);\n\
    \  let sum: number = 0;\n  for (let i: number = 0; i < num.length; i++) {\n  \
    \  sum += Number(num[i]);\n  }\n  return sum.toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    let n = N;\n    let\
    \ sum = 0;\n    let result = '';\n    while (n > 0) {\n        let binary = n\
    \ % 2;\n        sum += binary;\n        result = binary + result;\n        n =\
    \ Math.floor(n / 2);\n    }\n    return result;\n}\n\nconsole.log(solve(20));",
  "  let result = N.toString(2);\n  let sum = 0;\n  let length = result.length;\n\
    \  for (let i = 0; i < length; i++) {\n    sum += parseInt(result[i]);\n  }\n\
    \  return sum.toString();\n}\nconsole.log(solve(147));", "  //Binary numbers are\
    \ strings\n  //Binary value of a number is the same as the number itself.\n\n\
    \  //Input: Number\n  //Output: String\n\n  //Examples:\n  //150 -> \"1100\"\n\
    \  //10 -> \"1010\"\n  //1000 -> \"1111101000\"\n\n  //Algorithm:\n  //1. Convert\
    \ the number to binary, return the length of string\n  //2. Calculate the sum\
    \ of string\n  //3. Convert the sum from decimal to binary\n  //3. Convert the\
    \ sum to a string and return\n\n  // 1. Convert the number to binary, return the\
    \ length of string\n  //return the binary value of N\n  //parseInt(number, base).\n\
    \  let binaryNumber = parseInt(N, 2);\n  //log the value\n  console.log(binaryNumber);\n\
    \  // 2. Calculate the sum of string\n  // the reduce() method executes a reducer\
    \ function (that you provide) on each element of the array, resulting in a single\
    \ output value.\n  //function must return a value.\n  //reduce((accumulator, currentValue)\
    \ => {\n  //log(the reduced value)\n  //log the length of binaryNumber\n  let\
    \ sum = binaryNumber.toString().split(\"\").reduce((a, b) => +a + +b);\n  console.log(sum);\n\
    \  console.log(binaryNumber.toString().length);\n  //3. Convert the sum from decimal\
    \ to binary\n  //return the binary value of sum.\n  let sumBinary = parseInt(sum,\
    \ 2);\n  //console.log(sumBinary)\n  // 3. Convert the sum to a string and return\n\
    \  //return the binary value of sum.\n  return sumBinary.toString();\n}\n", " \
    \ let result = \"\";\n  let num = N;\n  while (num !== 0) {\n    result = (num\
    \ % 2) + result;\n    num = Math.floor(num / 2);\n  }\n  return result;\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    let result: string = \"\";\n    let input: number = N;\n    let remainder:\
    \ number = 0;\n    while (input > 0) {\n        remainder = input % 2;\n     \
    \   input = Math.floor(input / 2);\n        result = remainder + result;\n   \
    \ }\n    return result;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    return (N).toString(2);\n}\n\nconsole.log(solve(5));",
  "    let str: string = \"\";\n    let arr: number[] = [];\n    let sum: number =\
    \ 0;\n    while (N !== 0) {\n        arr.push(N % 2);\n        N = Math.floor(N\
    \ / 2);\n    }\n    while (arr.length !== 0) {\n        str += arr.pop();\n  \
    \  }\n    // console.log(str);\n    for (let i = 0; i < str.length; i++) {\n \
    \       sum += parseInt(str[i]);\n    }\n    return sum.toString();\n}\n\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  let binary = \"\";\n \
    \ let cont = 0;\n  let binaryAux = \"\";\n  if (N == 0) return \"0\";\n  else\
    \ {\n    while (N > 0) {\n      if (N % 2 != 0) binary += \"1\";\n      else binary\
    \ += \"0\";\n      N = Math.floor(N / 2);\n    }\n    for (let i = binary.length\
    \ - 1; i >= 0; i--) {\n      binaryAux += binary[i];\n    }\n    return binaryAux;\n\
    \  }\n}\n", "    return N.toString(2);\n}\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  // return (N >>> 0).toString(2);\n  return N.toString(2);\n\
    }\n\nexport default solve;", "    return N.toString(2);\n}\n", "    return N.toString(2);\n\
    }\n\nsolve(1000);", "    return N.toString(2);\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "  const binary = N.toString(2);\n\
    \  let sum = 0;\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n\
    \  }\n  return sum.toString();\n}\n\nconsole.log(solve(1));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    const binary = N.toString(2);\n    let sum = 0;\n\
    \    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n\
    \    }\n    return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  let ans = \"\";\n  while (N > 0) {\n    if (N %\
    \ 2 === 0) {\n      ans = \"0\" + ans;\n    } else {\n      ans = \"1\" + ans;\n\
    \    }\n    N = Math.floor(N / 2);\n  }\n  console.log(ans);\n  return ans;\n\
    }\n\nsolve(1000);\nsolve(150);\nsolve(147);", "    let inBinary: string = '';\n\
    \    for (let i = 1; i <= N; i++) {\n        inBinary += `${i.toString(2)}`;\n\
    \    }\n    return Array.from(inBinary)\n        .reduce((acc, num) => Number(acc)\
    \ + Number(num))\n        .toString();\n}\n\nconsole.log(solve(1000));", "  return\
    \ N.toString(2);\n}\n\nexport default solve;", "  const binaryArray = N.toString(2).split(\"\
    \");\n  const sum = binaryArray.reduce((acc: number, currentVal: string) => {\n\
    \    return (acc += Number(currentVal));\n  }, 0);\n  return sum.toString();\n\
    }\nconsole.log(solve(150));\nconsole.log(solve(147));\nconsole.log(solve(1000));",
  "  const list = [];\n  let index = 0;\n  while (N > 0) {\n    list[index] = N %\
    \ 2;\n    N = Math.floor(N / 2);\n    index++;\n  }\n  return list.reverse().join(\"\
    \");\n}\n\nconsole.log(solve(147));", "    const binary: string = N.toString(2);\n\
    \    const regx: RegExp = /[^1]/gi;\n    const result: string = binary.replace(regx,\
    \ '');\n    return result;\n}\n", "  return (N >>> 0).toString(2);\n}\n\nexport\
    \ default solve;", "  const binN = N.toString(2)\n\n  return binN.split('').reduce((acc:\
    \ number, val: string) => {\n    return acc + parseInt(val)\n  }, 0).toString()\n\
    }\n\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))",
  "    let result: string = N.toString(2)\n    let sum: number = 0\n    for (let item\
    \ of result) {\n        sum += Number(item)\n    }\n    return sum.toString()\n\
    }\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))",
  "    return N.toString(2);\n}\n", "  let answer = 0;\n  const bnum = N.toString(2);\n\
    \  const digits = bnum.split(\"\");\n  for (let i = 0; i < digits.length; i++)\
    \ {\n    answer += parseInt(digits[i]);\n  }\n  return answer.toString();\n}\n",
  "  return N.toString(2);\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "  return N.toString(2);\n}\nconsole.log(solve(1000));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
