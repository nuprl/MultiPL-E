name: HumanEval_5_intersperse
language: ts
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n\
  \  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2,\
  \ 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["  if (numbers.length === 0) {\n    return [];\n  } else {\n    const\
    \ [first, ...rest] = numbers;\n    return [first, delimeter, ...intersperse(rest,\
    \ delimeter)];\n  }\n}\n", "    return [];\n}\n", "    let result: number[] =\
    \ [];\n    if (numbers.length === 0) {\n        return result;\n    }\n    for\
    \ (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n\
    \        result.push(delimeter);\n    }\n    result.push(numbers[numbers.length\
    \ - 1]);\n    return result;\n}\n", "    let interspersed: number[] = [];\n  \
    \  if (numbers.length > 0) {\n        interspersed.push(numbers[0]);\n       \
    \ for (let i = 1; i < numbers.length; i++) {\n            interspersed.push(delimeter);\n\
    \            interspersed.push(numbers[i]);\n        }\n    }\n    return interspersed;\n\
    }\n", "    return new Array<number>();\n}\n", "  let result: number[] = [];\n\
    \  if (numbers.length > 0) {\n    result.push(numbers[0]);\n    for (let i = 1;\
    \ i < numbers.length; i++) {\n      result.push(delimeter);\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  if (numbers.length === 0) {\n    return\
    \ [];\n  } else {\n    return [numbers[0], delimeter, ...intersperse(numbers.slice(1),\
    \ delimeter)];\n  }\n}\n", "    const result: number[] = [];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        if (i == 0) {\n            result.push(numbers[i]);\n\
    \        } else {\n            result.push(delimeter);\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let result: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (i != numbers.length\
    \ - 1) {\n            result.push(numbers[i]);\n            result.push(delimeter);\n\
    \        } else {\n            result.push(numbers[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "    if (numbers.length === 0) return [];\n    if (numbers.length\
    \ === 1) return numbers;\n    return [numbers[0], delimeter, ...intersperse(numbers.slice(1),\
    \ delimeter)];\n}\n", "    const result: number[] = [];\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i <\
    \ numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n\
    \    return result;\n}\n", "  return [];\n}\n", "  return numbers.reduce((output:\
    \ number[], number: number, index: number) => {\n    if (index > 0) {\n      output.push(delimeter);\n\
    \    }\n    output.push(number);\n    return output;\n  }, []);\n}\n", "    let\
    \ result: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n   \
    \     result.push(numbers[i]);\n        if (i != numbers.length - 1) {\n     \
    \       result.push(delimeter);\n        }\n    }\n    return result;\n}\n", " \
    \ return intersperseRecursive(numbers, delimeter, 0);\n}\n", "    // TODO\n  \
    \  return numbers.map((curr, i) => {\n        return i === numbers.length - 1\
    \ ? curr : [curr, delimeter];\n    }).flat();\n}\n", "  // YOUR CODE HERE\n  if\
    \ (numbers.length == 0) return numbers;\n  const last = numbers.pop();\n  return\
    \ numbers.reduce((res, cur) => {\n    res.push(cur, delimeter);\n    return res;\n\
    \  }, []).concat(last);\n}\n", "  return numbers.flatMap((x, i) => [x, i < numbers.length\
    \ - 1 ? delimeter : null]).filter(x => x);\n}\n", "    return numbers.flatMap((e,\
    \ index) => {\n        return index === numbers.length - 1 ? [e] : [e, delimeter];\n\
    \    });\n}\n", "    if (numbers.length === 0) {\n        return [];\n    } else\
    \ {\n        const [first, ...rest] = numbers;\n        return intersperse(rest,\
    \ delimeter).reduce((acc, el) => [...acc, el, delimeter], [first]);\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
