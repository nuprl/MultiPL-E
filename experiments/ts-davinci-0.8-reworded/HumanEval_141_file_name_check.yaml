name: HumanEval_141_file_name_check
language: ts
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    if(file_name.match(/^[a-zA-Z]\\w+\\.(txt|exe|dll)$/)){\n      \
    \  return \"Yes\";\n    }\n    return \"No\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    1example.exe\"));\nconsole.log(file_name_check(\"example.txt\"));", "    const\
    \ substringRegex = /(\\w+)?(\\.)?(\\w+)?/;\n    const matches = file_name.match(substringRegex);\n\
    \    if (matches === null) return \"No\";\n    const fileExtensions = [\".txt\"\
    , \".exe\", \".dll\"];\n    const fileName = matches[1];\n    const fileExtension\
    \ = matches[3];\n    const numberOfDigits = fileName.match(/\\d/g) === null ?\
    \ 0 : fileName.match(/\\d/g).length;\n    return (\n        matches[2] === \"\
    .\" && fileExtensions.includes(matches[2] + fileExtension) && numberOfDigits <=\
    \ 3\n    );\n}\n", "    if (file_name.search(/[a-zA-Z]/i) == -1) {\n        return\
    \ \"No\";\n    }\n    var regex = /\\d/g;\n    var match = file_name.match(regex);\n\
    \    if (match != null && match.length > 3) {\n        return \"No\";\n    }\n\
    \    var splitted = file_name.split(\".\");\n    if (splitted.length != 2) {\n\
    \        return \"No\";\n    }\n    if (splitted[0].length == 0) {\n        return\
    \ \"No\";\n    }\n    if (splitted[1] != \"txt\" && splitted[1] != \"exe\" &&\
    \ splitted[1] != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}\n", "    // TODO: return the correct output.\n    return \"No\";\n}\n", " \
    \   const parts = file_name.split('.');\n    if (parts.length !== 2) return 'No';\n\
    \    if (parts[0].match(/[0-9]/g) && parts[0].match(/[0-9]/g).length > 3) return\
    \ 'No';\n    if (!parts[0].match(/^[a-zA-Z]+/)) return 'No';\n    if (!['txt',\
    \ 'exe', 'dll'].includes(parts[1])) return 'No';\n    return 'Yes';\n}\n", " \
    \   let valid_file_name = true;\n    let digits = '0123456789';\n    let count_digits\
    \ = 0;\n    let alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    let count_alpha = 0;\n    let dot_found = false;\n    let ex_found = false;\n\
    \    let txt_found = false;\n    let dll_found = false;\n    for (let i = 0; i\
    \ < file_name.length; i++) {\n        if (digits.includes(file_name[i])) {\n \
    \           count_digits += 1;\n        }\n        if (alpha.includes(file_name[i]))\
    \ {\n            count_alpha += 1;\n        }\n        if (file_name[i] === '.')\
    \ {\n            dot_found = true;\n        }\n        if (i > file_name.length\
    \ - 4) {\n            if (file_name[i] === 'e') {\n                ex_found =\
    \ true;\n            }\n            if (file_name[i] === 't') {\n            \
    \    txt_found = true;\n            }\n            if (file_name[i] === 'd') {\n\
    \                dll_found = true;\n            }\n        }\n    }\n    if (count_digits\
    \ > 3 || dot_found === false || count_alpha === 0 ||\n        (ex_found === false\
    \ && txt_found === false && dll_found === false)) {\n        valid_file_name =\
    \ false;\n    }\n    return valid_file_name ? 'Yes' : 'No';\n}\n", "    const\
    \ pattern: RegExp = /^[a-zA-Z]+\\d{0,3}\\.txt|exe|dll$/\n    return pattern.test(file_name)\
    \ ? \"Yes\" : \"No\"\n}\nconsole.log(file_name_check(\"example.txt\")) // Yes\n\
    console.log(file_name_check(\"1example.dll\")) // No\n", "    let file_name_valid:\
    \ boolean = true;\n    if(file_name.split(\"\").filter(function(el: string): boolean\
    \ {\n        return el.match(/[0-9]/);\n    }).length > 3) {\n        file_name_valid\
    \ = false;\n    }\n    if(file_name.split(\".\").length !== 2) {\n        file_name_valid\
    \ = false;\n    }\n    if(file_name.split(\".\")[0].length === 0 || !file_name.split(\"\
    .\")[0].match(/[a-zA-Z]/)) {\n        file_name_valid = false;\n    }\n    if(!file_name.split(\"\
    .\")[1].match(/txt|exe|dll/)) {\n        file_name_valid = false;\n    }\n   \
    \ return file_name_valid ? \"Yes\" : \"No\";\n}\n", "  let error = false;\n  if\
    \ (file_name.length > 10) {\n    return \"No\";\n  }\n  let count_digits = 0;\n\
    \  let pos_dot = 0;\n  let count_dot = 0;\n  for (let i = 0; i < file_name.length;\
    \ i++) {\n    if (i > 0 && i < file_name.length - 1) {\n      if (file_name[i]\
    \ == \".\") {\n        pos_dot = i;\n        count_dot++;\n      }\n    }\n  \
    \  if (file_name[i] >= \"0\" && file_name[i] <= \"9\") {\n      count_digits++;\n\
    \    }\n  }\n  if (count_digits > 3 || count_dot > 1) {\n    return \"No\";\n\
    \  }\n  if (\n    (file_name[0] < \"a\" || file_name[0] > \"z\") &&\n    (file_name[0]\
    \ < \"A\" || file_name[0] > \"Z\")\n  ) {\n    return \"No\";\n  }\n  if (file_name.length\
    \ - pos_dot - 1 > 3) {\n    return \"No\";\n  }\n  let sub_str_1 = file_name.substring(pos_dot\
    \ + 1, file_name.length);\n  if (\n    sub_str_1 != \"txt\" &&\n    sub_str_1\
    \ != \"exe\" &&\n    sub_str_1 != \"dll\" &&\n    sub_str_1 != \"TXT\" &&\n  \
    \  sub_str_1 != \"EXE\" &&\n    sub_str_1 != \"DLL\"\n  ) {\n    return \"No\"\
    ;\n  }\n  return \"Yes\";\n}\n", "  let contains_alpha = (file_name.match(/[a-zA-Z]/));\n\
    \  let contains_more_than_3_nums = (file_name.match(/[0-9]{4,}/));\n  let contains_2_dots\
    \ = (file_name.match(/\\.{2,}/));\n  let contains_no_dot = (file_name.match(/^[^\\\
    .]*$/));\n  let contains_txt = (file_name.match(/\\.txt$/));\n  let contains_exe\
    \ = (file_name.match(/\\.exe$/));\n  let contains_dll = (file_name.match(/\\.dll$/));\n\
    \  if (contains_alpha && !contains_more_than_3_nums && !contains_2_dots && !contains_no_dot\
    \ &&\n  (contains_txt || contains_exe || contains_dll)) {\n    return \"Yes\"\
    ;\n  }\n  return \"No\";\n}\n", "    if (file_name.match(/[0-9]{4,}/)) {\n   \
    \     return \"No\";\n    }\n    if (file_name.split(\".\").length != 2) {\n \
    \       return \"No\";\n    }\n    let part1 = file_name.split(\".\")[0];\n  \
    \  let part2 = file_name.split(\".\")[1];\n    if (!part1.match(/[a-zA-Z]/) ||\
    \ part1 == \"\") {\n        return \"No\";\n    }\n    if (part2 != \"txt\" &&\
    \ part2 != \"exe\" && part2 != \"dll\") {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}\n", "    const allowed = new Set(['txt', 'exe', 'dll']);\n\
    \    const digit_regex = /[0-9]/g;\n    const valid_letter_regex = /^[a-zA-Z]+$/g;\n\
    \    const match_regex = /^\\w+\\.\\w+$/g;\n    const num_digits = (file_name.match(digit_regex)\
    \ || []).length;\n    const match = file_name.match(match_regex);\n    const allowed_ext\
    \ = allowed.has(file_name.split('.')[1]);\n    const valid_letter = file_name.split('.')[0].match(valid_letter_regex);\n\
    \    if (match && num_digits <= 3 && allowed_ext && valid_letter) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\n", "    // Write code here...\n    return\
    \ '';\n}\n", "    const alfa = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    const ext = [\"txt\", \"exe\", \"dll\"]\n    if (check(file_name, /\\d{4,}/g))\
    \ {\n        return \"No\"\n    } else if (check(file_name, /\\./g) !== 1) {\n\
    \        return \"No\"\n    } else if (check(file_name.split(\".\")[0], /\\d/g))\
    \ {\n        return \"No\"\n    } else if (alfa.indexOf(file_name.split(\".\"\
    )[0][0]) === -1) {\n        return \"No\"\n    } else if (ext.indexOf(file_name.split(\"\
    .\")[1]) === -1) {\n        return \"No\"\n    } else {\n        return \"Yes\"\
    \n    }\n}", "    const file_name_split = file_name.split('.');\n    if (file_name_split.length\
    \ != 2 || file_name_split[0].length == 0\n        || file_name_split[1].length\
    \ == 0) {\n        return \"No\";\n    }\n    const valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    if (!valid_extensions.includes(file_name_split[1]))\
    \ {\n        return \"No\";\n    }\n    const digits_count = file_name_split[0].split(\"\
    \").filter(c => c >= '0' && c <= '9').length;\n    if (digits_count > 3) {\n \
    \       return \"No\";\n    }\n    const first_char = file_name_split[0][0];\n\
    \    if (!(first_char >= 'a' && first_char <= 'z') && !(first_char >= 'A' && first_char\
    \ <= 'Z')) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    1example.1dll\"));\nconsole.log(file_name_check(\"example.dll\"));\nconsole.log(file_name_check(\"\
    example.12txt\"));\nconsole.log(file_name_check(\"12example.12txt\"));\nconsole.log(file_name_check(\"\
    12eample.txt\"));\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    example.txt\"));", "    if (file_name.match(/^[A-Za-z][^.]*\\.(txt|exe|dll)$/))\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nexport { file_name_check };", "    return '';\n}", "  if (file_name.match(/^[a-zA-Z]+[0-9]{0,3}[.]txt$/))\
    \ {\n    return \"Yes\";\n  } else if (file_name.match(/^[a-zA-Z]+[0-9]{0,3}[.]exe$/))\
    \ {\n    return \"Yes\";\n  } else if (file_name.match(/^[a-zA-Z]+[0-9]{0,3}[.]dll$/))\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));", "    let dot_position\
    \ = file_name.indexOf('.');\n    if(dot_position < 0) return \"No\";\n    let\
    \ extension = file_name.substring(dot_position + 1);\n    if(!['txt', 'exe', 'dll'].includes(extension))\
    \ return \"No\";\n    if(file_name.match(/\\d/g).length > 3) return \"No\";\n\
    \    if(!/^[a-z]/i.test(file_name.substring(0, dot_position))) return \"No\";\n\
    \    return \"Yes\";\n}\n", "    const digits = '0123456789';\n    let num_digits\
    \ = 0;\n    let dot_exists = false;\n    let dot_position = -1;\n    let first_letter\
    \ = false;\n    let extension_correct = false;\n    let extension = '';\n    for\
    \ (let i = 0; i < file_name.length; i++) {\n        if (digits.includes(file_name[i]))\
    \ {\n            num_digits += 1;\n        }\n        if (file_name[i] === '.')\
    \ {\n            dot_exists = true;\n            dot_position = i;\n        }\n\
    \        if (file_name[i] === '.' || (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n            first_letter\
    \ = true;\n        }\n    }\n    extension = file_name.substring(dot_position\
    \ + 1);\n    if (extension === 'txt' || extension === 'exe' || extension === 'dll')\
    \ {\n        extension_correct = true;\n    }\n    return num_digits > 3 || !dot_exists\
    \ || !first_letter || !extension_correct ? 'No' : 'Yes';\n}\n", "    // Write\
    \ your code here\n\n    return \"\";\n}\n", "    if (file_name.split(\"\").filter(element\
    \ => element == \".\").length != 1) {\n        return \"No\";\n    }\n    let\
    \ i = 0;\n    while (file_name[i] != \".\") {\n        if (!isLatinLetter(file_name[i]))\
    \ {\n            return \"No\";\n        }\n        i++;\n    }\n    if (file_name.slice(i\
    \ + 1) != \"txt\" && file_name.slice(i + 1) != \"exe\" && file_name.slice(i +\
    \ 1) != \"dll\") {\n        return \"No\";\n    }\n    if (file_name.slice(0,\
    \ i).split(\"\").filter(element => isDigit(element)).length > 3) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\n", "    let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$/\n    if (regex.test(file_name)) return \"Yes\"\n    return \"\
    No\"\n}", "  // Variables to hold required values.\n  let count: number = 0;\n\
    \  let check: boolean = false;\n  // Checking if the file's name contains more\
    \ than three digits.\n  for (let i: number = 0; i < file_name.length; i++) {\n\
    \    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      count++;\n    }\n\
    \  }\n  // Checking if the file's name contains exactly one dot and it is not\
    \ the first or \n  // last letter.\n  for (let i: number = 0; i < file_name.length;\
    \ i++) {\n    if (file_name[i] === '.' && file_name[i] != file_name[0] && \n \
    \   file_name[i] != file_name[file_name.length - 1]) {\n      check = true;\n\
    \    }\n  }\n  // Checking if the substring before the dot starts with a letter\
    \ from the latin alphapet.\n  for (let i: number = 0; i < file_name.length; i++)\
    \ {\n    if (file_name[i] === '.') {\n      break;\n    }\n    if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && \n    file_name[i] <=\
    \ 'Z') {\n      check = true;\n    }\n  }\n  // Checking if the substring after\
    \ the dot is either txt, exe or dll.\n  for (let i: number = 0; i < file_name.length;\
    \ i++) {\n    if (file_name[i] === '.') {\n      if (file_name.substring(i + 1,\
    \ i + 4) === 'txt' || \n      file_name.substring(i + 1, i + 4) === 'exe' || \n\
    \      file_name.substring(i + 1, i + 4) === 'dll') {\n        check = true;\n\
    \      }\n    }\n  }\n  // Checking if the file's name satisfies all the previous\
    \ conditions.\n  if (count <= 3 && check", "    const dot_index = file_name.indexOf('.');\n\
    \    const file_extension = file_name.substring(dot_index + 1);\n    const file_name_no_extension\
    \ = file_name.substring(0, dot_index);\n    const digit_count = file_name_no_extension.replace(/[^0-9]/g,\
    \ '').length;\n    const valid_extensions = ['txt', 'exe', 'dll'];\n    if (digit_count\
    \ > 3) {\n        return 'No';\n    }\n    if (dot_index === -1) {\n        return\
    \ 'No';\n    }\n    if (!(file_name_no_extension.match(/^[a-zA-Z]/))) {\n    \
    \    return 'No';\n    }\n    if (!(valid_extensions.includes(file_extension)))\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "    if (file_name.length\
    \ === 0) {\n        return \"No\";\n    }\n    const regex = /^[a-zA-Z]{1}\\w{0,30}\\\
    .\\w{1,30}$/;\n    if (regex.test(file_name)) {\n        return \"Yes\";\n   \
    \ }\n    return \"No\";\n}\n", "    if (file_name.match(/^[a-zA-Z]+\\d{0,3}\\\
    .txt$/)) {\n        return \"Yes\";\n    } else if (file_name.match(/^[a-zA-Z]+\\\
    d{0,3}\\.exe$/)) {\n        return \"Yes\";\n    } else if (file_name.match(/^[a-zA-Z]+\\\
    d{0,3}\\.dll$/)) {\n        return \"Yes\";\n    } else {\n        return \"No\"\
    ;\n    }\n}\n", "    // Return 'Yes' if the file name is valid, and 'No' otherwise.\n\
    \    return \"\";\n}\n\n", "  let digits = file_name.match(/\\d/g)\n  if (digits)\
    \ {\n    if (digits.length > 3) {\n      return \"No\"\n    }\n  }\n  if (file_name.match(/\\\
    ./g).length !== 1) {\n    return \"No\"\n  }\n  let alphapet = file_name.match(/[a-zA-Z]/g)\n\
    \  if (!alphapet) {\n    return \"No\"\n  }\n  if (alphapet.length !== 1) {\n\
    \    return \"No\"\n  }\n  let subs = file_name.split(\".\")\n  let extension\
    \ = subs[1]\n  if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n    return \"Yes\"\n  }\n  return \"No\"\n}", "    return \"No\"\
    ;\n}\n", "    let result = 'No';\n    const reg = /[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)/;\n\
    \    if (reg.test(file_name)) {\n        result = 'Yes';\n    }\n    return result;\n\
    }\n", "    let valid = false;\n    let extension = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1);\n    let name = file_name.substring(0, file_name.lastIndexOf('.'));\n\
    \    let digits = 0;\n    for (let i = 0; i < name.length; i++) {\n        let\
    \ current_char = name.charAt(i);\n        if (current_char >= '0' && current_char\
    \ <= '9') {\n            digits++;\n        }\n    }\n    if (digits <= 3 && file_name.indexOf('.')\
    \ === name.length &&\n        name.charAt(0) >= 'a' && name.charAt(0) <= 'z' ||\n\
    \        name.charAt(0) >= 'A' && name.charAt(0) <= 'Z' &&\n        (extension\
    \ === 'txt' || extension === 'exe' || extension === 'dll')) {\n        valid =\
    \ true;\n    }\n    return valid ? 'Yes' : 'No';\n}\n", "    return /^[a-zA-Z]+[0-9]{0,3}\\\
    .(txt|exe|dll)$/.test(file_name) ? \"Yes\" : \"No\";\n}\n", "    let [fname, ext]\
    \ = file_name.split('.');\n    if (fname[0].toLowerCase() === fname[0]) {\n  \
    \      fname = '0' + fname;\n    }\n    let valid_extensions = ['txt', 'exe',\
    \ 'dll'];\n    let digits = 0;\n    for (let i = 0; i < fname.length; i++) {\n\
    \        if (!isNaN(+fname[i])) {\n            digits++;\n        }\n    }\n \
    \   return (digits <= 3 && valid_extensions.includes(ext)) ? 'Yes' : 'No';\n}\n",
  "    let regexp = /^[a-zA-Z]+[0-9]{0,3}\\.[txt|exe|dll]$/;\n    if (regexp.test(file_name))\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "    let result:\
    \ string = 'No';\n    let count_digits: number = 0;\n    let count_dot: number\
    \ = 0;\n    let found_dot: boolean = false;\n    let sub_str_left: string = '';\n\
    \    let sub_str_right: string = '';\n    for (let char of file_name) {\n    \
    \    if (char >= '0' && char <= '9') {\n            count_digits++;\n        }\n\
    \        if (char === '.') {\n            count_dot++;\n            found_dot\
    \ = true;\n        }\n        if (found_dot === false) {\n            sub_str_left\
    \ += char;\n        }\n        if (found_dot === true) {\n            sub_str_right\
    \ += char;\n        }\n    }\n    if (count_digits <= 3 && count_dot === 1 &&\
    \ sub_str_left.length > 0 &&\n        (sub_str_left[0] >= 'a' && sub_str_left[0]\
    \ <= 'z' ||\n            sub_str_left[0] >= 'A' && sub_str_left[0] <= 'Z') &&\n\
    \        (sub_str_right === '.txt' || sub_str_right === '.exe' || sub_str_right\
    \ === '.dll')) {\n        result = 'Yes';\n    }\n    return result;\n}\n", " \
    \ const last_part = file_name.split('.').pop();\n  if (last_part === 'txt' ||\
    \ last_part === 'exe' || last_part === 'dll') {\n    if (file_name.match(/\\d/g)\
    \ && file_name.match(/\\d/g).length <= 3) {\n      if (file_name.match(/\\./g).length\
    \ === 1) {\n        if (file_name.match(/[a-zA-Z]/g) && file_name.match(/[a-zA-Z]/g).length\
    \ === 1) {\n          return 'Yes';\n        }\n      }\n    }\n  }\n  return\
    \ 'No';\n}\n", "    return \"Yes\";\n}\n", "    // TODO\n    // Check the file\
    \ name and return \"Yes\" or \"No\"\n    return \"Yes\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    example.dll\"));\nconsole.log(file_name_check(\"a.exe\"));\nconsole.log(file_name_check(\"\
    1.example.txt\"));\nconsole.log(file_name_check(\"example1.txt\"));\nconsole.log(file_name_check(\"\
    example.txt1\"));\nconsole.log(file_name_check(\"example..txt\"));\nconsole.log(file_name_check(\"\
    example.txt.exe\"));\nconsole.log(file_name_check(\"exam.ple.txt\"));\nconsole.log(file_name_check(\"\
    exam.ple.tx\"));\nconsole.log(file_name_check(\"exe\"));\nconsole.log(file_name_check(\"\
    \"));\nconsole.log(file_name_check(\"1\"));\nconsole.log(file_name_check(\"...\"\
    ));\nconsole.log(file_name_check(\"....\"));\nconsole.log(file_name_check(\"ex...\"\
    ));\nconsole.log(file_name_check(\"..ex\"));\nconsole.log(file_name_check(\"ex..\"\
    ));\nconsole.log(file_name_check(\"..ex..\"));\nconsole.log(file_name_check(\"\
    ..exe.\"));\nconsole.log(file_name_check(\"exe..\"));\nconsole.log(file_name_check(\"\
    1.ex\"));\nconsole.log(file_name_check(\"ex.1\"));\nconsole.log(file_name_check(\"\
    ex.12\"));\nconsole.log(file_name_check(\"ex.123\"));\nconsole.log(file_name_check(\"\
    exe.1\"));\nconsole.log(file_name_check(\"e.x.e\"));\nconsole.log(file_name_check(\"\
    e.x.e.\"));\nconsole.log(file_name_check(\"e.x.e.1\")", "    const has_more_than_three_digits:\
    \ boolean = /\\d{4,}/.test(file_name);\n    const has_more_than_one_dot: boolean\
    \ = /\\.{2,}/.test(file_name);\n    const has_dot: boolean = /\\./.test(file_name);\n\
    \    const is_the_substring_before_the_dot_empty: boolean = /^\\./.test(file_name);\n\
    \    const starts_with_a_letter_from_the_latin_alphapet: boolean = /^[a-zA-Z]/.test(file_name);\n\
    \    const is_the_substring_after_the_dot_empty: boolean = /\\.$/.test(file_name);\n\
    \    const is_the_substring_after_the_dot_not_one_of_these: boolean = !/\\.(txt|exe|dll)$/.test(file_name);\n\
    \    const is_invalid: boolean = has_more_than_three_digits || has_more_than_one_dot\
    \ || has_dot === false || is_the_substring_before_the_dot_empty || !starts_with_a_letter_from_the_latin_alphapet\
    \ || is_the_substring_after_the_dot_empty || is_the_substring_after_the_dot_not_one_of_these;\n\
    \    return is_invalid ? \"No\" : \"Yes\";\n}\n", "    const file_name_parts =\
    \ file_name.split('.');\n    const reg_expr_digits = RegExp(/\\d/);\n    const\
    \ reg_expr_letter = RegExp(/[a-zA-Z]/);\n    const allowed_extensions = ['txt',\
    \ 'exe', 'dll'];\n    let number_of_digits = 0;\n    let is_valid = true;\n\n\
    \    if (file_name_parts.length !== 2) {\n        is_valid = false;\n    }\n\n\
    \    for (let i = 0; i < file_name_parts[0].length; i++) {\n        if (reg_expr_digits.test(file_name_parts[0][i]))\
    \ {\n            number_of_digits++;\n        }\n    }\n\n    if (number_of_digits\
    \ > 3 || !reg_expr_letter.test(file_name_parts[0][0])) {\n        is_valid = false;\n\
    \    }\n\n    if (!allowed_extensions.includes(file_name_parts[1])) {\n      \
    \  is_valid = false;\n    }\n\n    return is_valid ? 'Yes' : 'No';\n}\n", "  \
    \  if (file_name.length < 3) {\n        return \"No\";\n    }\n    if (count_numbers(file_name)\
    \ > 3) {\n        return \"No\";\n    }\n    if (count_dots(file_name) !== 1)\
    \ {\n        return \"No\";\n    }\n    const before_dot = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n    if (is_string_number(before_dot) || !is_valid_char(before_dot[0]))\
    \ {\n        return \"No\";\n    }\n    const after_dot = file_name.substring(file_name.indexOf(\"\
    .\") + 1);\n    if (after_dot !== \"txt\" && after_dot !== \"exe\" && after_dot\
    \ !== \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "  \
    \  const regex = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/gm;\n    return regex.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "  // valid file name is:\n  // matches filename.ext\n\
    \  // returns Yes if valid\n  // returns No if invalid\n  // each condition is\
    \ tested and valid files pass each test\n  // then we stop testing conditions\
    \ when there is an invalid\n  // condition.\n  // conditions to test:\n  //  \
    \ 1. three digits in file name\n  //   2. one dot in file name\n  //   3. substring\
    \ before dot is not empty and starts with valid letter\n  //   4. substring after\
    \ dot is valid\n  //   5. substring before dot contains no invalid characters\n\
    \  //   6. valid characters: a-z A-Z 0-9\n  //   7. substring after dot is one\
    \ of:\n  //      'txt', 'exe', 'dll'\n  //   8. string contains only valid characters\n\
    \  //   9. invalid characters:\n  //      any characters that are not valid in\
    \ the following list:\n  //      'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.txtexe'\n\
    \  let valid_characters: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.txtexe';\n\
    \  let valid_file_extensions: string = 'txt.exe.dll';\n  let valid_letter_characters:\
    \ string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let valid_digit_characters:\
    \ string = '0123456789';\n  let substring_before_dot: string = '';\n  let substring_after_dot:\
    \ string = '';\n  let dot_index: number = -1;\n  let valid_file_name: boolean\
    \ = true;\n  let number_of_digits: number = 0;\n  let number_of_dots: number =\
    \ 0;\n  let dot_test_passed: boolean = false;\n  let substring_after_dot_test_passed:\
    \ boolean = false;\n  let substring_before_dot_test_", "  let dot_count = 0;\n\
    \  let num_count = 0;\n  let alpha_count = 0;\n  let valid_count = 0;\n  let dot_flag\
    \ = false;\n  let extension = false;\n  let last_char: string;\n  let first_char:\
    \ string;\n  let valid_extensions = ['txt', 'exe', 'dll'];\n  if (file_name.length\
    \ > 0) {\n    last_char = file_name[file_name.length - 1];\n    first_char = file_name[0];\n\
    \  }\n  for (let i = 0; i < file_name.length; i++) {\n    // Check for valid first\
    \ char\n    if (i === 0) {\n      if ((first_char >= 'a' && first_char <= 'z')\
    \ ||\n        (first_char >= 'A' && first_char <= 'Z')) {\n        alpha_count\
    \ += 1;\n      }\n    }\n    // Check for valid char's\n    if ((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') ||\n      (file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z') ||\n      (file_name[i] >= '0' && file_name[i] <= '9') ||\n      (file_name[i]\
    \ === '.')) {\n      // Count the dot\n      if (file_name[i] === '.') {\n   \
    \     dot_count += 1;\n        dot_flag = true;\n      }\n      // Count the numbers\n\
    \      if (file_name[i] >= '0' && file_name[i] <= '9') {\n        num_count +=\
    \ 1;\n      }\n      // Check the extensions\n      if (dot_flag === true) {\n\
    \        if (last_char === file_name[i]) {\n          if (valid_extensions.includes(file_name.substring(i\
    \ + 1, file_name.length))) {\n            valid_count += 1;\n          }\n   \
    \     }\n      }\n    }\n  }\n  // Check if there's a dot, and if there's only\
    \ one.\n  if (dot", "    let countDot = 0;\n    let countDigit = 0;\n    let isValid\
    \ = false;\n    const checkFileExtension = (file_name: string): boolean => {\n\
    \        const fileExtensionArray = [\"txt\", \"exe\", \"dll\"];\n        const\
    \ fileExtension = file_name.split(\".\")[1];\n        return fileExtensionArray.includes(fileExtension);\n\
    \    };\n    const validateFileName = (file_name: string): boolean => {\n    \
    \    return file_name.length > 0;\n    };\n    const validateFileExtension = (file_name:\
    \ string): boolean => {\n        return file_name.split(\".\").length > 1;\n \
    \   };\n    for (let char in file_name) {\n        if (file_name[char] == \".\"\
    ) {\n            countDot++;\n        }\n        if (parseInt(file_name[char])\
    \ >= 0 && parseInt(file_name[char]) <= 9) {\n            countDigit++;\n     \
    \   }\n    }\n    if (countDot == 1 && countDigit <= 3 && validateFileExtension(file_name)\
    \ && validateFileName(file_name.split(\".\")[0]) && checkFileExtension(file_name))\
    \ {\n        isValid = true;\n    }\n    return isValid ? \"Yes\" : \"No\";\n\
    }\n", "  const reg_1 = /^[a-zA-Z][a-zA-Z0-9]+/\n  const reg_2 = /\\.[a-zA-Z]+$/\n\
    \  if (file_name.match(reg_1)) {\n    if (file_name.match(reg_2)) {\n      if\
    \ (file_name.substring(file_name.indexOf('.') + 1) === 'txt' ||\n        file_name.substring(file_name.indexOf('.')\
    \ + 1) === 'exe' ||\n        file_name.substring(file_name.indexOf('.') + 1) ===\
    \ 'dll') {\n        if (file_name.substring(0, file_name.indexOf('.')).match(/\\\
    d/g).length <= 3) {\n          return 'Yes'\n        }\n      }\n    }\n  }\n\
    \  return 'No'\n}\n", "    const digit_pattern = /\\d/g;\n    const matched_digits\
    \ = file_name.match(digit_pattern);\n    let result = \"No\";\n    if (matched_digits\
    \ !== null && matched_digits.length <= 3) {\n        const split_name = file_name.split(\"\
    .\");\n        const ext = split_name[1];\n        const is_ext = /^(txt|exe|dll)$/g.test(ext);\n\
    \        const is_name = /^[a-zA-Z]/g.test(split_name[0]);\n        if (split_name.length\
    \ === 2 && is_ext && is_name) {\n            result = \"Yes\";\n        }\n  \
    \  }\n    return result;\n}\n", "    let patt = /^[a-zA-Z]\\w{1,3}\\.\\w{3}$/;\n\
    \    if (patt.test(file_name))\n        return \"Yes\";\n    else\n        return\
    \ \"No\";\n}\n", "    // Your code is here\n    let pattern = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,})\\\
    .txt|exe|dll$/;\n    if (pattern.test(file_name)) {\n        return \"Yes\";\n\
    \    }\n    return \"No\";\n}\n", "    let result = 'No';\n    if (file_name.match(/^[a-zA-Z]\\\
    w{0,3}\\.txt$|^[a-zA-Z]\\w{0,3}\\.exe$|^[a-zA-Z]\\w{0,3}\\.dll$/)) {\n       \
    \ result = 'Yes';\n    }\n    return result;\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    const\
    \ file_name_array = file_name.split('.');\n    const extension = file_name_array[1];\n\
    \    const name = file_name_array[0];\n    const regex = /[a-zA-Z]{1,}/;\n   \
    \ let valid = regex.test(name);\n    let digits_amount = 0;\n    if (valid) {\n\
    \        digits_amount = name.split('').filter(char => char >= '0' && char <=\
    \ '9').length;\n        valid = digits_amount <= 3;\n    }\n    if (valid) {\n\
    \        valid = extension === 'txt' || extension === 'exe' || extension === 'dll';\n\
    \    }\n    return valid ? 'Yes' : 'No';\n}\nconsole.log(file_name_check(\"example.txt\"\
    ));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    let valid_string:\
    \ string[] = ['txt', 'exe', 'dll'];\n    let dot_count: number = 0;\n    let digit_count:\
    \ number = 0;\n    for (let i: number = 0; i < file_name.length; i++) {\n    \
    \    if (file_name[i] === '.') {\n            dot_count++;\n        }\n      \
    \  if (file_name[i] > '0' && file_name[i] < '9') {\n            digit_count++;\n\
    \        }\n    }\n    if (file_name[0] < 'a' || file_name[0] > 'z') {\n     \
    \   return 'No';\n    }\n    if (valid_string.indexOf(file_name.substring(file_name.indexOf('.')\
    \ + 1)) === -1) {\n        return 'No';\n    }\n    if (digit_count > 3 || dot_count\
    \ > 1) {\n        return 'No';\n    }\n    return 'Yes';\n}", "    return 'todo';\n\
    }\n", "    if (file_name.match(/\\d{4,}/)) {\n        return \"No\";\n    } else\
    \ if (file_name.match(/[^a-zA-Z]{2,}/)) {\n        return \"No\";\n    } else\
    \ if (file_name.match(/[^\\.][\\.][^\\.]+/)) {\n        return \"No\";\n    }\
    \ else if (file_name.match(/[\\.]/g).length > 1) {\n        return \"No\";\n \
    \   } else if (file_name.match(/[a-zA-Z]+[\\.](txt|exe|dll)/)) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n", "    const CHARS_DIGITS\
    \ = \"0123456789\";\n    const CHARS_LATIN = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    const SUBSTRING_AFTER_DOT = [\"txt\", \"exe\", \"dll\"];\n    let number_of_digits:\
    \ number = 0;\n    let number_of_dots: number = 0;\n    let has_latin_char_before_dot:\
    \ boolean = false;\n    let has_latin_char_after_dot: boolean = false;\n    let\
    \ first_dot_index: number = 0;\n    let substring_after_dot: string = \"\";\n\
    \    let result: string = \"No\";\n\n    for (let char of file_name) {\n     \
    \   if (CHARS_DIGITS.includes(char)) {\n            number_of_digits++;\n    \
    \    } else if (char === \".\") {\n            number_of_dots++;\n           \
    \ first_dot_index = file_name.indexOf(char);\n        } else if (CHARS_LATIN.includes(char))\
    \ {\n            if (file_name.indexOf(char) < first_dot_index) {\n          \
    \      has_latin_char_before_dot = true;\n            } else {\n             \
    \   has_latin_char_after_dot = true;\n            }\n        }\n    }\n\n    substring_after_dot\
    \ = file_name.substring(first_dot_index + 1);\n\n    if (number_of_digits <= 3\
    \ && number_of_dots === 1 && has_latin_char_before_dot === true &&\n        has_latin_char_after_dot\
    \ === true && SUBSTRING_AFTER_DOT.includes(substring_after_dot)) {\n        result\
    \ = \"Yes\";\n    }\n\n    return result;\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));", "    // TODO:\
    \ implementation\n    return 'No';\n}\n", "    const fname = /\\w+\\.[a-z]{3}/;\n\
    \    return fname.test(file_name) ? \"Yes\" : \"No\";\n}\nconsole.log(file_name_check(\"\
    example.txt\")); // Yes\nconsole.log(file_name_check(\"1example.dll\")); // No\n\
    console.log(file_name_check(\"example.exe\")); // Yes\nconsole.log(file_name_check(\"\
    ddd1.txt\")); // No\nconsole.log(file_name_check(\"dd.txt\")); // Yes\nconsole.log(file_name_check(\"\
    ddd.txt\")); // No\nconsole.log(file_name_check(\"1ddd.txt\")); // No\nconsole.log(file_name_check(\"\
    a.dll\")); // Yes\nconsole.log(file_name_check(\"aaa.ddl\")); // No\nconsole.log(file_name_check(\"\
    aaaa.txt\")); // Yes\nconsole.log(file_name_check(\"aaaa.t\")); // No\nconsole.log(file_name_check(\"\
    123.txt\")); // No\nconsole.log(file_name_check(\"1.txt\")); // No\nconsole.log(file_name_check(\"\
    1.d\")); // No\nconsole.log(file_name_check(\"1.d2\")); // No\nconsole.log(file_name_check(\"\
    12.txt\")); // No\nconsole.log(file_name_check(\"x.txt\")); // Yes\nconsole.log(file_name_check(\"\
    xx.txt\")); // Yes\nconsole.log(file_name_check(\"xx.exe\")); // Yes\nconsole.log(file_name_check(\"\
    xxxx.txt\")); // Yes\nconsole.log(file_name_check(\"xxxx.t\")); // No\nconsole.log(file_name_check(\"\
    1xxxx.txt\")); // No\nconsole.log(file_name_check(\"x.d\")); // No\nconsole.log(file_name_check(\"\
    xx.d\")); // No\nconsole.log(file_name_check(\"xx1.txt\")); // No\nconsole.log(file_name_",
  "    let dotPos = file_name.indexOf('.');\n    let subBeforeDot = file_name.substring(0,\
    \ dotPos);\n    let subAfterDot = file_name.substring(dotPos + 1);\n    let number\
    \ = file_name.replace(/[^0-9]/g, '');\n    let re = /[a-zA-Z][\\w]+/;\n    let\
    \ goodExtentions = ['txt', 'exe', 'dll'];\n    if (number.length <= 3 && file_name.indexOf('.')\
    \ != -1 && re.test(subBeforeDot) && goodExtentions.includes(subAfterDot)) {\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n", "  if (!file_name.match(/^[a-zA-Z]{1}[\\\
    w+]\\.(txt|exe|dll)$/)) return \"No\";\n  return \"Yes\";\n}\n\nexport { file_name_check\
    \ };", "    const regex = /^[a-zA-Z]+\\d{0,3}\\.txt|exe|dll$/;\n    return regex.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    const split_name = file_name.split('.');\n \
    \   const pre_dot = split_name[0];\n    const post_dot = split_name[1];\n    if\
    \ (split_name.length !== 2) {\n        return 'No';\n    }\n    if (!post_dot\
    \ || !['txt', 'exe', 'dll'].includes(post_dot)) {\n        return 'No';\n    }\n\
    \    if (!pre_dot.match(/^[a-z]+$/i)) {\n        return 'No';\n    }\n    if (pre_dot.match(/\\\
    d/g) && pre_dot.match(/\\d/g).length > 3) {\n        return 'No';\n    }\n   \
    \ return 'Yes';\n}", "\tlet file_name_split = file_name.split(\".\");\n\tlet file_name_nodigit\
    \ = file_name.replace(/[0-9]/g, \"\");\n\tlet indexOfDot = file_name_nodigit.indexOf(\"\
    .\");\n\tif (file_name_split.length > 2 || file_name_split.length == 1 ||\n\t\t\
    file_name_split[0].match(/\\d/g) != null ||\n\t\tfile_name_split[0][0].match(/[a-zA-Z]/g)\
    \ == null ||\n\t\tfile_name_split[0].length == 0 ||\n\t\tfile_name_split[1] !=\
    \ \"txt\" && file_name_split[1] != \"exe\" && file_name_split[1] != \"dll\" ||\n\
    \t\tfile_name_split[0].length - indexOfDot > 3) {\n\t\treturn \"No\";\n\t}\n\t\
    return \"Yes\";\n}\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\n\n", "    // write your code here...\n    let str = file_name;\n\
    \    let dot_count = 0;\n    let num_count = 0;\n    let sub_before_dot = \"\"\
    ;\n    let sub_after_dot = \"\";\n    let flag = false;\n    let latin_pattern\
    \ = /[a-zA-Z]/;\n    let num_pattern = /[0-9]/;\n    let txt_pattern = /[.]txt/;\n\
    \    let exe_pattern = /[.]exe/;\n    let dll_pattern = /[.]dll/;\n    for (let\
    \ i = 0; i < str.length; i++) {\n        if (str[i] == \".\") {\n            dot_count++;\n\
    \            if (dot_count == 1) {\n                sub_before_dot = str.substring(0,\
    \ i);\n                sub_after_dot = str.substring(i + 1, str.length);\n   \
    \         }\n        }\n        if (num_pattern.test(str[i])) {\n            num_count++;\n\
    \        }\n    }\n    if (dot_count == 1 && num_count <= 3 && latin_pattern.test(sub_before_dot[0])\
    \ && (txt_pattern.test(sub_after_dot) || exe_pattern.test(sub_after_dot) || dll_pattern.test(sub_after_dot)))\
    \ {\n        flag = true;\n    }\n    if (flag) {\n        return \"Yes\";\n \
    \   }\n    else {\n        return \"No\";\n    }\n}", "  // check if the file\
    \ name is empty\n  if (file_name === '') {\n    return 'No';\n  }\n\n  // check\
    \ if dot is present\n  if (file_name.indexOf('.') < 0) {\n    return 'No';\n \
    \ }\n\n  // check if dot is present more than once\n  if (file_name.indexOf('.')\
    \ !== file_name.lastIndexOf('.')) {\n    return 'No';\n  }\n\n  // substring before\
    \ dot\n  const subStr1 = file_name.substring(0, file_name.indexOf('.'));\n\n \
    \ // substring after dot\n  const subStr2 = file_name.substring(file_name.indexOf('.')\
    \ + 1);\n\n  // check if substring contains letters\n  if (!subStr1.match(/[a-z]/i))\
    \ {\n    return 'No';\n  }\n\n  // check if substring contains more than 3 digits\n\
    \  if (subStr1.match(/[0-9]/g).length > 3) {\n    return 'No';\n  }\n\n  // check\
    \ if substring is one of the given substrings\n  if (subStr2 !== 'txt' && subStr2\
    \ !== 'exe' && subStr2 !== 'dll') {\n    return 'No';\n  }\n\n  return 'Yes';\n\
    }", "    let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n\
    \    let file_name_split = file_name.split('.');\n    let extenstion = file_name_split[1];\n\
    \    let substring = file_name_split[0];\n    let three_digits = 0;\n    let one_dot\
    \ = false;\n    let substring_letter = false;\n    let substring_empty = true;\n\
    \    let valid_extension = false;\n    for (let i = 0; i < file_name.length; i++)\
    \ {\n        if (file_name[i] === '.') {\n            one_dot = true;\n      \
    \  }\n        if (alphabet.includes(file_name[i])) {\n            substring_letter\
    \ = true;\n        }\n        if (file_name[i] !== '.') {\n            substring_empty\
    \ = false;\n        }\n        if (!isNaN(Number(file_name[i]))) {\n         \
    \   three_digits++;\n        }\n    }\n    if (extenstion === 'txt' || extenstion\
    \ === 'exe' || extenstion === 'dll') {\n        valid_extension = true;\n    }\n\
    \    if (three_digits <= 3 && one_dot && substring_letter && !substring_empty\
    \ && valid_extension) {\n        return 'Yes';\n    }\n    return 'No';\n}\n",
  "    // Turn string into array of characters.\n    let file_name_arr = file_name.split('');\n\
    \    // '.' is at the index of the extension.\n    let dot_index = file_name_arr.indexOf('.');\n\
    \    // Check to see if there is a '.'.\n    if (dot_index === -1) {\n       \
    \ return 'No';\n    }\n    // Make substrings from the file_name (before and after\
    \ the '.').\n    let before_dot = file_name_arr.slice(0, dot_index);\n    let\
    \ after_dot = file_name_arr.slice(dot_index + 1);\n    // Check if the name is\
    \ empty.\n    if (before_dot.length === 0) {\n        return 'No';\n    }\n  \
    \  // Check if the extension is valid.\n    if (after_dot.length < 3 || after_dot.length\
    \ > 3) {\n        return 'No';\n    }\n    // Check the first letter of the file_name.\n\
    \    if (before_dot[0].match(/[a-z]/i) === null) {\n        return 'No';\n   \
    \ }\n    // Check if there are more than 3 digits in the file_name.\n    let count\
    \ = 0;\n    for (let i = 0; i < before_dot.length; i++) {\n        if (before_dot[i].match(/[0-9]/i)\
    \ !== null) {\n            count++;\n        }\n    }\n    if (count > 3) {\n\
    \        return 'No';\n    }\n    // Check if there is only one '.'.\n    if (file_name_arr.indexOf('.',\
    \ dot_index + 1) !== -1) {\n        return 'No';\n    }\n    return 'Yes';\n}\n\
    \nconsole.log(file_name_check(\"example.txt\")); // \"Yes\"\nconsole.log(file_name_check(\"\
    1example.dll\")); // \"No\"\nconsole.log(file_name_check(\"car.TXT\")); // \"\
    Yes\"\nconsole.log(file_name_check(\"car.txD\")); // \"No\"\nconsole", "    let\
    \ digits_count = 0;\n    let dot_count = 0;\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    digits_count++;\n        }\n        if (file_name[i] == '.') {\n        \
    \    dot_count++;\n        }\n    }\n    let idx = file_name.indexOf('.');\n \
    \   let after_dot = file_name.substring(idx + 1);\n    let before_dot = file_name.substring(0,\
    \ idx);\n    if (digits_count > 3 || dot_count != 1 || before_dot.length == 0\
    \ || before_dot[0] < 'A' || (before_dot[0] > 'Z' && before_dot[0] < 'a') || before_dot[0]\
    \ > 'z' || after_dot != 'txt' && after_dot != 'exe' && after_dot != 'dll') {\n\
    \        return 'No';\n    }\n    return 'Yes';\n}\n", "\tconst regex = /^[a-zA-Z]{1}[a-zA-Z0-9]{0,}[\\\
    .]{1}(txt|exe|dll)$/;\n\treturn regex.test(file_name) ? \"Yes\" : \"No\";\n}\n\
    \nexport { file_name_check };", "    const reg = /^[a-zA-Z]{1}[\\d\\w]{1,}\\.(txt|exe|dll)$/;\n\
    \    if (reg.test(file_name)) {\n        return \"Yes\";\n    } else {\n     \
    \   return \"No\";\n    }\n}\n", "    const regex_format: RegExp = /^[a-zA-Z]+\\\
    d*\\.{1}(txt|exe|dll)$/;\n    return regex_format.test(file_name) ? \"Yes\" :\
    \ \"No\";\n}\nconsole.log(file_name_check(\"example.txt\")); // \"Yes\"\nconsole.log(file_name_check(\"\
    1example.dll\")); // \"No\"\n", "    let arr = file_name.split(\".\")\n    //\
    \ Make sure the array has exactly two elements\n    if (arr.length != 2) {\n \
    \       return \"No\"\n    }\n    // Make sure that the first element starts with\
    \ a letter and contains no more than three digits\n    if (!(/^[a-zA-Z]/.test(arr[0])\
    \ && /^[a-zA-Z0-9]{1,3}$/.test(arr[0]))) {\n        return \"No\"\n    }\n   \
    \ // Make sure that the second element is one of the valid suffixes\n    if (!(arr[1]\
    \ == \"txt\" || arr[1] == \"exe\" || arr[1] == \"dll\")) {\n        return \"\
    No\"\n    }\n    return \"Yes\"\n}\n\n", "  let count = 0;\n  let is_digit = false;\n\
    \  let count_dot = 0;\n  let is_empty = false;\n  let is_in_alphabet = false;\n\
    \  let contains_dot = false;\n  let dot_position = 0;\n  let count_after_dot =\
    \ 0;\n  let txt_dll_exe = false;\n  for (let i = 0; i < file_name.length; i++)\
    \ {\n    if (file_name[i] >= '0' && file_name[i] <= '9') {\n      is_digit = true;\n\
    \      count++;\n    }\n    if (file_name[i] === '.') {\n      count_dot++;\n\
    \      dot_position = i;\n      contains_dot = true;\n    }\n    if (count_dot\
    \ > 1) {\n      contains_dot = false;\n    }\n    if (count > 3) {\n      is_digit\
    \ = false;\n    }\n    if (contains_dot) {\n      let x = file_name.substring(0,\
    \ dot_position);\n      if (x.length === 0) {\n        is_empty = true;\n    \
    \  }\n      if (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >=\
    \ 'A' && file_name[0] <= 'Z') {\n        is_in_alphabet = true;\n      }\n   \
    \   let y = file_name.substring(dot_position + 1, file_name.length);\n      if\
    \ (y === 'txt' || y === 'exe' || y === 'dll') {\n        txt_dll_exe = true;\n\
    \      }\n    }\n  }\n  if (is_digit && is_in_alphabet && txt_dll_exe && !is_empty\
    \ && contains_dot) {\n    return 'Yes';\n  }\n  return 'No';\n}\nconsole.log(file_name_check('example.txt'));\n\
    console.log(file_name_check('1example.dll'));\nconsole.log(file_name_check('1example.txt'));\n\
    console.log(", "    return '';\n}\n", "    const file_format = ['txt', 'exe',\
    \ 'dll'];\n    const is_valid_file_name = /^[a-zA-Z]+\\d{0,3}\\.\\w+$/;\n    if\
    \ (is_valid_file_name.test(file_name)) {\n        const [file_name_with_extension,\
    \ extension] = file_name.split('.');\n        if (file_format.includes(extension))\
    \ {\n            return 'Yes';\n        }\n    }\n    return 'No';\n}", "    return\
    \ /^[a-zA-Z]+[0-9]{0,3}\\.(txt|exe|dll)$/.test(file_name) ? \"Yes\" : \"No\";\n\
    }\n", "  if (file_name.match(/[0-9]{4,}/)) return \"No\";\n  const components\
    \ = file_name.split(\".\");\n  if (components.length !== 2) return \"No\";\n \
    \ if (!components[0].match(/^[a-zA-Z]/)) return \"No\";\n  if (![\"txt\", \"exe\"\
    , \"dll\"].includes(components[1])) return \"No\";\n  return \"Yes\";\n}\n", " \
    \   const digit_counter = file_name.split('').reduce((a, v) => {\n        return\
    \ (v.charCodeAt(0) >= 48 && v.charCodeAt(0) <= 57) ? a + 1 : a;\n    }, 0);\n\
    \    if (digit_counter > 3) {\n        return 'No';\n    }\n    const file_part\
    \ = file_name.split('.');\n    if (file_part.length !== 2) {\n        return 'No';\n\
    \    }\n    if (file_part[0].length === 0 || !(file_part[0].charCodeAt(0) >= 65\
    \ && file_part[0].charCodeAt(0) <= 90) || !(file_part[0].charCodeAt(0) >= 97 &&\
    \ file_part[0].charCodeAt(0) <= 122)) {\n        return 'No';\n    }\n    if (file_part[1]\
    \ !== 'txt' && file_part[1] !== 'exe' && file_part[1] !== 'dll') {\n        return\
    \ 'No';\n    }\n    return 'Yes';\n}\n", "    let count_digits = 0;\n    let file_name_array\
    \ = file_name.split(\".\");\n    let dot_count = file_name.split(\".\").length\
    \ - 1;\n    let extension = file_name_array[file_name_array.length - 1];\n   \
    \ if (dot_count !== 1) {\n        return \"No\";\n    }\n    else {\n        let\
    \ first_part = file_name_array[0];\n        for (let i = 0; i < first_part.length;\
    \ i++) {\n            if (first_part[i] >= \"0\" && first_part[i] <= \"9\") {\n\
    \                count_digits++;\n            }\n        }\n        if (count_digits\
    \ > 3) {\n            return \"No\";\n        }\n        else {\n            if\
    \ (first_part[0] >= \"a\" && first_part[0] <= \"z\" || first_part[0] >= \"A\"\
    \ && first_part[0] <= \"Z\") {\n                if (extension === \"txt\" || extension\
    \ === \"exe\" || extension === \"dll\") {\n                    return \"Yes\"\
    ;\n                }\n                else {\n                    return \"No\"\
    ;\n                }\n            }\n            else {\n                return\
    \ \"No\";\n            }\n        }\n    }\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));", "    let r:\
    \ RegExp = /^[a-zA-Z][a-zA-Z0-9]{0,3}(\\.[a-zA-Z]{3})$/;\n    return r.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    if (file_name.match(/\\d{4,}/)) {\n        return\
    \ \"No\";\n    }\n    if (file_name.match(/^[a-zA-Z]/) && file_name.match(/\\\
    .\\w{3}$/)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}", "    const\
    \ file_name_array = file_name.split('.');\n    if (file_name_array.length > 2)\
    \ return 'No';\n    const num_of_digits = file_name_array[0].split('').filter(x\
    \ => isDigit(x)).length;\n    if (num_of_digits > 3) return 'No';\n    if (!file_name_array[0].match(/^[a-zA-Z]+$/))\
    \ return 'No';\n    if (file_name_array[1] === 'txt' || file_name_array[1] ===\
    \ 'exe' || file_name_array[1] === 'dll') return 'Yes';\n    return 'No';\n}\n\
    console.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\nconsole.log(file_name_check(\"example1.txt\"));\nconsole.log(file_name_check(\"\
    example.ex\"));\nconsole.log(file_name_check(\"e.txt\"));\n", "    return file_name.match(/^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$/) ? 'Yes' : 'No';\n}\n", "  const all_conditions = [\n    has_no_more_than_three_digits(file_name),\n\
    \    has_one_dot(file_name),\n    starts_with_letter(file_name),\n    has_proper_extension(file_name)\n\
    \  ];\n  const valid = all_conditions.every(condition => condition);\n  return\
    \ valid ? \"Yes\" : \"No\";\n}\n", "    let errorCode: number = 0;\n    if (file_name.indexOf('.')\
    \ != file_name.lastIndexOf('.')) {\n        errorCode += 1;\n    }\n    if (file_name.split('.')[0].length\
    \ == 0) {\n        errorCode += 1;\n    }\n    if (!file_name.split('.')[0].match(/^[a-zA-Z]+$/))\
    \ {\n        errorCode += 1;\n    }\n    if (file_name.replace(/[^0-9]/g, '').length\
    \ > 3) {\n        errorCode += 1;\n    }\n    if (!file_name.split('.')[1].match(/^(txt|exe|dll)$/))\
    \ {\n        errorCode += 1;\n    }\n    if (errorCode > 0) {\n        return\
    \ 'No';\n    } else {\n        return 'Yes';\n    }\n}", "  const re_file_name:\
    \ RegExp = /(^[a-zA-Z]\\w{0,8}\\.(txt|exe|dll)$)/g;\n  const res: RegExpExecArray\
    \ | null = re_file_name.exec(file_name);\n  if (res) {\n    return \"Yes\";\n\
    \  } else {\n    return \"No\";\n  }\n}\n\ndescribe(\"file_name_check\", () =>\
    \ {\n  it(\"should return 'Yes' when the file name is valid\", () => {\n    assert.equal(file_name_check(\"\
    example.txt\"), \"Yes\");\n    assert.equal(file_name_check(\"example.exe\"),\
    \ \"Yes\");\n    assert.equal(file_name_check(\"example.dll\"), \"Yes\");\n  \
    \  assert.equal(file_name_check(\"example1.txt\"), \"Yes\");\n    assert.equal(file_name_check(\"\
    example1.exe\"), \"Yes\");\n    assert.equal(file_name_check(\"example1.dll\"\
    ), \"Yes\");\n    assert.equal(file_name_check(\"example12.txt\"), \"Yes\");\n\
    \    assert.equal(file_name_check(\"example12.exe\"), \"Yes\");\n    assert.equal(file_name_check(\"\
    example12.dll\"), \"Yes\");\n    assert.equal(file_name_check(\"example123.txt\"\
    ), \"Yes\");\n    assert.equal(file_name_check(\"example123.exe\"), \"Yes\");\n\
    \    assert.equal(file_name_check(\"example123.dll\"), \"Yes\");\n    assert.equal(file_name_check(\"\
    e.txt\"), \"Yes\");\n    assert.equal(file_name_check(\"e.exe\"), \"Yes\");\n\
    \    assert.equal(file_name_check(\"e.dll\"), \"Yes\");\n    assert.equal(file_name_check(\"\
    e1.txt\"), \"Yes\");\n    assert.equal(file_name_check(\"e1.exe\"), \"Yes\");\n\
    \    assert.equal(file_name_check(\"e1.dll\"), \"Yes\");\n    assert.equal(file_name_check(\"\
    e12.txt\"), \"Yes\");\n    assert.equal(file_name_check", "    let regEx: RegExp\
    \ = /^[a-zA-Z]+\\d{0,3}.[txt|exe|dll]$/g;\n    let result: string = file_name.match(regEx)\
    \ ? \"Yes\" : \"No\";\n    return result;\n}\n", "  if (file_name.split(\"\").filter(digit\
    \ => \"0\" <= digit && digit <= \"9\").length > 3) {\n    return \"No\";\n  }\n\
    \  if (file_name.split(\".\").length != 2) {\n    return \"No\";\n  }\n  const\
    \ file_name_without_extension = file_name.split(\".\")[0];\n  if (file_name_without_extension.length\
    \ === 0) {\n    return \"No\";\n  }\n  if (!(/[a-zA-Z]/.test(file_name_without_extension[0])))\
    \ {\n    return \"No\";\n  }\n  const extension = file_name.split(\".\")[1];\n\
    \  if (!(extension === \"txt\" || extension === \"exe\" || extension === \"dll\"\
    )) {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n", "    let dot_idx = file_name.indexOf('.');\n\
    \    let dot_len = 1;\n    let ext_len = 3;\n    let file_ext = file_name.substr(dot_idx\
    \ + dot_len, ext_len);\n    let prefix = file_name.substr(0, dot_idx);\n    let\
    \ digits = /\\d+/g;\n    let x = 0;\n    let digit_count = 0;\n    let digits_limit\
    \ = 3;\n    if (dot_idx === -1) {\n        return \"No\";\n    }\n    for (let\
    \ i = 0; i < file_name.length; i++) {\n        x = file_name.substr(i, 1);\n \
    \       if (digits.test(x)) {\n            digit_count++;\n        }\n    }\n\
    \    if (digit_count > digits_limit) {\n        return \"No\";\n    }\n    if\
    \ (!/^[a-zA-Z]/.test(prefix)) {\n        return \"No\";\n    }\n    if (['txt',\
    \ 'exe', 'dll'].indexOf(file_ext) === -1) {\n        return \"No\";\n    }\n \
    \   return \"Yes\";\n}\n", "    let count: number = 0;\n    let dot_count: number\
    \ = 0;\n    let dot_pos: number = 0;\n    let dot_flag: boolean = false;\n   \
    \ let after_dot: string = \"\";\n    let before_dot: string = \"\";\n    for (let\
    \ i = 0; i < file_name.length; i++) {\n        let char: string = file_name.charAt(i);\n\
    \        if (isNaN(parseInt(char))) {\n            if (char == \".\") {\n    \
    \            dot_count++;\n                dot_pos = i;\n                dot_flag\
    \ = true;\n            }\n            else if (isNaN(parseInt(char)) && !dot_flag)\
    \ {\n                before_dot += char;\n            }\n            else if (isNaN(parseInt(char))\
    \ && dot_flag) {\n                after_dot += char;\n            }\n        }\n\
    \        else {\n            count++;\n        }\n    }\n    if (count > 3 ||\
    \ after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\" || dot_count\
    \ != 1 || before_dot == \"\") {\n        return \"No\";\n    }\n    else {\n \
    \       return \"Yes\";\n    }\n}\nconsole.log(file_name_check(\"example.txt\"\
    ));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    // YOUR CODE GOES\
    \ HERE\n    return \"Yes\";\n}\n", "    let match: RegExpMatchArray | null = file_name.match(/[a-zA-Z]\\\
    w*\\.(txt|exe|dll)/);\n    if (match === null) {\n        return \"No\";\n   \
    \ }\n    return \"Yes\";\n}\n", "    let counter = 0;\n    let result: string;\n\
    \    let temp_bool = file_name.split(\"\");\n    for (let i = 0; i < temp_bool.length;\
    \ i++) {\n        if (temp_bool[i] === \".\") {\n            counter++;\n    \
    \    }\n    }\n    if (counter === 1) {\n        if (file_name.slice(0, file_name.indexOf(\"\
    .\")) === \"\") {\n            result = \"No\";\n        } else {\n          \
    \  result = \"Yes\";\n        }\n    } else {\n        result = \"No\";\n    }\n\
    \    return result;\n}\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\nconsole.log(file_name_check(\"0example.txt\"));\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"a.txt\"));\nconsole.log(file_name_check(\"\
    example.txte\"));\nconsole.log(file_name_check(\"example.doc\"));\nconsole.log(file_name_check(\"\
    \"));\nconsole.log(file_name_check(\"example.\"));\nconsole.log(file_name_check(\"\
    ..\"));\nconsole.log(file_name_check(\"example.dll\"));\nconsole.log(file_name_check(\"\
    example.exe\"));\n\nexport { file_name_check };", "    let re_file_name: RegExp\
    \ = /^([a-zA-Z]+)([0-9]{1,3})*(\\.)([txt]|[exe]|[dll])$/\n    let result: boolean\
    \ = re_file_name.test(file_name)\n    if (result) {\n        return \"Yes\"\n\
    \    } else {\n        return \"No\"\n    }\n}\n", "    if (!file_name.match(/^[a-zA-Z][a-zA-Z0-9]*\\\
    .txt$|^[a-zA-Z][a-zA-Z0-9]*\\.exe$|^[a-zA-Z][a-zA-Z0-9]*\\.dll$/)) {\n       \
    \ return \"No\";\n    }\n    return \"Yes\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));", "    const\
    \ parts = file_name.split('.');\n    if (parts.length !== 2) {\n        return\
    \ 'No';\n    }\n    const ext = parts[1];\n    if (['txt', 'exe', 'dll'].indexOf(ext)\
    \ === -1) {\n        return 'No';\n    }\n    const num_digits = file_name.replace(/[^0-9]/g,\
    \ '').length;\n    if (num_digits > 3) {\n        return 'No';\n    }\n    const\
    \ prefix = parts[0];\n    if (prefix.length === 0 || prefix[0].match(/[a-zA-Z]/)\
    \ === null) {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "  const\
    \ res: string[] = file_name.split('.');\n  const str1: string = res[0];\n  const\
    \ str2: string = res[1];\n  const str1_num: number = str1.search(/[0-9]/g);\n\
    \  const str1_upper: number = str1.search(/[A-Z]/g);\n  const str1_lower: number\
    \ = str1.search(/[a-z]/g);\n  let str1_alpha: number = 0;\n  if (str1_upper >\
    \ -1) {\n    str1_alpha = str1_upper;\n  } else if (str1_lower > -1) {\n    str1_alpha\
    \ = str1_lower;\n  }\n  if (str1_num === -1) {\n    if (str1_alpha === 0) {\n\
    \      if (str2 === 'txt' || str2 === 'exe' || str2 === 'dll') {\n        return\
    \ 'Yes';\n      } else {\n        return 'No';\n      }\n    } else {\n      return\
    \ 'No';\n    }\n  } else {\n    return 'No';\n  }\n}\n", "  return /^[a-zA-Z]+([0-9]{0,3})\\\
    .(txt|exe|dll)$/.test(file_name) ? \"Yes\" : \"No\";\n}\n", "    const containsThreeDigits\
    \ = /(\\d{3})/;\n    const containsOneDot = /^[^.]*\\.[^.]*$/;\n    const isAllowedExt\
    \ = /(\\.txt|\\.exe|\\.dll)$/;\n    const isLatinAlphabet = /^[a-zA-Z]+/;\n  \
    \  if (containsThreeDigits.test(file_name)) {\n        return \"No\";\n    }\n\
    \    if (!containsOneDot.test(file_name)) {\n        return \"No\";\n    }\n \
    \   if (!isAllowedExt.test(file_name)) {\n        return \"No\";\n    }\n    if\
    \ (!isLatinAlphabet.test(file_name.split(\".\")[0])) {\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "    let file_name_pattern = /^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$/;\n    return file_name_pattern.test(file_name) ? \"Yes\" : \"\
    No\";\n}\n", "\tconst regex = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/g;\n\
    \tif (regex.test(file_name)) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"\
    No\";\n\t}\n}\n", "  let file_name_pattern = /^[a-zA-Z]\\w{0,2}\\.[txt|exe|dll]$/;\n\
    \  return file_name_pattern.test(file_name) ? \"Yes\" : \"No\";\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    let\
    \ regex = /^([a-zA-Z][\\da-zA-Z]{0,2}(\\.)(txt|exe|dll))$/g;\n    return regex.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "  let dot_index = file_name.indexOf('.');\n  let\
    \ after_dot = file_name.substring(dot_index + 1, file_name.length);\n  let before_dot\
    \ = file_name.substring(0, dot_index);\n  let count = 0;\n  for (let i = 0; i\
    \ < before_dot.length; i++) {\n    if (before_dot[i] >= '0' && before_dot[i] <=\
    \ '9') {\n      count++;\n    }\n  }\n  let alphapet = before_dot[0] >= 'a' &&\
    \ before_dot[0] <= 'z' || before_dot[0] >= 'A' && before_dot[0] <= 'Z';\n  let\
    \ after_dot_array = ['txt', 'exe', 'dll'];\n  let index = after_dot_array.indexOf(after_dot);\n\
    \  let result = count <= 3 && dot_index != -1 && before_dot.length > 0 && alphapet\
    \ && index != -1;\n  return result ? 'Yes' : 'No';\n}", "  let dot_pos = file_name.indexOf('.');\n\
    \  let file_extension = file_name.substring(dot_pos + 1);\n  if ((dot_pos == -1)\
    \ || (file_extension.length == 0) || (file_extension.length > 3)) {\n    return\
    \ \"No\";\n  }\n  let count_digits = file_name.match(/[0-9]/g);\n  if (count_digits\
    \ == null) {\n    count_digits = \"\";\n  }\n  if (count_digits.length > 3) {\n\
    \    return \"No\";\n  }\n  let file_name_without_extension = file_name.substring(0,\
    \ dot_pos);\n  if ((file_name_without_extension.length == 0) || (!(file_name_without_extension.charAt(0).match(/[a-zA-Z]/))))\
    \ {\n    return \"No\";\n  }\n  let ok_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n  if (ok_extensions.indexOf(file_extension) == -1) {\n    return \"No\";\n\
    \  }\n  return \"Yes\";\n}\n", "    // Write your code here...\n    let pattern\
    \ = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(exe|txt|dll)$/;\n    return pattern.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    let l = file_name.length;\n    let check_digit_count\
    \ = 0;\n    let dot_index = -1;\n    let valid_formats = [\"txt\", \"exe\", \"\
    dll\"];\n    let valid_letters = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let\
    \ i = 0; i < l; i++) {\n        if (file_name[i] == \".\") dot_index = i;\n  \
    \      if (file_name[i] >= \"0\" && file_name[i] <= \"9\") check_digit_count++;\n\
    \    }\n    if (check_digit_count > 3) return \"No\";\n    if (dot_index == -1)\
    \ return \"No\";\n    if (dot_index == 0) return \"No\";\n    if (valid_letters.indexOf(file_name[0].toLowerCase())\
    \ == -1) return \"No\";\n    let suffix = file_name.substring(dot_index + 1, l);\n\
    \    if (valid_formats.indexOf(suffix) == -1) return \"No\";\n    return \"Yes\"\
    ;\n}\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\n", "  let counter = 0;\n  let dot_index: number;\n  let extension:\
    \ string;\n  for (let i = 0; i < file_name.length; i++) {\n    if (file_name[i]\
    \ === \".\") {\n      dot_index = i;\n    }\n    if (file_name[i] === \".\") {\n\
    \      counter++;\n    }\n    if (file_name[i] >= \"0\" && file_name[i] <= \"\
    9\") {\n      counter++;\n    }\n  }\n  if (counter > 3) {\n    return \"No\"\
    ;\n  }\n  extension = file_name.slice(dot_index + 1);\n  if (\n    extension !==\
    \ \"txt\" &&\n    extension !== \"exe\" &&\n    extension !== \"dll\" &&\n   \
    \ counter !== 1\n  ) {\n    return \"No\";\n  }\n  if (file_name[0] < \"a\" ||\
    \ file_name[0] > \"z\") {\n    return \"No\";\n  }\n  return \"Yes\";\n}", " \
    \   let dot_pos = file_name.indexOf('.');\n    let ext = file_name.substring(dot_pos\
    \ + 1);\n    let name = file_name.substring(0, dot_pos);\n    let count = 0;\n\
    \    for (let i = 0; i < name.length; i++) {\n        if (name[i] >= '0' && name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count <= 3 && dot_pos\
    \ !== -1 && name.length >= 1 &&\n        (name[0] >= 'a' && name[0] <= 'z' ||\
    \ name[0] >= 'A' && name[0] <= 'Z') &&\n        (ext === 'txt' || ext === 'exe'\
    \ || ext === 'dll')) {\n        return 'Yes';\n    }\n    return 'No';\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    example.mp3\"));\n", "    let dot_idx = file_name.indexOf('.');\n    let extension\
    \ = file_name.substring(dot_idx + 1);\n    if (dot_idx <= 0 || dot_idx > 8 ||\
    \ extension != 'txt' && extension != 'exe' && extension != 'dll') {\n        return\
    \ 'No';\n    }\n    let digits_count = 0;\n    for (let i = 0; i < dot_idx; i++)\
    \ {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digits_count++;\n\
    \        }\n    }\n    if (digits_count > 3) {\n        return 'No';\n    }\n\
    \    return 'Yes';\n}\n", "    let valid_extension: string[] = ['txt', 'exe',\
    \ 'dll'];\n    let split_name: string[] = file_name.split('.');\n    let extension:\
    \ string = split_name[1];\n    if (valid_extension.indexOf(extension) === -1)\
    \ {\n        return 'No';\n    }\n    let file_prefix: string = split_name[0];\n\
    \    let digit_count: number = 0;\n    for (let i = 0; i < file_prefix.length;\
    \ i++) {\n        if (file_prefix[i] >= '0' && file_prefix[i] <= '9') {\n    \
    \        digit_count++;\n        }\n    }\n    if (digit_count > 3) {\n      \
    \  return 'No';\n    }\n    if (file_prefix[0] < 'a' || file_prefix[0] > 'z')\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "    const allowed_extensions\
    \ = ['txt', 'exe', 'dll'];\n    const file_name_split = file_name.split('.');\n\
    \    if (file_name_split.length != 2) {\n        return 'No';\n    }\n    const\
    \ name = file_name_split[0];\n    const extension = file_name_split[1];\n    if\
    \ (allowed_extensions.indexOf(extension) == -1) {\n        return 'No';\n    }\n\
    \    const digits_count = name.replace(/[^0-9]/g, '').length;\n    if (digits_count\
    \ > 3) {\n        return 'No';\n    }\n    if (!/^[a-zA-Z]+$/.test(name[0])) {\n\
    \        return 'No';\n    }\n    return 'Yes';\n}\n", "    // Let's split the\
    \ file name into an array of words separated by '.'\n    // let name_parts = file_name.split('.');\n\
    \    // console.log(\"File name splitted: \" + name_parts);\n    // TODO: If a\
    \ file name does not contains '.', return \"No\"\n    // TODO: If number of words\
    \ in the file name is not 2, return \"No\"\n    // TODO: If the extension is not\
    \ one of ['txt', 'exe', 'dll'], return \"No\"\n    // TODO: Check if the substring\
    \ before the dot is valid\n    // TODO: If none of the above condition satisfies,\
    \ return \"Yes\"\n    return \"No\";\n}\n", "    let result: string = \"No\";\n\
    \    if (file_name.match(/^[a-zA-Z][a-zA-Z0-9]*[.](txt|exe|dll)$/)) {\n      \
    \  result = \"Yes\";\n    }\n    return result;\n}\n", "    let reg1 = /[a-zA-Z][a-zA-Z0-9]*/;\n\
    \    let reg2 = /[0-9]{1,3}/;\n    let reg3 = /[.][a-zA-Z0-9]{3}/;\n    let filename_result\
    \ = reg1.exec(file_name);\n    let number_result = reg2.exec(file_name);\n   \
    \ let file_type_result = reg3.exec(file_name);\n    if (!filename_result) {\n\
    \        return \"No\";\n    }\n    if (number_result) {\n        if (number_result[0].length\
    \ > 3) {\n            return \"No\";\n        }\n    }\n    if (!file_type_result)\
    \ {\n        return \"No\";\n    }\n    if (file_type_result[0] != \".txt\" &&\
    \ file_type_result[0] != \".exe\" && file_type_result[0] != \".dll\") {\n    \
    \    return \"No\";\n    }\n    return \"Yes\";\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\nconsole.log(file_name_check(\"1example.dll\"));\n", "  let\
    \ file_ext: string = file_name.split('.')[1];\n  let file_name_only: string =\
    \ file_name.split('.')[0];\n  if (file_ext !== 'txt' && file_ext !== 'exe' &&\
    \ file_ext !== 'dll') {\n    return 'No';\n  }\n  if (file_name_only[0].match(/^[0-9]*$/))\
    \ {\n    return 'No';\n  }\n  if (file_name_only.match(/[0-9]/g)) {\n    if (file_name_only.match(/[0-9]/g).length\
    \ > 3) {\n      return 'No';\n    }\n  }\n  return 'Yes';\n}", "    let dot_index\
    \ = file_name.indexOf('.');\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    let valid_extensions = ['txt', 'exe', 'dll'];\n    if (dot_index\
    \ < 0 || file_name.split('.').length > 2) {\n        return 'No';\n    }\n   \
    \ if (valid_extensions.indexOf(extension) < 0) {\n        return 'No';\n    }\n\
    \    let digits_count = 0;\n    for (let i = 0; i < file_name.length; i++) {\n\
    \        if (file_name[i] === '.') {\n            continue;\n        }\n     \
    \   if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digits_count++;\n\
    \        }\n    }\n    if (digits_count > 3) {\n        return 'No';\n    }\n\
    \    return 'Yes';\n}\n", "\tconst dot = file_name.lastIndexOf('.');\n\tif (dot\
    \ === -1) return 'No';\n\tconst extension = file_name.substring(dot + 1);\n\t\
    if (['txt', 'exe', 'dll'].indexOf(extension) === -1) return 'No';\n\tconst prefix\
    \ = file_name.substring(0, dot);\n\tif (prefix.length === 0) return 'No';\n\t\
    const latin_char = prefix.match(/[a-zA-Z]/);\n\tif (latin_char === null) return\
    \ 'No';\n\tconst digits = prefix.match(/[0-9]/g);\n\tif (digits === null) return\
    \ 'Yes';\n\tif (digits.length > 3) return 'No';\n\treturn 'Yes';\n}", "    let\
    \ result = \"No\";\n    let regex1 = /^[a-zA-Z]{1}.*[.]{1}(txt|exe|dll)$/;\n \
    \   if (regex1.test(file_name)) {\n        let regex2 = /\\d{4}/;\n        if\
    \ (!regex2.test(file_name)) {\n            result = \"Yes\";\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));", "    const valid_extension = [\"txt\", \"exe\", \"dll\"];\n\
    \    const extension = file_name.split(\".\")[1];\n    const filename = file_name.split(\"\
    .\")[0];\n    const digits = filename.match(/\\d/g);\n    const first_letter =\
    \ filename.match(/^[a-zA-Z]/);\n    const period = file_name.match(/\\./g);\n\
    \    const has_three_digits = digits === null ? false : digits.length >= 3;\n\
    \    const has_one_period = period === null ? false : period.length === 1;\n \
    \   const has_valid_extension = valid_extension.indexOf(extension) >= 0;\n   \
    \ const has_first_letter = first_letter === null ? false : true;\n    if (has_one_period\
    \ && !has_three_digits && has_valid_extension && has_first_letter) {\n       \
    \ return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "    let\
    \ counter = 0;\n    let dot_counter = 0;\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (!isNaN(parseInt(file_name[i]))) {\n            counter++;\n\
    \        }\n        if (file_name[i] === '.') {\n            dot_counter++;\n\
    \        }\n    }\n    if (counter > 3 || dot_counter > 1) {\n        return 'No';\n\
    \    }\n    let is_valid = false;\n    const ext = ['txt', 'exe', 'dll'];\n  \
    \  const  file_name_split = file_name.split('.');\n    if (file_name_split[0].length\
    \ > 0) {\n        if (file_name_split[0].charCodeAt(0) > 64 && file_name_split[0].charCodeAt(0)\
    \ < 91 ||\n            file_name_split[0].charCodeAt(0) > 96 && file_name_split[0].charCodeAt(0)\
    \ < 123) {\n            for (let i = 0; i < ext.length; i++) {\n             \
    \   if (file_name_split[1] === ext[i]) {\n                    is_valid = true;\n\
    \                }\n            }\n        }\n    }\n    if (is_valid) {\n   \
    \     return 'Yes';\n    }\n    return 'No';\n}\n", "    let count = 0;\n    let\
    \ dot_index = 0;\n    let flag = false;\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n        if (file_name[i] == '.') {\n            dot_index\
    \ = i;\n        }\n        if ((file_name[i] >= 'a' && file_name[i] <= 'z') ||\
    \ (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n            flag = true;\n\
    \        }\n    }\n    let condition_1 = count <= 3;\n    let condition_2 = (file_name.substring(dot_index,\
    \ file_name.length) == 'txt') || (file_name.substring(dot_index, file_name.length)\
    \ == 'exe') || (file_name.substring(dot_index, file_name.length) == 'dll');\n\
    \    let condition_3 = (file_name.substring(0, dot_index) != '') && flag;\n  \
    \  let condition_4 = file_name.split('.').length == 2;\n    if (condition_1 &&\
    \ condition_2 && condition_3 && condition_4) {\n        return 'Yes';\n    }\n\
    \    return 'No';\n}\n", "    return (count_digits(file_name) > 3 || !file_name.includes('.')\
    \ || !check_first_letter(file_name)) ? 'No' : 'Yes';\n}\n", "  let dot_index =\
    \ file_name.indexOf('.');\n  let sub_str_before_dot = file_name.substring(0, dot_index);\n\
    \  let sub_str_after_dot = file_name.substring(dot_index + 1);\n  let num_count\
    \ = 0;\n  for (let i = 0; i < sub_str_before_dot.length; i++) {\n    if (sub_str_before_dot[i]\
    \ >= '0' && sub_str_before_dot[i] <= '9') {\n      num_count++;\n    }\n  }\n\
    \  if (num_count > 3) {\n    return 'No';\n  } else if (dot_index !== file_name.lastIndexOf('.'))\
    \ {\n    return 'No';\n  } else if (sub_str_before_dot === '' ||\n    (sub_str_before_dot[0]\
    \ < 'a' || sub_str_before_dot[0] > 'z') &&\n    (sub_str_before_dot[0] < 'A' ||\
    \ sub_str_before_dot[0] > 'Z')) {\n    return 'No';\n  } else if (sub_str_after_dot\
    \ !== 'txt' && sub_str_after_dot !== 'exe' && sub_str_after_dot !== 'dll') {\n\
    \    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n", "    // todo\n  \
    \  // let fileNumb: number = 0;\n    // let fileChar: number = 0;\n    // let\
    \ fileNameLast: string = \"\";\n    // for (let i = 0; i < file_name.length; i++)\
    \ {\n    //     if (file_name[i] === \".\") {\n    //         fileNameLast = file_name.slice(i\
    \ + 1);\n    //     }\n    //     if (file_name[i] >= \"0\" && file_name[i] <=\
    \ \"9\") {\n    //         fileNumb++;\n    //     }\n    //     if (file_name[i]\
    \ >= \"a\" && file_name[i] <= \"z\" || file_name[i] >= \"A\" && file_name[i] <=\
    \ \"Z\") {\n    //         fileChar++;\n    //     }\n    // }\n    // if (file_name.indexOf(\"\
    .\") === -1 || fileNumb > 3 || fileChar === 0 || fileNameLast !== \"txt\" && fileNameLast\
    \ !== \"exe\" && fileNameLast !== \"dll\") {\n    //     return \"No\";\n    //\
    \ }\n    // return \"Yes\";\n    let regex = /^[a-zA-Z][0-9]{0,3}\\.txt|exe|dll$/\n\
    \    if (regex.test(file_name)) {\n        return \"Yes\";\n    }\n    return\
    \ \"No\";\n}\n", "  const valid_extentions = ['txt', 'exe', 'dll'];\n  const name_parts\
    \ = file_name.split('.');\n  const valid_number_of_digits = /\\d/.test(file_name)\
    \ ? (file_name.match(/\\d/g) || []).length <= 3 : true;\n  return (valid_number_of_digits\
    \ && name_parts.length === 2 && /^[a-zA-Z]/.test(name_parts[0]) && valid_extentions.includes(name_parts[1]))\
    \ ? 'Yes' : 'No';\n}\n", "    const valid_extensions = [\"txt\", \"exe\", \"dll\"\
    ];\n    const digits = \"0123456789\";\n    let digit_counter = 0;\n    let dot_counter\
    \ = 0;\n    let extension = \"\";\n    let name = \"\";\n    for (let i = 0; i\
    \ < file_name.length; i++) {\n        if (digits.includes(file_name[i])) {\n \
    \           digit_counter++;\n        }\n        if (file_name[i] === \".\") {\n\
    \            dot_counter++;\n            extension = file_name.slice(i + 1);\n\
    \            name = file_name.slice(0, i);\n        }\n    }\n    if (digit_counter\
    \ > 3 || dot_counter !== 1 || extension === \"\" || name === \"\") {\n       \
    \ return \"No\";\n    }\n    if (name[0] === name[0].toUpperCase() || name[0]\
    \ === name[0].toLowerCase()) {\n        if (valid_extensions.includes(extension))\
    \ {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\n\n",
  "  return (\n    (file_name.match(/[0-9]/g) || []).length <= 3 &&\n    /^[a-zA-Z]+\\\
    .exe|dll|txt$/.test(file_name)\n  );\n}\nconsole.log(file_name_check(\"example.txt\"\
    ));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    let check1: boolean\
    \ = false;\n    let check2: boolean = false;\n    let check3: boolean = false;\n\
    \    let check4: boolean = false;\n    let check: boolean = false;\n    if (file_name.length\
    \ == 0) {\n        check = false;\n    }\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] === '.') {\n            check2 = true;\n  \
    \      }\n        if ((file_name[i] >= '0') && (file_name[i] <= '9')) {\n    \
    \        check1 = true;\n        }\n        if (((file_name[i] === 't') && (file_name[i\
    \ + 1] === 'x') && (file_name[i + 2] === 't')) || ((file_name[i] === 'e') && (file_name[i\
    \ + 1] === 'x') && (file_name[i + 2] === 'e')) || ((file_name[i] === 'd') && (file_name[i\
    \ + 1] === 'l') && (file_name[i + 2] === 'l'))) {\n            check4 = true;\n\
    \        }\n        if (((file_name[i] >= 'a') && (file_name[i] <= 'z')) || ((file_name[i]\
    \ >= 'A') && (file_name[i] <= 'Z'))) {\n            check3 = true;\n        }\n\
    \    }\n    if ((check1) && (check2) && (check3) && (check4)) {\n        check\
    \ = true;\n    }\n    if (check) {\n        return 'Yes';\n    }\n    else {\n\
    \        return 'No';\n    }\n}\n", "    return /^[a-zA-Z]\\w{1,3}\\.txt|exe|dll$/.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    const condition = !(file_name.length > 3)\n\
    \        && file_name.includes('.')\n        && file_name.split('.')[0].match(/^[a-zA-Z]/)\
    \ !== null\n        && (file_name.split('.')[1] === 'txt' || file_name.split('.')[1]\
    \ === 'exe' || file_name.split('.')[1] === 'dll');\n    return condition ? 'Yes'\
    \ : 'No';\n}\n", "    return /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "  const substring = file_name.substring(0, file_name.indexOf('.'));\n\
    \  const format = ['txt', 'exe', 'dll'];\n  const regExp = /^[a-z]*$/i;\n  let\
    \ result = 'No';\n  if (substring.match(regExp) !== null) {\n    result = 'Yes';\n\
    \  }\n  if (substring.length === 0) {\n    result = 'No';\n  }\n  if (substring.length\
    \ > 3) {\n    result = 'No';\n  }\n  if (format.indexOf(file_name.substring(file_name.indexOf('.')\
    \ + 1)) === -1) {\n    result = 'No';\n  }\n  return result;\n}\n\nconsole.log(file_name_check('example.txt'));\n\
    console.log(file_name_check('1example.dll'));\nconsole.log(file_name_check('1example.txt'));\n\
    console.log(file_name_check('example.aaa'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.dll'));\nconsole.log(file_name_check('example.txt'));\n\
    console.log(file_name_check('example.exe'));\nconsole.log(file_name_check('12345678.txt'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.ttt'));\n\
    console.log(file_name_check('exampl.txt'));\nconsole.log(file_name_check('1exampl.txt'));\n\
    console.log(file_name_check('exampl.txt'));\nconsole.log(file_name_check('example1.txt'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name", "    let valid_ending: Set<string> = new Set(['txt', 'exe',\
    \ 'dll']);\n    let match: RegExpMatchArray | null = file_name.match(/^([a-zA-Z]+)(\\\
    d*)(\\.txt|\\.exe|\\.dll)$/);\n    if (match === null) {\n        return \"No\"\
    ;\n    } else {\n        if (match[2].length > 3) {\n            return \"No\"\
    ;\n        } else {\n            return valid_ending.has(match[3].slice(1)) ?\
    \ \"Yes\" : \"No\";\n        }\n    }\n}", "    let one_dot = false;\n    let\
    \ num_digits = 0;\n    let substr_after_dot: string[] = [];\n    let condition1:\
    \ boolean = false;\n    let condition2: boolean = false;\n    let condition3:\
    \ boolean = false;\n    let condition4: boolean = false;\n    for (let i = 0;\
    \ i < file_name.length; i++) {\n        if (file_name[i] === '.') {\n        \
    \    one_dot = true;\n        }\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            num_digits += 1;\n        }\n        if (file_name[i]\
    \ === '.') {\n            let j = i + 1;\n            while (j < file_name.length)\
    \ {\n                substr_after_dot.push(file_name[j]);\n                j +=\
    \ 1;\n            }\n        }\n    }\n    if (num_digits <= 3) {\n        condition1\
    \ = true;\n    }\n    if (one_dot === true) {\n        condition2 = true;\n  \
    \  }\n    if (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z') {\n        condition3 = true;\n    }\n    if (substr_after_dot.join(\"\
    \") === 'txt' || substr_after_dot.join(\"\") === 'exe' || substr_after_dot.join(\"\
    \") === 'dll') {\n        condition4 = true;\n    }\n    if (condition1 === true\
    \ && condition2 === true && condition3 === true && condition4 === true) {\n  \
    \      return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\n\
    console.log(file_name_check(\"1example.dll\"));", "    // Your code goes here.\n\
    }", "    if (file_name.length === 0) {\n        return \"No\";\n    }\n    let\
    \ dot_index = file_name.indexOf(\".\");\n    if (dot_index === -1) {\n       \
    \ return \"No\";\n    }\n    let dot_substring = file_name.substring(dot_index\
    \ + 1);\n    if (dot_substring !== \"txt\" && dot_substring !== \"exe\" && dot_substring\
    \ !== \"dll\") {\n        return \"No\";\n    }\n    let last_digit_index = file_name.lastIndexOf(\"\
    0\");\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    1\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    2\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    3\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    4\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    5\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    6\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    7\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    8\");\n    }\n    if (last_digit_index === -1) {\n        last_digit_index = file_name.lastIndexOf(\"\
    9\");\n    }\n    if (last_digit_index === -1) {\n        return \"Yes\";\n  \
    \  }\n    let first_digit_index = file_name.indexOf(\"0\");\n    if (first_digit_index\
    \ === -1) {", "    let file_name_check_pattern = /^[a-zA-Z]\\w{0,8}(\\.txt|\\\
    .exe|\\.dll)$/;\n    return file_name_check_pattern.test(file_name) ? \"Yes\"\
    \ : \"No\";\n}\n", "    let str_arr = file_name.split('.');\n    let text_before_dot\
    \ = str_arr[0];\n    let text_after_dot = str_arr[1];\n    if (text_before_dot[0].match(/[a-zA-Z]/)\
    \ && text_after_dot.match(/exe|txt|dll/)) {\n        for (let i = 0; i < text_before_dot.length;\
    \ i++) {\n            if (text_before_dot[i].match(/[0-9]/)) {\n             \
    \   return \"No\";\n            }\n        }\n        return \"Yes\";\n    }\n\
    \    return \"No\";\n}\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\nconsole.log(file_name_check(\"example.exe\"));\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"example1.txt\"));\nconsole.log(file_name_check(\"\
    test_test.txt\"));\nconsole.log(file_name_check(\"test_test.doc\"));\nconsole.log(file_name_check(\"\
    test_test_1.txt\"));\nconsole.log(file_name_check(\"example.exe\"));\nconsole.log(file_name_check(\"\
    example1.exe\"));\nconsole.log(file_name_check(\"example11.exe\"));\nconsole.log(file_name_check(\"\
    example111.exe\"));\nconsole.log(file_name_check(\"example222.exe\"));\n", " \
    \   const regex = /^([a-zA-Z]+)\\d{0,3}(\\.(txt|exe|dll))$/g;\n    const result\
    \ = regex.test(file_name);\n    return result ? \"Yes\" : \"No\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    example.txt\"));", "    let count = 0\n    let temp = \"\"\n    let dotIndex =\
    \ 0\n\n    if(file_name.length < 4){\n        return \"No\"\n    }\n    for(let\
    \ i = 0; i < file_name.length; i++){\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9'){\n            count++\n        }\n        if(file_name[i] == '.'){\n\
    \            dotIndex = i\n        }\n    }\n    if(count > 3){\n        return\
    \ \"No\"\n    }\n    temp = file_name.substring(0, dotIndex)\n    if(temp.length\
    \ == 0){\n        return \"No\"\n    }\n    if(!(temp[0] >= 'a' && temp[0] <=\
    \ 'z') && !(temp[0] >= 'A' && temp[0] <= 'Z')){\n        return \"No\"\n    }\n\
    \    temp = file_name.substring(dotIndex+1, file_name.length)\n    if(temp ==\
    \ \"txt\" || temp == \"exe\" || temp == \"dll\"){\n        return \"Yes\"\n  \
    \  }\n    return \"No\"\n}\n", "    //check if there are more than 3 digits in\
    \ file name\n    let nDigits: number = 0;\n    for (let i: number = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    nDigits++;\n        }\n    }\n    if (nDigits > 3) {\n        return \"No\"\
    ;\n    }\n    //check if there is a dot\n    let iDot: number = file_name.indexOf('.');\n\
    \    if (iDot < 0) {\n        return \"No\";\n    }\n    //check if the substring\
    \ before the dot is not empty and starts with a latin alphapet\n    let sub_before:\
    \ string = file_name.substring(0, iDot);\n    if (sub_before.length < 1 || (sub_before[0]\
    \ < 'a' || sub_before[0] > 'z') && (sub_before[0] < 'A' || sub_before[0] > 'Z'))\
    \ {\n        return \"No\";\n    }\n    //check if the substring after the dot\
    \ is one of ['txt', 'exe', 'dll']\n    let sub_after: string = file_name.substring(iDot\
    \ + 1);\n    if (sub_after !== 'txt' && sub_after !== 'exe' && sub_after !== 'dll')\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    return file_name;\n\
    }\n", "    // TODO: implement this function\n    throw new Error(\"Not implemented\"\
    );\n}\n\nexport {\n    file_name_check\n}", "  return undefined;\n}\n", "  //\
    \ Your code here\n  if (file_name.length < 5 || /[A-Za-z]/.test(file_name.substring(file_name.length\
    \ - 4, file_name.length - 3)) || file_name.charAt(file_name.length - 4) !== '.')\
    \ {\n    return 'No';\n  }\n  if (file_name.substring(file_name.length - 3, file_name.length)\
    \ !== 'txt' && file_name.substring(file_name.length - 3, file_name.length) !==\
    \ 'exe' && file_name.substring(file_name.length - 3, file_name.length) !== 'dll')\
    \ {\n    return 'No';\n  }\n  for (let i = 0; i < file_name.length - 4; i++) {\n\
    \    if (file_name.charAt(i) === '.') {\n      return 'No';\n    }\n    if (file_name.charAt(i)\
    \ < '0' || file_name.charAt(i) > '9') {\n      continue;\n    }\n    else {\n\
    \      if (file_name.substring(0, i).length >= 3) {\n        return 'No';\n  \
    \    }\n    }\n  }\n  return 'Yes';\n}\n", "  let res = \"No\";\n  if (\n    file_name.split(\"\
    .\").length === 2 &&\n    file_name.split(\".\").map(x => x.length).reduce((a,\
    \ b) => a + b) ===\n      file_name.length &&\n    file_name.split(\".\").map(x\
    \ => x.split(\"\").filter(x => x >= \"0\" && x <= \"9\"))\n      .map(x => x.length)\n\
    \      .reduce((a, b) => a + b) <= 3 &&\n    file_name.split(\".\")[0].length\
    \ > 0 &&\n    (file_name.split(\".\")[0][0] >= \"a\" && file_name.split(\".\"\
    )[0][0] <= \"z\") &&\n    [\"txt\", \"exe\", \"dll\"].indexOf(file_name.split(\"\
    .\")[1]) >= 0\n  ) {\n    res = \"Yes\";\n  }\n  return res;\n}\n", "    const\
    \ condition_match = /^([a-zA-Z]{1}(\\d{0,3}))\\.(txt|exe|dll)$/gm;\n    return\
    \ condition_match.test(file_name) ? \"Yes\" : \"No\";\n}\n", "  //We check that\
    \ there are no more than 3 digits in the file name\n  if (file_name.match(/\\\
    d{4,}/)) return \"No\";\n  //We check that the file name contains exactly one\
    \ dot\n  if (file_name.match(/\\.{2,}/)) return \"No\";\n  //We split the file\
    \ name into an array of two strings, the first one \n  // (before the dot) should\
    \ contain only a letter from the latin alphabet\n  // and the second one (after\
    \ the dot) should be one of the folowing values:\n  // ['txt', 'exe', 'dll']\n\
    \  let words = file_name.split(\".\");\n  if (words[0].match(/\\d|[!@#$%^&*()_+\\\
    -={};'\":\\\\|,.\\/?<>]/)) return \"No\";\n  if (words[1] != \"txt\" && words[1]\
    \ != \"exe\" && words[1] != \"dll\") return \"No\";\n  return \"Yes\";\n}\n",
  "    const code_a = \"a\".charCodeAt(0);\n    const code_z = \"z\".charCodeAt(0);\n\
    \    const code_A = \"A\".charCodeAt(0);\n    const code_Z = \"Z\".charCodeAt(0);\n\
    \    const code_0 = \"0\".charCodeAt(0);\n    const code_9 = \"9\".charCodeAt(0);\n\
    \    const file_types = [\"txt\", \"exe\", \"dll\"];\n    let digit_count = 0;\n\
    \    let dot_count = 0;\n    let string_before_dot = \"\";\n    let string_after_dot\
    \ = \"\";\n    for (let i = 0; i < file_name.length; i++) {\n        const c =\
    \ file_name.charCodeAt(i);\n        if (c >= code_0 && c <= code_9) {\n      \
    \      digit_count++;\n        } else if (c === \".\".charCodeAt(0)) {\n     \
    \       dot_count++;\n        } else if (dot_count === 0) {\n            string_before_dot\
    \ += file_name[i];\n        } else if (dot_count === 1) {\n            string_after_dot\
    \ += file_name[i];\n        }\n    }\n    if (digit_count > 3 || dot_count > 1\
    \ || string_before_dot.length === 0) {\n        return \"No\";\n    }\n    if\
    \ (string_after_dot.length === 0) {\n        return \"No\";\n    }\n    if (file_types.indexOf(string_after_dot)\
    \ === -1) {\n        return \"No\";\n    }\n    if (string_before_dot.length ===\
    \ 1) {\n        const c = string_before_dot.charCodeAt(0);\n        if (c >= code_a\
    \ && c <= code_z || c >= code_A && c <= code_Z) {\n            return \"Yes\"\
    ;\n        }\n    }\n    return \"No\";\n}\n", "    let result = \"No\";\n   \
    \ let reg = /^[a-zA-Z]+(\\d{1,3})?\\.(txt|exe|dll)$/;\n    let match = file_name.match(reg);\n\
    \    if (match) {\n        result = \"Yes\";\n    }\n    return result;\n}\n",
  "    let valid_name: boolean = false;\n    let count_digit: number = 0;\n    let\
    \ count_dot: number = 0;\n    let has_string: boolean = false;\n    let has_alphabet:\
    \ boolean = false;\n    let after_dot: string = \"\";\n    let has_after_dot:\
    \ boolean = false;\n    let before_dot: string = \"\";\n    let has_before_dot:\
    \ boolean = false;\n    for (let i = 0; i < file_name.length; i++) {\n       \
    \ if (file_name[i] === \".\") {\n            count_dot++;\n            has_dot\
    \ = true;\n        }\n        if (count_dot > 1) {\n            valid_name = false;\n\
    \            break;\n        }\n        if (file_name[i] >= \"0\" && file_name[i]\
    \ <= \"9\") {\n            count_digit++;\n        }\n        if (count_digit\
    \ > 3) {\n            valid_name = false;\n            break;\n        }\n   \
    \     if (file_name[i] >= \"a\" && file_name[i] <= \"z\" || file_name[i] >= \"\
    A\" && file_name[i] <= \"Z\") {\n            has_alphabet = true;\n        }\n\
    \        if (file_name[i] === \".\") {\n            has_string = true;\n     \
    \   }\n        if (has_string && !has_alphabet) {\n            valid_name = false;\n\
    \            break;\n        }\n        if (has_dot && file_name[i] !== \".\"\
    ) {\n            after_dot += file_name[i];\n            has_after_dot = true;\n\
    \        }\n        if (has_string && file_name[i] !== \".\") {\n            before_dot\
    \ += file_name[i];\n            has_before_dot = true;\n        }\n        if\
    \ (has_after_dot && after_dot !== \"txt\" && after_dot !== \"exe\" && after_dot\
    \ !== \"dll\") {\n            valid_name = false;\n            break;\n      \
    \  }\n        if (count_dot === 1 && has_before_dot", "    let count_digits =\
    \ 0;\n    let dot_count = 0;\n    for (let char of file_name) {\n        if (char\
    \ === '.') {\n            dot_count++;\n        }\n        if (char >= '0' &&\
    \ char <= '9') {\n            count_digits++;\n        }\n    }\n    if (count_digits\
    \ > 3 || dot_count !== 1) {\n        return \"No\";\n    }\n    let dot_index\
    \ = file_name.indexOf('.');\n    let substring_before_dot = file_name.substring(0,\
    \ dot_index);\n    let substring_after_dot = file_name.substring(dot_index + 1);\n\
    \    let valid_substring_after_dot = ['txt', 'exe', 'dll'];\n    if (substring_before_dot\
    \ === \"\" || (substring_before_dot[0] < 'a' || substring_before_dot[0] > 'z')\
    \ && (substring_before_dot[0] < 'A' || substring_before_dot[0] > 'Z')) {\n   \
    \     return \"No\";\n    }\n    if (!valid_substring_after_dot.includes(substring_after_dot))\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "    //TODO\n   \
    \ let re = /[a-zA-Z]{1}[a-zA-Z0-9]{0,3}[.][txt|exe|dll]{3}/g;\n    return re.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "  let has_3_or_less_digits = true;\n  let has_exactly_one_dot\
    \ = false;\n  let has_valid_pre_dot_substring = false;\n  let has_valid_post_dot_substring\
    \ = false;\n  let valid_post_dot_substrings = [\"txt\", \"exe\", \"dll\"];\n \
    \ let dot_index: number;\n  for (let i = 0; i < file_name.length; i++) {\n   \
    \ if (file_name[i] === \".\") {\n      has_exactly_one_dot = true;\n      dot_index\
    \ = i;\n    }\n    if (parseInt(file_name[i])) {\n      has_3_or_less_digits =\
    \ false;\n    }\n  }\n  if (\n    has_3_or_less_digits &&\n    has_exactly_one_dot\
    \ &&\n    valid_post_dot_substrings.includes(\n      file_name.substring(dot_index\
    \ + 1, file_name.length)\n    )\n  ) {\n    has_valid_post_dot_substring = true;\n\
    \  }\n  if (\n    has_3_or_less_digits &&\n    has_exactly_one_dot &&\n    file_name.substring(0,\
    \ dot_index) !== \"\" &&\n    (file_name[0] >= \"a\" && file_name[0] <= \"z\"\
    ) ||\n    (file_name[0] >= \"A\" && file_name[0] <= \"Z\")\n  ) {\n    has_valid_pre_dot_substring\
    \ = true;\n  }\n  if (\n    has_3_or_less_digits &&\n    has_exactly_one_dot &&\n\
    \    has_valid_pre_dot_substring &&\n    has_valid_post_dot_substring\n  ) {\n\
    \    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "    // write\
    \ your solution here\n    const file_check = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,})[.](txt|exe|dll)$/;\n\
    \    return file_check.test(file_name) ? \"Yes\" : \"No\";\n}\n", "    if (file_name.split('').filter(\n\
    \        c => (c >= '0' && c <= '9')).length > 3) {\n        return 'No';\n  \
    \  }\n    else if (file_name.split('.').length != 2) {\n        return 'No';\n\
    \    }\n    else if (!((file_name.split('.')[0].charAt(0) >= 'a' && file_name.split('.')[0].charAt(0)\
    \ <= 'z') ||\n        (file_name.split('.')[0].charAt(0) >= 'A' && file_name.split('.')[0].charAt(0)\
    \ <= 'Z'))) {\n        return 'No';\n    }\n    else if (!(file_name.split('.')[1]\
    \ == 'txt' || file_name.split('.')[1] == 'exe' || file_name.split('.')[1] == 'dll'))\
    \ {\n        return 'No';\n    }\n    else {\n        return 'Yes';\n    }\n}\n",
  "    const digit_regex = new RegExp('[0-9]', 'g');\n    const file_name_regex =\
    \ new RegExp('^[a-zA-Z]+[a-zA-Z0-9]*\\\\.[a-zA-Z]+$');\n    if (digit_regex.exec(file_name)\
    \ && digit_regex.exec(file_name).length > 3) {\n        return 'No';\n    }\n\
    \    if (!file_name_regex.test(file_name)) {\n        return 'No';\n    }\n  \
    \  const file_name_parts = file_name.split('.');\n    if (file_name_parts[1] !=\
    \ 'txt' && file_name_parts[1] != 'exe' && file_name_parts[1] != 'dll') {\n   \
    \     return 'No';\n    }\n    return 'Yes';\n}\n", "    const file_name_split:\
    \ string[] = file_name.split('.');\n    let file_name_without_suffix: string =\
    \ file_name_split[0];\n    let file_name_suffix: string = file_name_split[1];\n\
    \    let result: string = 'No';\n    let count: number = 0;\n    const suffix_list:\
    \ string[] = ['txt', 'exe', 'dll'];\n    for (let i: number = 0; i < file_name_without_suffix.length;\
    \ i++) {\n        if (Number(file_name_without_suffix[i])) {\n            count++;\n\
    \        }\n    }\n    if (count > 3) {\n        return result;\n    } else if\
    \ (file_name_without_suffix.length === 0) {\n        return result;\n    } else\
    \ if (!(file_name_without_suffix[0] >= 'a' && file_name_without_suffix[0] <= 'z')\n\
    \        && !(file_name_without_suffix[0] >= 'A' && file_name_without_suffix[0]\
    \ <= 'Z')) {\n        return result;\n    } else if (!(suffix_list.includes(file_name_suffix)))\
    \ {\n        return result;\n    } else {\n        result = 'Yes';\n        return\
    \ result;\n    }\n}\n", "    const file_name_arr = file_name.split(\".\");\n \
    \   const file_extension = file_name_arr[1];\n    const valid_extensions = [\"\
    txt\", \"exe\", \"dll\"];\n    if (file_name_arr.length !== 2) {\n        return\
    \ \"No\";\n    } else if (file_name_arr[0].match(/\\d/g) && file_name_arr[0].match(/\\\
    d/g).length > 3) {\n        return \"No\";\n    } else if (!valid_extensions.includes(file_extension))\
    \ {\n        return \"No\";\n    } else if (!file_name_arr[0].match(/^[a-zA-Z]/))\
    \ {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\n\
    console.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\nconsole.log(file_name_check(\"1example.js\"));\n", "  const\
    \ valid_extensions = ['txt', 'exe', 'dll'];\n  let number_count = 0;\n  let dot_count\
    \ = 0;\n  let extension_flag = false;\n  let part1 = '';\n  let part2 = '';\n\
    \  for (let i = 0; i < file_name.length; i++) {\n    if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n      number_count++;\n    }\n    if (file_name[i] ===\
    \ '.') {\n      dot_count++;\n    }\n  }\n  if (number_count > 3 || dot_count\
    \ !== 1) {\n    return 'No';\n  }\n  part1 = file_name.substring(0, file_name.indexOf('.'));\n\
    \  part2 = file_name.substring(file_name.indexOf('.') + 1);\n  if (part1 === ''\
    \ || part1[0] < 'A' || part1[0] > 'z') {\n    return 'No';\n  }\n  for (let extension\
    \ of valid_extensions) {\n    if (part2 === extension) {\n      extension_flag\
    \ = true;\n    }\n  }\n  if (extension_flag) {\n    return 'Yes';\n  }\n  return\
    \ 'No';\n}\n", "  let period_pos = file_name.indexOf('.');\n  if (period_pos ==\
    \ -1) {\n    return 'No';\n  }\n\n  let before_period = file_name.substring(0,\
    \ period_pos);\n  let after_period = file_name.substring(period_pos + 1);\n\n\
    \  if (before_period.length == 0 ||\n      !before_period.match(/^[a-zA-Z]/) ||\n\
    \      before_period.match(/[0-9]/g).length > 3 ||\n      !['txt', 'exe', 'dll'].includes(after_period))\
    \ {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n", "    if (file_name.length\
    \ == 0) return \"Yes\";\n    if (file_name.length < 7) return \"No\";\n    if\
    \ (file_name.length > 7) return \"No\";\n    if (file_name.length == 7) {\n  \
    \      if (file_name[0] == '.') return \"No\";\n        if (file_name[1] == '.')\
    \ return \"No\";\n        if (file_name[0] == '0') return \"No\";\n        if\
    \ (file_name[1] == '0') return \"No\";\n        if (file_name[2] == '0') return\
    \ \"No\";\n        if (file_name[0] != 'a' && file_name[0] != 'b' && file_name[0]\
    \ != 'c' && file_name[0] != 'd' && file_name[0] != 'e' && file_name[0] != 'f'\
    \ && file_name[0] != 'g' && file_name[0] != 'h' && file_name[0] != 'i' && file_name[0]\
    \ != 'j' && file_name[0] != 'k' && file_name[0] != 'l' && file_name[0] != 'm'\
    \ && file_name[0] != 'n' && file_name[0] != 'o' && file_name[0] != 'p' && file_name[0]\
    \ != 'q' && file_name[0] != 'r' && file_name[0] != 's' && file_name[0] != 't'\
    \ && file_name[0] != 'u' && file_name[0] != 'v' && file_name[0] != 'w' && file_name[0]\
    \ != 'x' && file_name[0] != 'y' && file_name[0] != 'z' && file_name[0] != 'A'\
    \ && file_name[0] != 'B' && file_name[0] != 'C' && file_name[0] != 'D' && file_name[0]\
    \ != 'E' && file_name[0] != 'F' && file_name[0", "  const res: string[] = [];\n\
    \  const alphaPattern = /[a-zA-Z]/;\n  const numPattern = /[0-9]/;\n  const validExtensions\
    \ = [\"txt\", \"exe\", \"dll\"];\n  let dotCounter = 0;\n  let numCounter = 0;\n\
    \  for (let i = 0; i < file_name.length; i++) {\n    if (numPattern.test(file_name[i]))\
    \ {\n      numCounter++;\n    }\n    if (file_name[i] === \".\") {\n      dotCounter++;\n\
    \    }\n  }\n  if (numCounter > 3) {\n    res.push(\"No\");\n  }\n  if (dotCounter\
    \ > 1) {\n    res.push(\"No\");\n  }\n  if (!alphaPattern.test(file_name[0]))\
    \ {\n    res.push(\"No\");\n  }\n  if (!validExtensions.includes(file_name.split(\"\
    .\")[1])) {\n    res.push(\"No\");\n  }\n  if (res.length) {\n    return res.join(\"\
    \");\n  }\n  return \"Yes\";\n}\n", "  const pattern = new RegExp(/^[a-zA-Z]{1}[a-zA-Z\\\
    d_]{1,}\\.(txt|exe|dll)$/);\n  return pattern.test(file_name) ? \"Yes\" : \"No\"\
    ;\n}\n", "    let dotCount = 0;\n    let digitCount = 0;\n    let extension =\
    \ \"\";\n    let validExtensions = [\"txt\", \"exe\", \"dll\"];\n    for (let\
    \ i = 0; i < file_name.length; i++) {\n        if (file_name[i] === \".\") {\n\
    \            dotCount++;\n            extension = file_name.substring(i + 1);\n\
    \        }\n        if (Number(file_name[i]) >= 0 && Number(file_name[i]) <= 9)\
    \ {\n            digitCount++;\n        }\n    }\n    let result = (digitCount\
    \ <= 3 && dotCount === 1 && extension != \"\" && validExtensions.includes(extension))\
    \ ? \"Yes\" : \"No\";\n    return result;\n}\n", "    if (file_name.match(/\\\
    d{4,}/)) return \"No\";\n    if (file_name.match(/^[a-zA-Z]+\\..{3}$/)) return\
    \ \"Yes\";\n    else return \"No\";\n}\n\n", "    const latin_alphabet = /[a-zA-Z]/;\n\
    \    const extension = ['txt', 'exe', 'dll'];\n    let regex_test: RegExp;\n \
    \   let dot: number;\n    let num_digits: number;\n    let sub_string_1: string;\n\
    \    let sub_string_2: string;\n\n    if (file_name.length < 5) {\n        return\
    \ 'No';\n    }\n\n    dot = file_name.indexOf('.');\n    if (dot == -1) {\n  \
    \      return 'No';\n    }\n\n    sub_string_1 = file_name.substring(0, dot);\n\
    \    sub_string_2 = file_name.substring(dot + 1);\n\n    if (sub_string_1.length\
    \ < 1 || sub_string_2.length < 3) {\n        return 'No';\n    }\n\n    num_digits\
    \ = 0;\n    for (let i = 0; i < sub_string_1.length; i++) {\n        if (!isNaN(Number(sub_string_1[i])))\
    \ {\n            num_digits++;\n        }\n    }\n\n    if (num_digits > 3) {\n\
    \        return 'No';\n    }\n\n    regex_test = new RegExp(latin_alphabet);\n\
    \    if (!regex_test.test(sub_string_1[0])) {\n        return 'No';\n    }\n\n\
    \    if (!extension.includes(sub_string_2)) {\n        return 'No';\n    }\n\n\
    \    return 'Yes';\n}\n", "\tlet dot_index = file_name.indexOf('.');\n\tif (dot_index\
    \ === -1) {\n\t\treturn 'No';\n\t}\n\tlet file_name_before_dot = file_name.substring(0,\
    \ dot_index);\n\tlet file_name_after_dot = file_name.substring(dot_index + 1);\n\
    \tlet valid_file_types = ['txt', 'exe', 'dll'];\n\tlet count_digits = 0;\n\tlet\
    \ is_digit = false;\n\tfor (let i = 0; i < file_name_before_dot.length; i++) {\n\
    \t\tif (!isNaN(Number(file_name_before_dot[i]))) {\n\t\t\tcount_digits++;\n\t\t\
    \tis_digit = true;\n\t\t}\n\t}\n\tif (count_digits > 3 || !is_digit) {\n\t\treturn\
    \ 'No';\n\t}\n\tfor (let i = 0; i < valid_file_types.length; i++) {\n\t\tif (file_name_after_dot\
    \ === valid_file_types[i]) {\n\t\t\treturn 'Yes';\n\t\t}\n\t}\n\treturn 'No';\n\
    }\n", "    if (file_name.match(/^[a-zA-Z]\\w*\\.(txt|exe|dll)$/)!==null)\n   \
    \     return \"Yes\";\n    else return \"No\";\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    let\
    \ dot_position = file_name.indexOf('.');\n    let file_name_number_before_dot\
    \ = file_name.substring(0, dot_position);\n    let file_name_extension = file_name.substring(dot_position+1);\n\
    \    let num_digits = 0;\n    for (let i = 0; i < file_name_number_before_dot.length;\
    \ i++) {\n        if (file_name_number_before_dot[i] >= '0' && file_name_number_before_dot[i]\
    \ <= '9') {\n            num_digits++;\n        }\n    }\n    if (num_digits >\
    \ 3) {\n        return \"No\";\n    }\n    if (file_name_number_before_dot.length\
    \ == 0) {\n        return \"No\";\n    }\n    if (file_name_number_before_dot[0]\
    \ < 'A' || file_name_number_before_dot[0] > 'z' || (file_name_number_before_dot[0]\
    \ > 'Z' && file_name_number_before_dot[0] < 'a')) {\n        return \"No\";\n\
    \    }\n    if (file_name_extension !== 'txt' && file_name_extension !== 'exe'\
    \ && file_name_extension !== 'dll') {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));", "    return \"placeholder\";\n}\n", "    const reg: RegExp\
    \ = /^[a-zA-Z][a-zA-Z0-9]{0,8}(\\.[a-zA-Z]{1,3}|\\.[a-zA-Z0-9]{1,3})$/;\n    return\
    \ reg.test(file_name) ? \"Yes\" : \"No\";\n}\n", "    const LOWER_A_CODE = 97;\n\
    \    const LOWER_Z_CODE = 122;\n    const UPPER_A_CODE = 65;\n    const UPPER_Z_CODE\
    \ = 90;\n    const ZERO_CODE = 48;\n    const NINE_CODE = 57;\n    let dot_cnt\
    \ = 0;\n    let digits_cnt = 0;\n    let is_first_letter = true;\n    for (let\
    \ idx = 0; idx < file_name.length; idx++) {\n        const ch = file_name.charCodeAt(idx);\n\
    \        if (ch === 46) { // \".\"\n            dot_cnt++;\n            is_first_letter\
    \ = true;\n        } else if (ch >= ZERO_CODE && ch <= NINE_CODE) {\n        \
    \    digits_cnt++;\n        } else if (is_first_letter &&\n            ((ch >=\
    \ LOWER_A_CODE && ch <= LOWER_Z_CODE) ||\n                (ch >= UPPER_A_CODE\
    \ && ch <= UPPER_Z_CODE))) {\n            is_first_letter = false;\n        }\
    \ else {\n            return \"No\";\n        }\n    }\n    if (dot_cnt !== 1\
    \ || digits_cnt > 3) {\n        return \"No\";\n    }\n    return is_valid_suffix(file_name.split(\"\
    .\").pop()) ? \"Yes\" : \"No\";\n}\n", "  return /^[a-zA-Z][\\w]{0,16}[.](txt|exe|dll)$/.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    let tempString = file_name.slice(0, file_name.indexOf('.'));\n\
    \    let lengthOfTempString = tempString.length;\n    let countOfNumbersInFileName\
    \ = 0;\n    for (let i = 0; i < lengthOfTempString; i++) {\n        if (tempString[i]\
    \ >= '0' && tempString[i] <= '9') {\n            countOfNumbersInFileName++;\n\
    \        }\n    }\n    if (countOfNumbersInFileName > 3) {\n        return \"\
    No\";\n    }\n    if (file_name.indexOf('.') === -1) {\n        return \"No\"\
    ;\n    }\n    let tempString2 = file_name.slice(file_name.indexOf('.') + 1);\n\
    \    if (tempString2 !== 'txt' && tempString2 !== 'exe' && tempString2 !== 'dll')\
    \ {\n        return \"No\";\n    }\n    let firstLetter = tempString[0];\n   \
    \ if ((firstLetter >= 'a' && firstLetter <= 'z') || (firstLetter >= 'A' && firstLetter\
    \ <= 'Z')) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "  //\
    \ Please write your code here\n}\n", "    const hasDot = file_name.includes('.');\n\
    \    const extension = file_name.split('.')[1];\n    const isValidExtension =\
    \ ['txt', 'exe', 'dll'].includes(extension);\n    const hasLatinAlphabet = /[a-z]/i.test(file_name[0]);\n\
    \    const digitCount = file_name.match(/\\d/g)?.length;\n    const isValidDigitCount\
    \ = digitCount !== undefined && digitCount <= 3;\n    const isValid = hasDot &&\
    \ isValidExtension && hasLatinAlphabet && isValidDigitCount;\n    return isValid\
    \ ? 'Yes' : 'No';\n}\n\n", "    let num_digits = 0;\n    let dot_index = file_name.indexOf('.');\n\
    \    let extension = file_name.substring(dot_index + 1);\n    let latin_alphabet_regex\
    \ = /[a-zA-Z]/;\n    let invalid_regex = /[\\^\\$\\.\\|\\?\\*\\+\\(\\)\\\\~`\\\
    !@#%&\\-_+={}\\[\\]:\";\\'<>\\,\\s\\/]/;\n    if (invalid_regex.test(file_name))\
    \ {\n        return \"No\";\n    }\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (i < dot_index) {\n            if (!latin_alphabet_regex.test(file_name[i]))\
    \ {\n                num_digits++;\n            }\n        }\n    }\n    if (num_digits\
    \ > 3) {\n        return \"No\";\n    }\n    if (file_name.substring(0, dot_index)\
    \ === \"\") {\n        return \"No\";\n    }\n    if (extension !== \"txt\" &&\
    \ extension !== \"exe\" && extension !== \"dll\") {\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\n", "    let first_part = file_name.split('.')[0];\n\
    \    let last_part = file_name.split('.')[1];\n    if (last_part != 'txt' && last_part\
    \ != 'exe' && last_part != 'dll') {\n        return 'No';\n    }\n    if (first_part.charAt(0)\
    \ < 'a' || first_part.charAt(0) > 'z') {\n        return 'No';\n    }\n    let\
    \ digits = 0;\n    for (let i = 0; i < first_part.length; i++) {\n        if (first_part.charAt(i)\
    \ >= '0' && first_part.charAt(i) <= '9') {\n            digits += 1;\n       \
    \ }\n    }\n    if (digits > 3) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\n\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));\nconsole.log(file_name_check(\"2example.exe\"));\nconsole.log(file_name_check(\"\
    1example.abc\"));\nconsole.log(file_name_check(\"jython.txt\"));\nconsole.log(file_name_check(\"\
    example\"));", "    const CHECK_REGEXP: RegExp = /^[a-zA-Z]\\w{0,28}\\.txt|exe|dll$/;\n\
    \    const IS_VALID_FILE_NAME: boolean = CHECK_REGEXP.test(file_name);\n    return\
    \ IS_VALID_FILE_NAME ? \"Yes\" : \"No\";\n}", "    return '';\n}\n", "    let\
    \ count_of_dots = 0;\n    let count_of_digits = 0;\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] === '.') {\n            count_of_dots += 1;\n\
    \        }\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n      \
    \      count_of_digits += 1;\n        }\n    }\n    if (count_of_dots !== 1 ||\
    \ count_of_digits > 3) {\n        return \"No\";\n    }\n    let ending = file_name.slice(file_name.indexOf('.'));\n\
    \    if (ending !== '.txt' && ending !== '.exe' && ending !== '.dll') {\n    \
    \    return \"No\";\n    }\n    return \"Yes\";\n}\n", "    // TODO: return the\
    \ correct string\n    return \"\";\n}", "    const pattern: RegExp = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$/;\n    return pattern.test(file_name) ? \"Yes\" : \"No\";\n}\n",
  "  const letter: RegExp = /^[a-zA-Z]/;\n  const digits: RegExp = /\\d{4}/;\n  const\
    \ extension: RegExp = /(txt|exe|dll)$/;\n  const dot: RegExp = /^[a-zA-Z]*\\.$/;\n\
    \  if (!letter.test(file_name)) {\n    return \"No\";\n  } else if (digits.test(file_name))\
    \ {\n    return \"No\";\n  } else if (!extension.test(file_name)) {\n    return\
    \ \"No\";\n  } else if (dot.test(file_name)) {\n    return \"No\";\n  } else {\n\
    \    return \"Yes\";\n  }\n}\n", "  const digits_regex = /\\d{4,}/g;\n  const\
    \ dot_index = file_name.indexOf('.');\n  const ext_index = file_name.indexOf('exe');\n\
    \  if (digits_regex.test(file_name) || dot_index === -1 || file_name[0].toLowerCase()\
    \ !== file_name[0] ||\n    file_name.substring(dot_index + 1, ext_index) !== 'dll')\
    \ {\n    return 'No';\n  }\n  return 'Yes';\n}\n", "    if (file_name.length <=\
    \ 3 || file_name.length > 256) {\n        return \"No\";\n    }\n    var count\
    \ = 0;\n    var re = /^[a-zA-Z]+\\.[a-zA-Z]+$/;\n    var re1 = /^[0-9]+$/;\n \
    \   for (var i = 0; i < file_name.length; i++) {\n        if (re1.test(file_name[i]))\
    \ {\n            count++;\n        }\n    }\n    if (count > 3) {\n        return\
    \ \"No\";\n    }\n    if (re.test(file_name)) {\n        var array = file_name.split(\"\
    .\");\n        if (array[1] == \"txt\" || array[1] == \"exe\" || array[1] == \"\
    dll\") {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n\
    }\n", "  let result = 'No';\n  const regEx = new RegExp(/^[a-zA-Z][\\w]+\\.(txt|exe|dll)$/);\n\
    \  if (regEx.test(file_name)) result = 'Yes';\n  return result;\n}\n", "    if\
    \ (count_digits(file_name) > 3) {\n        return \"No\";\n    } else if (file_name.indexOf(\"\
    .\") == -1) {\n        return \"No\";\n    } else if (file_name.slice(0, file_name.indexOf(\"\
    .\")).length == 0) {\n        return \"No\";\n    } else if (!(file_name.slice(0,\
    \ file_name.indexOf(\".\")).charAt(0) >= \"a\" && file_name.slice(0, file_name.indexOf(\"\
    .\")).charAt(0) <= \"z\"\n            || file_name.slice(0, file_name.indexOf(\"\
    .\")).charAt(0) >= \"A\" && file_name.slice(0, file_name.indexOf(\".\")).charAt(0)\
    \ <= \"Z\")) {\n        return \"No\";\n    } else if (file_name.slice(file_name.indexOf(\"\
    .\") + 1) != \"txt\" && file_name.slice(file_name.indexOf(\".\") + 1) != \"exe\"\
    \ && file_name.slice(file_name.indexOf(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\n", "    let counter\
    \ = 0;\n    let dot = 0;\n    let firstPart = '';\n    let secondPart = '';\n\
    \    let firstPartValid = false;\n    let secondPartValid = false;\n    let isValid\
    \ = false;\n    for (let i = 0; i < file_name.length; i++) {\n        if (counter\
    \ > 3) {\n            break;\n        }\n        if ((file_name[i] >= '0') &&\
    \ (file_name[i] <= '9')) {\n            counter += 1;\n        }\n        if (file_name[i]\
    \ === '.') {\n            dot += 1;\n            continue;\n        }\n      \
    \  if (dot > 1) {\n            break;\n        }\n        if (dot === 0) {\n \
    \           firstPart += file_name[i];\n        }\n        if (dot === 1) {\n\
    \            secondPart += file_name[i];\n        }\n    }\n    if (counter >\
    \ 3) {\n        return 'No';\n    }\n    if (dot !== 1) {\n        return 'No';\n\
    \    }\n    if ((firstPart.length === 0) || ((firstPart[0] < 'a') || (firstPart[0]\
    \ > 'z')) && ((firstPart[0] < 'A') || (firstPart[0] > 'Z'))) {\n        return\
    \ 'No';\n    }\n    if ((secondPart === 'txt') || (secondPart === 'exe') || (secondPart\
    \ === 'dll')) {\n        isValid = true;\n    }\n    if (isValid) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\n\nlet file1 = 'example.txt';\nlet file2\
    \ = '1example.dll';\nlet file3 = '1example.txt';\nlet file4 = 'example.';\nlet\
    \ file5 = 'example';\nlet file6 = 'example.exe';\nlet file7 = 'example.txt.exe';\n\
    let file8 = '1example.txt.exe';\nlet file9 = 'example.txt.exe.exe';\nlet file10\
    \ = 'example...txt';\nlet file11 = 'exam.ple.txt';\n", "\tlet counter: number\
    \ = 0;\n\tlet index_of_dot: number = file_name.indexOf('.');\n\tlet name_array:\
    \ string[] = file_name.split('');\n\tlet extention: string = file_name.slice(index_of_dot\
    \ + 1);\n\tlet sub_str_before_dot: string = file_name.slice(0, index_of_dot);\n\
    \tlet pattern_of_name: RegExp = /^[a-zA-Z]+$/;\n\tlet pattern_of_number: RegExp\
    \ = /^[0-9]+$/;\n\tlet pattern_of_extention: RegExp = /(txt|exe|dll)/;\n\tfor\
    \ (let i: number = 0; i < sub_str_before_dot.length; i++) {\n\t\tif (pattern_of_number.test(sub_str_before_dot[i]))\
    \ {\n\t\t\tcounter++;\n\t\t}\n\t}\n\tif (counter > 3) {\n\t\treturn 'No';\n\t\
    }\n\telse if (name_array.filter(x => x === '.').length !== 1) {\n\t\treturn 'No';\n\
    \t}\n\telse if (!pattern_of_name.test(sub_str_before_dot)) {\n\t\treturn 'No';\n\
    \t}\n\telse if (!pattern_of_extention.test(extention)) {\n\t\treturn 'No';\n\t\
    }\n\telse {\n\t\treturn 'Yes';\n\t}\n}\n", "    let reg: RegExp = /^[a-zA-Z]{1}[a-zA-Z0-9]{0,3}\\\
    .[txt|exe|dll]$/\n    if (reg.test(file_name)) {\n        return \"Yes\"\n   \
    \ } else {\n        return \"No\"\n    }\n}\n", "  // Write your code here\n}\n",
  "    let is_valid: boolean = true;\n    // Check if there are more than 3 digits:\n\
    \    if (file_name.match(/\\d/g)?.length > 3) {\n        is_valid = false;\n \
    \   }\n    // Check if there is exactly one dot:\n    if (file_name.match(/\\\
    ./g)?.length !== 1) {\n        is_valid = false;\n    }\n    // Check if the substring\
    \ before the dot isn't empty, and starts with a latin letter:\n    if (file_name.match(/^[A-Za-z]*\\\
    ./g)?.length !== 1) {\n        is_valid = false;\n    }\n    // Check if the substring\
    \ after the dot is one of the accepted file extensions:\n    let file_extension:\
    \ string = file_name.match(/\\.(.+)/)?.[1];\n    if (file_extension) {\n     \
    \   let is_extension_valid: boolean = false;\n        for (let i: number = 0;\
    \ i < 3; i++) {\n            if (file_extension === VALID_FILE_EXTENSIONS[i])\
    \ {\n                is_extension_valid = true;\n            }\n        }\n  \
    \      if (!is_extension_valid) {\n            is_valid = false;\n        }\n\
    \    }\n    // Return the correct response:\n    if (is_valid) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "    let result\
    \ = 'No';\n    let num = 0;\n    let dot = 0;\n    let substring1 = '';\n    let\
    \ substring2 = '';\n    let letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    let extension = ['txt', 'exe', 'dll'];\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    num++;\n        }\n        if (file_name[i] == '.') {\n            dot++;\n\
    \        }\n        if (dot == 1) {\n            substring1 = file_name.substring(0,\
    \ i);\n            substring2 = file_name.substring(i + 1, file_name.length);\n\
    \        }\n    }\n    for (let j = 0; j < letters.length; j++) {\n        if\
    \ (substring1[0] == letters[j]) {\n            if (num <= 3) {\n             \
    \   if (dot == 1) {\n                    for (let k = 0; k < extension.length;\
    \ k++) {\n                        if (substring2 == extension[k]) {\n        \
    \                    result = 'Yes';\n                        }\n            \
    \        }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "    const re = new RegExp(/^\\d*$/);\n    let count_digits = 0;\n    let\
    \ dot_is_valid = false;\n    let name_is_valid = false;\n    let ext_is_valid\
    \ = false;\n    let dot_index = -1;\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        if (re.test(file_name[i])) {\n            count_digits++;\n\
    \        }\n        if (file_name[i] === '.') {\n            dot_index = i;\n\
    \            dot_is_valid = true;\n        }\n    }\n    if (count_digits <= 3\
    \ && dot_is_valid) {\n        const re_name = new RegExp(/^[a-zA-Z]/);\n     \
    \   const name = file_name.substring(0, dot_index);\n        if (re_name.test(name))\
    \ {\n            name_is_valid = true;\n        }\n        if (name_is_valid)\
    \ {\n            const re_ext = new RegExp(/^[a-zA-Z]*$/);\n            const\
    \ ext = file_name.substring(dot_index + 1, file_name.length);\n            if\
    \ (re_ext.test(ext)) {\n                if (ext === 'txt' || ext === 'exe' ||\
    \ ext === 'dll') {\n                    ext_is_valid = true;\n               \
    \ }\n            }\n        }\n    }\n    return dot_is_valid && count_digits\
    \ <= 3 && name_is_valid && ext_is_valid ? 'Yes' : 'No';\n}", "    const match\
    \ = file_name.match(/^[a-zA-Z]\\d{0,3}\\.\\w{3}$/);\n    if (match && match[0]\
    \ === file_name) {\n        return \"Yes\";\n    } else {\n        return \"No\"\
    ;\n    }\n}\n", "    const regexp = /^([a-zA-Z]{1})([a-zA-Z0-9]{0,})\\.\\w{3}$/;\n\
    \    return regexp.test(file_name) ? \"Yes\" : \"No\";\n}\n", "  let temp: string[]\
    \ = file_name.split(\".\");\n  if (temp.length == 2) {\n    let numbers: number\
    \ = temp[0].match(/\\d/g) == null ? 0 : temp[0].match(/\\d/g).length;\n    if\
    \ (temp[0].match(/^[a-zA-Z]/) != null && numbers <= 3 && ['txt', 'exe', 'dll'].includes(temp[1]))\
    \ {\n      return \"Yes\";\n    }\n  }\n  return \"No\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
