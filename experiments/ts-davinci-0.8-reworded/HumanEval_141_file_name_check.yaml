name: HumanEval_141_file_name_check
language: ts
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    if(file_name.match(/^[a-zA-Z]\\w+\\.(txt|exe|dll)$/)){\n      \
    \  return \"Yes\";\n    }\n    return \"No\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    1example.exe\"));\nconsole.log(file_name_check(\"example.txt\"));", "    const\
    \ substringRegex = /(\\w+)?(\\.)?(\\w+)?/;\n    const matches = file_name.match(substringRegex);\n\
    \    if (matches === null) return \"No\";\n    const fileExtensions = [\".txt\"\
    , \".exe\", \".dll\"];\n    const fileName = matches[1];\n    const fileExtension\
    \ = matches[3];\n    const numberOfDigits = fileName.match(/\\d/g) === null ?\
    \ 0 : fileName.match(/\\d/g).length;\n    return (\n        matches[2] === \"\
    .\" && fileExtensions.includes(matches[2] + fileExtension) && numberOfDigits <=\
    \ 3\n    );\n}\n", "    if (file_name.search(/[a-zA-Z]/i) == -1) {\n        return\
    \ \"No\";\n    }\n    var regex = /\\d/g;\n    var match = file_name.match(regex);\n\
    \    if (match != null && match.length > 3) {\n        return \"No\";\n    }\n\
    \    var splitted = file_name.split(\".\");\n    if (splitted.length != 2) {\n\
    \        return \"No\";\n    }\n    if (splitted[0].length == 0) {\n        return\
    \ \"No\";\n    }\n    if (splitted[1] != \"txt\" && splitted[1] != \"exe\" &&\
    \ splitted[1] != \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}\n", "    // TODO: return the correct output.\n    return \"No\";\n}\n", " \
    \   const parts = file_name.split('.');\n    if (parts.length !== 2) return 'No';\n\
    \    if (parts[0].match(/[0-9]/g) && parts[0].match(/[0-9]/g).length > 3) return\
    \ 'No';\n    if (!parts[0].match(/^[a-zA-Z]+/)) return 'No';\n    if (!['txt',\
    \ 'exe', 'dll'].includes(parts[1])) return 'No';\n    return 'Yes';\n}\n", " \
    \   let valid_file_name = true;\n    let digits = '0123456789';\n    let count_digits\
    \ = 0;\n    let alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    let count_alpha = 0;\n    let dot_found = false;\n    let ex_found = false;\n\
    \    let txt_found = false;\n    let dll_found = false;\n    for (let i = 0; i\
    \ < file_name.length; i++) {\n        if (digits.includes(file_name[i])) {\n \
    \           count_digits += 1;\n        }\n        if (alpha.includes(file_name[i]))\
    \ {\n            count_alpha += 1;\n        }\n        if (file_name[i] === '.')\
    \ {\n            dot_found = true;\n        }\n        if (i > file_name.length\
    \ - 4) {\n            if (file_name[i] === 'e') {\n                ex_found =\
    \ true;\n            }\n            if (file_name[i] === 't') {\n            \
    \    txt_found = true;\n            }\n            if (file_name[i] === 'd') {\n\
    \                dll_found = true;\n            }\n        }\n    }\n    if (count_digits\
    \ > 3 || dot_found === false || count_alpha === 0 ||\n        (ex_found === false\
    \ && txt_found === false && dll_found === false)) {\n        valid_file_name =\
    \ false;\n    }\n    return valid_file_name ? 'Yes' : 'No';\n}\n", "    const\
    \ pattern: RegExp = /^[a-zA-Z]+\\d{0,3}\\.txt|exe|dll$/\n    return pattern.test(file_name)\
    \ ? \"Yes\" : \"No\"\n}\nconsole.log(file_name_check(\"example.txt\")) // Yes\n\
    console.log(file_name_check(\"1example.dll\")) // No\n", "    let file_name_valid:\
    \ boolean = true;\n    if(file_name.split(\"\").filter(function(el: string): boolean\
    \ {\n        return el.match(/[0-9]/);\n    }).length > 3) {\n        file_name_valid\
    \ = false;\n    }\n    if(file_name.split(\".\").length !== 2) {\n        file_name_valid\
    \ = false;\n    }\n    if(file_name.split(\".\")[0].length === 0 || !file_name.split(\"\
    .\")[0].match(/[a-zA-Z]/)) {\n        file_name_valid = false;\n    }\n    if(!file_name.split(\"\
    .\")[1].match(/txt|exe|dll/)) {\n        file_name_valid = false;\n    }\n   \
    \ return file_name_valid ? \"Yes\" : \"No\";\n}\n", "  let error = false;\n  if\
    \ (file_name.length > 10) {\n    return \"No\";\n  }\n  let count_digits = 0;\n\
    \  let pos_dot = 0;\n  let count_dot = 0;\n  for (let i = 0; i < file_name.length;\
    \ i++) {\n    if (i > 0 && i < file_name.length - 1) {\n      if (file_name[i]\
    \ == \".\") {\n        pos_dot = i;\n        count_dot++;\n      }\n    }\n  \
    \  if (file_name[i] >= \"0\" && file_name[i] <= \"9\") {\n      count_digits++;\n\
    \    }\n  }\n  if (count_digits > 3 || count_dot > 1) {\n    return \"No\";\n\
    \  }\n  if (\n    (file_name[0] < \"a\" || file_name[0] > \"z\") &&\n    (file_name[0]\
    \ < \"A\" || file_name[0] > \"Z\")\n  ) {\n    return \"No\";\n  }\n  if (file_name.length\
    \ - pos_dot - 1 > 3) {\n    return \"No\";\n  }\n  let sub_str_1 = file_name.substring(pos_dot\
    \ + 1, file_name.length);\n  if (\n    sub_str_1 != \"txt\" &&\n    sub_str_1\
    \ != \"exe\" &&\n    sub_str_1 != \"dll\" &&\n    sub_str_1 != \"TXT\" &&\n  \
    \  sub_str_1 != \"EXE\" &&\n    sub_str_1 != \"DLL\"\n  ) {\n    return \"No\"\
    ;\n  }\n  return \"Yes\";\n}\n", "  let contains_alpha = (file_name.match(/[a-zA-Z]/));\n\
    \  let contains_more_than_3_nums = (file_name.match(/[0-9]{4,}/));\n  let contains_2_dots\
    \ = (file_name.match(/\\.{2,}/));\n  let contains_no_dot = (file_name.match(/^[^\\\
    .]*$/));\n  let contains_txt = (file_name.match(/\\.txt$/));\n  let contains_exe\
    \ = (file_name.match(/\\.exe$/));\n  let contains_dll = (file_name.match(/\\.dll$/));\n\
    \  if (contains_alpha && !contains_more_than_3_nums && !contains_2_dots && !contains_no_dot\
    \ &&\n  (contains_txt || contains_exe || contains_dll)) {\n    return \"Yes\"\
    ;\n  }\n  return \"No\";\n}\n", "    if (file_name.match(/[0-9]{4,}/)) {\n   \
    \     return \"No\";\n    }\n    if (file_name.split(\".\").length != 2) {\n \
    \       return \"No\";\n    }\n    let part1 = file_name.split(\".\")[0];\n  \
    \  let part2 = file_name.split(\".\")[1];\n    if (!part1.match(/[a-zA-Z]/) ||\
    \ part1 == \"\") {\n        return \"No\";\n    }\n    if (part2 != \"txt\" &&\
    \ part2 != \"exe\" && part2 != \"dll\") {\n        return \"No\";\n    }\n   \
    \ return \"Yes\";\n}\n", "    const allowed = new Set(['txt', 'exe', 'dll']);\n\
    \    const digit_regex = /[0-9]/g;\n    const valid_letter_regex = /^[a-zA-Z]+$/g;\n\
    \    const match_regex = /^\\w+\\.\\w+$/g;\n    const num_digits = (file_name.match(digit_regex)\
    \ || []).length;\n    const match = file_name.match(match_regex);\n    const allowed_ext\
    \ = allowed.has(file_name.split('.')[1]);\n    const valid_letter = file_name.split('.')[0].match(valid_letter_regex);\n\
    \    if (match && num_digits <= 3 && allowed_ext && valid_letter) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\n", "    // Write code here...\n    return\
    \ '';\n}\n", "    const alfa = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    const ext = [\"txt\", \"exe\", \"dll\"]\n    if (check(file_name, /\\d{4,}/g))\
    \ {\n        return \"No\"\n    } else if (check(file_name, /\\./g) !== 1) {\n\
    \        return \"No\"\n    } else if (check(file_name.split(\".\")[0], /\\d/g))\
    \ {\n        return \"No\"\n    } else if (alfa.indexOf(file_name.split(\".\"\
    )[0][0]) === -1) {\n        return \"No\"\n    } else if (ext.indexOf(file_name.split(\"\
    .\")[1]) === -1) {\n        return \"No\"\n    } else {\n        return \"Yes\"\
    \n    }\n}", "    const file_name_split = file_name.split('.');\n    if (file_name_split.length\
    \ != 2 || file_name_split[0].length == 0\n        || file_name_split[1].length\
    \ == 0) {\n        return \"No\";\n    }\n    const valid_extensions = [\"txt\"\
    , \"exe\", \"dll\"];\n    if (!valid_extensions.includes(file_name_split[1]))\
    \ {\n        return \"No\";\n    }\n    const digits_count = file_name_split[0].split(\"\
    \").filter(c => c >= '0' && c <= '9').length;\n    if (digits_count > 3) {\n \
    \       return \"No\";\n    }\n    const first_char = file_name_split[0][0];\n\
    \    if (!(first_char >= 'a' && first_char <= 'z') && !(first_char >= 'A' && first_char\
    \ <= 'Z')) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\nconsole.log(file_name_check(\"\
    1example.1dll\"));\nconsole.log(file_name_check(\"example.dll\"));\nconsole.log(file_name_check(\"\
    example.12txt\"));\nconsole.log(file_name_check(\"12example.12txt\"));\nconsole.log(file_name_check(\"\
    12eample.txt\"));\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    example.txt\"));", "    if (file_name.match(/^[A-Za-z][^.]*\\.(txt|exe|dll)$/))\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \nexport { file_name_check };", "    return '';\n}", "  if (file_name.match(/^[a-zA-Z]+[0-9]{0,3}[.]txt$/))\
    \ {\n    return \"Yes\";\n  } else if (file_name.match(/^[a-zA-Z]+[0-9]{0,3}[.]exe$/))\
    \ {\n    return \"Yes\";\n  } else if (file_name.match(/^[a-zA-Z]+[0-9]{0,3}[.]dll$/))\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));", "    let dot_position\
    \ = file_name.indexOf('.');\n    if(dot_position < 0) return \"No\";\n    let\
    \ extension = file_name.substring(dot_position + 1);\n    if(!['txt', 'exe', 'dll'].includes(extension))\
    \ return \"No\";\n    if(file_name.match(/\\d/g).length > 3) return \"No\";\n\
    \    if(!/^[a-z]/i.test(file_name.substring(0, dot_position))) return \"No\";\n\
    \    return \"Yes\";\n}\n", "    const digits = '0123456789';\n    let num_digits\
    \ = 0;\n    let dot_exists = false;\n    let dot_position = -1;\n    let first_letter\
    \ = false;\n    let extension_correct = false;\n    let extension = '';\n    for\
    \ (let i = 0; i < file_name.length; i++) {\n        if (digits.includes(file_name[i]))\
    \ {\n            num_digits += 1;\n        }\n        if (file_name[i] === '.')\
    \ {\n            dot_exists = true;\n            dot_position = i;\n        }\n\
    \        if (file_name[i] === '.' || (file_name[i] >= 'a' && file_name[i] <= 'z')\
    \ || (file_name[i] >= 'A' && file_name[i] <= 'Z')) {\n            first_letter\
    \ = true;\n        }\n    }\n    extension = file_name.substring(dot_position\
    \ + 1);\n    if (extension === 'txt' || extension === 'exe' || extension === 'dll')\
    \ {\n        extension_correct = true;\n    }\n    return num_digits > 3 || !dot_exists\
    \ || !first_letter || !extension_correct ? 'No' : 'Yes';\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
