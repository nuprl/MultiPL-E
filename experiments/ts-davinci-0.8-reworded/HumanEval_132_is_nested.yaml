name: HumanEval_132_is_nested
language: ts
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    var count: number = 0;\n    for (var i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] == '[') {\n            count += 1;\n        }\
    \ else if (string[i] == ']') {\n            count -= 1;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;\n}", "    var stack: any[] = []\n    var map: any = {\n        \"(\":\
    \ \")\",\n        \"[\": \"]\",\n        \"{\": \"}\"\n    }\n    var set: any\
    \ = new Set([\"(\", \"[\", \"{\"])\n    var valid: boolean = false\n    for (var\
    \ i: number = 0; i < string.length; i++) {\n        if (set.has(string[i])) {\n\
    \            stack.push(string[i])\n        } else {\n            var last: any\
    \ = stack.pop()\n            if (string[i] !== map[last]) {\n                return\
    \ false\n            } else {\n                valid = true\n            }\n \
    \       }\n    }\n    return valid\n}\nconsole.log(is_nested(\"[[]][[\"));", " \
    \   const braces = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n\
    \    };\n    let queue: string[] = [];\n    for (let char of string) {\n     \
    \   if (char in braces) {\n            queue.push(char);\n        } else {\n \
    \           if (braces[queue.pop()] !== char) {\n                return false;\n\
    \            }\n        }\n    }\n    return queue.length === 0;\n}\n", "    if\
    \ (string.length === 0) {\n        return false;\n    }\n    let currentNesting\
    \ = 0;\n    let hasNested: boolean = false;\n    for (let char of string) {\n\
    \        if (char === '[') {\n            currentNesting += 1;\n        } else\
    \ if (char === ']') {\n            currentNesting -= 1;\n        }\n        if\
    \ (currentNesting < 0) {\n            return false;\n        }\n        if (currentNesting\
    \ > 0) {\n            hasNested = true;\n        }\n    }\n    return hasNested;\n\
    }\n", "    let opener: string = '[';\n    let closer: string = ']';\n    let stack:\
    \ string[] = [];\n    for (let i: number = 0; i < string.length; i++) {\n    \
    \    if (string[i] === opener) {\n            stack.push(string[i]);\n       \
    \ } else if (string[i] === closer) {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return (stack.length === 0) ? true : false;\n\
    }\n", "    let stack: string[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === ']') {\n            if (stack.length > 0) {\n\
    \                stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length > 0 ? false : true;\n\
    }\n", "    let list: string[] = [];\n    let nested: boolean = false;\n    for\
    \ (let char of string) {\n        if (char === \"[\") {\n            list.push(char);\n\
    \        } else if (char === \"]\") {\n            if (list.length > 0) {\n  \
    \              list.pop();\n                nested = true;\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ nested;\n}\n", "    if (string.length <= 1) return false;\n    let stack: string[]\
    \ = [];\n    for (let i: number = 0; i < string.length; i++) {\n        const\
    \ elem: string = string[i];\n        if (elem === '[') {\n            stack.push(elem);\n\
    \        } else if (elem === ']') {\n            if (stack.length === 0) return\
    \ false;\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "  if (string.length < 2) {\n    return false;\n  }\n  let currentLetter\
    \ = 0;\n  let currentCount = 0;\n  let nextCount = 0;\n  let maxCount = 0;\n \
    \ for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n\
    \      currentCount++;\n    } else {\n      currentCount--;\n    }\n    if (currentCount\
    \ < 0) {\n      return false;\n    }\n    if (currentCount > nextCount) {\n  \
    \    nextCount = currentCount;\n    }\n    if (currentCount === 0) {\n      currentLetter\
    \ = i;\n      maxCount = Math.max(maxCount, nextCount);\n      nextCount = 0;\n\
    \    }\n  }\n  if (currentCount === 0) {\n    return maxCount > 1;\n  }\n  return\
    \ false;\n}\n", "    let counter = 0;\n    let flag = false;\n    let hasOpenBracket\
    \ = false;\n    for (let i = 0; i < string.length; i++) {\n        const char\
    \ = string[i];\n        if (char === '[') {\n            hasOpenBracket = true;\n\
    \            counter++;\n        } else if (char === ']') {\n            counter--;\n\
    \        }\n        if (counter < 0) {\n            return false;\n        }\n\
    \        if (counter === 0 && hasOpenBracket) {\n            flag = true;\n  \
    \      }\n    }\n    return flag;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length > 0) {\n    \
    \            stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\n", "  \
    \  const stack: string[] = [];\n    const bracket_map: { [index: string]: string\
    \ } = {\n        \"{\": \"}\",\n        \"[\": \"]\",\n        \"(\": \")\"\n\
    \    };\n    const open_brackets: string[] = Object.keys(bracket_map);\n    const\
    \ closing_brackets: string[] = Object.values(bracket_map);\n    for (let bracket\
    \ of string) {\n        if (open_brackets.includes(bracket)) {\n            stack.push(bracket);\n\
    \        } else if (closing_brackets.includes(bracket)) {\n            if (stack.length\
    \ === 0) {\n                return false;\n            }\n            const top_item\
    \ = stack.pop();\n            if (bracket_map[top_item] !== bracket) {\n     \
    \           return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let stack: string[] = [];\n    let is_nested: boolean = false;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            stack.pop();\n            if (stack.length === 0) {\n       \
    \         is_nested = true;\n            }\n        }\n    }\n    return is_nested;\n\
    }", "    let openBrackets = 0;\n    let closeBrackets = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            openBrackets\
    \ += 1;\n        } else if (string[i] === \"]\") {\n            closeBrackets\
    \ += 1;\n        }\n        if (closeBrackets > openBrackets) {\n            return\
    \ false;\n        }\n    }\n    return openBrackets === closeBrackets;\n}", " \
    \   let bracketStack: string[] = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            bracketStack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (bracketStack.length\
    \ === 0) {\n                return false;\n            } else {\n            \
    \    bracketStack.pop();\n            }\n        }\n    }\n    return (bracketStack.length\
    \ === 0);\n}\n\ndescribe('is_nested', () => {\n    test('no string', () => {\n\
    \        expect(is_nested('')).toBe(false);\n    });\n    test('[[]]', () => {\n\
    \        expect(is_nested('[[]]')).toBe(true);\n    });\n    test('[][]', () =>\
    \ {\n        expect(is_nested('[][]')).toBe(false);\n    });\n    test('[]', ()\
    \ => {\n        expect(is_nested('[]')).toBe(false);\n    });\n    test('[[][]]',\
    \ () => {\n        expect(is_nested('[[][]]')).toBe(true);\n    });\n    test('[[]][[',\
    \ () => {\n        expect(is_nested('[[]][[')).toBe(true);\n    });\n    test('[]]]]]]][[[[[]',\
    \ () => {\n        expect(is_nested('[]]]]]]][[[[[]')).toBe(false);\n    });\n\
    });", "    let bracketList: string[] = string.split('');\n    let isNested: boolean\
    \ = false;\n    let keepGoing: boolean = true;\n    let j: number = 0;\n    for\
    \ (let i: number = 0; i < bracketList.length && keepGoing; i++) {\n        if\
    \ (bracketList[i] === '[') {\n            for (j = i + 1; j < bracketList.length;\
    \ j++) {\n                if (bracketList[j] === ']') {\n                    isNested\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        keepGoing = false;\n        }\n    }\n    if (j < bracketList.length)\
    \ {\n        let bracketString: string = '';\n        for (let k: number = j +\
    \ 1; k < bracketList.length; k++) {\n            bracketString += bracketList[k];\n\
    \        }\n        isNested = is_nested(bracketString);\n    }\n    return isNested;\n\
    }\n", "    let squared = string.split('');\n    let balanced = 0;\n    for (let\
    \ i = 0; i < squared.length; i++) {\n        if (squared[i] === '[') {\n     \
    \       balanced += 1;\n        } else if (squared[i] === ']') {\n           \
    \ balanced -= 1;\n        }\n        if (balanced < 0) {\n            return false;\n\
    \        }\n    }\n    return balanced === 0;\n}\n", "    var found: boolean =\
    \ false;\n    var s = string.replace(/\\[\\]/g, \"\")\n    if (s.length == 0)\
    \ {\n        found = true;\n    }\n    return found;\n}\nconsole.log(is_nested(\"\
    [[]]\")); //true\nconsole.log(is_nested(\"[]]]]]]][[[[[]\")); //false\nconsole.log(is_nested(\"\
    [][]\")); //false\nconsole.log(is_nested(\"[]\")); //false\nconsole.log(is_nested(\"\
    [[][]]\")); //true\nconsole.log(is_nested(\"[[]][[\")); //true\n", "    //return\
    \ false;\n    let stringArr = string.split('');\n    let openBrackets = ['[',\
    \ '{', '('];\n    let closeBrackets = [']', '}', ')'];\n    let bracketTracker\
    \ = [];\n    let isNested = false;\n    stringArr.forEach(element => {\n     \
    \   if (openBrackets.includes(element)) {\n            bracketTracker.push(element);\n\
    \        }\n        if (closeBrackets.includes(element)) {\n            // if\
    \ at any point the last element in bracketTracker is an open bracket\n       \
    \     // and element is the first close bracket in closeBrackets for that bracketTracker\n\
    \            // set isNested to true\n            if (bracketTracker.length >\
    \ 0) {\n                if (openBrackets.indexOf(bracketTracker[bracketTracker.length\
    \ - 1]) === closeBrackets.indexOf(element)) {\n                    isNested =\
    \ true;\n                }\n            }\n        }\n    });\n    return isNested;\n\
    }\n", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === '[') {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === ']') {\n            if (stack.length > 0) {\n       \
    \         stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "    let depth = 0;\n\
    \    let hasOpen = false;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (string[i] === \"[\") {\n            hasOpen = true;\n            depth\
    \ += 1;\n        } else if (string[i] === \"]\") {\n            depth -= 1;\n\
    \        }\n        if (depth < 0) {\n            return false;\n        }\n \
    \   }\n    return depth == 0 && hasOpen;\n}\n\nconsole.log(is_nested(\"[[]]\"\
    )); //true\nconsole.log(is_nested(\"[]]]]]]][[[[[]\")); //false\nconsole.log(is_nested(\"\
    [][]\")); //false\nconsole.log(is_nested(\"[]\")); //false\nconsole.log(is_nested(\"\
    [[][]]\")); //true\nconsole.log(is_nested(\"[[]][[\")); //true\nconsole.log(is_nested(\"\
    []]]\")); //false\nconsole.log(is_nested(\"[[]]]]]]]\")); //false\nconsole.log(is_nested(\"\
    ]]]]]]]]]]]\")); //false\nconsole.log(is_nested(\"]]]]\")); //false\nconsole.log(is_nested(\"\
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[",
  "    // true = 91, false = 93\n    let hasTrue: boolean = false;\n    let hasFalse:\
    \ boolean = false;\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string.charCodeAt(i) === 91) {\n            hasTrue = true;\n        } else\
    \ if (string.charCodeAt(i) === 93) {\n            hasFalse = true;\n        }\n\
    \    }\n    return hasTrue && hasFalse;\n}\n\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "  let counter: number = 0;\n  let isNested: boolean = false;\n\
    \  for (let i: number = 0; i < string.length; i++) {\n    if (string[i] === \"\
    [\") {\n      counter++;\n    } else if (string[i] === \"]\") {\n      counter--;\n\
    \    }\n    if (counter < 0) {\n      isNested = false;\n      break;\n    } else\
    \ if (counter === 0) {\n      isNested = true;\n    }\n  }\n  return isNested;\n\
    }\n", "    const stack: string[] = [];\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length > 0) {\n\
    \                stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count: number = 0;\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === '[') {\n            count++;\n        } else if (string[i] ===\
    \ ']') {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n", "    let brackets:\
    \ number = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            brackets++;\n        } else if (string[i] === \"]\"\
    ) {\n            brackets--;\n        }\n        if (brackets === -1) {\n    \
    \        return false;\n        }\n    }\n    return brackets === 0;\n}\n", " \
    \ let balanced: boolean = true;\n  let stack: string[] = [];\n  for (let i = 0;\
    \ i < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n\
    \    } else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n    \
    \    balanced = false;\n        break;\n      } else {\n        stack.pop();\n\
    \      }\n    }\n  }\n  return balanced && stack.length === 0;\n}\n", "    let\
    \ arr = string.split('');\n    let ans = false;\n    let left = 0;\n    let right\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === '[')\
    \ {\n            left++;\n        } else {\n            right++;\n        }\n\
    \        if (right > left) {\n            return false;\n        }\n    }\n  \
    \  if (left === right) {\n        ans = true;\n    }\n    return ans;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    if (string.length % 2 !== 0) {\n\
    \        return false;\n    }\n    const stack: string[] = [];\n    for (let char\
    \ of string) {\n        if (char === \"[\") {\n            stack.push(char);\n\
    \        } else {\n            if (stack.length > 0) {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let open = 0;\n    let closed\
    \ = 0;\n    let flag = false;\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            open++;\n        } else {\n   \
    \         closed++;\n        }\n        if (closed > open) {\n            return\
    \ false;\n        }\n        if (open === closed) {\n            flag = true;\n\
    \        }\n    }\n    return flag;\n}\n", "    const opening: string[] = []\n\
    \    for (let i = 0; i < string.length; i++) {\n        const char = string[i]\n\
    \        if (char === '[') {\n            opening.push(char)\n        } else if\
    \ (char === ']') {\n            if (opening.length === 0) {\n                return\
    \ false\n            }\n            opening.pop()\n        }\n    }\n    return\
    \ opening.length === 0\n}\n", "    let squareBrackets: string[] = string.split('');\n\
    \    let stack: string[] = [];\n    let result: boolean = false;\n    for (let\
    \ squareBracket of squareBrackets) {\n        if (squareBracket === '[') {\n \
    \           stack.push(squareBracket);\n        } else {\n            if (stack.length)\
    \ {\n                stack.pop();\n                result = true;\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let arr = string.split('');\n    let stack = [];\n    for (let i\
    \ of arr) {\n        if (i === '[') {\n            stack.push(i);\n        } else\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0 ? false : true;\n}\n", "    // let stack\
    \ = new Stack<string>();\n    // let count = 0;\n    // for (let char of string)\
    \ {\n    //     if (char === \"[\") {\n    //         count++;\n    //       \
    \  stack.push(char);\n    //     } else if (char === \"]\") {\n    //        \
    \ count--;\n    //         if (count < 0) {\n    //             return false;\n\
    \    //         }\n    //         stack.pop();\n    //     }\n    // }\n    //\
    \ return (count === 0 && stack.isEmpty());\n    return false;\n}\n", "    let\
    \ level = 0;\n    for (let char of string) {\n        if (char === \"[\") {\n\
    \            level += 1;\n        } else if (char === \"]\") {\n            level\
    \ -= 1;\n        }\n        if (level < 0) {\n            return false;\n    \
    \    }\n    }\n    return level === 0;\n}\n", "    let sub_string: string = '';\n\
    \    let is_valid: boolean = false;\n    let cnt: number = 0;\n    let valid_sub_strings:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            cnt++;\n            if (is_valid) {\n              \
    \  sub_string += string[i];\n            }\n        } else if (string[i] === ']')\
    \ {\n            cnt--;\n            if (is_valid) {\n                sub_string\
    \ += string[i];\n            }\n        }\n        if (cnt === 0) {\n        \
    \    is_valid = false;\n            if (sub_string.length !== 0) {\n         \
    \       valid_sub_strings.push(sub_string);\n            }\n            sub_string\
    \ = '';\n        } else if (cnt === 1) {\n            is_valid = true;\n     \
    \   }\n    }\n    if (valid_sub_strings.length !== 0) {\n        return true;\n\
    \    }\n    return false;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = new Stack<string>();\n    for (let index in string) {\n\
    \        if (string[index] === \"[\") {\n            stack.push(string[index]);\n\
    \        } else if (string[index] === \"]\") {\n            if (stack.peek() ===\
    \ \"[\") {\n                stack.pop();\n            } else {\n             \
    \   stack.push(string[index]);\n            }\n        }\n    }\n    return stack.length()\
    \ === 0;\n}", "  let counter: number = 0;\n  for (let i: number = 0; i < string.length;\
    \ i++) {\n    if (string[i] === \"[\") {\n      counter++;\n    } else if (string[i]\
    \ === \"]\") {\n      counter--;\n    } else {\n      return false;\n    }\n \
    \   if (counter < 0) {\n      return false;\n    }\n  }\n  return counter > 0\
    \ ? false : true;\n}\n", "  let stringArray = string.split('');\n  let count =\
    \ 0;\n  stringArray.forEach(char => {\n    if (char === '[') {\n      count++;\n\
    \    } else if (char === ']') {\n      count--;\n    }\n  });\n  return count\
    \ === 0;\n}\n", "    let count = 0;\n    let nested = false;\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '[') {\n           \
    \ count++;\n        } else if (string[i] === ']') {\n            count--;\n  \
    \      }\n        if (count === 0) {\n            nested = true;\n        }\n\
    \    }\n    return nested;\n}\n", "    if (string === \"\") {\n        return\
    \ false;\n    }\n    if (string.length === 2) {\n        return string[0] ===\
    \ \"[\" && string[1] === \"]\";\n    }\n    let max: number = 0;\n    let maxStartIndex:\
    \ number = 0;\n    let maxEndIndex: number = 0;\n    let start: number = 0;\n\
    \    let end: number = 1;\n    let subNestMax: number = 0;\n    while (end < string.length)\
    \ {\n        if (string[start] === \"[\" && string[end] === \"]\") {\n       \
    \     if (max < end - start + 1) {\n                max = end - start + 1;\n \
    \               maxStartIndex = start;\n                maxEndIndex = end;\n \
    \           }\n            start = end + 1;\n            end = start + 1;\n  \
    \      } else {\n            if (string[start] === \"[\" && string[end] === \"\
    [\") {\n                let subNest: number = is_nested(string.substring(start,\
    \ end + 1));\n                if (subNest > 0) {\n                    if (subNestMax\
    \ < subNest) {\n                        subNestMax = subNest;\n              \
    \      }\n                }\n            }\n            end += 1;\n        }\n\
    \    }\n    return max > 0 || subNestMax > 0;\n}\n", "    let answer: boolean\
    \ = false;\n    let counter: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            counter += 1;\n    \
    \    } else if (string[i] === \"]\") {\n            counter -= 1;\n        }\n\
    \        if (counter === -1) {\n            answer = false;\n            break;\n\
    \        } else if (counter === 1) {\n            answer = true;\n        }\n\
    \    }\n    return answer;\n}\n", "    let counter = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] === \"[\") {\n            counter++;\n\
    \        } else if (string[i] === \"]\") {\n            counter--;\n        }\n\
    \        if (counter === 0) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let track: number = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            track += 1;\n        } else\
    \ if (string[i] === \"]\") {\n            track -= 1;\n        }\n        if (track\
    \ < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    let counter: number = 0;\n    for (let i = 0; i < string.length; i++) {\n \
    \       if (string[i] === '[') {\n            counter++;\n        } else if (string[i]\
    \ === ']') {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            return false;\n        }\n    }\n    return counter === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    //Replace all multiple square brackets\
    \ with a single square bracket\n    const string2 = string.replace(/\\[\\]/g,\
    \ \"[\");\n    //If the count of square brackets is 1 or less then return true\n\
    \    if (string2.match(/\\[/g) === null || string2.match(/\\[/g).length <= 1)\
    \ {\n        return true;\n    }\n    else {\n        //Remove all matching square\
    \ brackets from the beginning and end of the string\n        const string3 = string2.replace(/^\\\
    [[\\]]*/, \"\").replace(/\\[[\\]]*$/, \"\");\n        //If the length of the string\
    \ is 0 then return true\n        if (string3.length === 0) {\n            return\
    \ true;\n        }\n        else {\n            //Return the result of the is_nested()\
    \ function recursively on the new string\n            return is_nested(string3);\n\
    \        }\n    }\n}", "    let open = 0;\n    let close = 0;\n    let list =\
    \ string.split('');\n    let index = 0;\n    let nest = false;\n    for (let i\
    \ = 0; i < list.length; i++) {\n        if (list[i] === '[') {\n            index\
    \ = i;\n            for (let j = index; j < list.length; j++) {\n            \
    \    if (list[j] === '[') {\n                    open++;\n                }\n\
    \                if (list[j] === ']') {\n                    close++;\n      \
    \          }\n                if (open == close) {\n                    break;\n\
    \                }\n            }\n            if (close > open) {\n         \
    \       nest = true;\n            }\n            open = 0;\n            close\
    \ = 0;\n        }\n    }\n    return nest;\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let count: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            count++;\n        }\
    \ else if (string[i] === \"]\") {\n            count--;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ === 0;\n}\n", "  const stack: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n    }\
    \ else {\n      if (stack.length === 0) {\n        return false;\n      }\n  \
    \    stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n\ntest(\"is_nested:\
    \ Test case 1\", () => {\n  expect(is_nested(\"[[]]\")).toBe(true);\n});\n\ntest(\"\
    is_nested: Test case 2\", () => {\n  expect(is_nested(\"[]]]]]]][[[[[]\")).toBe(false);\n\
    });\n\ntest(\"is_nested: Test case 3\", () => {\n  expect(is_nested(\"[][]\")).toBe(false);\n\
    });\n\ntest(\"is_nested: Test case 4\", () => {\n  expect(is_nested(\"[]\")).toBe(false);\n\
    });\n\ntest(\"is_nested: Test case 5\", () => {\n  expect(is_nested(\"[[][]]\"\
    )).toBe(true);\n});\n\ntest(\"is_nested: Test case 6\", () => {\n  expect(is_nested(\"\
    [[]][[\")).toBe(true);\n});", "    let stack: string[] = [];\n    let open = '{(['\n\
    \    let close = '})]'\n    for (let i = 0; i < string.length; i++) {\n      \
    \  let char = string[i];\n        if (open.includes(char)) {\n            stack.push(char);\n\
    \        } else if (close.includes(char)) {\n            let index = close.indexOf(char);\n\
    \            if (stack.length === 0 || open[index] !== stack.pop()) {\n      \
    \          return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let counter: number = 0;\n    let isNested: boolean = false;\n\
    \    for (let i: number = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            counter++;\n        } else if (string[i] === ']') {\n\
    \            counter--;\n        }\n        if (counter === 1) {\n           \
    \ isNested = true;\n        }\n    }\n    return isNested;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: number[] = [];\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(i);\n        } else if (string[i] === ']') {\n   \
    \         if (stack.length === 0) {\n                return false;\n         \
    \   } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length > 0 ? false : true;\n}\n", "  // Type your solution here\n\
    \  let counter = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]\
    \ === '[') {\n      counter++;\n    } else {\n      counter--;\n    }\n    if\
    \ (counter < 0) {\n      return false;\n    }\n  }\n  return counter === 0;\n\
    }\n", "    //poner una bandera para saber si al menos esta una con una dentro\n\
    \    //ver si hay una llave que tenga otra llave adentro que vaya primero\n  \
    \  let nested: boolean = false;\n    let stack: Array<any> = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] == \"[\") {\n\
    \            stack.push(string[i]);\n        } else {\n            if (stack.length\
    \ > 0) {\n                if (stack[stack.length - 1] == \"[\") {\n          \
    \          stack.pop();\n                    nested = true;\n                }\
    \ else {\n                    stack.push(string[i]);\n                }\n    \
    \        } else {\n                stack.push(string[i]);\n            }\n   \
    \     }\n    }\n    return nested;\n}", "    let str: string = string;\n    let\
    \ list: string[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if\
    \ (str[i] == \"[\") {\n            list.push(str[i]);\n        } else if (str[i]\
    \ == \"]\") {\n            list.pop();\n        }\n    }\n    if (list.length\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    let level = 0;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (string[i] === \"[\") {\n            level += 1;\n        } else if (string[i]\
    \ === \"]\") {\n            level -= 1;\n        }\n        if (level < 0) {\n\
    \            return false;\n        }\n    }\n    return level > 0 ? false : true;\n\
    }\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\n", "    let nums: number[] =\
    \ [];\n    for (let char of string) {\n        if (char === '[') {\n         \
    \   nums.push(1);\n        } else if (char === ']') {\n            if (nums.length\
    \ === 0) {\n                return false;\n            }\n            nums.pop();\n\
    \        }\n    }\n    return nums.length === 0;\n}\n", "    let countOpen = 0;\n\
    \    let countClose = 0;\n    for (let i = 0; i < string.length; i++) {\n    \
    \    if (string[i] === \"[\") {\n            countOpen++;\n        } else if (string[i]\
    \ === \"]\") {\n            countClose++;\n        }\n    }\n    if (countOpen\
    \ === countClose) {\n        return false;\n    } else {\n        return true;\n\
    \    }\n}", "    let openingBrackets: number = 0;\n    let closingBrackets: number\
    \ = 0;\n    let isNested: boolean = false;\n    let isUnbalanced: boolean = false;\n\
    \    string.split('').forEach(value => {\n        if (value === \"[\") {\n   \
    \         openingBrackets++;\n        } else if (value === \"]\") {\n        \
    \    closingBrackets++;\n        }\n    });\n    if (openingBrackets !== closingBrackets)\
    \ {\n        isUnbalanced = true;\n    }\n    if (isUnbalanced === false) {\n\
    \        let splittedString: string[] = string.split('');\n        let bracketArray:\
    \ string[] = [];\n        splittedString.forEach(value => {\n            if (value\
    \ === \"[\") {\n                bracketArray.push(value);\n            } else\
    \ if (value === \"]\") {\n                bracketArray.pop();\n            }\n\
    \        });\n        if (bracketArray.length > 0) {\n            isNested = true;\n\
    \        }\n    }\n    return isNested;\n}\n", "    let squareBrackets: number\
    \ = 0;\n    for (let i: number = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            squareBrackets += 1;\n        } else if (string[i]\
    \ === \"]\") {\n            squareBrackets -= 1;\n        }\n        if (squareBrackets\
    \ < 0) {\n            return false;\n        }\n    }\n    return squareBrackets\
    \ === 0;\n}\n", "    let array: string[] = string.split('');\n    let count: number\
    \ = 0;\n    for (let i: number = 0; i < array.length; i++) {\n        if (array[i]\
    \ === '[') {\n            count += 1;\n        } else if (array[i] === ']') {\n\
    \            count -= 1;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "  let open = 0;\n  let close = 0;\n  let\
    \ result = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]\
    \ === \"[\") {\n      open++;\n    } else if (string[i] === \"]\") {\n      close++;\n\
    \    }\n    if (open < close) {\n      result = false;\n      break;\n    } else\
    \ {\n      result = true;\n    }\n  }\n  return result;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "  var results: boolean = false;\n  for\
    \ (var i = 0; i < string.length; i++) {\n    if (string[i] === \"[\" && string[i\
    \ + 1] === \"[\") {\n      results = true;\n    }\n  }\n  return results;\n}\n\
    console.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\n\
    console.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\n", "  if (string.length == 0)\
    \ return false;\n  let stack: string[] = [];\n  let res: boolean = false;\n  for\
    \ (let i = 0; i < string.length; i++) {\n    if (string[i] == \"[\") {\n     \
    \ stack.push(string[i]);\n    } else {\n      if (stack.length == 0) return false;\n\
    \      stack.pop();\n      res = true;\n    }\n  }\n  return res;\n}\n", "   \
    \ let stack: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n \
    \       let char = string[i];\n        if (char === '[') {\n            stack.push(char);\n\
    \        } else if (char === ']') {\n            if (stack.length !== 0) {\n \
    \               stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}", "    const\
    \ bracketsArray: string[] = string.split('');\n    let previousOpenBracket: string\
    \ = \"\";\n    let currentOpenBracket: string = \"\";\n    let isNested: boolean\
    \ = false;\n    for (let i = 0; i < bracketsArray.length; i++) {\n        const\
    \ currentBracket: string = bracketsArray[i];\n        if (currentBracket === \"\
    [\") {\n            if (previousOpenBracket === \"\") {\n                previousOpenBracket\
    \ = currentBracket;\n            } else {\n                currentOpenBracket\
    \ = currentBracket;\n            }\n        } else if (currentBracket === \"]\"\
    ) {\n            if (currentOpenBracket === \"\") {\n                return false;\n\
    \            } else {\n                isNested = true;\n                currentOpenBracket\
    \ = \"\";\n            }\n        }\n    }\n    return isNested;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\nconsole.log(is_nested(\"[][][]\"));\nconsole.log(is_nested(\"\
    []][]\"));\nconsole.log(is_nested(\"[]][][\"));\nconsole.log(is_nested(\"[]]\"\
    ));\nconsole.log(is_nested(\"[[[]]\"));\nconsole.log(is_nested(\"[][][][]\"));\n\
    console.log(is_nested(\"[[[][]]\"));\nconsole.log(is_nested(\"[[[]][[]]]\"));\n\
    console.log(is_nested(\"[[[][[]]]\"));\nconsole.log(is_nested(\"[[[]]][[]]\"));\n\
    console.log(is_nested(\"[][][][]\"));\nconsole.log(is_nested(\"[[][]][[]]\"));\n\
    console.log(is_nested(\"[[]]]]", "    let count: number = 0;\n    for (let i:\
    \ number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            count++;\n        } else if (string[i] === \"]\") {\n           \
    \ count--;\n        }\n        if (count < 0) {\n            return false;\n \
    \       }\n    }\n    return count === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "  let level = 0;\n  let valid = true;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === \"[\") {\n      level++;\n    } else if (string[i]\
    \ === \"]\") {\n      level--;\n    }\n    if (level < 0) {\n      valid = false;\n\
    \      break;\n    }\n  }\n  return level === 0 && valid;\n}\n", "  if (string.length\
    \ % 2 !== 0) {\n    return false;\n  }\n  const stack: string[] = [];\n  for (let\
    \ character of string) {\n    if (character === \"[\") {\n      stack.push(character);\n\
    \    } else {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n\
    }\n", "    let is_nested = false;\n    let left_brackets = 0;\n    let right_brackets\
    \ = 0;\n    for (let index = 0; index < string.length; index++) {\n        if\
    \ (string[index] === \"[\") {\n            left_brackets += 1;\n        } else\
    \ {\n            right_brackets += 1;\n        }\n        if (right_brackets >\
    \ left_brackets) {\n            is_nested = false;\n            break;\n     \
    \   } else {\n            is_nested = true;\n        }\n    }\n    return is_nested;\n\
    }\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\nconsole.log(is_nested(\"[[[[[[[[]]]]]]]]\"\
    ));", "  const arr = string.split('');\n  let stack: string[] = [];\n  let result:\
    \ boolean = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] ===\
    \ ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n  \
    \    if (stack[stack.length - 1] === '[') {\n        stack.pop();\n        result\
    \ = true;\n      } else {\n        return false;\n      }\n    } else {\n    \
    \  stack.push(arr[i]);\n    }\n  }\n  return result;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "  if (string.length % 2 !== 0) {\n    return\
    \ false;\n  }\n  for (let i = 0; i < string.length / 2; i++) {\n    if (string[i]\
    \ !== \"[\") {\n      return false;\n    }\n  }\n  return true;\n}\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\n", "  let leftCount = 0;\n \
    \ let rightCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    const\
    \ element = string[i];\n    if (element === '[') {\n      leftCount++;\n    }\
    \ else {\n      rightCount++;\n    }\n    if (rightCount > leftCount) {\n    \
    \  return false;\n    }\n  }\n  return leftCount > rightCount ? false : true;\n\
    }\n", "  let counter: number = 0;\n  let isItNested: boolean = false;\n  for (let\
    \ i: number = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n \
    \     counter++;\n    } else if (string[i] === \"]\") {\n      counter--;\n  \
    \  }\n    if (counter === 2) {\n      isItNested = true;\n    }\n  }\n  return\
    \ isItNested;\n}\n", "    let string_len = string.length;\n    let string_arr\
    \ = string.split('');\n    let new_arr = [];\n    for (let i = 0; i < string_len;\
    \ i++) {\n        if (string_arr[i] === '[' && string_arr[i+1] !== ']') {\n  \
    \          new_arr.push(string_arr[i]);\n        } else if (string_arr[i] ===\
    \ ']' && string_arr[i-1] !== '[') {\n            new_arr.push(string_arr[i]);\n\
    \        } else if (string_arr[i] === ']' && string_arr[i-1] === '[') {\n    \
    \        new_arr.pop();\n        } else if (string_arr[i] === '[' && string_arr[i+1]\
    \ === ']') {\n            new_arr.push(string_arr[i]);\n            new_arr.pop();\n\
    \        }\n    }\n    if (new_arr.length === 0) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let opened: number = 0;\n    let closed: number = 0;\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        if (string[i] === \"\
    [\") {\n            opened++;\n        } else {\n            closed++;\n     \
    \   }\n        if (closed > opened) {\n            return false;\n        }\n\
    \    }\n    return closed === opened && opened > 0;\n}\n", "  const stack: string[]\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    const element = string[i];\n\
    \    if (element === \"[\") {\n      stack.push(element);\n    } else {\n    \
    \  if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "  let stack: string[] = [];\n  let top = '';\n  let is_valid: boolean\
    \ = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ===\
    \ '[' || string[i] === ']') {\n      stack.push(string[i]);\n    }\n  }\n  while\
    \ (stack.length > 0) {\n    top = stack.pop();\n    if (top === '[') {\n     \
    \ is_valid = false;\n      break;\n    }\n    if (top === ']') {\n      if (stack.length\
    \ > 0) {\n        top = stack.pop();\n        if (top === '[') {\n          is_valid\
    \ = true;\n        } else {\n          is_valid = false;\n          break;\n \
    \       }\n      } else {\n        is_valid = false;\n        break;\n      }\n\
    \    }\n  }\n  return is_valid;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let l = 0;\n    let r = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            l++;\n        } else\
    \ {\n            r++;\n        }\n        if (r > l) {\n            return false;\n\
    \        }\n    }\n    return l === r;\n}\n", "  let stack: Array<string> = [];\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n\
    \      stack.push(string[i]);\n    } else if (string[i] === \"]\") {\n      if\
    \ (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "    const stack: string[]\
    \ = [];\n    let i: number = 0;\n    while (i < string.length) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n        i++;\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            count++;\n        } else if (string[i] === \"]\")\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count !== 0 ? false : true;\n}\n\nlet string1\
    \ = \"[[]]\";\nlet string2 = \"[]]]]]]][[[[[]\";\nlet string3 = \"[][]\";\nlet\
    \ string4 = \"[]\";\nlet string5 = \"[[][]]\";\nlet string6 = \"[[]][[\";\n\n\
    console.log(is_nested(string1));\nconsole.log(is_nested(string2));\nconsole.log(is_nested(string3));\n\
    console.log(is_nested(string4));\nconsole.log(is_nested(string5));\nconsole.log(is_nested(string6));",
  "  var newstr = string.replace(/\\[\\]/g, \"\");\n  if (newstr.length == 0) return\
    \ true;\n  else if (newstr.length == string.length) return false;\n  else return\
    \ is_nested(newstr);\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stringArray: string[] = string.split('');\n    let stack: string[]\
    \ = [];\n    for (let i = 0; i < stringArray.length; i++) {\n        if (stringArray[i]\
    \ === '[') {\n            stack.push(stringArray[i]);\n        } else if (stringArray[i]\
    \ === ']') {\n            if (stack.length == 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = []\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i])\n        } else if (string[i] === \"]\") {\n   \
    \         if (stack.length === 0) {\n                return false\n          \
    \  } else {\n                stack.pop()\n            }\n        }\n    }\n  \
    \  return stack.length === 0\n}\n", "  let count: number = 0;\n  for (let i =\
    \ 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      count++;\n\
    \    } else if (string[i] === \"]\") {\n      count--;\n    }\n    if (count <\
    \ 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}\n", "  let openBrackets\
    \ = 0;\n  let closedBrackets = 0;\n  for (let i = 0; i < string.length; i++) {\n\
    \    if (string[i] === \"[\") {\n      openBrackets++;\n    } else if (string[i]\
    \ === \"]\") {\n      closedBrackets++;\n    }\n  }\n  if (openBrackets === closedBrackets)\
    \ {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let tmpArr: string[] = [];\n    let\
    \ opened = false;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            opened = true;\n            tmpArr.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (tmpArr.length > 0) {\n\
    \                tmpArr.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return opened && tmpArr.length === 0;\n\
    }\n", "    //create left and right variables\n    let leftBracket = 0;\n    let\
    \ rightBracket = 0;\n    //loop through string\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            leftBracket += 1;\n\
    \        } else if (string[i] === \"]\") {\n            rightBracket += 1;\n \
    \       }\n    }\n    if (leftBracket > rightBracket) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "  const brackets = string.split('');\n\
    \  let accumulator = 0;\n  for (let bracket of brackets) {\n    if (bracket ===\
    \ '[') {\n      accumulator++;\n    } else {\n      accumulator--;\n    }\n  \
    \  if (accumulator < 0) {\n      return false;\n    }\n  }\n  return accumulator\
    \ === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\n", "    let count: number =\
    \ 0;\n    for (let i: number = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            count++;\n        } else if (string[i] === \"]\")\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    let bracketStack:\
    \ string[] = [];\n    for (let char of string) {\n        if (char === \"[\")\
    \ {\n            bracketStack.push(char);\n        } else if (char === \"]\")\
    \ {\n            if (bracketStack.length === 0) {\n                return false;\n\
    \            } else {\n                bracketStack.pop();\n            }\n  \
    \      }\n    }\n    return bracketStack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let result: boolean = false;\n  \
    \  let bracketCount: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            bracketCount++;\n  \
    \      } else if (string[i] === \"]\") {\n            bracketCount--;\n      \
    \  }\n        if (bracketCount < 0) {\n            return false;\n        }\n\
    \    }\n    return bracketCount === 0;\n}\n", "    let startIndex: number = 0;\n\
    \    let endIndex: number = 0;\n    let bracketString: string = string;\n    while\
    \ (bracketString.length > 0) {\n        let indexOfBracket: number = bracketString.indexOf(\"\
    [\", startIndex);\n        if (indexOfBracket >= 0) {\n            startIndex\
    \ = indexOfBracket + 1;\n            endIndex = bracketString.indexOf(\"]\", indexOfBracket);\n\
    \            if (endIndex >= 0) {\n                bracketString = bracketString.substring(0,\
    \ indexOfBracket) +\n                    bracketString.substring(indexOfBracket\
    \ + 1, endIndex) +\n                    bracketString.substring(endIndex + 1);\n\
    \            } else {\n                return false;\n            }\n        }\
    \ else {\n            return false;\n        }\n    }\n    return true;\n}", " \
    \   let left: number = 0;\n    let right: number = 0;\n    let new_string: string\
    \ = '';\n    for (let index: number = 0; index < string.length; index++) {\n \
    \       if (string[index] === '[' && string[index + 1] !== ']') {\n          \
    \  new_string += string[index];\n            left += 1;\n        } else if (string[index]\
    \ === ']' && string[index - 1] !== '[') {\n            new_string += string[index];\n\
    \            right += 1;\n        }\n    }\n    let new_string_half: string =\
    \ new_string.slice(0, new_string.length / 2);\n    if (left === right && new_string_half.length\
    \ > 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "    let count1: number = 0;\n    let count2: number = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] == \"[\") {\n            count1\
    \ += 1;\n        }\n        if (string[i] == \"]\") {\n            count2 += 1;\n\
    \        }\n    }\n    if (count1 == count2) {\n        return false;\n    }\n\
    \    if (count1 > count2) {\n        return true;\n    }\n    if (count1 < count2)\
    \ {\n        return true;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (string[i] === \"[\") {\n            count += 1;\n        } else if (string[i]\
    \ === \"]\") {\n            count -= 1;\n        }\n\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count === 0;\n}\n", " \
    \   const openBrackets: string[] = [];\n    const closedBrackets: string[] = [];\n\
    \    const splitString: string[] = string.split('');\n    const length: number\
    \ = splitString.length;\n    for (let i: number = 0; i < length; i++) {\n    \
    \    if (splitString[i] === '[') {\n            openBrackets.push(splitString[i]);\n\
    \        } else if (splitString[i] === ']') {\n            closedBrackets.push(splitString[i]);\n\
    \        }\n    }\n    return openBrackets.length === closedBrackets.length;\n\
    }\n", "    let stack: Array<string> = []\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i])\n\
    \        } else if (string[i] === ']') {\n            if (stack.length > 0) {\n\
    \                stack.pop()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.length === 0\n}\n", "    if\
    \ (string.length == 0) {\n        return false;\n    }\n    var stack: string[]\
    \ = [];\n    for (var i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == '[') {\n            stack.push('[');\n        } else {\n            if (stack.length\
    \ == 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return true;\n}\n", "  let openBracket = '['\n  let closeBracket\
    \ = ']'\n  let bracket: string[] = []\n  for (let i = 0; i < string.length; i++)\
    \ {\n    bracket.push(string[i])\n  }\n  for (let i = 0; i < bracket.length; i++)\
    \ {\n    if (bracket[i] === openBracket) {\n      for (let j = i + 1; j < bracket.length;\
    \ j++) {\n        if (bracket[j] === closeBracket) {\n          bracket.splice(i,\
    \ 1)\n          bracket.splice(j - 1, 1)\n          i--\n          break\n   \
    \     }\n      }\n    }\n  }\n  if (bracket.length === 0) {\n    return true\n\
    \  } else {\n    return false\n  }\n}\n", "  if (string.length === 0) {\n    return\
    \ false;\n  }\n\n  let map: { [char: string]: number } = {};\n  for (let i = 0;\
    \ i < string.length; i++) {\n    const c = string[i];\n    if (map[c] === undefined)\
    \ {\n      map[c] = 0;\n    }\n    map[c] += 1;\n  }\n\n  return map[\"[\"] >\
    \ 0 && map[\"[\"] === map[\"]\"];\n}\n", "    if (string.length < 2) {\n     \
    \   return false;\n    }\n    let stack: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        const current: string = string[i];\n      \
    \  if (current === \"[\") {\n            stack.push(current);\n        } else\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    const n = string.length;\n    let dict = {\n        \"[\"\
    : \"]\",\n        \"{\": \"}\",\n        \"(\": \")\"\n    };\n    let stack =\
    \ [];\n    for (let i = 0; i < n; i++) {\n        let cur = string[i];\n     \
    \   if (dict[cur]) {\n            stack.push(cur);\n        } else {\n       \
    \     if (dict[stack.pop()] !== cur) {\n                return false;\n      \
    \      }\n        }\n    }\n    return !stack.length;\n}\n", "    var open = 0;\n\
    \    var close = 0;\n    var count = 0;\n    for (var i = 0; i < string.length;\
    \ i++) {\n        if (string[i] == '[') {\n            open = i;\n           \
    \ for (var j = i; j < string.length; j++) {\n                if (string[j] ==\
    \ ']') {\n                    close = j;\n                    if (close < open)\
    \ {\n                        return false;\n                    }\n          \
    \          count++;\n                    break;\n                }\n         \
    \   }\n        }\n    }\n    if (count > 1) {\n        return true;\n    }\n \
    \   return false;\n}\n", "    let sum = 0;\n    let list = [];\n    for (let i\
    \ = 0; i < string.length; i++) {\n        if (string[i] == \"[\") {\n        \
    \    sum += 1;\n            list.push(string[i]);\n        }\n        else if\
    \ (string[i] == \"]\") {\n            sum -= 1;\n            list.push(string[i]);\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    if\
    \ (sum != 0) {\n        return false;\n    }\n    for (let i = 0; i < list.length;\
    \ i++) {\n        if (list[i] == \"[\" && list[i + 1] == \"]\") {\n          \
    \  return true;\n        }\n    }\n    return false;\n}", "    let array: string[]\
    \ = string.split('');\n    let counter: number = 0;\n    for (let i: number =\
    \ 0; i < array.length; i++) {\n        if (array[i] === '[') {\n            counter++;\n\
    \        } else if (array[i] === ']') {\n            counter--;\n        }\n \
    \       if (counter < 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    let stack: string[] =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\
    \        if (char === '[') {\n            stack.push(char);\n        } else if\
    \ (char === ']') {\n            const previous = stack.pop();\n            if\
    \ (previous !== '[') {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\n", "    let count: number = 0;\n    let out:\
    \ boolean = false;\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            count++;\n        } else if (string[i]\
    \ === \"]\") {\n            count--;\n        }\n        if (count < 0) {\n  \
    \          out = false;\n            break;\n        } else if (count > 0) {\n\
    \            out = true;\n        }\n    }\n    return out;\n}\n", "  let counter:\
    \ number = 0;\n  let check: number = 0;\n  for (let i: number = 0; i < string.length;\
    \ i++) {\n    if (string[i] === \"[\") {\n      counter++;\n    } else if (string[i]\
    \ === \"]\") {\n      counter--;\n    }\n    if (counter < 0) {\n      check++;\n\
    \    }\n  }\n  if (counter === 0 && check === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let result: boolean = false;\n    let openBrackets = 0;\n    let closedBrackets\
    \ = 0;\n    string.split('').forEach(element => {\n        if (element === \"\
    [\") {\n            openBrackets++;\n        } else if (element === \"]\") {\n\
    \            closedBrackets++;\n        }\n    });\n    if (openBrackets > closedBrackets)\
    \ {\n        result = true;\n    }\n    return result;\n}\n", "    let countOpen\
    \ = 0;\n    let countClose = 0;\n    for (let index = 0; index < string.length;\
    \ index++) {\n        const element = string[index];\n        if (element ===\
    \ '[') countOpen++;\n        if (element === ']') countClose++;\n        if (countClose\
    \ > countOpen) return false;\n    }\n    return countOpen === countClose && countOpen\
    \ > 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\n", "    let stack: string[]\
    \ = [];\n    for (let char of string) {\n        if (char === \"[\") {\n     \
    \       stack.push(char);\n        } else if (char === \"]\") {\n            if\
    \ (stack.length === 0) {\n                return false;\n            } else {\n\
    \                stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "  return false;\n}\n", "  let stack: string[] = [];\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n\
    \    } else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n    \
    \    return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n\
    \  return stack.length === 0;\n}\n", "    let count = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            count++;\n\
    \        } else if (string[i] === \"]\") {\n            count--;\n        }\n\
    \        if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    let stack: string[] = [];\n    let leftBracket: string\
    \ = \"[\";\n    let rightBracket: string = \"]\";\n    for (let c of string) {\n\
    \        if (c === leftBracket) {\n            stack.push(c);\n        } else\
    \ if (c === rightBracket) {\n            if (stack.length > 0) {\n           \
    \     let lastChar: string = stack.pop();\n                if (lastChar === rightBracket)\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "  const stack: string[] = [];\n  for (let i = 0;\
    \ i < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n\
    \    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length > 0;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    if (string.length % 2 !== 0) {\n  \
    \      return false;\n    }\n\n    let stack: string[] = [];\n    let openSquare:\
    \ string = \"[\";\n    let closeSquare: string = \"]\";\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        if (string[i] === openSquare) {\n  \
    \          stack.push(string[i]);\n        } else if (string[i] === closeSquare)\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "  let leftBracket: number = 0;\n  let rightBracket: number = 0;\n\
    \  for (let i: number = 0; i < string.length; i++) {\n    if (string[i] === \"\
    [\") {\n      leftBracket += 1;\n    } else if (string[i] === \"]\") {\n     \
    \ rightBracket += 1;\n    }\n  }\n  return leftBracket > rightBracket ? true :\
    \ false;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    let stack: string[] =\
    \ [];\n    let char: string;\n    let balanced: boolean = true;\n    let index:\
    \ number = 0;\n    while (index < string.length && balanced) {\n        char =\
    \ string[index];\n        if (char === \"[\") {\n            stack.push(char);\n\
    \        } else {\n            if (stack.length === 0) {\n                balanced\
    \ = false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n        index += 1;\n    }\n    return balanced && stack.length ===\
    \ 0;\n}\n", "    let result: boolean = false;\n    let open_brackets: number =\
    \ 0;\n    let close_brackets: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            open_brackets++;\n \
    \       } else if (string[i] === \"]\") {\n            close_brackets++;\n   \
    \     }\n        if (close_brackets > open_brackets) {\n            result = false;\n\
    \            break;\n        } else {\n            result = true;\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let count = 0;\n    for (let character of string) {\n        if (character\
    \ === \"[\") {\n            count++;\n        } else if (character === \"]\")\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count > 0 ? false : true;\n}", "    var\
    \ n = 0;\n    for (var c of string) {\n        if (c == '[') n += 1;\n       \
    \ else if (c == ']') n -= 1;\n        if (n < 0) return false;\n    }\n    return\
    \ n == 0;\n}", "    let is_nested: boolean = false;\n    let start_bracket: number\
    \ = 0;\n    let end_bracket: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            start_bracket += 1;\n\
    \        } else if (string[i] === \"]\") {\n            end_bracket += 1;\n  \
    \      }\n    }\n    if (start_bracket > end_bracket) {\n        is_nested = true;\n\
    \    }\n    return is_nested;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack = []\n    for (let char of string) {\n        if (char\
    \ === '[') {\n            stack.push(char)\n        } else if (char === ']') {\n\
    \            if (stack.length === 0) {\n                return false\n       \
    \     } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return true\n}\n", "    let brackets: string[] = string.split('');\n    let\
    \ sum: number = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"[\") {\n            sum++;\n        } else {\n          \
    \  sum--;\n        }\n        if (sum < 0) {\n            return false;\n    \
    \    }\n    }\n    return sum === 0;\n}\n", "    let dict: {[index:string]: number}\
    \ = {};\n    for (let i of string) {\n        dict[i] = (dict[i] || 0) + 1;\n\
    \    }\n    if (dict[\"[\"] != dict[\"]\"]) {\n        return false;\n    }\n\
    \    let length = string.length;\n    let s: string[] = [];\n    for (let i =\
    \ 0; i < length; i++) {\n        if (string[i] == \"[\") {\n            s.push(string[i]);\n\
    \        } else {\n            if (s.length == 0) {\n                return false;\n\
    \            } else {\n                s.pop();\n            }\n        }\n  \
    \  }\n    return true;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let left: number = 0;\n    let right: number = 0;\n    let count_L:\
    \ number = 0;\n    let count_R: number = 0;\n    let test: boolean = false;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] == \"[\"\
    ) {\n            count_L++;\n            left++;\n        }\n        if (string[i]\
    \ == \"]\") {\n            count_R++;\n            right++;\n        }\n     \
    \   if (left == right) {\n            if (count_L - count_R != 0) {\n        \
    \        test = true;\n            }\n            left = 0;\n            right\
    \ = 0;\n            count_L = 0;\n            count_R = 0;\n        }\n    }\n\
    \    return test;\n}\n", "    let openBrackets: number = 0;\n    let closedBrackets:\
    \ number = 0;\n    for (let i: number = 0; i < string.length; i++) {\n       \
    \ if (string[i] === \"[\") {\n            openBrackets++;\n        } else if (string[i]\
    \ === \"]\") {\n            closedBrackets++;\n        }\n    }\n    return openBrackets\
    \ > closedBrackets ? true : false;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    if (string.length === 0) return false;\n    const stack: string[] =\
    \ [];\n    for (let i: number = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else {\n       \
    \     if (stack.length === 0) return false;\n            stack.pop();\n      \
    \  }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "  let stack: string[] = [];\n  let pairs: string[] = [];\n  let\
    \ open_brackets: string[] = [];\n  let string_array: string[] = string.split(\"\
    \");\n  let length: number = string_array.length;\n  for (let i: number = 0; i\
    \ < length; i++) {\n    if (\n      string_array[i] === \"[\" ||\n      string_array[i]\
    \ === \"]\" ||\n      string_array[i] === \"(\" ||\n      string_array[i] ===\
    \ \")\"\n    ) {\n      open_brackets.push(string_array[i]);\n    }\n  }\n  if\
    \ (\n    open_brackets.length === 0 ||\n    open_brackets.length % 2 === 1 ||\n\
    \    open_brackets[0] === \"]\" ||\n    open_brackets[0] === \")\"\n  ) {\n  \
    \  return false;\n  }\n  for (let i: number = 0; i < open_brackets.length; i++)\
    \ {\n    if (\n      open_brackets[i] === \"[\" ||\n      open_brackets[i] ===\
    \ \"(\" ||\n      open_brackets[i] === \"{\"\n    ) {\n      stack.push(open_brackets[i]);\n\
    \    } else {\n      if (\n        open_brackets[i] === \"]\" &&\n        stack[stack.length\
    \ - 1] === \"[\" &&\n        pairs.indexOf(\"[]\") === -1\n      ) {\n       \
    \ pairs.push(\"[]\");\n        stack.pop();\n      } else if (\n        open_brackets[i]\
    \ === \")\" &&\n        stack[stack.length - 1] === \"(\" &&\n        pairs.indexOf(\"\
    ()\") === -1\n      ) {\n        pairs.push(\"()\");\n        stack.pop();\n \
    \     } else if (\n        open_brackets[i] === \"}\" &&\n        stack[stack.length\
    \ - 1] === \"{\" &&\n        pairs.indexOf(\"{}\") === -1\n      ) {\n       \
    \ pairs.push(\"{}\");\n        stack.pop();\n      } else {\n        return false;\n\
    \      }\n    }\n  }", "    let nest = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let char = string[i];\n        if (char === \"[\") {\n     \
    \       nest++;\n        } else if (char === \"]\") {\n            nest--;\n \
    \       }\n        if (nest < 0) {\n            return false;\n        }\n   \
    \ }\n    return nest === 0;\n}\n", "    let stack: string[] = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length == 0) {\n                return false;\n       \
    \     } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length == 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "  const openers: string[] = [];\n  const matches: { [key: string]: string\
    \ } = {\n    \"[\": \"]\",\n    \"{\": \"}\",\n    \"(\": \")\"\n  };\n  for (let\
    \ char of string) {\n    if (char in matches) {\n      openers.push(char);\n \
    \   } else {\n      if (matches[openers.pop()] !== char) {\n        return false;\n\
    \      }\n    }\n  }\n  return openers.length === 0;\n}\n", "  if (string.length\
    \ == 0) return false;\n  let stack: string[] = [];\n  for (let i: number = 0;\
    \ i < string.length; i++) {\n    if (string[i] == '[') {\n      stack.push('[');\n\
    \    } else {\n      if (stack.length == 0) return false;\n      if (stack[stack.length\
    \ - 1] == '[') {\n        stack.pop();\n      } else {\n        stack.push(']');\n\
    \      }\n    }\n  }\n  return stack.length == 0;\n}\n", "    let open: number\
    \ = 0;\n    let close: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            open++;\n        } else\
    \ if (string[i] === ']') {\n            close++;\n        }\n    }\n    if (open\
    \ === close) {\n        return false;\n    } else {\n        return true;\n  \
    \  }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n  \
    \          stack.push(string[i]);\n        } else if (string[i] === ']') {\n \
    \           if (stack.length === 0) {\n                return false;\n       \
    \     } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "  const result: boolean = (string.match(/\\\
    [/g)?.length || 0) > 1;\n  return result;\n}\n", "    let square_bracket_opened:\
    \ number = 0;\n    let square_bracket_closed: number = 0;\n    let first_closed_found:\
    \ boolean = false;\n    let is_proper_string: boolean = true;\n    for (let i\
    \ = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n       \
    \     square_bracket_opened++;\n        } else if (string[i] === \"]\") {\n  \
    \          square_bracket_closed++;\n            if (square_bracket_closed <=\
    \ square_bracket_opened) {\n                if (first_closed_found) {\n      \
    \              is_proper_string = false;\n                    break;\n       \
    \         }\n            } else {\n                if (!first_closed_found) {\n\
    \                    first_closed_found = true;\n                }\n         \
    \   }\n        }\n    }\n    return square_bracket_opened === square_bracket_closed\
    \ && first_closed_found && is_proper_string;\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "  let stack: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n    }\
    \ else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return\
    \ stack.length !== 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    var leftBrackets = 0;\n    var rightBrackets = 0;\n    for (var x =\
    \ 0; x < string.length; x++) {\n        if (string[x] == '[') {\n            leftBrackets++;\n\
    \        }\n        if (string[x] == ']') {\n            rightBrackets++;\n  \
    \      }\n        if (rightBrackets > leftBrackets) {\n            return false;\n\
    \        }\n    }\n    if (leftBrackets != rightBrackets) {\n        return false;\n\
    \    }\n    return true;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = []\n    for (let i = 0; i < string.length; i++) {\n   \
    \     let bracket = string[i]\n        if (bracket === '[') {\n            stack.push(bracket)\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false\n            }\n            stack.pop()\n        }\n    }\n    return\
    \ stack.length > 0\n}\n\nconsole.log(is_nested(\"[][]\"))\nconsole.log(is_nested(\"\
    [[]]\"))\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"))\nconsole.log(is_nested(\"\
    [][]\"))\nconsole.log(is_nested(\"[]\"))\nconsole.log(is_nested(\"[[][]]\"))\n\
    console.log(is_nested(\"[[]][[\"))", "    let count: number = 0;\n    for (let\
    \ char of string) {\n        if (char === \"[\") {\n            count++;\n   \
    \     } else if (char === \"]\") {\n            count--;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));\n", "  //do something\n  return\
    \ false;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "  const stack: string[] =\
    \ [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\"\
    ) {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0)\
    \ {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return\
    \ true;\n}\n", "    const stringChar = string.split('');\n    let leftSquare =\
    \ 0;\n    let rightSquare = 0;\n    let leftRound = 0;\n    let rightRound = 0;\n\
    \    let leftCurly = 0;\n    let rightCurly = 0;\n    let leftAngle = 0;\n   \
    \ let rightAngle = 0;\n    let left = 0;\n    let right = 0;\n    for (let i =\
    \ 0; i < stringChar.length; i++) {\n        if (stringChar[i] === '[') {\n   \
    \         leftSquare += 1;\n            left += 1;\n        }\n        if (stringChar[i]\
    \ === ']') {\n            rightSquare += 1;\n            right += 1;\n       \
    \ }\n        if (stringChar[i] === '(') {\n            leftRound += 1;\n     \
    \       left += 1;\n        }\n        if (stringChar[i] === ')') {\n        \
    \    rightRound += 1;\n            right += 1;\n        }\n        if (stringChar[i]\
    \ === '{') {\n            leftCurly += 1;\n            left += 1;\n        }\n\
    \        if (stringChar[i] === '}') {\n            rightCurly += 1;\n        \
    \    right += 1;\n        }\n        if (stringChar[i] === '<') {\n          \
    \  leftAngle += 1;\n            left += 1;\n        }\n        if (stringChar[i]\
    \ === '>') {\n            rightAngle += 1;\n            right += 1;\n        }\n\
    \    }\n    if (leftSquare === rightSquare && leftRound === rightRound && leftCurly\
    \ === rightCurly && leftAngle === rightAngle && left === right) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let left_brackets = 0;\n    let right_brackets\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            left_brackets++;\n        } else {\n            right_brackets++;\n\
    \        }\n        if (right_brackets > left_brackets) {\n            return\
    \ false;\n        }\n    }\n    return left_brackets > right_brackets ? false\
    \ : true;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    // Your code here\n  \
    \  let i = 0\n    let nest = 0\n    while (i < string.length) {\n        if (string[i]\
    \ == '[') {\n            nest += 1\n        } else if (string[i] == ']') {\n \
    \           nest -= 1\n        }\n        if (nest < 0) {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return nest > 0\n}\n", "  let count\
    \ = 0;\n  let stack: string[] = [];\n  const stringArray = string.split(\"\");\n\
    \  for (let i = 0; i < stringArray.length; i++) {\n    if (stringArray[i] ===\
    \ \"[\") {\n      count++;\n      stack.push(stringArray[i]);\n    } else if (stringArray[i]\
    \ === \"]\") {\n      count--;\n      stack.pop();\n    }\n  }\n  return count\
    \ === 0 && stack.length !== 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let openBracketCounter: number = 0;\n    let closeBracketCounter:\
    \ number = 0;\n    let hasNested: boolean = false;\n    for (let index = 0; index\
    \ < string.length; index++) {\n        if (string[index] === \"[\") {\n      \
    \      openBracketCounter++;\n        } else if (string[index] === \"]\") {\n\
    \            closeBracketCounter++;\n        }\n        if (closeBracketCounter\
    \ > openBracketCounter) {\n            return false;\n        }\n        if (openBracketCounter\
    \ > closeBracketCounter) {\n            hasNested = true;\n        }\n    }\n\
    \    return openBracketCounter === closeBracketCounter && hasNested;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    var counter = 0;\n    for (var i\
    \ = 0; i < string.length; i++) {\n        if (string[i] == '[') {\n          \
    \  counter += 1;\n        } else if (string[i] == ']') {\n            counter\
    \ -= 1;\n        }\n        if (counter < 0) {\n            return false;\n  \
    \      }\n    }\n    return counter == 0;\n}\n", "    let brackets = string.split('');\n\
    \    let to_check: string[] = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '[') {\n            to_check.push(brackets[i]);\n\
    \        } else {\n            if (to_check.length === 0) {\n                return\
    \ false;\n            } else {\n                to_check.pop();\n            }\n\
    \        }\n    }\n    return to_check.length === 0 ? false : true;\n}\n", " \
    \ //return false if no brackets\n  if (string.indexOf(\"[\") === -1 && string.indexOf(\"\
    ]\") === -1) {\n    return false;\n  }\n  //get the positions of brackets\n  let\
    \ left = [];\n  let right = [];\n  for (let i = 0; i < string.length; i++) {\n\
    \    if (string[i] === \"[\") {\n      left.push(i);\n    } else if (string[i]\
    \ === \"]\") {\n      right.push(i);\n    }\n  }\n  //if no right brackets, return\
    \ false\n  if (right.length === 0) {\n    return false;\n  }\n  //if no left brackets,\
    \ return false\n  if (left.length === 0) {\n    return false;\n  }\n  //check\
    \ for positions\n  for (let i = 0; i < left.length; i++) {\n    for (let j = 0;\
    \ j < right.length; j++) {\n      if (left[i] < right[j]) {\n        //check for\
    \ nesting\n        if (left[i + 1] > right[j]) {\n          return true;\n   \
    \     }\n      }\n    }\n  }\n  return false;\n}\n", "    let check = 0;\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\")\
    \ {\n            check++;\n        } else if (string[i] === \"]\") {\n       \
    \     check--;\n        }\n        if (check < 0) {\n            return false;\n\
    \        }\n    }\n    return check !== 0 ? false : true;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    // We initialize two stacks.\n  \
    \  // The first one is to check if the string is valid.\n    // The second one\
    \ is to check if there is at least one nested bracket.\n    let stack1: string[]\
    \ = [];\n    let stack2: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        // If the next character is [, we push it in the first stack.\n\
    \        if (string[i] === \"[\") {\n            stack1.push(string[i]);\n   \
    \     }\n        // If the next character is ], we check if the stack is empty.\n\
    \        // If it is empty, the string is not valid and we return false.\n   \
    \     // If it is not empty, we pop from the first stack and from the second one.\n\
    \        else if (string[i] === \"]\") {\n            if (stack1.length == 0)\
    \ return false;\n            stack1.pop();\n            stack2.pop();\n      \
    \  }\n        // If the stack is not empty and the next character is [,\n    \
    \    // we pop from the second stack and we push in both stacks.\n        else\
    \ if (stack1.length != 0 && string[i] === \"[\") {\n            stack2.pop();\n\
    \            stack1.push(string[i]);\n            stack2.push(string[i]);\n  \
    \      }\n        // Otherwise, we just push in both stacks.\n        else {\n\
    \            stack1.push(string[i]);\n            stack2.push(string[i]);\n  \
    \      }\n    }\n    // If the second stack is empty, there are no nested brackets.\n\
    \    if (stack2.length == 0) return false;\n    return true;\n}\n", "  // let\
    \ areBracketsBalanced = 0;\n  // for (let character of string) {\n  //   if (character\
    \ === '[') {\n  //     areBracketsBalanced++;\n  //   } else if (character ===\
    \ ']') {\n  //     areBracketsBalanced--;\n  //   }\n  //   if (areBracketsBalanced\
    \ < 0) {\n  //     return false;\n  //   }\n  // }\n  // return areBracketsBalanced\
    \ === 0;\n  let stack: number[] = [];\n  for (let character of string) {\n   \
    \ if (character === '[') {\n      stack.push(character);\n    } else if (character\
    \ === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n\
    \      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n\ntest(is_nested('[[]]'),\
    \ true);\ntest(is_nested('[]]]]]]][[[[[]'), false);\ntest(is_nested('[][]'), false);\n\
    test(is_nested('[]'), false);\ntest(is_nested('[[][]]'), true);\ntest(is_nested('[[]][[')),\
    \ true;\n", "    let cont: number = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] == \"[\") cont++;\n        else if (string[i]\
    \ == \"]\") cont--;\n        if (cont < 0) break;\n    }\n    return cont == 0;\n\
    }\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    var arr = [];\n    for\
    \ (var i = 0; i < string.length; i++) {\n        if (string[i] == \"[\") {\n \
    \           arr.push(i);\n        }\n        else if (string[i] == \"]\") {\n\
    \            if (arr.length == 0) {\n                return false;\n         \
    \   }\n            else {\n                arr.pop();\n            }\n       \
    \ }\n    }\n    if (arr.length == 0) {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    let stack = new Stack<string>();\n\
    \    for (let i = 0; i < string.length; i++) {\n        let c = string[i];\n \
    \       if (c === '[') {\n            stack.push(c);\n        } else if (c ===\
    \ ']') {\n            if (stack.size() === 0) {\n                return false;\n\
    \            }\n            let previous = stack.pop();\n            if (previous\
    \ !== '[') {\n                return false;\n            }\n        }\n    }\n\
    \    return stack.size() === 0;\n}\n\n", "    let array: string[] = string.split('');\n\
    \    let isNested: boolean = false;\n    let counter1: number = 0;\n    let counter2:\
    \ number = 0;\n    let counter3: number = 0;\n    let counter4: number = 0;\n\
    \    array.forEach(element => {\n        if (element === \"[\") {\n          \
    \  counter1++;\n        }\n        if (element === \"]\") {\n            counter2++;\n\
    \        }\n        if (counter1 - counter2 === 1) {\n            counter3++;\n\
    \        }\n        if (counter2 - counter1 === 1) {\n            counter4++;\n\
    \        }\n    });\n    isNested = (counter3 > 0 && counter4 > 0) ? true : false;\n\
    \    return isNested;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "  //find first open bracket\n  let index: number = string.indexOf(\"[\"\
    );\n  //if none, return false\n  if (index === -1) {\n    return false;\n  }\n\
    \  //continue through string from open bracket until you find a close bracket\n\
    \  let bracketCount: number = 1;\n  for (let i: number = index + 1; i < string.length;\
    \ i++) {\n    if (string[i] === \"[\") {\n      bracketCount++;\n    } else if\
    \ (string[i] === \"]\") {\n      bracketCount--;\n    }\n    if (bracketCount\
    \ === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "    let counter:\
    \ number = 0;\n    for (let i: number = 0; i < string.length; i++) {\n       \
    \ if (string[i] === \"[\") {\n            counter++;\n        } else if (string[i]\
    \ === \"]\") {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            return false;\n        }\n    }\n    return counter == 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "  const { length } = string;\n  let oddLength\
    \ = false;\n  let leftCount = 0;\n  let rightCount = 0;\n  for (let i = 0; i <\
    \ length; i++) {\n    const current = string[i];\n    if (current === \"[\") {\n\
    \      leftCount++;\n    } else {\n      rightCount++;\n    }\n    if (rightCount\
    \ > leftCount) {\n      return false;\n    }\n  }\n  if (leftCount % 2 !== 0)\
    \ {\n    oddLength = true;\n  }\n  if (oddLength) {\n    const leftHalf = leftCount\
    \ / 2;\n    const rightHalf = rightCount / 2;\n    for (let i = 0; i < length;\
    \ i++) {\n      const current = string[i];\n      if (current === \"[\") {\n \
    \       leftHalf--;\n      } else {\n        rightHalf--;\n      }\n      if (leftHalf\
    \ < 0 || rightHalf < 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}", "    let arr = string.split('');\n    // let first = string.indexOf('[');\n\
    \    // let last = string.lastIndexOf(']');\n    // if (first > last) {\n    //\
    \     return false;\n    // }\n    // let arr = string.split('');\n    // let\
    \ test = [];\n    // let count = 0;\n    // let check1 = false;\n    // let check2\
    \ = false;\n    // if (arr[first] === '[' && arr[last] === ']') {\n    //    \
    \ for (let i = first; i < last; i++) {\n    //         if (arr[i] === '[') {\n\
    \    //             count++;\n    //             test.push(arr[i]);\n    //  \
    \       }\n    //         if (arr[i] === ']') {\n    //             count--;\n\
    \    //             test.push(arr[i]);\n    //         }\n    //     }\n    //\
    \     for (let i = 0; i < test.length; i++) {\n    //         if (test[i] ===\
    \ '[' && test[i + 1] === ']') {\n    //             check1 = true;\n    //   \
    \      }\n    //         if (test[i] === '[' && test[i + 1] === '[') {\n    //\
    \             check2 = true;\n    //         }\n    //     }\n    //     if (check1\
    \ === true && check2 === true && count === 0) {\n    //         return true;\n\
    \    //     }\n    // }\n    // return false;\n    let check: string[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === '[') {\n \
    \           check.push(arr[i]);\n        }\n        if (arr[i] === ']') {\n  \
    \          check.push(arr[i]);\n        }\n    }\n    if (check.length < 1) {\n\
    \        return false;\n    }\n    if (check[0] === ']' || check[check.length\
    \ - 1] === '[') {\n        return false;\n    }\n    if (check.length % 2 !",
  "    let s = 0\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == \"[\") s += 1\n        else s -= 1\n        if (s < 0) return false\n   \
    \ }\n    return s == 0\n}\n\n", "    let found_left: boolean = false;\n    let\
    \ found_right: boolean = false;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            found_left = true;\n\
    \        }\n        if (string[i] === \"]\") {\n            found_right = true;\n\
    \        }\n    }\n    if (found_left && found_right) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            count++;\n        } else\
    \ if (string[i] === \"]\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count > 0 ?\
    \ false : true;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let open_count = 0;\n    let close_count = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === '[') {\n            open_count++;\n\
    \        } else if (string[i] === ']') {\n            close_count++;\n       \
    \ }\n    }\n    return open_count === close_count;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let i = 0;\n    while (i < string.length)\
    \ {\n        let match = string.substring(i, i + 2);\n        if (match === \"\
    []\") {\n            return true;\n        }\n        i++;\n    }\n    return\
    \ false;\n}\n", "  const bracket_open = '['\n  const bracket_close = ']'\n  const\
    \ stack = []\n\n  for (let i = 0; i < string.length; i++) {\n    const bracket\
    \ = string[i]\n    if (bracket === bracket_open) {\n      stack.push(bracket)\n\
    \    } else if (bracket === bracket_close) {\n      if (stack.length === 0) {\n\
    \        return false\n      } else {\n        stack.pop()\n      }\n    }\n \
    \ }\n\n  return true\n}\n", "    let stack: string[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length < 1)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return true;\n}", "    let stack: Array<string>\
    \ = []\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            stack.push(string[i])\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.length === 0\n}\n", "  if (string.length < 2) {\n   \
    \ return false;\n  }\n\n  // Create a stack to keep track of our opening brackets.\n\
    \  let stack: string[] = [];\n\n  // Loop through our string and check if the\
    \ top of the stack has an opening bracket\n  // if the current character is a\
    \ closing bracket.\n  for (let char of string) {\n    if (char === '[' && stack[stack.length\
    \ - 1] === '[') {\n      stack.push(char);\n    } else if (char === ']' && stack[stack.length\
    \ - 1] === '[') {\n      stack.pop();\n    } else if (char === '[') {\n      stack.push(char);\n\
    \    } else if (char === ']' && stack[stack.length - 1] !== '[') {\n      return\
    \ false;\n    }\n  }\n\n  // Return true if we have a valid sequence of brackets.\n\
    \  return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "  let arr: string[] = string.split(\"\");\n  let isNested: boolean = false;\n\
    \  let startBracket: number = 0;\n  let endBracket: number = 0;\n  arr.forEach(element\
    \ => {\n    if (element === \"[\") {\n      startBracket++;\n    } else if (element\
    \ === \"]\") {\n      endBracket++;\n    }\n  });\n  if (startBracket !== endBracket)\
    \ {\n    isNested = false;\n  } else {\n    for (let i = 0; i < arr.length; i++)\
    \ {\n      if (arr[i] === \"[\" && arr[i + 1] === \"]\") {\n        isNested =\
    \ true;\n        break;\n      } else {\n        isNested = false;\n      }\n\
    \    }\n  }\n  return isNested;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let string_arr = string.split('');\n    for (let i = 0; i < string_arr.length;\
    \ i++) {\n        if (string_arr[i] === '[') {\n            for (let j = i + 1;\
    \ j < string_arr.length; j++) {\n                if (string_arr[j] === ']') {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}", "  if (string.length === 0) {\n    return false;\n\
    \  }\n  let index = 0;\n  let openBracket = false;\n  let lastWasClosed = false;\n\
    \  while (index < string.length) {\n    if (string[index] === \"[\") {\n     \
    \ openBracket = true;\n      lastWasClosed = false;\n    } else if (string[index]\
    \ === \"]\") {\n      if (lastWasClosed) {\n        return false;\n      }\n \
    \     lastWasClosed = true;\n    }\n    index++;\n  }\n  return openBracket;\n\
    }\n", "    // returns true if a bracket is nested.\n    let is_nested = false;\n\
    \    // returns false is a bracket doesn't match, e.g. [ } ]\n    let is_valid\
    \ = true;\n    // has to be an odd number to be valid\n    if (string.length %\
    \ 2 === 0) {\n        return false;\n    }\n    // iterate over the string\n \
    \   for (let i = 0; i < string.length; i++) {\n        // if the element is a\
    \ \"[\"\n        if (string[i] === \"[\") {\n            // iterate over the string\
    \ starting at the next index\n            for (let j = i + 1; j < string.length;\
    \ j++) {\n                // if the element is a \"[\"\n                if (string[j]\
    \ === \"[\") {\n                    // return true as it is a nested bracket\n\
    \                    return true;\n                }\n                // if the\
    \ element is a \"]\"\n                if (string[j] === \"]\") {\n           \
    \         // return false as we have found a valid bracket\n                 \
    \   return false;\n                }\n            }\n        }\n        // if\
    \ the element is a \"]\"\n        if (string[i] === \"]\") {\n            // iterate\
    \ over the string starting at the next index\n            for (let j = i + 1;\
    \ j < string.length; j++) {\n                // if the element is a \"]\"\n  \
    \              if (string[j] === \"]\") {\n                    // return true\
    \ as it is a nested bracket\n                    return true;\n              \
    \  }\n                // if the element is a \"[\"\n                if (string[j]\
    \ === \"[\") {\n                    // return false as we have found a valid bracket\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    // if it gets to this stage, no bracket has been nested, so return\
    \ false\n    return false;\n}", "    const stack: number[] = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n\
    \            stack.push(i);\n        } else if (string[i] === ']') {\n       \
    \     if (stack.length === 0) {\n                return false;\n            }\n\
    \            stack.pop();\n        }\n    }\n    if (stack.length === 0) {\n \
    \       return true;\n    }\n    return false;\n}\n", "    let stack: string[]\
    \ = [];\n    for (let i: number = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length > 0) {\n                stack.pop();\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return stack.length > 0 ? false : true;\n}\n", "    let temp: number\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ==\
    \ '[') {\n            temp++;\n        } else {\n            temp--;\n       \
    \ }\n        if (temp < 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "  return string.length > 1 && /\\[\\[[^\\]]*\\]\\]/.test(string);\n\
    }", "    if (string.length < 2) {\n        return false;\n    }\n    let s: string[]\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        let ch = string[i];\n\
    \        if (ch === '[') {\n            s.push(ch);\n        } else if (ch ===\
    \ ']') {\n            if (s.length === 0) {\n                return false;\n \
    \           }\n            s.pop();\n        }\n    }\n    return s.length ===\
    \ 0;\n}\n", "  let count = 0;\n  let isNested = false;\n  let stringLength = string.length;\n\
    \  for (let i = 0; i < stringLength; i++) {\n    if (string[i] === \"[\") {\n\
    \      count++;\n    } else if (string[i] === \"]\") {\n      count--;\n    }\n\
    \    if (count > 1) {\n      return false;\n    }\n    if (count === 1) {\n  \
    \    isNested = true;\n    }\n  }\n  return isNested;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "  let stack: string[] = [];\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n\
    \    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n      \
    \  return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n\
    \  return stack.length !== 0;\n}\n", "    const my_stack = new Stack<string>();\n\
    \    for (let letter of string) {\n        if (letter === '[') {\n           \
    \ my_stack.push(letter);\n        } else if (letter === ']') {\n            if\
    \ (my_stack.isEmpty()) {\n                return false;\n            } else {\n\
    \                my_stack.pop();\n            }\n        }\n    }\n    return\
    \ my_stack.isEmpty();\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: string[] = []\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i])\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.length === 0\n}", "    let\
    \ balanced = true;\n    let stack: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let char = string[i];\n        if (char === \"[\") {\n     \
    \       stack.push(char);\n        } else if (char === \"]\") {\n            if\
    \ (stack.length > 0) {\n                stack.pop();\n            } else {\n \
    \               balanced = false;\n                break;\n            }\n   \
    \     }\n    }\n    if (stack.length > 0) {\n        balanced = false;\n    }\n\
    \    return balanced;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = []\n    for (let char of string) {\n        if (char ===\
    \ '[') {\n            stack.push(char)\n        } else if (char === ']') {\n \
    \           if (stack.length === 0) {\n                return false\n        \
    \    } else {\n                stack.pop()\n            }\n        }\n    }\n\
    \    return stack.length === 0\n}\n", "    let countOpen: number = 0;\n    let\
    \ countClose: number = 0;\n    let i: number = 0;\n    let bracket: string;\n\
    \    let open: string = \"[\";\n    let close: string = \"]\";\n    for (let i:\
    \ number = 0; i < string.length; i++) {\n        bracket = string.charAt(i);\n\
    \        if (bracket === open) {\n            countOpen++;\n        } else if\
    \ (bracket === close) {\n            countClose++;\n        }\n    }\n    if (countOpen\
    \ === countClose) {\n        return false;\n    } else {\n        return true;\n\
    \    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    const stack: string[]\
    \ = [];\n    for (let i: number = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length !== 0;\n}\n", "    let bracketCounter:\
    \ number = 0;\n    let stringArr: string[] = string.split('');\n    for (let i:\
    \ number = 0; i < stringArr.length; i++) {\n        if (stringArr[i] === \"[\"\
    ) {\n            bracketCounter++;\n        } else if (stringArr[i] === \"]\"\
    ) {\n            bracketCounter--;\n        }\n        if (bracketCounter < 0)\
    \ {\n            return false;\n        }\n    }\n    return bracketCounter ===\
    \ 0;\n}\n", "  let stack: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else\
    \ if (string[i] === ']') {\n      if (stack.length > 0) {\n        stack.pop();\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length\
    \ === 0;\n}\n", "    // Your implementation goes here.\n    // An empty string\
    \ is not considered nested\n    if (string.length === 0) {\n        return false;\n\
    \    }\n    // if the length of string is even, then it's not nested\n    if (string.length\
    \ % 2 === 0) {\n        return false;\n    }\n    // if the first letter is a\
    \ closing bracket, then it's not nested\n    if (string[0] === ']') {\n      \
    \  return false;\n    }\n    // if there is a closing bracket before an opening\
    \ bracket, then it's not nested\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === ']') {\n            return false;\n        }\n    \
    \    if (string[i] === '[') {\n            break;\n        }\n    }\n    // Split\
    \ the string into 2-letter segments and check if it's nested\n    // If it is,\
    \ then return true, else continue splitting and checking\n    let tempString =\
    \ string;\n    for (let i = 0; i < string.length; i++) {\n        if (is_nested(tempString.slice(0,\
    \ tempString.length - 2))) {\n            return true;\n        }\n        tempString\
    \ = tempString.slice(1);\n    }\n    return false;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\nconsole.log(is_nested(\"[[\"));\nconsole.log(is_nested(\"\
    ]]]\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[",
  "    let bracketStack: string[] = [];\n    for (let c of string) {\n        if (c\
    \ === '[') {\n            bracketStack.push(c);\n        } else if (c === ']')\
    \ {\n            if (bracketStack.length === 0) {\n                return false;\n\
    \            } else {\n                bracketStack.pop();\n            }\n  \
    \      }\n    }\n    return bracketStack.length === 0;\n}\n", "    // if (string.length\
    \ === 0) {\n    //     return false;\n    // }\n    // if (string.length === 1)\
    \ {\n    //     return false;\n    // }\n    // if (string.length === 2) {\n \
    \   //     return false;\n    // }\n    // if (string.length === 3) {\n    //\
    \     return true;\n    // }\n    // let start = 0;\n    // let end = string.length\
    \ - 1;\n    // for (start; start < string.length; start++) {\n    //     if (string[start]\
    \ === \"[\") {\n    //         for (end; end > start; end--) {\n    //       \
    \      if (string[end] === \"]\") {\n    //                 if (start + 1 < end\
    \ - 1) {\n    //                     return true;\n    //                 }\n\
    \    //             }\n    //         }\n    //     }\n    // }\n    // return\
    \ false;\n    // Another method\n    let counter = 0;\n    for (let i = 0; i <\
    \ string.length; i++) {\n        if (string[i] === \"[\") {\n            counter++;\n\
    \        }\n        if (string[i] === \"]\") {\n            counter--;\n     \
    \   }\n        if (counter < 0) {\n            return false;\n        }\n    }\n\
    \    return counter === 0;\n}\n\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[]][[\"));\nconsole.log(is_nested(\"[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[",
  "    var stack = [];\n    for (var i = 0; i < string.length; i++) {\n        if\
    \ (string[i] == \"[\") {\n            stack.push(string[i]);\n        } else if\
    \ (string[i] == \"]\") {\n            if (stack.length == 0) {\n             \
    \   return false;\n            } else {\n                stack.pop();\n      \
    \      }\n        }\n    }\n    return stack.length == 0;\n}\n", "    let count:\
    \ number = 0;\n    for (let i: number = 0; i < string.length; i++) {\n       \
    \ if (string[i] === '[') {\n            count++;\n        } else if (string[i]\
    \ === ']') {\n            count--;\n        }\n        if (count < 0) {\n    \
    \        return false;\n        }\n    }\n    return count === 0;\n}\n", "   \
    \ let sqbrackets = string.match(/\\[\\]/g);\n    if (sqbrackets == null) {\n \
    \       return false;\n    }\n    return sqbrackets.length > 1;\n}\n", "    let\
    \ arr = string.split('')\n    let count = 0\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === '[') {\n            count++\n        } else if\
    \ (arr[i] === ']') {\n            count--\n        }\n        if (count < 0) {\n\
    \            return false\n        }\n    }\n    return count === 0\n}\nconsole.log(is_nested(\"\
    [[]]\")) // true\nconsole.log(is_nested(\"[]]]]]]][[[[[]\")) // false\nconsole.log(is_nested(\"\
    [][]\")) // false\nconsole.log(is_nested(\"[]\")) // false\nconsole.log(is_nested(\"\
    [[][]]\")) // true\nconsole.log(is_nested(\"[[]][[\")) // true\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
