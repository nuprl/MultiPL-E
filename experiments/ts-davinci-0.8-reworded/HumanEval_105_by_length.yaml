name: HumanEval_105_by_length
language: ts
prompt: "//Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n// reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1,\
  \ 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>>\
  \ by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>>\
  \ by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1,\
  \ 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
  One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\",\
  \ \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
  , \"Four\"]);\n}\n\ntest();"
completions: ["    if (arr.length === 0) {\n        return [];\n    }\n\n    return\
    \ arr\n        .filter(n => n >= 1 && n <= 9)\n        .sort((a, b) => a - b)\n\
    \        .reverse()\n        .map(n => get_number_name(n));\n}\n", "    return\
    \ arr.filter(e => e >= 1 && e <= 9).sort((a, b) => a - b).reverse().map(e => [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][e - 1]);\n}\n", "    const nums: number[] = [];\n    for (let num\
    \ of arr) {\n        if (num > 0 && num < 10) {\n            nums.push(num);\n\
    \        }\n    }\n    nums.sort((a, b) => b - a);\n    return nums.map(num =>\
    \ num_to_str(num));\n}\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "    if (arr.length === 0) {\n        return\
    \ [];\n    }\n    let result: string[] = [];\n    let temp: number[] = [];\n \
    \   for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => {\n        return a - b;\n    });\n    temp.reverse();\n    for (let i:\
    \ number = 0; i < temp.length; i++) {\n        switch (temp[i]) {\n          \
    \  case 1:\n                result.push(\"One\");\n                break;\n  \
    \          case 2:\n                result.push(\"Two\");\n                break;\n\
    \            case 3:\n                result.push(\"Three\");\n              \
    \  break;\n            case 4:\n                result.push(\"Four\");\n     \
    \           break;\n            case 5:\n                result.push(\"Five\"\
    );\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n\n\
    describe(\"by_length\", function() {\n    it(\"should work for some examples\"\
    , function() {\n        assert.deepEqual(by_length([2, 1, 1, 4, 5, 8, 2, 3]),\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]);\n        assert.deepEqual(by_length([2, 11, 1, 4, 5, 8, 9, 3]), [\"Nine\"\
    , \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]);\n        assert.deepEqual(by_length([0,\
    \ 1, 2, 3, 5, 8, 13, 21, 34]), [\"Eight\", \"Five\", \"Three\", \"Two\", \"One\"\
    ]);\n        assert.deepEqual(by_length([100, 1000, 10000, 100000, 1000000]),",
  "    var intToWord = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"\
    Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n  \
    \      7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n   \
    \ var arr2 = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            arr2.push(arr[i]);\n        }\n    }\n \
    \   arr2.sort();\n    var arr3 = [];\n    for (var i = 0; i < arr2.length; i++)\
    \ {\n        arr3.push(intToWord[arr2[i]]);\n    }\n    arr3.reverse();\n    return\
    \ arr3;\n}\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "    var results: string[] = [];\n    var\
    \ str: string = \"OneTwoThreeFourFiveSixSevenEightNine\";\n    for (var i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] < 10 && arr[i] > 0) {\n         \
    \   results.push(str[arr[i] - 1]);\n        }\n    }\n    return results.sort().reverse();\n\
    }\n", "    let arr2: number[] = [];\n    let count: number = 0;\n    for (let\
    \ i: number = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <=\
    \ 9) {\n            arr2[count] = arr[i];\n            count++;\n        }\n \
    \   }\n    arr2.sort();\n    arr2.reverse();\n    for (let i: number = 0; i <\
    \ arr2.length; i++) {\n        if (arr2[i] == 1) {\n            arr2[i] = \"One\"\
    ;\n        }\n        if (arr2[i] == 2) {\n            arr2[i] = \"Two\";\n  \
    \      }\n        if (arr2[i] == 3) {\n            arr2[i] = \"Three\";\n    \
    \    }\n        if (arr2[i] == 4) {\n            arr2[i] = \"Four\";\n       \
    \ }\n        if (arr2[i] == 5) {\n            arr2[i] = \"Five\";\n        }\n\
    \        if (arr2[i] == 6) {\n            arr2[i] = \"Six\";\n        }\n    \
    \    if (arr2[i] == 7) {\n            arr2[i] = \"Seven\";\n        }\n      \
    \  if (arr2[i] == 8) {\n            arr2[i] = \"Eight\";\n        }\n        if\
    \ (arr2[i] == 9) {\n            arr2[i] = \"Nine\";\n        }\n    }\n    return\
    \ arr2;\n}\n", "  const result: string[] = [];\n  arr.forEach((item) => {\n  \
    \  if (item < 10 && item > 0) {\n      result.push(switchResult(item));\n    }\n\
    \  });\n  return result.sort().reverse();\n}\n\nconst switchResult = (item: number):\
    \ string => {\n  switch (item) {\n    case 1:\n      return \"One\";\n    case\
    \ 2:\n      return \"Two\";\n    case 3:\n      return \"Three\";\n    case 4:\n\
    \      return \"Four\";\n    case 5:\n      return \"Five\";\n    case 6:\n  \
    \    return \"Six\";\n    case 7:\n      return \"Seven\";\n    case 8:\n    \
    \  return \"Eight\";\n    case 9:\n      return \"Nine\";\n    default:\n    \
    \  break;\n  }\n};\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "  return [...arr]\n    .filter(item =>\
    \ item >= 1 && item <= 9)\n    .sort((a, b) => b - a)\n    .map(item => names[item\
    \ - 1]);\n}\n", "  if (arr.length == 0) {\n    return [];\n  }\n  let filtered_arr\
    \ = arr.filter(item => item > 0 && item < 10);\n  let sorted_arr = filtered_arr.sort((a,\
    \ b) => a - b);\n  let reversed_arr = sorted_arr.reverse();\n  let numbers = [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"];\n  let names_arr = reversed_arr.map(item => numbers[item - 1]);\n\
    \  return names_arr;\n}\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\n\
    console.log(by_length([]));\nconsole.log(by_length([1, -1, 55]));\n", "    let\
    \ numbers = [];\n    for (let number of arr) {\n        switch (number) {\n  \
    \          case 1:\n                numbers.push(\"One\");\n                break;\n\
    \            case 2:\n                numbers.push(\"Two\");\n               \
    \ break;\n            case 3:\n                numbers.push(\"Three\");\n    \
    \            break;\n            case 4:\n                numbers.push(\"Four\"\
    );\n                break;\n            case 5:\n                numbers.push(\"\
    Five\");\n                break;\n            case 6:\n                numbers.push(\"\
    Six\");\n                break;\n            case 7:\n                numbers.push(\"\
    Seven\");\n                break;\n            case 8:\n                numbers.push(\"\
    Eight\");\n                break;\n            case 9:\n                numbers.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return numbers.sort().reverse();\n\
    }\n", "    if (arr.length == 0) {\n        return [];\n    }\n    let nums: string[]\
    \ = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \    let filteredArr: number[] = arr.filter(function (val: number) {\n       \
    \ return val >= 1 && val <= 9;\n    });\n    let sortedArr: number[] = filteredArr.sort(function\
    \ (a: number, b: number) {\n        return a - b;\n    });\n    let reversedArr:\
    \ number[] = sortedArr.reverse();\n    let finalArr: string[] = reversedArr.map(function\
    \ (val: number) {\n        return nums[val - 1];\n    });\n    return finalArr;\n\
    }\n", "    let result: string[] = [];\n    if (arr.length === 0) {\n        return\
    \ result;\n    } else {\n        result = arr.filter(n => n >= 1 && n <= 9).sort((a,\
    \ b) => a - b).reverse().map(n => {\n            switch (n) {\n              \
    \  case 1:\n                    return \"One\";\n                case 2:\n   \
    \                 return \"Two\";\n                case 3:\n                 \
    \   return \"Three\";\n                case 4:\n                    return \"\
    Four\";\n                case 5:\n                    return \"Five\";\n     \
    \           case 6:\n                    return \"Six\";\n                case\
    \ 7:\n                    return \"Seven\";\n                case 8:\n       \
    \             return \"Eight\";\n                case 9:\n                   \
    \ return \"Nine\";\n            }\n        });\n        return result;\n    }\n\
    }\n", "  return arr\n    .filter(num => num >= 1 && num <= 9)\n    .sort((a, b)\
    \ => b - a)\n    .map(num => {\n      switch (num) {\n        case 1:\n      \
    \    return \"One\";\n        case 2:\n          return \"Two\";\n        case\
    \ 3:\n          return \"Three\";\n        case 4:\n          return \"Four\"\
    ;\n        case 5:\n          return \"Five\";\n        case 6:\n          return\
    \ \"Six\";\n        case 7:\n          return \"Seven\";\n        case 8:\n  \
    \        return \"Eight\";\n        case 9:\n          return \"Nine\";\n    \
    \  }\n    });\n}\n", "  return arr\n    .filter(i => i >= 1 && i <= 9)\n    .sort((a,\
    \ b) => a - b)\n    .reverse()\n    .map(i => name(i));\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "    let res = [];\n    let d = ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n    arr.forEach(n => {\n        if\
    \ (n >= 1 && n <= 9) {\n            res.push(d[n - 1]);\n        }\n    });\n\
    \    return res.reverse();\n}\n", "    let res: string[] = [];\n    let nums:\
    \ number[] = [];\n    let nums_str: string[] = [];\n    let nums_str_res: string[]\
    \ = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            nums.push(arr[i]);\n        }\n    }\n \
    \   nums.sort();\n    for (let i: number = 0; i < nums.length; i++) {\n      \
    \  nums_str.push(nums[i].toString());\n    }\n    for (let i: number = 0; i <\
    \ nums_str.length; i++) {\n        switch (nums_str[i]) {\n            case \"\
    1\":\n                nums_str_res.push(\"One\");\n                break;\n  \
    \          case \"2\":\n                nums_str_res.push(\"Two\");\n        \
    \        break;\n            case \"3\":\n                nums_str_res.push(\"\
    Three\");\n                break;\n            case \"4\":\n                nums_str_res.push(\"\
    Four\");\n                break;\n            case \"5\":\n                nums_str_res.push(\"\
    Five\");\n                break;\n            case \"6\":\n                nums_str_res.push(\"\
    Six\");\n                break;\n            case \"7\":\n                nums_str_res.push(\"\
    Seven\");\n                break;\n            case \"8\":\n                nums_str_res.push(\"\
    Eight\");\n                break;\n            case \"9\":\n                nums_str_res.push(\"\
    Nine\");\n                break;\n        }\n    }\n    for (let i: number = nums_str_res.length\
    \ - 1; i >= 0; i--) {\n        res.push(nums_str_res[i]);\n    }\n    return res;\n\
    }", "  if (arr.length === 0) {\n    return [];\n  }\n  const digits = [...arr]\n\
    \    .filter(val => val >= 1 && val <= 9)\n    .sort((a, b) => a - b)\n    .reverse()\n\
    \    .map(val => {\n      switch (val) {\n        case 1:\n          return \"\
    One\";\n        case 2:\n          return \"Two\";\n        case 3:\n        \
    \  return \"Three\";\n        case 4:\n          return \"Four\";\n        case\
    \ 5:\n          return \"Five\";\n        case 6:\n          return \"Six\";\n\
    \        case 7:\n          return \"Seven\";\n        case 8:\n          return\
    \ \"Eight\";\n        case 9:\n          return \"Nine\";\n      }\n    });\n\
    \  return digits;\n}\n", "    let digit_arr: number[] = arr.filter(num => num\
    \ > 0 && num < 10);\n    digit_arr.sort();\n    let rev_arr: number[] = digit_arr.reverse();\n\
    \    let names: string[] = rev_arr.map(num => numToString(num));\n    return names;\n\
    }\n", "    if (!arr.length) return [];\n    const valid_arr = arr.filter(i =>\
    \ i >= 1 && i <= 9).sort((a, b) => a - b);\n    return valid_arr.reverse().map(i\
    \ => {\n        switch (i) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    });\n\
    }\n", "  let numbersMap = [\n    \"Zero\",\n    \"One\",\n    \"Two\",\n    \"\
    Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\"\
    ,\n    \"Nine\"\n  ];\n  let sortArr = arr.sort().reverse();\n  let newArr = [];\n\
    \  for (let i = 0; i < sortArr.length; i++) {\n    if (sortArr[i] > 0 && sortArr[i]\
    \ < 10) {\n      newArr.push(numbersMap[sortArr[i]]);\n    }\n  }\n  return newArr;\n\
    }\n", "  let result: string[] = [];\n  let arrToNum: string[] = arr.filter(num\
    \ => {\n    if (num >= 1 && num <= 9) {\n      return num;\n    }\n  });\n  arrToNum.sort((a,\
    \ b) => a - b);\n  arrToNum.reverse();\n  arrToNum.forEach(num => {\n    switch\
    \ (num) {\n      case 1:\n        result.push(\"One\");\n        break;\n    \
    \  case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n   \
    \     result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"\
    Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n    \
    \    break;\n      case 6:\n        result.push(\"Six\");\n        break;\n  \
    \    case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n\
    \        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"\
    Nine\");\n        break;\n    }\n  });\n  return result;\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "    //create an object with digit names\n    let digitNames\
    \ = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n     \
    \   4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\"\
    ,\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    //filter the array\
    \ to only include numbers between 1 and 9\n    let values = arr.filter(value =>\
    \ value >= 1 && value <= 9);\n    //sort the filtered array\n    values.sort((a,\
    \ b) => a - b);\n    //map through array to change numbers to corresponding name\n\
    \    let words = values.map(value => digitNames[value]);\n    //reverse the array\n\
    \    return words.reverse();\n}\n", "    let numbers: number[] = [];\n    let\
    \ result: string[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n\
    \        if (arr[i] > 0 && arr[i] < 10) {\n            numbers.push(arr[i]);\n\
    \        }\n    }\n    numbers.sort((a, b) => {\n        return a - b;\n    });\n\
    \    numbers.reverse();\n    for (let i: number = 0; i < numbers.length; i++)\
    \ {\n        switch (numbers[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result;\n}\n",
  "  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const arr1 = arr.sort().filter(n\
    \ => n >= 1 && n <= 9);\n  const map: { [key: number]: string } = {\n    1: \"\
    One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\"\
    ,\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\
    \  return arr1.reverse().map(n => map[n]);\n}\n", "    return [];\n}\n", "  return\
    \ [\n    ...arr\n      .filter((n) => n >= 1 && n <= 9)\n      .sort((a, b) =>\
    \ a - b)\n      .reverse()\n      .map((n) => {\n        switch (n) {\n      \
    \    case 1:\n            return \"One\";\n          case 2:\n            return\
    \ \"Two\";\n          case 3:\n            return \"Three\";\n          case 4:\n\
    \            return \"Four\";\n          case 5:\n            return \"Five\"\
    ;\n          case 6:\n            return \"Six\";\n          case 7:\n       \
    \     return \"Seven\";\n          case 8:\n            return \"Eight\";\n  \
    \        case 9:\n            return \"Nine\";\n        }\n      }),\n  ];\n}\n",
  "  const ignoreNum = [];\n  arr.forEach(num => {\n    if (num > 9 || num < 1) {\n\
    \      ignoreNum.push(num);\n    }\n  });\n  const ignoreNumIndex = [];\n  ignoreNum.forEach(num\
    \ => {\n    arr.forEach((n, i) => {\n      if (n === num) {\n        ignoreNumIndex.push(i);\n\
    \      }\n    });\n  });\n  let newArr = arr.filter(num => num <= 9 && num >=\
    \ 1);\n  newArr.sort((a, b) => a - b);\n  newArr = newArr.reverse();\n  ignoreNumIndex.forEach(i\
    \ => {\n    newArr.splice(i, 0, arr[i]);\n  });\n  return newArr.map(num => {\n\
    \    switch (num) {\n      case 1:\n        return \"One\";\n      case 2:\n \
    \       return \"Two\";\n      case 3:\n        return \"Three\";\n      case\
    \ 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n    \
    \  case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n\
    \      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\"\
    ;\n      default:\n        return num;\n    }\n  });\n}", "    let intToStr: {\
    \ [key: number]: string } = {\n        1: \"One\",\n        2: \"Two\",\n    \
    \    3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n  \
    \  };\n    return arr.filter(e => e >= 1 && e <= 9).sort().reverse().map(e =>\
    \ intToStr[e]);\n}\n", "  let result: string[] = [];\n  let arrSorted = arr.sort().filter(n\
    \ => n > 0 && n < 10);\n  for (let i = arrSorted.length - 1; i >= 0; i--) {\n\
    \    switch (arrSorted[i]) {\n      case 1:\n        result.push(\"One\");\n \
    \       break;\n      case 2:\n        result.push(\"Two\");\n        break;\n\
    \      case 3:\n        result.push(\"Three\");\n        break;\n      case 4:\n\
    \        result.push(\"Four\");\n        break;\n      case 5:\n        result.push(\"\
    Five\");\n        break;\n      case 6:\n        result.push(\"Six\");\n     \
    \   break;\n      case 7:\n        result.push(\"Seven\");\n        break;\n \
    \     case 8:\n        result.push(\"Eight\");\n        break;\n      case 9:\n\
    \        result.push(\"Nine\");\n        break;\n    }\n  }\n  return result;\n\
    }", "  const digits = {\n    \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\":\
    \ \"Three\",\n    \"4\": \"Four\",\n    \"5\": \"Five\",\n    \"6\": \"Six\",\n\
    \    \"7\": \"Seven\",\n    \"8\": \"Eight\",\n    \"9\": \"Nine\"\n  };\n  return\
    \ arr\n    .filter(e => e >= 1 && e <= 9)\n    .sort((a, b) => a - b)\n    .reverse()\n\
    \    .map(e => digits[e]);\n}\n", "    let res: string[] = [];\n    arr.sort((a,\
    \ b) => a - b);\n    arr.forEach(function (value: number) {\n        if (value\
    \ > 0 && value < 10) {\n            res.push(convertToWords(value));\n       \
    \ }\n    });\n    return res.reverse();\n}\n\nexport function convertToWords(number:\
    \ number): string {\n    let word: string = '';\n    switch (number) {\n     \
    \   case 1: word = 'One'; break;\n        case 2: word = 'Two'; break;\n     \
    \   case 3: word = 'Three'; break;\n        case 4: word = 'Four'; break;\n  \
    \      case 5: word = 'Five'; break;\n        case 6: word = 'Six'; break;\n \
    \       case 7: word = 'Seven'; break;\n        case 8: word = 'Eight'; break;\n\
    \        case 9: word = 'Nine'; break;\n    }\n    return word;\n}\n\ndescribe('by_length',\
    \ () => {\n    it('should return correct array', () => {\n        expect(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])).toEqual([\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n        expect(by_length([])).toEqual([]);\n\
    \        expect(by_length([1, -1, 55])).toEqual([\"One\"]);\n    });\n});", " \
    \   const sortedArr = arr.filter(el => el >= 1 && el <= 9).sort((a, b) => a -\
    \ b);\n    return sortedArr.reverse().map(el => {\n        switch (el) {\n   \
    \         case 1:\n                return \"One\";\n            case 2:\n    \
    \            return \"Two\";\n            case 3:\n                return \"Three\"\
    ;\n            case 4:\n                return \"Four\";\n            case 5:\n\
    \                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n}\n", "    return arr.sort((a,\
    \ b) => {\n        if (a < 1 || a > 9 || b < 1 || b > 9) {\n            return\
    \ 0;\n        }\n        return a - b;\n    }).reverse().map(num => {\n      \
    \  switch (num) {\n            case 1:\n                return \"One\";\n    \
    \        case 2:\n                return \"Two\";\n            case 3:\n     \
    \           return \"Three\";\n            case 4:\n                return \"\
    Four\";\n            case 5:\n                return \"Five\";\n            case\
    \ 6:\n                return \"Six\";\n            case 7:\n                return\
    \ \"Seven\";\n            case 8:\n                return \"Eight\";\n       \
    \     case 9:\n                return \"Nine\";\n            default:\n      \
    \          return '';\n        }\n    });\n}\n", "    let newArr: number[] = arr.filter(x\
    \ => x >= 1 && x <= 9);\n    newArr.sort();\n    newArr.reverse();\n    let stringArr:\
    \ string[] = [];\n    newArr.forEach(x => {\n        if (x === 1) {\n        \
    \    stringArr.push(\"One\");\n        } else if (x === 2) {\n            stringArr.push(\"\
    Two\");\n        } else if (x === 3) {\n            stringArr.push(\"Three\");\n\
    \        } else if (x === 4) {\n            stringArr.push(\"Four\");\n      \
    \  } else if (x === 5) {\n            stringArr.push(\"Five\");\n        } else\
    \ if (x === 6) {\n            stringArr.push(\"Six\");\n        } else if (x ===\
    \ 7) {\n            stringArr.push(\"Seven\");\n        } else if (x === 8) {\n\
    \            stringArr.push(\"Eight\");\n        } else if (x === 9) {\n     \
    \       stringArr.push(\"Nine\");\n        }\n    });\n    return stringArr;\n\
    }\n", "  return [...arr]\n    .filter(x => x > 0 && x < 10)\n    .sort((a, b)\
    \ => a - b)\n    .reverse()\n    .map(x => {\n      switch (x) {\n        case\
    \ 1:\n          return \"One\";\n        case 2:\n          return \"Two\";\n\
    \        case 3:\n          return \"Three\";\n        case 4:\n          return\
    \ \"Four\";\n        case 5:\n          return \"Five\";\n        case 6:\n  \
    \        return \"Six\";\n        case 7:\n          return \"Seven\";\n     \
    \   case 8:\n          return \"Eight\";\n        case 9:\n          return \"\
    Nine\";\n      }\n    });\n}", "  const arrN: number[] = [];\n  const arrS: string[]\
    \ = [];\n  for (let i: number = 0; i < arr.length; i++) {\n    if (arr[i] >= 1\
    \ && arr[i] <= 9) {\n      arrN.push(arr[i]);\n    }\n  }\n  arrN.sort();\n  for\
    \ (let i: number = 0; i < arrN.length; i++) {\n    arrS.push(digitToString(arrN[i]));\n\
    \  }\n  arrS.reverse();\n  return arrS;\n}\n", "  const map = {\n    1: \"One\"\
    ,\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n  \
    \  6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\
    \  const newArr = arr.filter(el => el >= 1 && el <= 9).sort().reverse();\n  const\
    \ result = newArr.map(el => map[el]);\n  return result;\n}\n", "  const res =\
    \ arr.sort((a, b) => a - b).filter(num => num >= 1 && num <= 9);\n  return res.reverse().map(num\
    \ => getWord(num));\n}\n", "  let tempArray: number[] = [];\n  let tempWordArray:\
    \ string[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0\
    \ && arr[i] < 10) {\n      tempArray.push(arr[i]);\n    }\n  }\n  tempArray.sort((a,\
    \ b) => a - b);\n  tempArray.reverse();\n  for (let i = 0; i < tempArray.length;\
    \ i++) {\n    switch (tempArray[i]) {\n      case 1:\n        tempWordArray.push(\"\
    One\");\n        break;\n      case 2:\n        tempWordArray.push(\"Two\");\n\
    \        break;\n      case 3:\n        tempWordArray.push(\"Three\");\n     \
    \   break;\n      case 4:\n        tempWordArray.push(\"Four\");\n        break;\n\
    \      case 5:\n        tempWordArray.push(\"Five\");\n        break;\n      case\
    \ 6:\n        tempWordArray.push(\"Six\");\n        break;\n      case 7:\n  \
    \      tempWordArray.push(\"Seven\");\n        break;\n      case 8:\n       \
    \ tempWordArray.push(\"Eight\");\n        break;\n      case 9:\n        tempWordArray.push(\"\
    Nine\");\n        break;\n    }\n  }\n  return tempWordArray;\n}\n", "    let\
    \ arrayMap = new Map<number, string>();\n    arrayMap.set(1, \"One\");\n    arrayMap.set(2,\
    \ \"Two\");\n    arrayMap.set(3, \"Three\");\n    arrayMap.set(4, \"Four\");\n\
    \    arrayMap.set(5, \"Five\");\n    arrayMap.set(6, \"Six\");\n    arrayMap.set(7,\
    \ \"Seven\");\n    arrayMap.set(8, \"Eight\");\n    arrayMap.set(9, \"Nine\");\n\
    \    let resultArray: string[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0 && arr[i] < 10) {\n            let temp = arrayMap.get(arr[i]);\n\
    \            if (temp != undefined) {\n                resultArray.push(temp);\n\
    \            }\n        }\n    }\n    let sortedArray = resultArray.sort();\n\
    \    let reversedArray = sortedArray.reverse();\n    return reversedArray;\n}\n",
  "    let sort: string[] = [];\n    arr.forEach(num => {\n        if (num >= 1 &&\
    \ num <= 9) {\n            sort.push(num.toString());\n        }\n    });\n  \
    \  let correct: string[] = sort.sort();\n    let final: string[] = [];\n    correct.forEach(num\
    \ => {\n        switch (num) {\n            case \"1\":\n                final.push(\"\
    One\");\n                break;\n            case \"2\":\n                final.push(\"\
    Two\");\n                break;\n            case \"3\":\n                final.push(\"\
    Three\");\n                break;\n            case \"4\":\n                final.push(\"\
    Four\");\n                break;\n            case \"5\":\n                final.push(\"\
    Five\");\n                break;\n            case \"6\":\n                final.push(\"\
    Six\");\n                break;\n            case \"7\":\n                final.push(\"\
    Seven\");\n                break;\n            case \"8\":\n                final.push(\"\
    Eight\");\n                break;\n            case \"9\":\n                final.push(\"\
    Nine\");\n                break;\n        }\n    });\n    return final.reverse();\n\
    }\n", "  return arr\n    .filter(value => value > 0 && value < 10)\n    .sort((a,\
    \ b) => a - b)\n    .reverse()\n    .map(digit => {\n      const digitalNamer\
    \ = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n     \
    \   4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\"\
    ,\n        8: \"Eight\",\n        9: \"Nine\"\n      };\n      return digitalNamer[digit];\n\
    \    });\n}\n\nconsole.log(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));", "    //TODO:\n    return [];\n}\n", "  const result = [];\n  if\
    \ (arr.length === 0) {\n    return result;\n  }\n  arr = arr.filter(num => num\
    \ > 0 && num < 10);\n  arr.sort();\n  arr.reverse();\n  arr.forEach(num => {\n\
    \    switch (num) {\n      case 1:\n        result.push(\"One\");\n        break;\n\
    \      case 2:\n        result.push(\"Two\");\n        break;\n      case 3:\n\
    \        result.push(\"Three\");\n        break;\n      case 4:\n        result.push(\"\
    Four\");\n        break;\n      case 5:\n        result.push(\"Five\");\n    \
    \    break;\n      case 6:\n        result.push(\"Six\");\n        break;\n  \
    \    case 7:\n        result.push(\"Seven\");\n        break;\n      case 8:\n\
    \        result.push(\"Eight\");\n        break;\n      case 9:\n        result.push(\"\
    Nine\");\n        break;\n    }\n  });\n  return result;\n}\n", "  const map:\
    \ Map<number, string> = new Map([\n    [1, \"One\"],\n    [2, \"Two\"],\n    [3,\
    \ \"Three\"],\n    [4, \"Four\"],\n    [5, \"Five\"],\n    [6, \"Six\"],\n   \
    \ [7, \"Seven\"],\n    [8, \"Eight\"],\n    [9, \"Nine\"],\n  ]);\n  const filterArr:\
    \ number[] = arr.filter((num) => {\n    return num >= 1 && num <= 9;\n  });\n\
    \  return filterArr.sort().reverse().map((num) => {\n    return map.get(num) ??\
    \ \"\";\n  });\n}\n", "    let a = arr.filter(num => num > 0 && num < 10);\n \
    \   a.sort((a, b) => a - b);\n    let b = a.reverse();\n    let c = b.map(num\
    \ => {\n        switch (num) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n    return c;\n}", "    if (arr.length === 0) {\n        return [];\n\
    \    }\n    let filtered_arr = arr.filter(function (num) {\n        return num\
    \ >= 1 && num <= 9;\n    });\n    let reversed_arr = filtered_arr.reverse();\n\
    \    let words_arr = reversed_arr.map(function (num) {\n        switch (num) {\n\
    \            case 1:\n                return \"One\";\n            case 2:\n \
    \               return \"Two\";\n            case 3:\n                return \"\
    Three\";\n            case 4:\n                return \"Four\";\n            case\
    \ 5:\n                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n    return words_arr;\n}\n", " \
    \   const obj = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    const arr1\
    \ = arr.filter(n => n <= 9 && n >= 1).sort((a, b) => a - b).reverse();\n    return\
    \ arr1.map(n => obj[n]);\n}\n", "  if (arr.length == 0) {\n    return [];\n  }\n\
    \  let ar = arr.sort((a, b) => {\n    return a - b;\n  });\n  let result = [];\n\
    \  for (let i = 0; i < ar.length; i++) {\n    if (ar[i] == 1) {\n      result.push(\"\
    One\");\n    } else if (ar[i] == 2) {\n      result.push(\"Two\");\n    } else\
    \ if (ar[i] == 3) {\n      result.push(\"Three\");\n    } else if (ar[i] == 4)\
    \ {\n      result.push(\"Four\");\n    } else if (ar[i] == 5) {\n      result.push(\"\
    Five\");\n    } else if (ar[i] == 6) {\n      result.push(\"Six\");\n    } else\
    \ if (ar[i] == 7) {\n      result.push(\"Seven\");\n    } else if (ar[i] == 8)\
    \ {\n      result.push(\"Eight\");\n    } else if (ar[i] == 9) {\n      result.push(\"\
    Nine\");\n    }\n  }\n  return result.reverse();\n}\n", "    let temp: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n            temp.push(arr[i]);\n        }\n    }\n    temp.sort((a,\
    \ b) => a - b);\n    let temp2: string[] = [];\n    for (let i = 0; i < temp.length;\
    \ i++) {\n        if (temp[i] === 1) {\n            temp2.push(\"One\");\n   \
    \     } else if (temp[i] === 2) {\n            temp2.push(\"Two\");\n        }\
    \ else if (temp[i] === 3) {\n            temp2.push(\"Three\");\n        } else\
    \ if (temp[i] === 4) {\n            temp2.push(\"Four\");\n        } else if (temp[i]\
    \ === 5) {\n            temp2.push(\"Five\");\n        } else if (temp[i] ===\
    \ 6) {\n            temp2.push(\"Six\");\n        } else if (temp[i] === 7) {\n\
    \            temp2.push(\"Seven\");\n        } else if (temp[i] === 8) {\n   \
    \         temp2.push(\"Eight\");\n        } else if (temp[i] === 9) {\n      \
    \      temp2.push(\"Nine\");\n        }\n    }\n    return temp2.reverse();\n\
    }\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "  return arr\n    .filter(n => {\n   \
    \   return n >= 1 && n <= 9;\n    })\n    .sort((a, b) => a - b)\n    .reverse()\n\
    \    .map(n => {\n      const numbers = {\n        1: \"One\",\n        2: \"\
    Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n  \
    \      6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"\
    Nine\"\n      };\n      return numbers[n];\n    });\n}\n", "    return [];\n}\n",
  "    let newArray: string[] = []\n    let arrayBetween: number[] = []\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] < 10 && arr[i] > 0) {\n  \
    \          arrayBetween.push(arr[i])\n        }\n    }\n    arrayBetween.sort((a,\
    \ b) => a - b)\n    arrayBetween.reverse()\n    for (let i = 0; i < arrayBetween.length;\
    \ i++) {\n        switch (arrayBetween[i]) {\n            case 1:\n          \
    \      newArray.push(\"One\")\n                break;\n            case 2:\n \
    \               newArray.push(\"Two\")\n                break;\n            case\
    \ 3:\n                newArray.push(\"Three\")\n                break;\n     \
    \       case 4:\n                newArray.push(\"Four\")\n                break;\n\
    \            case 5:\n                newArray.push(\"Five\")\n              \
    \  break;\n            case 6:\n                newArray.push(\"Six\")\n     \
    \           break;\n            case 7:\n                newArray.push(\"Seven\"\
    )\n                break;\n            case 8:\n                newArray.push(\"\
    Eight\")\n                break;\n            case 9:\n                newArray.push(\"\
    Nine\")\n                break;\n        }\n    }\n    return newArray\n}\n",
  "    let r: number[] = [];\n    for (let n of arr) {\n        if (n >= 1 && n <=\
    \ 9) {\n            r.push(n);\n        }\n    }\n    r.sort((a, b) => a - b);\n\
    \    r.reverse();\n    for (let i = 0; i < r.length; i++) {\n        switch (r[i])\
    \ {\n            case 1:\n                r[i] = \"One\";\n                break;\n\
    \            case 2:\n                r[i] = \"Two\";\n                break;\n\
    \            case 3:\n                r[i] = \"Three\";\n                break;\n\
    \            case 4:\n                r[i] = \"Four\";\n                break;\n\
    \            case 5:\n                r[i] = \"Five\";\n                break;\n\
    \            case 6:\n                r[i] = \"Six\";\n                break;\n\
    \            case 7:\n                r[i] = \"Seven\";\n                break;\n\
    \            case 8:\n                r[i] = \"Eight\";\n                break;\n\
    \            case 9:\n                r[i] = \"Nine\";\n                break;\n\
    \        }\n    }\n    return r;\n}\n", "    let new_arr: number[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10)\
    \ {\n            new_arr.push(arr[i]);\n        }\n    }\n    let final_arr: string[]\
    \ = [];\n    new_arr.sort((a, b) => a - b);\n    new_arr.reverse();\n    for (let\
    \ i = 0; i < new_arr.length; i++) {\n        switch (new_arr[i]) {\n         \
    \   case 1:\n                final_arr.push(\"One\");\n                break;\n\
    \            case 2:\n                final_arr.push(\"Two\");\n             \
    \   break;\n            case 3:\n                final_arr.push(\"Three\");\n\
    \                break;\n            case 4:\n                final_arr.push(\"\
    Four\");\n                break;\n            case 5:\n                final_arr.push(\"\
    Five\");\n                break;\n            case 6:\n                final_arr.push(\"\
    Six\");\n                break;\n            case 7:\n                final_arr.push(\"\
    Seven\");\n                break;\n            case 8:\n                final_arr.push(\"\
    Eight\");\n                break;\n            case 9:\n                final_arr.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return final_arr;\n}\n",
  "    let output: string[] = [];\n    for (let i: number = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0 && arr[i] < 10) {\n            output.push(num_to_name(arr[i]));\n\
    \        }\n    }\n    output.sort();\n    output.reverse();\n    return output;\n\
    }\n", "    let result: string[] = [];\n    if (arr.length == 0) {\n        return\
    \ result;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 1 || arr[i] > 9) {\n            continue;\n        }\n        result.push(list[arr[i]]);\n\
    \    }\n    result.sort();\n    result.reverse();\n    return result;\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "    let newArr: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 10 && arr[i] > 0) {\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    let strArr: string[] = newArr.map(i => i.toString());\n\
    \    let revStrArr: string[] = strArr.reverse();\n    let nameArr: string[] =\
    \ [];\n    for (let i = 0; i < revStrArr.length; i++) {\n        switch (revStrArr[i])\
    \ {\n            case \"1\":\n                nameArr.push(\"One\");\n       \
    \         break;\n            case \"2\":\n                nameArr.push(\"Two\"\
    );\n                break;\n            case \"3\":\n                nameArr.push(\"\
    Three\");\n                break;\n            case \"4\":\n                nameArr.push(\"\
    Four\");\n                break;\n            case \"5\":\n                nameArr.push(\"\
    Five\");\n                break;\n            case \"6\":\n                nameArr.push(\"\
    Six\");\n                break;\n            case \"7\":\n                nameArr.push(\"\
    Seven\");\n                break;\n            case \"8\":\n                nameArr.push(\"\
    Eight\");\n                break;\n            case \"9\":\n                nameArr.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return nameArr;\n}\n",
  "  let sortedArr = arr.sort((a, b) => a - b);\n  let revArr = sortedArr.reverse();\n\
    \  let finalArr = [];\n  for (let i = 0; i < revArr.length; i++) {\n    switch\
    \ (revArr[i]) {\n      case 1:\n        finalArr.push(\"One\");\n        break;\n\
    \      case 2:\n        finalArr.push(\"Two\");\n        break;\n      case 3:\n\
    \        finalArr.push(\"Three\");\n        break;\n      case 4:\n        finalArr.push(\"\
    Four\");\n        break;\n      case 5:\n        finalArr.push(\"Five\");\n  \
    \      break;\n      case 6:\n        finalArr.push(\"Six\");\n        break;\n\
    \      case 7:\n        finalArr.push(\"Seven\");\n        break;\n      case\
    \ 8:\n        finalArr.push(\"Eight\");\n        break;\n      case 9:\n     \
    \   finalArr.push(\"Nine\");\n        break;\n    }\n  }\n  return finalArr;\n\
    }\n", "    return arr.filter(value => value >= 1 && value <= 9)\n        .sort((a,\
    \ b) => a - b)\n        .reverse()\n        .map(value => ({ 1: \"One\", 2: \"\
    Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"\
    Eight\", 9: \"Nine\" })[value]);\n}\n", "    const sorted: number[] = arr.filter(i\
    \ => i > 0 && i < 10).sort((a, b) => a - b);\n    const reversed: number[] = sorted.reverse();\n\
    \    const digit_name_map: { [digit: number]: string } = {\n        1: \"One\"\
    ,\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\"\n    };\n    return reversed.map(i => digit_name_map[i]);\n\
    }", "    const arr2 = arr.filter(function (value) {\n        return value >= 1\
    \ && value <= 9;\n    });\n    arr2.sort(function (a, b) {\n        return a -\
    \ b;\n    });\n    arr2.reverse();\n    const result = arr2.map(function (value)\
    \ {\n        return num_to_word(value);\n    });\n    return result;\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));", "    let myArray = arr.filter(value => value <= 9);\n    myArray.sort((a,\
    \ b) => a - b);\n    myArray.reverse();\n    for (let i = 0; i < myArray.length;\
    \ i++) {\n        switch (myArray[i]) {\n            case 1:\n               \
    \ myArray[i] = \"One\";\n                break;\n            case 2:\n       \
    \         myArray[i] = \"Two\";\n                break;\n            case 3:\n\
    \                myArray[i] = \"Three\";\n                break;\n           \
    \ case 4:\n                myArray[i] = \"Four\";\n                break;\n  \
    \          case 5:\n                myArray[i] = \"Five\";\n                break;\n\
    \            case 6:\n                myArray[i] = \"Six\";\n                break;\n\
    \            case 7:\n                myArray[i] = \"Seven\";\n              \
    \  break;\n            case 8:\n                myArray[i] = \"Eight\";\n    \
    \            break;\n            case 9:\n                myArray[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return myArray;\n}", "  // your\
    \ code here\n  let result = [];\n  if (arr.length === 0) {\n    return result;\n\
    \  }\n  let array_of_int = [];\n  for (let i of arr) {\n    if (i >= 1 && i <=\
    \ 9) {\n      array_of_int.push(i);\n    }\n  }\n  array_of_int.sort();\n  let\
    \ array_of_string = [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"One\"];\n  for (let j of array_of_int) {\n    result.push(array_of_string[j\
    \ - 1]);\n  }\n  return result;\n}\n\n", "  let arr_len: number = arr.length;\n\
    \  let new_arr: number[] = [];\n  for (let i: number = 0; i < arr_len; i++) {\n\
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n      new_arr.push(arr[i]);\n    }\n \
    \ }\n  new_arr.sort();\n  new_arr.reverse();\n  let dict: object = {\n    1: \"\
    One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\"\
    ,\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\
    \  return new_arr.map(n => dict[n]);\n}\n", "  let tempArr: number[] = [];\n \
    \ let numberIndex: string[] = [];\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] >= 1 && arr[i] <= 9) {\n      tempArr.push(arr[i]);\n    }\n \
    \ }\n  for (let j = 0; j < tempArr.length; j++) {\n    if (tempArr[j] === 1) {\n\
    \      numberIndex.push(\"One\");\n    } else if (tempArr[j] === 2) {\n      numberIndex.push(\"\
    Two\");\n    } else if (tempArr[j] === 3) {\n      numberIndex.push(\"Three\"\
    );\n    } else if (tempArr[j] === 4) {\n      numberIndex.push(\"Four\");\n  \
    \  } else if (tempArr[j] === 5) {\n      numberIndex.push(\"Five\");\n    } else\
    \ if (tempArr[j] === 6) {\n      numberIndex.push(\"Six\");\n    } else if (tempArr[j]\
    \ === 7) {\n      numberIndex.push(\"Seven\");\n    } else if (tempArr[j] ===\
    \ 8) {\n      numberIndex.push(\"Eight\");\n    } else if (tempArr[j] === 9) {\n\
    \      numberIndex.push(\"Nine\");\n    }\n  }\n  return numberIndex.reverse();\n\
    }\n", "    let nums: number[] = arr.filter(value => value > 0 && value < 10);\n\
    \    let nums_str: string[] = nums.map(value => value.toString());\n    nums_str.sort();\n\
    \    nums_str.reverse();\n    return nums_str.map(value =>\n        String(value).replace(\"\
    1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\").replace(\"4\"\
    , \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"7\", \"\
    Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\"));\n}\n", "  const\
    \ num = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n\
    \  let strs: string[] = arr.filter(v => v > 0 && v < 10).sort().reverse().map(v\
    \ => num[v - 1]);\n  return strs;\n}\n", "    const dic = {1: \"One\", 2: \"Two\"\
    , 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"};\n    let new_arr = arr.filter(num => num > 0 && num < 10).sort((a,\
    \ b) => a - b).reverse();\n    return new_arr.map(num => dic[num]);\n}\n", " \
    \ const sorted = arr.filter(isValid).sort(byNum);\n  const reversed = sorted.reverse();\n\
    \  const result = reversed.map(byName);\n  return result;\n}\n", "  const sorted:\
    \ number[] = sort(arr);\n  const reversed: number[] = reverse(sorted);\n  return\
    \ map(reversed, intToString);\n}\n", "    let i: number;\n    let result: string[]\
    \ = [];\n    let arr2: number[] = [];\n    for (i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] >= 1 && arr[i] <= 9) {\n            arr2.push(arr[i]);\n \
    \       }\n    }\n    arr2.sort();\n    for (i = 0; i < arr2.length; i++) {\n\
    \        switch (arr2[i]) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n", "    let sorted: number[] = arr.filter(n => (n >= 1 && n <= 9)).sort((a,\
    \ b) => b - a)\n    return sorted.map(i => {\n        switch (i) {\n         \
    \   case 1:\n                return \"One\"\n            case 2:\n           \
    \     return \"Two\"\n            case 3:\n                return \"Three\"\n\
    \            case 4:\n                return \"Four\"\n            case 5:\n \
    \               return \"Five\"\n            case 6:\n                return \"\
    Six\"\n            case 7:\n                return \"Seven\"\n            case\
    \ 8:\n                return \"Eight\"\n            case 9:\n                return\
    \ \"Nine\"\n        }\n    })\n}\n", "  let res: string[] = [];\n  arr.forEach((element:\
    \ number) => {\n    if (element >= 1 && element <= 9) {\n      res.push(return_name(element));\n\
    \    }\n  });\n  res.sort();\n  return res.reverse();\n}", "    const sorted:\
    \ number[] = arr.filter(number => (number <= 9 && number >= 1)).sort();\n    const\
    \ sortedReverse: number[] = sorted.reverse();\n    const stringList: string[]\
    \ = [];\n    sortedReverse.forEach(number => {\n        if (number === 1) {\n\
    \            stringList.push(\"One\");\n        } else if (number === 2) {\n \
    \           stringList.push(\"Two\");\n        } else if (number === 3) {\n  \
    \          stringList.push(\"Three\");\n        } else if (number === 4) {\n \
    \           stringList.push(\"Four\");\n        } else if (number === 5) {\n \
    \           stringList.push(\"Five\");\n        } else if (number === 6) {\n \
    \           stringList.push(\"Six\");\n        } else if (number === 7) {\n  \
    \          stringList.push(\"Seven\");\n        } else if (number === 8) {\n \
    \           stringList.push(\"Eight\");\n        } else if (number === 9) {\n\
    \            stringList.push(\"Nine\");\n        }\n    });\n    return stringList;\n\
    }\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "  if (!arr.length) return [];\n  const\
    \ result: string[] = [];\n  const values = {\n    1: \"One\",\n    2: \"Two\"\
    ,\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n  \
    \  7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  arr.forEach((num)\
    \ => {\n    if (num > 0 && num < 10) {\n      result.push(values[num]);\n    }\n\
    \  });\n  return result.reverse();\n}\n\nconsole.log(by_length([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]));\nconsole.log(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(by_length([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -1]));\nconsole.log(by_length([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -1, 55]));\nconsole.log(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, 55,\
    \ 10]));\nconsole.log(by_length([]));", "    let result = [];\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n   \
    \         result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => a\
    \ - b);\n    result.reverse();\n    for (let i = 0; i < result.length; i++) {\n\
    \        switch (result[i]) {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  return arr\n    .filter(x => x >= 1 && x <= 9)\n    .sort((a, b) => b\
    \ - a)\n    .map(x => numberToEnglish(x));\n}\n", "  let obj = {\n    1: \"One\"\
    ,\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n  \
    \  6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n\
    \  return arr\n    .filter(n => n >= 1 && n <= 9)\n    .sort((a, b) => b - a)\n\
    \    .map(n => obj[n]);\n}\n", "    const names = {\n        1: \"One\",\n   \
    \     2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"\
    Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n \
    \       9: \"Nine\"\n    };\n    return arr\n        .filter(i => i >= 1 && i\
    \ <= 9)\n        .sort((a, b) => a - b)\n        .reverse()\n        .map(i =>\
    \ names[i]);\n}\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));\n", "    return [];\n}\n\ndescribe(\"by_length\"\
    , () => {\n    it(\"should return an empty array if array is empty\", () => {\n\
    \        assert.deepEqual(by_length([]), []);\n    });\n    it(\"should return\
    \ an array with one number if array has one element that is between 1 and 9\"\
    , () => {\n        assert.deepEqual(by_length([1]), [\"One\"]);\n    });\n   \
    \ it(\"should return an array with two numbers if array has two elements that\
    \ are between 1 and 9\", () => {\n        assert.deepEqual(by_length([2, 1]),\
    \ [\"Two\", \"One\"]);\n    });\n    it(\"should return an array with one numbers\
    \ if array has two elements that are between 1 and 9\", () => {\n        assert.deepEqual(by_length([2,\
    \ 10]), [\"Two\"]);\n    });\n    it(\"should return an array with one numbers\
    \ if array has two elements that are between 1 and 9\", () => {\n        assert.deepEqual(by_length([9,\
    \ 2, 10]), [\"Nine\", \"Two\"]);\n    });\n    it(\"should return an array with\
    \ one numbers if array has two elements that are between 1 and 9\", () => {\n\
    \        assert.deepEqual(by_length([9, 2, 1, 8, 5, 4, 7, 3, 6]), [\"Nine\", \"\
    Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]);\n\
    \    });\n});", "    let dct = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n  \
    \          result.push(dct[arr[i] - 1]);\n        }\n    }\n    return result.reverse();\n\
    }\n", "    const dict = {\n        1: \"One\",\n        2: \"Two\",\n        3:\
    \ \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n\
    \        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n \
    \   const arr_len = arr.length;\n    const sorted = arr.sort();\n    const new_arr\
    \ = [];\n    let str_arr = '';\n    for (let i = 0; i < arr_len; i++) {\n    \
    \    if (dict[sorted[i]]) {\n            new_arr.push(dict[sorted[i]]);\n    \
    \    }\n    }\n    return new_arr.reverse();\n}", "  let numbers = ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  let fixedArr =\
    \ arr.filter(function(num){\n    return num > 0 && num < 10;\n  });\n  return\
    \ numbers.slice(0, fixedArr.length).reverse();\n}\n", "  let result: string[]\
    \ = [];\n  const num_to_string = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"\
    Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\"\
    ,\n    8: \"Eight\",\n    9: \"Nine\"\n  };\n  arr = arr.filter(num => num >=\
    \ 1 && num <= 9);\n  arr.sort();\n  for (let i = arr.length - 1; i >= 0; i--)\
    \ {\n    result.push(num_to_string[arr[i]]);\n  }\n  return result;\n}\n", " \
    \   let arr2: string[] = arr.sort((a, b) => {\n        if (a === b) {\n      \
    \      return 0;\n        }\n        if (a < b) {\n            return -1;\n  \
    \      }\n        if (a > b) {\n            return 1;\n        }\n    }).filter(num\
    \ => num < 10 && num > 0).reverse().map(num => {\n        switch (num) {\n   \
    \         case 1:\n                return \"One\";\n            case 2:\n    \
    \            return \"Two\";\n            case 3:\n                return \"Three\"\
    ;\n            case 4:\n                return \"Four\";\n            case 5:\n\
    \                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n    return arr2;\n}\n", "    return\
    \ arr.filter(num => num >= 1 && num <= 9).sort((a, b) => a - b).reverse().map(num\
    \ => {\n        switch (num) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n}\n", "  let res = [];\n  if (arr.length === 0) {\n    return res;\n\
    \  }\n  let oneToNine = arr.filter(function(n) {\n    return n >= 1 && n <= 9;\n\
    \  });\n  let nameArr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n  oneToNine.sort(function(a, b) {\n    return\
    \ a - b;\n  });\n  oneToNine.reverse();\n  for (let i = 0; i < oneToNine.length;\
    \ i++) {\n    res.push(nameArr[oneToNine[i] - 1]);\n  }\n  return res;\n}", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  const newArr = arr.filter(i\
    \ => i >= 1 && i <= 9).sort((a, b) => a - b).reverse();\n  const numberToStringArr\
    \ = newArr.map(number => {\n    switch (number) {\n      case 1:\n        return\
    \ \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return\
    \ \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n       \
    \ return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n  \
    \      return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case\
    \ 9:\n        return \"Nine\";\n    }\n  });\n  return numberToStringArr;\n}\n",
  "  return arr\n    .filter(e => e >= 1 && e <= 9)\n    .sort((a, b) => a - b)\n\
    \    .reverse()\n    .map(e => {\n      switch (e) {\n        case 1:\n      \
    \    return \"One\";\n        case 2:\n          return \"Two\";\n        case\
    \ 3:\n          return \"Three\";\n        case 4:\n          return \"Four\"\
    ;\n        case 5:\n          return \"Five\";\n        case 6:\n          return\
    \ \"Six\";\n        case 7:\n          return \"Seven\";\n        case 8:\n  \
    \        return \"Eight\";\n        case 9:\n          return \"Nine\";\n    \
    \  }\n    });\n}\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "    let arr_of_strings: string[] = []\n\
    \    let elements: number[] = []\n    let sorted_elements: number[] = []\n   \
    \ let dict: { [key: number]: string } = { 1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    \ }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            elements.push(arr[i])\n        }\n    }\n    sorted_elements\
    \ = elements.sort()\n    for (let i = 0; i < sorted_elements.length; i++) {\n\
    \        arr_of_strings.push(dict[sorted_elements[i]])\n    }\n    return arr_of_strings.reverse()\n\
    }\n", "    let oneDigit = arr.filter(val => val >= 1 && val <= 9);\n    oneDigit.sort((a,\
    \ b) => a - b);\n    oneDigit.reverse();\n    let oneDigitNames = oneDigit.map(val\
    \ => {\n        switch (val) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n    return oneDigitNames;\n}\n", "  let sorted: number[] = arr.filter(i\
    \ => i >= 1 && i <= 9).sort((a, b) => a - b);\n  let reversed: number[] = sorted.reverse();\n\
    \  let string_arr: string[] = reversed.map(i => convertToWords(i));\n  return\
    \ string_arr;\n}\n", "    var strs: string[] = [];\n    var nums: number[] = [];\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < 1 || arr[i]\
    \ > 9) {\n            continue;\n        }\n        nums.push(arr[i]);\n    }\n\
    \    nums.sort();\n    for (var i = nums.length - 1; i >= 0; i--) {\n        switch\
    \ (nums[i]) {\n            case 1:\n                strs.push(\"One\");\n    \
    \            break;\n            case 2:\n                strs.push(\"Two\");\n\
    \                break;\n            case 3:\n                strs.push(\"Three\"\
    );\n                break;\n            case 4:\n                strs.push(\"\
    Four\");\n                break;\n            case 5:\n                strs.push(\"\
    Five\");\n                break;\n            case 6:\n                strs.push(\"\
    Six\");\n                break;\n            case 7:\n                strs.push(\"\
    Seven\");\n                break;\n            case 8:\n                strs.push(\"\
    Eight\");\n                break;\n            case 9:\n                strs.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return strs;\n}\n", " \
    \   const sorted = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b).reverse();\n\
    \    const mapped = sorted.map(x => {\n        switch (x) {\n            case\
    \ 1:\n                return \"One\";\n            case 2:\n                return\
    \ \"Two\";\n            case 3:\n                return \"Three\";\n         \
    \   case 4:\n                return \"Four\";\n            case 5:\n         \
    \       return \"Five\";\n            case 6:\n                return \"Six\"\
    ;\n            case 7:\n                return \"Seven\";\n            case 8:\n\
    \                return \"Eight\";\n            case 9:\n                return\
    \ \"Nine\";\n        }\n    });\n    return mapped;\n}", "    let result: string[]\
    \ = [];\n    arr.forEach(element => {\n        if (element >= 1 && element <=\
    \ 9) {\n            result.push(element.toString());\n        }\n    });\n   \
    \ result.sort();\n    result.reverse();\n    result.forEach((element, index) =>\
    \ {\n        switch (element) {\n            case \"1\":\n                result[index]\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  result[index] = \"Two\";\n                break;\n            case \"3\":\n\
    \                result[index] = \"Three\";\n                break;\n        \
    \    case \"4\":\n                result[index] = \"Four\";\n                break;\n\
    \            case \"5\":\n                result[index] = \"Five\";\n        \
    \        break;\n            case \"6\":\n                result[index] = \"Six\"\
    ;\n                break;\n            case \"7\":\n                result[index]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    result[index] = \"Eight\";\n                break;\n            case \"9\"\
    :\n                result[index] = \"Nine\";\n                break;\n       \
    \ }\n    });\n    return result;\n}\n", "    let output: string[] = [];\n    let\
    \ sortedArr: number[] = arr.sort((a, b) => a - b);\n    for (let i: number = 0;\
    \ i < sortedArr.length; i++) {\n        if (sortedArr[i] < 1 || sortedArr[i] >\
    \ 9) {\n            sortedArr.splice(i, 1);\n            i--;\n        }\n   \
    \ }\n    sortedArr.reverse();\n    for (let num of sortedArr) {\n        switch\
    \ (num) {\n            case 1:\n                output.push(\"One\");\n      \
    \          break;\n            case 2:\n                output.push(\"Two\");\n\
    \                break;\n            case 3:\n                output.push(\"Three\"\
    );\n                break;\n            case 4:\n                output.push(\"\
    Four\");\n                break;\n            case 5:\n                output.push(\"\
    Five\");\n                break;\n            case 6:\n                output.push(\"\
    Six\");\n                break;\n            case 7:\n                output.push(\"\
    Seven\");\n                break;\n            case 8:\n                output.push(\"\
    Eight\");\n                break;\n            case 9:\n                output.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return output;\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "    if (arr.length === 0) return [];\n    let sortedArr = arr.filter(item\
    \ => item > 0 && item < 10).sort((a, b) => a - b);\n    let reversedArr = sortedArr.reverse();\n\
    \    let result = reversedArr.map(item => numToString(item));\n    return result;\n\
    }\n", "    let result: string[] = [];\n    const nums: string[] = [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] > 0\
    \ && arr[i] < 10) {\n            result.push(nums[arr[i] - 1]);\n        }\n \
    \   }\n    return result.reverse();\n}\n", "  const sorted = arr.filter(number\
    \ => number >= 1 && number <= 9).sort();\n  const reversed = sorted.reverse();\n\
    \  const final = reversed.map(number => {\n    switch (number) {\n      case 1:\n\
    \        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n\
    \        return \"Three\";\n      case 4:\n        return \"Four\";\n      case\
    \ 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n     \
    \ case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\"\
    ;\n      case 9:\n        return \"Nine\";\n    }\n  });\n  return final;\n}\n\
    \nexport { by_length };", "  // YOUR CODE HERE\n  return [];\n}\n", "  const dict\
    \ = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n\
    \    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n   \
    \ 9: \"Nine\",\n  };\n  arr = arr.filter((x) => x >= 1 && x <= 9);\n  arr.sort((a,\
    \ b) => b - a);\n  return arr.map((x) => dict[x]);\n}\n", "  if (arr.length ===\
    \ 0) {\n    return arr;\n  }\n  const num2str = [\"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  const sortedArr\
    \ = arr.filter(num => (num >= 1 && num <= 9)).sort((a, b) => a - b);\n  return\
    \ sortedArr.map(num => num2str[num - 1]).reverse();\n}\n", "  let newArr: number[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr.sort((a, b)\
    \ => a - b).reverse().map(n => {\n    switch (n) {\n      case 1:\n        return\
    \ \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return\
    \ \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n       \
    \ return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n  \
    \      return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case\
    \ 9:\n        return \"Nine\";\n    }\n  });\n}\nconsole.log(by_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "  if (arr.length === 0) {\n    return [];\n  }\n  let nums =\
    \ arr.filter(num => {\n    if (num > 0 && num < 10) {\n      return num;\n   \
    \ }\n  });\n  nums.sort((a, b) => a - b);\n  let names = nums.map(num => {\n \
    \   switch (num) {\n      case 1:\n        return \"One\";\n      case 2:\n  \
    \      return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n\
    \        return \"Four\";\n      case 5:\n        return \"Five\";\n      case\
    \ 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n    \
    \  case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\"\
    ;\n    }\n  });\n  return names.reverse();\n}\n", "    let ret: string[] = [];\n\
    \    arr.sort();\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 1 || arr[i] > 9) {\n            arr.splice(i, 1);\n            i--;\n    \
    \    }\n    }\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (arr[i]\
    \ === 1) {\n            ret.push(\"One\");\n        } else if (arr[i] === 2) {\n\
    \            ret.push(\"Two\");\n        } else if (arr[i] === 3) {\n        \
    \    ret.push(\"Three\");\n        } else if (arr[i] === 4) {\n            ret.push(\"\
    Four\");\n        } else if (arr[i] === 5) {\n            ret.push(\"Five\");\n\
    \        } else if (arr[i] === 6) {\n            ret.push(\"Six\");\n        }\
    \ else if (arr[i] === 7) {\n            ret.push(\"Seven\");\n        } else if\
    \ (arr[i] === 8) {\n            ret.push(\"Eight\");\n        } else if (arr[i]\
    \ === 9) {\n            ret.push(\"Nine\");\n        }\n    }\n    return ret;\n\
    }\n", "  return []\n}", "    let map = new Map();\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            if (map.has(arr[i]))\
    \ {\n                map.set(arr[i], map.get(arr[i]) + 1);\n            } else\
    \ {\n                map.set(arr[i], 1);\n            }\n        }\n    }\n  \
    \  let result = [];\n    map.forEach((value, key) => {\n        for (let i = 0;\
    \ i < value; i++) {\n            result.push(key);\n        }\n    });\n    result.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < result.length; i++) {\n        switch\
    \ (result[i]) {\n            case 1:\n                result[i] = \"One\";\n \
    \               break;\n            case 2:\n                result[i] = \"Two\"\
    ;\n                break;\n            case 3:\n                result[i] = \"\
    Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result.reverse();\n\
    }\n", "  let targetArr: number[] = [];\n  let resultArr: string[] = [];\n  let\
    \ names: string[] = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\"\
    ,\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\"\n\
    \  ];\n  if (arr.length === 0) {\n    return resultArr;\n  }\n  for (let i: number\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      targetArr.push(arr[i]);\n\
    \    }\n  }\n  if (targetArr.length === 0) {\n    return resultArr;\n  }\n  targetArr.sort();\n\
    \  targetArr.reverse();\n  for (let i: number = 0; i < targetArr.length; i++)\
    \ {\n    resultArr.push(names[targetArr[i] - 1]);\n  }\n  return resultArr;\n\
    }\n", "  let result: string[] = [];\n  arr.sort(function(a, b) {\n    return a\
    \ - b;\n  });\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 &&\
    \ arr[i] < 10) {\n      switch (arr[i]) {\n        case 1:\n          result.push(\"\
    One\");\n          break;\n        case 2:\n          result.push(\"Two\");\n\
    \          break;\n        case 3:\n          result.push(\"Three\");\n      \
    \    break;\n        case 4:\n          result.push(\"Four\");\n          break;\n\
    \        case 5:\n          result.push(\"Five\");\n          break;\n       \
    \ case 6:\n          result.push(\"Six\");\n          break;\n        case 7:\n\
    \          result.push(\"Seven\");\n          break;\n        case 8:\n      \
    \    result.push(\"Eight\");\n          break;\n        case 9:\n          result.push(\"\
    Nine\");\n          break;\n      }\n    }\n  }\n  return result.reverse();\n\
    }\n", "    return arr.filter(v => v > 0 && v < 10).sort((a, b) => a - b).reverse().map(v\
    \ => digits[v]);\n}", "    return arr.sort((a, b) => a - b)\n              .filter(e\
    \ => e > 0 && e < 10)\n              .reverse()\n              .map(e => translate(e));\n\
    }\n", "    const dictionary = {\n        \"1\": \"One\",\n        \"2\": \"Two\"\
    ,\n        \"3\": \"Three\",\n        \"4\": \"Four\",\n        \"5\": \"Five\"\
    ,\n        \"6\": \"Six\",\n        \"7\": \"Seven\",\n        \"8\": \"Eight\"\
    ,\n        \"9\": \"Nine\"\n    };\n    return [...new Set(arr)].filter(x => x\
    \ >= 1 && x <= 9).sort().reverse().map(x => dictionary[x])\n}\n", "    let newArr:\
    \ string[] = [];\n    let tempArr: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            tempArr.push(arr[i]);\n\
    \        }\n    }\n    tempArr.sort();\n    tempArr.reverse();\n    for (let i\
    \ = 0; i < tempArr.length; i++) {\n        switch (tempArr[i]) {\n           \
    \ case 1:\n                newArr.push(\"One\");\n                break;\n   \
    \         case 2:\n                newArr.push(\"Two\");\n                break;\n\
    \            case 3:\n                newArr.push(\"Three\");\n              \
    \  break;\n            case 4:\n                newArr.push(\"Four\");\n     \
    \           break;\n            case 5:\n                newArr.push(\"Five\"\
    );\n                break;\n            case 6:\n                newArr.push(\"\
    Six\");\n                break;\n            case 7:\n                newArr.push(\"\
    Seven\");\n                break;\n            case 8:\n                newArr.push(\"\
    Eight\");\n                break;\n            case 9:\n                newArr.push(\"\
    Nine\");\n                break;\n        }\n    }\n    return newArr;\n}\n",
  "  const numbers = [...arr].filter(n => n > 0 && n < 10).sort().reverse();\n  return\
    \ numbers.map(n => convert(n));\n}\n", "  let result: string[] = [];\n  arr.forEach((number)\
    \ => {\n    if (number > 0 && number < 10) {\n      result.push(number);\n   \
    \ }\n  });\n  result.sort((a, b) => a - b);\n  result.reverse();\n  result.forEach((number,\
    \ index) => {\n    switch (number) {\n      case 1:\n        result[index] = \"\
    One\";\n        break;\n      case 2:\n        result[index] = \"Two\";\n    \
    \    break;\n      case 3:\n        result[index] = \"Three\";\n        break;\n\
    \      case 4:\n        result[index] = \"Four\";\n        break;\n      case\
    \ 5:\n        result[index] = \"Five\";\n        break;\n      case 6:\n     \
    \   result[index] = \"Six\";\n        break;\n      case 7:\n        result[index]\
    \ = \"Seven\";\n        break;\n      case 8:\n        result[index] = \"Eight\"\
    ;\n        break;\n      case 9:\n        result[index] = \"Nine\";\n        break;\n\
    \    }\n  });\n  return result;\n}\n", "    let numberDict = new Map<number, string>();\n\
    \    numberDict.set(1, \"One\");\n    numberDict.set(2, \"Two\");\n    numberDict.set(3,\
    \ \"Three\");\n    numberDict.set(4, \"Four\");\n    numberDict.set(5, \"Five\"\
    );\n    numberDict.set(6, \"Six\");\n    numberDict.set(7, \"Seven\");\n    numberDict.set(8,\
    \ \"Eight\");\n    numberDict.set(9, \"Nine\");\n\n    if (arr.length == 0) return\
    \ [];\n\n    let tmp = arr.filter(el => el >= 1 && el <= 9);\n    tmp.sort((a,\
    \ b) => a - b);\n    return tmp.map(el => numberDict.get(el));\n}\n", "    let\
    \ arr1: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] >= 1 && arr[i] <= 9) {\n            arr1.push(arr[i]);\n        }\n\
    \    }\n    arr1.sort((a, b) => a - b);\n    let arr2: string[] = [];\n    for\
    \ (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] === 1) {\n        \
    \    arr2.push(\"One\");\n        } else if (arr1[i] === 2) {\n            arr2.push(\"\
    Two\");\n        } else if (arr1[i] === 3) {\n            arr2.push(\"Three\"\
    );\n        } else if (arr1[i] === 4) {\n            arr2.push(\"Four\");\n  \
    \      } else if (arr1[i] === 5) {\n            arr2.push(\"Five\");\n       \
    \ } else if (arr1[i] === 6) {\n            arr2.push(\"Six\");\n        } else\
    \ if (arr1[i] === 7) {\n            arr2.push(\"Seven\");\n        } else if (arr1[i]\
    \ === 8) {\n            arr2.push(\"Eight\");\n        } else if (arr1[i] ===\
    \ 9) {\n            arr2.push(\"Nine\");\n        }\n    }\n    return arr2.reverse();\n\
    }\n", "    const names = {\n        1: \"One\",\n        2: \"Two\",\n       \
    \ 3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\"\
    ,\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n\
    \    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] >= 1 && arr[i] <= 9) {\n            result.push(names[arr[i]]);\n  \
    \      }\n    }\n    return result.reverse();\n}\n", "  return arr\n    .filter(n\
    \ => n >= 1 && n <= 9)\n    .sort((a, b) => b - a)\n    .map(n => ({ 1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\" }[n]));\n}\n", "  if (arr.length === 0) {\n    return\
    \ [];\n  }\n  const rArr = [...arr].sort((a, b) => a - b);\n  const map = {\n\
    \    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5:\
    \ \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"\
    Nine\"\n  };\n  return rArr\n    .filter(item => item <= 9 && item >= 1)\n   \
    \ .map(item => map[item])\n    .reverse();\n}\n\nassert.deepEqual(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]), [\n  \"Eight\",\n  \"Five\",\n  \"Four\",\n  \"Three\"\
    ,\n  \"Two\",\n  \"Two\",\n  \"One\",\n  \"One\"\n]);\nassert.deepEqual(by_length([]),\
    \ []);\nassert.deepEqual(by_length([1, -1, 55]), [\"One\"]);\n", "    let temp\
    \ = arr.filter(val => val > 0 && val < 10);\n    temp.sort((a, b) => a - b);\n\
    \    temp.reverse();\n    let temp2 = [];\n    temp.forEach(val => {\n       \
    \ switch (val) {\n            case 1:\n                temp2.push(\"One\");\n\
    \                break;\n            case 2:\n                temp2.push(\"Two\"\
    );\n                break;\n            case 3:\n                temp2.push(\"\
    Three\");\n                break;\n            case 4:\n                temp2.push(\"\
    Four\");\n                break;\n            case 5:\n                temp2.push(\"\
    Five\");\n                break;\n            case 6:\n                temp2.push(\"\
    Six\");\n                break;\n            case 7:\n                temp2.push(\"\
    Seven\");\n                break;\n            case 8:\n                temp2.push(\"\
    Eight\");\n                break;\n            case 9:\n                temp2.push(\"\
    Nine\");\n                break;\n        }\n    });\n    return temp2;\n}\n",
  "    let arrOfStr: string[] = [];\n    let sortedArr = arr.sort((a, b) => a - b);\n\
    \    sortedArr.forEach(num => {\n        if (num >= 1 && num <= 9) {\n       \
    \     arrOfStr.push(getName(num));\n        }\n    });\n    return arrOfStr.reverse();\n\
    }\n", "    if (arr.length === 0) return [];\n    else {\n        let sorted =\
    \ arr.filter(e => e >= 1 && e <= 9).sort((a, b) => a - b);\n        return sorted.reverse().map(e\
    \ => {\n            switch (e) {\n                case 1:\n                  \
    \  return \"One\";\n                case 2:\n                    return \"Two\"\
    ;\n                case 3:\n                    return \"Three\";\n          \
    \      case 4:\n                    return \"Four\";\n                case 5:\n\
    \                    return \"Five\";\n                case 6:\n             \
    \       return \"Six\";\n                case 7:\n                    return \"\
    Seven\";\n                case 8:\n                    return \"Eight\";\n   \
    \             case 9:\n                    return \"Nine\";\n            }\n \
    \       });\n    }\n}\n", "    const num_names = {\n        \"1\": \"One\",\n\
    \        \"2\": \"Two\",\n        \"3\": \"Three\",\n        \"4\": \"Four\",\n\
    \        \"5\": \"Five\",\n        \"6\": \"Six\",\n        \"7\": \"Seven\",\n\
    \        \"8\": \"Eight\",\n        \"9\": \"Nine\"\n    };\n    const allowed_digits\
    \ = Object.keys(num_names);\n    const res: string[] = [];\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (allowed_digits.includes(arr[i].toString()))\
    \ {\n            res.push(num_names[arr[i].toString()]);\n        }\n    }\n \
    \   return res.sort().reverse();\n}\nconsole.log(by_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1, -1, 55]));\n",
  "  const result: string[] = [];\n  const names = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  arr.sort((a, b)\
    \ => a - b).forEach((number) => {\n    if (number > 0 && number < 10) {\n    \
    \  result.push(names[number - 1]);\n    }\n  });\n  return result.reverse();\n\
    }\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));", "  let numbers: number[] = [];\n  let result:\
    \ string[] = [];\n  let names: string[] = [\n    \"One\",\n    \"Two\",\n    \"\
    Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\"\
    ,\n    \"Nine\"\n  ];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > 0 && arr[i] < 10) {\n      numbers.push(arr[i]);\n    }\n  }\n  numbers.sort();\n\
    \  for (let i = numbers.length - 1; i >= 0; i--) {\n    result.push(names[numbers[i]\
    \ - 1]);\n  }\n  return result;\n}\n", "  const result: string[] = [];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n \
    \     result.push(numbers[arr[i]]);\n    }\n  }\n  return result.reverse();\n\
    }\n", "    if (arr.length === 0) {\n        return [];\n    }\n    let newArr:\
    \ number[] = [];\n    let convertedArr: string[] = [];\n    let one: string =\
    \ \"One\";\n    let two: string = \"Two\";\n    let three: string = \"Three\"\
    ;\n    let four: string = \"Four\";\n    let five: string = \"Five\";\n    let\
    \ six: string = \"Six\";\n    let seven: string = \"Seven\";\n    let eight: string\
    \ = \"Eight\";\n    let nine: string = \"Nine\";\n    for (let i: number = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n         \
    \   newArr.push(arr[i]);\n        }\n    }\n    newArr.sort();\n    for (let i:\
    \ number = 0; i < newArr.length; i++) {\n        if (newArr[i] === 1) {\n    \
    \        convertedArr.push(one);\n        } else if (newArr[i] === 2) {\n    \
    \        convertedArr.push(two);\n        } else if (newArr[i] === 3) {\n    \
    \        convertedArr.push(three);\n        } else if (newArr[i] === 4) {\n  \
    \          convertedArr.push(four);\n        } else if (newArr[i] === 5) {\n \
    \           convertedArr.push(five);\n        } else if (newArr[i] === 6) {\n\
    \            convertedArr.push(six);\n        } else if (newArr[i] === 7) {\n\
    \            convertedArr.push(seven);\n        } else if (newArr[i] === 8) {\n\
    \            convertedArr.push(eight);\n        } else if (newArr[i] === 9) {\n\
    \            convertedArr.push(nine);\n        }\n    }\n    return convertedArr.reverse();\n\
    }\n", "    const num_dict = {\n        1: \"One\",\n        2: \"Two\",\n    \
    \    3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n  \
    \  };\n    let result: string[] = [];\n    let ignored_vals: number[] = [];\n\
    \    arr.sort();\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            result.push(num_dict[arr[i]]);\n       \
    \ } else {\n            ignored_vals.push(arr[i]);\n        }\n    }\n    return\
    \ result.reverse();\n}\n", "    const dict = { 1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    \ };\n    const res = arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a - b).map(x\
    \ => dict[x]);\n    return res.reverse();\n}\n", "  // Implement me!\n  let nums\
    \ = arr.filter(e => { return e > 0 && e < 10 })\n  let res = nums.sort((a, b)\
    \ => { return a - b }).reverse().map(e => {\n    switch (e) {\n      case 1: return\
    \ \"One\"\n      case 2: return \"Two\"\n      case 3: return \"Three\"\n    \
    \  case 4: return \"Four\"\n      case 5: return \"Five\"\n      case 6: return\
    \ \"Six\"\n      case 7: return \"Seven\"\n      case 8: return \"Eight\"\n  \
    \    case 9: return \"Nine\"\n    }\n  })\n  return res\n}", "  let numArr: number[]\
    \ = arr.filter(e => e >= 1 && e <= 9);\n  let revNumArr: number[] = numArr.sort((a,\
    \ b) => b - a);\n  return revNumArr.map(e =>\n    e === 1\n      ? \"One\"\n \
    \     : e === 2\n      ? \"Two\"\n      : e === 3\n      ? \"Three\"\n      :\
    \ e === 4\n      ? \"Four\"\n      : e === 5\n      ? \"Five\"\n      : e ===\
    \ 6\n      ? \"Six\"\n      : e === 7\n      ? \"Seven\"\n      : e === 8\n  \
    \    ? \"Eight\"\n      : \"Nine\"\n  );\n}\n", "  let out: string[] = [];\n \
    \ let numNames: string[] = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n   \
    \ \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n   \
    \ \"Nine\"\n  ];\n  let res = arr.filter(a => a >= 1 && a <= 9);\n  res.sort((a,\
    \ b) => a - b);\n  res.forEach(r => {\n    out.push(numNames[r - 1]);\n  });\n\
    \  return out.reverse();\n}\n", "    return arr.filter(x => x < 10 && x > 0).sort().reverse().map(x\
    \ => digitToText(x));\n}\n", "    let dict: { [key: number]: string } = {\n  \
    \      1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\"\n    };\n    let result: string[] =\
    \ [];\n    arr.filter(n => n >= 1 && n <= 9).sort((n1, n2) => n2 - n1).forEach(n\
    \ => result.push(dict[n]));\n    return result;\n}\n", "  let obj: any = {\n \
    \   \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\": \"Three\",\n    \"4\": \"\
    Four\",\n    \"5\": \"Five\",\n    \"6\": \"Six\",\n    \"7\": \"Seven\",\n  \
    \  \"8\": \"Eight\",\n    \"9\": \"Nine\"\n  };\n  let newArr: number[] = [];\n\
    \  let finalArr: string[] = [];\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (1 <= arr[i] && arr[i] <= 9) {\n      newArr.push(arr[i]);\n    }\n  }\n\
    \  newArr.sort((a, b) => a - b);\n  newArr.reverse();\n  for (let i = 0; i < newArr.length;\
    \ i++) {\n    finalArr.push(obj[newArr[i]]);\n  }\n  return finalArr;\n}\n", " \
    \   let res: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    if (arr[i] < 10 && arr[i] > 0) {\n            if (arr[i] === 1) res.push(\"\
    One\");\n            if (arr[i] === 2) res.push(\"Two\");\n            if (arr[i]\
    \ === 3) res.push(\"Three\");\n            if (arr[i] === 4) res.push(\"Four\"\
    );\n            if (arr[i] === 5) res.push(\"Five\");\n            if (arr[i]\
    \ === 6) res.push(\"Six\");\n            if (arr[i] === 7) res.push(\"Seven\"\
    );\n            if (arr[i] === 8) res.push(\"Eight\");\n            if (arr[i]\
    \ === 9) res.push(\"Nine\");\n        }\n    }\n    return res.reverse();\n}",
  "  return arr\n    .filter(a => a >= 1 && a <= 9)\n    .sort((a, b) => a - b)\n\
    \    .reverse()\n    .map(a => `${['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'][a - 1]}`);\n}\n\nconsole.log(by_length([1, 1, 8, 4,\
    \ 5, 2, 2, 3]));\n", "  const obj: { [key: number]: string } = {\n    1: \"One\"\
    ,\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n  \
    \  6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\
    \  const result: string[] = [];\n  for (let i: number = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] in obj) {\n      result.push(obj[arr[i]]);\n    }\n  }\n \
    \ return result.sort().reverse();\n}\n", "    let res: number[] = [];\n    for\
    \ (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] > 0 && arr[i]\
    \ < 10) {\n            res.push(arr[i]);\n        }\n    }\n    res.sort((a, b)\
    \ => {\n        return a - b;\n    });\n    let result: string[] = [];\n    for\
    \ (let i: number = 0; i < res.length; i++) {\n        switch (res[i]) {\n    \
    \        case 1: result.push(\"One\"); break;\n            case 2: result.push(\"\
    Two\"); break;\n            case 3: result.push(\"Three\"); break;\n         \
    \   case 4: result.push(\"Four\"); break;\n            case 5: result.push(\"\
    Five\"); break;\n            case 6: result.push(\"Six\"); break;\n          \
    \  case 7: result.push(\"Seven\"); break;\n            case 8: result.push(\"\
    Eight\"); break;\n            case 9: result.push(\"Nine\"); break;\n        }\n\
    \    }\n    return result.reverse();\n}\n", "    let dict = {\n        1: \"One\"\
    ,\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5:\
    \ \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\"\
    ,\n        9: \"Nine\"\n    };\n    let filtered = arr.filter(num => num >= 1\
    \ && num <= 9);\n    filtered.sort((a, b) => a - b);\n    let reversed = filtered.reverse();\n\
    \    let mapped = reversed.map(num => dict[num]);\n    return mapped;\n}\n", " \
    \   let sort_arr = arr.filter(val => val >= 1 && val <= 9).sort((a, b) => a -\
    \ b).reverse();\n    let namearr = [];\n    for (let i = 0; i < sort_arr.length;\
    \ i++) {\n        namearr.push(\n            NumberToWord(sort_arr[i])\n     \
    \   )\n    }\n    return namearr;\n}\n", "    if (arr.length === 0) {\n      \
    \  return [];\n    }\n\n    const arr2 = arr.filter(num => {\n        if (num\
    \ > 0 && num < 10) {\n            return num;\n        }\n    });\n\n    const\
    \ sortedArr = arr2.sort((a, b) => a - b);\n    const reversedArr = sortedArr.reverse();\n\
    \n    const result = reversedArr.map(num => {\n        switch (num) {\n      \
    \      case 1:\n                return \"One\";\n            case 2:\n       \
    \         return \"Two\";\n            case 3:\n                return \"Three\"\
    ;\n            case 4:\n                return \"Four\";\n            case 5:\n\
    \                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n\n    return result;\n}\n", " \
    \   let res: string[] = []\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   if (arr[i] < 1 || arr[i] > 9) {\n            continue\n        }\n       \
    \ res.push(arr[i].toString())\n    }\n    res.sort()\n    res.reverse()\n    for\
    \ (let i = 0; i < res.length; i++) {\n        switch (res[i]) {\n            case\
    \ \"1\":\n                res[i] = \"One\"\n                break\n          \
    \  case \"2\":\n                res[i] = \"Two\"\n                break\n    \
    \        case \"3\":\n                res[i] = \"Three\"\n                break\n\
    \            case \"4\":\n                res[i] = \"Four\"\n                break\n\
    \            case \"5\":\n                res[i] = \"Five\"\n                break\n\
    \            case \"6\":\n                res[i] = \"Six\"\n                break\n\
    \            case \"7\":\n                res[i] = \"Seven\"\n               \
    \ break\n            case \"8\":\n                res[i] = \"Eight\"\n       \
    \         break\n            case \"9\":\n                res[i] = \"Nine\"\n\
    \                break\n        }\n    }\n    return res\n}\n\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]))\nconsole.log(by_length([]))\nconsole.log(by_length([1,\
    \ -1, 55]))\n", "    // @ts-ignore\n    let arrNumToStr: string[] = arr.filter(x\
    \ => x > 0 && x < 10).sort().reverse();\n    // @ts-ignore\n    let newArr: string[]\
    \ = arrNumToStr.map(x => 'One Two Three Four Five Six Seven Eight Nine'.split('\
    \ ')[x - 1]);\n    return newArr;\n}\n\nconsole.log(by_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1, -1, 55]));",
  "    let res: string[] = [];\n    if (arr.length === 0) return res;\n    let digits:\
    \ number[] = arr.filter(x => x > 0 && x < 10).sort((a, b) => a - b);\n    const\
    \ digit2Str: string[] = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'];\n    for (let i = digits.length - 1; i >= 0; i--) {\n    \
    \    res.push(digit2Str[digits[i] - 1]);\n    }\n    return res;\n}\n", "    //fill\
    \ in the code\n    var result: string[] = [];\n    var index = 0;\n    for (var\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n \
    \           result[index] = arr[i].toString();\n            index++;\n       \
    \ }\n    }\n    var sResult: string[] = [];\n    index = 0;\n    for (var i =\
    \ result.length - 1; i >= 0; i--) {\n        sResult[index] = switchMethod(result[i]);\n\
    \        index++;\n    }\n    return sResult;\n}\n", "    const names: string[]\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    const sorted = arr.filter(value => value <= 9 && value >= 1).sort((a,\
    \ b) => a - b);\n    return sorted.map(value => names[value - 1]).reverse();\n\
    }\n\n", "    return [].concat(arr)\n        .filter(n => n >= 1 && n <= 9)\n \
    \       .sort((a, b) => a - b)\n        .reverse()\n        .map(n => {\n    \
    \        switch (n) {\n                case 1:\n                    return \"\
    One\";\n                case 2:\n                    return \"Two\";\n       \
    \         case 3:\n                    return \"Three\";\n                case\
    \ 4:\n                    return \"Four\";\n                case 5:\n        \
    \            return \"Five\";\n                case 6:\n                    return\
    \ \"Six\";\n                case 7:\n                    return \"Seven\";\n \
    \               case 8:\n                    return \"Eight\";\n             \
    \   case 9:\n                    return \"Nine\";\n            }\n        });\n\
    }\n", "  if (arr.length === 0) {\n    return [];\n  }\n\n  let names: string[]\
    \ = [];\n  let validNumbers: number[] = [];\n\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      validNumbers.push(arr[i]);\n\
    \    }\n  }\n\n  validNumbers.sort((a, b) => a - b);\n\n  let newArray: number[]\
    \ = [];\n\n  for (let i = validNumbers.length - 1; i >= 0; i--) {\n    newArray.push(validNumbers[i]);\n\
    \  }\n\n  for (let i = 0; i < newArray.length; i++) {\n    switch (newArray[i])\
    \ {\n      case 1:\n        names.push(\"One\");\n        break;\n      case 2:\n\
    \        names.push(\"Two\");\n        break;\n      case 3:\n        names.push(\"\
    Three\");\n        break;\n      case 4:\n        names.push(\"Four\");\n    \
    \    break;\n      case 5:\n        names.push(\"Five\");\n        break;\n  \
    \    case 6:\n        names.push(\"Six\");\n        break;\n      case 7:\n  \
    \      names.push(\"Seven\");\n        break;\n      case 8:\n        names.push(\"\
    Eight\");\n        break;\n      case 9:\n        names.push(\"Nine\");\n    \
    \    break;\n    }\n  }\n\n  return names;\n}\n", "    let result: string[] =\
    \ [];\n    let sortedArray: number[] = arr.sort(sortNumbers).filter(filterNumbers);\n\
    \    sortedArray.reverse();\n    result = sortedArray.map(mapNumbers);\n    return\
    \ result;\n}\n", "    let arr_filtered = arr.filter(num => num > 0 && num < 10);\n\
    \    let arr_reverse = arr_filtered.sort((a, b) => b - a);\n    let new_arr =\
    \ arr_reverse.map(num => {\n        switch (num) {\n            case 1:\n    \
    \            return \"One\";\n            case 2:\n                return \"Two\"\
    ;\n            case 3:\n                return \"Three\";\n            case 4:\n\
    \                return \"Four\";\n            case 5:\n                return\
    \ \"Five\";\n            case 6:\n                return \"Six\";\n          \
    \  case 7:\n                return \"Seven\";\n            case 8:\n         \
    \       return \"Eight\";\n            case 9:\n                return \"Nine\"\
    ;\n        }\n    });\n    return new_arr;\n}\n", "    let sorted: number[] =\
    \ arr.filter(n => n >= 1 && n <= 9).sort((a, b) => a - b);\n    let reversed:\
    \ number[] = sorted.reverse();\n    let result: string[] = reversed.map(n => d2w(n));\n\
    \    return result;\n}\n", "  let str: string = arr.join(\"\");\n  let noDigit:\
    \ string = str.replace(/[^\\d]/g, \"\");\n  let numArr: number[] = noDigit.split(\"\
    \").map(x => parseInt(x, 10));\n  let finalArr: string[] = [];\n  let digitNames:\
    \ string[] = [\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n  \
    \  \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\"\n  ];\n\
    \  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] > 0 && numArr[i]\
    \ < 10) {\n      finalArr.push(digitNames[numArr[i] - 1]);\n    }\n  }\n  return\
    \ finalArr.reverse();\n}\n", "    // write your code here\n    return arr.filter(e\
    \ => e >= 1 && e <= 9).sort((a, b) => a > b ? -1 : 1).map(e => convert(e));\n\
    }\n", "    const digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    return arr.filter(n => n > 0\
    \ && n < 10).sort().reverse().map(digit => digit_names[digit - 1]);\n}\n", " \
    \   return arr.sort((a, b) => a - b)\n        .filter(item => item >= 1 && item\
    \ <= 9)\n        .reverse()\n        .map(item => ['One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'][item - 1]);\n}\n", "  let result: string[]\
    \ = [];\n  let num: number = 1;\n  let digit: string;\n  let sorted: number[]\
    \ = arr.sort((a, b) => a - b);\n  for (let i: number = 1; i < 10; i++) {\n   \
    \ result = result.concat(\n      sorted\n        .filter((value) => value ===\
    \ i)\n        .map((n) =>\n          n === 1\n            ? (digit = \"One\")\n\
    \            : n === 2\n            ? (digit = \"Two\")\n            : n === 3\n\
    \            ? (digit = \"Three\")\n            : n === 4\n            ? (digit\
    \ = \"Four\")\n            : n === 5\n            ? (digit = \"Five\")\n     \
    \       : n === 6\n            ? (digit = \"Six\")\n            : n === 7\n  \
    \          ? (digit = \"Seven\")\n            : n === 8\n            ? (digit\
    \ = \"Eight\")\n            : (digit = \"Nine\")\n        )\n    );\n  }\n  return\
    \ result.reverse();\n}\nconsole.log(by_length([1, 4, 2, 3, 2, 5, 8, 1, 2, 5, 9,\
    \ 3, 2, 5, 9, 1, 2, 5, 9]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "    let numbers: string[] = [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let result: string[]\
    \ = [];\n    for (let number of arr) {\n        if (number > 0 && number < 10)\
    \ {\n            result.push(numbers[number - 1]);\n        }\n    }\n    return\
    \ result.reverse();\n}\n", "    return arr.filter(function (value: number) {\n\
    \        return value >= 1 && value <= 9;\n    }).sort(function (a: number, b:\
    \ number) {\n        return a - b;\n    }).reverse().map(function (value: number)\
    \ {\n        return word(value);\n    });\n}\n", "    let dictionary: any = {\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\"\n    };\n    let result: string[] =\
    \ [];\n    let newArr: number[] = [];\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0 && arr[i] < 10) {\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    let sorted: number[] = newArr.sort(function (a, b) {\n\
    \        return a - b;\n    });\n    for (let j: number = sorted.length - 1; j\
    \ >= 0; j--) {\n        result.push(dictionary[sorted[j]]);\n    }\n    return\
    \ result;\n}\n", "  const numberMap = [\n    \"\",\n    \"One\",\n    \"Two\"\
    ,\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n\
    \    \"Eight\",\n    \"Nine\"\n  ];\n  return arr\n    .filter(num => (num >=\
    \ 1 && num <= 9 ? true : false))\n    .sort((a, b) => a - b)\n    .reverse()\n\
    \    .map(num => numberMap[num]);\n}\n", "    if (arr.length == 0) {\n       \
    \ return [];\n    }\n    else {\n        const SORT_BY_ONE_TO_NINE = arr.filter(x\
    \ => x >= 1 && x <= 9).sort((a, b) => a - b);\n        const REVERSE_ARR = SORT_BY_ONE_TO_NINE.reverse();\n\
    \        const RESULT = REVERSE_ARR.map(x => NumberWords[x]);\n        return\
    \ RESULT;\n    }\n}", "    return arr.filter(x => x > 0 && x < 10).sort().reverse().map(x\
    \ => {\n        switch (x) {\n            case 1: return \"One\";\n          \
    \  case 2: return \"Two\";\n            case 3: return \"Three\";\n          \
    \  case 4: return \"Four\";\n            case 5: return \"Five\";\n          \
    \  case 6: return \"Six\";\n            case 7: return \"Seven\";\n          \
    \  case 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n\
    \    });\n}\n", "  let a = arr.filter(x => x > 0 && x < 10).sort((a, b) => a -\
    \ b).reverse()\n  return a.map(x => {\n    switch (x) {\n      case 1:\n     \
    \   return 'One'\n      case 2:\n        return 'Two'\n      case 3:\n       \
    \ return 'Three'\n      case 4:\n        return 'Four'\n      case 5:\n      \
    \  return 'Five'\n      case 6:\n        return 'Six'\n      case 7:\n       \
    \ return 'Seven'\n      case 8:\n        return 'Eight'\n      case 9:\n     \
    \   return 'Nine'\n    }\n  })\n}\n", "  let sortedArr = arr.sort().filter(e =>\
    \ e >= 1 && e <= 9);\n  let reversedArr = sortedArr.reverse();\n  let convertedArr\
    \ = reversedArr.map(e => {\n    switch (e) {\n      case 1:\n        return \"\
    One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return\
    \ \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n       \
    \ return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n  \
    \      return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case\
    \ 9:\n        return \"Nine\";\n    }\n  });\n  return convertedArr;\n}\nconsole.log(by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\nconsole.log(by_length([1,\
    \ -1, 55]));\n", "    const sort = (a: number, b: number) => a - b;\n    const\
    \ numerals = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\"\
    ,\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7:\
    \ \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    let result:\
    \ string[] = [];\n    arr.sort(sort).reverse().forEach(x => {\n        if (x >=\
    \ 1 && x <= 9) {\n            result.push(numerals[x]);\n        }\n    });\n\
    \    return result;\n}", "  let sorted = sort_nums(arr);\n  let reversed = reverse_nums(sorted);\n\
    \  let digitized = digitize_nums(reversed);\n  return digitized;\n}\n", "    let\
    \ result: string[] = [];\n    let sorted = arr.sort(function (a, b) {\n      \
    \  return a - b;\n    });\n    let numbers = sorted.filter(function (a) {\n  \
    \      return a > 0 && a < 10;\n    });\n    if (numbers.length === 0) {\n   \
    \     return result;\n    }\n    let reversed = numbers.reverse();\n    reversed.forEach(function\
    \ (el) {\n        switch (el) {\n            case 1:\n                result.push(\"\
    One\");\n                break;\n            case 2:\n                result.push(\"\
    Two\");\n                break;\n            case 3:\n                result.push(\"\
    Three\");\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    });\n    return result;\n}\n",
  "    let names = [\n        \"One\",\n        \"Two\",\n        \"Three\",\n   \
    \     \"Four\",\n        \"Five\",\n        \"Six\",\n        \"Seven\",\n   \
    \     \"Eight\",\n        \"Nine\"\n    ];\n    let collection = arr.filter(e\
    \ => e >= 1 && e <= 9).sort().reverse();\n    let result = collection.map(e =>\
    \ names[e - 1]);\n    return result;\n}\n", "    if (arr.length == 0) return [];\n\
    \    let result: string[] = [];\n    let dic: any = {\n        1: \"One\",\n \
    \       2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"\
    Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n \
    \       9: \"Nine\"\n    };\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    if (dic[arr[i]]) {\n            result.push(dic[arr[i]]);\n        }\n  \
    \  }\n    result.sort().reverse();\n    return result;\n}\n\n", "  let numbers:\
    \ number[] = arr.filter(number => number >= 1 && number <= 9);\n  let names: string[]\
    \ = numbers.map(number => {\n    switch (number) {\n      case 1:\n        return\
    \ \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return\
    \ \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n       \
    \ return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n  \
    \      return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case\
    \ 9:\n        return \"Nine\";\n    }\n  });\n  return names.reverse();\n}\n",
  "  const mapped: string[] = arr\n    .filter(num => num >= 1 && num <= 9)\n    .sort((a,\
    \ b) => a - b)\n    .reverse()\n    .map(num => {\n      switch (num) {\n    \
    \    case 1:\n          return \"One\";\n        case 2:\n          return \"\
    Two\";\n        case 3:\n          return \"Three\";\n        case 4:\n      \
    \    return \"Four\";\n        case 5:\n          return \"Five\";\n        case\
    \ 6:\n          return \"Six\";\n        case 7:\n          return \"Seven\";\n\
    \        case 8:\n          return \"Eight\";\n        case 9:\n          return\
    \ \"Nine\";\n      }\n    });\n  return mapped;\n}\nconsole.log(by_length([1,\
    \ 1, 5, 9, 8, 4, 5, 9, 1, 2, 8, 9, 3, 8, 4, 3, 3, 5]));\n", "    let res: string[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0 &&\
    \ arr[i] < 10) {\n            res.push(arr[i].toString());\n        }\n    }\n\
    \    res.sort();\n    res.reverse();\n    for (let i = 0; i < res.length; i++)\
    \ {\n        switch (res[i]) {\n            case \"1\":\n                res[i]\
    \ = \"One\";\n                break;\n            case \"2\":\n              \
    \  res[i] = \"Two\";\n                break;\n            case \"3\":\n      \
    \          res[i] = \"Three\";\n                break;\n            case \"4\"\
    :\n                res[i] = \"Four\";\n                break;\n            case\
    \ \"5\":\n                res[i] = \"Five\";\n                break;\n       \
    \     case \"6\":\n                res[i] = \"Six\";\n                break;\n\
    \            case \"7\":\n                res[i] = \"Seven\";\n              \
    \  break;\n            case \"8\":\n                res[i] = \"Eight\";\n    \
    \            break;\n            case \"9\":\n                res[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return res;\n}\n", "    const\
    \ sorted = arr.filter(n => n >= 1 && n <= 9).sort((a, b) => a - b);\n    const\
    \ reversed = sorted.reverse();\n    return reversed.map(n => `${n}`);\n}\n", " \
    \ const arrCopy = arr.filter(el => el >= 1 && el <= 9).sort((a, b) => b - a);\n\
    \  const result = arrCopy.map(number => switch_case(number));\n  return result;\n\
    }\n", "    let newArr: string[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 1) {\n            newArr.push(\"One\");\n        }\
    \ else if (arr[i] === 2) {\n            newArr.push(\"Two\");\n        } else\
    \ if (arr[i] === 3) {\n            newArr.push(\"Three\");\n        } else if\
    \ (arr[i] === 4) {\n            newArr.push(\"Four\");\n        } else if (arr[i]\
    \ === 5) {\n            newArr.push(\"Five\");\n        } else if (arr[i] ===\
    \ 6) {\n            newArr.push(\"Six\");\n        } else if (arr[i] === 7) {\n\
    \            newArr.push(\"Seven\");\n        } else if (arr[i] === 8) {\n   \
    \         newArr.push(\"Eight\");\n        } else if (arr[i] === 9) {\n      \
    \      newArr.push(\"Nine\");\n        }\n    }\n    return newArr.reverse();\n\
    }\n", "    const map = new Map<number, string>([\n        [1, \"One\"],\n    \
    \    [2, \"Two\"],\n        [3, \"Three\"],\n        [4, \"Four\"],\n        [5,\
    \ \"Five\"],\n        [6, \"Six\"],\n        [7, \"Seven\"],\n        [8, \"Eight\"\
    ],\n        [9, \"Nine\"],\n    ]);\n    return arr\n        .filter(num => num\
    \ > 0 && num < 10)\n        .sort((a, b) => a - b)\n        .reverse()\n     \
    \   .map(num => map.get(num) as string);\n}\n\nexport { by_length };", "    let\
    \ resArr: string[] = [];\n    let digits: string[] = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    let sortedArr:\
    \ number[] = arr.sort((a, b) => a - b).filter(elem => elem >= 1 && elem <= 9);\n\
    \    resArr = sortedArr.map(digit => digits[digit - 1]);\n    return resArr.reverse();\n\
    }\n", "    return (arr.filter(x => x >= 1 && x <= 9).sort().reverse().map(x =>\
    \ numToString(x)));\n}\n", "    let sortedArr = arr.filter(element => element\
    \ > 0 && element < 10).sort((a, b) => a - b);\n    let reversedArr = sortedArr.reverse();\n\
    \    let result = reversedArr.map(element => {\n        switch (element) {\n \
    \           case 1:\n                return \"One\";\n            case 2:\n  \
    \              return \"Two\";\n            case 3:\n                return \"\
    Three\";\n            case 4:\n                return \"Four\";\n            case\
    \ 5:\n                return \"Five\";\n            case 6:\n                return\
    \ \"Six\";\n            case 7:\n                return \"Seven\";\n         \
    \   case 8:\n                return \"Eight\";\n            case 9:\n        \
    \        return \"Nine\";\n        }\n    });\n    return result;\n}\n", "   \
    \ let sorted_arr = arr.filter(x => x > 0 && x < 10).sort((a, b) => b - a);\n \
    \   let result: string[] = [];\n    sorted_arr.forEach(x => {\n        switch\
    \ (x) {\n            case 1:\n                result.push(\"One\");\n        \
    \        break;\n            case 2:\n                result.push(\"Two\");\n\
    \                break;\n            case 3:\n                result.push(\"Three\"\
    );\n                break;\n            case 4:\n                result.push(\"\
    Four\");\n                break;\n            case 5:\n                result.push(\"\
    Five\");\n                break;\n            case 6:\n                result.push(\"\
    Six\");\n                break;\n            case 7:\n                result.push(\"\
    Seven\");\n                break;\n            case 8:\n                result.push(\"\
    Eight\");\n                break;\n            case 9:\n                result.push(\"\
    Nine\");\n                break;\n        }\n    });\n    return result;\n}\n\
    console.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(by_length([]));\n\
    console.log(by_length([1, -1, 55]));\n", "    let digits = arr.filter(num => num\
    \ <= 9 && num >= 1).sort((a, b) => b - a);\n    let result = [];\n    digits.forEach(digit\
    \ => {\n        if (digit === 1) {\n            result.push(\"One\");\n      \
    \  } else if (digit === 2) {\n            result.push(\"Two\");\n        } else\
    \ if (digit === 3) {\n            result.push(\"Three\");\n        } else if (digit\
    \ === 4) {\n            result.push(\"Four\");\n        } else if (digit === 5)\
    \ {\n            result.push(\"Five\");\n        } else if (digit === 6) {\n \
    \           result.push(\"Six\");\n        } else if (digit === 7) {\n       \
    \     result.push(\"Seven\");\n        } else if (digit === 8) {\n           \
    \ result.push(\"Eight\");\n        } else if (digit === 9) {\n            result.push(\"\
    Nine\");\n        }\n    });\n    return result;\n}\n", "    return arr.filter(num\
    \ => num > 0 && num < 10)\n        .sort((a, b) => a - b)\n        .reverse()\n\
    \        .map(num => num === 1 ? \"One\" :\n            num === 2 ? \"Two\" :\n\
    \                num === 3 ? \"Three\" :\n                    num === 4 ? \"Four\"\
    \ :\n                        num === 5 ? \"Five\" :\n                        \
    \    num === 6 ? \"Six\" :\n                                num === 7 ? \"Seven\"\
    \ :\n                                    num === 8 ? \"Eight\" :\n           \
    \                             num === 9 ? \"Nine\" : \"\");\n}\n", "    const\
    \ result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ if (arr[i] > 0 && arr[i] < 10) {\n            switch (arr[i]) {\n          \
    \      case 1:\n                    result.push(\"One\");\n                  \
    \  break;\n                case 2:\n                    result.push(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.push(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.push(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.push(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.push(\"Six\");\n        \
    \            break;\n                case 7:\n                    result.push(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.push(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.push(\"Nine\");\n                    break;\n\
    \            }\n        }\n    }\n    return result.sort().reverse();\n}\n\nconsole.log(by_length([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]));", "    return arr.sort((a, b) => a - b)\n       \
    \ .filter(item => item >= 1 && item <= 9)\n        .reverse()\n        .map(item\
    \ => {\n            switch (item) {\n                case 1:\n               \
    \     return \"One\";\n                case 2:\n                    return \"\
    Two\";\n                case 3:\n                    return \"Three\";\n     \
    \           case 4:\n                    return \"Four\";\n                case\
    \ 5:\n                    return \"Five\";\n                case 6:\n        \
    \            return \"Six\";\n                case 7:\n                    return\
    \ \"Seven\";\n                case 8:\n                    return \"Eight\";\n\
    \                case 9:\n                    return \"Nine\";\n            }\n\
    \        });\n}\nconsole.log(by_length([1, -1, 55]));\n\n", "    if (arr.length\
    \ === 0) {\n        return arr;\n    }\n    const swapped = arr.filter(item =>\
    \ item >= 1 && item <= 9).sort().reverse();\n    let result: string[] = [];\n\
    \    for (let i = 0; i < swapped.length; i++) {\n        switch (swapped[i]) {\n\
    \            case 1:\n                result.push('One');\n                break;\n\
    \            case 2:\n                result.push('Two');\n                break;\n\
    \            case 3:\n                result.push('Three');\n                break;\n\
    \            case 4:\n                result.push('Four');\n                break;\n\
    \            case 5:\n                result.push('Five');\n                break;\n\
    \            case 6:\n                result.push('Six');\n                break;\n\
    \            case 7:\n                result.push('Seven');\n                break;\n\
    \            case 8:\n                result.push('Eight');\n                break;\n\
    \            case 9:\n                result.push('Nine');\n                break;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(by_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3]));\nconsole.log(by_length([1, -1, 55]));\nconsole.log(by_length([]));",
  "    return arr.sort((a, b) => {\n        if (a < 1 || a > 9 || b < 1 || b > 9)\
    \ return 0;\n        return a - b;\n    }).reverse().map(num => num < 1 || num\
    \ > 9 ? num : switchByNumber(num));\n}\n", "  // your code here\n  return [];\n\
    }\n", "  let arr_res: string[] = [];\n  if (arr.length === 0) {\n    return arr_res;\n\
    \  }\n  let keys = Object.keys(getDictOfDigits());\n  arr.forEach((num) => {\n\
    \    if (keys.includes(num.toString())) {\n      arr_res.push(getDictOfDigits()[num]);\n\
    \    }\n  });\n  arr_res.sort();\n  arr_res.reverse();\n  return arr_res;\n}\n",
  "    let ans = [];\n    let myArr = arr.filter(num => num > 0 && num < 10).sort((a,\
    \ b) => a - b).reverse();\n    const dict = {1: \"One\", 2: \"Two\", 3: \"Three\"\
    , 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\
    };\n    for (let i = 0; i < myArr.length; i++) {\n        ans.push(dict[myArr[i]]);\n\
    \    }\n    return ans;\n}\n\nconsole.log(by_length([2, 1, 1, 4, 5, 8, 2, 3]));\n",
  "    let arr_filtered = arr.filter(num => num > 0 && num < 10);\n    let arr_sorted\
    \ = arr_filtered.sort((a, b) => a - b);\n    return arr_sorted.reverse().map(num\
    \ => {\n        switch (num) {\n            case 1:\n                return \"\
    One\";\n            case 2:\n                return \"Two\";\n            case\
    \ 3:\n                return \"Three\";\n            case 4:\n               \
    \ return \"Four\";\n            case 5:\n                return \"Five\";\n  \
    \          case 6:\n                return \"Six\";\n            case 7:\n   \
    \             return \"Seven\";\n            case 8:\n                return \"\
    Eight\";\n            case 9:\n                return \"Nine\";\n        }\n \
    \   });\n}\n\nconsole.log(by_length([1, -1, 55, 10, -2, 3, 4, 5, 8, 2, 3, 4, 9,\
    \ 4, 5, 8, 2, 3, 4, 9, 4, 5, 8, 2, 3, 4, 9, 4, 5, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3,\
    \ 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8,\
    \ 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1,\
    \ 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4,\
    \ 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2,\
    \ 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8, 2, 3, 4, 9, 1, 2, 8", "  let nums: {\
    \ [key: number]: string } = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\"\
    ,\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n  \
    \  8: \"Eight\",\n    9: \"Nine\"\n  };\n  let result: string[] = [];\n  arr.forEach(e\
    \ => {\n    if (e <= 9 && e >= 1) {\n      result.push(nums[e]);\n    }\n  });\n\
    \  return result.reverse();\n}\n", "    if (arr.length === 0) {\n        return\
    \ [];\n    }\n    let dig = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"\
    Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"};\n    let res: string[]\
    \ = [];\n    let alph: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] in dig) {\n            alph.push(arr[i]);\n        }\n\
    \    }\n    alph.sort();\n    for (let i = 0; i < alph.length; i++) {\n      \
    \  res.push(dig[alph[i]]);\n    }\n    return res.reverse();\n}\n\n", "  if (arr.length\
    \ == 0) {\n    return [];\n  }\n\n  const sorted = arr.filter(x => x >= 1 && x\
    \ <= 9).sort();\n  const reversed = sorted.reverse();\n  const mapped = reversed.map(x\
    \ => convertNum(x));\n\n  return mapped;\n}\n", "  if (!arr || arr.length ===\
    \ 0) {\n    return [];\n  }\n  const out: string[] = [];\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] < 1 || arr[i] > 9) {\n      continue;\n\
    \    }\n    out.push(num(arr[i]));\n  }\n  out.sort();\n  out.reverse();\n  return\
    \ out;\n}\n", "    return arr.filter(x => x >= 1 && x <= 9).sort((a, b) => a >\
    \ b ? -1 : 1).map(x => {\n        switch (x) {\n            case 1:\n        \
    \        return \"One\";\n            case 2:\n                return \"Two\"\
    ;\n            case 3:\n                return \"Three\";\n            case 4:\n\
    \                return \"Four\";\n            case 5:\n                return\
    \ \"Five\";\n            case 6:\n                return \"Six\";\n          \
    \  case 7:\n                return \"Seven\";\n            case 8:\n         \
    \       return \"Eight\";\n            case 9:\n                return \"Nine\"\
    ;\n        }\n    });\n}", "    let i: number;\n    let result: string[] = [];\n\
    \    let temp: number[];\n    temp = arr.sort((a, b) => a - b);\n    for (i =\
    \ 0; i < temp.length; i++) {\n        if (temp[i] > 0 && temp[i] < 10) {\n   \
    \         switch (temp[i]) {\n                case 1:\n                    result.push(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.push(\"Two\");\n                    break;\n                case\
    \ 3:\n                    result.push(\"Three\");\n                    break;\n\
    \                case 4:\n                    result.push(\"Four\");\n       \
    \             break;\n                case 5:\n                    result.push(\"\
    Five\");\n                    break;\n                case 6:\n              \
    \      result.push(\"Six\");\n                    break;\n                case\
    \ 7:\n                    result.push(\"Seven\");\n                    break;\n\
    \                case 8:\n                    result.push(\"Eight\");\n      \
    \              break;\n                case 9:\n                    result.push(\"\
    Nine\");\n                    break;\n            }\n        }\n    }\n    return\
    \ result.reverse();\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
