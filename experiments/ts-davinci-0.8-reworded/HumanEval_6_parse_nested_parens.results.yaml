language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  //Task 6: Complete this function\n  const parenStack: string[] = [];\n\
    \  const result: number[] = [];\n  let groupMax: number = 0;\n  let groupTotal:\
    \ number = 0;\n  for (let char of paren_string) {\n    if (char == '(') {\n  \
    \    parenStack.push(char);\n      groupTotal++;\n      if (groupTotal > groupMax)\
    \ {\n        groupMax = groupTotal;\n      }\n    } else if (char == ')') {\n\
    \      parenStack.pop();\n      groupTotal--;\n    } else if (char == ' ') {\n\
    \      result.push(groupMax);\n      groupMax = 0;\n      groupTotal = 0;\n  \
    \  }\n  }\n  result.push(groupMax);\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3b0uc5ul.ts(12,20): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821971
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens = paren_string.split(\" \");\n    let results: number[]\
    \ = [];\n    for (let i = 0; i < parens.length; i++) {\n        let curr_paren:\
    \ string = parens[i];\n        let length: number = curr_paren.length;\n     \
    \   let count: number = 0;\n        for (let j = 0; j < length; j++) {\n     \
    \       if (curr_paren[j] === \"(\") {\n                count++;\n           \
    \ } else if (curr_paren[j] === \")\") {\n                count--;\n          \
    \  }\n        }\n        results.push(count);\n    }\n    return results;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpplld97yc.js:28:12)\n    at Object.<anonymous> (/tmp/tmpplld97yc.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(' ').map(str => {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (let c of str) {\n            if (c ===\
    \ '(') {\n                level++;\n                max_level = Math.max(max_level,\
    \ level);\n            } else if (c === ')') {\n                level--;\n   \
    \         }\n        }\n        return max_level;\n    });\n}\n\nexport {\n  \
    \  parse_nested_parens\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaakpcqu2.ts(10,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const paren_groups = paren_string.split(\"\
    \ \");\n    for (const group of paren_groups) {\n        result.push(find_paren_depth(group));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3e7zp2kc.ts(10,21): error TS2304: Cannot find name
    ''find_paren_depth''.

    '
  timestamp: 1659821972
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let levels = [];\n  let currentLevel = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    let char = paren_string[i];\n    if (char === \"(\") {\n      currentLevel++;\n\
    \    } else if (char === \")\") {\n      levels.push(currentLevel);\n      currentLevel--;\n\
    \    }\n  }\n  return levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1,\n  3,\n  2,\n  1,\n  1,\n  3,\n  2,\n  2,\n  2,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpjlujpd8f.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjlujpd8f.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 1, 3, 2,\n    1, 1, 3, 2, 2,\n    2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(\" \").map(str => get_nested_parens(str));\n\
    }\n\nconsole.log(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplxu7g1hl.ts(7,45): error TS2552: Cannot find name
    ''get_nested_parens''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const paren_counts = [];\n\
    \  for (const group of groups) {\n    if (group !== \"\") {\n      let max_count\
    \ = 0;\n      let curr_count = 0;\n      for (const paren of group) {\n      \
    \  if (paren === \"(\") {\n          curr_count++;\n          if (curr_count >\
    \ max_count) {\n            max_count = curr_count;\n          }\n        } else\
    \ if (paren === \")\") {\n          curr_count--;\n        }\n      }\n      paren_counts.push(max_count);\n\
    \    }\n  }\n  return paren_counts;\n}\n\nif (require.main === module) {\n  const\
    \ assert = require(\"assert\");\n  assert.deepEqual(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"), [\n    2,\n    3,\n    1,\n    3\n  ]);\n  assert.deepEqual(parse_nested_parens(\"\
    (()) ()()\"), [2, 2]);\n  assert.deepEqual(parse_nested_parens(\"()\"), [1]);\n\
    \  assert.deepEqual(parse_nested_parens(\"(()(()())()((()))()((()))()(()))\"),\
    \ [\n    8\n  ]);\n  assert.deepEqual(parse_nested_parens(\"(()(()())()((()))()((()))()(()))\"\
    ), [\n    8\n  ]);\n  assert.deepEqual(parse_nested_parens(\"(()(()())()((()))()((()))()(()))\"\
    ), [\n    8\n  ]);\n  assert.deepEqual(parse_nested_parens(\"(()(()())()((()))()((()))()(()))\"\
    ), [\n    8\n  ]);\n  assert.deepEqual(parse_nested_parens(\"(()(()())()((()))()((()))()(()))\"\
    ), [\n    8\n  ]);\n  assert.deepEqual(parse_nested\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpslys63rt.ts(55,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpslys63rt.ts(55,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpslys63rt.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659821972
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const out: number[] = [];\n  const split_strings = paren_string.split(\"\
    \ \");\n  let depth: number;\n  for (let s of split_strings) {\n    depth = 0;\n\
    \    for (let i = 0; i < s.length; i++) {\n      if (s[i] === \"(\") {\n     \
    \   depth++;\n      } else if (s[i] === \")\") {\n        depth--;\n      }\n\
    \    }\n    out.push(depth);\n  }\n  return out;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp0o2xvz35.js:28:12)\n    at Object.<anonymous> (/tmp/tmp0o2xvz35.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let res: number[] = [];\n    let cur_max = 0;\n    for (let c of paren_string)\
    \ {\n        if (c === '(') {\n            cur_max++;\n        } else if (c ===\
    \ ')') {\n            res.push(cur_max);\n            cur_max--;\n        }\n\
    \    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph20ps4gl.ts(9,19): error TS2494: Using a string in
    a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821972
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  // \n  let res: number[] = [];\n  // \n  if (paren_string) {\n    let arr:\
    \ string[] = paren_string.split(\" \");\n    // \n    for (let item of arr) {\n\
    \      let num: number = 0;\n      // \n      for (let i: number = 0; i < item.length;\
    \ i++) {\n        if (item[i] === \"(\") {\n          num++;\n        } else if\
    \ (item[i] === \")\") {\n          num--;\n        }\n      }\n      // \n   \
    \   res.push(num);\n    }\n  }\n  // \n  return res;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpo8wk2ewl.js:35:12)\n    at Object.<anonymous> (/tmp/tmpo8wk2ewl.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const depths = [];\n\
    \  for (let i = 0; i < paren_groups.length; i++) {\n    depths.push(get_max_nesting_level(paren_groups[i]));\n\
    \  }\n  return depths;\n}\n\nconsole.log(parse_nested_parens(\"(()()) ((())) ()\
    \ ((())()())\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfz2o79r.ts(10,17): error TS2304: Cannot find name
    ''get_max_nesting_level''.

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const spaces = paren_string.split(' ');\n  const list = [];\n  for (let\
    \ i = 0; i < spaces.length; i++) {\n    const st = spaces[i];\n    let max = 0;\n\
    \    let counter = 0;\n    for (let j = 0; j < st.length; j++) {\n      if (st[j]\
    \ === '(') {\n        counter++;\n        if (counter > max) {\n          max\
    \ = counter;\n        }\n      } else if (st[j] === ')') {\n        counter--;\n\
    \      }\n    }\n    list.push(max);\n  }\n  return list;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  return paren_groups.map(function(paren_group)\
    \ {\n    const paren_stack = [];\n    let current_depth = 0;\n    let deepest_depth\
    \ = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if (paren_group[i]\
    \ === \"(\") {\n        paren_stack.push(paren_group[i]);\n        current_depth\
    \ += 1;\n        if (current_depth > deepest_depth) {\n          deepest_depth\
    \ = current_depth;\n        }\n      } else if (paren_group[i] === \")\") {\n\
    \        if (paren_stack.length === 0) {\n          throw new Error(\"There are\
    \ more right parentheses than left parentheses in this group\");\n        }\n\
    \        paren_stack.pop();\n        current_depth -= 1;\n      }\n    }\n   \
    \ if (paren_stack.length > 0) {\n      throw new Error(\"There are more left parentheses\
    \ than right parentheses in this group\");\n    }\n    return deepest_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  if (paren_string.length === 0) {\n    return [];\n  }\n\n  let countStack:\
    \ number[] = [];\n  let maxCount: number = 0;\n  for (let i = 0; i < paren_string.length;\
    \ i++) {\n    if (paren_string[i] === \"(\") {\n      countStack.push(1);\n  \
    \  } else if (paren_string[i] === \")\") {\n      let currCount = countStack.pop();\n\
    \      if (currCount === undefined) {\n        // console.log(paren_string[i]);\n\
    \        countStack.push(0);\n      } else {\n        countStack.push(++currCount);\n\
    \        maxCount = Math.max(maxCount, currCount);\n      }\n    }\n  }\n\n  return\
    \ countStack.filter((item) => item === maxCount);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvfr1tlvv.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvfr1tlvv.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(\" \");\n    let paren_count =\
    \ paren_groups.map(group => {\n        let depth = 0;\n        let max_depth =\
    \ 0;\n        for (let index = 0; index < group.length; index++) {\n         \
    \   if (group[index] === \"(\") {\n                depth++;\n            } else\
    \ if (group[index] === \")\") {\n                depth--;\n            }\n   \
    \         if (depth > max_depth) {\n                max_depth = depth;\n     \
    \       }\n        }\n        return max_depth;\n    });\n    return paren_count;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    for (const paren_group of paren_groups) {\n        const paren_stack:\
    \ string[] = [];\n        let max = 0;\n        for (const paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max = paren_stack.length > max ? paren_stack.length : max;\n\
    \            } else if (paren === \")\") {\n                paren_stack.pop();\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\nconsole.log(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp79gshtrb.ts(12,29): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821971
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  paren_string.split(\" \").forEach((paren_group:\
    \ string) => {\n    const stack: string[] = [];\n    let count: number = 0;\n\
    \    paren_group.split(\"\").forEach((paren: string) => {\n      if (paren ===\
    \ \"(\") {\n        stack.push(paren);\n        count = count + 1;\n      } else\
    \ if (paren === \")\") {\n        stack.pop();\n        count = count - 1;\n \
    \     }\n    });\n    result.push(count);\n  });\n  return result;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpeao03187.js:29:12)\n    at Object.<anonymous> (/tmp/tmpeao03187.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 0, 0, 0, 0 ]

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const res: number[] = [];\n  const list: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < list.length; i++) {\n    let max_depth = 0;\n  \
    \  let cur_depth = 0;\n    for (let j = 0; j < list[i].length; j++) {\n      if\
    \ (list[i][j] === \"(\") {\n        cur_depth++;\n        max_depth = Math.max(max_depth,\
    \ cur_depth);\n      } else if (list[i][j] === \")\") {\n        cur_depth--;\n\
    \      }\n    }\n    res.push(max_depth);\n  }\n  return res;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\nconsole.log(parse_nested_parens(\"(((((((\"\
    ));\nconsole.log(parse_nested_parens(\"((()))))()\"));\nconsole.log(parse_nested_parens(\"\
    ())(\"));\nconsole.log(parse_nested_parens(\"()\"));\nconsole.log(parse_nested_parens(\"\
    \"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    [ 7 ]

    [ 3 ]

    [ 1 ]

    [ 1 ]

    [ 0 ]

    '
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(str => {\n    let level = 0;\n    let\
    \ max_level = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i]\
    \ === '(') {\n        level++;\n        max_level = Math.max(max_level, level);\n\
    \      } else if (str[i] === ')') {\n        level--;\n      }\n    }\n    return\
    \ max_level;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(\" \").map(x => {\n    var current_depth = 0;\n\
    \    var max_depth = 0;\n    x.split(\"\").forEach(y => {\n      if (y === \"\
    (\") {\n        current_depth += 1;\n        max_depth = Math.max(max_depth, current_depth);\n\
    \      } else if (y === \")\") {\n        current_depth -= 1;\n      }\n    });\n\
    \    return max_depth;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821972
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens = paren_string.split(\" \");\n    return parens.map(paren\
    \ => {\n        return parse_paren(paren);\n    });\n}\n\nexport function parse_paren(paren:\
    \ string): number {\n    let max: number = 0;\n    let count: number = 0;\n  \
    \  for (let i = 0; i < paren.length; i++) {\n        let char = paren.charAt(i);\n\
    \        if (char === \"(\") {\n            count++;\n            if (count >\
    \ max) {\n                max = count;\n            }\n        } else if (char\
    \ === \")\") {\n            count--;\n        }\n    }\n    return max;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let current_count = 0;\n  let max_count = 0;\n  let result = [];\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"\
    (\") {\n      current_count++;\n      max_count = Math.max(max_count, current_count);\n\
    \    } else if (paren_string[i] === \")\") {\n      current_count--;\n    } else\
    \ if (paren_string[i] === \" \") {\n      result.push(max_count);\n      max_count\
    \ = 0;\n      current_count = 0;\n    }\n  }\n  result.push(max_count);\n  return\
    \ result;\n}\n\nlet result = parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    );\n\nconsole.log(result);\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const stack: number[] = [];\n  const result: number[] = [];\n  let max:\
    \ number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    const curr:\
    \ string = paren_string[i];\n    if (curr === \"(\") {\n      stack.push(curr);\n\
    \      max = stack.length > max ? stack.length : max;\n    } else if (curr ===\
    \ \")\") {\n      stack.pop();\n    } else if (curr === \" \") {\n      result.push(max);\n\
    \      max = 0;\n    }\n  }\n  result.push(max);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7w1nsh0t.ts(13,18): error TS2345: Argument of type
    ''"("'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  //Split the input string by spaces\n  let group_strings = paren_string.split(\"\
    \ \");\n  //declare the output number array\n  let output: number[] = [];\n  //declare\
    \ the map to collect the levels of parentheses\n  let map: Map<string, number>\
    \ = new Map();\n  //loop through the groups\n  for (let i = 0; i < group_strings.length;\
    \ i++) {\n    //declare a variable to check if this is the first entry of the\
    \ parentheses\n    let first_entry = true;\n    //declare a variable to store\
    \ the current level\n    let current_level = 0;\n    //loop through the characters\n\
    \    for (let j = 0; j < group_strings[i].length; j++) {\n      //if this is the\
    \ first entry\n      if (first_entry) {\n        //Check if the map has the character\
    \ as a key\n        if (map.has(group_strings[i][j])) {\n          //if the map\
    \ has the character as a key, assign the current level to the value of that key\n\
    \          current_level = map.get(group_strings[i][j]);\n        } else {\n \
    \         //if the map does not have the character as a key, set the current level\
    \ to 0\n          current_level = 0;\n        }\n        //set the first entry\
    \ to false\n        first_entry = false;\n      } else {\n        //if this is\
    \ not the first entry\n        //if the character is an opening parentheses\n\
    \        if (group_strings[i][j] === \"(\") {\n          //increment the current\
    \ level\n          current_level++;\n          //add the character and the current\
    \ level to the map\n          map.set(group_strings[i][j], current_level);\n \
    \       } else {\n          //if the character is a closing parentheses\n    \
    \      //decrement the current level\n          current_level--;\n          //remove\
    \ the character from the map\n          map.delete(group_strings[i][j]);\n   \
    \     }\n      }\n    }\n    //push the current level to the output array\n  \
    \  output.push(current_level);\n  }\n  //return the output array\n  return output;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy_xornjw.ts(12,12): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpy_xornjw.ts(12,38): error TS2552: Cannot find name ''Map''.
    Did you mean ''map''?

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens_split = paren_string.split(\" \");\n    return parens_split.map(paren_group\
    \ => {\n        const paren_group_obj = parse_nested_parens_object(paren_group);\n\
    \        return paren_group_obj.max_depth;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4nh7mg98.ts(9,33): error TS2304: Cannot find name
    ''parse_nested_parens_object''.

    '
  timestamp: 1660014265
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const ret_arr: number[] = [];\n    const arr: string[] = paren_string.split(\"\
    \ \");\n    const stack: string[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] !== \")\") {\n            stack.push(arr[i]);\n      \
    \  } else {\n            let check_str: string = \"\";\n            while (stack.length\
    \ !== 0) {\n                check_str = stack.pop() + check_str;\n           \
    \     if (check_str === \"(\") {\n                    break;\n               \
    \ }\n            }\n            const lvl: number = check_str.length;\n      \
    \      ret_arr.push(lvl);\n        }\n    }\n    return ret_arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgvu68ibt.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgvu68ibt.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (let paren_group of paren_groups) {\n    let open = 0;\n    let\
    \ max_open = 0;\n    for (let char of paren_group) {\n      if (char === \"(\"\
    ) {\n        open++;\n        max_open = Math.max(open, max_open);\n      } else\
    \ if (char === \")\") {\n        open--;\n      }\n    }\n    result.push(max_open);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6xlbnms7.ts(12,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_array = paren_string.split(' ');\n  // console.log(paren_array);\n\
    \  let output_array: number[] = [];\n  for (let paren of paren_array) {\n    let\
    \ paren_stack: string[] = [];\n    let max_nesting = 0;\n    let current_nesting\
    \ = 0;\n    for (let i = 0; i < paren.length; i++) {\n      if (paren[i] === '(')\
    \ {\n        paren_stack.push('(');\n        current_nesting++;\n        if (current_nesting\
    \ > max_nesting) {\n          max_nesting = current_nesting;\n        }\n    \
    \  } else if (paren[i] === ')') {\n        if (paren_stack.length !== 0) {\n \
    \         paren_stack.pop();\n          current_nesting--;\n        } else {\n\
    \          return null;\n        }\n      }\n    }\n    if (paren_stack.length\
    \ === 0) {\n      output_array.push(max_nesting);\n    } else {\n      return\
    \ null;\n    }\n  }\n  return output_array;\n}\n\nconsole.log(parse_nested_parens('(()())\
    \ ((())) () ((())()())'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    let max_nesting = 0;\n\
    \    let nesting = 0;\n    for (const char of paren_group) {\n      if (char ===\
    \ \"(\") {\n        nesting++;\n        if (nesting > max_nesting) {\n       \
    \   max_nesting = nesting;\n        }\n      } else if (char === \")\") {\n  \
    \      nesting--;\n      }\n    }\n    result.push(max_nesting);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpenv730dl.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let arr = paren_string.split(\" \");\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    let curr_paren_string = arr[i];\n  \
    \  let curr_result = find_max_level(curr_paren_string);\n    result.push(curr_result);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp2qauago.ts(11,23): error TS2304: Cannot find name
    ''find_max_level''.

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    parens.forEach(paren => {\n        let counter = 0;\n        let\
    \ result = 0;\n        for (let i = 0; i < paren.length; i++) {\n            if\
    \ (paren[i] === \"(\") {\n                counter++;\n                if (counter\
    \ > result) {\n                    result = counter;\n                }\n    \
    \        } else {\n                counter--;\n            }\n        }\n    \
    \    result.push(result);\n    });\n    return result;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplwa1_8tk.ts(22,16): error TS2339: Property ''push''
    does not exist on type ''number''.

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const tokens = paren_string.split(\" \");\n    const ans: number[] =\
    \ [];\n    for (const token of tokens) {\n        let cur_max = 0;\n        let\
    \ max_so_far = 0;\n        for (const ch of token) {\n            if (ch === \"\
    (\") {\n                cur_max += 1;\n                max_so_far = Math.max(max_so_far,\
    \ cur_max);\n            } else {\n                cur_max -= 1;\n           \
    \ }\n        }\n        ans.push(max_so_far);\n    }\n    return ans;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpksof156n.ts(12,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result = [];\n    for (let i = 0; i < paren_string.length; i++) {\n\
    \        let start_pos = i;\n        let max_depth = 0;\n        let current_depth\
    \ = 0;\n        while (paren_string[i] !== ' ' && i < paren_string.length) {\n\
    \            if (paren_string[i] === '(') {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (paren_string[i]\
    \ === ')') {\n                current_depth--;\n            }\n            i++;\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const input: string[] = paren_string.split(\" \");\n    return input.map(parens\
    \ => parse_nested_parens_single(parens));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpku53l30u.ts(8,32): error TS2304: Cannot find name
    ''parse_nested_parens_single''.

    '
  timestamp: 1660014265
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let new_paren_string = paren_string.replace(/ /g, \"\");\n    let paren_arr\
    \ = new_paren_string.split(\"\");\n    let max_counter: number = 0;\n    let current_counter:\
    \ number = 0;\n    let paren_arr_with_counters: [number, number][] = [];\n   \
    \ paren_arr.forEach((char, index) => {\n        if (char === \"(\") {\n      \
    \      current_counter += 1;\n            if (max_counter < current_counter) {\n\
    \                max_counter = current_counter;\n            }\n        } else\
    \ if (char === \")\") {\n            paren_arr_with_counters.push([index, current_counter]);\n\
    \            current_counter -= 1;\n        }\n    });\n    let current_max_counter:\
    \ number = 0;\n    let paren_arr_with_counters_and_levels: [number, number, number][]\
    \ = [];\n    paren_arr_with_counters.forEach((tuple, index) => {\n        current_max_counter\
    \ = 0;\n        for (let i = index; i < paren_arr_with_counters.length; i++) {\n\
    \            if (paren_arr_with_counters[i][1] > current_max_counter) {\n    \
    \            current_max_counter = paren_arr_with_counters[i][1];\n          \
    \  }\n        }\n        paren_arr_with_counters_and_levels.push([tuple[0], tuple[1],\
    \ current_max_counter]);\n    });\n    return paren_arr_with_counters_and_levels.map((tuple)\
    \ => tuple[2]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  3,\n  3,\n  3,\n  3,\n  3,\n  3,\n  2,\n  2,\n  2,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpizwb81md.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpizwb81md.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    3,\
    \ 3, 3, 3, 3,\n    3, 3, 3, 2, 2,\n    2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  let maxDepth = 0;\n  let depth = 0;\n \
    \ const nestedParens = paren_string.replace(/ /g, '');\n  console.log(nestedParens);\n\
    \  for (let i = 0; i < nestedParens.length; i++) {\n    if (nestedParens[i] ===\
    \ '(') {\n      depth++;\n      if (depth > maxDepth) {\n        maxDepth = depth;\n\
    \      }\n    } else if (nestedParens[i] === ')') {\n      depth--;\n      if\
    \ (depth === 0) {\n        result.push(maxDepth);\n        maxDepth = 0;\n   \
    \   }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '(()())((()))()((())()())

    ()(())((()))(((())))

    (()(())((())))

    '
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let arr = paren_string.split(\" \");\n\
    \    for (let str of arr) {\n        result.push(parse_parens(str));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpegvybr1u.ts(10,21): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014265
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const levels: number[] = [];\n    const stack: string[] = [];\n    let\
    \ curr: number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n   \
    \     if (paren_string[i] === \"(\") {\n            stack.push(\"(\");\n     \
    \       curr++;\n        } else if (paren_string[i] === \")\") {\n           \
    \ if (stack.length === 0) {\n                throw new Error(\"invalid parens\
    \ input\");\n            }\n            stack.pop();\n            curr--;\n  \
    \      } else if (paren_string[i] === \" \") {\n            levels.push(curr);\n\
    \        }\n    }\n    if (stack.length !== 0) {\n        throw new Error(\"invalid\
    \ parens input\");\n    }\n    return levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp_jz974tn.js:34:12)\n    at Object.<anonymous> (/tmp/tmp_jz974tn.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens_counts: number[] = [];\n    const groups: string[] = paren_string.split(\"\
    \ \");\n    groups.forEach((group: string) => {\n        let count: number = 0;\n\
    \        let max: number = 0;\n        group.split(\"\").forEach((chr: string)\
    \ => {\n            if (chr === \"(\") {\n                count++;\n         \
    \   } else if (chr === \")\") {\n                count--;\n            }\n   \
    \         if (count > max) {\n                max = count;\n            }\n  \
    \      });\n        parens_counts.push(max);\n    });\n    return parens_counts;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    //YOUR CODE HERE\n    let array: string[] = paren_string.split(\" \"\
    );\n    let count: number[] = new Array(array.length);\n    let k: number = 0;\n\
    \    for (let i of array) {\n        count[k] = 0;\n        if (i != \"\") {\n\
    \            for (let j of i) {\n                if (j == \"(\") {\n         \
    \           count[k]++;\n                }\n            }\n        }\n       \
    \ k++;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyx34_x4a.ts(14,27): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let open_paren_count: number = 0;\n  let\
    \ biggest_nest: number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n\
    \    if (paren_string[i] === \"(\") {\n      open_paren_count++;\n      if (open_paren_count\
    \ > biggest_nest) {\n        biggest_nest = open_paren_count;\n      }\n    }\
    \ else if (paren_string[i] === \")\") {\n      open_paren_count--;\n    } else\
    \ if (paren_string[i] === \" \") {\n      result.push(biggest_nest);\n      biggest_nest\
    \ = 0;\n      open_paren_count = 0;\n    }\n  }\n  result.push(biggest_nest);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const split_strings = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < split_strings.length; i++) {\n    result.push(count_nested_parens(split_strings[i]));\n\
    \  }\n  return result;\n}\n\nconsole.log(parse_nested_parens(\"(()()) ((())) ()\
    \ ((())()())\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5tens0an.ts(10,17): error TS2304: Cannot find name
    ''count_nested_parens''.

    '
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const results: number[] = [];\n  let temp = '';\n  let tempMax = 0;\n \
    \ let max = 0;\n  let openParen = 0;\n  let i = 0;\n  while (i < paren_string.length)\
    \ {\n    if (paren_string[i] === '(') {\n      openParen++;\n      if (openParen\
    \ > max) {\n        max = openParen;\n      }\n    } else if (paren_string[i]\
    \ === ')') {\n      openParen--;\n    } else if (paren_string[i] === ' ') {\n\
    \      results.push(max);\n      max = 0;\n      openParen = 0;\n    }\n    i++;\n\
    \  }\n  results.push(max);\n  return results;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  paren_groups.forEach((p) => {\n    let count = 0;\n    let max = 0;\n\
    \    for (let i = 0; i < p.length; i++) {\n      if (p[i] === \"(\") {\n     \
    \   count++;\n      } else if (p[i] === \")\") {\n        count--;\n      }\n\
    \      if (count > max) {\n        max = count;\n      }\n    }\n    result.push(max);\n\
    \  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const results: number[] = [];\n    for (const paren_group of paren_string.split('\
    \ ')) {\n        results.push(countNestedParens(paren_group));\n    }\n    return\
    \ results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkbapzhz2.ts(9,22): error TS2304: Cannot find name
    ''countNestedParens''.

    '
  timestamp: 1660014267
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(s => (parse_nested_parens_helper(s,\
    \ 0, 0)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpropvp7hr.ts(7,44): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1660014267
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let res: number[] = [];\n  let i = 0;\n  while (i < paren_string.length)\
    \ {\n    let depth = 0;\n    let j = i;\n    while (j < paren_string.length &&\
    \ paren_string[j] !== \" \") {\n      if (paren_string[j] === \"(\") {\n     \
    \   depth++;\n      }\n      j++;\n    }\n    res.push(depth);\n    i = j + 1;\n\
    \  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpr1dsj4se.js:26:12)\n    at Object.<anonymous> (/tmp/tmpr1dsj4se.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  if (!paren_string.length) {\n    return [0];\n  }\n  return paren_string.split('\
    \ ').map(str => {\n    let count = 0;\n    let level = 0;\n    for (let i = 0;\
    \ i < str.length; i++) {\n      if (str[i] === '(') {\n        count++;\n    \
    \    level = Math.max(level, count);\n      } else {\n        count--;\n     \
    \ }\n    }\n    return level;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(parens => parse_nested_parens_single(parens));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcyys_5d9.ts(7,48): error TS2304: Cannot find name
    ''parse_nested_parens_single''.

    '
  timestamp: 1660014267
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  //   Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n  // For each of the group, output\
    \ the deepest level of nesting of parentheses.\n  // E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n  // >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n  // [2, 3, 1, 3]\n  // TODO: Implement me!\n  let\
    \ maxdepth = 0;\n  let currentDepth = 0;\n  let result = [];\n  for (let i = 0;\
    \ i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n    \
    \  currentDepth++;\n      maxdepth = Math.max(maxdepth, currentDepth);\n    }\
    \ else if (paren_string[i] === \")\") {\n      currentDepth--;\n    } else if\
    \ (paren_string[i] === \" \") {\n      result.push(maxdepth);\n      maxdepth\
    \ = 0;\n      currentDepth = 0;\n    }\n  }\n  result.push(maxdepth);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    for (const s of paren_string.split(\"\
    \ \")) {\n        result.push(parse_nested_parens_single(s));\n    }\n    return\
    \ result;\n}\n\nconst readline = require(\"readline\");\nconst rl = readline.createInterface({\n\
    \    input: process.stdin,\n    output: process.stdout,\n});\n\nconst number_of_cases\
    \ = parseInt(rl.readline(), 10);\n\nfor (let i = 0; i < number_of_cases; i++)\
    \ {\n    console.log(\n        parse_nested_parens(rl.readline()).join(\" \")\n\
    \    );\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwhzw0a17.ts(9,21): error TS2304: Cannot find name
    ''parse_nested_parens_single''.

    ../../../../../tmp/tmpwhzw0a17.ts(16,12): error TS2580: Cannot find name ''process''.
    Do you need to install type definitions for node? Try `npm i @types/node`.

    ../../../../../tmp/tmpwhzw0a17.ts(17,13): error TS2580: Cannot find name ''process''.
    Do you need to install type definitions for node? Try `npm i @types/node`.

    '
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const opening_parens = new Map<number, number>();\n  let counter = 0;\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      counter++;\n      opening_parens.set(i, counter);\n    } else\
    \ if (paren_string[i] === \")\") {\n      counter--;\n    }\n  }\n  const max_counter\
    \ = Math.max(...opening_parens.values());\n  const output: number[] = [];\n  for\
    \ (let i = 0; i < max_counter; i++) {\n    output.push(0);\n  }\n  opening_parens.forEach((v,\
    \ k) => {\n    output[v - 1] = k;\n  });\n  return output;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnt9cjmv5.ts(7,30): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014267
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let max_levels: number[] = [];\n    let current_level: number = 0;\n\
    \    let max_current_level: number = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === \"(\") {\n            current_level++;\n\
    \            if (current_level > max_current_level) {\n                max_current_level\
    \ = current_level;\n            }\n        } else if (paren_string[i] === \")\"\
    ) {\n            current_level--;\n        } else if (paren_string[i] === \" \"\
    ) {\n            max_levels.push(max_current_level);\n            max_current_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp29bqia3o.js:31:12)\n    at Object.<anonymous> (/tmp/tmp29bqia3o.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014268
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens_array = paren_string.split(\" \");\n    let result: number[]\
    \ = [];\n    let stack: number[] = [];\n    for (let i = 0; i < parens_array.length;\
    \ i++) {\n        let str = parens_array[i];\n        for (let j = 0; j < str.length;\
    \ j++) {\n            if (str[j] === \"(\") {\n                stack.push(1);\n\
    \            } else if (str[j] === \")\") {\n                stack.pop();\n  \
    \          }\n        }\n        result.push(stack.length);\n        stack = [];\n\
    \    }\n    return result;\n}\n\nexport {parse_nested_parens};\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpcsuas82h.js:31:12)\n    at Object.<anonymous> (/tmp/tmpcsuas82h.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014268
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  // fill up the code here\n  let paren_array = paren_string.split(\" \"\
    );\n  let result: number[] = [];\n  paren_array.forEach(paren => {\n    if (paren.length\
    \ === 0) {\n      result.push(0);\n    } else {\n      let maxLevel = 1;\n   \
    \   let tempMaxLevel = 1;\n      for (let i = 0; i < paren.length; i++) {\n  \
    \      if (paren[i] === \"(\") {\n          tempMaxLevel++;\n          if (tempMaxLevel\
    \ > maxLevel) {\n            maxLevel = tempMaxLevel;\n          }\n        }\
    \ else if (paren[i] === \")\") {\n          tempMaxLevel--;\n        }\n     \
    \ }\n      result.push(maxLevel);\n    }\n  });\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4,\n\
    \  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp6bk_7yz_.js:36:12)\n    at Object.<anonymous> (/tmp/tmp6bk_7yz_.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4, 2,\
    \ 4 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const regex = /\\(/gi;\n  let count = 0;\n  let maxCount = 0;\n  let paren_array\
    \ = paren_string.split(\" \");\n  let paren_array_count: number[] = [];\n  for\
    \ (let i = 0; i < paren_array.length; i++) {\n    count = 0;\n    maxCount = 0;\n\
    \    for (let j = 0; j < paren_array[i].length; j++) {\n      if (paren_array[i][j]\
    \ === \"(\") {\n        count++;\n        if (count > maxCount) {\n          maxCount\
    \ = count;\n        }\n      } else if (paren_array[i][j] === \")\") {\n     \
    \   count--;\n      }\n    }\n    paren_array_count.push(maxCount);\n  }\n  return\
    \ paren_array_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const tokens = paren_string.split(\" \");\n  const max_depth_list: number[]\
    \ = [];\n  for (const token of tokens) {\n    let current_depth = 0;\n    let\
    \ max_depth = 0;\n    for (const char of token) {\n      if (char === \"(\") {\n\
    \        current_depth++;\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n      if (current_depth > max_depth) {\n        max_depth = current_depth;\n\
    \      }\n    }\n    max_depth_list.push(max_depth);\n  }\n  return max_depth_list;\n\
    }\n\nexport function run_parse_nested_parens() {\n  console.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0t3kt429.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const group of paren_groups) {\n    result.push(get_nested_parens(group));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0d26e_1o.ts(10,17): error TS2552: Cannot find name
    ''get_nested_parens''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660014268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_groups = paren_string.split(' ');\n    let paren_depth = [];\n\
    \    for (let group_num = 0; group_num < paren_groups.length; group_num++) {\n\
    \        let current_paren_group = paren_groups[group_num];\n        let highest_nest_depth\
    \ = 0;\n        let nest_depth = 0;\n        for (let paren_num = 0; paren_num\
    \ < current_paren_group.length; paren_num++) {\n            let current_paren\
    \ = current_paren_group[paren_num];\n            if (current_paren === '(') {\n\
    \                nest_depth += 1;\n            } else if (current_paren === ')')\
    \ {\n                nest_depth -= 1;\n            }\n            if (nest_depth\
    \ > highest_nest_depth) {\n                highest_nest_depth = nest_depth;\n\
    \            }\n        }\n        paren_depth.push(highest_nest_depth);\n   \
    \ }\n    return paren_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const group_strings = paren_string.split(\" \");\n  const result: number[]\
    \ = [];\n  for (const group_string of group_strings) {\n    result.push(get_nested_parens_count(group_string));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr8xujqcw.ts(10,17): error TS2304: Cannot find name
    ''get_nested_parens_count''.

    '
  timestamp: 1660014268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  return groups.map(group =>\
    \ {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < group.length;\
    \ i++) {\n      if (group[i] === \"(\") {\n        count++;\n        max = Math.max(max,\
    \ count);\n      } else {\n        count--;\n      }\n    }\n    return max;\n\
    \  });\n}\nconsole.log(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014268
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let results: number[] = [];\n    let chars: string[] = paren_string.split('');\n\
    \    let count: number = 0;\n    for (let c of chars) {\n        if (c === '(')\
    \ {\n            count++;\n        } else if (c === ')') {\n            results.push(count);\n\
    \            count = 0;\n        }\n    }\n    return results;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  0,\n  3,\n  0,\n  0,\n  1,\n  3,\n  0,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmptzsjoc65.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmptzsjoc65.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 0, 3, 0,\n    0, 1, 3, 0, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  2, 1, 0, 3, 0,\n  0, 1, 3, 0, 1,\n  1, 0\n]\n"
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  if (paren_string === \"\") {\n    return [];\n  }\n\n  const paren_groups\
    \ = paren_string.split(\" \");\n  const result: number[] = [];\n\n  for (const\
    \ group of paren_groups) {\n    result.push(calculate_max_nesting(group));\n \
    \ }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzvfnwspo.ts(15,17): error TS2304: Cannot find name
    ''calculate_max_nesting''.

    '
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const s: string[] = paren_string.split('\
    \ ');\n  for (let i = 0; i < s.length; i++) {\n    result.push(parse_parens(s[i]));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptj41e9xc.ts(10,17): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let array = paren_string.split(\" \");\n  const result = [];\n  array.forEach((el:\
    \ string) => {\n    let max = 0;\n    let current = 0;\n    for (let i = 0; i\
    \ < el.length; i++) {\n      if (el[i] === \"(\") {\n        current++;\n    \
    \    if (current > max) {\n          max = current;\n        }\n      } else if\
    \ (el[i] === \")\") {\n        current--;\n      }\n    }\n    result.push(max);\n\
    \  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let depth = 0;\n    let temp: number[]\
    \ = paren_string.split('');\n    let n = paren_string.length;\n    for (let i\
    \ = 0; i < n; i++) {\n        if (temp[i] === '(') {\n            depth++;\n \
    \       } else if (temp[i] === ')') {\n            depth--;\n        } else if\
    \ (temp[i] === ' ') {\n            result.push(depth);\n        }\n    }\n   \
    \ result.push(depth);\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpr3j7epwv.ts(9,9): error TS2322: Type 'string[]' is\
    \ not assignable to type 'number[]'.\n  Type 'string' is not assignable to type\
    \ 'number'.\n../../../../../tmp/tmpr3j7epwv.ts(12,13): error TS2367: This condition\
    \ will always return 'false' since the types 'number' and '\"(\"' have no overlap.\n\
    ../../../../../tmp/tmpr3j7epwv.ts(14,20): error TS2367: This condition will always\
    \ return 'false' since the types 'number' and '\")\"' have no overlap.\n../../../../../tmp/tmpr3j7epwv.ts(16,20):\
    \ error TS2367: This condition will always return 'false' since the types 'number'\
    \ and '\" \"' have no overlap.\n"
  timestamp: 1660014268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  let paren_arr = paren_string.split(\" \"\
    );\n  for (let i = 0; i < paren_arr.length; i++) {\n    let stack: string[] =\
    \ [];\n    let current_paren: string = paren_arr[i];\n    let max_depth: number\
    \ = 0;\n    for (let j = 0; j < current_paren.length; j++) {\n      if (current_paren[j]\
    \ === \"(\") {\n        stack.push(\"(\");\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else {\n        stack.pop();\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const groups = paren_string.split(\" \"\
    );\n  groups.forEach((group) => {\n    let currentDepth = 0;\n    let maxDepth\
    \ = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === \"\
    (\") {\n        currentDepth++;\n        if (currentDepth > maxDepth) {\n    \
    \      maxDepth = currentDepth;\n        }\n      } else if (group[i] === \")\"\
    ) {\n        currentDepth--;\n      }\n    }\n    result.push(maxDepth);\n  });\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const res: number[] = [];\n\
    \  for (const group of groups) {\n    res.push(parse_nested_parens_in_one_group(group));\n\
    \  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3__pgk9p.ts(10,14): error TS2304: Cannot find name
    ''parse_nested_parens_in_one_group''.

    '
  timestamp: 1660014269
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_arr = paren_string.split(\" \");\n    let max_levels: number[]\
    \ = [];\n    for (let i = 0; i < paren_arr.length; i++) {\n        let current_str\
    \ = paren_arr[i];\n        let max_level = 0;\n        let current_level = 0;\n\
    \        for (let j = 0; j < current_str.length; j++) {\n            if (current_str[j]\
    \ === \"(\") {\n                current_level++;\n                if (current_level\
    \ > max_level) {\n                    max_level = current_level;\n           \
    \     }\n            } else if (current_str[j] === \")\") {\n                current_level--;\n\
    \            }\n        }\n        max_levels.push(max_level);\n    }\n    return\
    \ max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let currentGroup: number = 0;\n    let\
    \ currentDepth: number = 0;\n    let maxDepth: number = 0;\n    for (let i = 0;\
    \ i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\") {\n\
    \            currentDepth++;\n            if (currentDepth > maxDepth) {\n   \
    \             maxDepth = currentDepth;\n            }\n        } else if (paren_string[i]\
    \ === \")\") {\n            currentDepth--;\n        } else if (paren_string[i]\
    \ === \" \") {\n            result.push(maxDepth);\n            maxDepth = 0;\n\
    \            currentDepth = 0;\n        }\n    }\n    result.push(maxDepth);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_stack: number[] = [];\n    const result: number[] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\") {\n            paren_stack.push(i);\n        } else if (paren_string[i]\
    \ === \")\") {\n            paren_stack.pop();\n            if (paren_stack.length\
    \ === 0) {\n                result.push(i - paren_string.lastIndexOf(\"(\"));\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndescribe(\"parse_nested_parens\"\
    , () => {\n    it(\"should return [2, 3, 1, 3] given \\\"(()()) ((())) () ((())()())\\\
    \"\", () => {\n        const result = parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    );\n        expect(result).toEqual([2, 3, 1, 3]);\n    });\n});\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu9vi97rw.ts(22,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpu9vi97rw.ts(23,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpu9vi97rw.ts(25,9): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660014270
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let count_list: number[] = [];\n  let current_count: number = 0;\n  for\
    \ (let i: number = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === \"(\") {\n      current_count += 1;\n    } else if (paren_string[i] ===\
    \ \")\") {\n      current_count -= 1;\n    } else if (paren_string[i] === \" \"\
    ) {\n      count_list.push(current_count);\n      current_count = 0;\n    }\n\
    \  }\n  count_list.push(current_count);\n  return count_list;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpss_p4t3p.js:28:12)\n    at Object.<anonymous> (/tmp/tmpss_p4t3p.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 0, 0, 0, 0 ]

    '
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens: string[] = paren_string.split(\" \");\n    let result:\
    \ number[] = [];\n    parens.forEach((paren) => {\n        result.push(parse_single_paren(paren));\n\
    \    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphkep5qco.ts(10,21): error TS2304: Cannot find name
    ''parse_single_paren''.

    '
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let depth: number[] = [];\n    paren_string.split(\" \").forEach(function\
    \ (parens) {\n        depth.push(calc_paren_nesting(parens));\n    });\n    return\
    \ depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiy2t_rfc.ts(9,20): error TS2304: Cannot find name
    ''calc_paren_nesting''.

    '
  timestamp: 1660014270
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = []\n    const paren_groups = paren_string.split(\"\
    \ \")\n    for (let i = 0; i < paren_groups.length; i++) {\n        let count\
    \ = 0\n        for (let j = 0; j < paren_groups[i].length; j++) {\n          \
    \  if (paren_groups[i][j] === \"(\") {\n                count++\n            }\n\
    \        }\n        result.push(count)\n    }\n    return result\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpgg8asme0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpgg8asme0.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014270
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parse_result: number[] = [];\n    let depth: number = 0;\n    for\
    \ (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] ===\
    \ \"(\") {\n            depth++;\n        } else if (paren_string[i] === \")\"\
    ) {\n            depth--;\n        } else if (paren_string[i] === \" \") {\n \
    \           parse_result.push(depth);\n            depth = 0;\n        }\n   \
    \ }\n    return parse_result;\n}\n\nconsole.log(parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpbi0m292w.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbi0m292w.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 0, 0, 0 ]

    '
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const tokens = paren_string.split(' ');\n    return tokens.map(token\
    \ => parse_nested_parens_token(token));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkv_ko5h8.ts(8,32): error TS2304: Cannot find name
    ''parse_nested_parens_token''.

    '
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let results: number[] = [];\n  for (let sub_string of paren_string.split(\"\
    \ \")) {\n    if (sub_string.includes(\"(\")) {\n      let num_opened = 0;\n \
    \     let deepest_level = 0;\n      for (let i = 0; i < sub_string.length; i++)\
    \ {\n        if (sub_string[i] === \"(\") {\n          num_opened++;\n       \
    \   if (num_opened > deepest_level) {\n            deepest_level = num_opened;\n\
    \          }\n        } else if (sub_string[i] === \")\") {\n          num_opened--;\n\
    \        }\n      }\n      results.push(deepest_level);\n    } else {\n      results.push(0);\n\
    \    }\n  }\n  return results;\n}\n\nconsole.log(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3retxl10.ts(9,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660014270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    // your code goes here\n    let open = 0;\n    let maxLevel = 0;\n  \
    \  let result: number[] = [];\n    for (let i = 0; i < paren_string.length; i++)\
    \ {\n        if (paren_string[i] === \"(\") {\n            open++;\n         \
    \   maxLevel = Math.max(maxLevel, open);\n        } else if (paren_string[i] ===\
    \ \")\") {\n            open--;\n        } else if (paren_string[i] === \" \"\
    ) {\n            result.push(maxLevel);\n            maxLevel = 0;\n         \
    \   open = 0;\n        }\n    }\n    result.push(maxLevel);\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let groups: string[] = paren_string.split(\"\
    \ \");\n    let max_nesting: number = 0;\n    let curr_nesting: number = 0;\n\
    \    for (let group of groups) {\n        curr_nesting = 0;\n        max_nesting\
    \ = 0;\n        for (let char of group) {\n            if (char === \"(\") {\n\
    \                curr_nesting++;\n                if (curr_nesting > max_nesting)\
    \ {\n                    max_nesting = curr_nesting;\n                }\n    \
    \        } else if (char === \")\") {\n                curr_nesting--;\n     \
    \       }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9cl9gl2m.ts(14,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  let max_depth = 0;\n  let depth = 0;\n\
    \  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] ===\
    \ \"(\") {\n      depth++;\n      max_depth = Math.max(max_depth, depth);\n  \
    \  } else if (paren_string[i] === \")\") {\n      depth--;\n    } else if (paren_string[i]\
    \ === \" \") {\n      result.push(max_depth);\n      max_depth = 0;\n      depth\
    \ = 0;\n    }\n  }\n  result.push(max_depth);\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_matches = paren_string.match(/[^\\s]*/g);\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < paren_matches.length; i++) {\n     \
    \   const paren_match = paren_matches[i];\n        if (paren_match.length ===\
    \ 0) {\n            result.push(0);\n        } else {\n            let max_depth\
    \ = 0;\n            let depth = 0;\n            for (let j = 0; j < paren_match.length;\
    \ j++) {\n                const paren = paren_match[j];\n                if (paren\
    \ === '(') {\n                    depth++;\n                    if (depth > max_depth)\
    \ {\n                        max_depth = depth;\n                    }\n     \
    \           } else if (paren === ')') {\n                    depth--;\n      \
    \          }\n            }\n            result.push(max_depth);\n        }\n\
    \    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0,\n\
    \  3,\n  0,\n  1,\n  0,\n  3,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwv9suw5c.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwv9suw5c.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 0, 3, 0,\n    1, 0, 3, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result = [];\n    let stack = [];\n    paren_string.split(\" \").forEach(paren_group\
    \ => {\n        let depth = 0;\n        let max_depth = 0;\n        for (let i\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                stack.push(paren_group[i]);\n                depth += 1;\n\
    \            } else if (paren_group[i] === \")\") {\n                stack.pop();\n\
    \                depth -= 1;\n            }\n            if (depth > max_depth)\
    \ {\n                max_depth = depth;\n            }\n        }\n        result.push(max_depth);\n\
    \    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    let result_i: number = 0;\n    let curr_level:\
    \ number = 0;\n    let max_level: number = 0;\n    for (let i: number = 0; i <\
    \ paren_string.length; i++) {\n        if (paren_string[i] === \"(\") {\n    \
    \        curr_level += 1;\n            max_level = Math.max(max_level, curr_level);\n\
    \        } else if (paren_string[i] === \")\") {\n            curr_level -= 1;\n\
    \        } else if (paren_string[i] === \" \") {\n            result[result_i]\
    \ = max_level;\n            result_i += 1;\n            max_level = 0;\n     \
    \       curr_level = 0;\n        }\n    }\n    result[result_i] = max_level;\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const output = [];\n  let parens = paren_string.split(\" \");\n  parens.forEach((s)\
    \ => {\n    let str = s;\n    let count = 0;\n    let max = 0;\n    while (str.length\
    \ > 0) {\n      if (str[0] === \"(\") {\n        count++;\n        max = count\
    \ > max ? count : max;\n      } else {\n        count--;\n      }\n      str =\
    \ str.slice(1);\n    }\n    output.push(max);\n  });\n  return output;\n}\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_array = paren_string.split(' ');\n  const max_depth_array =\
    \ [];\n  let depth = 0;\n  let max_depth = 0;\n  for (let i = 0; i < paren_array.length;\
    \ i++) {\n    const paren = paren_array[i];\n    for (let j = 0; j < paren.length;\
    \ j++) {\n      const char = paren[j];\n      if (char === '(') {\n        depth++;\n\
    \        if (depth > max_depth) {\n          max_depth = depth;\n        }\n \
    \     } else if (char === ')') {\n        depth--;\n      }\n    }\n    max_depth_array.push(max_depth);\n\
    \    depth = 0;\n    max_depth = 0;\n  }\n  return max_depth_array;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014270
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result = [];\n    for (let string_index = 0; string_index < paren_string.length;\
    \ string_index++) {\n        let current_paren_string = paren_string[string_index];\n\
    \        let current_result = 0;\n        for (let char_index = 0; char_index\
    \ < current_paren_string.length; char_index++) {\n            if (current_paren_string[char_index]\
    \ === \"(\") {\n                current_result += 1;\n            } else if (current_paren_string[char_index]\
    \ === \")\") {\n                current_result -= 1;\n            }\n        }\n\
    \        result.push(current_result);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  -1,\n  1,\n  -1,\n  -1,\n  0,\n  1,\n  1,\n  1,\n  -1,\n  -1,\n  -1,\n  0,\n\
    \  1,\n  -1,\n  0,\n  1,\n  1,\n  1,\n  -1,\n  -1,\n  1,\n  -1,\n  1,\n  -1,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpzm6qfpd2.js:26:12)\n    at Object.<anonymous> (/tmp/tmpzm6qfpd2.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \  1, -1,  1, -1, -1, 0,  1,\n    1,  1, -1, -1, -1,  0, 1, -1,\n    0,  1,  1,\
    \  1, -1, -1, 1, -1,\n    1, -1, -1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens = paren_string.split(\" \");\n    return parens.map(p => p.split(\"\
    \").reduce((acc, c) => acc + (c === \"(\" ? 1 : -1), 0));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpupxmg3zm.js:13:12)\n    at Object.<anonymous> (/tmp/tmpupxmg3zm.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(' ');\n  let finalArr: number[] = [];\n\
    \  for (let i = 0; i < parens.length; i++) {\n    let arr: string[] = parens[i].split('');\n\
    \    let sum = 0;\n    let arr2: number[] = [];\n    for (let j = 0; j < arr.length;\
    \ j++) {\n      if (arr[j] === '(') {\n        sum += 1;\n      } else if (arr[j]\
    \ === ')') {\n        sum -= 1;\n      }\n      arr2.push(sum);\n    }\n    finalArr.push(Math.max(...arr2));\n\
    \  }\n  return finalArr;\n}\n\nexport const test_inputs = [\n  ['((()))', 3],\n\
    \  ['(()())', 2],\n  ['()((()))', 3],\n  ['()((())))', 3],\n  ['()((()()))', 4],\n\
    \  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))',\
    \ 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))',\
    \ 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))',\
    \ 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))',\
    \ 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))',\
    \ 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))', 4],\n  ['()((()()))',\
    \ 4],\n  ['()((()\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmgg_9t1m.ts(56,11): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpmgg_9t1m.ts(57,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpmgg_9t1m.ts(57,9): error TS1005: '','' expected.

    '
  timestamp: 1660014272
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(\" \").map(s => {\n    let stack = [];\n    let\
    \ depth = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] === \"\
    (\") {\n        stack.push(s[i]);\n        depth = Math.max(depth, stack.length);\n\
    \      } else {\n        stack.pop();\n      }\n    }\n    return depth;\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014272
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const split_parens = paren_string.split(\" \");\n  let new_array: number[]\
    \ = [];\n  for (let i = 0; i < split_parens.length; i++) {\n    let count = 0;\n\
    \    for (let j = 0; j < split_parens[i].length; j++) {\n      if (split_parens[i][j]\
    \ === \"(\") {\n        count++;\n      }\n    }\n    new_array.push(count);\n\
    \  }\n  return new_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp71j8xty5.js:23:12)\n    at Object.<anonymous> (/tmp/tmp71j8xty5.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014272
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let groups = paren_string.split(\" \");\n    let results: number[] =\
    \ [];\n    for (let i = 0; i < groups.length; i++) {\n        let char_arr = groups[i].split(\"\
    \");\n        let parens: Parens = {\n            left: 0,\n            right:\
    \ 0,\n            max: 0\n        };\n        for (let j = 0; j < char_arr.length;\
    \ j++) {\n            char_arr[j] === \"(\" ? parens.left++ : parens.right++;\n\
    \            if (parens.left === parens.right) {\n                parens.max =\
    \ parens.left;\n            }\n        }\n        results.push(parens.max);\n\
    \    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppy2iqqd0.ts(11,21): error TS2304: Cannot find name
    ''Parens''.

    '
  timestamp: 1660014272
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    //new RegExp(\"\",\"g\")\n    return [];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_wbsrlte.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_wbsrlte.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  for (let parens of paren_string.split(\"\
    \ \")) {\n    // We use the stack data structure to achieve this.\n    let stack:\
    \ string[] = [];\n    let max_nesting: number = 0;\n    for (let char of parens)\
    \ {\n      if (char === \"(\") {\n        stack.push(char);\n        max_nesting\
    \ = Math.max(max_nesting, stack.length);\n      } else if (char === \")\") {\n\
    \        if (stack.length > 0) {\n          stack.pop();\n        } else {\n \
    \         throw Error(\"More closing than opening parens\");\n        }\n    \
    \  }\n    }\n    if (stack.length !== 0) {\n      throw Error(\"More opening than\
    \ closing parens\");\n    }\n    result.push(max_nesting);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7cjoeu58.ts(12,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const levels = paren_groups.map(group\
    \ => {\n    let max_nesting = 0;\n    let current_nesting = 0;\n    for (let i\
    \ = 0; i < group.length; i++) {\n      if (group[i] === \"(\") {\n        current_nesting++;\n\
    \        max_nesting = Math.max(max_nesting, current_nesting);\n      } else if\
    \ (group[i] === \")\") {\n        current_nesting--;\n      }\n    }\n    return\
    \ max_nesting;\n  });\n  return levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014273
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(\" \").map(parse_nested_parens_single);\n}\n\
    \nexport { parse_nested_parens, parse_nested_parens_single };\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8ik6zn6_.ts(7,40): error TS2304: Cannot find name
    ''parse_nested_parens_single''.

    ../../../../../tmp/tmp8ik6zn6_.ts(10,31): error TS2304: Cannot find name ''parse_nested_parens_single''.

    '
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    // remove all the spaces\n    let cleaned_string = paren_string.replace(/\\\
    s/g, '');\n    let paren_stack: string[] = [];\n    let paren_counter: number[]\
    \ = [];\n    let depth: number = 0;\n    for (let i = 0; i < cleaned_string.length;\
    \ i++) {\n        let ch = cleaned_string[i];\n        if (ch === '(') {\n   \
    \         depth += 1;\n            paren_stack.push(ch);\n        } else if (ch\
    \ === ')') {\n            depth -= 1;\n            paren_stack.pop();\n      \
    \  }\n        if (depth === 0) {\n            // console.log(i, ch, depth);\n\
    \            paren_counter.push(paren_stack.length);\n        }\n    }\n    return\
    \ paren_counter;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmph91jcwkw.js:32:12)\n    at Object.<anonymous> (/tmp/tmph91jcwkw.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  paren_string.split(\" \").forEach((paren)\
    \ => {\n    const parenStack: string[] = [];\n    let max: number = 0;\n    for\
    \ (let i = 0; i < paren.length; i++) {\n      const current = paren[i];\n    \
    \  if (current === \"(\") {\n        parenStack.push(current);\n        max =\
    \ Math.max(max, parenStack.length);\n      } else {\n        parenStack.pop();\n\
    \      }\n    }\n    result.push(max);\n  });\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014273
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let current_paren_string = \"\";\n  for (let\
    \ char of paren_string) {\n    if (char === \" \") {\n      result.push(get_max_level_nesting(current_paren_string));\n\
    \      current_paren_string = \"\";\n    } else {\n      current_paren_string\
    \ += char;\n    }\n  }\n  result.push(get_max_level_nesting(current_paren_string));\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvvuck_yg.ts(9,20): error TS2494: Using a string in
    a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpvvuck_yg.ts(11,19): error TS2304: Cannot find name ''get_max_level_nesting''.

    ../../../../../tmp/tmpvvuck_yg.ts(17,15): error TS2304: Cannot find name ''get_max_level_nesting''.

    '
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(paren_string => paren_string.split('').reduce((nested_par:\
    \ number, char: string, index: number, full_str: string[]) => {\n    if (char\
    \ === '(') {\n      nested_par += 1;\n    } else if (char === ')') {\n      nested_par\
    \ -= 1;\n    }\n    return nested_par;\n  }, 0));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpxc0y6bd8.js:20:12)\n    at Object.<anonymous> (/tmp/tmpxc0y6bd8.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let parens_array = paren_string.split(\" \");\n  return parens_array.map(paren\
    \ => {\n    return (Math.floor(Math.sqrt(paren.length)));\n  });\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpvr25z1nf.js:15:12)\n    at Object.<anonymous> (/tmp/tmpvr25z1nf.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 1,\
    \ 3 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    var depth_list: number[] = [];\n    var depth: number = 0;\n    var max_depth:\
    \ number = 0;\n    for (var i: number = 0; i < paren_string.length; i++) {\n \
    \       if (paren_string[i] == \"(\") {\n            depth += 1;\n           \
    \ max_depth = Math.max(max_depth, depth);\n        } else if (paren_string[i]\
    \ == \")\") {\n            depth -= 1;\n        } else if (paren_string[i] ==\
    \ \" \") {\n            depth_list.push(max_depth);\n            max_depth = 0;\n\
    \        }\n    }\n    return depth_list;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpuh_jg6yn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpuh_jg6yn.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 2, 3, 1 ]

    '
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  // base cases\n  if (paren_string === \"\") {\n    return [];\n  }\n  //\
    \ recursive cases\n  // consider a single string first\n  let max_so_far = 0;\n\
    \  let curr_max = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if\
    \ (paren_string[i] === \"(\") {\n      curr_max += 1;\n    } else if (paren_string[i]\
    \ === \")\") {\n      curr_max -= 1;\n    }\n    max_so_far = Math.max(max_so_far,\
    \ curr_max);\n  }\n  return [max_so_far].concat(parse_nested_parens(paren_string.slice(paren_string.indexOf(\"\
    \ \") + 1)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp3qjgfws8.js:6\nfunction parse_nested_parens(paren_string) {\n \
    \                           ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at parse_nested_parens (/tmp/tmp3qjgfws8.js:6:29)\n    at parse_nested_parens\
    \ (/tmp/tmp3qjgfws8.js:24:32)\n    at parse_nested_parens (/tmp/tmp3qjgfws8.js:24:32)\n\
    \    at parse_nested_parens (/tmp/tmp3qjgfws8.js:24:32)\n    at parse_nested_parens\
    \ (/tmp/tmp3qjgfws8.js:24:32)\n    at parse_nested_parens (/tmp/tmp3qjgfws8.js:24:32)\n\
    \    at parse_nested_parens (/tmp/tmp3qjgfws8.js:24:32)\n    at parse_nested_parens\
    \ (/tmp/tmp3qjgfws8.js:24:32)\n    at parse_nested_parens (/tmp/tmp3qjgfws8.js:24:32)\n\
    \    at parse_nested_parens (/tmp/tmp3qjgfws8.js:24:32)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  let deep = 0;\n  let current = 0;\n  for\
    \ (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(')\
    \ {\n      deep++;\n      current++;\n    } else if (paren_string[i] === ')')\
    \ {\n      deep--;\n      if (deep === 0) {\n        result.push(current);\n \
    \       current = 0;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp6fyw7x7x.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6fyw7x7x.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_arr = paren_string.split(' ');\n  const result: number[] =\
    \ [];\n  for (let i = 0; i < paren_arr.length; i++) {\n    result.push(parse_parens(paren_arr[i]));\n\
    \  }\n  return result;\n}\n\nconsole.log(parse_nested_parens('(()()) ((())) ()\
    \ ((())()())'));\nconsole.log(parse_nested_parens('(()())(()())()'));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpllxyo5gz.ts(10,17): error TS2304: Cannot find name
    ''parse_parens''.

    '
  timestamp: 1660014273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let list: string[] = paren_string.split(\"\
    \ \");\n  //console.log(list);\n  for (let index = 0; index < list.length; index++)\
    \ {\n    let _paren: string = list[index];\n    let i: number = 0;\n    let stack:\
    \ number[] = [];\n    let max: number = 0;\n    while (i < _paren.length) {\n\
    \      let char: string = _paren.charAt(i);\n      if (char === \"(\") {\n   \
    \     stack.push(1);\n      } else if (char === \")\") {\n        stack.pop();\n\
    \      }\n      if (stack.length > max) {\n        max = stack.length;\n     \
    \ }\n      i++;\n    }\n    result.push(max);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens = paren_string.split(' ');\n    let result: number[] = [];\n\
    \    parens.forEach(paren => {\n        let curr_sum = 0;\n        let max_sum\
    \ = 0;\n        for (let i = 0; i < paren.length; i++) {\n            if (paren[i]\
    \ === '(') {\n                curr_sum++;\n            } else {\n            \
    \    curr_sum--;\n            }\n            max_sum = Math.max(max_sum, curr_sum);\n\
    \        }\n        result.push(max_sum);\n    });\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_array = paren_string.split(\" \");\n  const result = [];\n\
    \  for (let i = 0; i < paren_array.length; i++) {\n    const current = paren_array[i];\n\
    \    const open = [];\n    let count = 0;\n    for (let j = 0; j < current.length;\
    \ j++) {\n      if (current[j] === \"(\") {\n        open.push(current[j]);\n\
    \        count++;\n      } else if (current[j] === \")\") {\n        open.pop();\n\
    \        count--;\n      }\n    }\n    result.push(Math.abs(count));\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp8_qvmyf0.js:30:12)\n    at Object.<anonymous> (/tmp/tmp8_qvmyf0.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const reg = /([()]{2,})/g;\n  return paren_string.split(\" \").map((s)\
    \ => {\n    const matches = s.match(reg);\n    if (matches) {\n      return Math.max(...matches.map((m)\
    \ => m.length));\n    }\n    return 0;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  6,\n\
    \  2,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmpziunwork.js:19:12)\n    at Object.<anonymous> (/tmp/tmpziunwork.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 6, 2,\
    \ 10 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014273
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  // Algorithm:\n  // Keep an array of integers that represent number of\
    \ paren levels currently open\n  //    E.g. if the string is \"()\" then we'll\
    \ have [1, 0]\n  // Every time we open a new paren, push the current sum to the\
    \ end of the array\n  // Every time we close a paren, just subtract 1 from the\
    \ end of the array\n  // Once we finish the string, take the max of the array\
    \ and that's your output\n\n  const paren_levels: number[] = [0];\n  for (const\
    \ c of paren_string) {\n    if (c === \"(\") {\n      paren_levels.push(paren_levels[paren_levels.length\
    \ - 1] + 1);\n    } else if (c === \")\") {\n      paren_levels[paren_levels.length\
    \ - 1] -= 1;\n    }\n  }\n\n  return paren_levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0h_e72xn.ts(15,19): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(\" \").map(paren => {\n        let paren_count\
    \ = 0;\n        let max_paren_count = 0;\n        for (let i = 0; i < paren.length;\
    \ i++) {\n            if (paren[i] === \"(\") {\n                paren_count++;\n\
    \                max_paren_count = Math.max(max_paren_count, paren_count);\n \
    \           } else if (paren[i] === \")\") {\n                paren_count--;\n\
    \            }\n        }\n        return max_paren_count;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  // >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n  // [2, 3,\
    \ 1, 3]\n  const groups = paren_string.split(\" \");\n\n  let max = 0;\n  const\
    \ answer = groups.map((group) => {\n    max = 0;\n    let level = 0;\n    for\
    \ (let i = 0; i < group.length; i++) {\n      if (group[i] === \"(\") {\n    \
    \    level++;\n        max = Math.max(max, level);\n      } else {\n        level--;\n\
    \      }\n    }\n    return max;\n  });\n  return answer;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014274
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let parens_per_group: number[] = [];\n  let groups: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < groups.length; i++) {\n    parens_per_group.push(count_parens(groups[i]));\n\
    \  }\n  return parens_per_group;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbga0rs60.ts(10,27): error TS2304: Cannot find name
    ''count_parens''.

    '
  timestamp: 1660014274
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    for (let str of paren_string.split(\"\
    \ \")) {\n        let level: number = 0;\n        let maxLevel: number = 0;\n\
    \        for (let char of str) {\n            if (char === \"(\") {\n        \
    \        level++;\n            } else if (char === \")\") {\n                level--;\n\
    \            }\n            maxLevel = Math.max(maxLevel, level);\n        }\n\
    \        result.push(maxLevel);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfbyuassb.ts(11,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014275
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    //TODO: Implement this function.\n    return [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpnzk75e2c.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnzk75e2c.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014275
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const num_parens = paren_string.length;\n    if (num_parens === 0) {\n\
    \        return [];\n    }\n    const res: number[] = [];\n    const stack: string[]\
    \ = [];\n    let i = 0;\n    while (i < num_parens) {\n        const curr_char\
    \ = paren_string[i];\n        if (curr_char === \"(\") {\n            stack.push(curr_char);\n\
    \        } else if (curr_char === \")\") {\n            const popped_elem = stack.pop();\n\
    \            if (popped_elem === undefined) {\n                return [];\n  \
    \          }\n        } else if (curr_char === \" \") {\n            res.push(stack.length);\n\
    \            stack.length = 0;\n        }\n        i++;\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpexsqftre.js:36:12)\n    at Object.<anonymous> (/tmp/tmpexsqftre.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const output = [];\n  const paren_array = paren_string.split(\" \");\n\
    \  for (let paren of paren_array) {\n    let counter = 0;\n    let max = 0;\n\
    \    for (let char of paren) {\n      if (char === \"(\") {\n        counter++;\n\
    \        if (counter > max) {\n          max = counter;\n        }\n      } else\
    \ if (char === \")\") {\n        counter--;\n      }\n    }\n    output.push(max);\n\
    \  }\n  return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn9ukcysk.ts(12,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let group_index = 0;\n  let group_counter = 0;\n  let groups = [];\n  for\
    \ (let s of paren_string) {\n    if (s === '(') {\n      group_counter++;\n  \
    \  } else if (s === ')') {\n      group_counter--;\n    } else if (s === ' ')\
    \ {\n      groups.push(group_counter);\n      group_counter = 0;\n    }\n  }\n\
    \  groups.push(group_counter);\n  return groups;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppfaqgedx.ts(10,17): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const output: number[] = [];\n    let current_level: number = 0;\n  \
    \  let max_level: number = 0;\n    for (let char of paren_string) {\n        if\
    \ (char === '(') {\n            current_level++;\n            max_level = Math.max(max_level,\
    \ current_level);\n        } else if (char === ')') {\n            current_level--;\n\
    \        } else if (char === ' ') {\n            output.push(max_level);\n   \
    \         max_level = 0;\n            current_level = 0;\n        }\n    }\n \
    \   output.push(max_level);\n    return output;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjgtho8ht.ts(10,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const parens = paren_string.split(\" \"\
    );\n  for (const paren of parens) {\n    let max = 0;\n    let count = 0;\n  \
    \  for (const char of paren) {\n      if (char === \"(\") {\n        count++;\n\
    \      } else if (char === \")\") {\n        count--;\n      }\n      if (count\
    \ > max) {\n        max = count;\n      }\n    }\n    result.push(max);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoa8bppwo.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(\" \").map(string => {\n    let prev_count =\
    \ 0;\n    let deepest_count = 0;\n    for (let ch of string) {\n      if (ch ===\
    \ \"(\") {\n        prev_count += 1;\n      } else if (ch === \")\") {\n     \
    \   prev_count -= 1;\n      }\n      if (prev_count > deepest_count) {\n     \
    \   deepest_count = prev_count;\n      }\n    }\n    return deepest_count;\n \
    \ });\n}\n\nconsole.log(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfczgz6wc.ts(10,20): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  let result: number[] = [];\n\
    \  for (let i = 0; i < groups.length; i++) {\n    result.push(groupCount(groups[i]));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6wza1db9.ts(10,17): error TS2304: Cannot find name
    ''groupCount''.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const results: number[] = [];\n    const groups = paren_string.split(\"\
    \ \");\n    for (const group of groups) {\n        results.push(parse_nested_parens_helper(group));\n\
    \    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm9di41f9.ts(10,22): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1660014275
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  let result: number[] = [];\n\
    \  let count: number;\n  for (let i = 0; i < groups.length; i++) {\n    const\
    \ group = groups[i];\n    count = 0;\n    let level = 0;\n    for (let j = 0;\
    \ j < group.length; j++) {\n      const char = group[j];\n      if (char === \"\
    (\") {\n        level++;\n        if (level > count) {\n          count = level;\n\
    \        }\n      } else if (char === \")\") {\n        level--;\n      }\n  \
    \  }\n    result.push(count);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014276
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let max_levels = [];\n  const groups = paren_string.split(\" \");\n  groups.forEach((group)\
    \ => {\n    let curr_level = 0;\n    let max_level = 0;\n    for (let i = 0; i\
    \ < group.length; i++) {\n      if (group[i] === \"(\") {\n        curr_level++;\n\
    \        if (curr_level > max_level) {\n          max_level = curr_level;\n  \
    \      }\n      } else if (group[i] === \")\") {\n        curr_level--;\n    \
    \  }\n    }\n    max_levels.push(max_level);\n  });\n  return max_levels;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014276
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_stack: string[] = [];\n  const max_nested_parens_by_group:\
    \ number[] = [];\n  let max_nested_parens_in_group = 0;\n  let start_new_group\
    \ = true;\n  paren_string.split(\"\").forEach((ch: string) => {\n    if (ch ===\
    \ \"(\") {\n      paren_stack.push(ch);\n      if (start_new_group) {\n      \
    \  start_new_group = false;\n      }\n    } else if (ch === \")\") {\n      paren_stack.pop();\n\
    \      if (paren_stack.length > max_nested_parens_in_group) {\n        max_nested_parens_in_group\
    \ = paren_stack.length;\n      }\n    } else if (ch === \" \") {\n      if (paren_stack.length\
    \ !== 0) {\n        throw new Error(\"Invalid paren string\");\n      }\n    \
    \  start_new_group = true;\n      max_nested_parens_by_group.push(max_nested_parens_in_group);\n\
    \      max_nested_parens_in_group = 0;\n    }\n  });\n  return max_nested_parens_by_group;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp6ehe6npv.js:38:12)\n    at Object.<anonymous> (/tmp/tmp6ehe6npv.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014276
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_arr = paren_string.split(\" \");\n    let arr_result: number[]\
    \ = [];\n    for (let paren of paren_arr) {\n        arr_result.push(get_deepest_level(paren));\n\
    \    }\n    return arr_result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa8beclx1.ts(10,25): error TS2304: Cannot find name
    ''get_deepest_level''.

    '
  timestamp: 1660014275
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let result = [];\n  for\
    \ (let i = 0; i < paren_groups.length; i++) {\n    result.push(deepest_nesting(paren_groups[i]));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpky09h23d.ts(10,17): error TS2304: Cannot find name
    ''deepest_nesting''.

    '
  timestamp: 1660014276
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    //debugger;\n    const result: number[] = [];\n    let start = 0;\n \
    \   while (start < paren_string.length) {\n        let i = start;\n        while\
    \ (paren_string[i] !== ' ' && i < paren_string.length) i++;\n        const sub_string\
    \ = paren_string.substring(start, i);\n        let level = 0;\n        let max_level\
    \ = 0;\n        for (let j = 0; j < sub_string.length; j++) {\n            if\
    \ (sub_string[j] === '(') {\n                level++;\n                max_level\
    \ = Math.max(max_level, level);\n            } else if (sub_string[j] === ')')\
    \ {\n                level--;\n            }\n        }\n        result.push(max_level);\n\
    \        start = i + 1;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014276
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const split_parens = paren_string.split('\
    \ ');\n    for (const paren of split_parens) {\n        let current_level = 0;\n\
    \        let highest_level = 0;\n        for (const character of paren) {\n  \
    \          if (character === '(') {\n                current_level++;\n      \
    \      } else if (character === ')') {\n                current_level--;\n   \
    \         }\n            if (current_level > highest_level) {\n              \
    \  highest_level = current_level;\n            }\n        }\n        result.push(highest_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprlii1ifm.ts(12,33): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014276
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  let results: number[]\
    \ = [];\n  let max_depth = 0;\n  let temp_depth = 0;\n  for (let i = 0; i < paren_groups.length;\
    \ i++) {\n    temp_depth = 0;\n    max_depth = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        temp_depth++;\n \
    \     } else if (paren_groups[i][j] === \")\") {\n        temp_depth--;\n    \
    \  }\n      if (temp_depth > max_depth) {\n        max_depth = temp_depth;\n \
    \     }\n    }\n    results.push(max_depth);\n  }\n  return results;\n}\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014276
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(' ').map(parse_parens_group);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1kvj8v44.ts(7,40): error TS2304: Cannot find name
    ''parse_parens_group''.

    '
  timestamp: 1660014275
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const max_level = groups.map(group\
    \ => {\n    let max = 0;\n    let level = 0;\n    for (let i = 0; i < group.length;\
    \ i++) {\n      const char = group[i];\n      if (char === \"(\") {\n        level++;\n\
    \      } else if (char === \")\") {\n        level--;\n      }\n      max = Math.max(max,\
    \ level);\n    }\n    return max;\n  });\n  return max_level;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014276
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let rv: number[] = [];\n    let open = 0;\n    let max = 0;\n    for\
    \ (let ch of paren_string) {\n        if (ch === '(') {\n            open += 1;\n\
    \            max = Math.max(max, open);\n        } else if (ch === ')') {\n  \
    \          open -= 1;\n        } else if (ch === ' ') {\n            rv.push(max);\n\
    \            max = 0;\n            open = 0;\n        }\n    }\n    rv.push(max);\n\
    \    return rv;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm1eoblu3.ts(10,20): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014276
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    // Initialise an array to keep track of the maximum level of parens for\
    \ each group\n    let levels: number[] = [];\n    // Get rid of spaces\n    paren_string\
    \ = paren_string.replace(/\\s/g, \"\");\n    // 1. Use a regex to split the groups\
    \ using the empty space\n    let groups: string[] = paren_string.split(/\\(\\\
    )/);\n    // 2. Iterate over each group to find the maximum depth of nested parens\n\
    \    for (let i: number = 0; i < groups.length; i++) {\n        let current_level:\
    \ number = 1;\n        // 1. Keep track of the number of opening and closing parentheses\n\
    \        let num_open: number = 0;\n        let num_close: number = 0;\n     \
    \   // 2. Iterate over the group to find the max level of nested parens\n    \
    \    for (let j: number = 0; j < groups[i].length; j++) {\n            if (groups[i][j]\
    \ === \"(\") {\n                num_open++;\n                if (num_open > num_close)\
    \ {\n                    current_level++;\n                }\n            } else\
    \ if (groups[i][j] === \")\") {\n                num_close++;\n            }\n\
    \        }\n        // 3. Add the current level to the list\n        levels.push(current_level);\n\
    \    }\n    return levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  2,\n  1,\n  3,\n  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpwwgr2ds_.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwwgr2ds_.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 2, 1,\n    3, 1, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014277
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let output: number[] = [];\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === \"(\") {\n            let close_paren_counter\
    \ = 0;\n            let open_paren_counter = 0;\n            while (i < paren_string.length\
    \ && paren_string[i] !== \" \") {\n                if (paren_string[i] === \"\
    (\") {\n                    open_paren_counter++;\n                } else if (paren_string[i]\
    \ === \")\") {\n                    close_paren_counter++;\n                }\n\
    \                i++;\n            }\n            output.push(Math.min(open_paren_counter,\
    \ close_paren_counter));\n        }\n    }\n    return output;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpwhlce9cp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpwhlce9cp.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3, 3, 1, 5 ]

    '
  timestamp: 1660014277
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(\" \");\n  let res: number[] = [];\n\
    \  let count: number = 0;\n  let max: number = 0;\n  for (let i = 0; i < parens.length;\
    \ i++) {\n    const str = parens[i];\n    max = 0;\n    count = 0;\n    for (let\
    \ j = 0; j < str.length; j++) {\n      if (str[j] === \"(\") {\n        count++;\n\
    \        max = count > max ? count : max;\n      } else if (str[j] === \")\")\
    \ {\n        count--;\n      }\n    }\n    res.push(max);\n  }\n  return res;\n\
    }\n\nconsole.log(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014277
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(s => {\n    let parens = 0;\n    let\
    \ maxParens = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] ===\
    \ '(') {\n        parens++;\n        maxParens = Math.max(maxParens, parens);\n\
    \      } else if (s[i] === ')') {\n        parens--;\n      }\n    }\n    return\
    \ maxParens;\n  });\n}\n\nexport function is_valid_parens(paren_string: string):\
    \ boolean {\n  let parens = 0;\n  for (let i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === '(') {\n      parens++;\n    } else if (paren_string[i]\
    \ === ')') {\n      parens--;\n    }\n    if (parens < 0) {\n      return false;\n\
    \    }\n  }\n  return parens === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let paren_group: string[] = paren_string.split(\"\
    \ \");\n  for (let i = 0; i < paren_group.length; i++) {\n    result.push(parse_single_paren(paren_group[i]));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplkwogiy9.ts(10,17): error TS2304: Cannot find name
    ''parse_single_paren''.

    '
  timestamp: 1660014277
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const parens: string[] = paren_string.split(' ');\n    const levels:\
    \ number[] = [];\n    let current_level: number = 0;\n    let max_level: number\
    \ = 0;\n    for (let i = 0; i < parens.length; i++) {\n        current_level =\
    \ 0;\n        for (let j = 0; j < parens[i].length; j++) {\n            if (parens[i][j]\
    \ === '(') {\n                current_level++;\n            } else if (parens[i][j]\
    \ === ')') {\n                current_level--;\n            }\n        }\n   \
    \     levels.push(current_level);\n    }\n    return levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpxtfu_unv.js:28:12)\n    at Object.<anonymous> (/tmp/tmpxtfu_unv.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014278
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(\" \").map(\n    (group) => {\n      // solution\
    \ 1\n      // let max_dep = 0;\n      // let dep = 0;\n      // for (let i = 0;\
    \ i < group.length; i++) {\n      //   const curr = group[i];\n      //   if (curr\
    \ === \"(\") {\n      //     dep++;\n      //   } else {\n      //     dep--;\n\
    \      //   }\n      //   max_dep = Math.max(max_dep, dep);\n      // }\n    \
    \  // return max_dep;\n\n      // solution 2\n      return group.split(\"\").reduce((acc,\
    \ curr) => {\n        return curr === \"(\" ? acc + 1 : acc - 1;\n      }, 0);\n\
    \    }\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp27qrehrs.js:30:12)\n    at Object.<anonymous> (/tmp/tmp27qrehrs.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014278
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp82d545b9.js:12:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82d545b9.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(group => {\n    const parents = group.split('').filter(c\
    \ => c === '(' || c === ')');\n    let sum = 0;\n    let max = 0;\n    parents.forEach(p\
    \ => {\n      if (p === '(') {\n        sum++;\n        max = Math.max(max, sum);\n\
    \      } else {\n        sum--;\n      }\n    });\n    return max;\n  });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let result: number[] = [];\n  let lines = paren_string.split(' ');\n  let\
    \ linesNum = lines.length;\n  for (let i = 0; i < linesNum; i++) {\n    let currentLine\
    \ = lines[i];\n    let count = 0;\n    let currentResult = 0;\n    for (let j\
    \ = 0; j < currentLine.length; j++) {\n      if (currentLine[j] === '(') {\n \
    \       count++;\n        if (count > currentResult) {\n          currentResult\
    \ = count;\n        }\n      } else if (currentLine[j] === ')') {\n        count--;\n\
    \      }\n    }\n    result.push(currentResult);\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const paren_groups = paren_string.split(\" \");\n  const paren_stack: string[]\
    \ = [];\n  const paren_levels: number[] = [];\n  let max_level = 0;\n  let level\
    \ = 0;\n  paren_groups.forEach((paren_group) => {\n    paren_group.split(\"\"\
    ).forEach((char) => {\n      if (char === \"(\") {\n        paren_stack.push(char);\n\
    \        level += 1;\n        max_level = Math.max(max_level, level);\n      }\
    \ else if (char === \")\") {\n        paren_stack.pop();\n        level -= 1;\n\
    \      }\n    });\n    paren_levels.push(max_level);\n    max_level = 0;\n   \
    \ level = 0;\n  });\n  return paren_levels;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parenGroupList = paren_string.split(\" \");\n  return parenGroupList.map(parenGroup\
    \ => {\n    return get_nested_parens(parenGroup);\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmp8l_hlf.ts(9,12): error TS2552: Cannot find name
    ''get_nested_parens''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const entries = paren_string.split('\
    \ ');\n    for (const entry of entries) {\n        let depth = 0;\n        let\
    \ maxDepth = 0;\n        for (const c of entry) {\n            if (c === '(')\
    \ {\n                depth++;\n            } else if (c === ')') {\n         \
    \       depth--;\n            }\n            if (depth > maxDepth) {\n       \
    \         maxDepth = depth;\n            }\n        }\n        result.push(maxDepth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp24i_yhxc.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    const result: number[]\
    \ = [];\n    let max_nesting = 0;\n    for (const group of paren_groups) {\n \
    \       const nesting = get_nesting(group);\n        if (nesting > max_nesting)\
    \ {\n            max_nesting = nesting;\n        }\n        result.push(nesting);\n\
    \    }\n    for (let i = 0; i < result.length; i++) {\n        result[i] = max_nesting\
    \ - result[i];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83o138se.ts(11,25): error TS2304: Cannot find name
    ''get_nesting''.

    '
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_array = paren_string.split(' ');\n    const parsed_paren_array\
    \ = [];\n    for (let paren_expression of paren_array) {\n        let level =\
    \ 0;\n        let max_level = 0;\n        for (let char of paren_expression) {\n\
    \            if (char === '(') {\n                level++;\n            } else\
    \ if (char === ')') {\n                level--;\n            }\n            if\
    \ (level > max_level) {\n                max_level = level;\n            }\n \
    \       }\n        parsed_paren_array.push(max_level);\n    }\n    return parsed_paren_array;\n\
    }\n\nconsole.log(parse_nested_parens(\"(()()) ((())) () ((())()())\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpexce0fuz.ts(12,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const group_array = paren_string.split(\" \");\n  const result_array: number[]\
    \ = [];\n  for (let i = 0; i < group_array.length; i++) {\n    const paren_group\
    \ = group_array[i];\n    const result = find_deepest_nesting(paren_group);\n \
    \   result_array.push(result);\n  }\n  return result_array;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkapbst3i.ts(11,20): error TS2304: Cannot find name
    ''find_deepest_nesting''.

    '
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const groups = paren_string.split(\" \");\n    const nest_levels = [];\n\
    \    for (const group of groups) {\n        nest_levels.push(calculate_nest_level(group));\n\
    \    }\n    return nest_levels;\n}\n\nconsole.log(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp70jbl7kc.ts(10,26): error TS2304: Cannot find name
    ''calculate_nest_level''.

    '
  timestamp: 1660014278
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_groups = paren_string.split(\" \");\n  let paren_groups_nested_levels\
    \ = paren_groups.map(paren_group => {\n    let paren_group_nested_level = 0;\n\
    \    let paren_group_split = paren_group.split(\"\");\n    let paren_group_split_length\
    \ = paren_group_split.length;\n    for (let index = 0; index < paren_group_split_length;\
    \ index++) {\n      let current_char = paren_group_split[index];\n      let current_char_is_left_paren\
    \ = current_char === \"(\";\n      let current_char_is_right_paren = current_char\
    \ === \")\";\n      if (current_char_is_left_paren) {\n        paren_group_nested_level\
    \ += 1;\n      } else if (current_char_is_right_paren) {\n        paren_group_nested_level\
    \ -= 1;\n      }\n    }\n    return paren_group_nested_level;\n  });\n  return\
    \ paren_groups_nested_levels;\n}\n\nconsole.log(parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\nconsole.log(parse_nested_parens(\"(()()()) ((())())\"));\n\
    console.log(parse_nested_parens(\"((())) () ((())()())\"));\nconsole.log(parse_nested_parens(\"\
    ((())) ()\"));\nconsole.log(parse_nested_parens(\"(()())\"));\nconsole.log(parse_nested_parens(\"\
    ()\"));\nconsole.log(parse_nested_parens(\"\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpweab41fl.js:37:12)\n    at Object.<anonymous> (/tmp/tmpweab41fl.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 0, 0, 0, 0 ]

    [ 0, 0 ]

    [ 0, 0, 0 ]

    [ 0, 0 ]

    [ 0 ]

    [ 0 ]

    [ 0 ]

    '
  timestamp: 1660014278
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_list = paren_string.split(' ')\n    let result: number[] =\
    \ []\n    for (let paren of paren_list) {\n        let count = count_nested_parens(paren)\n\
    \        result.push(count)\n    }\n    return result\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprwng5g12.ts(10,21): error TS2304: Cannot find name
    ''count_nested_parens''.

    '
  timestamp: 1660014278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const results: number[] = [];\n    paren_string.split(\" \").forEach((paren_group:\
    \ string) => {\n        let max_nested_level = 0;\n        let current_nested_level\
    \ = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n            const\
    \ bracket = paren_group[i];\n            if (bracket === \"(\") {\n          \
    \      current_nested_level++;\n            } else if (bracket === \")\") {\n\
    \                current_nested_level--;\n            }\n            if (current_nested_level\
    \ > max_nested_level) {\n                max_nested_level = current_nested_level;\n\
    \            }\n        }\n        results.push(max_nested_level);\n    });\n\
    \    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014278
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    // let parens: string[] = paren_string.split(\" \");\n    // let max_length:\
    \ number[] = parens.map(paren => paren.length / 2);\n    //\n    // parens.forEach((paren,\
    \ idx) => {\n    //     let stack: string[] = [];\n    //     let stack_size:\
    \ number = 0;\n    //     for (let i = 0; i < paren.length; i++) {\n    //   \
    \      let char: string = paren[i];\n    //         if (char === \"(\") {\n  \
    \  //             stack.push(char);\n    //             stack_size++;\n    //\
    \         } else {\n    //             stack.pop();\n    //             stack_size--;\n\
    \    //         }\n    //\n    //         if (stack_size > max_length[idx]) {\n\
    \    //             max_length[idx] = stack_size;\n    //         }\n    //  \
    \   }\n    // });\n    //\n    // return max_length;\n\n    return paren_string.split(\"\
    \ \").map(paren => {\n        let stack: string[] = [];\n        let stack_size:\
    \ number = 0;\n        for (let i = 0; i < paren.length; i++) {\n            let\
    \ char: string = paren[i];\n            if (char === \"(\") {\n              \
    \  stack.push(char);\n                stack_size++;\n            } else {\n  \
    \              stack.pop();\n                stack_size--;\n            }\n  \
    \      }\n\n        return stack_size;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp2su6v_mk.js:50:12)\n    at Object.<anonymous> (/tmp/tmp2su6v_mk.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parens = paren_string.split(\" \");\n    let i = 0;\n    let open\
    \ = 0;\n    let deep = 0;\n    let depths = [];\n    let depth = 0;\n    let prev\
    \ = 0;\n    while (i < parens.length) {\n        let paren = parens[i];\n    \
    \    for (let j = 0; j < paren.length; j++) {\n            let char = paren[j];\n\
    \            if (char === \"(\") {\n                open++;\n                if\
    \ (open > deep) {\n                    deep = open;\n                }\n     \
    \       } else if (char === \")\") {\n                open--;\n            }\n\
    \        }\n        depths.push(deep);\n        i++;\n        deep = 0;\n    \
    \    open = 0;\n    }\n    return depths;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014279
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(' ').map(p => {\n        const stack = [];\n\
    \        for (let i = 0; i < p.length; i++) {\n            if (p[i] === '(') {\n\
    \                stack.push(p[i]);\n            } else {\n                stack.pop();\n\
    \            }\n        }\n        return stack.length;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpwlfh54gr.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwlfh54gr.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014279
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let groups = paren_string.split(\" \");\n  let result: number[] = [];\n\
    \  for (let group of groups) {\n    if (group === \"\") continue;\n    let level\
    \ = 0;\n    let max = 0;\n    for (let i = 0; i < group.length; i++) {\n     \
    \ if (group[i] === \"(\") {\n        level++;\n        max = Math.max(max, level);\n\
    \      } else if (group[i] === \")\") {\n        level--;\n      }\n    }\n  \
    \  result.push(max);\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014279
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let parens: string[] = paren_string.split(\" \");\n  let output: number[]\
    \ = [];\n  for (let i = 0; i < parens.length; i++) {\n    output.push(parens[i].length\
    \ - parens[i].replace(/[()]/g, \"\").length);\n  }\n  return output;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  6,\n\
    \  2,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmpn0mmm639.js:18:12)\n    at Object.<anonymous> (/tmp/tmpn0mmm639.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 6, 2,\
    \ 10 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 6, 6, 2, 10 ]

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const parenGroups = paren_string.split(\"\
    \ \");\n    for (const parenGroup of parenGroups) {\n        result.push(deepest_nested_parens(parenGroup));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsyw7cjw1.ts(10,21): error TS2552: Cannot find name
    ''deepest_nested_parens''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660014280
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    paren_string.split(' ').forEach(paren_substring\
    \ => {\n        let open_parentheses = 0;\n        let max_depth = 0;\n      \
    \  for (let i = 0; i < paren_substring.length; i++) {\n            if (paren_substring[i]\
    \ === '(') {\n                open_parentheses++;\n                max_depth =\
    \ Math.max(max_depth, open_parentheses);\n            } else {\n             \
    \   open_parentheses--;\n            }\n        }\n        result.push(max_depth);\n\
    \    });\n    return result;\n}\n\nconsole.log(parse_nested_parens('(()()) ((()))\
    \ () ((())()())'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014280
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  //TODO:\n  // Write your code here\n  return [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8duz3zpc.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8duz3zpc.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let paren_array = paren_string.split(\" \");\n    let result = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        result.push(parse_nested_parens_util(paren_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphfhrx5ts.ts(10,21): error TS2304: Cannot find name
    ''parse_nested_parens_util''.

    '
  timestamp: 1660014280
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let max_levels: number[] = [];\n  let curr_level: number = 0;\n  let paren_chars:\
    \ string[] = paren_string.split(\"\");\n  paren_chars.forEach((char) => {\n  \
    \  if (char === \"(\") {\n      curr_level += 1;\n    } else if (char === \")\"\
    ) {\n      curr_level -= 1;\n    } else if (char === \" \") {\n      max_levels.push(curr_level);\n\
    \      curr_level = 0;\n    }\n  });\n  return max_levels;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfwzy04t3.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfwzy04t3.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014280
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const temp = paren_string.replace(/\\(/g, ' ').replace(/\\)/g, ' ').split('\
    \ ');\n  const parens = temp.filter(item => item !== '');\n  const result = [];\n\
    \  let max = 0;\n  for (let i = 0; i < parens.length; i++) {\n    const item =\
    \ parens[i];\n    if (item.length === 0) {\n      result.push(0);\n    } else\
    \ {\n      for (let j = 0; j < item.length; j++) {\n        if (item[j] === '(')\
    \ {\n          max += 1;\n        } else {\n          max -= 1;\n        }\n \
    \     }\n      result.push(max);\n      max = 0;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmh_zjvs2.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmh_zjvs2.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const str = paren_string.split(' ');\n\
    \  str.forEach((s) => {\n    result.push(find_nested_parens(s));\n  });\n  return\
    \ result;\n}\n\nconst t1 = '(()())';\nconst t2 = '((()))';\nconst t3 = '()';\n\
    const t4 = '((())()())';\nconsole.log(find_nested_parens(t1));\nconsole.log(find_nested_parens(t2));\n\
    console.log(find_nested_parens(t3));\nconsole.log(find_nested_parens(t4));\n\n\
    console.log(parse_nested_parens('(()()) ((())) () ((())()())'));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmk6qtzlz.ts(10,17): error TS2304: Cannot find name
    ''find_nested_parens''.

    ../../../../../tmp/tmpmk6qtzlz.ts(19,13): error TS2304: Cannot find name ''find_nested_parens''.

    ../../../../../tmp/tmpmk6qtzlz.ts(20,13): error TS2304: Cannot find name ''find_nested_parens''.

    ../../../../../tmp/tmpmk6qtzlz.ts(21,13): error TS2304: Cannot find name ''find_nested_parens''.

    ../../../../../tmp/tmpmk6qtzlz.ts(22,13): error TS2304: Cannot find name ''find_nested_parens''.

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const paren_groups = paren_string.split(\"\
    \ \");\n  for (const paren_group of paren_groups) {\n    if (paren_group.length\
    \ === 0) {\n      result.push(0);\n    } else {\n      result.push(parse_nested_paren(paren_group));\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdo8i13vr.ts(13,19): error TS2552: Cannot find name
    ''parse_nested_paren''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  let results: number[] = [];\n\
    \  for (let group of groups) {\n    results.push(max_depth(group));\n  }\n  return\
    \ results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfi3vsfhn.ts(10,18): error TS2304: Cannot find name
    ''max_depth''.

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let stack: number[] = []\n    let count_stack: number[] = []\n    let\
    \ results: number[] = []\n    let count: number = 0\n    for (let i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === \"(\") {\n            stack.push(paren_string[i])\n\
    \            count_stack.push(count)\n            count += 1\n        } else if\
    \ (paren_string[i] === \")\") {\n            stack.pop()\n            count -=\
    \ 1\n            if (stack.length === 0) {\n                results.push(count_stack.pop())\n\
    \            }\n        } else if (paren_string[i] === \" \") {\n            count\
    \ = 0\n        }\n    }\n    return results\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaoi1up81.ts(13,24): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014280
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(' ').map(str => {\n        let max_paren_depth\
    \ = 0;\n        let current_paren_depth = 0;\n        str.split('').forEach(char\
    \ => {\n            if (char === '(') {\n                current_paren_depth +=\
    \ 1;\n                max_paren_depth = Math.max(max_paren_depth, current_paren_depth);\n\
    \            } else if (char === ')') {\n                current_paren_depth -=\
    \ 1;\n            }\n        });\n        return max_paren_depth;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    return paren_string.split(\" \").map(s => get_nested_parens(s));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpekq3mimt.ts(7,45): error TS2552: Cannot find name
    ''get_nested_parens''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const groups = paren_string.split(\"\
    \ \");\n    for (const group of groups) {\n        let currentLevel = 0;\n   \
    \     let maxLevel = 0;\n        for (const character of group) {\n          \
    \  if (character === \"(\") {\n                currentLevel++;\n            }\
    \ else if (character === \")\") {\n                currentLevel--;\n         \
    \   }\n            if (currentLevel > maxLevel) {\n                maxLevel =\
    \ currentLevel;\n            }\n        }\n        result.push(maxLevel);\n  \
    \  }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0e0pma64.ts(12,33): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens = paren_string.split(\" \");\n  return parens.map(paren =>\
    \ {\n    const stack = new Stack<string>();\n    for (let char of paren) {\n \
    \     if (char === \"(\") {\n        stack.push(char);\n      } else if (char\
    \ === \")\") {\n        stack.pop();\n      }\n    }\n    return stack.length;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_o3m_rpw.ts(9,23): error TS2552: Cannot find name
    ''Stack''. Did you mean ''stack''?

    ../../../../../tmp/tmp_o3m_rpw.ts(10,22): error TS2494: Using a string in a ''for...of''
    statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let s: string[] = paren_string.split(\" \");\n  let arr = [];\n  for (let\
    \ i = 0; i < s.length; i++) {\n    arr.push(deepest_level(s[i]));\n  }\n  return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9he0sd8o.ts(10,14): error TS2304: Cannot find name
    ''deepest_level''.

    '
  timestamp: 1660014280
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const groups = paren_string.split(\" \"\
    );\n  for (const group of groups) {\n    let max = 0;\n    let level = 0;\n  \
    \  for (const char of group) {\n      if (char === \"(\") {\n        level++;\n\
    \        max = Math.max(max, level);\n      } else if (char === \")\") {\n   \
    \     level--;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6iaar9fl.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014281
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const results: number[] = [];\n    const index_matrix: number[][] = [];\n\
    \    for (let i = 0; i < paren_string.length; i++) {\n        const c = paren_string.charAt(i);\n\
    \        if (c == '(') {\n            index_matrix.push([i]);\n        } else\
    \ if (c == ')') {\n            if (index_matrix.length > 0) {\n              \
    \  const current_index_pair = index_matrix[index_matrix.length - 1];\n       \
    \         current_index_pair.push(i);\n                if (current_index_pair.length\
    \ === 2) {\n                    const inner_string = paren_string.substring(current_index_pair[0]\
    \ + 1, current_index_pair[1]);\n                    const result = parse_nested_parens(inner_string);\n\
    \                    if (result.length > 0) {\n                        results.push(result.length\
    \ + 1);\n                    } else {\n                        results.push(1);\n\
    \                    }\n                    index_matrix.pop();\n            \
    \    }\n            }\n        }\n    }\n    return results;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  3,\n  1,\n  2,\n  3,\n  1,\n  1,\n  2,\n  1,\n  1,\n  5\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_tkbp3g7.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_tkbp3g7.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 3, 1, 2,\n    3, 1, 1, 2, 1,\n    1, 5\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  1, 1, 3, 1, 2,\n  3, 1, 1, 2, 1,\n  1, 5\n]\n"
  timestamp: 1660014281
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(substring => {\n    let max_nesting_level\
    \ = 0;\n    let current_nesting_level = 0;\n    for (let i = 0; i < substring.length;\
    \ i++) {\n      if (substring[i] === '(') {\n        current_nesting_level++;\n\
    \        max_nesting_level = Math.max(max_nesting_level, current_nesting_level);\n\
    \      } else if (substring[i] === ')') {\n        current_nesting_level--;\n\
    \      }\n    }\n    return max_nesting_level;\n  });\n}\n\nexport {\n  add_numbers,\n\
    \  is_palindrome,\n  reverse_str,\n  parse_nested_parens,\n};\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp08dv_n_x.ts(23,3): error TS2304: Cannot find name
    ''add_numbers''.

    ../../../../../tmp/tmp08dv_n_x.ts(24,3): error TS2304: Cannot find name ''is_palindrome''.

    ../../../../../tmp/tmp08dv_n_x.ts(25,3): error TS2304: Cannot find name ''reverse_str''.

    '
  timestamp: 1660014281
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_depth: number[] = [];\n    const paren_chars: string[] =\
    \ paren_string.split(\" \");\n    for (let i = 0; i < paren_chars.length; i++)\
    \ {\n        const curr_chars: string[] = paren_chars[i].split(\"\");\n      \
    \  let depth: number = 0;\n        let max_depth: number = 0;\n        for (let\
    \ j = 0; j < curr_chars.length; j++) {\n            if (curr_chars[j] === \"(\"\
    ) {\n                depth++;\n            } else if (curr_chars[j] === \")\"\
    ) {\n                depth--;\n            }\n            if (depth > max_depth)\
    \ {\n                max_depth = depth;\n            }\n        }\n        paren_depth.push(max_depth);\n\
    \    }\n    return paren_depth;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014281
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const parens: string[] = paren_string.split(' ');\n  return parens.map(paren\
    \ => parse_nested_paren(paren));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwsqhsip4.ts(8,30): error TS2552: Cannot find name
    ''parse_nested_paren''. Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660014281
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parse_nested_parens_helper = (paren_string: string): number => {\n\
    \        let current_level = 0;\n        let max_level = 0;\n        for (let\
    \ i = 0; i < paren_string.length; i++) {\n            if (paren_string[i] ===\
    \ \"(\") {\n                current_level++;\n                max_level = Math.max(max_level,\
    \ current_level);\n            } else if (paren_string[i] === \")\") {\n     \
    \           current_level--;\n            }\n        }\n        return max_level;\n\
    \    };\n    let paren_arr = paren_string.split(\" \");\n    let max_nesting_list\
    \ = paren_arr.map(parse_nested_parens_helper);\n    return max_nesting_list;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014281
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    //TODO:\n    return [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpymkofr94.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpymkofr94.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014282
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let paren_string_split = paren_string.split(\" \");\n  let paren_array:\
    \ number[] = [];\n  let max_depth = 0;\n  let curr_depth = 0;\n  for (let i =\
    \ 0; i < paren_string_split.length; i++) {\n    for (let j = 0; j < paren_string_split[i].length;\
    \ j++) {\n      if (paren_string_split[i][j] === \"(\") {\n        curr_depth++;\n\
    \        if (curr_depth > max_depth) {\n          max_depth = curr_depth;\n  \
    \      }\n      } else if (paren_string_split[i][j] === \")\") {\n        curr_depth--;\n\
    \      }\n    }\n    paren_array.push(max_depth);\n    max_depth = 0;\n    curr_depth\
    \ = 0;\n  }\n  return paren_array;\n}\n\nconsole.log(parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660014282
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let parsed_list: number[] = [];\n    let token_list: string[] = paren_string.split(\"\
    \ \");\n    for (let token of token_list) {\n        let highest_count: number\
    \ = 0;\n        let count: number = 0;\n        for (let ch of token) {\n    \
    \        if (ch === \"(\") {\n                count++;\n                if (count\
    \ > highest_count) {\n                    highest_count = count;\n           \
    \     }\n            } else if (ch === \")\") {\n                count--;\n  \
    \          }\n        }\n        parsed_list.push(highest_count);\n    }\n   \
    \ return parsed_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp373tfaa5.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014282
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_array = paren_string.split(' ');\n    const depth_array =\
    \ paren_array.map(to_depth);\n    return depth_array;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmput0o2ecd.ts(8,41): error TS2304: Cannot find name\
    \ 'to_depth'.\n../../../../../tmp/tmput0o2ecd.ts(9,5): error TS2322: Type 'unknown[]'\
    \ is not assignable to type 'number[]'.\n  Type 'unknown' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660014282
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  let parens_list: number[] = [];\n  let arr: string[] = paren_string.split(\"\
    \ \");\n  arr.forEach((element) => {\n    let count: number = 0;\n    let level:\
    \ number = 0;\n    element.split(\"\").forEach((el) => {\n      if (el === \"\
    (\") {\n        count++;\n        if (count > level) {\n          level = count;\n\
    \        }\n      } else if (el === \")\") {\n        count--;\n      }\n    });\n\
    \    parens_list.push(level);\n  });\n  return parens_list;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014282
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const tokens = paren_string.split(\" \");\n  const result: number[] = [];\n\
    \  for (const token of tokens) {\n    let current_nesting_level = 0;\n    let\
    \ max_nesting_level = 0;\n    for (const char of token) {\n      if (char ===\
    \ \"(\") {\n        current_nesting_level++;\n      } else if (char === \")\"\
    ) {\n        current_nesting_level--;\n      }\n      max_nesting_level = Math.max(max_nesting_level,\
    \ current_nesting_level);\n    }\n    result.push(max_nesting_level);\n  }\n \
    \ return result;\n}\n\nexport function test_parse_nested_parens() {\n  expect(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")).toEqual([\n    2,\n    3,\n    1,\n    3,\n  ]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp87hhsh9r.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmp87hhsh9r.ts(26,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660014282
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const result: number[] = [];\n    const groupings = paren_string.split(\"\
    \ \");\n    for (const paren of groupings) {\n        const stack: string[] =\
    \ [];\n        let depth = 0;\n        for (const c of paren) {\n            if\
    \ (c === \"(\") {\n                stack.push(c);\n                depth = stack.length\
    \ > depth ? stack.length : depth;\n            } else if (c === \")\") {\n   \
    \             stack.pop();\n            }\n        }\n        result.push(depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedxmd0yv.ts(12,25): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014282
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(parens => parens.split('').reduce((count,\
    \ paren) => {\n    if (paren === '(') {\n      return count + 1;\n    } else if\
    \ (paren === ')') {\n      return count - 1;\n    }\n    return count;\n  }, 0));\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpwx7hipi8.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwx7hipi8.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  // your code goes here\n  const str_arr = paren_string.split(\" \");\n\
    \  const num_arr = str_arr.map(sub_str => {\n    return sub_str.length - sub_str.replace(/\\\
    (/g, \"\").length;\n  });\n  return num_arr;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\nconsole.log(parse_nested_parens(\"((()))\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp53oj9klo.js:19:12)\n    at Object.<anonymous> (/tmp/tmp53oj9klo.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3, 3, 1, 5 ]

    [ 3 ]

    '
  timestamp: 1660014282
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  paren_string.split(\" \").forEach((word)\
    \ => {\n    let stack: number[] = [];\n    let max_level: number = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n      if (word[i] === \"(\") {\n      \
    \  stack.push(1);\n      } else if (word[i] === \")\") {\n        stack.pop();\n\
    \      }\n      max_level = Math.max(max_level, stack.length);\n    }\n    result.push(max_level);\n\
    \  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014283
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  return paren_string.split(' ').map(s => {\n    let max = 0;\n    let current\
    \ = 0;\n    for (let i = 0; i < s.length; i++) {\n      switch (s[i]) {\n    \
    \    case '(':\n          current++;\n          max = Math.max(max, current);\n\
    \          break;\n        case ')':\n          current--;\n          break;\n\
    \      }\n    }\n    return max;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014283
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let result: number[] = [];\n    paren_string.split(' ').forEach(s =>\
    \ {\n        let current_depth = 0;\n        let max_depth = 0;\n        for (let\
    \ i = 0; i < s.length; i++) {\n            if (s[i] === '(') {\n             \
    \   current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n\
    \            } else if (s[i] === ')') {\n                current_depth--;\n  \
    \          }\n        }\n        result.push(max_depth);\n    });\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014283
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const deepNest = [];\n    for (const paren of paren_string.split(\" \"\
    )) {\n        deepNest.push(parse_nested_parens_helper(paren));\n    }\n    return\
    \ deepNest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtzcawcu.ts(9,23): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1660014282
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    let tokens = paren_string.split(' ')\n    let nested_parens = []\n  \
    \  for (let token of tokens) {\n        if (token.length == 0) {\n           \
    \ continue\n        }\n        let max_depth = 0\n        let current_depth =\
    \ 0\n        for (let char of token) {\n            if (char == '(') {\n     \
    \           current_depth += 1\n            } else if (char == ')') {\n      \
    \          current_depth -= 1\n            }\n            if (current_depth >\
    \ max_depth) {\n                max_depth = current_depth\n            }\n   \
    \     }\n        nested_parens.push(max_depth)\n    }\n    return nested_parens\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe8qh6ryv.ts(15,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014283
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const results: number[] =\
    \ [];\n  for (const group of groups) {\n    const parsed_group = parse_nested_parens_helper(group);\n\
    \    results.push(parsed_group);\n  }\n  return results;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprq46ek0x.ts(10,26): error TS2304: Cannot find name
    ''parse_nested_parens_helper''.

    '
  timestamp: 1660014283
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const paren_groups = paren_string.split(\" \");\n    return paren_groups.map(group\
    \ => {\n        let level = 0;\n        let max_level = 0;\n        for (let char\
    \ of group) {\n            if (char === \"(\") {\n                level++;\n \
    \           } else if (char === \")\") {\n                level--;\n         \
    \   }\n            max_level = Math.max(max_level, level);\n        }\n      \
    \  return max_level;\n    });\n}\n\nconsole.log(parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx2uz98ay.ts(11,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014282
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n    const groups = paren_string.split(' ');\n    const paren_count = groups.map(g\
    \ => {\n        return g.split('').reduce((acc, c) => {\n            if (c ===\
    \ '(') {\n                return acc + 1;\n            } else if (c === ')') {\n\
    \                return acc - 1;\n            } else {\n                return\
    \ acc;\n            }\n        }, 0);\n    });\n    return paren_count;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmph0mi7nl8.js:26:12)\n    at Object.<anonymous> (/tmp/tmph0mi7nl8.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014283
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const result: number[] = [];\n  const parens = paren_string.split(\" \"\
    );\n  for (const paren of parens) {\n    const stack: number[] = [];\n    let\
    \ max = 0;\n    for (const c of paren) {\n      if (c === \"(\") {\n        stack.push(c);\n\
    \        max = Math.max(max, stack.length);\n      } else if (c === \")\") {\n\
    \        stack.pop();\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpluxc2bu6.ts(12,21): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpluxc2bu6.ts(14,20): error TS2345: Argument of type ''"("''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014283
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[]\
    \ {\n  const groups = paren_string.split(\" \");\n  const levels: number[] = [];\n\
    \  for (const group of groups) {\n    let level = 0;\n    let open_parens = 0;\n\
    \    for (const char of group) {\n      if (char === \"(\") {\n        open_parens++;\n\
    \        level = Math.max(level, open_parens);\n      } else if (char === \")\"\
    ) {\n        open_parens--;\n      }\n    }\n    levels.push(level);\n  }\n  return\
    \ levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5z7t5yts.ts(12,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660014283
