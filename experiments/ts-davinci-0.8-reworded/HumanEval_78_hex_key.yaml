name: HumanEval_78_hex_key
language: ts
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n//\
  \ >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n\
  // >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
  \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"\
  ),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
  123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ),12);\n}\n\ntest();"
completions: ["    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let total = 0;\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            total++;\n        }\n    }\n    return total;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    if (num === \"\") return 0;\n    const hex: number[] = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 11, 13, 17, 19, 23, 29];\n    return num.split(\"\").map(x => parseInt(x,\
    \ 16)).filter(x => hex.includes(x)).length;\n}\nconsole.log(hex_key(\"ABED1A33\"\
    ));", "  let primes: string = \"2357BDEF\";\n  return num.split(\"\").filter(\n\
    \    (v: string) => primes.indexOf(v) >= 0\n  ).length;\n}\n", "    if (num.length\
    \ === 0) {\n        return 0;\n    }\n    else {\n        const hexPrimes = {\n\
    \            'A': 11,\n            'B': 13,\n            'C': 17,\n          \
    \  'D': 19,\n            'E': 23,\n            'F': 29\n        };\n        let\
    \ numString = '';\n        let count = 0;\n        const isPrime = (n: number):\
    \ boolean => {\n            if (n <= 1) {\n                return false;\n   \
    \         }\n            for (let i = 2; i < n; i++) {\n                if (n\
    \ % i === 0) {\n                    return false;\n                }\n       \
    \     }\n            return true;\n        }\n        for (let i = 0; i < num.length;\
    \ i++) {\n            if (num[i] in hexPrimes) {\n                numString +=\
    \ hexPrimes[num[i]];\n            }\n            else {\n                numString\
    \ += num[i];\n            }\n        }\n        for (let i = 0; i < numString.length;\
    \ i++) {\n            const current = Number(numString[i]);\n            if (isPrime(current))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let key: number = 0;\n    let calc:\
    \ number = 0;\n    let arr = num.split('');\n    let even: boolean = false;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        switch (arr[i]) {\n     \
    \       case '2':\n                key++;\n                break;\n          \
    \  case '3':\n                key++;\n                break;\n            case\
    \ '5':\n                key++;\n                break;\n            case '7':\n\
    \                key++;\n                break;\n            case 'B':\n     \
    \           key++;\n                break;\n            case 'D':\n          \
    \      key++;\n                break;\n            case 'E':\n               \
    \ key++;\n                break;\n            case 'F':\n                key++;\n\
    \                break;\n            default:\n                if (even == false)\
    \ {\n                    calc = parseInt(arr[i]);\n                    even =\
    \ true;\n                } else {\n                    calc += parseInt(arr[i]);\n\
    \                    even = false;\n                }\n                break;\n\
    \        }\n    }\n    if (even == true) {\n        calc += parseInt(arr[arr.length\
    \ - 1]);\n    }\n    if (calc % 2 == 0) {\n        key++;\n    }\n    if (calc\
    \ % 3 == 0) {\n        key++;\n    }\n    if (calc % 5 == 0) {\n        key++;\n\
    \    }\n    if (calc % 7 == 0) {\n        key++;\n    }\n    if (calc % 11 ==\
    \ 0) {\n        key++;\n    }\n    if (calc % 13 == 0) {\n        key++;\n   \
    \ }\n    return key;\n}\n", "    let hexPrimes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"];\n    let x = 0;\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (hexPrimes.includes(num[i])) {\n            x++;\n        }\n    }\n\
    \    return x;\n}\n", "  const primes: number[] = [2, 3, 5, 7, 11, 13];\n  let\
    \ count: number = 0;\n  for (let i: number = 0; i < num.length; i++) {\n    if\
    \ (primes.includes(Number(\"0x\" + num[i]))) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "  let count = 0;\n  for (let n of num) {\n    if (['2',\
    \ '3', '5', '7', 'B', 'D'].includes(n)) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let primes = [2, 3, 5, 7, 11, 13, 17];\n  let counter = 0;\n\
    \  let hexes = \"0123456789ABCDEF\";\n  let hex_arr = num.split(\"\");\n  for\
    \ (let i = 0; i < hex_arr.length; i++) {\n    if (primes.includes(hexes.indexOf(hex_arr[i])))\
    \ {\n      counter++;\n    }\n  }\n  return counter;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let primeMap = {\n        A: 11,\n        B: 13,\n        C: 17,\n        D:\
    \ 19,\n        E: 23,\n        F: 29\n    }\n    let checkPrime = (n: number):\
    \ boolean => {\n        let i = 2;\n        while (i < n) {\n            if (n\
    \ % i === 0) {\n                return false;\n            }\n            i++;\n\
    \        }\n        return true;\n    }\n    let result = 0;\n    for (let i =\
    \ 0; i < num.length; i++) {\n        if (num[i] === 'A' || num[i] === 'B' || num[i]\
    \ === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n         \
    \   if (checkPrime(primeMap[num[i]])) {\n                result++;\n         \
    \   }\n        } else {\n            if (checkPrime(Number(num[i]))) {\n     \
    \           result++;\n            }\n        }\n    }\n    return result;\n}\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\n", "    let hexVal: number = 0;\n    let count: number = 0;\n    let\
    \ hexMap: { [key: string]: number } = {\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    for (let i: number = 0; i < num.length; i++) {\n        if (isNaN(parseInt(num[i])))\
    \ {\n            hexVal = hexMap[num[i]];\n        } else {\n            hexVal\
    \ = parseInt(num[i]);\n        }\n        if (isPrime(hexVal)) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\n\n", "    let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let\
    \ counter = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            counter += 1;\n        }\n    }\n    return counter;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    return num.toUpperCase().split('').filter(v => '2357BD'.includes(v)).length;\n\
    }\n", "    let count: number = 0;\n    let primes: number[] = [2, 3, 5, 7, 11,\
    \ 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) count++;\n    }\n    return count;\n}\n", "    let hex: string[] = ['0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n\
    \    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    let count: number\
    \ = 0;\n    num.split('').forEach(hexElement => {\n        if (primes.indexOf(hexElement)\
    \ > -1) {\n            count++;\n        }\n    });\n    return count;\n}\n\n\
    let test = hex_key(\"AB\");\nconsole.log(test);\n\ntest = hex_key(\"1077E\");\n\
    console.log(test);\n\ntest = hex_key(\"ABED1A33\");\nconsole.log(test);\n\ntest\
    \ = hex_key(\"123456789ABCDEF0\");\nconsole.log(test);\n\ntest = hex_key(\"2020\"\
    );\nconsole.log(test);", "    let primes = ['2', '3', '5', '7', 'B', 'D'];\n \
    \   let counter = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            counter++;\n        }\n    }\n    return counter;\n}\n\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let h: object = {2:2, 3:3, 5:5,\
    \ 7:7, B:11, D:13}\n    let sum: number = 0;\n    num.split('').map(n => {\n \
    \       if(h[n]) sum++\n    })\n    return sum\n}\n\nconsole.log(hex_key(\"AB\"\
    ))\nconsole.log(hex_key(\"1077E\"))\nconsole.log(hex_key(\"ABED1A33\"))\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"))\nconsole.log(hex_key(\"2020\"))", "    let count = 0;\n \
    \   let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(num[i])) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n", "    let primeNumStr: string = \"2,3,5,7,B,D\"\
    ;\n    let primeNum: string[] = primeNumStr.split(\",\");\n    let primeCount:\
    \ number = 0;\n    for (let i: number = 0; i < num.length; i++) {\n        if\
    \ (primeNum.indexOf(num[i]) !== -1) {\n            primeCount++;\n        }\n\
    \    }\n    return primeCount;\n}", "    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    let cahrs = num.split('');\n    cahrs.forEach(element\
    \ => {\n        if(primes.indexOf(parseInt(element, 16)) !== -1){\n          \
    \  count++;\n        }\n    });\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
