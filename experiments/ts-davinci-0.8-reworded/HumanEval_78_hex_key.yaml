name: HumanEval_78_hex_key
language: ts
prompt: "//You have been tasked to write a function that receives \n// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n// digits that are primes\
  \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
  \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n// So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is\
  \ always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n\
  // Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n//\
  \ >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n\
  // >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
  \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"\
  ),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
  123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ),12);\n}\n\ntest();"
completions: ["    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let total = 0;\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            total++;\n        }\n    }\n    return total;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    if (num === \"\") return 0;\n    const hex: number[] = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 11, 13, 17, 19, 23, 29];\n    return num.split(\"\").map(x => parseInt(x,\
    \ 16)).filter(x => hex.includes(x)).length;\n}\nconsole.log(hex_key(\"ABED1A33\"\
    ));", "  let primes: string = \"2357BDEF\";\n  return num.split(\"\").filter(\n\
    \    (v: string) => primes.indexOf(v) >= 0\n  ).length;\n}\n", "    if (num.length\
    \ === 0) {\n        return 0;\n    }\n    else {\n        const hexPrimes = {\n\
    \            'A': 11,\n            'B': 13,\n            'C': 17,\n          \
    \  'D': 19,\n            'E': 23,\n            'F': 29\n        };\n        let\
    \ numString = '';\n        let count = 0;\n        const isPrime = (n: number):\
    \ boolean => {\n            if (n <= 1) {\n                return false;\n   \
    \         }\n            for (let i = 2; i < n; i++) {\n                if (n\
    \ % i === 0) {\n                    return false;\n                }\n       \
    \     }\n            return true;\n        }\n        for (let i = 0; i < num.length;\
    \ i++) {\n            if (num[i] in hexPrimes) {\n                numString +=\
    \ hexPrimes[num[i]];\n            }\n            else {\n                numString\
    \ += num[i];\n            }\n        }\n        for (let i = 0; i < numString.length;\
    \ i++) {\n            const current = Number(numString[i]);\n            if (isPrime(current))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let key: number = 0;\n    let calc:\
    \ number = 0;\n    let arr = num.split('');\n    let even: boolean = false;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        switch (arr[i]) {\n     \
    \       case '2':\n                key++;\n                break;\n          \
    \  case '3':\n                key++;\n                break;\n            case\
    \ '5':\n                key++;\n                break;\n            case '7':\n\
    \                key++;\n                break;\n            case 'B':\n     \
    \           key++;\n                break;\n            case 'D':\n          \
    \      key++;\n                break;\n            case 'E':\n               \
    \ key++;\n                break;\n            case 'F':\n                key++;\n\
    \                break;\n            default:\n                if (even == false)\
    \ {\n                    calc = parseInt(arr[i]);\n                    even =\
    \ true;\n                } else {\n                    calc += parseInt(arr[i]);\n\
    \                    even = false;\n                }\n                break;\n\
    \        }\n    }\n    if (even == true) {\n        calc += parseInt(arr[arr.length\
    \ - 1]);\n    }\n    if (calc % 2 == 0) {\n        key++;\n    }\n    if (calc\
    \ % 3 == 0) {\n        key++;\n    }\n    if (calc % 5 == 0) {\n        key++;\n\
    \    }\n    if (calc % 7 == 0) {\n        key++;\n    }\n    if (calc % 11 ==\
    \ 0) {\n        key++;\n    }\n    if (calc % 13 == 0) {\n        key++;\n   \
    \ }\n    return key;\n}\n", "    let hexPrimes = [\"2\", \"3\", \"5\", \"7\",\
    \ \"B\", \"D\"];\n    let x = 0;\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (hexPrimes.includes(num[i])) {\n            x++;\n        }\n    }\n\
    \    return x;\n}\n", "  const primes: number[] = [2, 3, 5, 7, 11, 13];\n  let\
    \ count: number = 0;\n  for (let i: number = 0; i < num.length; i++) {\n    if\
    \ (primes.includes(Number(\"0x\" + num[i]))) {\n      count++;\n    }\n  }\n \
    \ return count;\n}\n", "  let count = 0;\n  for (let n of num) {\n    if (['2',\
    \ '3', '5', '7', 'B', 'D'].includes(n)) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let primes = [2, 3, 5, 7, 11, 13, 17];\n  let counter = 0;\n\
    \  let hexes = \"0123456789ABCDEF\";\n  let hex_arr = num.split(\"\");\n  for\
    \ (let i = 0; i < hex_arr.length; i++) {\n    if (primes.includes(hexes.indexOf(hex_arr[i])))\
    \ {\n      counter++;\n    }\n  }\n  return counter;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let primeMap = {\n        A: 11,\n        B: 13,\n        C: 17,\n        D:\
    \ 19,\n        E: 23,\n        F: 29\n    }\n    let checkPrime = (n: number):\
    \ boolean => {\n        let i = 2;\n        while (i < n) {\n            if (n\
    \ % i === 0) {\n                return false;\n            }\n            i++;\n\
    \        }\n        return true;\n    }\n    let result = 0;\n    for (let i =\
    \ 0; i < num.length; i++) {\n        if (num[i] === 'A' || num[i] === 'B' || num[i]\
    \ === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n         \
    \   if (checkPrime(primeMap[num[i]])) {\n                result++;\n         \
    \   }\n        } else {\n            if (checkPrime(Number(num[i]))) {\n     \
    \           result++;\n            }\n        }\n    }\n    return result;\n}\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\n", "    let hexVal: number = 0;\n    let count: number = 0;\n    let\
    \ hexMap: { [key: string]: number } = {\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    for (let i: number = 0; i < num.length; i++) {\n        if (isNaN(parseInt(num[i])))\
    \ {\n            hexVal = hexMap[num[i]];\n        } else {\n            hexVal\
    \ = parseInt(num[i]);\n        }\n        if (isPrime(hexVal)) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\n\n", "    let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let\
    \ counter = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            counter += 1;\n        }\n    }\n    return counter;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    return num.toUpperCase().split('').filter(v => '2357BD'.includes(v)).length;\n\
    }\n", "    let count: number = 0;\n    let primes: number[] = [2, 3, 5, 7, 11,\
    \ 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) count++;\n    }\n    return count;\n}\n", "    let hex: string[] = ['0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n\
    \    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    let count: number\
    \ = 0;\n    num.split('').forEach(hexElement => {\n        if (primes.indexOf(hexElement)\
    \ > -1) {\n            count++;\n        }\n    });\n    return count;\n}\n\n\
    let test = hex_key(\"AB\");\nconsole.log(test);\n\ntest = hex_key(\"1077E\");\n\
    console.log(test);\n\ntest = hex_key(\"ABED1A33\");\nconsole.log(test);\n\ntest\
    \ = hex_key(\"123456789ABCDEF0\");\nconsole.log(test);\n\ntest = hex_key(\"2020\"\
    );\nconsole.log(test);", "    let primes = ['2', '3', '5', '7', 'B', 'D'];\n \
    \   let counter = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            counter++;\n        }\n    }\n    return counter;\n}\n\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let h: object = {2:2, 3:3, 5:5,\
    \ 7:7, B:11, D:13}\n    let sum: number = 0;\n    num.split('').map(n => {\n \
    \       if(h[n]) sum++\n    })\n    return sum\n}\n\nconsole.log(hex_key(\"AB\"\
    ))\nconsole.log(hex_key(\"1077E\"))\nconsole.log(hex_key(\"ABED1A33\"))\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"))\nconsole.log(hex_key(\"2020\"))", "    let count = 0;\n \
    \   let primes = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(num[i])) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n", "    let primeNumStr: string = \"2,3,5,7,B,D\"\
    ;\n    let primeNum: string[] = primeNumStr.split(\",\");\n    let primeCount:\
    \ number = 0;\n    for (let i: number = 0; i < num.length; i++) {\n        if\
    \ (primeNum.indexOf(num[i]) !== -1) {\n            primeCount++;\n        }\n\
    \    }\n    return primeCount;\n}", "    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    let cahrs = num.split('');\n    cahrs.forEach(element\
    \ => {\n        if(primes.indexOf(parseInt(element, 16)) !== -1){\n          \
    \  count++;\n        }\n    });\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "  const digits = num.split('');\n  const hexNums = digits.filter(digit => {\n \
    \   if (Number(digit) <= 9) {\n      return Number(digit) >= 2 && Number(digit)\
    \ <= 7;\n    }\n    return digit === 'B' || digit === 'D';\n  });\n  return hexNums.length;\n\
    }\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    const hex_primes = ['2', '3', '5', '7', 'B', 'D'];\n    return\
    \ Array.from(num.toUpperCase()).filter(char => hex_primes.includes(char)).length;\n\
    }\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "  const HEX = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n   \
    \ 4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    A: 10,\n \
    \   B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n  };\n  let counter\
    \ = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (\n      HEX[num[i]]\
    \ === 2 ||\n      HEX[num[i]] === 3 ||\n      HEX[num[i]] === 5 ||\n      HEX[num[i]]\
    \ === 7 ||\n      HEX[num[i]] === 11 ||\n      HEX[num[i]] === 13\n    ) {\n \
    \     counter++;\n    }\n  }\n  return counter;\n}\n\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    let arr = num.split('').map(a\
    \ => parseInt(a, 16));\n    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 2 || arr[i] === 3 || arr[i] === 5 || arr[i] ===\
    \ 7 || arr[i] === 11 || arr[i] === 13) {\n            count += 1;\n        }\n\
    \    }\n    return count;\n}\n", "    let hex: number[] = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"];\n    let primos = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n\
    \    let sum: number = 0;\n    for (let i = 0; i < num.length; i++) {\n      \
    \  for (let j = 0; j < hex.length; j++) {\n            if (num[i] == hex[j]) {\n\
    \                sum++;\n            }\n        }\n    }\n    let sum1: number\
    \ = 0;\n    for (let i = 0; i < num.length; i++) {\n        for (let j = 0; j\
    \ < primos.length; j++) {\n            if (num[i] == primos[j]) {\n          \
    \      sum1++;\n            }\n        }\n    }\n    return sum1;\n}\n", "   \
    \ let count: number = 0;\n    if (num.length === 0) return count;\n    num.split('').forEach(num\
    \ => {\n        if ((num == '2' || num == '3' || num == '5' || num == '7' || num\
    \ == 'B' || num == 'D')) count++;\n    });\n    return count;\n}\n", "    const\
    \ hex: any = { '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\
    \ '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15 };\n  \
    \  const prime: number[] = [2, 3, 5, 7, 11, 13];\n    const arr: number[] = num.split('').map(a\
    \ => hex[a]);\n    return arr.filter(a => prime.includes(a)).length;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count: number = 0;\n    const primes: number[] = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n   \
    \ for (let i: number = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"10", "    let arrOfPrimes: string[] = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    let counter: number = 0;\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        for (let j: number = 0; j < arrOfPrimes.length;\
    \ j++) {\n            if (num[i] === arrOfPrimes[j]) {\n                counter++;\n\
    \            }\n        }\n    }\n    return counter;\n}", "    if (num === \"\
    \") {\n        return 0;\n    }\n    return num.split(\"\").filter(x => \"2357BDF\"\
    .includes(x)).length;\n}\n\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    2020\"));", "    let key = 0;\n    let map = { 2: true, 3: true, 5: true, 7: true,\
    \ 11: true, 13: true };\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (num[i] >= \"0\" && num[i] <= \"9\") {\n            if (map[parseInt(num[i])])\
    \ key++;\n        } else {\n            let decNum = num.charCodeAt(i) - 55;\n\
    \            if (map[decNum]) key++;\n        }\n    }\n    return key;\n}\n",
  "    let arr = ['2', '3', '5', '7', 'B', 'D'];\n    let count = 0;\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (arr.includes(num[i])) count++;\n\
    \    }\n    return count;\n}\n", "    const primes: Array<string> = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    const digits: Array<string> = num.split(\"\
    \");\n    let result: number = 0;\n    for (let index = 0; index < digits.length;\
    \ index++) {\n        if (primes.includes(digits[index])) {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "    const primes = [2, 3, 5, 7, 11,\
    \ 13, 17];\n    const hexadecimal = {\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    };\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n    \
    \    if (hexadecimal[num[i]]) {\n            if (primes.includes(hexadecimal[num[i]]))\
    \ {\n                count++;\n            }\n        } else {\n            if\
    \ (primes.includes(parseInt(num[i]))) {\n                count++;\n          \
    \  }\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\n\
    console.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    let numbers = {\n\
    \        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n     \
    \   if (numbers[num[i]] == 2 || numbers[num[i]] == 3 || numbers[num[i]] == 5 ||\
    \ numbers[num[i]] == 7 || numbers[num[i]] == 11 || numbers[num[i]] == 13) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    A10\"));\n", "    let cnt = 0;\n    const primes = [2, 3, 5, 7, 11, 13];\n   \
    \ const hd = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n       \
    \ 'D': 13,\n        'E': 14,\n        'F': 15\n    };\n    for (let i = 0; i <\
    \ num.length; i++) {\n        if (hd[num[i]]) {\n            if (primes.includes(hd[num[i]]))\
    \ {\n                cnt++;\n            }\n        } else {\n            if (primes.includes(+num[i]))\
    \ {\n                cnt++;\n            }\n        }\n    }\n    return cnt;\n\
    }\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    let hexPrimes = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n \
    \   for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(Number(num[i])))\
    \ {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let hexes = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n  \
    \      \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n  \
    \      \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n \
    \       \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n\
    \        \"F\": 15\n    }\n    let sum = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        let digit = num[i];\n        if (hexes[digit] == 2 || hexes[digit]\
    \ == 3 || hexes[digit] == 5 || hexes[digit] == 7 || hexes[digit] == 11 || hexes[digit]\
    \ == 13) {\n            sum++;\n        }\n    }\n    return sum;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let hex: string[] = num.toUpperCase().split('');\n    let hexValue: number[]\
    \ = hex.map(x => {\n        if (x === 'A') {\n            return 10;\n       \
    \ } else if (x === 'B') {\n            return 11;\n        } else if (x === 'C')\
    \ {\n            return 12;\n        } else if (x === 'D') {\n            return\
    \ 13;\n        } else if (x === 'E') {\n            return 14;\n        } else\
    \ if (x === 'F') {\n            return 15;\n        } else {\n            return\
    \ Number(x);\n        }\n    });\n    let count = 0;\n    for (let i = 0; i <\
    \ hexValue.length; i++) {\n        if (hexValue[i] == 2 || hexValue[i] == 3 ||\
    \ hexValue[i] == 5 || hexValue[i] == 7 || hexValue[i] == 11 || hexValue[i] ==\
    \ 13) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let primes: string = \"2357BD\";\n    let count: number = 0;\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) !==\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\n", "  \
    \  const primes = ['2', '3', '5', '7', 'B', 'D'];\n    return num.split('').filter(e\
    \ => primes.includes(e)).length;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    const hexDigits = '0123456789ABCDEF'.split('');\n\
    \    let primes = 0;\n    for (let i = 0; i < num.length; i++) {\n        const\
    \ hexDigit = num[i];\n        const hexDigitIndex = hexDigits.indexOf(hexDigit);\n\
    \        const isPrime = hexDigitIndex === 2 || hexDigitIndex === 3 || hexDigitIndex\
    \ === 5 || hexDigitIndex === 7 || hexDigitIndex === 11 || hexDigitIndex === 13;\n\
    \        if (isPrime) {\n            primes++;\n        }\n    }\n    return primes;\n\
    }\n", "    let arr: string[] = num.split('');\n    let result: number = 0;\n \
    \   for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] === 'A'\
    \ || arr[i] === 'B' || arr[i] === 'D') {\n            result += 1;\n        }\
    \ else if (arr[i] === '2' || arr[i] === '3' || arr[i] === '5' || arr[i] === '7')\
    \ {\n            result += 1;\n        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    let count = 0;\n    for (let x of num) {\n        if (digits.includes(x))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    const hexPrimes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    let primeCount\
    \ = 0;\n    for (let i = 0; i < num.length; i++) {\n        const currentNum =\
    \ num[i];\n        if (hexPrimes.includes(currentNum)) {\n            primeCount++;\n\
    \        }\n    }\n    return primeCount;\n}\n\nconsole.log(hex_key(\"AB\"));\n\
    console.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    let dic = {\n  \
    \      '0': false,\n        '1': false,\n        '2': true,\n        '3': true,\n\
    \        '4': false,\n        '5': true,\n        '6': false,\n        '7': true,\n\
    \        '8': false,\n        '9': false,\n        'A': false,\n        'B': true,\n\
    \        'C': false,\n        'D': true,\n        'E': false,\n        'F': false\n\
    \    }\n    let result = 0;\n    for (let i = 0; i < num.length; i++) {\n    \
    \    if (dic[num[i]]) {\n            result++;\n        }\n    }\n    return result;\n\
    }\n", "  let res = 0;\n  let key = {\n    A: 10,\n    B: 11,\n    C: 12,\n   \
    \ D: 13,\n    E: 14,\n    F: 15\n  };\n  let prime = [2, 3, 5, 7, 11, 13];\n \
    \ for (let i = 0; i < num.length; i++) {\n    if (prime.includes(+num[i])) {\n\
    \      res++;\n    } else if (key[num[i]]) {\n      if (prime.includes(key[num[i]]))\
    \ {\n        res++;\n      }\n    }\n  }\n  return res;\n}\n", "  let result =\
    \ 0;\n  let charArray = num.split(\"\");\n  for (let i = 0; i < charArray.length;\
    \ i++) {\n    switch (charArray[i]) {\n      case \"2\":\n      case \"3\":\n\
    \      case \"5\":\n      case \"7\":\n      case \"B\":\n      case \"D\":\n\
    \        result++;\n        break;\n      default:\n        break;\n    }\n  }\n\
    \  return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    const arr = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n    const primes = [2, 3, 5, 7, 11,\
    \ 13];\n    let counter = 0;\n    for (let i = 0; i < num.length; i++) {\n   \
    \     if (arr.indexOf(num[i]) != -1) {\n            if (primes.indexOf(arr.indexOf(num[i]))\
    \ != -1) {\n                counter++;\n            }\n        }\n    }\n    return\
    \ counter;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let primes: number[] = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,\
    \ 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,\
    \ 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,\
    \ 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\
    \ 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,\
    \ 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,\
    \ 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,\
    \ 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,\
    \ 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\
    \ 997];\n    let primesSet: Set<number> = new Set(primes);\n    let curr: number\
    \ = 0;\n    let count: number = 0;\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        switch (num[i]) {\n            case '0':\n                curr\
    \ = 0;\n                break;\n            case '", "  let count = 0;\n  for\
    \ (let i = 0; i < num.length; i++) {\n    if (\n      num[i] === \"2\" ||\n  \
    \    num[i] === \"3\" ||\n      num[i] === \"5\" ||\n      num[i] === \"7\" ||\n\
    \      num[i] === \"B\" ||\n      num[i] === \"D\"\n    ) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    let count = 0;\n    let hexArray = ['A',\
    \ 'B', 'C', 'D', 'E', 'F'];\n    let hex = num.split('');\n    for (let i = 0;\
    \ i < hex.length; i++) {\n        let temp: number = parseInt(hex[i], 16);\n \
    \       if (hexArray.includes(hex[i])) {\n            temp = hexArray.indexOf(hex[i])\
    \ + 10;\n        }\n        if (isPrime(temp)) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n", "    let decimal_num = parseInt(num, 16);\n\
    \    console.log(decimal_num);\n    let count = 0;\n    for (let i = 2; i <= decimal_num;\
    \ i++) {\n        let is_prime = true;\n        for (let j = 2; j < i; j++) {\n\
    \            if (i % j == 0) {\n                is_prime = false;\n          \
    \      break;\n            }\n        }\n        if (is_prime) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"1077E\"\
    ));\n", "    let count: number = 0;\n    const values: Array<number> = [2, 3,\
    \ 5, 7, 11, 13];\n    const splitedNum: Array<string> = num.split('');\n    const\
    \ digitMap: Map<string, number> = new Map();\n    digitMap.set('A', 10);\n   \
    \ digitMap.set('B', 11);\n    digitMap.set('C', 12);\n    digitMap.set('D', 13);\n\
    \    digitMap.set('E', 14);\n    digitMap.set('F', 15);\n    splitedNum.forEach(num\
    \ => {\n        let value: number = digitMap.get(num) === undefined ? Number(num)\
    \ : digitMap.get(num);\n        if (values.indexOf(value) !== -1) {\n        \
    \    count++;\n        }\n    });\n    return count;\n}\n", "  // type checking\n\
    \  if (typeof num !== \"string\") {\n    throw \"Argument should be a string\"\
    ;\n  }\n  if (!/^[0-9A-F]+$/.test(num)) {\n    throw \"Invalid hex number\";\n\
    \  }\n  if (num.length === 0) {\n    return 0;\n  }\n  // convert to uppercase\n\
    \  num = num.toUpperCase();\n  // get prime digits\n  let primeDigits = [2, 3,\
    \ 5, 7, 11, 13];\n  // count the number of prime digits in the hex number\n  return\
    \ num.split(\"\").reduce((count, digit) => {\n    if (digit >= \"A\") {\n    \
    \  digit = (digit.charCodeAt(0) - \"A\".charCodeAt(0)) + 10;\n    } else {\n \
    \     digit = +digit;\n    }\n    if (primeDigits.includes(digit)) {\n      count++;\n\
    \    }\n    return count;\n  }, 0);\n}\n", "    let counter: number = 0;\n   \
    \ let primes: number[] = [2, 3, 5, 7, 11, 13];\n    let arr: string[] = num.split('');\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == 'A' || arr[i]\
    \ == 'B' || arr[i] == 'D') {\n            counter++;\n        }\n        for (let\
    \ j = 0; j < primes.length; j++) {\n            if (arr[i] == primes[j].toString())\
    \ {\n                counter++;\n            }\n        }\n    }\n    return counter;\n\
    }\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    let count: number = 0;\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        switch (num[i]) {\n            case '2':\n            case '3':\n\
    \            case '5':\n            case '7':\n            case 'B':\n       \
    \     case 'D':\n                count++;\n                break;\n        }\n\
    \    }\n    return count;\n}\n", "  return num.split('').reduce((s, c) => {\n\
    \    return s + primeHexDigits.includes(c.toUpperCase()) ? 1 : 0;\n  }, 0);\n\
    }\n\nexport { hex_key };", "    let hex: string[] = ['0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let prime: string[]\
    \ = ['2', '3', '5', '7', 'B', 'D'];\n    let count: number = 0;\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (prime.indexOf(num[i]) > -1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "  let result = 0;\n  const primeHexNumbers = [2, 3, 5, 7, 11, 13];\n  const hexNumbers\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n  for (let i = 0;\
    \ i < num.length; i++) {\n    if (hexNumbers.includes(parseInt(num[i], 16))) {\n\
    \      if (primeHexNumbers.includes(parseInt(num[i], 16))) {\n        result++;\n\
    \      }\n    }\n  }\n  return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    const hex_to_num = {\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    const primes = [2, 3, 5, 7, 11, 13]\n    return num.split('').reduce((prev,\
    \ curr) => {\n        if (primes.includes(hex_to_num[curr] ? hex_to_num[curr]\
    \ : +curr)) {\n            return prev + 1\n        }\n        return prev\n \
    \   }, 0)\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    const digits: string[] = num.split('');\n\
    \    const primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    return digits.filter(digit\
    \ => primes.includes(digit)).length;\n}\n", "    let primes = [2, 3, 5, 7, 11,\
    \ 13, 17]\n    let result = 0;\n    let s = num.split('');\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (primes.includes(parseInt(s[i], 16))) {\n \
    \           result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    2020\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"AB\"));\n",
  "    let result: number = 0;\n    if (num === \"\") {\n        return result;\n\
    \    }\n    for (let i: number = 0; i < num.length; i++) {\n        let number:\
    \ number = parseInt(num[i], 16);\n        if (isPrime(number)) {\n           \
    \ result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "  const dictionary = { \"2\": 1, \"3\": 1, \"5\": 1, \"7\": 1, \"B\": 1, \"D\"\
    : 1 };\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (dictionary[num[i]])\
    \ {\n      result++;\n    }\n  }\n  return result;\n}\n", "    let hex = [\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"];\n    let primes = [2, 3, 5, 7, 11, 13];\n    let\
    \ count = 0;\n    for (let i = 0; i < num.length; i++) {\n        for (let j =\
    \ 0; j < hex.length; j++) {\n            if (num[i] == hex[j]) {\n           \
    \     for (let k = 0; k < primes.length; k++) {\n                    if (j ==\
    \ primes[k]) {\n                        count++;\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    const arr: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    let result: number\
    \ = 0;\n    for (let i: number = 0; i < num.length; i++) {\n        if (arr.includes(num[i]))\
    \ {\n            result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));", "    let hexDigits = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    };\n    let hexPrimes = {\n        '2': true,\n        '3':\
    \ true,\n        '5': true,\n        '7': true,\n        'B': true,\n        'D':\
    \ true\n    };\n    let result = 0;\n    let inputArr = num.split('');\n    for\
    \ (let i = 0; i < inputArr.length; i++) {\n        let currentDigit = inputArr[i];\n\
    \        let hexNumber = hexDigits[currentDigit];\n        if (hexPrimes[currentDigit])\
    \ {\n            result++;\n        }\n    }\n    return result;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (isHexPrime(num[i]))\
    \ {\n      count++;\n    }\n  }\n  return count;\n}", "    let primes = \"2357BD\"\
    ;\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (primes.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let primes: string = \"2357BD\";\n\
    \    let hexas: string = \"0123456789ABCDEF\";\n    let count: number = 0;\n \
    \   for (let i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i])\
    \ > -1) {\n            count++;\n        }\n    }\n    return count;\n}", "  \
    \  if (num === '') {\n        return 0;\n    }\n\n    const primes = [2, 3, 5,\
    \ 7, 11, 13];\n    let array: string[] = num.split('');\n    let digits: number[]\
    \ = array.map(value => Number.parseInt(value, 16));\n    let count: number = 0;\n\
    \n    for (let digit of digits) {\n        if (primes.includes(digit)) {\n   \
    \         count++;\n        }\n    }\n\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    const digits = num.split('');\n    let primeCount = 0;\n    const primes =\
    \ [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < digits.length; i++) {\n     \
    \   if (digits[i] === 'A' || digits[i] === 'B' || digits[i] === 'D') {\n     \
    \       primeCount++;\n        } else if (digits[i] === 'C' || digits[i] === 'E'\
    \ || digits[i] === 'F') {\n            continue;\n        } else {\n         \
    \   if (primes.includes(parseInt(digits[i]))) {\n                primeCount++;\n\
    \            }\n        }\n    }\n    return primeCount;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    const primes = [2, 3, 5, 7, 11, 13];\n    return num.split('').reduce((acc,\
    \ curr) => {\n        if (primes.includes(Number(curr))) {\n            return\
    \ acc + 1;\n        } else {\n            return acc;\n        }\n    }, 0);\n\
    }\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\n", "    const numArray = num.split('');\n    const primes = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    let primeCount = 0;\n    for (let i = 0; i < numArray.length;\
    \ i++) {\n        for (let j = 0; j < primes.length; j++) {\n            if (numArray[i]\
    \ === primes[j]) {\n                primeCount++;\n            }\n        }\n\
    \    }\n    return primeCount;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let total = 0;\n    let numberArray\
    \ = [];\n    let hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\n    numberArray\
    \ = num.split('');\n    numberArray.forEach(element => {\n        if (hexPrimes.includes(element))\
    \ {\n            total++;\n        }\n    });\n    return total;\n}\n", "    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < num.length; i++) {\n     \
    \   if (parseInt(num[i], 16) === 2 || parseInt(num[i], 16) === 3 || parseInt(num[i],\
    \ 16) === 5 || parseInt(num[i], 16) === 7 || parseInt(num[i], 16) === 11 || parseInt(num[i],\
    \ 16) === 13) {\n            sum++;\n        }\n    }\n    return sum;\n}\n\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "  let primes: number[] = [2, 3, 5, 7, 11, 13];\n  let count: number\
    \ = 0;\n  for (let i = 0; i < num.length; i++) {\n    let temp: number = 0;\n\
    \    if (primes.includes(+num[i])) {\n      count++;\n    } else if (num[i] ===\
    \ \"A\") {\n      temp = 10;\n    } else if (num[i] === \"B\") {\n      temp =\
    \ 11;\n    } else if (num[i] === \"C\") {\n      temp = 12;\n    } else if (num[i]\
    \ === \"D\") {\n      temp = 13;\n    } else if (num[i] === \"E\") {\n      temp\
    \ = 14;\n    } else if (num[i] === \"F\") {\n      temp = 15;\n    } else {\n\
    \      temp = +num[i];\n    }\n    if (primes.includes(temp)) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nconsole.log(hex_key(\"1\"));\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "  if (num.length === 0) {\n    return 0;\n  }\n\n  const isPrime = function(n:\
    \ number): boolean {\n    let prime: boolean = true;\n    for (let i = 2; i <\
    \ n; i++) {\n      if (n % i === 0) {\n        prime = false;\n        break;\n\
    \      }\n    }\n    return prime;\n  };\n\n  const countPrimes = function(s:\
    \ string): number {\n    let count: number = 0;\n    let isPrimeNumber: boolean\
    \ = false;\n    for (let i = 0; i < s.length; i++) {\n      switch (s[i]) {\n\
    \        case \"0\":\n        case \"1\":\n        case \"4\":\n        case \"\
    6\":\n        case \"8\":\n        case \"9\":\n        case \"A\":\n        case\
    \ \"C\":\n        case \"E\":\n        case \"F\":\n          break;\n       \
    \ case \"2\":\n        case \"3\":\n        case \"5\":\n        case \"7\":\n\
    \        case \"B\":\n        case \"D\":\n          isPrimeNumber = isPrime(parseInt(s[i],\
    \ 16));\n          if (isPrimeNumber) {\n            count++;\n          }\n \
    \         break;\n      }\n    }\n    return count;\n  };\n\n  return countPrimes(num);\n\
    }\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    let count = 0;\n    const hexPrime = ['2', '3', '5', '7', 'B',\
    \ 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrime.includes(num[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "  const\
    \ hexMap = {\n    \"A\": 10,\n    \"B\": 11,\n    \"C\": 12,\n    \"D\": 13,\n\
    \    \"E\": 14,\n    \"F\": 15\n  }\n  const hexArr = num.split(\"\");\n  let\
    \ primes = 0;\n  for (let i = 0; i < hexArr.length; i++) {\n    let digit = hexArr[i];\n\
    \    if (hexMap[digit]) {\n      digit = hexMap[digit];\n    }\n    if (Number(digit)\
    \ === 2 || Number(digit) === 3 || Number(digit) === 5 || Number(digit) === 7 ||\
    \ Number(digit) === 11 || Number(digit) === 13) {\n      primes++;\n    }\n  }\n\
    \  return primes;\n}\nconsole.log(hex_key(\"2020\"));\n", "    //Your solution:\n\
    \    let result = 0;\n    const hexDigits = {\n        2: true,\n        3: true,\n\
    \        5: true,\n        7: true,\n        B: true,\n        D: true\n    };\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (hexDigits[num[i]]) {\n\
    \            result++;\n        }\n    }\n    return result;\n}\n", "    let result:\
    \ number = 0;\n    let hexPrimes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    for (let i: number = 0; i < num.length; i++) {\n        if (hexPrimes.indexOf(num[i])\
    \ > -1) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    const hexMap = {\n        2: true,\n        3: true,\n      \
    \  5: true,\n        7: true,\n        B: true,\n        D: true,\n    };\n  \
    \  let sum = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexMap[num[i]])\
    \ {\n            sum++;\n        }\n    }\n    return sum;\n}\n", "    let hexChar:\
    \ string[] = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    let prime = 0;\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexChar.indexOf(num[i])))\
    \ {\n            prime++;\n        }\n    }\n    return prime;\n}\n", "  // let\
    \ hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n  let hexDigits = {\n    0: 1,\n    1: 1,\n    2: 1,\n    3:\
    \ 1,\n    4: 1,\n    5: 1,\n    6: 1,\n    7: 1,\n    8: 1,\n    9: 1,\n    A:\
    \ 1,\n    B: 1,\n    C: 1,\n    D: 1,\n    E: 1,\n    F: 1\n  };\n  let primeDigits\
    \ = ['B', 'D'];\n  let counter = 0;\n  for (let i = 0; i < num.length; i++) {\n\
    \    for (let j = 0; j < primeDigits.length; j++) {\n      if (num[i] === primeDigits[j])\
    \ {\n        counter++;\n      }\n    }\n  }\n  return counter;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    const primeDigits = '2357BD';\n    let count = 0;\n    for (let digit of num)\
    \ {\n        if (primeDigits.includes(digit)) {\n            count++;\n      \
    \  }\n    }\n    return count;\n}", "    let numArr = num.split('').reverse();\n\
    \    let res = 0;\n    let len = numArr.length;\n    let curr;\n    while (len--)\
    \ {\n        curr = numArr[len];\n        if (curr == 'A' || curr == 'B' || curr\
    \ == 'D') {\n            res++;\n        } else if (curr == 'E') {\n         \
    \   break;\n        } else if (curr == 'F') {\n            continue;\n       \
    \ } else if (curr > 0 && curr < 4) {\n            res += curr;\n        }\n  \
    \  }\n    return res;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let count = 0;\n    const hex: string[]\
    \ = num.split('');\n    for (let i = 0; i < hex.length; i++) {\n        const\
    \ char = hex[i];\n        const value = parseInt(char, 16);\n        if (isPrime(value))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "  // for\
    \ each hex digit, test if prime\n  // return number of primes\n\n  let primes\
    \ = 0;\n  let hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\n\n  for (let i = 0;\
    \ i < num.length; i++) {\n    if (hexPrimes.includes(num[i])) {\n      primes++;\n\
    \    }\n  }\n\n  return primes;\n}\n\nconsole.log(hex_key(\"2020\"));", "    const\
    \ hex = {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n      \
    \  4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n       \
    \ 9: 9,\n        A: 10,\n        B: 11,\n        C: 12,\n        D: 13,\n    \
    \    E: 14,\n        F: 15\n    };\n    let i = 0;\n    let count = 0;\n    while\
    \ (i < num.length) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]]\
    \ === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n\
    \            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    const primeMap = new Map<string, number>([\n        [\"A\", 11],\n\
    \        [\"B\", 13],\n        [\"C\", 17],\n        [\"D\", 19],\n        [\"\
    E\", 23],\n        [\"F\", 29]\n    ]);\n    const hexDigits = num.split(\"\"\
    );\n    const reducer = (acc: number, curr: string) => acc + ((primeMap.has(curr)\
    \ ? 1 : 0));\n    return hexDigits.reduce(reducer, 0);\n}\n\nconsole.log(hex_key(\"\
    AB\")); // 1\nconsole.log(hex_key(\"1077E\")); // 2\nconsole.log(hex_key(\"ABED1A33\"\
    )); // 4\nconsole.log(hex_key(\"123456789ABCDEF0\")); // 6\nconsole.log(hex_key(\"\
    2020\")); // 2", "    let str = '2357BD';\n    let count = 0;\n    for (let i\
    \ = 0; i < num.length; i++) {\n        if (str.indexOf(num[i]) !== -1) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n", "    let primeNumbers\
    \ = [2, 3, 5, 7, 11, 13];\n    return num.split('').reduce((acc, item) => {\n\
    \        let index = parseInt(item, 16);\n        if (primeNumbers.includes(index))\
    \ {\n            acc++;\n        }\n        return acc;\n    }, 0);\n}", "   \
    \ const hexes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    const primes = [2, 3, 5, 7, 11, 13];\n    let counter =\
    \ 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexes.indexOf(num[i])))\
    \ {\n            counter++;\n        }\n    }\n    return counter;\n}\n\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "  let hex: any = {\n    '0': 0,\n    '1':\
    \ 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7':\
    \ 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n    'C': 12,\n   \
    \ 'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  let primes: number[] = [2, 3, 5,\
    \ 7, 11, 13]\n  let numAsArray: number[] = []\n  let result: number = 0\n  for\
    \ (let i: number = 0; i < num.length; i++) {\n    numAsArray.push(hex[num[i]])\n\
    \  }\n  for (let j: number = 0; j < numAsArray.length; j++) {\n    if (primes.indexOf(numAsArray[j])\
    \ > -1) {\n      result++\n    }\n  }\n  return result\n}\n\nexport default hex_key;",
  "    let digit = num.split('');\n    let result = 0;\n    for (let i = 0; i < digit.length;\
    \ i++) {\n        if (digit[i] === '2' || digit[i] === '3' || digit[i] === '5'\
    \ || digit[i] === '7' || digit[i] === 'B' || digit[i] === 'D') {\n           \
    \ result += 1;\n        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let count = 0;\n    let arr = num.split('');\n    let hex = ['2', '3', '5',\
    \ '7', 'B', 'D'];\n    for (let i = 0; i < arr.length; i++) {\n        if (hex.includes(arr[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let result: number = 0;\n    const hexNum: Array<string> = [\"0\", \"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"\
    D\", \"E\", \"F\"];\n    const primeNum: Array<number> = [2, 3, 5, 7, 11, 13];\n\
    \    for (let i: number = 0; i < num.length; i++) {\n        for (let k: number\
    \ = 0; k < hexNum.length; k++) {\n            if (num[i] === hexNum[k]) {\n  \
    \              for (let j: number = 0; j < primeNum.length; j++) {\n         \
    \           if (k === primeNum[j]) {\n                        result++;\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(hex_key(\"2020\"));\n", "    let arr: string[] = ['2',\
    \ '3', '5', '7', 'B', 'D'];\n    let count: number = 0;\n    let result: boolean\
    \ = false;\n    for (let i: number = 0; i < num.length; i++) {\n        for (let\
    \ j: number = 0; j < arr.length; j++) {\n            if (num[i] === arr[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nconsole.log(hex_key(\"2020\"));\n", "  const hexa = \"0123456789ABCDEF\";\n\
    \  const primes = [2, 3, 5, 7, 11, 13];\n  let number = 0;\n  for (let i = 0;\
    \ i < num.length; i++) {\n    if (primes.includes(hexa.indexOf(num[i]))) {\n \
    \     number++;\n    }\n  }\n  return number;\n}\n", "    // write your function\
    \ here\n}\n", "    let hexPrimes = \"23B7D\";\n    let count = 0;\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(num[i])) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    1077E\"));", "    const hex_digits = {\n        '0': 0,\n        '1': 1,\n   \
    \     '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    const hex_to_dec = (num: string): number => {\n       \
    \ let res = 0;\n        for (let i = 0; i < num.length; i++) {\n            const\
    \ hex = num[i];\n            res = res * 16 + hex_digits[hex];\n        }\n  \
    \      return res;\n    }\n    const is_prime = (num: number): boolean => {\n\
    \        const sqrt = Math.floor(Math.sqrt(num));\n        for (let i = 2; i <=\
    \ sqrt; i++) {\n            if (num % i === 0) return false;\n        }\n    \
    \    return true;\n    }\n    const to_hex = (num: number): string => {\n    \
    \    const hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',\
    \ 'B', 'C', 'D', 'E', 'F'];\n        let res = '';\n        while (num !== 0)\
    \ {\n            res = hex_digits[num % 16] + res;\n            num = Math.floor(num\
    \ / 16);\n        }\n        return res;\n    }\n    const dec = hex_to_dec(num);\n\
    \    const hex = to_hex(dec);\n    let count = 0;\n    for (let i = 0; i < hex.length;\
    \ i++) {\n        const hex_digit = hex[i];\n        if (is_prime(hex_digits[hex_digit]))\
    \ count++;\n    }\n    return count;\n}\nconsole.log(hex_key(\"2020\"));\nconsole.log(hex_key(\"",
  "    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997];\n    return num.split('').filter(el => primes.includes(el.charCodeAt(0))).length;\n\
    }\n", "  return [...num].reduce((acc, current) => {\n    const value = parseInt(current,\
    \ 16);\n    if (isNaN(value)) {\n      return acc;\n    }\n    const isPrime =\
    \ [2, 3, 5, 7, 11, 13].includes(value);\n    return isPrime ? acc + 1 : acc;\n\
    \  }, 0);\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    const hexa = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    const prime = [2, 3, 5,\
    \ 7, 11, 13];\n    let count = 0;\n    let numArray = num.split(\"\");\n    for\
    \ (let i = 0; i < numArray.length; i++) {\n        for (let j = 0; j < hexa.length;\
    \ j++) {\n            if (numArray[i] == hexa[j]) {\n                numArray[i]\
    \ = j;\n            }\n        }\n    }\n    for (let i = 0; i < numArray.length;\
    \ i++) {\n        for (let j = 0; j < prime.length; j++) {\n            if (numArray[i]\
    \ == prime[j]) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nconsole.log(hex_key(\"ABED1A33\"));\n", "    let sum: number\
    \ = 0;\n    let arr: string[] = num.split('');\n    for (let i: number = 0; i\
    \ < arr.length; i++) {\n        if (arr[i] === '2' || arr[i] === '3' || arr[i]\
    \ === '5' || arr[i] === '7' || arr[i] === 'B' || arr[i] === 'D') {\n         \
    \   sum++;\n        }\n    }\n    return sum;\n}\n", "    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    const hexa = num.split('');\n    const result = hexa.filter(x\
    \ => primes.includes(Number(x)));\n    return result.length;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let dict: Map<string, number> = new Map([\n        [\"A\", 10],\n        [\"\
    B\", 11],\n        [\"C\", 12],\n        [\"D\", 13],\n        [\"E\", 14],\n\
    \        [\"F\", 15]\n    ]);\n    let count: number = 0;\n    for (let i: number\
    \ = 0; i < num.length; i++) {\n        if (dict.has(num[i])) {\n            if\
    \ (dict.get(num[i]) > 1 && isPrime(dict.get(num[i]))) {\n                count++;\n\
    \            }\n        } else {\n            if (parseInt(num[i]) > 1 && isPrime(parseInt(num[i])))\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "  if (num === '') return 0;\n  const primes = ['2', '3', '5', '7', 'B',\
    \ 'D'];\n  let counter = 0;\n  for (let i = 0; i < num.length; i++) {\n    for\
    \ (let j = 0; j < primes.length; j++) {\n      if (num[i] === primes[j]) counter++;\n\
    \    }\n  }\n  return counter;\n}\n\nexport { hex_key };", "    const hex: { [k:\
    \ string]: number } = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };\n    const\
    \ primes: number[] = [2, 3, 5, 7, 11, 13];\n    let isPrime: boolean;\n    let\
    \ result: number = 0;\n    for (let c of num) {\n        let x: number = c in\
    \ hex ? hex[c] : +c;\n        isPrime = primes.includes(x);\n        result +=\
    \ isPrime ? 1 : 0;\n    }\n    return result;\n}\nconsole.log(hex_key(\"AB\"));\n\
    console.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n", "    let primes = '2357BD';\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n", "  if (num.length\
    \ <= 0) {\n    return 0;\n  }\n  const keys = {\n    '2': true,\n    '3': true,\n\
    \    '5': true,\n    '7': true,\n    'B': true,\n    'D': true,\n  };\n  return\
    \ [...num].reduce((acc, curr) => {\n    if (keys[curr]) {\n      return acc +\
    \ 1;\n    }\n    return acc;\n  }, 0);\n}\n", "    let arr: string[] = num.split('');\n\
    \    let numArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] === 'A') {\n            numArr.push(10);\n        } else if\
    \ (arr[i] === 'B') {\n            numArr.push(11);\n        } else if (arr[i]\
    \ === 'C') {\n            numArr.push(12);\n        } else if (arr[i] === 'D')\
    \ {\n            numArr.push(13);\n        } else if (arr[i] === 'E') {\n    \
    \        numArr.push(14);\n        } else if (arr[i] === 'F') {\n            numArr.push(15);\n\
    \        } else {\n            numArr.push(Number(arr[i]));\n        }\n    }\n\
    \    let count: number = 0;\n    for (let i = 0; i < numArr.length; i++) {\n \
    \       if (numArr[i] === 2 || numArr[i] === 3 || numArr[i] === 5 || numArr[i]\
    \ === 7 || numArr[i] === 11 || numArr[i] === 13) {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n", "    const primes = [\"2\", \"3\", \"\
    5\", \"7\", \"B\", \"D\"];\n    return num.split(\"\").filter(v => primes.includes(v)).length;\n\
    }\n", "    let result: number = 0;\n    let primes: string = \"2357BD\";\n   \
    \ num.split(\"\").forEach(element => {\n        if (primes.includes(element))\
    \ {\n            result += 1;\n        }\n    });\n    return result;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "    let nums = num.split('');\n    let primes = ['2', '3', '5', '7', 'B', 'D'];\n\
    \    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (primes.includes(nums[i]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "  let sum = 0;\n  let primes = [2, 3, 5, 7, 11, 13];\n  let hexPrimes = primes.map(x\
    \ => x.toString(16).toUpperCase());\n  for (let i = 0; i < num.length; i++) {\n\
    \    if (hexPrimes.includes(num[i])) {\n      sum++;\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(hex_key(\"2020\"));\n", "    return num.split('').filter(h=>'2357BDF'.includes(h)).length;\n\
    }\n\nconsole.log(hex_key(\"AB\")); // 1\nconsole.log(hex_key(\"1077E\")); // 2\n\
    console.log(hex_key(\"ABED1A33\")); // 4\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    )); // 6\nconsole.log(hex_key(\"2020\")); // 2", "    let count: number = 0;\n\
    \    let primes: number[] = [2, 3, 5, 7, 11, 13];\n    let hexes: string[] = ['0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexes.indexOf(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "  let c = 0;\n  let result = 0;\n  while (c < num.length) {\n    let b = 0;\n \
    \   let d = 0;\n    let a = num.charCodeAt(c);\n    if (\n      (a >= 65 && a\
    \ <= 70) ||\n      (a >= 48 && a <= 57) ||\n      (a >= 97 && a <= 102)\n    )\
    \ {\n      d = num.charCodeAt(c);\n      if (d > 90) {\n        d -= 32;\n   \
    \   }\n      let e = d;\n      if (e >= 65) {\n        e -= 55;\n      } else\
    \ {\n        e -= 48;\n      }\n      let f = 0;\n      while (e > 1) {\n    \
    \    f = 0;\n        let g = 2;\n        while (g <= e - 1) {\n          if (e\
    \ % g == 0) {\n            f = 1;\n            break;\n          }\n         \
    \ g++;\n        }\n        if (f == 0) {\n          break;\n        }\n      \
    \  e--;\n      }\n      if (e == 1) {\n        result++;\n      }\n    }\n   \
    \ c++;\n  }\n  return result;\n}\n", "  let primes: string = \"2357BD\";\n  let\
    \ count: number = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(num[i]))\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "    return num.split('').reduce((sum,\
    \ item) => {\n        const itemInt = parseInt(item, 16);\n        return sum\
    \ + (itemInt === 2 || itemInt === 3 || itemInt === 5 || itemInt === 7 || itemInt\
    \ === 11 || itemInt === 13 ? 1 : 0);\n    }, 0);\n}\n\nconst hex_key2 = (str:\
    \ string): number => {\n    return [...str].reduce((sum, v) => {\n        const\
    \ n = parseInt(v, 16);\n        return sum + (n === 2 || n === 3 || n === 5 ||\
    \ n === 7 || n === 11 || n === 13 ? 1 : 0);\n    }, 0);\n}\n", "    let dec =\
    \ parseInt(num, 16);\n    let result = 0;\n    for (let i = 2; i <= dec; i++)\
    \ {\n        if (dec % i == 0) {\n            result++;\n        }\n    }\n  \
    \  return result;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\nconsole.log('\\n');\n", "    // parse string\
    \ to number\n    const hexNum = parseInt(num, 16);\n    // get the factor list\n\
    \    const factorList = getFactorList(hexNum);\n    // get prime factor list\n\
    \    const primeFactorList = factorList.filter(factor => isPrime(factor));\n \
    \   // return the prime factor list length\n    return primeFactorList.length;\n\
    }\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\n", "    return 0;\n}\n", "  let isPrime = x => {\n    for (let i =\
    \ 2; i < x; i++) {\n      if (x % i === 0) return false;\n    }\n    return x\
    \ > 1;\n  };\n  let hexMap = {\n    \"2\": 2,\n    \"3\": 3,\n    \"5\": 5,\n\
    \    \"7\": 7,\n    \"B\": 11,\n    \"D\": 13\n  };\n  let result = 0;\n  for\
    \ (let i = 0; i < num.length; i++) {\n    if (isPrime(hexMap[num[i]])) result++;\n\
    \  }\n  return result;\n}\n", "  let hex: string[] = [ '0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' ];\n  let prime: string[]\
    \ = [ '2', '3', '5', '7', 'B', 'D' ];\n  let n: number = 0;\n  for (let i: number\
    \ = 0; i < num.length; i++) {\n    if (prime.indexOf(num[i]) !== -1) {\n     \
    \ n++;\n    }\n  }\n  return n;\n}\n", "    const digits = ['2', '3', '5', '7',\
    \ 'B', 'D'];\n    return [...num].filter(x => digits.includes(x)).length;\n}\n",
  "    let result: number = 0;\n    let first = num.charAt(0);\n    if (first ===\
    \ \"1\" || first === \"2\" || first === \"3\" || first === \"5\" || first ===\
    \ \"7\" || first === \"B\" || first === \"D\") {\n        result++;\n    }\n \
    \   for (let i = 1; i < num.length; i++) {\n        if (num.charAt(i) === \"1\"\
    \ || num.charAt(i) === \"2\" || num.charAt(i) === \"3\" || num.charAt(i) === \"\
    5\" || num.charAt(i) === \"7\" || num.charAt(i) === \"B\" || num.charAt(i) ===\
    \ \"D\") {\n            result++;\n        }\n    }\n    return result;\n}\n",
  "  let counter = 0;\n  let primeHexDigits = [\"2\", \"3\", \"5\", \"7\", \"B\",\
    \ \"D\"];\n  for (let i = 0; i < num.length; i++) {\n    for (let j = 0; j < primeHexDigits.length;\
    \ j++) {\n      if (num[i] === primeHexDigits[j]) {\n        counter++;\n    \
    \  }\n    }\n  }\n  return counter;\n}\n", "    let isPrime = (num: number): boolean\
    \ => {\n        if (num < 2) return false;\n        if (num === 2) return true;\n\
    \        if (num % 2 === 0) return false;\n        for (let i = 3; i <= Math.sqrt(num);\
    \ i += 2) {\n            if (num % i === 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    let hexToDec = (str:\
    \ string): number => {\n        let hex: { [key: string]: number } = {\n     \
    \       \"0\": 0,\n            \"1\": 1,\n            \"2\": 2,\n            \"\
    3\": 3,\n            \"4\": 4,\n            \"5\": 5,\n            \"6\": 6,\n\
    \            \"7\": 7,\n            \"8\": 8,\n            \"9\": 9,\n       \
    \     \"A\": 10,\n            \"B\": 11,\n            \"C\": 12,\n           \
    \ \"D\": 13,\n            \"E\": 14,\n            \"F\": 15\n        }\n     \
    \   let result: number = 0;\n        for (let i = 0; i < str.length; i++) {\n\
    \            result += hex[str[i]] * Math.pow(16, str.length - i - 1);\n     \
    \   }\n        return result;\n    }\n    let count: number = 0;\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (isPrime(hexToDec(num[i]))) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let count = 0;\n    for (let c of num) {\n        if (['2', '3', '5', '7',\
    \ 'B', 'D'].includes(c)) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "  const hexPrimes = ['2', '3', '5', '7', 'B', 'D'];\n  let total\
    \ = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (hexPrimes.includes(num[i]))\
    \ {\n      total++;\n    }\n  }\n  return total;\n}\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    let nums = num.split('');\n\
    \    let count = 0;\n    let n: number;\n    let hexObj = {\n        '0': 0,\n\
    \        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < nums.length; i++)\
    \ {\n        n = hexObj[nums[i]];\n        if (n === 2 || n === 3 || n === 5 ||\
    \ n === 7 || n === 11 || n === 13) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    const digits = num.split('');\n\
    \    let primes = 0;\n    for (let i = 0; i < digits.length; i++) {\n        const\
    \ e = digits[i];\n        if (e === '2' || e === '3' || e === '5' || e === '7'\
    \ || e === 'B' || e === 'D') {\n            primes++;\n        }\n    }\n    return\
    \ primes;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let count = 0;\n    let validPrimes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hexes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15];\n    let hexValues = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    num.split('').forEach(val => {\n        if (validPrimes.includes(hexValues[val]))\
    \ {\n            count++;\n        }\n    })\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "  let prime = 0;\n  if (num) {\n    num.split(\"\").forEach(e => {\n      switch\
    \ (e) {\n        case \"2\":\n        case \"3\":\n        case \"5\":\n     \
    \   case \"7\":\n        case \"B\":\n        case \"D\":\n          prime++;\n\
    \          break;\n        default:\n          break;\n      }\n    });\n  }\n\
    \  return prime;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    const primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        let key\
    \ = num[i];\n        switch (key) {\n            case 'A':\n                key\
    \ = '10';\n                break;\n            case 'B':\n                key\
    \ = '11';\n                break;\n            case 'C':\n                key\
    \ = '12';\n                break;\n            case 'D':\n                key\
    \ = '13';\n                break;\n            case 'E':\n                key\
    \ = '14';\n                break;\n            case 'F':\n                key\
    \ = '15';\n                break;\n        }\n        if (primes.includes(parseInt(key)))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let totalPrimes = 0;\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (isPrime(parseInt(num[i], 16))) {\n\
    \            totalPrimes++;\n        }\n    }\n    return totalPrimes;\n}\n",
  "    let count = 0;\n    let hex: string[] = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"];\n    num.split(\"\").forEach(element => {\n        if (hex.includes(element))\
    \ {\n            count++;\n        }\n    });\n    return count;\n}\n", "    let\
    \ totalPrime: number = 0;\n    let newArr: any[] = [];\n    let count: number\
    \ = 0;\n    let isPrime: boolean = true;\n    const primeNumbers: any[] = [2,\
    \ 3, 5, 7, 11, 13, 17];\n    const hexaDecimal: any[] = [0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        for (let j: number = 0; j < hexaDecimal.length; j++) {\n   \
    \         if (num[i] === hexaDecimal[j]) {\n                newArr.push(j);\n\
    \            }\n        }\n    }\n    for (let i: number = 0; i < newArr.length;\
    \ i++) {\n        if (primeNumbers.includes(newArr[i])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "  let dec: number = parseInt(num, 16);\n\
    \  let primes: number[] = [2, 3, 5, 7, 11, 13];\n  let prime_cnt: number = 0;\n\
    \  let pos: number = 0;\n  while (dec > 0) {\n    if (dec % 10 == primes[pos])\
    \ {\n      prime_cnt++;\n    }\n    dec = Math.floor(dec / 10);\n    pos++;\n\
    \  }\n  return prime_cnt;\n}\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "  let result = 0;\n  let isPrime = true;\n  for (let i = 0; i < num.length;\
    \ i++) {\n    let char = num[i];\n    if (char == 'A' || char == 'B' || char ==\
    \ 'D') {\n      result++;\n    } else if (parseInt(char) % 2 != 0 && parseInt(char)\
    \ > 2) {\n      for (let j = 2; j < parseInt(char); j++) {\n        if (parseInt(char)\
    \ % j == 0) {\n          isPrime = false;\n          break;\n        }\n     \
    \ }\n      if (isPrime) {\n        result++;\n      }\n      isPrime = true;\n\
    \    }\n  }\n  return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let obj = { 'A': 10, 'B': 11, 'C':\
    \ 12, 'D': 13, 'E': 14, 'F': 15 };\n    let res = 0;\n    let prime = [2, 3, 5,\
    \ 7, 11, 13];\n    let hex = num.split('');\n    let hexLength = hex.length;\n\
    \    for (let i = 0; i < hexLength; i++) {\n        if (prime.includes(parseInt(hex[i])))\
    \ {\n            res += 1;\n        } else if (obj[hex[i]] !== undefined) {\n\
    \            if (prime.includes(obj[hex[i]])) {\n                res += 1;\n \
    \           }\n        }\n    }\n    return res;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "  let primes: string = \"2357BD\";\n  let count: number = 0;\n  for (let char of\
    \ num) {\n    if (primes.includes(char)) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let hex: number = 0;\n  let key: number = 0;\n  let s: string\
    \ = num.toString().toUpperCase();\n  let primes: string = \"2357BD\";\n  for (let\
    \ i: number = 0; i < s.length; i++) {\n    if (primes.indexOf(s[i]) >= 0) {\n\
    \      key++;\n    }\n  }\n  return key;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "  let count = 0;\n  let lookup: { [key:\
    \ string]: number } = {\n    \"2\": true,\n    \"3\": true,\n    \"5\": true,\n\
    \    \"7\": true,\n    \"B\": true,\n    \"D\": true\n  };\n  for (let i = 0;\
    \ i < num.length; i++) {\n    if (lookup[num[i]]) {\n      count++;\n    }\n \
    \ }\n  return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "  const hexToDec = new Map([\n    ['0',\
    \ 0],\n    ['1', 1],\n    ['2', 2],\n    ['3', 3],\n    ['4', 4],\n    ['5', 5],\n\
    \    ['6', 6],\n    ['7', 7],\n    ['8', 8],\n    ['9', 9],\n    ['A', 10],\n\
    \    ['B', 11],\n    ['C', 12],\n    ['D', 13],\n    ['E', 14],\n    ['F', 15]\n\
    \  ]);\n  return num.split('').reduce((acc, curr) => {\n    const dec = hexToDec.get(curr);\n\
    \    if (isPrime(dec)) {\n      return acc + 1;\n    }\n    return acc;\n  },\
    \ 0);\n}\n", "    const primes = ['2', '3', '5', '7', 'B', 'D'];\n    return [...num].filter(char\
    \ => primes.includes(char)).length;\n}", "    let primes = [2, 3, 5, 7, 11, 13]\n\
    \    let count = 0\n    for (let n of num) {\n        if (primes.includes(parseInt(n,\
    \ 16))) {\n            count++\n        }\n    }\n    return count\n}\n\nconsole.log(hex_key(\"\
    AB\"))\nconsole.log(hex_key(\"1077E\"))\nconsole.log(hex_key(\"ABED1A33\"))\n\
    console.log(hex_key(\"123456789ABCDEF0\"))\nconsole.log(hex_key(\"2020\"))\n",
  "    //#2: my solution\n    const nums = num.split('').map(e => parseInt(e, 16));\n\
    \    const primes = nums.filter(e => isPrime(e));\n    return primes.length;\n\
    }\nconst isPrime = (num: number): boolean => {\n    if (num < 2) return false;\n\
    \    let isPrime = true;\n    for (let i = 2; i < num; i++) {\n        if (num\
    \ % i === 0) {\n            isPrime = false;\n            break;\n        }\n\
    \    }\n    return isPrime;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "  let count = 0;\n  let hexDigits = \"\
    0123456789ABCDEF\";\n  let decimalNumbers = [2, 3, 5, 7, 11, 13];\n  for (let\
    \ i = 0; i < num.length; i++) {\n    if (hexDigits.indexOf(num[i]) > -1) {\n \
    \     if (decimalNumbers.indexOf(parseInt(num[i], 16)) > -1) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\n", "    let primes = [2, 3, 5, 7, 11,\
    \ 13]\n    let result = 0;\n    let compare = num.split('').map(x => parseInt(x));\n\
    \    console.log(compare);\n    compare.forEach(x => {\n        if (primes.includes(x))\
    \ {\n            result++;\n        }\n    })\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let hexPrimes: string = \"2357BDF\";\n    let primes: number = 0;\n    for\
    \ (let i: number = 0; i < num.length; i++) {\n        if (hexPrimes.indexOf(num[i])\
    \ !== -1) {\n            primes++;\n        }\n    }\n    return primes;\n}",
  "  let count = 0;\n  let hex = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n\
    \    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n \
    \   \"8\": 8,\n    \"9\": 9,\n    \"A\": 10,\n    \"B\": 11,\n    \"C\": 12,\n\
    \    \"D\": 13,\n    \"E\": 14,\n    \"F\": 15\n  };\n  for (let i = 0; i < num.length;\
    \ i++) {\n    if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5\
    \ || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n      count++;\n\
    \    }\n  }\n  return count;\n}", "    let result: number = 0;\n    let validNums:\
    \ number[] = [2, 3, 5, 7, 11, 13];\n    let numArr: string[] = num.split('');\n\
    \    let decimals: number[] = numArr.map(letter => parseInt(letter, 16));\n  \
    \  for (let i = 0; i < decimals.length; i++) {\n        if (validNums.includes(decimals[i]))\
    \ {\n            result++;\n        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let hexDecimals = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n\
    \        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n\
    \        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n\
    \        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n\
    \        \"F\": 15\n    };\n    let count = 0;\n    let result = 0;\n    let numInDecimal\
    \ = 0;\n    let isPrime = true;\n    for (let index = 0; index < num.length; index++)\
    \ {\n        numInDecimal = hexDecimals[num[index]];\n        if (numInDecimal\
    \ > 2) {\n            for (let divider = 2; divider < numInDecimal; divider++)\
    \ {\n                if (numInDecimal % divider === 0) {\n                   \
    \ isPrime = false;\n                    break;\n                }\n          \
    \  }\n            if (isPrime) {\n                count++;\n            }\n  \
    \          isPrime = true;\n        }\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    let hex: string[] = [];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        hex.push(num[i]);\n    }\n    console.log(hex);\n    for (let\
    \ i = 0; i < hex.length; i++) {\n        if (hex[i] == \"A\" || hex[i] == \"B\"\
    \ || hex[i] == \"D\") {\n            count++;\n        }\n    }\n    return count;\n\
    }\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    const hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let count\
    \ = 0;\n    let hexNum = num.split(\"\");\n    for (let i = 0; i < hexNum.length;\
    \ i++) {\n        if (hexNum[i] === \"2\" || hexNum[i] === \"3\" || hexNum[i]\
    \ === \"5\" || hexNum[i] === \"7\" || hexNum[i] === \"B\" || hexNum[i] === \"\
    D\") {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "    let digits: string[] = [\"A\", \"B\", \"D\", \"F\"];\n    let letters: string[]\
    \ = num.split(\"\");\n    let primeCount: number = 0;\n    letters.forEach(char\
    \ => {\n        if (digits.includes(char)) {\n            primeCount++;\n    \
    \    }\n    });\n    return primeCount;\n}\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\n", "    let count = 0;\n    let nums = num.split('');\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        if (nums[i] === '2' || nums[i] === '3' || nums[i]\
    \ === '5' || nums[i] === '7' || nums[i] === 'B' || nums[i] === 'D') {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n", "    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(parseInt(num[i], 16))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "  let primeCounter = 0;\n  for (let i\
    \ = 0; i < num.length; i++) {\n    if (num[i] === \"2\" || num[i] === \"3\" ||\
    \ num[i] === \"5\" || num[i] === \"7\" || num[i] === \"B\" || num[i] === \"D\"\
    ) {\n      primeCounter++;\n    }\n  }\n  return primeCounter;\n}\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\n", "    return [...num].reduce((acc,cur)=>{\n        switch(cur){\n\
    \            case '2':\n            case '3':\n            case '5':\n       \
    \     case '7':\n            case 'B':\n            case 'D':\n              \
    \  return acc+=1;\n            default:\n                return acc;\n       \
    \ }\n    },0)\n}\n", "    let primes = ['2', '3', '5', '7', 'B', 'D'];\n    let\
    \ sum = 0;\n    for (let char of num) {\n        if (primes.includes(char)) sum++;\n\
    \    }\n    return sum;\n}", "    let result: number = 0;\n    let primeHex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (primeHex.indexOf(num[i]) !== -1) {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\n", "    let hexDigits\
    \ = \"0123456789ABCDEF\";\n    let out = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hexDigits.indexOf(num[i]) % 2 === 0) {\n            out++;\n\
    \        }\n    }\n    return out;\n}\n", "  let arrHex = num.split('');\n  let\
    \ count = 0;\n  for (let i = 0; i < arrHex.length; i++) {\n    let decimal = parseInt(arrHex[i],\
    \ 16);\n    if (isPrime(decimal)) {\n      count++;\n    }\n  }\n  return count;\n\
    }", "    const alpha = 'abcdefghijklmnopqrstuvwxyz'.toUpperCase();\n    let count\
    \ = 0;\n    const hex: string[] = num.split('');\n    const primes: number[] =\
    \ [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < hex.length; i++) {\n        if\
    \ (primes.includes(Number(hex[i]))) {\n            count += 1;\n        } else\
    \ if (alpha.includes(hex[i])) {\n            count += 1;\n        }\n    }\n \
    \   return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let res: number = 0;\n    let nums\
    \ = num.split('');\n    for (let i = 0; i < nums.length; i++) {\n        switch\
    \ (nums[i]) {\n            case '2':\n            case '3':\n            case\
    \ '5':\n            case '7':\n            case 'B':\n            case 'D':\n\
    \                res++;\n                break;\n        }\n    }\n    return\
    \ res;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\n", "    let numberOfPrimeDigits = 0;\n    let hexDigits = [...num.toUpperCase()];\n\
    \    for (let hexDigit of hexDigits) {\n        if (hexDigit === '2' || hexDigit\
    \ === '3' || hexDigit === '5' || hexDigit === '7' || hexDigit === 'B' || hexDigit\
    \ === 'D')\n            numberOfPrimeDigits++;\n    }\n    return numberOfPrimeDigits;\n\
    }\n", '    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,
    47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,
    137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
    227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,
    419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
    509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,
    617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,
    727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,
    829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,
    947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039,
    1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123,
    1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,', "  return num.split('').filter(i\
    \ => '2357BDF'.includes(i)).length;\n}\n", "    let hex_primes: number = 0;\n\
    \    const hex_nums: string[] = num.split('');\n    const hex_values: number[]\
    \ = hex_nums.map(num => {\n        return parseInt(num, 16);\n    });\n    hex_values.forEach(value\
    \ => {\n        if (value == 2 || value == 3 || value == 5 || value == 7 || value\
    \ == 11 || value == 13) {\n            hex_primes++;\n        }\n    });\n   \
    \ return hex_primes;\n}\n", "    let result: number = 0;\n    const charCodes:\
    \ number[] = num.split('').map(x => x.charCodeAt(0));\n    for (let i = 0; i <\
    \ charCodes.length; i++) {\n        const element = charCodes[i];\n        if\
    \ (element < 65) {\n            if (element % 2 == 1) {\n                result++;\n\
    \            }\n        } else {\n            if (element == 66 || element ==\
    \ 68) {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    if (num.length === 0) return 0;\n\
    \    return [...num.toUpperCase()].reduce((x, y) => x + ('25BD'.includes(y) ?\
    \ 1 : 0), 0);\n}\n", "    let arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let sum = 0;\n    for (let i = 0; i\
    \ < num.length; i++) {\n        let hex = num[i];\n        if (hex === '2' ||\
    \ hex === '3' || hex === '5' || hex === '7' || hex === 'B' || hex === 'D') {\n\
    \            sum = sum + 1;\n        }\n    }\n    return sum;\n}\n", "    let\
    \ primes = \"2357BD\";\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        for (let j = 0; j < primes.length; j++) {\n            if (num[i]\
    \ === primes[j]) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    return [...num].filter(n => /[2357BD]/.test(n)).length;\n\
    }\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));", "    const keys = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\"\n    ];\n    let num_primes = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (keys.indexOf(num[i]) > 9) {\n            let decimal = Number.parseInt(num[i],\
    \ 16);\n            if (isPrime(decimal)) {\n                num_primes++;\n \
    \           }\n        }\n    }\n    return num_primes;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n",
  "  let digitList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n  let\
    \ primeList = [2, 3, 5, 7, 11, 13];\n  let result: number = 0;\n  let hexNumber:\
    \ number[] = [];\n  let numArray: string[] = num.split(\"\");\n  for (let n of\
    \ numArray) {\n    if (n === \"A\") {\n      hexNumber.push(10);\n    } else if\
    \ (n === \"B\") {\n      hexNumber.push(11);\n    } else if (n === \"C\") {\n\
    \      hexNumber.push(12);\n    } else if (n === \"D\") {\n      hexNumber.push(13);\n\
    \    } else if (n === \"E\") {\n      hexNumber.push(14);\n    } else if (n ===\
    \ \"F\") {\n      hexNumber.push(15);\n    } else {\n      hexNumber.push(parseInt(n));\n\
    \    }\n  }\n  for (let h of hexNumber) {\n    if (primeList.includes(h)) {\n\
    \      result++;\n    }\n  }\n  return result;\n}\n\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "  //hex_primes = ['2',\
    \ '3', '5', '7', 'B', 'D']\n  var count = 0;\n  for (var i = 0; i < num.length;\
    \ i++) {\n    if (\n      num[i] == \"2\" ||\n      num[i] == \"3\" ||\n     \
    \ num[i] == \"5\" ||\n      num[i] == \"7\" ||\n      num[i] == \"B\" ||\n   \
    \   num[i] == \"D\"\n    ) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "    const HEX_PRIMES = ['2', '3', '5', '7', 'B', 'D'];\n    const HEX_DIGITS =\
    \ num.split('');\n    let count: number = 0;\n    for (let i = 0; i < HEX_DIGITS.length;\
    \ i++) {\n        if (HEX_PRIMES.includes(HEX_DIGITS[i])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"1077E\"));", " \
    \   let count = 0;\n    const hexNumber = num.toUpperCase();\n    const primeHex:\
    \ string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0;\
    \ i < hexNumber.length; i++) {\n        const char = hexNumber[i];\n        if\
    \ (primeHex.includes(char)) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    const hexDigits: string[] = ['0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n\
    \    const hexPrimes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    let count:\
    \ number = 0;\n    for (let digit of num) {\n        if (hexPrimes.includes(digit))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));",
  "  let result = 0;\n  let hexArr = ['2', '3', '5', '7', 'B', 'D'];\n  for (let char\
    \ of num) {\n    if (hexArr.includes(char)) {\n      result++;\n    }\n  }\n \
    \ return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "    let arr = num.split('');\n    let\
    \ count = 0;\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n    let prime = [2, 3, 5, 7, 11, 13];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < hex.length;\
    \ j++) {\n            if (arr[i] === hex[j]) {\n                for (let k = 0;\
    \ k < prime.length; k++) {\n                    if (j === prime[k]) {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}\n", "    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(parseInt(num[i], 16))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let hex = {\n        \"0\": true,\n\
    \        \"1\": true,\n        \"2\": true,\n        \"3\": true,\n        \"\
    4\": true,\n        \"5\": true,\n        \"6\": true,\n        \"7\": true,\n\
    \        \"8\": true,\n        \"9\": true,\n        \"A\": true,\n        \"\
    B\": true,\n        \"C\": true,\n        \"D\": true,\n        \"E\": true,\n\
    \        \"F\": true\n    }\n    let res = num.split(\"\").filter(function (v)\
    \ {\n        return hex[v];\n    })\n    return res.length;\n}\n", "    let digits\
    \ = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n  \
    \      '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n    let primes =\
    \ {\n        '2': true,\n        '3': true,\n        '5': true,\n        '7':\
    \ true,\n        'B': true,\n        'D': true\n    };\n    let result = 0;\n\
    \    for (let i of num) {\n        if (primes[i]) {\n            result++;\n \
    \       }\n    }\n    return result;\n}", "    if (num.length === 0) {\n     \
    \   return 0;\n    }\n    return num.split('').reduce((a, c) => {\n        const\
    \ val = parseInt(c, 16);\n        if (val === 2 || val === 3 || val === 5 || val\
    \ === 7 || val === 11 || val === 13) {\n            return a + 1;\n        }\n\
    \        return a;\n    }, 0);\n}\n\nexport { hex_key };", "    let primeCount\
    \ = 0;\n    let hex = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i = 0; i <\
    \ num.length; i++) {\n        if (hex.includes(num[i])) {\n            primeCount++;\n\
    \        }\n    }\n    return primeCount;\n}\n\nconsole.log(hex_key(\"AB\"));\n\
    console.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));", "    return [...num].reduce((primeCount,\
    \ hexDigit) => {\n        if (isPrime(parseInt(hexDigit, 16))) {\n           \
    \ primeCount++;\n        }\n        return primeCount;\n    }, 0);\n}\n", "  \
    \  let primes: string = \"2357BDEF\";\n    let result: number = 0;\n    for (let\
    \ char of num) {\n        if (primes.includes(char)) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n", "    let hexPrimes = [2, 3, 5, 7, 11,\
    \ 13];\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n     \
    \   if (hexPrimes.includes(Number(num[i]))) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\n\n", "    let arr = ['0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let count = 0;\n\
    \    for (let x of num) {\n        if (x === arr[2] || x === arr[3] || x === arr[5]\
    \ || x === arr[7] || x === arr[11] || x === arr[13]) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));", "  let result = 0;\n  const hex = {\n \
    \   A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15,\n  };\n\
    \  for (let i = 0; i < num.length; i++) {\n    let curr = num[i];\n    if (hex[curr])\
    \ {\n      curr = hex[curr];\n    }\n    if (curr % 2 === 0 || curr % 3 === 0\
    \ || curr % 5 === 0 || curr % 7 === 0) {\n      continue;\n    }\n    result++;\n\
    \  }\n  return result;\n}\nconsole.log(hex_key(\"123456789ABCDEF0\"));", "  return\
    \ [...num.toUpperCase()].filter(n => /[2357BD]/.test(n)).length;\n}\n\nexport\
    \ { hex_key };"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
