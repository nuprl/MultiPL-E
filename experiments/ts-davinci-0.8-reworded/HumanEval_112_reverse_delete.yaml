name: HumanEval_112_reverse_delete
language: ts
prompt: "//Task\n// We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n// then check if the result\
  \ string is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return an array containing the result string and true/false\
  \ for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\"\
  , false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>>\
  \ reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s:\
  \ string, c: string): [string, boolean] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
  , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
  acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"\
  a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"\
  abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\"\
  , true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n \
  \ assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
completions: ["    let arr: string[] = [];\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (c.indexOf(s[i]) === -1) {\n            arr.push(s[i]);\n    \
    \    }\n    }\n    return [arr.join(''), arr.join('') === arr.reverse().join('')];\n\
    }\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\n", "  let result: string\
    \ = '';\n  let palindrome: boolean = false;\n  for (let i: number = 0; i < s.length;\
    \ i++) {\n    if (c.indexOf(s[i]) == -1) {\n      result += s[i];\n    }\n  }\n\
    \  if (result == result.split('').reverse().join('')) {\n    palindrome = true;\n\
    \  }\n  return [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n", "  let result = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (!c.includes(s[i])) {\n      result.push(s[i]);\n    }\n  }\n\
    \  return [result.join(\"\"), result.join(\"\") === result.reverse().join(\"\"\
    )];\n}\n", "    const result: [string, boolean] = [\"\", false];\n    const reverseS:\
    \ string = s.split(\"\").reverse().join(\"\");\n    const expected: string = s.split(\"\
    \").filter(char => c.indexOf(char) < 0).join(\"\");\n    const reversedExpected:\
    \ string = expected.split(\"\").reverse().join(\"\");\n    result[0] = expected;\n\
    \    result[1] = expected === reversedExpected;\n    return result;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result +=\
    \ s[i];\n        }\n    }\n    let isPalindrome: boolean = true;\n    for (let\
    \ i = 0; i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n        }\n    }\n    return\
    \ [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    var result: [string, boolean] = [\"\", false];\n\
    \    var tmp: string = \"\";\n    var tmp1: string = \"\";\n    for (var i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) != -1) {\n            continue;\n\
    \        }\n        tmp += s[i];\n    }\n    for (var i = tmp.length - 1; i >=\
    \ 0; i--) {\n        tmp1 += tmp[i];\n    }\n    if (tmp == tmp1) {\n        result[1]\
    \ = true;\n    }\n    result[0] = tmp;\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let reg = new RegExp(`[${c}]`, 'g');\n    let string\
    \ = s.replace(reg, '');\n    return [string, isPalindrome(string)];\n}\n", " \
    \   let result: string = s.split('').filter(x => c.indexOf(x) === -1).join('');\n\
    \    return [result, palindrome(result)];\n}\n", "    let result = '';\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  const sArr = s.split('');\n    const cArr = c.split('');\n    sArr.forEach((x,\
    \ i) => {\n        if (cArr.includes(x)) {\n            sArr.splice(i, 1);\n \
    \       }\n    });\n    const sArrJoin = sArr.join('');\n    let isPalindrome\
    \ = false;\n    const sArrReverse = sArr.reverse();\n    if (sArrJoin === sArrReverse.join(''))\
    \ {\n        isPalindrome = true;\n    }\n    return [sArrJoin, isPalindrome];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let removed: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n   \
    \     if (!c.includes(s[i])) {\n            removed += s[i];\n        }\n    }\n\
    \    let reverse = removed.split(\"\").reverse().join(\"\");\n    return [removed,\
    \ reverse === removed];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = '';\n    let isPalindrome = true;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n\
    \            result += s[i];\n        }\n    }\n    for (let i = 0; i < result.length\
    \ / 2; i++) {\n        if (result[i] !== result[result.length - 1 - i]) {\n  \
    \          isPalindrome = false;\n        }\n    }\n    return [result, isPalindrome];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ result: string = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n\
    }\n", "  let result = \"\";\n  let c_arr = c.split(\"\");\n  s.split(\"\").forEach(el\
    \ => {\n    if (!c_arr.includes(el)) {\n      result += el;\n    }\n  });\n  return\
    \ [result, isPalindrome(result)];\n}\n", "    const filtered: string = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    const isPalindrome: boolean = filtered ===\
    \ filtered.split('').reverse().join('');\n    return [filtered, isPalindrome];\n\
    }\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "    const charsToDelete\
    \ = new Set(c.split(''));\n    let result = '';\n    for (let char of s) {\n \
    \       if (!charsToDelete.has(char)) {\n            result += char;\n       \
    \ }\n    }\n    const isPalindrome = result === result.split('').reverse().join('');\n\
    \    return [result, isPalindrome];\n}", "    let deleted = \"\";\n    for (let\
    \ letter of s) {\n        if (!c.includes(letter)) {\n            deleted += letter;\n\
    \        }\n    }\n    return [deleted, check_palindrome(deleted)];\n}\n", " \
    \   const lettersToRemove = c.split('');\n    let newStr = s.split('').filter(letter\
    \ => !lettersToRemove.includes(letter)).join('');\n    return [newStr, isPalindrome(newStr)];\n\
    }\n", "  let result = '';\n  let cArray = c.split('');\n  let arr = s.split('');\n\
    \  arr.forEach(element => {\n    if(!cArray.includes(element)) {\n      result\
    \ += element;\n    }\n  });\n  return [result, isPalindrome(result)];\n}\n", " \
    \   let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n   \
    \     if (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n\
    \    return [result, isPalindrome(result)];\n}\n", "    const s_arr = s.split('');\n\
    \    const c_arr = c.split('');\n    for (let i = 0; i < s_arr.length; i++) {\n\
    \        for (let j = 0; j < c_arr.length; j++) {\n            if (s_arr[i] ===\
    \ c_arr[j]) {\n                s_arr.splice(i, 1);\n                i--;\n   \
    \             break;\n            }\n        }\n    }\n    let s_rev = s_arr.join('');\n\
    \    s_rev = s_rev.split('').reverse().join('');\n    return [s_arr.join(''),\
    \ s_arr.join('') === s_rev];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  const s_arr = s.split(\"\");\n  const c_arr = c.split(\"\
    \");\n  for (let i = 0; i < s_arr.length; i++) {\n    for (let j = 0; j < c_arr.length;\
    \ j++) {\n      if (s_arr[i] === c_arr[j]) {\n        s_arr.splice(i, 1);\n  \
    \      i--;\n      }\n    }\n  }\n  const result = s_arr.join(\"\");\n  const\
    \ reversed_result = s_arr.reverse().join(\"\");\n  return [result, result ===\
    \ reversed_result];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  const sArray = s.split('');\n    let [newString, isPalindrome] = [[], true];\n\
    \    sArray.forEach(char => {\n        if (c.indexOf(char) === -1) {\n       \
    \     newString.push(char);\n        }\n    });\n    for (let i = 0; i < newString.length\
    \ / 2; i++) {\n        if (newString[i] !== newString[newString.length - i - 1])\
    \ {\n            isPalindrome = false;\n        }\n    }\n    return [newString.join(''),\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let s2 = s.split('').filter(el => !c.includes(el)).join('');\n    let s3 =\
    \ s2.split('').reverse().join('');\n    return [s2, s2 === s3]\n}\n", "    for\
    \ (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i], 'g'),\
    \ '');\n    }\n    const result: boolean = s.split('').reverse().join('') ===\
    \ s;\n    return [s, result];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let sArr = s.split(\"\");\n  let cArr = c.split(\"\
    \");\n  let resStr = \"\";\n  for (let i = 0; i < sArr.length; i++) {\n    if\
    \ (!cArr.includes(sArr[i])) {\n      resStr += sArr[i];\n    }\n  }\n  let isPalindrome\
    \ = resStr === resStr.split(\"\").reverse().join(\"\");\n  return [resStr, isPalindrome];\n\
    }\n", "    return [s.split('').filter(char => !c.includes(char)).join(''), s.split('').filter(char\
    \ => !c.includes(char)).join('') === s.split('').filter(char => !c.includes(char)).reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  return [\n        s.split('').filter(x => !c.includes(x)).join(''),\n     \
    \   s.split('').filter(x => !c.includes(x)).join('') === s.split('').filter(x\
    \ => !c.includes(x)).reverse().join('')\n    ];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  const result: string[] = s.split(\"\");\n  for (let\
    \ char of c) {\n    result.splice(result.indexOf(char), 1);\n  }\n  let isPalindrome:\
    \ boolean = result.reverse().join(\"\") === result.join(\"\");\n  return [result.join(\"\
    \"), isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let arr: string[] = [];\n    let arr1: string[] = [];\n    for (let i: number\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   arr.push(s[i]);\n        }\n    }\n    for (let i: number = arr.length - 1;\
    \ i >= 0; i--) {\n        arr1.push(arr[i]);\n    }\n    if (arr.join('') ===\
    \ arr1.join('')) {\n        return [arr.join(''), true];\n    } else {\n     \
    \   return [arr.join(''), false];\n    }\n}\nconsole.log(reverse_delete(\"abcdedcba\"\
    , \"ab\"));\n", "    let result: string = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) {\n            result += s[i];\n    \
    \    }\n    }\n    return [result, isPalindrome(result)];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  for (let i = 0; i < c.length; i++) {\n    s = s.replace(new\
    \ RegExp(c[i], \"g\"), \"\");\n  }\n  let isPalindrome = true;\n  for (let i =\
    \ 0; i < s.length / 2; i++) {\n    if (s[i] !== s[s.length - 1 - i]) {\n     \
    \ isPalindrome = false;\n      break;\n    }\n  }\n  return [s, isPalindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  s\
    \ = s.split('').filter(e => !c.includes(e)).join('');\n  return [s, s === s.split('').reverse().join('')];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let arr = c.split('')\n    let sArr = s.split('')\n    let filtered = sArr.filter(letter\
    \ => {\n        return !arr.includes(letter)\n    })\n    let reversed = filtered.reverse()\n\
    \    let joined = filtered.join('')\n    let isPalindrome = joined === reversed.join('')\n\
    \    return [joined, isPalindrome]\n}\n\nconsole.log(reverse_delete(\"abcdedcba\"\
    , \"ab\"))\n", "    const result = s.split('').filter(char => !c.includes(char)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\")); // [\"bcd\", false]\nconsole.log(reverse_delete(\"abcdef\"\
    , \"b\")); // [\"acdef\", false]\nconsole.log(reverse_delete(\"abcdedcba\", \"\
    ab\")); // [\"cdedc\", true]", "    let sArr = s.split('');\n    let cArr = c.split('');\n\
    \    cArr.forEach(ele => {\n        sArr = sArr.filter(e => e !== ele);\n    });\n\
    \    let result = [sArr.join(''), isPalindrome(sArr.join(''))];\n    return result;\n\
    }\n", "  let answer: [string, boolean] = ['', false];\n  let result = '';\n  for\
    \ (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result\
    \ += s[i];\n    }\n  }\n  console.log(result);\n  let rev = '';\n  for (let i\
    \ = result.length - 1; i >= 0; i--) {\n    rev += result[i];\n  }\n  console.log(rev);\n\
    \  if (rev === result) {\n    answer[1] = true;\n  }\n  answer[0] = result;\n\
    \  return answer;\n}\nconsole.log(reverse_delete('abcdedcba', 'ab'));\n", "  \
    \  let result: string = \"\";\n    for (let i: number = 0; i < s.length; i++)\
    \ {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n    \
    \    }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ arr1 = s.split(\"\");\n  let arr2 = c.split(\"\");\n  for (let i = 0; i < arr1.length;\
    \ i++) {\n    if (arr2.includes(arr1[i])) {\n      arr1.splice(i, 1);\n      i--;\n\
    \    }\n  }\n  let str = arr1.join(\"\");\n  return [str, str === str.split(\"\
    \").reverse().join(\"\")];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let arr = s.split(\"\").filter(e => !c.includes(e)).join(\"\
    \");\n  let arr2 = arr.split(\"\").reverse().join(\"\");\n  return [arr, arr ===\
    \ arr2];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let res: string = '';\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (!c.includes(s[i])) {\n            res += s[i];\n        }\n    }\n    return\
    \ [res, palindrome_check(res)];\n}\n", "    return [s.split('').filter(x => !c.includes(x)).join(''),\n\
    \        s.split('').filter(x => !c.includes(x)).join('') === s.split('').filter(x\
    \ => !c.includes(x)).reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n", "  for (let i = 0; i < c.length; i++) {\n    s = s.replace(new\
    \ RegExp(c[i], \"g\"), \"\");\n  }\n  const result =\n    s.length > 0 ? s ===\
    \ s.split(\"\").reverse().join(\"\") : false;\n  return [s, result];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let answer = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (c.indexOf(s[i]) < 0) {\n      answer.push(s[i]);\n    }\n  }\n\
    \  answer = answer.join(\"\");\n  let strReverse = answer.split(\"\").reverse().join(\"\
    \");\n  return [answer, answer === strReverse];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    const result = [];\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) {\n            result.push(s[i]);\n \
    \       }\n    }\n    return [result.join(''), isPalindrome(result.join(''))];\n\
    }", "    let s_arr = s.split('')\n    let c_arr = c.split('')\n    let result\
    \ = []\n    for (let i = 0; i < s_arr.length; i++) {\n        if (!c_arr.includes(s_arr[i]))\
    \ {\n            result.push(s_arr[i])\n        }\n    }\n    let check = true\n\
    \    for (let i = 0; i < result.length; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            check = false\n        }\n    }\n    return [result.join(''),\
    \ check]\n}\n", "  let result = '';\n  let isPalindrome = true;\n  for (let i\
    \ = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n\
    \    }\n  }\n  for (let i = 0; i < result.length / 2; i++) {\n    if (result[i]\
    \ !== result[result.length - 1 - i]) {\n      isPalindrome = false;\n    }\n \
    \ }\n  return [result, isPalindrome];\n}\nconsole.log(reverse_delete('abcde',\
    \ 'ae'));\nconsole.log(reverse_delete('abcdef', 'b'));\nconsole.log(reverse_delete('abcdedcba',\
    \ 'ab'));", "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if\
    \ (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  let reversed = result.split('').reverse().join('');\n\
    \  return [result, result === reversed];\n}\n\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    return [c.split('').reduce((a,b) => a.replace(b,''),\
    \ s), palindrome(s)];\n}\n", "    let result = s;\n    for (let i = 0; i < c.length;\
    \ i++) {\n        let regex = new RegExp(c[i], \"g\");\n        result = result.replace(regex,\
    \ \"\");\n    }\n    return [result, result.split(\"\").reverse().join(\"\") ===\
    \ result];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ resultString = \"\";\n  let isPalindrome = false;\n  let charArr = s.split(\"\
    \");\n  let removeArr = c.split(\"\");\n  for (let i = 0; i < charArr.length;\
    \ i++) {\n    for (let j = 0; j < removeArr.length; j++) {\n      if (charArr[i]\
    \ === removeArr[j]) {\n        charArr.splice(i, 1);\n        i--;\n      }\n\
    \    }\n  }\n  resultString = charArr.join(\"\");\n  for (let i = 0; i < charArr.length;\
    \ i++) {\n    if (charArr[i] !== charArr[charArr.length - 1 - i]) {\n      isPalindrome\
    \ = false;\n      break;\n    } else {\n      isPalindrome = true;\n    }\n  }\n\
    \  return [resultString, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = '';\n    let check: boolean\
    \ = false;\n    let abc: string = s;\n    for (let i: number = 0; i < abc.length;\
    \ i++) {\n        for (let j: number = 0; j < c.length; j++) {\n            if\
    \ (abc[i] === c[j]) {\n                abc = abc.substring(0, i) + abc.substring(i\
    \ + 1);\n                i--;\n            }\n        }\n    }\n    for (let i:\
    \ number = 0; i < abc.length; i++) {\n        if (abc[i] !== abc[abc.length -\
    \ i - 1]) {\n            check = false;\n        } else {\n            check =\
    \ true;\n        }\n    }\n    return [abc, check];\n}\n", "  let newString =\
    \ s.split(\"\").filter(x => c.indexOf(x) == -1).join(\"\");\n  return [newString,\
    \ isPalindrome(newString)];\n}", "  let palindrome: string = '';\n  let newString:\
    \ string = '';\n  let result: [string, boolean] = ['', false];\n  for (let i:\
    \ number = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      newString\
    \ += s[i];\n    }\n  }\n  for (let i: number = newString.length - 1; i >= 0; i--)\
    \ {\n    palindrome += newString[i];\n  }\n  if (palindrome === newString) {\n\
    \    result = [newString, true];\n  } else {\n    result = [newString, false];\n\
    \  }\n  return result;\n}\nconsole.log(reverse_delete('abcde', 'ae'));\nconsole.log(reverse_delete('abcdef',\
    \ 'b'));\nconsole.log(reverse_delete('abcdedcba', 'ab'));", "    // Write your\
    \ code here\n    // Good luck :)\n    let sReplace = s.replace(new RegExp('['\
    \ + c + ']', 'g'), '');\n    return [sReplace, sReplace.split('').reverse().join('')\
    \ === sReplace];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\n", " \
    \   let res = s.split('').filter(a => c.indexOf(a) === -1).join('');\n    let\
    \ palindrome = res.split('').reverse().join('') === res;\n    return [res, palindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  const res = [];\n    for (let letter of s) {\n        if (!c.includes(letter))\
    \ {\n            res.push(letter);\n        }\n    }\n    return [res.join(''),\
    \ res.join('') === res.reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let stringArray = s.split('')\n    let removalArray\
    \ = c.split('')\n    for (let i = 0; i < stringArray.length; i++) {\n        for\
    \ (let j = 0; j < removalArray.length; j++) {\n            if (stringArray[i]\
    \ === removalArray[j]) {\n                stringArray.splice(i, 1)\n         \
    \       i--\n            }\n        }\n    }\n    let newString = stringArray.join('')\n\
    \    let returnArray = [newString, palindromeCheck(newString)]\n    return returnArray\n\
    }\n", "    let result: string = \"\";\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n\
    \    }\n    return [result, isPalindrome(result)];\n}\n", "    let temp = s.split('');\n\
    \    for (let i: number = 0; i < c.length; i++) {\n        temp = temp.filter(el\
    \ => el !== c[i]);\n    }\n    return [temp.join(''), temp.join('') === temp.reverse().join('')];\n\
    }\n", "  const result: string[] = [];\n  const charArray: string[] = c.split(\"\
    \");\n  for (let i = 0; i < s.length; i++) {\n    if (!charArray.includes(s[i]))\
    \ {\n      result.push(s[i]);\n    }\n  }\n  const isPalindrome =\n    result.join(\"\
    \") === result.reverse().join(\"\") ? true : false;\n  return [result.join(\"\"\
    ), isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let res: string = \"\";\n    for (let ch of s) {\n        if (c.indexOf(ch)\
    \ == -1) {\n            res += ch;\n        }\n    }\n    return [res, res ==\
    \ res.split(\"\").reverse().join(\"\")];\n}\n\n", "    return [s.split('').filter(i\
    \ => !c.includes(i)).join(''), s.split('').filter(i => !c.includes(i)).join('')\
    \ === s.split('').filter(i => !c.includes(i)).reverse().join('')];\n}\n", "  let\
    \ cList = c.split(\"\");\n  let sList = s.split(\"\");\n  let result = [];\n \
    \ let map = new Map();\n  let resultString = \"\";\n  let isPalindrome = false;\n\
    \  for (let i = 0; i < cList.length; i++) {\n    map.set(cList[i], \"\");\n  }\n\
    \  for (let i = 0; i < sList.length; i++) {\n    if (!map.has(sList[i])) {\n \
    \     result.push(sList[i]);\n    }\n  }\n  resultString = result.join(\"\");\n\
    \  if (\n    resultString ===\n    resultString\n      .split(\"\")\n      .reverse()\n\
    \      .join(\"\")\n  ) {\n    isPalindrome = true;\n  }\n  return [resultString,\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\n",
  "    let result = s.split('');\n    for (let i = 0; i < result.length; i++) {\n\
    \        if (c.indexOf(result[i]) !== -1) {\n            result.splice(i, 1);\n\
    \            i--;\n        }\n    }\n    let resultString = result.join('');\n\
    \    let resultReverse = result.reverse().join('');\n    return [resultString,\
    \ resultString === resultReverse];\n}\n\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let newString = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) {\n            newString += s[i];\n \
    \       }\n    }\n    return [newString, palindrome(newString)];\n}\n", "  s =\
    \ s.split('').filter(value => !c.includes(value)).join('');\n  return [s, s ===\
    \ s.split('').reverse().join('')];\n}\n", "  let buffer = s;\n  c.split(\"\").forEach(char\
    \ => {\n    buffer = buffer.replace(new RegExp(char, \"g\"), \"\");\n  });\n \
    \ return [buffer, buffer === buffer.split(\"\").reverse().join(\"\")];\n}\n",
  "    let resultStr = s;\n    for (let i = 0; i < c.length; i++) {\n        resultStr\
    \ = resultStr.replace(new RegExp(c[i], 'g'), '');\n    }\n    const reverse =\
    \ (resultStr.split('').reverse().join(''));\n    return [resultStr, reverse ===\
    \ resultStr];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = '';\n    for (let i = 0; i < s.length; i++) {\n        let temp\
    \ = c.split('');\n        if (temp.indexOf(s[i]) == -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result.split('').reverse().join('')\
    \ == result];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  return [s.split('').filter(x => !c.includes(x)).join(''), s.split('').filter(x\
    \ => !c.includes(x)).join('') === s.split('').filter(x => !c.includes(x)).reverse().join('')];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  const s_chars = s.split('');\n    const c_chars = c.split('');\n    const res\
    \ = s_chars.filter(x => !c_chars.includes(x));\n    const to_return = [res.join(''),\
    \ res.join('') === res.reverse().join('')];\n    return to_return;\n}\n\n", " \
    \   let removed = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [removed, isPalindrome(removed)];\n}\n", "    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let new_s: string = \"\"\n    for (let i: number = 0; i < s.length; i++)\
    \ {\n        if (c.indexOf(s[i]) === -1) {\n            new_s += s[i]\n      \
    \  }\n    }\n    let new_new_s: string = \"\"\n    for (let i: number = new_s.length\
    \ - 1; i >= 0; i--) {\n        new_new_s += new_s[i]\n    }\n    if (new_s ===\
    \ new_new_s) {\n        return [new_s, true]\n    } else {\n        return [new_s,\
    \ false]\n    }\n}\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"))\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"))\nconsole.log(reverse_delete(\"abcdef\", \"b\"))\n", "    return\
    \ [c,false];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "   \
    \ let newStr = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            newStr += s[i];\n        }\n    }\n    if (newStr.split(\"\"\
    ).reverse().join(\"\") === newStr) {\n        return [newStr, true];\n    } else\
    \ {\n        return [newStr, false];\n    }\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    // Write your code here\n    // Good luck!\n}\n\
    console.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\n", " \
    \   let result: string = \"\";\n    let arr: string[] = c.split(\"\");\n    for\
    \ (let i: number = 0; i < s.length; i++) {\n        if (arr.indexOf(s[i]) ===\
    \ -1) {\n            result += s[i];\n        }\n    }\n    let isPalindrome:\
    \ boolean = true;\n    for (let i: number = 0; i < result.length / 2; i++) {\n\
    \        if (result[i] !== result[result.length - 1 - i]) {\n            isPalindrome\
    \ = false;\n        }\n    }\n    return [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let result = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] !== c[j]) {\n\
    \        result.push(s[i]);\n      }\n    }\n  }\n  let newResult = result.join(\"\
    \");\n  let newResultReverse = newResult.split(\"\").reverse().join(\"\");\n \
    \ if (newResult === newResultReverse) {\n    return [newResult, true];\n  } else\
    \ {\n    return [newResult, false];\n  }\n}\n", "    let result: string = \"\"\
    ;\n    for (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            result += s[i];\n        }\n    }\n    let check: boolean\
    \ = true;\n    for (let i: number = 0; i < result.length / 2; i++) {\n       \
    \ if (result[i] !== result[result.length - 1 - i]) {\n            check = false;\n\
    \        }\n    }\n    return [result, check];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n", "    return [s.split('').filter(x => !c.includes(x)).join(''),\
    \ s.split('').filter(x => !c.includes(x)).join('') === s.split('').filter(x =>\
    \ !c.includes(x)).reverse().join('')];\n}\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    const characters: string[] = s.split('');\n    const\
    \ charToDelete: string[] = c.split('');\n    const newCharacters: string[] = [];\n\
    \    characters.forEach(character => {\n        let toDelete: boolean = false;\n\
    \        charToDelete.forEach(char => {\n            if (character === char) {\n\
    \                toDelete = true;\n            }\n        });\n        if (!toDelete)\
    \ {\n            newCharacters.push(character);\n        }\n    });\n    return\
    \ [newCharacters.join(''), newCharacters.join('') === newCharacters.reverse().join('')];\n\
    }\n", "    // TODO\n    throw new Error(\"Method not implemented.\");\n}\n", " \
    \   const charsToDelete = c.split('');\n    let result = s.split('').filter(char\
    \ => !charsToDelete.includes(char)).join('');\n    return [result, isPalindrome(result)];\n\
    }\n", "    const result = s.split('').filter(letter => !c.includes(letter)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    const array: string[] = c.split('');\n    let string:\
    \ string = s;\n    array.forEach(e => {\n        string = string.replace(e, '');\n\
    \    });\n    return [string, string === string.split('').reverse().join('')];\n\
    }\n", "    let del: string = \"\";\n    s.split(\"\").forEach(function (e) {\n\
    \        if (c.indexOf(e) == -1) {\n            del += e;\n        }\n    });\n\
    \    let pal: boolean = true;\n    del.split(\"\").forEach(function (e, i) {\n\
    \        if (e != del[del.length - i - 1]) {\n            pal = false;\n     \
    \   }\n    });\n    return [del, pal];\n}\n", "    // Write your code here\n \
    \   // Good luck!\n    s = s.split('').filter(i => !c.includes(i)).join('');\n\
    \    return [s, isPalindrome(s)];\n}\n", "    let res = s.split('');\n    let\
    \ check = new Set(c.split(''));\n    res = res.filter(el => !check.has(el));\n\
    \    let isPalindrome = res.join('') === res.reverse().join('');\n    return [res.join(''),\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  for\
    \ (let i = 0; i < c.length; i++) {\n    s = s.replace(new RegExp(c[i], \"g\"),\
    \ \"\");\n  }\n  return [s, s === s.split(\"\").reverse().join(\"\")];\n}\n\n\
    export default reverse_delete;", "    for (let ch of c) {\n        s = s.replace(new\
    \ RegExp(ch, 'g'), '');\n    }\n    let isPalindrome = true;\n    for (let i =\
    \ 0; i < s.length / 2; i++) {\n        if (s[i] !== s[s.length - 1 - i]) {\n \
    \           isPalindrome = false;\n            break;\n        }\n    }\n    return\
    \ [s, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n", "  let str = '';\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (!c.includes(s[i])) {\n      str += s[i];\n    }\n  }\n  return\
    \ [str, str === str.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete('abcdedcba',\
    \ 'ab'));\n", "    let result = \"\";\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (!c.includes(s[i])) {\n            result += s[i];\n        }\n\
    \    }\n    return [result, result === result.split(\"\").reverse().join(\"\"\
    )];\n}\n", "    let result = s.split('');\n    for (let i = 0; i < c.length; i++)\
    \ {\n        result = result.filter(x => x !== c[i]);\n    }\n    let isPalindrome\
    \ = result.join('') === result.reverse().join('');\n    return [result.join(''),\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));", "    return\
    \ [s.split('').filter(char => !c.includes(char)).join(''), s.split('').filter(char\
    \ => !c.includes(char)).join('') === s.split('').filter(char => !c.includes(char)).reverse().join('')];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let sChars = s.split('');\n    let cChars = c.split('');\n    let filteredChars\
    \ = sChars.filter(x => !cChars.includes(x));\n    let result = filteredChars.join('');\n\
    \    return [result, palindrome(result)];\n}\n\nexport { reverse_delete }", " \
    \   let res: [string, boolean] = [s, true];\n    for (let i: number = 0; i < s.length;\
    \ i++) {\n        for (let j: number = 0; j < c.length; j++) {\n            if\
    \ (s[i] === c[j]) {\n                res[0] = res[0].slice(0, i) + res[0].slice(i\
    \ + 1);\n                i--;\n                break;\n            }\n       \
    \ }\n    }\n    for (let i: number = 0; i < res[0].length / 2; i++) {\n      \
    \  if (res[0][i] !== res[0][res[0].length - 1 - i]) {\n            res[1] = false;\n\
    \            break;\n        }\n    }\n    return res;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  const result: string[] = [];\n  for (let i = 0; i\
    \ < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result.push(s[i]);\n\
    \    }\n  }\n  const resultString = result.join(\"\");\n  const resultBool = checkPalindrome(resultString);\n\
    \  return [resultString, resultBool];\n}\n", "  let keepLetters = s.split(\"\"\
    ).filter(x => c.indexOf(x) === -1);\n  let isPalindrome = keepLetters.join(\"\"\
    ) === keepLetters.reverse().join(\"\");\n  return [keepLetters.join(\"\"), isPalindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let r: [string, boolean] = [\"\", false];\n    let n = s.length;\n    let p:\
    \ string[] = [];\n    for (let i = 0; i < n; i++) {\n        let found = false;\n\
    \        for (let j = 0; j < c.length; j++) {\n            if (s[i] == c[j]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            p.push(s[i]);\n        }\n    }\n   \
    \ let q = p.join(\"\");\n    r[0] = q;\n    if (q == q.split(\"\").reverse().join(\"\
    \")) {\n        r[1] = true;\n    }\n    return r;\n}\n\nlet s = \"abcde\";\n\
    let c = \"ae\";\nconsole.log(reverse_delete(s, c));\ns = \"abcdef\";\nc = \"b\"\
    ;\nconsole.log(reverse_delete(s, c));\ns = \"abcdedcba\";\nc = \"ab\";\nconsole.log(reverse_delete(s,\
    \ c));", "  const sArr = s.split(\"\");\n  const cArr = c.split(\"\");\n  sArr.forEach((elem,\
    \ i) => {\n    cArr.forEach((el) => {\n      if (elem === el) {\n        sArr.splice(i,\
    \ 1);\n      }\n    });\n  });\n  const str: string = sArr.join(\"\");\n  const\
    \ rev: string = sArr.reverse().join(\"\");\n  const bool: boolean = str === rev;\n\
    \  return [str, bool];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  for (let char of c) {\n        s = s.replace(char, \"\");\n    }\n    return\
    \ [s, s === s.split(\"\").reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let new_s = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) {\n            new_s += s[i];\n     \
    \   }\n    }\n    console.log(new_s);\n    let reversed_s = new_s.split(\"\").reverse().join(\"\
    \");\n    console.log(reversed_s);\n    if (new_s === reversed_s) {\n        return\
    \ [new_s, true];\n    } else {\n        return [new_s, false];\n    }\n}\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n", "    let res = \"\";\n    let flag = true;\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) == -1) {\n   \
    \         res += s[i];\n        }\n    }\n    for (let i = 0; i < res.length /\
    \ 2; i++) {\n        if (res[i] != res[res.length - 1 - i]) {\n            flag\
    \ = false;\n        }\n    }\n    return [res, flag];\n}\n", "  return [s.split('').filter(i\
    \ => !c.includes(i)).join(''), false];\n}\n", "    return [s.split('').filter(el\
    \ => !c.includes(el)).join(''), s.split('').filter(el => !c.includes(el)).join('')\
    \ === s.split('').filter(el => !c.includes(el)).reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(letter => !c.includes(letter)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n", "  let res: string = \"\";\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      res += s[i];\n   \
    \ }\n  }\n  return [res, isPalindrome(res)];\n}\n", "    const result = s.split('').filter(ch\
    \ => !c.includes(ch)).join('');\n    const isPalindrome = result === result.split('').reverse().join('');\n\
    \    return [result, isPalindrome];\n}", "    let finalStr = '';\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            finalStr\
    \ += s[i];\n        }\n    }\n    let reversedStr = finalStr.split('').reverse().join('');\n\
    \    return [finalStr, finalStr === reversedStr]\n}\n\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n", "    let r: [string, boolean] = [\"\", false];\n  \
    \  r[0] = s.split(\"\").filter(v => !c.includes(v)).join(\"\");\n    r[1] = r[0]\
    \ === r[0].split(\"\").reverse().join(\"\");\n    return r;\n}\n", "    let result:\
    \ string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            result += s[i];\n        }\n    }\n    return [result, result\
    \ === result.split(\"\").reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    // \u5220\u9664\u5B57\u7B26\u4E32s\u4E2D\u51FA\u73B0\
    \u7684c\u4E2D\u4EFB\u610F\u5B57\u7B26\n    let sArr = s.split('')\n    for (let\
    \ i = 0; i < sArr.length; i++) {\n        if (c.indexOf(sArr[i]) !== -1) {\n \
    \           sArr.splice(i, 1)\n            i--\n        }\n    }\n    // sArr\u4E2D\
    \u53EA\u6709\u4E00\u4E2A\u5B57\u7B26\u65F6\u80AF\u5B9A\u662F\u56DE\u6587\n   \
    \ if (sArr.length === 1) {\n        return [sArr.join(''), true]\n    }\n    //\
    \ \u5224\u65AD\u662F\u5426\u662F\u56DE\u6587\n    for (let i = 0; i < sArr.length\
    \ / 2; i++) {\n        if (sArr[i] !== sArr[sArr.length - 1 - i]) {\n        \
    \    return [sArr.join(''), false]\n        }\n    }\n    return [sArr.join(''),\
    \ true]\n}\n", "  let sSet = new Set(s);\n  let cSet = new Set(c);\n  let intersection\
    \ = new Set([...sSet].filter(x => cSet.has(x)));\n  return [\n    s\n      .split(\"\
    \")\n      .filter(x => !intersection.has(x))\n      .join(\"\"),\n    isPalindrome(\n\
    \      s\n        .split(\"\")\n        .filter(x => !intersection.has(x))\n \
    \       .join(\"\")\n    )\n  ];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"\
    ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  return [s.split('').filter(value => !c.includes(value)).join(''),\
    \ true];\n}\n", "    let _s = s.split('');\n    let _c = c.split('');\n    let\
    \ _sc = {};\n    for (let _c_ of _c) {\n        _sc[_c_] = true;\n    }\n    for\
    \ (let i = 0; i < _s.length; i++) {\n        if (_sc[_s[i]]) {\n            _s.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    let s_rev = '';\n    for (let i\
    \ = _s.length - 1; i >= 0; i--) {\n        s_rev += _s[i];\n    }\n    return\
    \ [_s.join(''), s_rev === _s.join('')];\n}\n", "    let x = s.split('').filter(i\
    \ => !c.includes(i)).join('');\n    let y = x.split('').reverse().join('');\n\
    \    return x === y ? [x, true] : [x, false];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let char of\
    \ s) {\n        if (!c.includes(char)) {\n            result += char;\n      \
    \  }\n    }\n    let isPalindrome: boolean = result.split(\"\").reverse().join(\"\
    \") === result;\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    return [s.split('').filter(x => !c.includes(x)).join(''),\
    \ palindrome(s.split('').filter(x => !c.includes(x)).join(''))];\n}\n", "    for\
    \ (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i], 'g'),\
    \ '');\n    }\n    let checkPalindrome = s === s.split('').reverse().join('');\n\
    \    return [s, checkPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"\
    ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    const palindrome = s.split('').filter(char => !c.includes(char)).join('');\n\
    \    return [palindrome, palindrome === palindrome.split('').reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ result: string = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result += s[i];\n    }\n  }\n  return [result, checkPalindrome(result)];\n\
    }\n", "    return [s.split('').filter(x => !c.includes(x)).join(''), false];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let r = '';\n    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            r += s[i];\n        }\n    }\n    return [r, r === r.split('').reverse().join('')];\n\
    }", "  let arr: string[] = s.split(\"\");\n  for (let i = 0; i < c.length; i++)\
    \ {\n    for (let j = 0; j < arr.length; j++) {\n      if (c[i] === arr[j]) {\n\
    \        arr.splice(j, 1);\n        j -= 1;\n      }\n    }\n  }\n  let reverse:\
    \ string = arr.reverse().join(\"\");\n  let output: [string, boolean] = [arr.join(\"\
    \"), s == reverse];\n  return output;\n}\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  return [s.split('').filter(v => !c.includes(v)).join(''),\
    \ reverse_delete_check(s.split('').filter(v => !c.includes(v)).join(''))];\n}\n",
  "    let res: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n       \
    \ if (!c.includes(s[i])) {\n            res += s[i];\n        }\n    }\n    return\
    \ [res, palindrome(res)];\n}\n", "    const reverseS = s.split('').reverse().join('');\n\
    \    const reverseC = c.split('').reverse().join('');\n    const result = reverseS.replace(new\
    \ RegExp(`[${reverseC}]`, 'g'), '');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = \"\";\n    let chars = s.split(\"\");\n    let checkChars = c.split(\"\
    \");\n    chars.forEach(element => {\n        if (!checkChars.includes(element))\
    \ {\n            result += element;\n        }\n    });\n    return [result, result\
    \ == reverse(result)];\n}\n", "    return [s.split('').filter(x => !c.includes(x)).join(''),\
    \ isPalindrome(s.split('').filter(x => !c.includes(x)).join(''))];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    const newArr = s.split('');\n    const cArr = c.split('');\n\
    \    let finalStr = '';\n    let palindrome = false;\n    for (let i = 0; i <\
    \ newArr.length; i++) {\n        let char = newArr[i];\n        if (!cArr.includes(char))\
    \ {\n            finalStr += char;\n        }\n    }\n    let reversedStr = finalStr.split('').reverse().join('');\n\
    \    if (finalStr === reversedStr) {\n        palindrome = true;\n    }\n    return\
    \ [finalStr, palindrome];\n}\n", "    let newStr = \"\";\n    for (let x = 0;\
    \ x < s.length; x++) {\n        if (!c.includes(s[x])) {\n            newStr +=\
    \ s[x];\n        }\n    }\n    let isPalindrome = false;\n    if (newStr === newStr.split(\"\
    \").reverse().join(\"\")) {\n        isPalindrome = true;\n    }\n    return [newStr,\
    \ isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ result = s.split('').filter(function(char) {\n    return !c.includes(char);\n\
    \  }).join('');\n  let check = checkPalindrome(result);\n  return [result, check];\n\
    }\n", "    const target: string[] = c.split('');\n    const result: string[] =\
    \ s.split('').filter(c => !target.includes(c));\n    const resultString: string\
    \ = result.join('');\n    const isPalindrome: boolean = resultString === resultString.split('').reverse().join('');\n\
    \    return [resultString, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let newString = s;\n  for (let i = 0; i < c.length;\
    \ i++) {\n    newString = newString.replace(new RegExp(c[i], \"g\"), \"\");\n\
    \  }\n  return [newString, newString.split(\"\").reverse().join(\"\") === newString];\n\
    }\n", "    let result = \"\";\n    let isPalindrome = true;\n    const cArr =\
    \ c.split(\"\");\n    for (let i = 0; i < s.length; i++) {\n        if (!cArr.includes(s[i]))\
    \ {\n            result += s[i];\n        }\n    }\n    if (result != result.split(\"\
    \").reverse().join(\"\")) {\n        isPalindrome = false;\n    }\n    return\
    \ [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let str = \"\";\n    let res = false;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) == -1) {\n        \
    \    str += s[i];\n        }\n    }\n    if (str.split(\"\").reverse().join(\"\
    \") == str) {\n        res = true;\n    }\n    return [str, res];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let arr: [string, boolean] = [\"\", false];\n  \
    \  for (let i = 0; i < s.length; i++) {\n        for (let j = 0; j < c.length;\
    \ j++) {\n            if (s[i] !== c[j]) {\n                arr[0] += s[i];\n\
    \            }\n        }\n    }\n    arr[1] = arr[0] === arr[0].split(\"\").reverse().join(\"\
    \");\n    return arr;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    return [\n        s.split('').filter(l => !c.includes(l)).join(''),\n\
    \        s.split('').filter(l => !c.includes(l)).join('') === s.split('').filter(l\
    \ => !c.includes(l)).reverse().join('')\n    ];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = '';\n    for (let char of s) {\n  \
    \      if (!c.includes(char)) {\n            result += char;\n        }\n    }\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let sSet = new Set(s);\n    let cSet = new Set(c);\n\
    \    let cSet2 = new Set(c);\n    let tmpStr: string[] = [];\n    let resultStr:\
    \ string = \"\";\n    for (let c1 of cSet) {\n        sSet.delete(c1);\n    }\n\
    \    sSet.forEach(function (value) {\n        tmpStr.push(value);\n    });\n \
    \   resultStr = tmpStr.join(\"\");\n    let tmpStr2: string[] = [];\n    for (let\
    \ c2 of cSet2) {\n        tmpStr2.push(c2);\n    }\n    if (tmpStr2.length ==\
    \ 0) {\n        return [resultStr, false];\n    }\n    else {\n        return\
    \ [resultStr, true];\n    }\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let resultStr = \"\";\n    let resultBool = false;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) < 0) {\n\
    \            resultStr += s[i];\n        }\n    }\n    if (resultStr.split(\"\"\
    ).reverse().join(\"\") === resultStr) {\n        resultBool = true;\n    }\n \
    \   return [resultStr, resultBool];\n}\n\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let count: number = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] === c[j]) {\n\
    \        s = s.slice(0, i) + s.slice(i + 1);\n        count = count + 1;\n   \
    \   }\n    }\n  }\n  return [s, count > 0];\n}\n\nexport default reverse_delete;",
  "  const regex = new RegExp(`[${c}]`, \"g\");\n  const result = s.replace(regex,\
    \ \"\");\n  const check = [...result]\n    .reverse()\n    .join(\"\") === result;\n\
    \  return [result, check];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) result += s[i];\n    }\n    return [result,\
    \ check_palindrome(result)];\n}", "  return [\n    s\n      .split(\"\")\n   \
    \   .filter((ch) => !c.includes(ch))\n      .join(\"\"),\n    s\n      .split(\"\
    \")\n      .filter((ch) => !c.includes(ch))\n      .join(\"\")\n      .split(\"\
    \")\n      .reverse()\n      .join(\"\") ===\n      s\n        .split(\"\")\n\
    \        .filter((ch) => !c.includes(ch))\n        .join(\"\"),\n  ];\n}\n", " \
    \ let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n\
    }\nconsole.log(reverse_delete('abcde', 'ae'));\nconsole.log(reverse_delete('abcdef',\
    \ 'b'));\nconsole.log(reverse_delete('abcdedcba', 'ab'));", "  return [\n    s\n\
    \      .split(\"\")\n      .filter((elem) => !c.includes(elem))\n      .join(\"\
    \"),\n    s\n      .split(\"\")\n      .filter((elem) => !c.includes(elem))\n\
    \      .join(\"\")\n      .split(\"\")\n      .reverse()\n      .join(\"\") ===\n\
    \      s\n        .split(\"\")\n        .filter((elem) => !c.includes(elem))\n\
    \        .join(\"\"),\n  ];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"\
    ab\"));\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));", "  let result: string = \"\";\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  const\
    \ isPalindrome = (str: string) => {\n    return str === str.split(\"\").reverse().join(\"\
    \");\n  };\n  return [result, isPalindrome(result)];\n}\n", "  let result = \"\
    \";\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n  \
    \    result += s[i];\n    }\n  }\n  let isPalindrome = result === result.split(\"\
    \").reverse().join(\"\");\n  return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  //TODO: Remove the characters from s that are present\
    \ in c\n  //TODO: Check if the remainder of s is a palindrome\n\n  return [s,\
    \ s === s.split('').reverse().join('')];\n}\n", "    let m = s.split('').filter(x\
    \ => !c.includes(x));\n    let b = m.join('');\n    let y = m.reverse().join('');\n\
    \    if (b == y) return [b, true];\n    else return [b, false];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    return [removeLetters(s, c), isPalindrome(removeLetters(s,\
    \ c))];\n}\n", "  const result = s.split('').filter(char => !c.includes(char)).join('');\n\
    \  const reversed = result.split('').reverse().join('');\n  return [result, result\
    \ === reversed];\n}\n", "    const contains: boolean = c.split('').every(el =>\
    \ s.indexOf(el) !== -1);\n    if (contains) {\n        return [s.split('').filter(el\
    \ => c.indexOf(el) === -1).join(''), true];\n    } else {\n        return [s,\
    \ false];\n    }\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let count: number = 0;\n    let t: string = '';\n    let t1: string = '';\n\
    \    let result: boolean = false;\n    for (let i: number = 0; i < s.length; i++)\
    \ {\n        t = s.substr(i, 1);\n        if (c.includes(t)) {\n            count++;\n\
    \        } else {\n            t1 += t;\n        }\n    }\n    for (let i: number\
    \ = 0; i < t1.length; i++) {\n        if (t1.substr(i, 1) === t1.substr(t1.length\
    \ - i - 1, 1)) {\n            result = true;\n        } else {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return [t1, result];\n}\n",
  "  let first = \"\";\n  let second = \"\";\n  for (let i = 0; i < s.length; i++)\
    \ {\n    if (c.indexOf(s[i]) === -1) {\n      first += s[i];\n    }\n  }\n  for\
    \ (let j = first.length - 1; j >= 0; j--) {\n    second += first[j];\n  }\n  return\
    \ [first, first === second];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let res: string = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) res += s[i];\n    }\n    return [res,\
    \ res === res.split('').reverse().join('')];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let chs:string = \"\";\n  for (let i=0; i<s.length;\
    \ i++) {\n    if (c.indexOf(s[i]) < 0) chs += s[i];\n  }\n  return [chs, chs.split(\"\
    \").reverse().join(\"\") == chs];\n}", "    let filterString = s.split('').filter(value\
    \ => !c.includes(value)).join('');\n    return [filterString, filterString ===\
    \ filterString.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let sArr = s.split(\"\");\n  let cArr = c.split(\"\
    \");\n  let result = [];\n  for (let i = 0; i < sArr.length; i++) {\n    let isTrue\
    \ = true;\n    for (let j = 0; j < cArr.length; j++) {\n      if (sArr[i] ===\
    \ cArr[j]) {\n        isTrue = false;\n      }\n    }\n    if (isTrue) {\n   \
    \   result.push(sArr[i]);\n    }\n  }\n  return [result.join(\"\"), palindromeCheck(result)];\n\
    }\n", "    return [s.split('').filter(x => !c.includes(x)).join(''),\n       \
    \     s.split('').filter(x => !c.includes(x)).join('') == s.split('').filter(x\
    \ => !c.includes(x)).reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let res: string = \"\";\n    let pal: boolean =\
    \ true;\n    for (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            res += s[i];\n        }\n    }\n    let len: number =\
    \ res.length;\n    for (let i: number = 0; i < len / 2; i++) {\n        if (res[i]\
    \ !== res[len - i - 1]) {\n            pal = false;\n        }\n    }\n    return\
    \ [res, pal];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  const\
    \ s_split = s.split(\"\");\n  const c_split = c.split(\"\");\n  const removed\
    \ = s_split.filter(str => !c_split.includes(str));\n  const reversed = removed.reverse();\n\
    \  const joined = removed.join(\"\");\n  return [joined, removed.join(\"\") ===\
    \ reversed.join(\"\")];\n}\n", "    let result = '';\n    const palindrome: boolean\
    \ = c.split('').forEach(letter => {\n        result = s.replace(letter, '');\n\
    \    });\n    return [result, result === reverse(result)];\n}\n", "    const arrS\
    \ = s.split('');\n    const arrC = c.split('');\n    const resArr: string[] =\
    \ [];\n    for (let i = 0; i < arrS.length; i++) {\n        if (!arrC.includes(arrS[i]))\
    \ {\n            resArr.push(arrS[i]);\n        }\n    }\n    return [resArr.join(''),\
    \ resArr.reverse().join('') === resArr.join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let sArr = s.split('');\n    let cArr = c.split('');\n\
    \    let result = [];\n    for (let i = 0; i < sArr.length; i++) {\n        if\
    \ (!cArr.includes(sArr[i])) {\n            result.push(sArr[i]);\n        }\n\
    \    }\n    if (result.join('') === result.reverse().join('')) {\n        return\
    \ [result.join(''), true];\n    } else {\n        return [result.join(''), false];\n\
    \    }\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));", "    const\
    \ newStr: string = s.split('').filter(value => c.indexOf(value) === -1).join('');\n\
    \    let isPali: boolean = true;\n    for (let i = 0; i < newStr.length / 2; i++)\
    \ {\n        if (newStr[i] !== newStr[newStr.length - 1 - i]) {\n            isPali\
    \ = false;\n            break;\n        }\n    }\n    return [newStr, isPali];\n\
    }\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\n", "  return [\n   \
    \ s\n      .split(\"\")\n      .filter((ch) => !c.includes(ch))\n      .join(\"\
    \"),\n    s\n      .split(\"\")\n      .filter((ch) => !c.includes(ch))\n    \
    \  .join(\"\")\n      .split(\"\")\n      .reverse()\n      .join(\"\") ===\n\
    \      s\n        .split(\"\")\n        .filter((ch) => !c.includes(ch))\n   \
    \     .join(\"\"),\n  ];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s;\n    let letters = c.split('');\n\
    \    letters.forEach(letter => {\n        let regex = new RegExp(letter, 'g');\n\
    \        result = result.replace(regex, '');\n    });\n    return [result, result\
    \ === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result_s = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])) {\n            result_s += s[i];\n  \
    \      }\n    }\n    return [result_s, is_palindrome(result_s)];\n}\n", "  let\
    \ result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result.push(s[i]);\n    }\n  }\n  return [result.join(\"\"), result.join(\"\
    \") === result.reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\"\
    , \"ab\"));\n", "    let result = s.split('');\n    let mapper = c.split('');\n\
    \    for (let i = 0; i < result.length; i++) {\n        if (mapper.includes(result[i]))\
    \ {\n            result.splice(i, 1);\n            i--;\n        }\n    }\n  \
    \  return [result.join(''), result.join('') === result.reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcde\", \"ae\"));", "  let result:\
    \ string = \"\";\n  for (let i: number = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result += s[i];\n    }\n  }\n  let check: boolean = true;\n  for (let\
    \ i: number = 0; i < result.length / 2; i++) {\n    if (result[i] !== result[result.length\
    \ - 1 - i]) {\n      check = false;\n    }\n  }\n  return [result, check];\n}\n\
    console.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let\
    \ result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result += s[i];\n    }\n  }\n  let isPalindrome = false;\n  if (result.length\
    \ === 1) {\n    isPalindrome = true;\n  } else {\n    isPalindrome = result ===\
    \ result.split(\"\").reverse().join(\"\");\n  }\n  return [result, isPalindrome];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  return [s.split('').filter(letter => !c.includes(letter)).join(''), false];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            result += s[i];\n        }\n    }\n    return [result, result\
    \ === result.split(\"\").reverse().join(\"\")];\n}\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  const result: string[] = [];\n  for (let i = 0; i\
    \ < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result.push(s[i]);\n\
    \    }\n  }\n  return [result.join(\"\"), result.join(\"\") === result.reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  let sArray\
    \ = s.split(\"\");\n  let cArray = c.split(\"\");\n  let startIndex = 0;\n  let\
    \ lastIndex = sArray.length - 1;\n  let result = false;\n  while (startIndex <\
    \ lastIndex) {\n    if (cArray.includes(sArray[startIndex])) {\n      sArray.splice(startIndex,\
    \ 1);\n    } else {\n      startIndex++;\n    }\n    if (cArray.includes(sArray[lastIndex]))\
    \ {\n      sArray.splice(lastIndex, 1);\n    } else {\n      lastIndex--;\n  \
    \  }\n  }\n  if (startIndex === lastIndex) {\n    if (cArray.includes(sArray[startIndex]))\
    \ {\n      sArray.splice(startIndex, 1);\n    }\n  }\n  if (sArray.join(\"\")\
    \ === sArray.reverse().join(\"\")) {\n    result = true;\n  }\n  return [sArray.join(\"\
    \"), result];\n}\n\nlet answer = reverse_delete(\"abcdedcba\", \"ab\");\nconsole.log(answer);",
  "    // Your code here\n    let set = new Set(c);\n    let res = '';\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (!set.has(s[i])) {\n            res\
    \ += s[i];\n        }\n    }\n    return [res, isPalindrome(res)];\n}\n", "  \
    \  let newStr = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            newStr += s[i];\n        }\n    }\n    return [newStr, isPalindrome(newStr)];\n\
    }", "  var deleted = [];\n  var sArray = s.split(\"\");\n  var cArray = c.split(\"\
    \");\n  var cSet = new Set(cArray);\n  for (var i = 0; i < sArray.length; i++)\
    \ {\n    if (!cSet.has(sArray[i])) {\n      deleted.push(sArray[i]);\n    }\n\
    \  }\n  if (deleted.join(\"\") === deleted.reverse().join(\"\")) {\n    return\
    \ [deleted.join(\"\"), true];\n  } else {\n    return [deleted.join(\"\"), false];\n\
    \  }\n}\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "    const words\
    \ = s.split('').filter(letter => !c.includes(letter));\n    const final = words.join('');\n\
    \    const result = words.reverse().join('');\n    return [final, result === final];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  return s.split('').filter(e => !c.includes(e)).reverse().join('') == s ? [s.split('').filter(e\
    \ => !c.includes(e)).reverse().join(''), true] : [s.split('').filter(e => !c.includes(e)).reverse().join(''),\
    \ false];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  const isPalindrome = str => str === str.split('').reverse().join('');\n   \
    \ let newStr = '';\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            newStr += s[i];\n        }\n    }\n    return [newStr, isPalindrome(newStr)];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let res_str = \"\";\n    let res_bool = false;\n    let tmp = \"\";\n    let\
    \ arr = c.split(\"\");\n    for (let i = 0; i < s.length; i++) {\n        if (arr.indexOf(s[i])\
    \ == -1) {\n            res_str += s[i];\n        }\n    }\n    for (let i = res_str.length\
    \ - 1; i >= 0; i--) {\n        tmp += res_str[i];\n    }\n    if (tmp == res_str)\
    \ {\n        res_bool = true;\n    }\n    return [res_str, res_bool];\n}\n", " \
    \ let sChars = s.split(\"\");\n  let cChars = c.split(\"\");\n  let filterdChars\
    \ = sChars.filter(function(char) {\n    return !cChars.includes(char);\n  });\n\
    \  let joinChars = filterdChars.join(\"\");\n  let reverseChars = joinChars.split(\"\
    \").reverse().join(\"\");\n  let check = false;\n  if (joinChars === reverseChars)\
    \ {\n    check = true;\n  }\n  return [joinChars, check];\n}\n", "    let result\
    \ = s.split('');\n    for (let i = 0; i < result.length; i++) {\n        if (c.includes(result[i]))\
    \ {\n            result.splice(i, 1);\n            i--;\n        }\n    }\n  \
    \  return [result.join(''), isPalindrome(result.join(''))];\n}\n", "    let deletions\
    \ = s.split('').filter(v => !c.includes(v));\n    let is_palindrome = deletions.slice().reverse().join('')\
    \ === deletions.join('');\n    return [deletions.join(''), is_palindrome];\n}\n",
  "  let i = 0;\n  while (i < s.length) {\n    if (c.includes(s[i])) {\n      s =\
    \ s.slice(0, i) + s.slice(i + 1);\n    } else {\n      i++;\n    }\n  }\n  return\
    \ [s, isPalindrome(s)];\n}\n", "  let result: string = \"\";\n  for (let i: number\
    \ = 0; i < s.length; i++) {\n    let match: boolean = false;\n    for (let j:\
    \ number = 0; j < c.length; j++) {\n      if (s[i] === c[j]) {\n        match\
    \ = true;\n      }\n    }\n    if (!match) {\n      result += s[i];\n    }\n \
    \ }\n  let palindrome: boolean = true;\n  for (let i: number = 0; i < result.length\
    \ / 2; i++) {\n    if (result[i] !== result[result.length - 1 - i]) {\n      palindrome\
    \ = false;\n    }\n  }\n  return [result, palindrome];\n}\n", "    let resultString\
    \ = '';\n    let checkForPalindrome = false;\n    let resultStringPalindrome:\
    \ string[] = [];\n    let resultArray: [string, boolean] = ['', false];\n    for\
    \ (let i = 0; i < s.length; i++) {\n        let currentChar = s[i];\n        if\
    \ (c.indexOf(currentChar) === -1) {\n            resultString += currentChar;\n\
    \        }\n    }\n    for (let i = 0; i < resultString.length; i++) {\n     \
    \   let currentChar = resultString[i];\n        resultStringPalindrome.push(currentChar);\n\
    \    }\n    for (let i = 0; i < resultStringPalindrome.length; i++) {\n      \
    \  let currentChar = resultStringPalindrome[i];\n        if (currentChar === resultStringPalindrome[resultStringPalindrome.length\
    \ - 1 - i]) {\n            checkForPalindrome = true;\n        } else {\n    \
    \        checkForPalindrome = false;\n            break;\n        }\n    }\n \
    \   if (checkForPalindrome) {\n        resultArray = [resultString, true];\n \
    \   } else {\n        resultArray = [resultString, false];\n    }\n    return\
    \ resultArray;\n}\n\nlet task7_test1 = reverse_delete(\"abcde\", \"ae\");\nlet\
    \ task7_test2 = reverse_delete(\"abcdef\", \"b\");\nlet task7_test3 = reverse_delete(\"\
    abcdedcba\", \"ab\");\n\nconsole.log(task7_test1);\nconsole.log(task7_test2);\n\
    console.log(task7_test3);", "  const regex: RegExp = new RegExp(`[${c}]`, \"g\"\
    );\n  const sWithoutC: string = s.replace(regex, \"\");\n  const isPalindrome:\
    \ boolean = sWithoutC === sWithoutC.split(\"\").reverse().join(\"\");\n  return\
    \ [sWithoutC, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    const sSplit = s.split('');\n    const cSplit =\
    \ c.split('');\n    let result: string = '';\n    let palindrome: boolean = false;\n\
    \    for (let i = 0; i < sSplit.length; i++) {\n        if (!cSplit.includes(sSplit[i]))\
    \ {\n            result += sSplit[i];\n        }\n    }\n    const resultReverse\
    \ = result.split('').reverse().join('');\n    if (result === resultReverse) {\n\
    \        palindrome = true;\n    }\n    return [result, palindrome];\n}\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    return [s.split('').filter(value => !c.includes(value)).join(''),\
    \ s.split('').filter(value => !c.includes(value)).join('') === s.split('').filter(value\
    \ => !c.includes(value)).reverse().join('')];\n}\n", "    let n = s.length;\n\
    \    let m = c.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let\
    \ t = \"\";\n    while (i < n) {\n        j = 0;\n        while (j < m) {\n  \
    \          if (s[i] === c[j]) {\n                break;\n            }\n     \
    \       j++;\n        }\n        if (j === m) {\n            t += s[i];\n    \
    \    }\n        i++;\n    }\n    let l = t.length;\n    let left = 0;\n    let\
    \ right = l - 1;\n    while (left < right) {\n        if (t[left] !== t[right])\
    \ {\n            return [t, false];\n        }\n        left++;\n        right--;\n\
    \    }\n    return [t, true];\n}\n", "    return [\n        s.split('').filter(ch\
    \ => !c.includes(ch)).join(''),\n        [...s].reverse().join('') === s.split('').filter(ch\
    \ => !c.includes(ch)).join('')\n    ];\n}\n\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let t: string = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) == -1) {\n            t += s[i];\n     \
    \   }\n    }\n    return [t, isPalindrome(t)];\n}\n", "  const sArr = s.split(\"\
    \");\n  const sFiltered = sArr.filter(x => !c.includes(x));\n  const reversed\
    \ = sFiltered.reverse().join(\"\");\n  return [reversed, sFiltered.join(\"\")\
    \ === reversed];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
