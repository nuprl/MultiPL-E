name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    const evens = arr.filter(x => x % 2 === 0);\n    return evens.length\
    \ ? [Math.min(...evens), arr.indexOf(Math.min(...evens))] : [];\n}\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  let min = null;\n  let index = null;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === null)\
    \ {\n        min = arr[i];\n        index = i;\n      } else if (arr[i] < min)\
    \ {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n  if (min\
    \ !== null) {\n    return [min, index];\n  } else {\n    return [];\n  }\n}",
  "  let smallestEvenValue = 10001;\n  let smallestEvenValueIndex = -1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue)\
    \ {\n      smallestEvenValue = arr[i];\n      smallestEvenValueIndex = i;\n  \
    \  }\n  }\n  if (smallestEvenValueIndex === -1) {\n    return [];\n  }\n  return\
    \ [smallestEvenValue, smallestEvenValueIndex];\n}\n", "  let min = null;\n  let\
    \ minIndex = null;\n  for (let i = 0; i < arr.length; i++) {\n    const element\
    \ = arr[i];\n    if (element % 2 === 0) {\n      if (min === null || element <\
    \ min) {\n        min = element;\n        minIndex = i;\n      }\n    }\n  }\n\
    \  return min === null ? [] : [min, minIndex];\n}\n", "  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evenArr: number[] = [];\n  let evenArrInd: number[]\
    \ = [];\n  let finalArr: number[] = [];\n  let evenVal: number = 0;\n  let firstVal:\
    \ number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0) {\n      evenArr.push(arr[i]);\n      evenArrInd.push(i);\n    }\n  }\n \
    \ if (evenArr.length === 0) {\n    return [];\n  }\n  evenVal = Math.min(...evenArr);\n\
    \  for (let j = 0; j < evenArr.length; j++) {\n    if (evenArr[j] === evenVal)\
    \ {\n      firstVal = evenArrInd[j];\n      break;\n    }\n  }\n  finalArr.push(evenVal,\
    \ firstVal);\n  return finalArr;\n}", "  if (arr.length === 0) {\n    return [];\n\
    \  }\n  let evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let minEven: number = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex: number = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] !== 0 && arr[i] % 2 === 0 && arr[i] <\
    \ minEven) {\n            minEven = arr[i];\n            minIndex = i;\n     \
    \   }\n    }\n    return minEven === Number.MAX_SAFE_INTEGER ? [] : [minEven,\
    \ minIndex];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const evens\
    \ = arr.filter(i => i % 2 === 0);\n  const min = Math.min(...evens);\n  return\
    \ [min, arr.indexOf(min)];\n}\n", "    if (arr.length < 1) {\n        return [];\n\
    \    }\n    const result = arr.map((val, idx) => [val, idx]).filter(val => val[0]\
    \ % 2 === 0).sort((a, b) => a[0] - b[0] || a[1] - b[1]);\n    return result.length\
    \ > 0 ? result[0] : [];\n}\n", "  const even: number[] = [];\n  const index: number[]\
    \ = [];\n  arr.forEach((num, i) => {\n    if (num % 2 === 0) {\n      even.push(num);\n\
    \      index.push(i);\n    }\n  });\n  const min: number = Math.min(...even);\n\
    \  const res: number[] = [];\n  for (let i = 0; i < even.length; i++) {\n    if\
    \ (even[i] === min) {\n      res.push(even[i]);\n      res.push(index[i]);\n \
    \     break;\n    }\n  }\n  return res;\n}\n", "  const array = arr\n    .filter((item)\
    \ => {\n      return item % 2 === 0;\n    })\n    .sort((a, b) => {\n      return\
    \ a - b;\n    });\n  return array.length > 0 ? [array[0], arr.indexOf(array[0])]\
    \ : [];\n}\n\nexport { pluck };", "  const smallest: number[] = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      smallest.push(arr[i]);\n\
    \    }\n  }\n  smallest.sort((a, b) => a - b);\n  return smallest.length === 0\
    \ ? [] : [smallest[0], arr.indexOf(smallest[0])];\n}\n", "  // your code\n}\n\n\
    export { pluck };", "  // find the smallest even element, if there are multiple,\
    \ return the index of the first one\n  // if there are no even elements, return\
    \ []\n  // if the array is empty, return []\n  // if the array is null, throw\
    \ error?\n  // maybe use a heap to solve this\n  if (arr === null) {\n    throw\
    \ new Error('Invalid input: null array');\n  }\n  if (arr.length === 0) {\n  \
    \  return [];\n  }\n  let smallestEvenVal: number = Number.MAX_SAFE_INTEGER;\n\
    \  let smallestEvenValIndex: number = Number.MAX_SAFE_INTEGER;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    const curVal = arr[i];\n    if (curVal < smallestEvenVal\
    \ && curVal % 2 === 0) {\n      smallestEvenVal = curVal;\n      smallestEvenValIndex\
    \ = i;\n    }\n  }\n  if (smallestEvenVal === Number.MAX_SAFE_INTEGER) {\n   \
    \ return [];\n  }\n  return [smallestEvenVal, smallestEvenValIndex];\n}\n\nexport\
    \ default pluck;", "    if (!arr.length) {\n        return [];\n    }\n    //\
    \ let smallest = Math.min(...arr.filter(x => x % 2 === 0));\n    let smallest\
    \ = arr.filter(x => x % 2 === 0).reduce((x, y) => Math.min(x, y));\n    let smallestIdx\
    \ = arr.indexOf(smallest);\n    return [smallest, smallestIdx];\n}\n", "  let\
    \ result: number[] = [];\n  if (arr.length === 0) {\n    return result;\n  }\n\
    \n  const evenArr = arr.filter((num) => num % 2 === 0);\n  if (evenArr.length\
    \ === 0) {\n    return result;\n  }\n\n  const smallestValue = Math.min(...evenArr);\n\
    \  const smallestIndex = arr.indexOf(smallestValue);\n  result.push(smallestValue,\
    \ smallestIndex);\n  return result;\n}\n", "    const evens = arr.filter(v =>\
    \ v % 2 === 0);\n    const minEven = Math.min(...evens);\n    const index = arr.indexOf(minEven);\n\
    \    return [minEven, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "  const evenValues: number[] = arr.filter((value) => {\n    return value % 2 ===\
    \ 0;\n  });\n  if (evenValues.length === 0) {\n    return [];\n  }\n  const smallestEvenValue:\
    \ number = Math.min(...evenValues);\n  const index: number = arr.indexOf(smallestEvenValue);\n\
    \  return [smallestEvenValue, index];\n}\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\nconsole.log(pluck([]));",
  "    const evens = arr.filter(value => value % 2 === 0).sort();\n    if (!evens.length)\
    \ {\n        return [];\n    }\n    const smallestEven = evens[0];\n    const\
    \ smallestEvenIndex = arr.indexOf(smallestEven);\n    return [smallestEven, smallestEvenIndex];\n\
    }\n", "  let target = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  let isEven\
    \ = false;\n  for (let i = 0; i < arr.length; i++) {\n    const el = arr[i];\n\
    \    if (el % 2 === 0 && el < target) {\n      target = el;\n      index = i;\n\
    \      isEven = true;\n    }\n  }\n  return isEven ? [target, index] : [];\n}\n\
    \ndescribe(\"Tree Plucking\", () => {\n  it(\"should return the smallest even\
    \ value with smallest index\", () => {\n    expect(pluck([4, 2, 3])).to.deep.equal([2,\
    \ 1]);\n    expect(pluck([1, 2, 3])).to.deep.equal([2, 1]);\n    expect(pluck([5,\
    \ 0, 3, 0, 4, 2])).to.deep.equal([0, 1]);\n  });\n  it(\"should return [] when\
    \ the array is empty\", () => {\n    expect(pluck([])).to.deep.equal([]);\n  });\n\
    });", "  const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  return [evens.sort((a, b) => a - b)[0], arr.indexOf(evens.sort((a,\
    \ b) => a - b)[0])];\n}\n\nexport {pluck};", "  if (arr.length === 0) {\n    return\
    \ [];\n  }\n  let evenValues: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      evenValues.push(arr[i]);\n    }\n\
    \  }\n  if (evenValues.length === 0) {\n    return [];\n  }\n  let minValue =\
    \ Math.min(...evenValues);\n  let index = arr.indexOf(minValue);\n  return [minValue,\
    \ index];\n}\n\nexport { pluck };", "  const res: number[] = [];\n  const min:\
    \ number = arr.sort((a, b) => a - b).find((x) => x % 2 === 0);\n  const idx: number\
    \ = arr.indexOf(min);\n  if (min) {\n    res.push(min, idx);\n  }\n  return res;\n\
    }\n\nexport default pluck;", "  const result = arr.filter(a => a % 2 === 0);\n\
    \  if (result.length === 0) {\n    return [];\n  } else {\n    const min = Math.min(...result);\n\
    \    return [min, arr.indexOf(min)];\n  }\n}\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let min = 100000;\n    let index = 0;\n    let res:\
    \ number[] = [];\n    arr.forEach((el, i) => {\n        if (el % 2 === 0 && el\
    \ < min) {\n            min = el;\n            index = i;\n        }\n    });\n\
    \    if (min !== 100000) {\n        res.push(min);\n        res.push(index);\n\
    \    }\n    return res;\n}", "  let smallestIdx = null;\n  let smallestVal = null;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n     \
    \ if (smallestVal === null || arr[i] < smallestVal) {\n        smallestVal = arr[i];\n\
    \        smallestIdx = i;\n      }\n    }\n  }\n  return smallestVal !== null\
    \ ? [smallestVal, smallestIdx] : [];\n}\n\nimport { assert } from \"https://deno.land/std/testing/asserts.ts\"\
    ;\nDeno.test(\"pluck\", () => {\n  assert(pluck([4, 2, 3]).toString() === [2,\
    \ 1].toString());\n  assert(pluck([1, 2, 3]).toString() === [2, 1].toString());\n\
    \  assert(pluck([]).toString() === [].toString());\n  assert(pluck([5, 0, 3, 0,\
    \ 4, 2]).toString() === [0, 1].toString());\n});", "    // [4, 2, 3] => [4, 0]\n\
    \    let evens: number[] = arr.filter(i => i % 2 === 0);\n    // evens = [2]\n\
    \    if (evens.length) {\n        return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n\
    \    }\n    else {\n        return [];\n    }\n}", "    const evens = arr.filter(a\
    \ => a % 2 === 0);\n    if (evens.length === 0) return [];\n    const lowestEven\
    \ = Math.min(...evens);\n    const index = arr.indexOf(lowestEven);\n    return\
    \ [lowestEven, index];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\
    \  const evens = arr.filter(isEven);\n  if (evens.length === 0) {\n    return\
    \ [];\n  }\n  const smallestEven = evens.reduce(findMin);\n  const smallestEvenIndex\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, smallestEvenIndex];\n\
    }\n", "  let even = [];\n  let temp = [];\n  let empty = [];\n  if (arr.length\
    \ == 0) {\n    return empty;\n  } else {\n    for (let i = 0; i < arr.length;\
    \ i++) {\n      if (arr[i] % 2 == 0) {\n        even.push(arr[i]);\n      }\n\
    \    }\n    if (even.length == 0) {\n      return empty;\n    } else {\n     \
    \ let smallest = Math.min(...even);\n      let index = arr.indexOf(smallest);\n\
    \      temp.push(smallest, index);\n      return temp;\n    }\n  }\n}\n", "  let\
    \ minEvenValue = Number.MAX_SAFE_INTEGER;\n  let minEvenIndex = null;\n  arr.forEach((val,\
    \ i) => {\n    if (val % 2 === 0 && val < minEvenValue) {\n      minEvenValue\
    \ = val;\n      minEvenIndex = i;\n    }\n  });\n  return minEvenIndex === null\
    \ ? [] : [minEvenValue, minEvenIndex];\n}\n", "  if (arr.length === 0) {\n   \
    \ return [];\n  }\n  let minEven = Infinity;\n  let index = -1;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n\
    \      minEven = arr[i];\n      index = i;\n    }\n  }\n  if (minEven === Infinity)\
    \ {\n    return [];\n  }\n  return [minEven, index];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  let evenArr: number[] = [];\n  let evenIdx: number[]\
    \ = [];\n  let smallestEven: number;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n      evenIdx.push(i);\n\
    \    }\n  }\n  if (evenArr.length === 0) {\n    return [];\n  } else {\n    smallestEven\
    \ = evenArr[0];\n    for (let j = 0; j < evenArr.length; j++) {\n      if (evenArr[j]\
    \ < smallestEven) {\n        smallestEven = evenArr[j];\n      }\n    }\n    return\
    \ [smallestEven, evenIdx[evenArr.indexOf(smallestEven)]];\n  }\n}\n\ndescribe(\"\
    pluck\", () => {\n  it(\"returns [2, 1] for [4, 2, 3]\", () => {\n    expect(pluck([4,\
    \ 2, 3])).toEqual([2, 1]);\n  });\n  it(\"returns [2, 1] for [1, 2, 3]\", () =>\
    \ {\n    expect(pluck([1, 2, 3])).toEqual([2, 1]);\n  });\n  it(\"returns [] for\
    \ []\", () => {\n    expect(pluck([])).toEqual([]);\n  });\n  it(\"returns [0,\
    \ 1] for [5, 0, 3, 0, 4, 2]\", () => {\n    expect(pluck([5, 0, 3, 0, 4, 2])).toEqual([0,\
    \ 1]);\n  });\n});", "  if (arr.length === 0) {\n    return [];\n  }\n  const\
    \ evens = arr.filter(item => item % 2 === 0);\n  if (evens.length === 0) {\n \
    \   return [];\n  }\n  const minEven = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n", "  const evens = arr.filter(i => i % 2 ===\
    \ 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n", "  const evenNumbers = arr.filter(item\
    \ => item % 2 === 0);\n  const filtered = arr.filter(item => evenNumbers.includes(item));\n\
    \  return [Math.min(...evenNumbers), filtered.indexOf(Math.min(...evenNumbers))];\n\
    }\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "    let result = [],\n        max =\
    \ 10001,\n        min = max;\n    arr.forEach((x, i) => {\n        if (x > 0 &&\
    \ x % 2 === 0 && x < min) {\n            min = x;\n            result = [x, i];\n\
    \        }\n    });\n    return result;\n}\n", "  const firstSmallest = arr.find(val\
    \ => val % 2 === 0);\n  if (firstSmallest) {\n    const firstIndex = arr.indexOf(firstSmallest);\n\
    \    return [firstSmallest, firstIndex];\n  }\n  return [];\n}\n", "  let evenNums:\
    \ number[] = [];\n  let evenIndexes: number[] = [];\n  let lowestEven = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n     \
    \ evenNums.push(arr[i]);\n      evenIndexes.push(i);\n    }\n  }\n  for (let i\
    \ = 0; i < evenNums.length; i++) {\n    if (evenNums[i] < lowestEven) {\n    \
    \  lowestEven = evenNums[i];\n    }\n  }\n  for (let i = 0; i < evenNums.length;\
    \ i++) {\n    if (evenNums[i] === lowestEven) {\n      return [lowestEven, evenIndexes[i]];\n\
    \    }\n  }\n  return [];\n}\n", "  const evens = arr.filter(x => x % 2 === 0);\n\
    \  const smallestEven = Math.min(...evens);\n  const index = arr.indexOf(smallestEven);\n\
    \  if (index < 0) {\n    return [];\n  }\n  return [smallestEven, index];\n}\n\
    \nexport { pluck };", "  const even = arr.filter(x => x % 2 === 0);\n  if (even.length\
    \ === 0) {\n    return [];\n  }\n  const min = Math.min(...even);\n  const minArr\
    \ = arr.filter(x => x === min);\n  const minIndex = arr.indexOf(minArr[0]);\n\
    \  return [min, minIndex];\n}\n", "  if (arr.length === 0) {\n    return [];\n\
    \  }\n  let minEven = arr[0];\n  let minEvenIdx = 0;\n  let didFind = false;\n\
    \  arr.forEach((v, i) => {\n    if (v % 2 === 0) {\n      if (!didFind) {\n  \
    \      minEven = v;\n        minEvenIdx = i;\n        didFind = true;\n      }\
    \ else if (v < minEven) {\n        minEven = v;\n        minEvenIdx = i;\n   \
    \   }\n    }\n  });\n  if (didFind) {\n    return [minEven, minEvenIdx];\n  }\n\
    \  return [];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex\
    \ = 0;\n    let idx = 0;\n    arr.forEach(e => {\n        if (e % 2 === 0 && e\
    \ < min) {\n            min = e;\n            minIndex = idx;\n        }\n   \
    \     idx++;\n    });\n    return min === Number.MAX_SAFE_INTEGER ? [] : [min,\
    \ minIndex];\n}\nexport { pluck };", "  // your code goes here\n  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  let smallestEven = 0;\n  let evenIndex = arr.length\
    \ + 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n\
    \      if (arr[i] < smallestEven) {\n        smallestEven = arr[i];\n        evenIndex\
    \ = i;\n      }\n    }\n  }\n  if (evenIndex < arr.length) {\n    return [smallestEven,\
    \ evenIndex];\n  } else {\n    return [];\n  }\n}\n", "  let min = 10000;\n  let\
    \ minIndex = 10000;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n   \
    \ }\n  }\n  if (min === 10000) {\n    return [];\n  }\n  return [min, minIndex];\n\
    }\n", "  const sortedEvens = arr.filter(x => x % 2 === 0).sort();\n  const indexOfFirstEven\
    \ = arr.indexOf(sortedEvens[0]);\n  return sortedEvens.length === 0 ? [] : [sortedEvens[0],\
    \ indexOfFirstEven];\n}\n", "    const evenNumbers = arr.filter(num => num % 2\
    \ === 0);\n    const minEvenNum = Math.min(...evenNumbers);\n    const index =\
    \ arr.indexOf(minEvenNum);\n    return index >= 0 ? [minEvenNum, index] : [];\n\
    }", "  if (arr.length === 0) {\n    return [];\n  }\n  let minEven = Number.MAX_SAFE_INTEGER;\n\
    \  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] %\
    \ 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      index = i;\n\
    \    }\n  }\n  if (index !== -1) {\n    return [minEven, index];\n  }\n  return\
    \ [];\n}\n\nexport function runTests(): void {\n  const inputs = [\n    [4, 2,\
    \ 3],\n    [1, 2, 3],\n    [],\n    [5, 0, 3, 0, 4, 2],\n  ];\n  inputs.forEach((input)\
    \ => {\n    const output = pluck(input);\n    console.log(output);\n  });\n}",
  "  let evens = [];\n  let evensIndex = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n      evensIndex.push(i);\n\
    \    }\n  }\n  if (evens.length === 0) {\n    return [];\n  }\n  const smallestEven\
    \ = Math.min(...evens);\n  const smallestEvenIndex = evensIndex[evens.indexOf(smallestEven)];\n\
    \  return [smallestEven, smallestEvenIndex];\n}\n\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  const evenNumbers = arr.filter(el => el % 2 === 0).sort((a,\
    \ b) => a - b);\n  return evenNumbers.length === 0 ? [] : [evenNumbers[0], arr.indexOf(evenNumbers[0])];\n\
    }\n\nexport default pluck;", "    // Good luck!\n    if (arr.length === 0) {\n\
    \        return [];\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n  \
    \  if (evens.length === 0) {\n        return [];\n    }\n    let smallest = evens.reduce((prev,\
    \ curr) => {\n        return (prev > curr) ? curr : prev;\n    });\n    let smallestIndex\
    \ = arr.indexOf(smallest);\n    return [smallest, smallestIndex];\n}\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let smallestIndex = -1;\n    let smallest = Number.MAX_SAFE_INTEGER;\n\
    \    let secondSmallest = Number.MAX_SAFE_INTEGER;\n    let secondSmallestIndex\
    \ = -1;\n    for (let i = 0; i < arr.length; i++) {\n        const element = arr[i];\n\
    \        if (element % 2 === 0) {\n            if (element < smallest) {\n   \
    \             secondSmallest = smallest;\n                secondSmallestIndex\
    \ = smallestIndex;\n                smallest = element;\n                smallestIndex\
    \ = i;\n            } else if (element < secondSmallest) {\n                secondSmallest\
    \ = element;\n                secondSmallestIndex = i;\n            }\n      \
    \  }\n    }\n    if (smallest === Number.MAX_SAFE_INTEGER) {\n        return [];\n\
    \    }\n    if (secondSmallestIndex === -1) {\n        return [smallest, smallestIndex];\n\
    \    }\n    return [secondSmallest, secondSmallestIndex];\n}\n", "    let smallestEven:\
    \ number = null;\n    let smallestEvenIndex: number = null;\n    let smallestEvenFound:\
    \ boolean = false;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0) {\n            if (!smallestEvenFound) {\n                smallestEven\
    \ = arr[i];\n                smallestEvenIndex = i;\n                smallestEvenFound\
    \ = true;\n            } else {\n                if (arr[i] < smallestEven) {\n\
    \                    smallestEven = arr[i];\n                    smallestEvenIndex\
    \ = i;\n                }\n            }\n        }\n    }\n    if (smallestEvenFound)\
    \ {\n        return [smallestEven, smallestEvenIndex];\n    } else {\n       \
    \ return [];\n    }\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n \
    \ const evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) {\n \
    \   return [];\n  }\n  const minEven = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n\nexport { pluck };", "  let smallestEven: number\
    \ = 99999;\n  let indexOfSmallestEven: number = -1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const curVal = arr[i];\n    if (curVal % 2 === 0 && curVal < smallestEven)\
    \ {\n      smallestEven = curVal;\n      indexOfSmallestEven = i;\n    }\n  }\n\
    \  if (indexOfSmallestEven === -1) {\n    return [];\n  }\n  return [smallestEven,\
    \ indexOfSmallestEven];\n}\n", "  const evens = arr.filter(el => el % 2 === 0);\n\
    \  const min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n", " \
    \ let current: number = 0;\n  let index: number = 0;\n  let result: number[] =\
    \ [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n\
    \      if (current === 0) {\n        current = arr[i];\n        index = i;\n \
    \     } else if (arr[i] < current) {\n        current = arr[i];\n        index\
    \ = i;\n      }\n    }\n  }\n  if (current === 0) {\n    return [];\n  }\n  result.push(current);\n\
    \  result.push(index);\n  return result;\n}\n", "  const smallestEven = Math.min(...arr.filter(x\
    \ => x % 2 === 0));\n  return arr.indexOf(smallestEven) === -1 ? [] : [smallestEven,\
    \ arr.indexOf(smallestEven)];\n}\n\nexport function runTests(): void {\n  const\
    \ inputs = [\n    [4, 2, 3],\n    [1, 2, 3],\n    [],\n    [5, 0, 3, 0, 4, 2],\n\
    \  ];\n\n  inputs.forEach(input => {\n    const output = pluck(input);\n    console.log(output);\n\
    \  });\n}", "  const evens = arr.filter(e => e % 2 === 0).sort((a, b) => a - b);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  const smallestEven = evens[0];\n\
    \  return [smallestEven, arr.indexOf(smallestEven)];\n}\n\nexport default pluck;",
  "  const evenNums = arr.filter(el => el % 2 === 0);\n  if (evenNums.length === 0)\
    \ return [];\n  const minEven = Math.min(...evenNums);\n  const index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n", "    let smallest: number[] = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n      \
    \      if (smallest.length === 0) {\n                smallest = [arr[i], i];\n\
    \            } else if (arr[i] < smallest[0]) {\n                smallest = [arr[i],\
    \ i];\n            }\n        }\n    }\n    return smallest;\n}\n", "  let result:\
    \ number[] = [];\n  if (arr.length > 1) {\n    const even = arr.filter((val) =>\
    \ val % 2 === 0);\n    if (even.length > 0) {\n      result = [even[0], arr.indexOf(even[0])];\n\
    \    }\n  }\n  return result;\n}\n", "  let smallestEvenValue: number = Infinity;\n\
    \  let smallestEvenIndex: number = Infinity;\n  let isThereAnyEven: boolean =\
    \ false;\n  arr.forEach((elem, index) => {\n    if (elem % 2 === 0) {\n      isThereAnyEven\
    \ = true;\n      if (elem < smallestEvenValue) {\n        smallestEvenValue =\
    \ elem;\n        smallestEvenIndex = index;\n      }\n    }\n  });\n  if (isThereAnyEven)\
    \ {\n    return [smallestEvenValue, smallestEvenIndex];\n  } else {\n    return\
    \ [];\n  }\n}\n", "  // define lowest even value\n  let lowestEvenValue = Number.MAX_SAFE_INTEGER;\n\
    \  // define lowest even index\n  let lowestEvenIndex = null;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    // if the current index value is an even number\n\
    \    if (arr[i] % 2 === 0) {\n      // and the current index value is smaller\
    \ than the lowest even value\n      if (arr[i] < lowestEvenValue) {\n        //\
    \ set lowest even value to the current index value\n        lowestEvenValue =\
    \ arr[i];\n        // set lowest even index to the current index\n        lowestEvenIndex\
    \ = i;\n      }\n    }\n  }\n  // if lowest even index is null\n  if (lowestEvenIndex\
    \ === null) {\n    // return empty array\n    return [];\n  }\n  // else\n  else\
    \ {\n    // return an array containing the lowest even value and index\n    return\
    \ [lowestEvenValue, lowestEvenIndex];\n  }\n}\n", "    const evenArr = arr.filter(n\
    \ => n % 2 === 0);\n    if (evenArr.length === 0) {\n        return [];\n    }\n\
    \    const min = Math.min(...evenArr);\n    return [min, arr.indexOf(min)];\n\
    }\n", "  let min = Infinity;\n  let minIndex = -1;\n  arr.forEach((value, index)\
    \ => {\n    if (value % 2 === 0 && value < min) {\n      min = value;\n      minIndex\
    \ = index;\n    }\n  });\n  return minIndex === -1 ? [] : [min, minIndex];\n}\n\
    \nexport { pluck };", "    return arr.filter(v => !(v % 2)).sort((a, b) => a -\
    \ b)[0] ? [arr.filter(v => !(v % 2)).sort((a, b) => a - b)[0], arr.findIndex(v\
    \ => v === arr.filter(v => !(v % 2)).sort((a, b) => a - b)[0])] : [];\n}\n\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\nconsole.log(pluck([]));\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\n", "    if (arr.length === 0) {\n        return\
    \ [];\n    }\n    const i = arr.indexOf(findSmallestEven(arr));\n    return [arr[i],\
    \ i];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  let result: number[]\
    \ = [arr[0], 0];\n  let counter: number = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < result[0]) {\n     \
    \   result = [arr[i], i];\n      }\n      counter++;\n    }\n  }\n  if (counter\
    \ === 0) {\n    return [];\n  }\n  return result;\n}\n\nexport { pluck };", " \
    \   if (arr.length === 0) return [];\n    const evenArr = arr.filter(num => num\
    \ % 2 === 0);\n    if (evenArr.length === 0) return [];\n    const min = Math.min(...evenArr);\n\
    \    const minIdx = arr.indexOf(min);\n    return [min, minIdx];\n}\n", "  return\
    \ arr.reduce((acc, cv, i) => {\n    if (cv % 2 === 0) {\n      if (acc.length\
    \ === 0) acc = [cv, i];\n      else if (cv < acc[0]) acc = [cv, i];\n    }\n \
    \   return acc;\n  }, []);\n}\n", "  const evens = arr.filter(n => n % 2 === 0);\n\
    \  const minEven = Math.min(...evens);\n  const idx = arr.indexOf(minEven);\n\
    \  return idx === -1 ? [] : [minEven, idx];\n}\n", "  let smallestEvenValue =\
    \ 0;\n  let smallestEvenValueIndex = 0;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0) {\n      if (smallestEvenValue === 0) {\n     \
    \   smallestEvenValue = arr[i];\n        smallestEvenValueIndex = i;\n      }\
    \ else if (arr[i] < smallestEvenValue) {\n        smallestEvenValue = arr[i];\n\
    \        smallestEvenValueIndex = i;\n      }\n    }\n  }\n  if (smallestEvenValue\
    \ !== 0) {\n    return [smallestEvenValue, smallestEvenValueIndex];\n  } else\
    \ {\n    return [];\n  }\n}\n", "  const evenArr = arr.filter(item => item % 2\
    \ === 0);\n  const minEven = Math.min(...evenArr);\n  const minIndex = arr.indexOf(minEven);\n\
    \  return evenArr.length === 0 || arr.length === 0 ? [] : [minEven, minIndex];\n\
    }\n\nexport default pluck;", "    let min = Infinity;\n    let minIndex = Infinity;\n\
    \    arr.forEach((val, index) => {\n        if (val % 2 === 0 && val < min) {\n\
    \            min = val;\n            minIndex = index;\n        }\n    });\n \
    \   return min === Infinity ? [] : [min, minIndex];\n}\n", "  return arr.reduce(\n\
    \    (acc, curr, i) =>\n      curr % 2 === 0 && curr < acc[0]\n        ? [curr,\
    \ i]\n        : curr % 2 === 0 && curr === acc[0]\n        ? [curr, Math.min(i,\
    \ acc[1])]\n        : acc,\n    [Infinity, Infinity]\n  );\n}\n", "    let out:\
    \ number[] = [];\n    let smallest: number = 0;\n    let outIndex: number = 0;\n\
    \    let smallestIndex: number = 0;\n    if (arr.length == 0) {\n        return\
    \ out;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (arr[i] < smallest || smallest == 0) {\n       \
    \         smallest = arr[i];\n                smallestIndex = i;\n           \
    \ }\n        }\n    }\n    if (smallestIndex == 0 && smallest == 0) {\n      \
    \  return out;\n    }\n    out.push(smallest);\n    out.push(smallestIndex);\n\
    \    return out;\n}", "    let smallestEven: number | undefined;\n    let smallestEvenIndex:\
    \ number | undefined;\n    for (let i = 0; i < arr.length; i++) {\n        const\
    \ n = arr[i];\n        if (smallestEven === undefined && n % 2 === 0) {\n    \
    \        smallestEven = n;\n            smallestEvenIndex = i;\n        } else\
    \ if (smallestEven !== undefined && n % 2 === 0 && n < smallestEven) {\n     \
    \       smallestEven = n;\n            smallestEvenIndex = i;\n        }\n   \
    \ }\n    if (smallestEven === undefined) {\n        return [];\n    }\n    return\
    \ [smallestEven, smallestEvenIndex];\n}\nexport function pluckTest() {\n    const\
    \ a1 = [4, 2, 3];\n    const r1 = pluck(a1);\n    console.log('should return [2,\
    \ 1]:', r1);\n    const a2 = [1, 2, 3];\n    const r2 = pluck(a2);\n    console.log('should\
    \ return [2, 1]:', r2);\n    const a3 = [];\n    const r3 = pluck(a3);\n    console.log('should\
    \ return []:', r3);\n    const a4 = [5, 0, 3, 0, 4, 2];\n    const r4 = pluck(a4);\n\
    \    console.log('should return [0, 1]:', r4);\n}", "  const evens = arr.filter(e\
    \ => e % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let minEven\
    \ = evens[0];\n  let minEvenIndex = arr.indexOf(minEven);\n  evens.forEach(e =>\
    \ {\n    if (e < minEven) {\n      minEven = e;\n      minEvenIndex = arr.indexOf(minEven);\n\
    \    }\n  });\n  return [minEven, minEvenIndex];\n}\n", "  if (arr.length == 0)\
    \ return [];\n  var evens = arr.filter(function(v) {\n    return v % 2 == 0;\n\
    \  });\n  if (evens.length == 0) return [];\n  var min = Math.min.apply(null,\
    \ evens);\n  var node = [min, arr.indexOf(min)];\n  return node;\n}\n", "    const\
    \ evens = arr.filter(el => el % 2 === 0);\n    const minEven = Math.min(...evens);\n\
    \    return evens.includes(minEven) ? [minEven, arr.indexOf(minEven)] : [];\n}",
  "  let allEvens = arr.filter(x => x % 2 === 0);\n  if (allEvens.length < 1) {\n\
    \    return [];\n  }\n  let smallestEven = Math.min(...allEvens);\n  return [smallestEven,\
    \ arr.indexOf(smallestEven)];\n}\n", "  let result: number[] = [];\n  let even:\
    \ number[] = [];\n  let index: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      even.push(arr[i]);\n      index.push(i);\n\
    \    }\n  }\n  if (even.length === 0) {\n    return result;\n  }\n  result.push(even[0]);\n\
    \  result.push(index[0]);\n  for (let i = 1; i < even.length; i++) {\n    if (even[i]\
    \ < result[0]) {\n      result[0] = even[i];\n      result[1] = index[i];\n  \
    \  }\n  }\n  return result;\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "  const even = arr.filter(x => x % 2 === 0);\n  const smallestEven = even.length\
    \ > 0 ? Math.min(...even) : null;\n  return [\n    smallestEven,\n    arr.findIndex(x\
    \ => x === smallestEven)\n  ];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "  // TODO: implement this function\n  return [0, 0];\n}\n\nexport { pluck };",
  "  if (arr.length === 0) {\n    return [];\n  }\n  const sortedEven = arr.filter(e\
    \ => e % 2 === 0).sort((a, b) => a - b);\n  const even = sortedEven[0];\n  const\
    \ index = arr.indexOf(even);\n  return [even, index];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  if (arr.length === 0) {\n    return [];\n  }\n  let min:\
    \ number = arr[0];\n  let minIndex: number = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] < min && arr[i] % 2 === 0) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  if (min % 2 === 0) {\n    return [min, minIndex];\n\
    \  } else {\n    return [];\n  }\n}\n\nexport { pluck };", "    return arr.filter(i\
    \ => i % 2 === 0).sort((a, b) => {\n        if (a === b) {\n            return\
    \ 0;\n        }\n        return a > b ? 1 : -1;\n    }).slice(0, 1).map(i => {\n\
    \        return [i, arr.indexOf(i)];\n    }).reduce((a, b) => a.concat(b), []);\n\
    }\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "  let [even, index] = [Infinity, -1];\n\
    \  arr.forEach((val, i) => {\n    if (val % 2 === 0 && val < even) {\n      [even,\
    \ index] = [val, i];\n    }\n  });\n  return even === Infinity ? [] : [even, index];\n\
    }\n", "    const newArr = arr.filter(x => x % 2 === 0);\n    if (newArr.length\
    \ === 0) {\n        return [];\n    } else {\n        const maxValue = Math.min(...newArr);\n\
    \        const index = arr.indexOf(maxValue);\n        return [maxValue, index];\n\
    \    }\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\n\
    console.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));", "  let min\
    \ = 2147483647\n  let index = -1\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i]\n      index =\
    \ i\n    }\n  }\n  return index === -1 ? [] : [min, index]\n}\n\npluck([4, 2,\
    \ 3]) // [2, 1]\n\npluck([1, 2, 3]) // [2, 1]\n\npluck([]) // []\n\npluck([5,\
    \ 0, 3, 0, 4, 2]) // [0, 1]", "    let evens = arr.filter(n => n % 2 === 0);\n\
    \    return evens.length > 0 ? [Math.min(...evens), arr.indexOf(Math.min(...evens))]\
    \ : [];\n}\n", "    // TODO:\n    let min = Number.MAX_SAFE_INTEGER;\n    let\
    \ minIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return min < Number.MAX_SAFE_INTEGER ? [min, minIndex]\
    \ : [];\n}\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\n", "    if (arr.length === 0) return [];\n    const evens\
    \ = arr.filter(i => i % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  const min = Math.min(...evens);\n    const index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    if (!arr.length) return [];\n    let evenArr = arr.filter(el\
    \ => !(el % 2));\n    if (!evenArr.length) return [];\n    let smallestEven: number\
    \ = evenArr.reduce((a, b) => a < b ? a : b);\n    let smallestEvenIndex: number\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, smallestEvenIndex];\n\
    }\n\nlet output: number[] = pluck([4, 2, 3]);\nconsole.log(output);\n\noutput\
    \ = pluck([1, 2, 3]);\nconsole.log(output);\n\noutput = pluck([]);\nconsole.log(output);\n\
    \noutput = pluck([5, 0, 3, 0, 4, 2]);\nconsole.log(output);", "  let res = [],\n\
    \    idx = 0;\n  if (arr.length > 0) {\n    arr.sort((a, b) => a - b);\n    for\
    \ (let i = 0; i < arr.length; i++) {\n      if (arr[i] % 2 === 0) {\n        idx\
    \ = i;\n        break;\n      }\n    }\n    if (idx < arr.length) {\n      res\
    \ = [arr[idx], idx];\n    }\n  }\n  return res;\n}\n\nconsole.log(pluck([4, 2,\
    \ 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    return [];\n}\n", "  let result: number[] = [];\n \
    \ let sorted = arr.sort((a, b) => a - b);\n  for (let i = 0; i < sorted.length;\
    \ i++) {\n    if (sorted[i] % 2 === 0) {\n      result.push(sorted[i]);\n    \
    \  result.push(arr.indexOf(sorted[i]));\n      return result;\n    }\n  }\n  return\
    \ result;\n}\n\ndescribe(\"pluck\", () => {\n  it(\"should work when given [4,\
    \ 2, 3]\", () => {\n    expect(pluck([4, 2, 3])).toEqual([2, 1]);\n  });\n  it(\"\
    should work when given [1, 2, 3]\", () => {\n    expect(pluck([1, 2, 3])).toEqual([2,\
    \ 1]);\n  });\n  it(\"should work when given []\", () => {\n    expect(pluck([])).toEqual([]);\n\
    \  });\n  it(\"should work when given [5, 0, 3, 0, 4, 2]\", () => {\n    expect(pluck([5,\
    \ 0, 3, 0, 4, 2])).toEqual([0, 1]);\n  });\n});", "    let output: number[] =\
    \ [];\n    let result: number[] = [];\n    let storage: number[] = [];\n    for\
    \ (let i: number = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n\
    \            storage.push(arr[i]);\n        }\n    }\n    storage.sort((a, b)\
    \ => a - b);\n    if (storage.length > 0) {\n        let smallest: number = storage[0];\n\
    \        result.push(smallest);\n        for (let i: number = 0; i < arr.length;\
    \ i++) {\n            if (arr[i] === smallest) {\n                result.push(i);\n\
    \                break;\n            }\n        }\n    }\n    if (result.length\
    \ > 0) {\n        output = result;\n    }\n    return output;\n}", "  // Your\
    \ code here\n  return [];\n}\n", "  let firstEvenIndex = -1;\n  let firstEvenValue\
    \ = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n\
    \      if (firstEvenIndex === -1) {\n        firstEvenIndex = i;\n        firstEvenValue\
    \ = arr[i];\n      } else if (arr[i] < firstEvenValue) {\n        firstEvenIndex\
    \ = i;\n        firstEvenValue = arr[i];\n      }\n    }\n  }\n  return firstEvenIndex\
    \ === -1 ? [] : [firstEvenValue, firstEvenIndex];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  const evens = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push([arr[i], i]);\n    }\n\
    \  }\n  if (evens.length === 0) {\n    return [];\n  } else {\n    evens.sort((a,\
    \ b) => {\n      if (a[0] === b[0]) {\n        return a[1] - b[1];\n      } else\
    \ {\n        return a[0] - b[0];\n      }\n    });\n    return evens[0];\n  }\n\
    }\n", "  let even = arr.filter(i => i % 2 === 0);\n  let sorted = even.sort((a,\
    \ b) => a - b);\n  let smallest = sorted[0];\n  if (sorted.length === 0) {\n \
    \   return [];\n  }\n  return [smallest, arr.indexOf(smallest)];\n}\n\nlet ans\
    \ = pluck([5, 0, 3, 0, 4, 2]);\nconsole.log(ans);", "  if (arr.length === 0) {\n\
    \    return [];\n  }\n  let min = arr[0];\n  let index = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min\
    \ = arr[i];\n      index = i;\n    }\n  }\n  if (min % 2 === 0) {\n    return\
    \ [min, index];\n  } else {\n    return [];\n  }\n}\n", "  if (arr.length ===\
    \ 0) {\n    return [];\n  }\n  let min = null;\n  let minIndex = null;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    const el = arr[i];\n    if (el % 2 ===\
    \ 0) {\n      if (min === null || el < min) {\n        min = el;\n        minIndex\
    \ = i;\n      }\n    }\n  }\n  if (min === null) {\n    return [];\n  }\n  return\
    \ [min, minIndex];\n}\n\nlet testCase = [4, 2, 3];\nlet result = pluck(testCase);\n\
    console.log(result);\n\ntestCase = [1, 2, 3];\nresult = pluck(testCase);\nconsole.log(result);\n\
    \ntestCase = [];\nresult = pluck(testCase);\nconsole.log(result);\n\ntestCase\
    \ = [5, 0, 3, 0, 4, 2];\nresult = pluck(testCase);\nconsole.log(result);", " \
    \ let even = Infinity;\n  let index = 0;\n  let i = 0;\n  while (i < arr.length)\
    \ {\n    if (arr[i] % 2 === 0 && arr[i] < even) {\n      even = arr[i];\n    \
    \  index = i;\n    }\n    i++;\n  }\n  return even === Infinity ? [] : [even,\
    \ index];\n}\n", "  const evenArray = arr.filter(num => num % 2 === 0);\n  const\
    \ minValue = Math.min(...evenArray);\n  const answer = [];\n  if (minValue ===\
    \ Infinity) {\n    return answer;\n  }\n  const index = arr.indexOf(minValue);\n\
    \  answer.push(minValue, index);\n  return answer;\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    const evens = arr.filter(x => x % 2 === 0).sort((a,\
    \ b) => a - b);\n    if (evens.length === 0) {\n        return [];\n    }\n  \
    \  const smallestEven = evens[0];\n    const index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "  let evens = [];\n  let evenArr =\
    \ [];\n  let smallest = null;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n      evenArr.push(i);\n  \
    \  }\n  }\n  if (evens.length === 0) {\n    return [];\n  }\n  for (let i = 0;\
    \ i < evens.length; i++) {\n    if (i === 0) {\n      smallest = evens[i];\n \
    \   } else if (evens[i] < smallest) {\n      smallest = evens[i];\n    }\n  }\n\
    \  return [smallest, evenArr[evens.indexOf(smallest)]];\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  const newArray = arr.filter((i) => i % 2 ===\
    \ 0);\n  const smallestIndex = arr.indexOf(Math.min(...newArray));\n  return [Math.min(...newArray),\
    \ smallestIndex];\n}\n", "    return [];\n}\n", "  if (arr.length === 0) {\n \
    \   return [];\n  }\n  const filteredArr = arr.filter((num) => num % 2 === 0);\n\
    \  if (filteredArr.length === 0) {\n    return [];\n  }\n  const minValue = Math.min(...filteredArr);\n\
    \  const valueIndex = arr.indexOf(minValue);\n  return [minValue, valueIndex];\n\
    }\n", "  let index = 0;\n  let value = 10000;\n  let found = false;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < value) {\n\
    \      value = arr[i];\n      index = i;\n      found = true;\n    }\n  }\n  return\
    \ found ? [value, index] : [];\n}\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    const evens = arr.filter(i => i % 2 === 0);\n    if (!evens.length) {\n   \
    \     return [];\n    }\n    const smallest = Math.min(...evens);\n    const idx\
    \ = arr.indexOf(smallest);\n    return [smallest, idx];\n}\n\ndescribe('pluck()',\
    \ () => {\n    it('should return the smallest even value, and its index', () =>\
    \ {\n        const arr1 = [4, 2, 3];\n        const ans1 = [2, 1];\n        expect(pluck(arr1)).toEqual(ans1);\n\
    \n        const arr2 = [1, 2, 3];\n        const ans2 = [2, 1];\n        expect(pluck(arr2)).toEqual(ans2);\n\
    \n        const arr3 = [5, 0, 3, 0, 4, 2];\n        const ans3 = [0, 1];\n   \
    \     expect(pluck(arr3)).toEqual(ans3);\n    });\n\n    it('should return an\
    \ empty array if no even value found', () => {\n        const arr = [1, 3, 5];\n\
    \        const ans = [];\n        expect(pluck(arr)).toEqual(ans);\n    });\n\n\
    \    it('should return an empty array if input array is empty', () => {\n    \
    \    const arr = [];\n        const ans = [];\n        expect(pluck(arr)).toEqual(ans);\n\
    \    });\n});", "  const [evens, result] = [[], []];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n    }\n  }\n\
    \  if (evens.length) {\n    const evensSorted = evens.sort((a, b) => a - b);\n\
    \    const [smallestValue] = evensSorted;\n    result.push(smallestValue);\n \
    \   const smallestValueIndex = arr.indexOf(smallestValue);\n    result.push(smallestValueIndex);\n\
    \  }\n  return result;\n}\n\nexport default pluck;", "  // I want to return\n\
    \  // the first even number\n  // if not then I want to return the first even\
    \ number\n  // if not then return empty array []\n  // so I need to look at each\
    \ number in the array\n  // and work with the first number that meets the condition\n\
    \  // so I want to loop through the array\n  // then I want to return the first\
    \ number that meets my condition\n  let result = [];\n  // let result: number[]\
    \ = [];\n\n  // loop through the array\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    // get the value at the current index\n    let num = arr[i];\n    //\
    \ check if the number is even\n    if (num % 2 === 0) {\n      // if it is even\
    \ push it to the result array\n      result.push(num);\n      // then break out\
    \ of the loop\n      break;\n    }\n  }\n\n  // return result\n  return result;\n\
    }\n", "  const evens = arr.filter(val => val % 2 === 0).sort((a, b) => a - b);\n\
    \  return evens.length > 0 ? [evens[0], arr.indexOf(evens[0])] : [];\n}\n", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  let minValue = Infinity;\n \
    \ let minValueIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  if (arr[i] % 2 === 0 && arr[i] < minValue) {\n      minValue = arr[i];\n  \
    \    minValueIndex = i;\n    }\n  }\n  if (minValue === Infinity) {\n    return\
    \ [];\n  }\n  return [minValue, minValueIndex];\n}\n", "  return arr\n    .filter(x\
    \ => x % 2 === 0)\n    .sort((a, b) => a - b)\n    .concat([]);\n}\nexport { pluck\
    \ };", "    let minValue: number = Number.MAX_SAFE_INTEGER;\n    let minIndex:\
    \ number = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0 && arr[i] % 2 === 0 && arr[i] < minValue) {\n            minValue = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    return minIndex === -1 ? []\
    \ : [minValue, minIndex];\n}\n", "    if (arr.length == 0) {\n        return [];\n\
    \    }\n\n    var smallestEven = Number.MAX_SAFE_INTEGER;\n    var smallestEvenIndex\
    \ = Number.MAX_SAFE_INTEGER;\n    for (var i = 0; i < arr.length; i++) {\n   \
    \     var current = arr[i];\n        if (current % 2 == 0 && current < smallestEven)\
    \ {\n            smallestEven = current;\n            smallestEvenIndex = i;\n\
    \        }\n    }\n\n    if (smallestEven == Number.MAX_SAFE_INTEGER) {\n    \
    \    return [];\n    }\n\n    return [smallestEven, smallestEvenIndex];\n}\n",
  "  const result = arr.filter(x => x !== null && x % 2 === 0).sort((a, b) => a -\
    \ b);\n  if (result.length > 0) {\n    return [result[0], arr.indexOf(result[0])];\n\
    \  }\n  return [];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const\
    \ evens = arr.filter(n => n % 2 === 0);\n  if (evens.length === 0) {\n    return\
    \ [];\n  }\n  const smallest = Math.min(...evens);\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n", "  let result: number[] = [];\n  let minIndex: number = 0;\n  let minEven:\
    \ number = 0;\n  let evenFound: boolean = false;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      if (!evenFound) {\n        minEven\
    \ = arr[i];\n        minIndex = i;\n        evenFound = true;\n      } else if\
    \ (arr[i] < minEven) {\n        minEven = arr[i];\n        minIndex = i;\n   \
    \   }\n    }\n  }\n  if (evenFound) {\n    result = [minEven, minIndex];\n  }\n\
    \  return result;\n}\n\nconsole.log(pluck([4, 2, 3])); // [2, 1]\nconsole.log(pluck([1,\
    \ 2, 3])); // [2, 1]\nconsole.log(pluck([])); // []\nconsole.log(pluck([5, 0,\
    \ 3, 0, 4, 2])); // [0, 1]", "  const evenNums = arr.filter(n => n % 2 === 0);\n\
    \  if (evenNums.length === 0) {\n    return [];\n  }\n  const [min] = evenNums.sort((a,\
    \ b) => a - b);\n  return [min, arr.indexOf(min)];\n}\n\nexport { pluck };", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  const res = [];\n  let minEven\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      res[0]\
    \ = minEven;\n      res[1] = i;\n    }\n  }\n  return res.length === 0 ? [] :\
    \ res;\n}", "  if (arr.length === 0) {\n    return [];\n  }\n  let minEven = Number.MAX_SAFE_INTEGER;\n\
    \  let minEvenIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n      minEvenIndex\
    \ = i;\n    }\n  }\n  if (minEvenIndex === -1) {\n    return [];\n  }\n  return\
    \ [minEven, minEvenIndex];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let minIndex = evens.indexOf(Math.min(...evens));\n    if (minIndex > -1)\
    \ {\n        return [evens[minIndex], arr.indexOf(evens[minIndex])];\n    }\n\
    \    return [];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2,\
    \ 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  let smallestEven = arr[0];\n\
    \  let smallestEvenIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n\
    \      smallestEvenIndex = i;\n    }\n  }\n  if (smallestEven % 2 === 0) {\n \
    \   return [smallestEven, smallestEvenIndex];\n  } else {\n    return [];\n  }\n\
    }\n", "    const evenNumbers: number[] = [];\n    let smallestEvenNumber: number;\n\
    \    let smallestEvenNumberIndex: number;\n    let smallestEvenNumberIndexCounter:\
    \ number = 0;\n    arr.forEach((x: number, i: number) => {\n        if (x % 2\
    \ === 0) {\n            evenNumbers.push(x);\n        }\n    });\n    if (evenNumbers.length\
    \ === 0) {\n        return [];\n    }\n    smallestEvenNumber = evenNumbers[0];\n\
    \    smallestEvenNumberIndex = 0;\n    evenNumbers.forEach((x: number, i: number)\
    \ => {\n        if (x < smallestEvenNumber) {\n            smallestEvenNumber\
    \ = x;\n            smallestEvenNumberIndex = i;\n        }\n    });\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] === smallestEvenNumber)\
    \ {\n            smallestEvenNumberIndexCounter++;\n            if (smallestEvenNumberIndexCounter\
    \ === smallestEvenNumberIndex + 1) {\n                return [smallestEvenNumber,\
    \ i];\n            }\n        }\n    }\n    return [];\n}\n\nexport { pluck };",
  "  let evens = arr.filter(x => x % 2 === 0);\n  let smallestEven = evens.length\
    \ === 0 ? -1 : Math.min(...evens);\n  let smallestEvenIndex = arr.indexOf(smallestEven);\n\
    \  return smallestEven === -1 ? [] : [smallestEven, smallestEvenIndex];\n}\n",
  "  return arr\n    .filter(n => n % 2 === 0)\n    .sort((a, b) => a - b)\n    .map((n,\
    \ i) => [n, i]);\n}\n", "    if (arr.length === 0) {\n        return [];\n   \
    \ }\n    let min = Infinity;\n    let minIndex = Infinity;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] < min && arr[i] % 2 === 0) {\n  \
    \          min = arr[i];\n            minIndex = i;\n        }\n    }\n    if\
    \ (min !== Infinity) {\n        return [min, minIndex];\n    }\n    return [];\n\
    }\n", "    if (arr.length === 0) {\n        return [];\n    }\n    const set =\
    \ new Set();\n    for (let item of arr) {\n        if (item % 2 === 0) {\n   \
    \         set.add(item);\n        }\n    }\n    if (set.size === 0) {\n      \
    \  return [];\n    }\n    let min = Math.min(...set);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let newArr: number[] = [];\n    let even: number[] = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n           \
    \ even.push(arr[i]);\n        }\n    }\n    if (even.length === 0) {\n       \
    \ return [];\n    }\n    else {\n        let temp = Math.min(...even);\n     \
    \   for (let j = 0; j < arr.length; j++) {\n            if (arr[j] === temp) {\n\
    \                newArr.push(temp);\n                newArr.push(j);\n       \
    \         return newArr;\n            }\n        }\n    }\n}\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  if (arr.length === 0) {\n    return [];\n  }\n  const\
    \ evens = arr.filter(v => v % 2 === 0);\n  if (evens.length === 0) {\n    return\
    \ [];\n  }\n  let minEven = Math.min(...evens);\n  let minEvenIdx = arr.indexOf(minEven);\n\
    \  return [minEven, minEvenIdx];\n}\n", "    if (arr.length === 0) {\n       \
    \ return [];\n    }\n    let ind: number;\n    let min: number = arr[0];\n   \
    \ let minind: number = 0;\n    let chk: boolean = false;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] < min && arr[i] % 2 === 0) {\n  \
    \          min = arr[i];\n            minind = i;\n            chk = true;\n \
    \       }\n    }\n    if (chk) {\n        ind = minind;\n    } else {\n      \
    \  min = 0;\n        ind = 0;\n    }\n    return [min, ind];\n}\n", "  const even\
    \ = arr.filter(num => num % 2 === 0);\n  const min = Math.min(...even);\n  return\
    \ arr.indexOf(min) === -1 ? [] : [min, arr.indexOf(min)];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    let evens = arr.filter(n => n % 2 === 0);\n    if (evens.length\
    \ > 0) {\n        let minEven = Math.min(...evens);\n        return [minEven,\
    \ arr.indexOf(minEven)];\n    } else {\n        return [];\n    }\n}", "  let\
    \ min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  let index = 0;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min)\
    \ {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  if (min === Number.MAX_SAFE_INTEGER)\
    \ {\n    return [];\n  }\n  return [min, minIndex];\n}\n\nexport { pluck };",
  "    return arr.reduce((acc: number[], curr: number, i: number): number[] => {\n\
    \        if (curr % 2 === 0) {\n            if (acc.length === 0) {\n        \
    \        acc = [curr, i];\n            } else if (curr < acc[0]) {\n         \
    \       acc = [curr, i];\n            }\n        }\n        return acc;\n    },\
    \ []);\n}\n\nexport default pluck;", "  // TODO: Do this problem\n  return [];\n\
    }\n", "  let smallestEven = Number.MAX_SAFE_INTEGER;\n  let index = Number.MAX_SAFE_INTEGER;\n\
    \  arr.forEach((value, i) => {\n    if (value % 2 === 0 && value < smallestEven)\
    \ {\n      smallestEven = value;\n      index = i;\n    }\n  });\n  return index\
    \ !== Number.MAX_SAFE_INTEGER ? [smallestEven, index] : [];\n}\n\nexport { pluck\
    \ };", "  const evens = arr.filter(num => num % 2 === 0);\n  if (evens.length\
    \ > 0) {\n    const minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n\
    \  } else {\n    return [];\n  }\n}\n", "  const evens = arr.filter(x => x % 2\
    \ === 0);\n  return evens.length === 0\n    ? []\n    : [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n\
    }\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const evenArr = arr.filter((n)\
    \ => n % 2 === 0);\n  if (evenArr.length === 0) {\n    return [];\n  }\n  const\
    \ minEven = Math.min(...evenArr);\n  const index = arr.indexOf(minEven);\n  return\
    \ [minEven, index];\n}\n\nconsole.log(pluck([1, 2, 3]), [2, 1]);\nconsole.log(pluck([4,\
    \ 2, 3]), [2, 1]);\nconsole.log(pluck([1, 2, 3]), [2, 1]);\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]), [0, 1]);\nconsole.log(pluck([]), []);\nconsole.log(pluck([1,\
    \ 2, 3, 4, 6, 7, 8, 9, 10]), [2, 1]);\nconsole.log(pluck([2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]), [2, 0]);\nconsole.log(pluck([3, 4, 5, 6, 7, 8, 9, 10]), [4, 1]);\n\
    console.log(pluck([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2", "  let even = arr.filter(x => x % 2\
    \ === 0);\n  let idx = arr.indexOf(Math.min(...even));\n  if (even.length ===\
    \ 0) {\n    return [];\n  }\n  return [even[0], idx];\n}\n\nexport { pluck };",
  "  const evens = arr.filter(item => item % 2 === 0);\n  const minEven = Math.min(...evens);\n\
    \  const smallestEvenIdx = arr.indexOf(minEven);\n  if (evens.length === 0) {\n\
    \    return [];\n  }\n  return [minEven, smallestEvenIdx];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    const idx = {};\n    const even = arr.filter(a => a\
    \ % 2 === 0).sort((a, b) => a - b);\n    const result = even.length === 0 ? []\
    \ : even[0];\n    arr.forEach((n, i) => n === result && (idx[i] = true));\n  \
    \  return Object.keys(idx).length === 0 ? [] : [result, Object.keys(idx).sort((a,\
    \ b) => a - b)[0]];\n}\n", "    const evens = arr.filter(i => i % 2 === 0);\n\
    \    const smallestEven = Math.min(...evens);\n    const idx = arr.indexOf(smallestEven);\n\
    \    return [ smallestEven, idx ];\n}\nexport { pluck };", "  const x = arr.reduce((acc,\
    \ v, i) => {\n    if (acc[0] !== -1 && v === acc[0]) {\n      acc[1] = Math.min(acc[1],\
    \ i);\n    } else if (v % 2 === 0 && (acc[0] === -1 || v < acc[0])) {\n      acc[0]\
    \ = v;\n      acc[1] = i;\n    }\n    return acc;\n  }, [-1, -1]);\n  return x[0]\
    \ === -1 ? [] : x;\n}\n", "  let min = Infinity;\n  let minIdx = -1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n\
    \      min = arr[i];\n      minIdx = i;\n    }\n  }\n  return minIdx === -1 ?\
    \ [] : [min, minIdx];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\
    \  let evens = arr.filter(item => item % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}", "  const evens = arr.filter(e => e % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n\n  const min = Math.min(...evens);\n\
    \  const result = arr.reduce((acc, cv, index) => {\n    if (cv === min) {\n  \
    \    acc.push(index);\n    }\n    return acc;\n  }, []);\n\n  return [min, result[0]];\n\
    }\n\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  let result = [];\n  if (arr.length === 0) {\n    return\
    \ result;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 ===\
    \ 0) {\n      result.push(arr[i]);\n    }\n  }\n  if (result.length === 0) {\n\
    \    return result;\n  } else {\n    result.sort((a, b) => a - b);\n    return\
    \ [result[0], arr.indexOf(result[0])];\n  }\n}\n", "  if (arr.length === 0) {\n\
    \    return [];\n  }\n  const evenNumbers = arr.filter(item => item % 2 === 0);\n\
    \  const smallest = Math.min(...evenNumbers);\n  const smallestIndex = arr.indexOf(smallest);\n\
    \  return [smallest, smallestIndex];\n}\n", "    return pluck_2(arr);\n}\n", " \
    \ let smallestEven = Infinity;\n  let indexOfSmallestEven = Infinity;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven)\
    \ {\n      smallestEven = arr[i];\n      indexOfSmallestEven = i;\n    }\n  }\n\
    \  return smallestEven === Infinity ? [] : [smallestEven, indexOfSmallestEven];\n\
    }\n", "  const array = [];\n  const filtered = arr.filter((n) => n % 2 === 0);\n\
    \  const value = Math.min(...filtered);\n  const index = arr.indexOf(value);\n\
    \  array.push(value, index);\n  return array;\n}", "  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  const minEven = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n\nexport { pluck };", "    return [];\n}\n\nexport\
    \ { pluck };", "  if (arr.length === 0) {\n    return [];\n  }\n  let evenIndex:\
    \ number = -1;\n  let minEven: number = Number.MAX_SAFE_INTEGER;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] !== 0 && arr[i] % 2 === 0) {\n \
    \     if (minEven > arr[i]) {\n        minEven = arr[i];\n        evenIndex =\
    \ i;\n      }\n    }\n  }\n  if (evenIndex === -1) {\n    return [];\n  }\n  return\
    \ [minEven, evenIndex];\n}\n", "    let smallestEvenIndex = -1;\n    let smallestEvenNumber\
    \ = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        const element\
    \ = arr[i];\n        if (element % 2 === 0 && element < smallestEvenNumber) {\n\
    \            smallestEvenNumber = element;\n            smallestEvenIndex = i;\n\
    \        }\n    }\n    if (smallestEvenIndex === -1) {\n        return [];\n \
    \   }\n    return [smallestEvenNumber, smallestEvenIndex];\n}\n\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "  let smallestValueIndex = Infinity;\n  let smallestValue = Infinity;\n  let evenFound\
    \ = false;\n  arr.forEach((x, i) => {\n    if (x % 2 === 0 && x < smallestValue)\
    \ {\n      smallestValue = x;\n      smallestValueIndex = i;\n      evenFound\
    \ = true;\n    }\n  });\n  return evenFound ? [smallestValue, smallestValueIndex]\
    \ : [];\n}\n", "  let min: number = null;\n  let minIndex: number = null;\n  arr.forEach((node,\
    \ index) => {\n    if (node % 2 === 0) {\n      if (min === null || node < min)\
    \ {\n        min = node;\n        minIndex = index;\n      }\n    }\n  });\n \
    \ return min !== null ? [min, minIndex] : [];\n}\n\nexport default pluck;", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  const evens = arr.filter(x =>\
    \ x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n", "    let idx\
    \ = -1;\n    let smallest = -1;\n    arr.forEach((num, i) => {\n        if (num\
    \ % 2 === 0 && (smallest === -1 || num < smallest)) {\n            smallest =\
    \ num;\n            idx = i;\n        }\n    });\n    return smallest !== -1 ?\
    \ [smallest, idx] : [];\n}\n", "  let result: number[] = [];\n  let evenList:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2\
    \ === 0) {\n      evenList.push(arr[i]);\n    }\n  }\n  if (evenList.length >\
    \ 0) {\n    let evenMin = Math.min(...evenList);\n    let index = arr.indexOf(evenMin);\n\
    \    result.push(evenMin, index);\n  }\n  return result;\n}\n", "    // const\
    \ evens = arr.filter(item => item % 2 === 0).sort((a, b) => a - b);\n    // return\
    \ evens.length ? [evens[0], arr.indexOf(evens[0])] : [];\n    let evenNum: number\
    \ = -1;\n    let evenIndex: number = -1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] !== 0 && arr[i] % 2 === 0) {\n            if (evenNum\
    \ === -1) {\n                evenNum = arr[i];\n                evenIndex = i;\n\
    \            } else if (arr[i] < evenNum) {\n                evenNum = arr[i];\n\
    \                evenIndex = i;\n            }\n        }\n    }\n    return evenNum\
    \ === -1 ? [] : [evenNum, evenIndex];\n}\n\nexport { pluck };", "  let evens =\
    \ arr.filter(element => element % 2 === 0);\n  let smallestEven = evens.length\
    \ > 0 ? Math.min(...evens) : undefined;\n  let smallestEvenIndex = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, smallestEvenIndex];\n}\n", "  const evenValues: number[]\
    \ = [];\n  const evenValuesIdx: number[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      evenValues.push(arr[i]);\n      evenValuesIdx.push(i);\n\
    \    }\n  }\n  const minEvenValue = Math.min(...evenValues);\n  const minEvenValueIdx\
    \ = evenValuesIdx[evenValues.indexOf(minEvenValue)];\n  if (evenValues.length\
    \ > 0) {\n    return [minEvenValue, minEvenValueIdx];\n  }\n  return [];\n}\n",
  "  let ret: number[] = [];\n  let val: number = -1;\n  let ind: number = -1;\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if\
    \ (val === -1) {\n        val = arr[i];\n        ind = i;\n      } else if (arr[i]\
    \ < val) {\n        val = arr[i];\n        ind = i;\n      }\n    }\n  }\n  if\
    \ (val > -1) {\n    ret = [val, ind];\n  }\n  return ret;\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  // TODO\n  // let result = arr.filter(item => item %\
    \ 2 === 0);\n  // let first = result[0];\n  // let index = arr.indexOf(first);\n\
    \  // return [first, index];\n  if (arr.length === 0) {\n    return [];\n  }\n\
    \  let index: number = 0;\n  let result: number = arr[0];\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < result)\
    \ {\n        result = arr[i];\n        index = i;\n      }\n    }\n  }\n  if (result\
    \ % 2 === 0) {\n    return [result, index];\n  } else {\n    return [];\n  }\n\
    }\n\ndescribe(\"Pluck\", () => {\n  it(\"should pass the example tests\", () =>\
    \ {\n    expect(pluck([4, 2, 3])).to.deep.equal([2, 1]);\n    expect(pluck([1,\
    \ 2, 3])).to.deep.equal([2, 1]);\n    expect(pluck([])).to.deep.equal([]);\n \
    \   expect(pluck([5, 0, 3, 0, 4, 2])).to.deep.equal([0, 1]);\n  });\n});", " \
    \   let evenArr: number[] = [];\n    let indexArr: number[] = [];\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0) {\n            evenArr.push(arr[i]);\n            indexArr.push(i);\n\
    \        }\n    }\n    if (evenArr.length === 0) {\n        return [];\n    }\n\
    \    let min: number = Math.min(...evenArr);\n    let minIndex: number = indexArr[evenArr.indexOf(min)];\n\
    \    result.push(min, minIndex);\n    return result;\n}\nlet test: number[] =\
    \ pluck([4, 2, 3]);\nconsole.log(test);", "  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minIndex = 0;\n  arr.forEach((el, index) => {\n    if (el % 2 === 0 &&\
    \ el < min) {\n      min = el;\n      minIndex = index;\n    }\n  });\n  return\
    \ min === Number.MAX_SAFE_INTEGER ? [] : [min, minIndex];\n}\n\nexport { pluck\
    \ };", "  let result: number[] = [];\n  let smallestEven: number = null;\n  let\
    \ smallestEvenIndex: number = null;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0) {\n      if (smallestEven === null) {\n        smallestEven\
    \ = arr[i];\n        smallestEvenIndex = i;\n      } else if (arr[i] < smallestEven)\
    \ {\n        smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n\
    \    }\n  }\n  if (smallestEven !== null) {\n    result.push(smallestEven);\n\
    \    result.push(smallestEvenIndex);\n  }\n  return result;\n}", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  const result = [];\n  let smallestEven = arr[0];\n\
    \  let index = 0;\n  let smallestIndex = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n\
    \  if (result.length === 0) {\n    return [];\n  }\n  smallestEven = result[0];\n\
    \  for (let i = 0; i < result.length; i++) {\n    if (result[i] < smallestEven)\
    \ {\n      smallestEven = result[i];\n      smallestIndex = i;\n    }\n  }\n \
    \ for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === smallestEven) {\n\
    \      index = i;\n      break;\n    }\n  }\n  return [smallestEven, index];\n\
    }\n", "    if (!arr.length) return [];\n    const evens = arr.filter(num => num\
    \ % 2 === 0);\n    if (!evens.length) return [];\n    const smallestEven = Math.min(...evens);\n\
    \    const smallestEvenIndex = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ smallestEvenIndex];\n}\n", "    if (!arr.length) return [];\n    const even\
    \ = arr.filter(a => a % 2 === 0);\n    const min = Math.min(...even);\n    return\
    \ even.includes(min) ? [min, arr.indexOf(min)] : [];\n}\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    if (arr.length === 0) {\n        return [];\n    }\n\
    \    let result: number[] = [];\n    let smallest = Infinity;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallest)\
    \ {\n            smallest = arr[i];\n            result = [smallest, i];\n   \
    \     }\n    }\n    return smallest === Infinity ? [] : result;\n}\n", "    let\
    \ smallest = Infinity;\n    let index = -1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const val = arr[i];\n        if (val < smallest && val % 2 ===\
    \ 0) {\n            smallest = val;\n            index = i;\n        }\n    }\n\
    \    return index >= 0 ? [smallest, index] : [];\n}\n", "    let smallestEven\
    \ = Number.MAX_SAFE_INTEGER;\n    let evenIndex = 0;\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n\
    \            smallestEven = arr[i];\n            evenIndex = i;\n        }\n \
    \   }\n    if (smallestEven === Number.MAX_SAFE_INTEGER) {\n        return [];\n\
    \    }\n    return [smallestEven, evenIndex];\n}\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "  const even = arr.filter(n => n % 2 === 0).sort();\n \
    \ return even.length ? [even[0], arr.indexOf(even[0])] : [];\n}\n\nexport default\
    \ pluck;", "  if (arr.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = null;\n  let smallestEvenIndex = null;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const even = arr[i] % 2 === 0;\n    if (even) {\n      if (smallestEven\
    \ === null || arr[i] < smallestEven) {\n        smallestEven = arr[i];\n     \
    \   smallestEvenIndex = i;\n      }\n    }\n  }\n  if (smallestEven === null)\
    \ {\n    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n", " \
    \   const array: number[] = [];\n    const evenArray: number[] = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n      \
    \      evenArray.push(arr[i]);\n        }\n    }\n    if (evenArray.length !==\
    \ 0) {\n        array.push(Math.min(...evenArray));\n        array.push(arr.indexOf(Math.min(...evenArray)));\n\
    \    }\n    return array;\n}\n\nexport default pluck;", "    const even = arr.filter(el\
    \ => el % 2 === 0);\n    if (even.length === 0) {\n        return [];\n    }\n\
    \    return [Math.min(...even), arr.indexOf(Math.min(...even))];\n}\n", "  let\
    \ min = Number.MAX_SAFE_INTEGER;\n  let minIndex = -1;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    const value = arr[i];\n    if (value % 2 === 0 && value\
    \ < min) {\n      min = value;\n      minIndex = i;\n    }\n  }\n  return minIndex\
    \ > -1 ? [min, minIndex] : [];\n}\n", "  if (arr.length === 0) {\n    return [];\n\
    \  }\n  const evens = arr.filter(a => a % 2 === 0);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  const min = Math.min(...evens);\n  const index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\nexport { pluck };", "  let evens = arr.filter(n\
    \ => n % 2 === 0);\n  return evens.length === 0\n    ? []\n    : [Math.min(...evens),\
    \ arr.indexOf(Math.min(...evens))];\n}\n\nconsole.log(pluck([4, 2, 3])); //?\n\
    console.log(pluck([1, 2, 3])); //?\nconsole.log(pluck([])); //?\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2])); //?", "  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex\
    \ = -1;\n  arr.forEach((el, index) => {\n    if (el % 2 === 0 && el < min) {\n\
    \      min = el;\n      minIndex = index;\n    }\n  });\n  return minIndex >=\
    \ 0 ? [min, minIndex] : [];\n}\n\nexport default pluck;", "    const res = arr.filter(n\
    \ => n % 2 === 0).sort((a, b) => a - b);\n    if (res.length === 0) {\n      \
    \  return [];\n    }\n    return [res[0], arr.indexOf(res[0])];\n}\n", "    let\
    \ smallestIndex = Infinity;\n    let smallestEvenValue = Infinity;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < smallestEvenValue)\
    \ {\n            smallestEvenValue = arr[i];\n            smallestIndex = i;\n\
    \        }\n    }\n    return smallestEvenValue === Infinity ? [] : [smallestEvenValue,\
    \ smallestIndex];\n}\n", "  // write your code here.\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  const even = arr.filter((i) => i % 2 === 0);\n  if\
    \ (even.length === 0) {\n    return [];\n  }\n  return [\n    Math.min(...even),\n\
    \    arr.findIndex((v) => v === Math.min(...even)),\n  ];\n}\n", "    let evenNum:\
    \ number[] = arr.filter(a => a % 2 === 0);\n    let minEven = Math.min(...evenNum);\n\
    \    if (minEven > 0) {\n        return [minEven, arr.indexOf(minEven)];\n   \
    \ } else {\n        return [];\n    }\n}\n", "  const evens = arr.filter(n =>\
    \ n % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n\n  const minEven\
    \ = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n  return [minEven,\
    \ index];\n}\n\ndescribe('pluck', () => {\n  it('returns the smallest even value\
    \ in the array', () => {\n    const array = [4, 2, 3];\n    expect(pluck(array)).toEqual([2,\
    \ 1]);\n  });\n\n  it('returns the first even value when there are multiple even\
    \ values', () => {\n    const array = [5, 0, 3, 0, 4, 2];\n    expect(pluck(array)).toEqual([0,\
    \ 1]);\n  });\n\n  it('returns an empty array when there are no even values',\
    \ () => {\n    const array = [1, 2, 3];\n    expect(pluck(array)).toEqual([2,\
    \ 1]);\n  });\n\n  it('returns an empty array when the array is empty', () =>\
    \ {\n    const array: number[] = [];\n    expect(pluck(array)).toEqual([]);\n\
    \  });\n});", "    const result = [];\n    let min = Infinity;\n    let index\
    \ = -1;\n    arr.forEach((num, i) => {\n        if (num % 2 === 0 && num < min)\
    \ {\n            result.push(num);\n            min = num;\n            index\
    \ = i;\n        }\n    });\n    if (index > -1) {\n        result.push(index);\n\
    \    }\n    return result;\n}\n", "  let results: number[] = [];\n  arr.forEach((node,\
    \ i) => {\n    if (node % 2 === 0) {\n      results.push(node, i);\n    }\n  });\n\
    \  if (results.length > 0) {\n    return [results[0], results[1]];\n  } else {\n\
    \    return [];\n  }\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "  let index = -1;\n  let ans = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   const val = arr[i];\n    if (val % 2 === 0) {\n      if (ans === 0) {\n  \
    \      ans = val;\n        index = i;\n      } else if (val < ans) {\n       \
    \ ans = val;\n        index = i;\n      }\n    }\n  }\n  return ans === 0 ? []\
    \ : [ans, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    if (arr.length == 0) return [];\n    let smallestEven = -1;\n    let smallestEvenIndex\
    \ = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallestEven == -1) {\n                smallestEven =\
    \ arr[i];\n                smallestEvenIndex = i;\n            } else if (arr[i]\
    \ < smallestEven) {\n                smallestEven = arr[i];\n                smallestEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (smallestEven == -1) return [];\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "  const evenArr = arr.filter(item\
    \ => item % 2 === 0);\n  const min = Math.min(...evenArr);\n  const index = arr.indexOf(min);\n\
    \  return index === -1 ? [] : [min, index];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
