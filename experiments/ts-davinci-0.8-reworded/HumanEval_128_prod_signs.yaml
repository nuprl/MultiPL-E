name: HumanEval_128_prod_signs
language: ts
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number\
  \ | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2,\
  \ -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
  \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["    if (!arr.length) return undefined;\n    return arr.reduce((p, v)\
    \ => p * Math.sign(v), 1) * arr.reduce((p, v) => p + Math.abs(v), 0);\n}\n", " \
    \ let sum: number = 0;\n  let prod: number = 1;\n  if (arr.length === 0) {\n \
    \   return undefined;\n  }\n  for (let i: number = 0; i < arr.length; i++) {\n\
    \    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum\
    \ * prod;\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0,\
    \ 1]));\nconsole.log(prod_signs([]));\n", "    if (arr.length == 0) return undefined;\n\
    \    const product = arr.reduce((acc, curr) => {\n        if (curr == 0) acc =\
    \ 0;\n        else if (curr > 0) acc *= 1;\n        else acc *= -1;\n        return\
    \ acc;\n    }, 1);\n    const sum = arr.reduce((acc, curr) => {\n        if (curr\
    \ < 0) curr *= -1;\n        return acc + curr;\n    }, 0);\n    return sum * product;\n\
    }\n", "    if (arr.length == 0) return undefined;\n    let sumOfAbsNumbers = 0;\n\
    \    let productOfSigns = 1;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     let number = arr[i];\n        if (number > 0) {\n            productOfSigns\
    \ *= 1;\n        } else if (number < 0) {\n            productOfSigns *= -1;\n\
    \        } else {\n            productOfSigns *= 0;\n        }\n        sumOfAbsNumbers\
    \ += Math.abs(number);\n    }\n    return sumOfAbsNumbers * productOfSigns;\n\
    }\n", "    return arr.length === 0 ? undefined : arr.reduce((a, b) => a + b) *\
    \ arr.reduce((a, b) => a * (b ? (b > 0 ? 1 : -1) : 0), 1);\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    let product\
    \ = arr.reduce((x, y) => Math.sign(x) * Math.sign(y), 1);\n    let sum = arr.reduce((x,\
    \ y) => Math.abs(x) + Math.abs(y), 0);\n    return product * sum;\n}\n", "   \
    \ let x: number = 1;\n    let y: number = 0;\n    if (arr.length === 0) return\
    \ undefined;\n    for (let i: number = 0; i < arr.length; i++) {\n        x *=\
    \ arr[i] / Math.abs(arr[i]);\n        y += Math.abs(arr[i]);\n    }\n    return\
    \ x * y;\n}\n", "    if (!arr.length) return undefined;\n    let prodSigns = 1;\n\
    \    let sumMag = 0;\n    for (let i = 0; i < arr.length; i++) {\n        prodSigns\
    \ *= (arr[i] < 0 ? -1 : (arr[i] > 0 ? 1 : 0));\n        sumMag += Math.abs(arr[i]);\n\
    \    }\n    return sumMag * prodSigns;\n}\n", "    if (arr.length == 0) {\n  \
    \      return undefined;\n    }\n    let countNegative: number = 0;\n    let countPositive:\
    \ number = 0;\n    let countZero: number = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            countNegative += 1;\n       \
    \ } else if (arr[i] > 0) {\n            countPositive += 1;\n        } else {\n\
    \            countZero += 1;\n        }\n    }\n    let result: number = 1;\n\
    \    if (countZero > 0) {\n        return 0;\n    } else if (countNegative % 2\
    \ == 0) {\n        return Math.abs(arr[0]) * Math.abs(arr[1]);\n    } else {\n\
    \        return -1 * Math.abs(arr[0]) * Math.abs(arr[1]);\n    }\n}\n", "    let\
    \ len = arr.length;\n    if (len === 0) {\n        return undefined;\n    }\n\
    \    return arr.reduce((acc, val) => {\n        return acc + Math.abs(val) * prod(val,\
    \ len);\n    }, 0);\n}\n", "    if (arr.length === 0) return undefined;\n    let\
    \ res: number = 1;\n    let sign: number = 1;\n    let sum: number = 0;\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n          \
    \  res *= arr[i];\n            sign *= sign_num(arr[i]);\n            sum += Math.abs(arr[i]);\n\
    \        }\n    }\n    return sign * sum;\n}\n\nconsole.log(prod_signs([1, 2,\
    \ 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod_sign\
    \ = 1;\n    let sum_abs = 0;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] < 0) {\n            prod_sign *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            prod_sign *= 1;\n        } else {\n            prod_sign\
    \ *= 0;\n        }\n        sum_abs += Math.abs(arr[i]);\n    }\n    return sum_abs\
    \ * prod_sign;\n}\n", "    let res = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        prod *= Math.sign(arr[i]);\n        res += Math.abs(arr[i]);\n\
    \    }\n    if (arr.length) {\n        return res * prod;\n    }\n    return undefined;\n\
    }\n", "    if (arr.length === 0) return undefined;\n    const sum: number = arr.reduce((acc,\
    \ curr) => Math.abs(curr) + acc, 0);\n    const sign: number = arr.reduce((acc,\
    \ curr) => Math.sign(curr) * acc, 1);\n    return sum * sign;\n}\n", "    // your\
    \ code here\n    return;\n}\n\n", "  return arr.length > 0\n    ? arr.reduce((acc,\
    \ el) => (acc += Math.abs(el) * Math.sign(el)), 0)\n    : undefined;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length == 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let item of arr) {\n        sum += Math.abs(item);\n\
    \        prod *= Math.sign(item);\n    }\n    return sum * prod;\n}", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let prod = 1;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    prod *= sign(arr[i]);\n  }\n  return prod;\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "  if (arr.length === 0) {\n    return undefined;\n  }\n  let mult = 1;\n  let sum\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n    \
    \  mult *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      mult\
    \ *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      mult *= 0;\n   \
    \ }\n  }\n  return sum * mult;\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]));\n\
    console.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let sign_product = 1;\n  let abs_sum\
    \ = 0;\n  for (let i of arr) {\n    if (i < 0) {\n      sign_product *= -1;\n\
    \    } else if (i > 0) {\n      sign_product *= 1;\n    } else {\n      sign_product\
    \ *= 0;\n    }\n    abs_sum += Math.abs(i);\n  }\n  return abs_sum * sign_product;\n\
    }\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let product =\
    \ 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > 0) {\n      product *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0)\
    \ {\n      product *= -1;\n      sum += arr[i] * -1;\n    } else {\n      product\
    \ *= 0;\n    }\n  }\n  return sum * product;\n}\n", "    if (arr.length === 0)\
    \ {\n        return undefined;\n    }\n    let r_nums = arr.map(x => x * (x >\
    \ 0 ? 1 : -1)).filter(x => x > 0);\n    let magnitudes = r_nums.reduce((acc, curr)\
    \ => acc + curr, 0);\n    let signs = arr.filter(x => x !== 0).map(x => x > 0\
    \ ? 1 : -1).reduce((acc, curr) => acc * curr, 1);\n    return magnitudes * signs;\n\
    }", "  const prod = arr.reduce((prod, x) => prod * Math.sign(x), 1);\n  if (prod\
    \ == 0) {\n    return 0;\n  }\n  return prod * arr.reduce((sum, x) => sum + Math.abs(x),\
    \ 0);\n}\n", "    if (arr.length == 0) return undefined;\n    let prod = arr.reduce((acc,\
    \ val) => (val == 0 ? 0 : (acc *= val > 0 ? 1 : -1)), 1);\n    return arr.reduce((acc,\
    \ val) => acc + Math.abs(val), 0) * prod;\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  let sum = 0;\n  let prod = 1;\n  for (let elem\
    \ of arr) {\n    sum += Math.abs(elem);\n    prod *= Math.sign(elem);\n  }\n \
    \ return sum * prod;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  const prod = arr.reduce((acc, val) => {\n    if (val === 0) {\n      return\
    \ 0;\n    }\n    return val > 0 ? acc * 1 : acc * -1;\n  }, 1);\n  return arr.reduce((acc,\
    \ val) => acc + Math.abs(val), 0) * prod;\n}\n", "  let total = 0;\n  let prod\
    \ = 1;\n  if (arr.length) {\n    arr.forEach((num) => {\n      if (num) {\n  \
    \      total += Math.abs(num);\n        if (num < 0) {\n          prod *= -1;\n\
    \        }\n      }\n    });\n    return total * prod;\n  }\n}\n", "    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n\
    \            continue;\n        }\n        prod *= Math.sign(arr[i]);\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n", "    // Your\
    \ code here!\n    // return undefined;\n}\n", "  if (!arr.length) return undefined;\n\
    \  const signs = arr.map(s => Math.sign(s));\n  return arr.reduce((acc, val) =>\
    \ acc + Math.abs(val), 0) * signs.reduce((acc, val) => acc * val, 1);\n}\n", " \
    \   if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ !== 0) {\n            sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n\
    \        }\n    }\n    return sum * prod;\n}\n", "    if (!arr.length) {\n   \
    \     return undefined;\n    }\n    return arr.reduce((acc, item) => {\n     \
    \   return acc + item * Math.sign(item);\n    }, 0);\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 2, -4])); // 9\nconsole.log(prod_signs([0, 1])); // 0\nconsole.log(prod_signs([]));\
    \ // undefined", "  if (arr.length === 0) {\n    return undefined;\n  }\n  const\
    \ prod = arr.reduce((pr, i) => pr * Math.sign(i), 1);\n  const sum = arr.reduce((su,\
    \ i) => su + Math.abs(i), 0);\n  return prod * sum;\n}\n", "    if (arr.length\
    \ === 0) return undefined;\n    let sign = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) sign *= -1;\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * sign;\n}\n", "  let product\
    \ = 0;\n  let sum = 0;\n  if (arr.length === 0) {\n    return undefined;\n  }\
    \ else {\n    for (let i = 0; i < arr.length; i++) {\n      product = product\
    \ * sign_of(arr[i]);\n      sum = sum + Math.abs(arr[i]);\n    }\n    return sum\
    \ * product;\n  }\n}\n", "  let signSum = 0;\n  let magnitudeSum = 0;\n  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  for (let i of arr) {\n    if (i > 0)\
    \ {\n      signSum += 1;\n      magnitudeSum += i;\n    } else if (i < 0) {\n\
    \      signSum -= 1;\n      magnitudeSum += Math.abs(i);\n    }\n  }\n  return\
    \ signSum * magnitudeSum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  let prodSign = 1;\n  let sumMagn = 0;\n  for (let num of arr) {\n    if\
    \ (num < 0) {\n      prodSign *= -1;\n    } else if (num > 0) {\n      prodSign\
    \ *= 1;\n    } else {\n      prodSign *= 0;\n    }\n    sumMagn += Math.abs(num);\n\
    \  }\n  return sumMagn * prodSign;\n}\n", "    if (arr.length === 0) {\n     \
    \   return undefined;\n    }\n    return arr.reduce((acc, curr) => {\n       \
    \ const sign = curr === 0 ? 0 : curr > 0 ? 1 : -1;\n        const magnitude =\
    \ Math.abs(curr);\n        return acc + sign * magnitude;\n    }, 0);\n}", " \
    \ if (arr.length == 0) {\n    return undefined;\n  }\n  let sum = 0;\n  let prod\
    \ = 1;\n  arr.forEach((x) => {\n    sum += Math.abs(x);\n    if (x != 0) {\n \
    \     prod *= Math.sign(x);\n    }\n  });\n  return sum * prod;\n}\n", "    return\
    \ arr.length ? arr.map(Math.abs).reduce((magnitudes, magnitude) => magnitudes\
    \ * magnitude) * arr.map(n => Math.sign(n)).reduce((signs, sign) => signs * sign)\
    \ : undefined;\n}\n", "    if (arr.length == 0) {\n        return undefined;\n\
    \    }\n    let product = 1;\n    let sum = 0;\n    for (let num of arr) {\n \
    \       sum += Math.abs(num);\n        if (num < 0) {\n            product *=\
    \ -1;\n        } else if (num > 0) {\n            product *= 1;\n        }\n \
    \   }\n    return sum * product;\n}\n", "    if (arr.length === 0) {\n       \
    \ return undefined;\n    }\n    const signs: number[] = arr.map(x => Math.sign(x));\n\
    \    const mult = (a: number, b: number) => a * b;\n    const prod = signs.reduce(mult);\n\
    \    const abs = (a: number) => Math.abs(a);\n    const magnitudes = arr.map(abs);\n\
    \    const sum = magnitudes.reduce((a, b) => a + b);\n    return sum * prod;\n\
    }\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n\n  const magnitudes\
    \ = arr.map(Math.abs);\n  const signProducts = magnitudes.map(x => Math.sign(x)).reduce((a,\
    \ b) => a * b);\n  const magnitudeSums = magnitudes.reduce((a, b) => a + b);\n\
    \n  return signProducts * magnitudeSums;\n}\n\nconsole.log(prod_signs([1, 2, 2,\
    \ -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));", " \
    \ const result =\n    arr.length > 0\n      ? arr.reduce((a, b) => (b >= 0 ? a\
    \ * 1 : a * -1), 1) *\n        arr.reduce((a, b) => Math.abs(a) + Math.abs(b),\
    \ 0)\n      : undefined;\n  return result;\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  let sum = 0;\n  let product = 1;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n\
    \    sum += Math.abs(arr[i]);\n    product *= arr[i] > 0 ? 1 : -1;\n  }\n  return\
    \ sum * product;\n}\n\ndescribe(\"prod_signs\", () => {\n  it(\"returns undefined\
    \ for an empty array\", () => {\n    assert.equal(prod_signs([]), undefined);\n\
    \  });\n  it(\"returns the correct value\", () => {\n    assert.equal(prod_signs([1,\
    \ 2, 2, -4]), 9);\n    assert.equal(prod_signs([0, 1]), 0);\n  });\n});", "  if\
    \ (!arr.length) return undefined;\n  let productOfSigns = arr.reduce((acc, val)\
    \ => {\n    return val > 0 ? (acc *= 1) : val < 0 ? (acc *= -1) : (acc *= 0);\n\
    \  }, 1);\n  let sumMagnitudes = arr.reduce((acc, val) => {\n    return acc +\
    \ Math.abs(val);\n  }, 0);\n  return productOfSigns * sumMagnitudes;\n}\n", " \
    \ if (arr.length === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  let product\
    \ = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n\
    \    product *= Math.sign(arr[i]);\n  }\n  return sum * product;\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "  if (arr.length == 0) {\n    return undefined;\n  }\n\n  let signProduct = 1;\n\
    \  let magSum = 0;\n  arr.forEach(function (num) {\n    signProduct *= sign(num);\n\
    \    magSum += magnitude(num);\n  });\n\n  return signProduct * magSum;\n}\n",
  "    if (arr.length == 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        prod *=\
    \ arr[i] > 0 ? 1 : arr[i] < 0 ? -1 : 0;\n        sum += Math.abs(arr[i]);\n  \
    \  }\n    return prod * sum;\n}\n", "    if (arr.length === 0) {\n        return\
    \ undefined;\n    }\n    return arr.reduce((acc, cur) => {\n        acc.multiplication\
    \ *= Math.sign(cur);\n        acc.sum += Math.abs(cur);\n        return acc;\n\
    \    }, { multiplication: 1, sum: 0 }).multiplication *\n        arr.reduce((acc,\
    \ cur) => {\n            acc.multiplication *= Math.sign(cur);\n            acc.sum\
    \ += Math.abs(cur);\n            return acc;\n        }, { multiplication: 1,\
    \ sum: 0 }).sum;\n}\n", "    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let sum: number = 0;\n    let prod: number = 1;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n        prod *=\
    \ arr[i] === 0 ? 1 : arr[i] / Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }", "    let output: number | undefined = 1;\n    if (arr.length === 0) {\n  \
    \      return undefined;\n    }\n    arr.forEach(num => {\n        if (num ===\
    \ 0) {\n            output = 0;\n        } else if (num < 0) {\n            output\
    \ *= -1;\n        }\n        output *= Math.abs(num);\n    });\n    return output;\n\
    }\n", "  if (arr.length == 0) {\n    return undefined;\n  }\n  let sum = 0;\n\
    \  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !=\
    \ 0) {\n      sum += Math.abs(arr[i]);\n      sign *= arr[i] < 0 ? -1 : 1;\n \
    \   }\n  }\n  return sum * sign;\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\n\
    console.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));", "    let prod:\
    \ number = 1;\n    let sum: number = 0;\n    let arr_num: number[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n        \
    \    arr_num.push(1);\n        } else if (arr[i] < 0) {\n            arr_num.push(-1);\n\
    \        } else {\n            arr_num.push(0);\n        }\n    }\n    for (let\
    \ j = 0; j < arr_num.length; j++) {\n        prod *= arr_num[j];\n    }\n    for\
    \ (let k = 0; k < arr.length; k++) {\n        sum += Math.abs(arr[k]);\n    }\n\
    \    if (arr.length === 0) {\n        return undefined;\n    } else {\n      \
    \  return sum * prod;\n    }\n}\nconsole.log(prod_signs([]));\n", "    if (arr.length\
    \ < 1) {\n        return undefined;\n    }\n\n    return arr.reduce((acc, next,\
    \ index, array) => {\n        const prodOfSigns = index === 1 ? array[0] : acc\
    \ * array[index - 1];\n        return prodOfSigns * Math.abs(next);\n    });\n\
    }\n\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\n\
    console.log(prod_signs([]));\n\nexport {};", "  if (arr.length === 0) {\n    return\
    \ undefined;\n  }\n  let sum = 0;\n  let prod = 1;\n  for (let i of arr) {\n \
    \   if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n      prod *= 1;\n\
    \    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(i);\n  }\n  return\
    \ sum * prod;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n\
    \  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] > 0) {\n      sign *= 1;\n    } else if (arr[i] < 0) {\n      sign\
    \ *= -1;\n    } else {\n      sign *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * sign;\n}\n", "    if (arr.length == 0) {\n        return\
    \ undefined;\n    }\n    let sum: number = 0;\n    let prod: number = 1;\n   \
    \ arr.forEach(element => {\n        sum += Math.abs(element);\n        prod *=\
    \ Math.sign(element);\n    });\n    return sum * prod;\n}\n", "    return arr.length\
    \ == 0 ? undefined : arr.map(\n        (num: number) => num == 0 ? 0 : num / Math.abs(num)\n\
    \    ).reduce(\n        (product: number, num: number) => product * num\n    )\
    \ * arr.map(\n        (num: number) => Math.abs(num)\n    ).reduce(\n        (sum:\
    \ number, num: number) => sum + num\n    );\n}\n", "    if (arr.length === 0)\
    \ {\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n\
    \    for (let num of arr) {\n        if (num === 0) {\n            product *=\
    \ 0;\n        } else if (num > 0) {\n            product *= 1;\n            sum\
    \ += num;\n        } else {\n            product *= -1;\n            sum += Math.abs(num);\n\
    \        }\n    }\n    return sum * product;\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  return arr.reduce((acc: number, val: number) =>\
    \ {\n    return acc + Math.abs(val) * Math.sign(val);\n  }, 0);\n}\n", "    let\
    \ sum: number = 0;\n    let prod: number = 1;\n    let sign: number = 0;\n   \
    \ if (arr.length > 0) {\n        for (let i: number = 0; i < arr.length; i++)\
    \ {\n            sum += Math.abs(arr[i]);\n            if (arr[i] !== 0) {\n \
    \               sign = arr[i] / Math.abs(arr[i]);\n                prod *= sign;\n\
    \            }\n        }\n        return sum * prod;\n    } else {\n        return\
    \ undefined;\n    }\n}\n", "  const sum = arr.reduce((total, current) => {\n \
    \   return total + Math.abs(current);\n  }, 0);\n  const product = arr.reduce((total,\
    \ current) => {\n    if (current > 0) {\n      return total * 1;\n    } else if\
    \ (current < 0) {\n      return total * -1;\n    } else {\n      return total\
    \ * 0;\n    }\n  }, 1);\n  return sum * product;\n}\n", "  if (arr.length ===\
    \ 0) {\n    return undefined;\n  }\n  let sum_mag: number = 0;\n  let prod_sign:\
    \ number = 1;\n  arr.forEach((num) => {\n    sum_mag += Math.abs(num);\n    if\
    \ (num === 0) {\n      prod_sign = 0;\n    } else {\n      prod_sign *= Math.sign(num);\n\
    \    }\n  });\n  return sum_mag * prod_sign;\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  let prodSigns = 1;\n  let sumMagnitudes = 0;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prodSigns\
    \ *= -1;\n    } else if (arr[i] > 0) {\n      prodSigns *= 1;\n    } else {\n\
    \      prodSigns *= 0;\n    }\n    sumMagnitudes += Math.abs(arr[i]);\n  }\n \
    \ return sumMagnitudes * prodSigns;\n}", "    if (arr.length === 0) {\n      \
    \  return undefined;\n    }\n    let res = 1;\n    for (let el of arr) {\n   \
    \     res *= Math.sign(el);\n    }\n    return res * arr.reduce((sum, value) =>\
    \ sum + Math.abs(value), 0);\n}\n", "  let sign: number = 1;\n  let sum: number\
    \ = 0;\n  if (arr.length == 0) {\n    return undefined;\n  }\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] == 0) {\n      sign = 0;\n      break;\n\
    \    }\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * sign;\n}\n", "    if (arr.length === 0) {\n        return\
    \ undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        const el = arr[i];\n        product *= Math.sign(el);\n\
    \        sum += Math.abs(el);\n    }\n    return product * sum;\n}\n", "    return\
    \ arr.length ? arr.map(x => Math.abs(x) * Math.sign(x)).reduce((a, b) => a + b)\
    \ : undefined;\n}\n", "    if (!arr.length) return undefined;\n    return arr.reduce((acc,\
    \ val) => acc + Math.abs(val) * val, 0);\n}\n", "  if (!arr.length) return undefined;\n\
    \  return arr.reduce((acc, e) => {\n    const sign = Math.sign(e);\n    if (sign\
    \ === -1) {\n      return acc * sign;\n    }\n    return acc * sign * Math.abs(e);\n\
    \  }, 1);\n}\n", "  return 0;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    sum += Math.abs(arr[i]);\n    if (arr[i] < 0) {\n      prod *= -1;\n\
    \    } else if (arr[i] > 0) {\n      prod *= 1;\n    }\n  }\n  return sum * prod;\n\
    }\n", "    let sum: number = 0;\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    const product = arr.reduce((x, y) => x * y);\n    arr.forEach(el =>\
    \ {\n        if (el > 0) {\n            sum += el;\n        } else if (el < 0)\
    \ {\n            sum += el * -1;\n        }\n    });\n    return sum * product;\n\
    }\n\n", "    let prod: number = 1;\n    let sum: number = 0;\n    for (let elem\
    \ of arr) {\n        prod *= Math.sign(elem);\n        sum += Math.abs(elem);\n\
    \    }\n    return sum * prod;\n}\n", "  let sum = 0;\n  let prod = 1;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n > 0) {\n\
    \      sum += n;\n      prod *= 1;\n    } else if (n < 0) {\n      sum += n *\
    \ -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n  }\n  return\
    \ sum * prod === 0 ? undefined : sum * prod;\n}\n", "    if (arr.length === 0)\
    \ {\n        return undefined;\n    }\n    return arr.reduce((total, current)\
    \ => {\n        return total + Math.abs(current) * Math.sign(current);\n    },\
    \ 0);\n}\n", "    if (arr.length === 0) return undefined;\n    return arr.reduce((acc,\
    \ val) => acc + Math.abs(val) * [1, -1, 0][Math.sign(val) + 1], 0);\n}\n", " \
    \ if (arr.length === 0) {\n    return undefined;\n  }\n\n  return arr.reduce((acc,\
    \ cur) => {\n    if (cur === 0) {\n      return acc;\n    }\n\n    return acc\
    \ * cur;\n  }, 1);\n}\n", "    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n\n    let prod: number = 1;\n    let sum: number = 0;\n\n    for (let\
    \ item of arr) {\n        let sign: number = item < 0 ? -1 : (item > 0 ? 1 : 0);\n\
    \        let magnitude: number = Math.abs(item);\n\n        prod *= sign;\n  \
    \      sum += magnitude;\n    }\n\n    return prod * sum;\n}\n", "    let result:\
    \ number | undefined = 1;\n    if (arr.length > 0) {\n        for (let i: number\
    \ = 0; i < arr.length; i++) {\n            result = result * arr[i] / Math.abs(arr[i]);\n\
    \        }\n        for (let i: number = 0; i < arr.length; i++) {\n         \
    \   result = result * Math.abs(arr[i]);\n        }\n    } else {\n        result\
    \ = undefined;\n    }\n    return result;\n}\n", "  const num_arr = arr.filter(x\
    \ => x != 0);\n  if (num_arr.length == 0) {\n    return undefined;\n  }\n  const\
    \ prod = num_arr.reduce((a, b) => a * b);\n  const sign_arr = num_arr.map(x =>\
    \ {\n    if (x > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n\
    \  });\n  const sum = sign_arr.reduce((a, b) => a + b);\n  return prod * sum;\n\
    }\n", "  if (arr.length < 1) {\n    return undefined;\n  }\n  let sum = 0;\n \
    \ let product = 1;\n  for (let num of arr) {\n    sum += Math.abs(num);\n    product\
    \ *= Math.sign(num);\n  }\n  return sum * product;\n}\n", "  if (arr.length ===\
    \ 0) {\n    return undefined;\n  }\n  let count = 0;\n  let prod = 1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    prod *= Math.sign(arr[i]);\n    count +=\
    \ Math.abs(arr[i]);\n  }\n  return count * prod;\n}\n", "    if (arr.length ===\
    \ 0) {\n        return undefined;\n    }\n    const p = arr.map(x => x ? (x <\
    \ 0 ? -1 : 1) : 0);\n    const s = arr.map(x => Math.abs(x));\n    const ps =\
    \ p.reduce((prev, curr) => prev * curr);\n    const ss = s.reduce((prev, curr)\
    \ => prev + curr);\n    return ps * ss;\n}\n", "    let prod_signs = 0;\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) prod_signs = 1;\n\
    \        else if (arr[i] < 0) prod_signs = -1;\n        else prod_signs = 0;\n\
    \    }\n    return prod_signs === 0 ? 0 : (arr.reduce((a, b) => Math.abs(a) +\
    \ Math.abs(b)) * prod_signs);\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n\n  let negativeCount = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const num = arr[i];\n    if (num === 0) {\n      return 0;\n   \
    \ }\n    if (num < 0) {\n      negativeCount++;\n    }\n    sum += Math.abs(num);\n\
    \  }\n\n  return negativeCount % 2 === 0 ? sum : -sum;\n}\n", "    if (arr.length\
    \ > 0) {\n        let sum = 0;\n        let prod = 1;\n        for (let i = 0;\
    \ i < arr.length; i++) {\n            if (arr[i] > 0) {\n                sum +=\
    \ arr[i];\n                prod *= 1;\n            } else if (arr[i] < 0) {\n\
    \                sum += Math.abs(arr[i]);\n                prod *= -1;\n     \
    \       } else {\n                prod *= 0;\n            }\n        }\n     \
    \   return sum * prod;\n    } else {\n        return undefined;\n    }\n}\n",
  "  if (arr.length == 0) {\n    return undefined;\n  }\n  let result = 0;\n  let\
    \ positive = 0;\n  let negative = 0;\n  let zero = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] < 0) {\n      negative++;\n    } else if (arr[i] > 0)\
    \ {\n      positive++;\n    } else {\n      zero++;\n    }\n    result += Math.abs(arr[i]);\n\
    \  }\n  if (zero != 0) {\n    return 0;\n  }\n  if (positive == 0 && negative\
    \ == 0) {\n    return result;\n  }\n  if (positive == 0) {\n    return -result;\n\
    \  }\n  if (negative == 0) {\n    return result;\n  }\n  return result * -1;\n\
    }\nconsole.log(prod_signs([1, 2, 2, -4])); // 9\nconsole.log(prod_signs([0, 1]));\
    \ // 0\nconsole.log(prod_signs([])); // undefined\n", "  if (arr.length === 0)\
    \ {\n    return undefined;\n  }\n  let productSign = 1;\n  let sumOfMagnitudes\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n  \
    \    productSign = 0;\n      break;\n    }\n    if (arr[i] < 0) {\n      productSign\
    \ *= -1;\n    }\n    sumOfMagnitudes += Math.abs(arr[i]);\n  }\n  return sumOfMagnitudes\
    \ * productSign;\n}\n", "    if (arr.length === 0) return undefined;\n    let\
    \ signs = 1;\n    let magnitudes = 0;\n    for (let num of arr) {\n        if\
    \ (num > 0) signs *= 1;\n        else if (num < 0) signs *= -1;\n        else\
    \ signs *= 0;\n        magnitudes += Math.abs(num);\n    }\n    return magnitudes\
    \ * signs;\n}\n", "    if (arr.length === 0) return undefined;\n    let neg_num\
    \ = 0;\n    let prod = 1;\n    let sum = 0;\n    arr.forEach(val => {\n      \
    \  if (val > 0) {\n            prod *= 1;\n            sum += val;\n        }\
    \ else if (val < 0) {\n            prod *= -1;\n            sum += Math.abs(val);\n\
    \            neg_num++;\n        } else {\n            prod *= 0;\n        }\n\
    \    });\n    if (neg_num === arr.length) prod *= -1;\n    return sum * prod;\n\
    }\n", "  if (!arr.length) return undefined;\n  return arr.reduce((acc, num) =>\
    \ {\n    let sign = 1;\n    if (num < 0) sign = -1;\n    else if (num === 0) sign\
    \ = 0;\n    return acc * sign;\n  }, 1) * arr.reduce((acc, num) => acc + Math.abs(num),\
    \ 0);\n}\n", "  let sum: number = 0;\n  let sign_prod: number = 1;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    sign_prod *=\
    \ Math.sign(arr[i]);\n  }\n  if (arr.length == 0) {\n    return undefined;\n \
    \ }\n  return sum * sign_prod;\n}\n", "  return undefined;\n}\n", "  if (!arr.length)\
    \ return undefined;\n  return (\n    arr.reduce((acc: number, val: number) =>\
    \ acc + Math.abs(val), 0) *\n    arr.reduce((acc: number, val: number) => acc\
    \ * Math.sign(val), 1)\n  );\n}\n", "    if (arr.length === 0) return undefined;\n\
    \    if (arr.length === 1) return arr[0];\n    let total = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        total += Math.abs(arr[i]);\n\
    \        prod *= (arr[i] < 0 ? -1 : arr[i] === 0 ? 0 : 1);\n    }\n    return\
    \ total * prod;\n}\n", "    let nums: number[] = arr.map(Number);\n    let sum:\
    \ number = 0;\n    let product: number = 1;\n    let i: number = 0;\n    let result:\
    \ number = 0;\n    let result1: number = 0;\n    if (nums.length === 0) {\n  \
    \      return undefined;\n    } else {\n        while (i < nums.length) {\n  \
    \          if (nums[i] === 0) {\n                product = product * 0;\n    \
    \        } else if (nums[i] > 0) {\n                product = product * 1;\n \
    \           } else {\n                product = product * -1;\n            }\n\
    \            i++;\n        }\n        result = product;\n        for (let i =\
    \ 0; i < nums.length; i++) {\n            sum = sum + Math.abs(nums[i]);\n   \
    \     }\n        result1 = sum;\n        return result * result1;\n    }\n}\n\
    console.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));",
  "  if (arr.length === 0) {\n    return undefined;\n  }\n  let sum_signs = 1;\n \
    \ let sum_numbers = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > 0) {\n      sum_signs *= 1;\n    } else if (arr[i] < 0) {\n      sum_signs\
    \ *= -1;\n    } else {\n      sum_signs *= 0;\n    }\n    sum_numbers += Math.abs(arr[i]);\n\
    \  }\n  return sum_numbers * sum_signs;\n}\n", "    let mult_signs = 1;\n    let\
    \ sum_magn = 0;\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    for (let num of arr) {\n        if (num === 0) {\n            mult_signs\
    \ = 0;\n        } else if (num > 0) {\n            mult_signs *= 1;\n        }\
    \ else {\n            mult_signs *= -1;\n        }\n        sum_magn += Math.abs(num);\n\
    \    }\n    return sum_magn * mult_signs;\n}\n\n", "    if (arr.length === 0)\
    \ {\n        return undefined;\n    }\n    return arr.reduce((res, value) => {\n\
    \        if (value > 0) {\n            return res + Math.abs(value);\n       \
    \ } else if (value < 0) {\n            return res - Math.abs(value);\n       \
    \ } else {\n            return res;\n        }\n    }, 0);\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  let prod = 1;\n  for\
    \ (let num of arr) {\n    if (num > 0) {\n      sum += num;\n      prod *= 1;\n\
    \    } else if (num < 0) {\n      sum += Math.abs(num);\n      prod *= -1;\n \
    \   } else {\n      prod *= 0;\n    }\n  }\n  return sum * prod;\n}\n", "  let\
    \ product = 1;\n  let sum = 0;\n  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n\
    \    if (arr[i] === 0) {\n      product = 0;\n    } else {\n      product *= Math.sign(arr[i]);\n\
    \    }\n  }\n  return sum * product;\n}\n", "  let sumOfMagnitudes = 0;\n  let\
    \ prodOfSigns = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] ===\
    \ 0) {\n      sumOfMagnitudes += 0;\n      prodOfSigns *= 0;\n    } else if (arr[i]\
    \ > 0) {\n      sumOfMagnitudes += arr[i];\n      prodOfSigns *= 1;\n    } else\
    \ {\n      sumOfMagnitudes += arr[i] * -1;\n      prodOfSigns *= -1;\n    }\n\
    \  }\n  return sumOfMagnitudes * prodOfSigns;\n}", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n\n  let prod = 1;\n  let sum = 0;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    prod *= Math.sign(arr[i]);\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return prod * sum;\n}\n", "    let product: number = 1;\n    let sum:\
    \ number = 0;\n    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    for (let n of arr) {\n        sum += Math.abs(n);\n        if (n > 0) {\n\
    \            product *= 1;\n        } else if (n < 0) {\n            product *=\
    \ -1;\n        } else {\n            product *= 0;\n        }\n    }\n    return\
    \ sum * product;\n}\n", "    let sum = 0;\n    let sign = 1;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        const num = arr[i];\n        sum += Math.abs(num);\n\
    \        if (num < 0) {\n            sign *= -1;\n        } else if (num > 0)\
    \ {\n            sign *= 1;\n        }\n    }\n    return arr.length > 0 ? sum\
    \ * sign : undefined;\n}\nconsole.log(prod_signs([1, 2, 2, -4])); //9\nconsole.log(prod_signs([0,\
    \ 1])); //0\nconsole.log(prod_signs([])); //undefined", "  if (arr.length ===\
    \ 0) {\n    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    sum += arr[i] * prodSign(arr);\n  }\n  return sum;\n}\n", "    let\
    \ sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] < 0) {\n            sum += -arr[i];\n            prod *= -1;\n\
    \        } else if (arr[i] > 0) {\n            sum += arr[i];\n        }\n   \
    \ }\n    return sum === 0 ? undefined : sum * prod;\n}\n", "    let sum: number\
    \ = 0;\n    let product: number = 1;\n    for (let x of arr) {\n        sum +=\
    \ Math.abs(x);\n        product *= Math.sign(x);\n    }\n    return sum * product;\n\
    }\n", "    if (arr.length === 0) {\n        return undefined;\n    }\n    let\
    \ result = 0;\n    let prod = 1;\n    arr.forEach(function (element) {\n     \
    \   if (element >= 0) {\n            result += element;\n        } else {\n  \
    \          result -= element;\n            prod *= -1;\n        }\n    });\n \
    \   return result * prod;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  const lengths = arr.map(item => Math.abs(item));\n  const signs = arr.map(item\
    \ => item === 0 ? 0 : Math.sign(item));\n  return lengths.reduce((a, b) => a +\
    \ b) * signs.reduce((a, b) => a * b);\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\n\
    console.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n", "    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sign_prod = 1;\n    let\
    \ mag_sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        mag_sum += Math.abs(arr[i]);\n\
    \        sign_prod *= arr[i] > 0 ? 1 : -1;\n    }\n    return mag_sum * sign_prod;\n\
    }\nconsole.log(prod_signs([1, 2, 2, -4]));\n\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  let signs: number[] = [];\n  let magnitudes: number[]\
    \ = [];\n  for (let i: number = 0; i < arr.length; i++) {\n    if (arr[i] > 0)\
    \ {\n      signs.push(1);\n      magnitudes.push(arr[i]);\n    } else if (arr[i]\
    \ < 0) {\n      signs.push(-1);\n      magnitudes.push(arr[i] * -1);\n    } else\
    \ {\n      signs.push(0);\n      magnitudes.push(arr[i]);\n    }\n  }\n  let product:\
    \ number = 1;\n  for (let j: number = 0; j < signs.length; j++) {\n    product\
    \ *= signs[j];\n  }\n  let sum: number = 0;\n  for (let k: number = 0; k < magnitudes.length;\
    \ k++) {\n    sum += magnitudes[k];\n  }\n  return sum * product;\n}\n", "   \
    \ if (arr.length === 0) {\n        return undefined;\n    }\n\n    return arr.reduce((prev,\
    \ curr) => prev * Math.abs(curr), 1) *\n        Math.pow(arr.reduce((prev, curr)\
    \ => prev * curr, 1), 1 / arr.length);\n}\n", "  if (arr.length === 0) {\n   \
    \ return undefined;\n  }\n  let prodSign = 1;\n  let sumAbs = 0;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    const element = arr[i];\n    prodSign *= Math.sign(element);\n\
    \    sumAbs += Math.abs(element);\n  }\n  return prodSign * sumAbs;\n}", "   \
    \ if (arr.length == 0) {\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n \
    \       } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n", "  if (!arr.length) return undefined;\n  let result = 0;\n  const pos =\
    \ [];\n  const neg = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ === 0) continue;\n    if (arr[i] > 0) pos.push(arr[i]);\n    if (arr[i] < 0)\
    \ neg.push(arr[i]);\n  }\n  let prod = 1;\n  pos.forEach(value => (prod *= value));\n\
    \  neg.forEach(value => (prod *= value));\n  arr.forEach(value => (result += Math.abs(value)));\n\
    \  return result * prod;\n}\n", "    let sum_of_magnitudes = 0;\n    let product_of_signs\
    \ = 1;\n    for (let i of arr) {\n        if (i >= 0) {\n            sum_of_magnitudes\
    \ += i;\n            product_of_signs *= 1;\n        } else if (i < 0) {\n   \
    \         sum_of_magnitudes += -i;\n            product_of_signs *= -1;\n    \
    \    } else {\n            product_of_signs *= 0;\n        }\n    }\n    return\
    \ product_of_signs * sum_of_magnitudes;\n}", "  if (arr.length === 0) {\n    return\
    \ undefined;\n  }\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] !== 0) {\n      sum += Math.abs(arr[i]);\n      prod\
    \ *= Math.sign(arr[i]);\n    }\n  }\n  return sum * prod;\n}\n", "    // your\
    \ code goes here\n    let product = 1;\n    let sum = 0;\n    if (arr.length ==\
    \ 0) return undefined;\n    arr.forEach(function (element) {\n        product\
    \ *= Math.sign(element);\n        sum += Math.abs(element);\n    });\n    return\
    \ sum * product;\n}\n", "  let negativeCount = 0;\n  let sum = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negativeCount++;\n\
    \    }\n    sum += Math.abs(arr[i]);\n  }\n  if (arr.length == 0) {\n    return\
    \ undefined;\n  }\n  return sum * Math.pow(-1, negativeCount);\n}\n", "    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 0) {\n            prod *= -1;\n        } else if (arr[i] > 0) {\n        \
    \    prod *= 1;\n        } else {\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconsole.log(prod_signs([0,\
    \ 1]));\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let sumOfMagnitudes\
    \ = 0;\n  let signsProduct = 1;\n  for (let i = 0; i < arr.length; i++) {\n  \
    \  sumOfMagnitudes += Math.abs(arr[i]);\n    signsProduct *= Math.sign(arr[i]);\n\
    \  }\n  return sumOfMagnitudes * signsProduct;\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n   \
    \ const el = arr[i];\n    prod *= el < 0 ? -1 : el > 0 ? 1 : 0;\n    sum += Math.abs(el);\n\
    \  }\n  return prod === 0 ? 0 : prod * sum;\n}\n", "    if (arr.length === 0)\
    \ {\n        return undefined;\n    }\n    const magnitudes = arr.map(Math.abs);\n\
    \    const signs = arr.map(x => {\n        if (x > 0) {\n            return 1;\n\
    \        } else if (x < 0) {\n            return -1;\n        } else {\n     \
    \       return 0;\n        }\n    });\n    return magnitudes.reduce((a, b) =>\
    \ a + b) * signs.reduce((a, b) => a * b);\n}\n", "  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  let magnitude = 0;\n  let prod = 1;\n  arr.forEach((x)\
    \ => {\n    magnitude += Math.abs(x);\n    prod *= Math.sign(x);\n  });\n  return\
    \ magnitude * prod;\n}\n", "  if (!arr.length) return undefined;\n  let prod =\
    \ arr.map(v => (v > 0 ? 1 : v === 0 ? 0 : -1)).reduce((a, b) => a * b);\n  let\
    \ sum = arr.map(v => Math.abs(v)).reduce((a, b) => a + b);\n  return prod * sum;\n\
    }\n", "  if (!arr.length) return undefined;\n  let result = 0;\n  const prod =\
    \ arr.reduce((prod, curr) => (curr < 0 ? prod * -1 : prod), 1);\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    result += Math.abs(arr[i]);\n  }\n  return\
    \ result * prod;\n}\n", "    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        product *= arr[i] >= 0 ? 1 : -1;\n        sum += Math.abs(arr[i]);\n\
    \    }\n\n    return product * sum;\n}\n", "  let sumOfMagnitudes = 0;\n  let\
    \ prodOfSigns = 1;\n  if (arr.length > 0) {\n    for (let i = 0; i < arr.length;\
    \ i++) {\n      if (arr[i] > 0) {\n        sumOfMagnitudes += arr[i];\n      \
    \  prodOfSigns *= 1;\n      } else if (arr[i] < 0) {\n        sumOfMagnitudes\
    \ += Math.abs(arr[i]);\n        prodOfSigns *= -1;\n      } else {\n        prodOfSigns\
    \ *= 0;\n      }\n    }\n    return sumOfMagnitudes * prodOfSigns;\n  } else {\n\
    \    return undefined;\n  }\n}\n", "    let sum = 0;\n    let prod = 1;\n    if\
    \ (arr.length === 0) {\n        return undefined;\n    }\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n    }\n    return sum * prod;\n}", "    let sum = 0;\n   \
    \ let prod = 1;\n    for (let num of arr) {\n        sum += Math.abs(num);\n \
    \       prod *= Math.sign(num);\n    }\n    return sum * prod;\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let productOfSigns = 1;\n  let sumOfMagnitudes\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    productOfSigns *= Math.sign(arr[i]);\n\
    \    sumOfMagnitudes += Math.abs(arr[i]);\n  }\n  return sumOfMagnitudes * productOfSigns;\n\
    }\n", "    return arr.length ? arr.map(x => Math.abs(x)).reduce((a, b) => a *\
    \ b) * arr.map(x => Math.sign(x)).reduce((a, b) => a * b) : undefined;\n}\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    return arr.reduce((acc,\
    \ item) => acc + (Math.abs(item) * arr.reduce((acc2, item2) => acc2 * Math.sign(item2),\
    \ 1)), 0);\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0,\
    \ 1]));\nconsole.log(prod_signs([]));\n", "  if (arr.length === 0) {\n    return\
    \ undefined;\n  }\n\n  const signs = arr.map(n => (n < 0 ? -1 : 1));\n  const\
    \ magnitudes = arr.map(n => Math.abs(n));\n\n  return product(magnitudes) * product(signs);\n\
    }\n", "    let sum_signs = 1;\n    let arr_mag: number[] = [];\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            return\
    \ 0;\n        }\n        else if (arr[i] > 0) {\n            sum_signs *= 1;\n\
    \            arr_mag.push(arr[i]);\n        }\n        else {\n            sum_signs\
    \ *= -1;\n            arr_mag.push(arr[i] * -1);\n        }\n    }\n    return\
    \ sum_signs * arr_mag.reduce((a, b) => a + b);\n}", "    return arr.length ===\
    \ 0 ? undefined :\n        arr.map(x => Math.abs(x)).reduce((acc, curr) => acc\
    \ + curr) *\n        arr.reduce((acc, curr) => {\n            if (curr < 0) return\
    \ acc * -1;\n            if (curr > 0) return acc * 1;\n            return acc\
    \ * 0;\n        }, 1);\n}\n", "    if (arr.length === 0) return undefined;\n \
    \   let sum_of_magnitudes = 0;\n    let prod_of_signs = 1;\n    for (let val of\
    \ arr) {\n        sum_of_magnitudes += Math.abs(val);\n        prod_of_signs *=\
    \ Math.sign(val);\n    }\n    return sum_of_magnitudes * prod_of_signs;\n}\n",
  "  return arr.length === 0\n    ? undefined\n    : arr.reduce((acc, item) => acc\
    \ * Math.sign(item), 1) *\n        arr.reduce((acc, item) => acc + Math.abs(item),\
    \ 0);\n}\n", "    if (arr.length > 0) {\n        return arr.map(x => x == 0 ?\
    \ 0 : x > 0 ? 1 : -1)\n            .reduce((x, y) => x * y, 1) * arr.map(x =>\
    \ Math.abs(x))\n            .reduce((x, y) => x + y, 0);\n    }\n    return undefined;\n\
    }\n\n", "    let prod = arr.reduce((acc: number, curr: number) => acc * curr,\
    \ 1);\n    let signs = arr.reduce((acc: number, curr: number) => acc * (curr ===\
    \ 0 ? 1 : curr / Math.abs(curr)), 1);\n    let sum = arr.reduce((acc: number,\
    \ curr: number) => acc + Math.abs(curr), 0);\n    return sum * signs;\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    let multi: number\
    \ = 1;\n    let sum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] > 0) {\n            multi *= 1;\n            sum += arr[i];\n\
    \        } else if (arr[i] < 0) {\n            multi *= -1;\n            sum +=\
    \ arr[i] * -1;\n        } else {\n            multi *= 0;\n        }\n    }\n\
    \    return sum * multi;\n}\n", "  if (arr.length == 0) {\n    return undefined;\n\
    \  }\n  let sum: number = 0;\n  let magnitude: number = 1;\n  let signs: number\
    \ = 1;\n  for (let i = 0; i < arr.length; i++) {\n    magnitude = magnitude *\
    \ Math.abs(arr[i]);\n    signs = signs * Math.sign(arr[i]);\n  }\n  sum = magnitude\
    \ * signs;\n  return sum;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n\
    \  }\n  let res: number = 1;\n  for (let i: number = 0; i < arr.length; i++) {\n\
    \    if (arr[i] !== 0) {\n      res *= arr[i] / Math.abs(arr[i]);\n    }\n  }\n\
    \  return res * arr.reduce((a, b) => Math.abs(a) + Math.abs(b));\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\n", "    return arr.reduce((acc, curr) => acc + Math.abs(curr)\
    \ * Math.sign(curr), 0);\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0,\
    \ 1]));\nconsole.log(prod_signs([]));", "    return arr.length > 0 ? arr.map(Math.abs).reduce((sum,\
    \ x) => sum + x) * arr.map(Math.sign).reduce((prod, x) => prod * x) : undefined;\n\
    }\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  let result = 0;\n\
    \  let sign = 1;\n  for (let el of arr) {\n    result += Math.abs(el);\n    if\
    \ (el !== 0) {\n      sign *= el / Math.abs(el);\n    }\n  }\n  return result\
    \ * sign;\n}\n", "    if (arr.length === 0) return undefined;\n    let res = 1;\n\
    \    let ans = 0;\n    for (let i = 0; i < arr.length; i++) {\n        res *=\
    \ sign(arr[i]);\n        ans += Math.abs(arr[i]);\n    }\n    return ans * res;\n\
    }\n", "    let product = 1;\n    let sum = 0;\n    if (arr.length > 0) {\n   \
    \     for (let num of arr) {\n            if (num > 0) {\n                product\
    \ *= 1;\n                sum += num;\n            } else if (num < 0) {\n    \
    \            product *= -1;\n                sum += num * -1;\n            } else\
    \ {\n                product *= 0;\n            }\n        }\n        return sum\
    \ * product;\n    } else {\n        return undefined;\n    }\n}\n", "  let res\
    \ = undefined;\n  if (arr.length !== 0) {\n    res = 0;\n    let prod = 1;\n \
    \   arr.forEach((element) => {\n      if (element > 0) {\n        res += element;\n\
    \        prod *= 1;\n      } else if (element < 0) {\n        res += element *\
    \ -1;\n        prod *= -1;\n      } else {\n        prod *= 0;\n      }\n    });\n\
    \    res *= prod;\n  }\n  return res;\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]));\
    \ // 9\nconsole.log(prod_signs([0, 1])); // 0\nconsole.log(prod_signs([])); //\
    \ undefined\n", "    if (arr.length == 0) {\n        return undefined;\n    }\n\
    \    let prod: number = 1;\n    let sum: number = 0;\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        if (arr[i] == 0) {\n            continue;\n    \
    \    }\n        prod *= (arr[i] / Math.abs(arr[i]));\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return prod * sum;\n}\n\n", "    return arr.length ? Math.abs(arr[0])\
    \ * arr.slice(1).reduce((acc, v) => acc * Math.sign(v), 1) : undefined;\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));",
  "    return arr.length > 0 ? arr.map(x => x < 0 ? -1 : (x > 0 ? 1 : 0)).reduce((total,\
    \ num) => total * num) * arr.map(x => Math.abs(x)).reduce((total, num) => total\
    \ + num) : undefined;\n}", "    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n            sum\
    \ += arr[i];\n        } else if (arr[i] < 0) {\n            product *= -1;\n \
    \           sum += arr[i] * -1;\n        } else {\n            product *= 0;\n\
    \        }\n    }\n    return sum * product;\n}\n\n", "  if (arr.length === 0)\
    \ {\n    return undefined;\n  }\n  const sum_of_magnitudes = arr.reduce((acc,\
    \ elem) => Math.abs(elem) + acc, 0);\n  const product_of_signs = arr.reduce((acc,\
    \ elem) => {\n    const sign = Math.sign(elem);\n    if (sign === 0) {\n     \
    \ return acc;\n    }\n    return acc * sign;\n  }, 1);\n  return sum_of_magnitudes\
    \ * product_of_signs;\n}\n", "    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    return arr.reduce((acc, cur) => acc * (cur < 0 ? -1 : cur ? 1 : 0),\
    \ 1) * arr.reduce((acc, cur) => acc + Math.abs(cur), 0);\n}\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let sum = 0;\n  let product = 1;\n \
    \ for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n    if\
    \ (arr[i] === 0) {\n      product = 0;\n    } else {\n      product *= Math.sign(arr[i]);\n\
    \    }\n  }\n  return sum * product;\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]));\n\
    console.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n", "    let sum\
    \ = 0, prod = 1;\n    if (arr.length === 0) return undefined;\n    arr.forEach(function\
    \ (value) {\n        prod *= value > 0 ? 1 : value < 0 ? -1 : 0;\n        sum\
    \ += Math.abs(value);\n    });\n    return sum * prod;\n}\n", "  if (arr.length\
    \ < 1) {\n    return undefined;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    let x = Math.abs(arr[i]);\n    if (arr[i] < 0) {\n      x = x *\
    \ -1;\n    }\n    sum += x;\n  }\n  return sum;\n}\n", "    if (arr.length ===\
    \ 0) {\n        return undefined;\n    }\n    const prod = arr.reduce((prod, num)\
    \ => prod * num, 1);\n    const sum = arr.reduce((sum, num) => sum + Math.abs(num),\
    \ 0);\n    return prod * sum;\n}\n", "    //    # write your code here\n    if\
    \ (!arr.length) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for\
    \ (let num of arr) {\n        if (num > 0) prod *= 1;\n        else if (num <\
    \ 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(num);\n   \
    \ }\n    return sum * prod;\n}\n", "    if (arr.length === 0) {\n        return\
    \ undefined;\n    }\n\n    const sign_product = arr.reduce((prod, x) => {\n  \
    \      if (x < 0) {\n            return prod * -1;\n        }\n        else if\
    \ (x > 0) {\n            return prod * 1;\n        }\n        else {\n       \
    \     return prod * 0;\n        }\n    }, 1);\n\n    return arr.reduce((sum, x)\
    \ => sum + Math.abs(x), 0) * sign_product;\n}\n", "    if (arr.length === 0) {\n\
    \        return undefined;\n    }\n    let sum = 0;\n    let result = 1;\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n \
    \       if (arr[i] === 0) {\n            result = 0;\n        } else {\n     \
    \       result *= Math.sign(arr[i]);\n        }\n    }\n    return sum * result;\n\
    }\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\n\
    console.log(prod_signs([]));\n", "  let sum = 0;\n  if (arr.length === 0) {\n\
    \    return undefined;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    sum\
    \ += Math.abs(arr[i]) * signOf(arr[i]);\n  }\n  return sum;\n}\n", "  if (arr.length\
    \ == 0) {\n    return undefined;\n  }\n\n  var signs: number[] = [];\n  for (var\
    \ n of arr) {\n    if (n > 0) {\n      signs.push(1);\n    } else if (n < 0) {\n\
    \      signs.push(-1);\n    } else {\n      signs.push(0);\n    }\n  }\n\n  var\
    \ sum: number = 0;\n  for (var n of arr) {\n    sum += Math.abs(n);\n  }\n\n \
    \ var prod: number = 1;\n  for (var n of signs) {\n    prod *= n;\n  }\n\n  return\
    \ sum * prod;\n}\n", "    if (arr.length === 0) return undefined;\n    let sum\
    \ = 0;\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] === 0) {\n            product = 0;\n            continue;\n \
    \       }\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n\
    \    }\n    return sum * product;\n}\n", "    if (arr.length === 0) {\n      \
    \  return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ num of arr) {\n        if (num < 0) {\n            prod *= -1;\n        } else\
    \ if (num > 0) {\n            prod *= 1;\n        } else {\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(num);\n    }\n    return sum * prod;\n\
    }\n\nexport {prod_signs};", "    return undefined;\n}\n\n", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let prod = 1;\n  let sum = 0;\n  arr.forEach((num)\
    \ => {\n    if (num > 0) {\n      prod *= 1;\n      sum += num;\n    } else if\
    \ (num < 0) {\n      prod *= -1;\n      sum += Math.abs(num);\n    } else {\n\
    \      prod *= 0;\n    }\n  });\n  return prod * sum;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));",
  "    // YOUR CODE HERE\n    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n\n    let arrayOfSigns = arr.map(n => Math.sign(n));\n    let productOfSigns\
    \ = arrayOfSigns.reduce((a, b) => a * b);\n    let sumOfMagnitudes = arr.reduce((a,\
    \ b) => Math.abs(a) + Math.abs(b));\n\n    return sumOfMagnitudes * productOfSigns;\n\
    }\n", "    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let\
    \ prod = 1;\n    arr.forEach(element => {\n        sum += Math.abs(element);\n\
    \        prod *= Math.sign(element);\n    });\n    return sum * prod;\n}\n", " \
    \   if (arr.length === 0) return undefined;\n    return arr.reduce((acc, curr)\
    \ => {\n        return acc + Math.abs(curr) * arr.map(x => Math.sign(x)).reduce((acc,\
    \ curr) => acc * curr, 1);\n    }, 0);\n}\n\n", "    if (arr.length == 0) return\
    \ undefined;\n    let prodSign = 1;\n    let prodVal = 1;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        let val = arr[i];\n        if (val == 0) continue;\n\
    \        prodSign *= Math.sign(val);\n        prodVal *= Math.abs(val);\n    }\n\
    \    return prodSign * prodVal;\n}\n", "    let sum: number = 0;\n    let prod:\
    \ number = 1;\n    if (arr.length > 0) {\n        for (let i = 0; i < arr.length;\
    \ i++) {\n            let num: number = Math.abs(arr[i]);\n            let sign:\
    \ number = Math.sign(arr[i]);\n            sum += num;\n            prod *= sign;\n\
    \        }\n        return sum * prod;\n    } else {\n        return undefined;\n\
    \    }\n}\n", "  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0)\
    \ {\n      prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n\
    \  }\n  return sum * prod;\n}\n", "  if (!arr.length) return undefined;\n  return\
    \ arr.reduce(([s, p], n) => {\n    s += Math.abs(n);\n    if (n === 0) return\
    \ [s, 0];\n    p *= Math.sign(n);\n    return [s, p];\n  }, [0, 1])[0] * arr.reduce(([s,\
    \ p], n) => {\n    s += Math.abs(n);\n    if (n === 0) return [s, 0];\n    p *=\
    \ Math.sign(n);\n    return [s, p];\n  }, [0, 1])[1];\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "  return undefined;\n}\n", "  return arr.length === 0\n    ? undefined\n    : arr.reduce((acc,\
    \ cur) => acc * cur, 1) *\n        arr.reduce((acc, cur) => acc + Math.abs(cur),\
    \ 0);\n}\n", "    let prod: number = 1;\n    let sum: number = 0;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            continue;\n\
    \        }\n        prod *= arr[i] / Math.abs(arr[i]);\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return prod * sum;\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0,\
    \ 1]));\nconsole.log(prod_signs([]));", "    if (arr.length === 0) {\n       \
    \ return undefined;\n    }\n    const magnitude_product = arr.reduce((product,\
    \ element) => product * Math.abs(element), 1);\n    const sign_product = arr.reduce((product,\
    \ element) => product * Math.sign(element), 1);\n    return magnitude_product\
    \ * sign_product;\n}\n", "  if (arr.length === 0) {\n    return undefined;\n \
    \ }\n\n  let sum = 0;\n  let sign_prod = 1;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    let x = arr[i];\n    let sign = 0;\n    if (x > 0) {\n      sign\
    \ = 1;\n    } else if (x < 0) {\n      sign = -1;\n    }\n    sum += Math.abs(x);\n\
    \    sign_prod *= sign;\n  }\n  return sum * sign_prod;\n}\n", "  if (!arr.length)\
    \ return undefined;\n  return arr.reduce((acc, cur) => acc + Math.abs(cur) * sign(cur),\
    \ 0);\n}\n", "    if (arr.length === 0) {\n        return undefined;\n    }\n\
    \    let sum = 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            prod *=\
    \ 1;\n        } else if (arr[i] < 0) {\n            sum += -arr[i];\n        \
    \    prod *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n\
    \    return sum * prod;\n}\n", "  if (!arr.length) return undefined;\n  let magnitudes\
    \ = arr.map(a => Math.abs(a)),\n    signs = arr.map(a => Math.sign(a));\n  return\
    \ signs.reduce((a, b) => a * b) * magnitudes.reduce((a, b) => a + b);\n}\n", " \
    \   if (arr.length === 0) {\n        return undefined;\n    }\n    let sum = 0;\n\
    \    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ > 0) {\n            sum += arr[i];\n            prod *= 1;\n        } else if\
    \ (arr[i] < 0) {\n            sum += -arr[i];\n            prod *= -1;\n     \
    \   } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n", "    return arr.length == 0 ? undefined : arr.map(Math.abs).reduce((acc,\
    \ val) => acc * val) * arr.reduce((acc, val) => val == 0 ? acc : acc * Math.sign(val));\n\
    }\n", "  if (arr.length === 0) {\n    return undefined;\n  }\n  return arr.reduce((acc,\
    \ cur) => acc + Math.abs(cur), 0) *\n    arr.reduce((acc, cur) => acc * Math.sign(cur),\
    \ 1);\n}\n\nexport default prod_signs;", "    if (arr.length === 0) return undefined;\n\
    \    const signs = arr.map(x => x > 0 ? 1 : x < 0 ? -1 : 0);\n    const mags =\
    \ arr.map(x => Math.abs(x));\n    const sign_prod = signs.reduce((total, x) =>\
    \ total * x, 1);\n    const mag_sum = mags.reduce((total, x) => total + x, 0);\n\
    \    return sign_prod * mag_sum;\n}\n", "    if (arr.length === 0) {\n       \
    \ return undefined;\n    }\n    else {\n        return arr.map(x => Math.abs(x)\
    \ * x > 0 ? 1 : x === 0 ? 0 : -1).reduce((x, y) => x * y) * arr.map(x => Math.abs(x)).reduce((x,\
    \ y) => x + y);\n    }\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0,\
    \ 1]));\nconsole.log(prod_signs([]));\n", "  if (arr.length === 0) {\n    return\
    \ undefined;\n  }\n  let signs: number[] = [];\n  let magnitudes: number[] = [];\n\
    \  for (let num of arr) {\n    if (num > 0) {\n      signs.push(1);\n      magnitudes.push(num);\n\
    \    } else if (num < 0) {\n      signs.push(-1);\n      magnitudes.push(num *\
    \ -1);\n    } else {\n      signs.push(0);\n      magnitudes.push(0);\n    }\n\
    \  }\n  let prod_signs: number = signs.reduce((a, b) => a * b);\n  let sum_magnitudes:\
    \ number = magnitudes.reduce((a, b) => a + b);\n  return prod_signs * sum_magnitudes;\n\
    }\n", "  if (arr.length == 0) {\n    return undefined;\n  }\n  let signs = arr.map(x\
    \ => Math.sign(x));\n  let prod = signs.reduce((accum, curr) => accum * curr);\n\
    \  let mags = arr.map(x => Math.abs(x));\n  let sum = mags.reduce((accum, curr)\
    \ => accum + curr);\n  return sum * prod;\n}\n", "    if (arr.length === 0) return\
    \ undefined;\n    let sum_magnitudes = 0;\n    let prod_signs = 1;\n    for (let\
    \ n of arr) {\n        sum_magnitudes += Math.abs(n);\n        prod_signs *= Math.sign(n);\n\
    \    }\n    return sum_magnitudes * prod_signs;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));",
  "  return arr.length === 0\n    ? undefined\n    : arr.reduce((prev, curr) => prev\
    \ + Math.abs(curr), 0) *\n        arr.reduce((prev, curr) => prev * Math.sign(curr),\
    \ 1);\n}\n", "    if (arr.length === 0) return undefined;\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === 0) {\n            continue;\n        }\n        prod *= arr[i] > 0 ? 1 :\
    \ -1;\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    let product\
    \ = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ product *= Math.sign(arr[i]);\n        sum += Math.abs(arr[i]);\n    }\n   \
    \ return product * sum;\n}\n", "  let prod: number = 1;\n  let count: number =\
    \ 0;\n  let sum: number = 0;\n  for (let i: number = 0; i < arr.length; i++) {\n\
    \    prod *= Math.sign(arr[i]);\n    if (arr[i] !== 0) {\n      count++;\n   \
    \   sum += Math.abs(arr[i]);\n    }\n  }\n  if (count !== 0) {\n    return prod\
    \ * sum;\n  } else {\n    return undefined;\n  }\n}", "  const sumOfMagnitudes\
    \ = arr.reduce((result, value) => {\n    const magnitude = Math.abs(value);\n\
    \    return result + magnitude;\n  }, 0);\n\n  const productOfSigns = arr.reduce((result,\
    \ value) => {\n    const sign = Math.sign(value);\n    return result * sign;\n\
    \  }, 1);\n\n  return sumOfMagnitudes * productOfSigns;\n}\n", "    if (arr.length\
    \ == 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    arr.forEach(x\
    \ => {\n        sum += Math.abs(x);\n        if (x > 0) prod *= 1;\n        else\
    \ if (x < 0) prod *= -1;\n        else prod *= 0;\n    });\n    return sum * prod;\n\
    }\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\n\
    console.log(prod_signs([]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
