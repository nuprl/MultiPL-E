name: HumanEval_128_prod_signs
language: ts
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number\
  \ | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2,\
  \ -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
  \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["    if (!arr.length) return undefined;\n    return arr.reduce((p, v)\
    \ => p * Math.sign(v), 1) * arr.reduce((p, v) => p + Math.abs(v), 0);\n}\n", " \
    \ let sum: number = 0;\n  let prod: number = 1;\n  if (arr.length === 0) {\n \
    \   return undefined;\n  }\n  for (let i: number = 0; i < arr.length; i++) {\n\
    \    sum += Math.abs(arr[i]);\n    prod *= Math.sign(arr[i]);\n  }\n  return sum\
    \ * prod;\n}\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0,\
    \ 1]));\nconsole.log(prod_signs([]));\n", "    if (arr.length == 0) return undefined;\n\
    \    const product = arr.reduce((acc, curr) => {\n        if (curr == 0) acc =\
    \ 0;\n        else if (curr > 0) acc *= 1;\n        else acc *= -1;\n        return\
    \ acc;\n    }, 1);\n    const sum = arr.reduce((acc, curr) => {\n        if (curr\
    \ < 0) curr *= -1;\n        return acc + curr;\n    }, 0);\n    return sum * product;\n\
    }\n", "    if (arr.length == 0) return undefined;\n    let sumOfAbsNumbers = 0;\n\
    \    let productOfSigns = 1;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     let number = arr[i];\n        if (number > 0) {\n            productOfSigns\
    \ *= 1;\n        } else if (number < 0) {\n            productOfSigns *= -1;\n\
    \        } else {\n            productOfSigns *= 0;\n        }\n        sumOfAbsNumbers\
    \ += Math.abs(number);\n    }\n    return sumOfAbsNumbers * productOfSigns;\n\
    }\n", "    return arr.length === 0 ? undefined : arr.reduce((a, b) => a + b) *\
    \ arr.reduce((a, b) => a * (b ? (b > 0 ? 1 : -1) : 0), 1);\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    let product\
    \ = arr.reduce((x, y) => Math.sign(x) * Math.sign(y), 1);\n    let sum = arr.reduce((x,\
    \ y) => Math.abs(x) + Math.abs(y), 0);\n    return product * sum;\n}\n", "   \
    \ let x: number = 1;\n    let y: number = 0;\n    if (arr.length === 0) return\
    \ undefined;\n    for (let i: number = 0; i < arr.length; i++) {\n        x *=\
    \ arr[i] / Math.abs(arr[i]);\n        y += Math.abs(arr[i]);\n    }\n    return\
    \ x * y;\n}\n", "    if (!arr.length) return undefined;\n    let prodSigns = 1;\n\
    \    let sumMag = 0;\n    for (let i = 0; i < arr.length; i++) {\n        prodSigns\
    \ *= (arr[i] < 0 ? -1 : (arr[i] > 0 ? 1 : 0));\n        sumMag += Math.abs(arr[i]);\n\
    \    }\n    return sumMag * prodSigns;\n}\n", "    if (arr.length == 0) {\n  \
    \      return undefined;\n    }\n    let countNegative: number = 0;\n    let countPositive:\
    \ number = 0;\n    let countZero: number = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] < 0) {\n            countNegative += 1;\n       \
    \ } else if (arr[i] > 0) {\n            countPositive += 1;\n        } else {\n\
    \            countZero += 1;\n        }\n    }\n    let result: number = 1;\n\
    \    if (countZero > 0) {\n        return 0;\n    } else if (countNegative % 2\
    \ == 0) {\n        return Math.abs(arr[0]) * Math.abs(arr[1]);\n    } else {\n\
    \        return -1 * Math.abs(arr[0]) * Math.abs(arr[1]);\n    }\n}\n", "    let\
    \ len = arr.length;\n    if (len === 0) {\n        return undefined;\n    }\n\
    \    return arr.reduce((acc, val) => {\n        return acc + Math.abs(val) * prod(val,\
    \ len);\n    }, 0);\n}\n", "    if (arr.length === 0) return undefined;\n    let\
    \ res: number = 1;\n    let sign: number = 1;\n    let sum: number = 0;\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== 0) {\n          \
    \  res *= arr[i];\n            sign *= sign_num(arr[i]);\n            sum += Math.abs(arr[i]);\n\
    \        }\n    }\n    return sign * sum;\n}\n\nconsole.log(prod_signs([1, 2,\
    \ 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod_sign\
    \ = 1;\n    let sum_abs = 0;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] < 0) {\n            prod_sign *= -1;\n        } else if (arr[i]\
    \ > 0) {\n            prod_sign *= 1;\n        } else {\n            prod_sign\
    \ *= 0;\n        }\n        sum_abs += Math.abs(arr[i]);\n    }\n    return sum_abs\
    \ * prod_sign;\n}\n", "    let res = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        prod *= Math.sign(arr[i]);\n        res += Math.abs(arr[i]);\n\
    \    }\n    if (arr.length) {\n        return res * prod;\n    }\n    return undefined;\n\
    }\n", "    if (arr.length === 0) return undefined;\n    const sum: number = arr.reduce((acc,\
    \ curr) => Math.abs(curr) + acc, 0);\n    const sign: number = arr.reduce((acc,\
    \ curr) => Math.sign(curr) * acc, 1);\n    return sum * sign;\n}\n", "    // your\
    \ code here\n    return;\n}\n\n", "  return arr.length > 0\n    ? arr.reduce((acc,\
    \ el) => (acc += Math.abs(el) * Math.sign(el)), 0)\n    : undefined;\n}\n\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "    if (arr.length == 0) {\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for (let item of arr) {\n        sum += Math.abs(item);\n\
    \        prod *= Math.sign(item);\n    }\n    return sum * prod;\n}", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n  let prod = 1;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    prod *= sign(arr[i]);\n  }\n  return prod;\n}\nconsole.log(prod_signs([1,\
    \ 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n",
  "  if (arr.length === 0) {\n    return undefined;\n  }\n  let mult = 1;\n  let sum\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n    \
    \  mult *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      mult\
    \ *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      mult *= 0;\n   \
    \ }\n  }\n  return sum * mult;\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]));\n\
    console.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));", "  if (arr.length\
    \ === 0) {\n    return undefined;\n  }\n\n  let sign_product = 1;\n  let abs_sum\
    \ = 0;\n  for (let i of arr) {\n    if (i < 0) {\n      sign_product *= -1;\n\
    \    } else if (i > 0) {\n      sign_product *= 1;\n    } else {\n      sign_product\
    \ *= 0;\n    }\n    abs_sum += Math.abs(i);\n  }\n  return abs_sum * sign_product;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
