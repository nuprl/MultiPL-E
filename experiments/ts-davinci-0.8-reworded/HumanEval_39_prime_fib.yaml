name: HumanEval_39_prime_fib
language: ts
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
completions: ["    let fibList: number[] = [2, 3];\n    let num: number = 3;\n   \
    \ let count: number = 0;\n    let primeCount: number = 2;\n    while (primeCount\
    \ <= n) {\n        num += 2;\n        let flag: boolean = true;\n        for (let\
    \ i: number = 2; i <= num / 2; i++) {\n            if (num % i == 0) {\n     \
    \           flag = false;\n                break;\n            }\n        }\n\
    \        if (flag) {\n            count++;\n            if (count === primeCount)\
    \ {\n                fibList.push(num);\n                primeCount++;\n     \
    \       }\n        }\n    }\n    return fibList[n - 1];\n}", "  return helper(fib(n),\
    \ n);\n}\n", "    if (n == 1) {\n        return 2;\n    }\n    else if (n == 2)\
    \ {\n        return 3;\n    }\n    else {\n        var i = 3;\n        var number\
    \ = 5;\n        var prime_num = new Array();\n        prime_num.push(2);\n   \
    \     prime_num.push(3);\n        while (i < n) {\n            number += 2;\n\
    \            if (prime_num.every(element => number % element != 0)) {\n      \
    \          prime_num.push(number);\n                i++;\n            }\n    \
    \    }\n        return number;\n    }\n}\n", "  let fibs: number[] = [2, 3];\n\
    \  let i: number = 1;\n  while (i < n) {\n    fibs.push(fibs[i - 1] + fibs[i]);\n\
    \    i++;\n  }\n  return fibs[n - 1];\n}\n", "  let fib_num = fibonacci(n);\n\
    \  return is_prime(fib_num) ? fib_num : prime_fib(n+1);\n}\n\n", "    let fib\
    \ = fibonacci(n);\n    let prime = prime_number(n);\n    for (let i = 0; i < n;\
    \ i++) {\n        if (fib[i] == prime[i]) {\n            return fib[i];\n    \
    \    }\n    }\n}\n", "    let fibNum: number = fib(n);\n    while (!isPrime(fibNum))\
    \ {\n        n++;\n        fibNum = fib(n);\n    }\n    return fibNum;\n}\n\n",
  "    if (n < 1) throw new Error('prime_fib(n): n must be > 0');\n    let primes\
    \ = [];\n    let fibonacci = [1, 2];\n    while (primes.length < n) {\n      \
    \  let next = fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2];\n\
    \        if (next <= 1000) fibonacci.push(next);\n        if (primes.length ===\
    \ 0) {\n            primes.push(2);\n        } else {\n            if (primes.some(p\
    \ => next % p === 0)) {\n                //not prime\n            } else {\n \
    \               primes.push(next);\n            }\n        }\n    }\n    return\
    \ primes[primes.length - 1];\n}\n", "  const fib = fibonacci();\n  const prim\
    \ = prime();\n  let fib_prim: number = prim.next().value;\n  for (let i = 1; i\
    \ < n; i++) {\n    let fib_n: number = fib.next().value;\n    while (fib_n !=\
    \ fib_prim) {\n      if (fib_n > fib_prim) {\n        fib_prim = prim.next().value;\n\
    \      } else {\n        fib_n = fib.next().value;\n      }\n    }\n  }\n  return\
    \ fib_prim;\n}\n", "    let a = 0, b = 1, c = 1;\n    let primeFib: number = 0;\n\
    \    let count: number = 0;\n    while (count < n) {\n        if (isPrime(c))\
    \ {\n            primeFib = c;\n            count++;\n        }\n        c = a\
    \ + b;\n        a = b;\n        b = c;\n    }\n    return primeFib;\n}\n", " \
    \ let i = 1;\n  let count = 0;\n  let x = 0;\n  let y = 1;\n  let z = 1;\n  while\
    \ (count < n) {\n    z = x + y;\n    x = y;\n    y = z;\n    if (is_prime(z))\
    \ {\n      count++;\n    }\n  }\n  return z;\n}\n", "  let a = 1;\n  let b = 2;\n\
    \  let i = 0;\n  let c = a + b;\n  let prime_fib_num = 2;\n  while (i < n) {\n\
    \    if (is_prime(c)) {\n      prime_fib_num = c;\n      i++;\n    }\n    a =\
    \ b;\n    b = c;\n    c = a + b;\n  }\n  return prime_fib_num;\n}\n", "    if\
    \ (n == 1) {\n        return 2;\n    }\n    else if (n == 2) {\n        return\
    \ 3;\n    }\n    else {\n        var fibonacci: Array<number> = [2, 3];\n    \
    \    var i: number = 2;\n        while (i < n) {\n            fibonacci.push(fibonacci[i\
    \ - 1] + fibonacci[i - 2]);\n            i++;\n        }\n        return fibonacci[fibonacci.length\
    \ - 1];\n    }\n}\n\nexport {prime_fib};", "    let fib_list:number[] = [1,1];\n\
    \    let result:number = 1;\n    while (n > 0) {\n        fib_list[2] = fib_list[0]\
    \ + fib_list[1];\n        fib_list[0] = fib_list[1];\n        fib_list[1] = fib_list[2];\n\
    \        if (is_prime(fib_list[1])) {\n            n -= 1;\n            result\
    \ = fib_list[1];\n        }\n    }\n    return result;\n}\n", "    //YOUR CODE\
    \ HERE\n    throw new Error(\"Method not implemented.\");\n}\n", "    return 0;\n\
    }\n", "    var i: number = 0;\n    var fn: number = 0;\n    var fn2: number =\
    \ 0;\n    var fn3: number = 0;\n    var fib: number = 0;\n    while (i < n) {\n\
    \        if (is_prime(fib) && is_fib(fib)) {\n            fn = fn2;\n        \
    \    fn2 = fn3;\n            fn3 = fib;\n            i = i + 1;\n        }\n \
    \       fib = fib + 1;\n    }\n    return fn;\n}\n", "    const f: number[] =\
    \ [1, 1];\n    let i: number = 1;\n    while (n > 0) {\n        i++;\n       \
    \ f[i] = f[i - 1] + f[i - 2];\n        if (is_prime(f[i])) {\n            n--;\n\
    \        }\n    }\n    return f[i];\n}\n", "    let f1 = 2, f2 = 3, i = 3;\n \
    \   while (i < n) {\n        let f3 = f1 + f2;\n        f1 = f2;\n        f2 =\
    \ f3;\n        if (fib(i) === f3) {\n            i++;\n        }\n    }\n    return\
    \ f1;\n}\n", "  const prime = (m: number): boolean => {\n    if (m == 2) {\n \
    \     return true;\n    } else if (m % 2 == 0) {\n      return false;\n    }\n\
    \    for (let i = 3; i < m; i++) {\n      if (m % i == 0) {\n        return false;\n\
    \      }\n    }\n    return true;\n  };\n  if (n == 1) {\n    return 2;\n  }\n\
    \  let sum = 1;\n  let i = 1;\n  let j = 1;\n  let cnt = 1;\n  while (cnt < n)\
    \ {\n    let temp = i;\n    i = j;\n    j = j + temp;\n    if (prime(j)) {\n \
    \     cnt += 1;\n    }\n  }\n  return j;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
