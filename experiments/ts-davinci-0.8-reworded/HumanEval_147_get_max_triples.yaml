name: HumanEval_147_get_max_triples
language: ts
prompt: "//You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n\
  // 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1,\
  \ 7, 13).\nfunction get_max_triples(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
  \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
  }\n\ntest();"
completions: ["    let a: number[] = [];\n    let totalTriples: number = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let\
    \ i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++)\
    \ {\n            for (let k = j + 1; k < a.length; k++) {\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    totalTriples++;\n  \
    \              }\n            }\n        }\n    }\n    return totalTriples;\n\
    }\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(8));\nconsole.log(get_max_triples(11));",
  "    let arr = [], temp = 1;\n    for (let i = 1; i <= n; i++) {\n        arr.push(temp);\n\
    \        temp = temp + 2 * i + 1;\n    }\n    console.log(arr);\n    let count\
    \ = 0;\n    for (let i = 0; i < arr.length - 2; i++) {\n        for (let j = i\
    \ + 1; j < arr.length - 1; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(1));\n\
    console.log(get_max_triples(2));\nconsole.log(get_max_triples(4));\nconsole.log(get_max_triples(6));\n\
    console.log(get_max_triples(10));\n", "    let count = 0;\n    const a = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length;\
    \ j++) {\n            for (let k = j + 1; k < a.length; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let result = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n        \
    \        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n  \
    \                  result++;\n                }\n            }\n        }\n  \
    \  }\n    return result;\n}\n\nconsole.log(get_max_triples(5)); // 1\nconsole.log(get_max_triples(4));\
    \ // 0\nconsole.log(get_max_triples(7)); // 4\nconsole.log(get_max_triples(8));\
    \ // 6\nconsole.log(get_max_triples(9)); // 8\nconsole.log(get_max_triples(10));\
    \ // 10\nconsole.log(get_max_triples(200)); // 1172\nconsole.log(get_max_triples(300));\
    \ // 3810\nconsole.log(get_max_triples(400)); // 8526\nconsole.log(get_max_triples(500));\
    \ // 15626\nconsole.log(get_max_triples(1000)); // 97592", "    const a = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let\
    \ j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nexport function runTests(): void {\n    const inputs = [\n    \
    \    0,\n        1,\n        2,\n        5,\n        10,\n        100,\n     \
    \   1000,\n        10000,\n        100000,\n        1000000,\n        10000000,\n\
    \        100000000,\n        1000000000,\n        10000000000,\n        100000000000,\n\
    \        1000000000000,\n        10000000000000,\n        100000000000000,\n \
    \       1000000000000000,\n        10000000000000000,\n        100000000000000000,\n\
    \        1000000000000000000,\n        10000000000000000000,\n        100000000000000000000,\n\
    \        1000000000000000000000,\n        10000000000000000000000,\n        100000000000000000000000,\n\
    \        1000000000000000000000000,\n        10000000000000000000000000,\n   \
    \     100000000000000000000000000,\n        1000000000000000000000000000,\n  \
    \      10000000000000000000000000000,\n        100000000000000000000000000000,\n\
    \        1000000000000000000000000000000,\n        10000000000000000000000000000000,\n\
    \        100000000000000000000000000000000,\n        1000000000000000000000000000000000,\n\
    \        10000000000000000000000000000000000,\n        100000000000000000000000000000000000,\n\
    \        1000000000000000000000000000000000000,\n        10000000000000000000000000000000000000,\n\
    \        100000000000000000000000000000000000000,\n        1000000000000000000000000000000000000000,\n\
    \        10000000000000000000000000000000000000000,\n        100000000000000000000000000000000000000000,\n\
    \        1000000000000000000000000000000000000000000,\n        10000000000000000000000000000000000000000000,\n\
    \        100000000000000000000000000000000000000000000,\n        1000000000000000000000000000000000000000000000,\n\
    \        10000000000000000000000000000000000000000000000,\n        100000000000000000000000000000000000000000000000,\n\
    \        1000000000000000000000000000000000000000000000000,\n        10000000000000000000000000000000000000000000000000,\n\
    \        100000000000000000000000000000000000000000000000000,\n        1000000000000000000000000000000000000000000000000000,\n\
    \        100", "    let count = 0;\n    let a = [];\n    for (let i = 1; i <=\
    \ n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(10));\n",
  "    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i +\
    \ 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let a: number[] = [],\n        cnt: number = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length;\
    \ j++) {\n            for (let k = j + 1; k < a.length; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) cnt++;\n            }\n        }\n   \
    \ }\n    return cnt;\n}", "  let max_triples = 0;\n  for (let i = 1; i < n; i++)\
    \ {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++)\
    \ {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n\
    \          max_triples++;\n        }\n      }\n    }\n  }\n  return max_triples;\n\
    }\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(6));", "    let\
    \ count = 0;\n    const triple = {};\n    for (let i = 1; i <= n; i++) {\n   \
    \     const ai = i * i - i + 1;\n        triple[ai] = ai;\n        for (let j\
    \ = i + 1; j <= n; j++) {\n            const aj = j * j - j + 1;\n           \
    \ triple[aj] = aj;\n            for (let k = j + 1; k <= n; k++) {\n         \
    \       const ak = k * k - k + 1;\n                triple[ak] = ak;\n        \
    \        const sum = ai + aj + ak;\n                if (sum % 3 === 0) {\n   \
    \                 if (ai === aj || aj === ak || ai === ak) {\n               \
    \         count++;\n                    } else {\n                        count\
    \ += 3;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n\nexport default get_max_triples;", "    let arr\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n\
    \    }\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   for (let j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1;\
    \ k < arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 ===\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n\nconsole.log(get_max_triples(5));", "   \
    \ let sum = 0;\n    let triples = 0;\n    for (let i = 1; i <= n; i++) {\n   \
    \     sum = i * i - i + 1;\n        for (let j = i + 1; j <= n; j++) {\n     \
    \       sum += j * j - j + 1;\n            for (let k = j + 1; k <= n; k++) {\n\
    \                sum += k * k - k + 1;\n                if (sum % 3 === 0) {\n\
    \                    triples++;\n                }\n                sum -= k *\
    \ k - k + 1;\n            }\n            sum -= j * j - j + 1;\n        }\n  \
    \  }\n    return triples;\n}\n", "    let arr = [], total = 0;\n    for (let i\
    \ = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++)\
    \ {\n            for (let k = j + 1; k < arr.length; k++) {\n                if\
    \ ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    total += 1;\n\
    \                }\n            }\n        }\n    }\n    return total;\n}\n\n\
    console.log(get_max_triples(5));\nconsole.log(get_max_triples(6));\nconsole.log(get_max_triples(7));\n\
    console.log(get_max_triples(8));\nconsole.log(get_max_triples(9));\nconsole.log(get_max_triples(10));",
  "    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let count: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));\n\n",
  "    let a: number[] = [];\n    let count: number = 0;\n    let i: number = 0;\n\
    \    let j: number = 0;\n    let k: number = 0;\n    for (i = 1; i <= n; i++)\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for (i = 0; i < a.length; i++)\
    \ {\n        for (j = i + 1; j < a.length; j++) {\n            for (k = j + 1;\
    \ k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "    //your code here\n    let a = [];\n    for\
    \ (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count\
    \ = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n", "    const a = Array.from({ length:\
    \ n }, (_, idx) => idx * idx - idx + 1);\n    let count = 0;\n    for (let i =\
    \ 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n\
    \            for (let k = j + 1; k < a.length; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let arr = [...Array(n)].map((_,\
    \ i) => (i + 1) * (i + 1) - (i + 1) + 1);\n    let count = 0;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++)\
    \ {\n            for (let k = j + 1; k < arr.length; k++) {\n                if\
    \ ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\n\n", " \
    \ let count = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j <\
    \ n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (((i * i - i\
    \ + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 === 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(3));", "    let a: number[] = [], count: number =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n   \
    \ }\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j <\
    \ a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n   \
    \             if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
