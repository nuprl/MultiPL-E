name: HumanEval_147_get_max_triples
language: ts
prompt: "//You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n\
  // 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1,\
  \ 7, 13).\nfunction get_max_triples(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_max_triples;\n  assert.deepEqual(candidate(5),1);\n\
  \  assert.deepEqual(candidate(6),4);\n  assert.deepEqual(candidate(10),36);\n  assert.deepEqual(candidate(100),53361);\n\
  }\n\ntest();"
completions: ["    let a: number[] = [];\n    let totalTriples: number = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let\
    \ i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++)\
    \ {\n            for (let k = j + 1; k < a.length; k++) {\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    totalTriples++;\n  \
    \              }\n            }\n        }\n    }\n    return totalTriples;\n\
    }\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(8));\nconsole.log(get_max_triples(11));",
  "    let arr = [], temp = 1;\n    for (let i = 1; i <= n; i++) {\n        arr.push(temp);\n\
    \        temp = temp + 2 * i + 1;\n    }\n    console.log(arr);\n    let count\
    \ = 0;\n    for (let i = 0; i < arr.length - 2; i++) {\n        for (let j = i\
    \ + 1; j < arr.length - 1; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(1));\n\
    console.log(get_max_triples(2));\nconsole.log(get_max_triples(4));\nconsole.log(get_max_triples(6));\n\
    console.log(get_max_triples(10));\n", "    let count = 0;\n    const a = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length;\
    \ j++) {\n            for (let k = j + 1; k < a.length; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let result = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n        \
    \        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n  \
    \                  result++;\n                }\n            }\n        }\n  \
    \  }\n    return result;\n}\n\nconsole.log(get_max_triples(5)); // 1\nconsole.log(get_max_triples(4));\
    \ // 0\nconsole.log(get_max_triples(7)); // 4\nconsole.log(get_max_triples(8));\
    \ // 6\nconsole.log(get_max_triples(9)); // 8\nconsole.log(get_max_triples(10));\
    \ // 10\nconsole.log(get_max_triples(200)); // 1172\nconsole.log(get_max_triples(300));\
    \ // 3810\nconsole.log(get_max_triples(400)); // 8526\nconsole.log(get_max_triples(500));\
    \ // 15626\nconsole.log(get_max_triples(1000)); // 97592", "    const a = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let\
    \ j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nexport function runTests(): void {\n    const inputs = [\n    \
    \    0,\n        1,\n        2,\n        5,\n        10,\n        100,\n     \
    \   1000,\n        10000,\n        100000,\n        1000000,\n        10000000,\n\
    \        100000000,\n        1000000000,\n        10000000000,\n        100000000000,\n\
    \        1000000000000,\n        10000000000000,\n        100000000000000,\n \
    \       1000000000000000,\n        10000000000000000,\n        100000000000000000,\n\
    \        1000000000000000000,\n        10000000000000000000,\n        100000000000000000000,\n\
    \        1000000000000000000000,\n        10000000000000000000000,\n        100000000000000000000000,\n\
    \        1000000000000000000000000,\n        10000000000000000000000000,\n   \
    \     100000000000000000000000000,\n        1000000000000000000000000000,\n  \
    \      10000000000000000000000000000,\n        100000000000000000000000000000,\n\
    \        1000000000000000000000000000000,\n        10000000000000000000000000000000,\n\
    \        100000000000000000000000000000000,\n        1000000000000000000000000000000000,\n\
    \        10000000000000000000000000000000000,\n        100000000000000000000000000000000000,\n\
    \        1000000000000000000000000000000000000,\n        10000000000000000000000000000000000000,\n\
    \        100000000000000000000000000000000000000,\n        1000000000000000000000000000000000000000,\n\
    \        10000000000000000000000000000000000000000,\n        100000000000000000000000000000000000000000,\n\
    \        1000000000000000000000000000000000000000000,\n        10000000000000000000000000000000000000000000,\n\
    \        100000000000000000000000000000000000000000000,\n        1000000000000000000000000000000000000000000000,\n\
    \        10000000000000000000000000000000000000000000000,\n        100000000000000000000000000000000000000000000000,\n\
    \        1000000000000000000000000000000000000000000000000,\n        10000000000000000000000000000000000000000000000000,\n\
    \        100000000000000000000000000000000000000000000000000,\n        1000000000000000000000000000000000000000000000000000,\n\
    \        100", "    let count = 0;\n    let a = [];\n    for (let i = 1; i <=\
    \ n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(10));\n",
  "    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i +\
    \ 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let a: number[] = [],\n        cnt: number = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length;\
    \ j++) {\n            for (let k = j + 1; k < a.length; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) cnt++;\n            }\n        }\n   \
    \ }\n    return cnt;\n}", "  let max_triples = 0;\n  for (let i = 1; i < n; i++)\
    \ {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++)\
    \ {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n\
    \          max_triples++;\n        }\n      }\n    }\n  }\n  return max_triples;\n\
    }\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(6));", "    let\
    \ count = 0;\n    const triple = {};\n    for (let i = 1; i <= n; i++) {\n   \
    \     const ai = i * i - i + 1;\n        triple[ai] = ai;\n        for (let j\
    \ = i + 1; j <= n; j++) {\n            const aj = j * j - j + 1;\n           \
    \ triple[aj] = aj;\n            for (let k = j + 1; k <= n; k++) {\n         \
    \       const ak = k * k - k + 1;\n                triple[ak] = ak;\n        \
    \        const sum = ai + aj + ak;\n                if (sum % 3 === 0) {\n   \
    \                 if (ai === aj || aj === ak || ai === ak) {\n               \
    \         count++;\n                    } else {\n                        count\
    \ += 3;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n\nexport default get_max_triples;", "    let arr\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n\
    \    }\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   for (let j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1;\
    \ k < arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 ===\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n\nconsole.log(get_max_triples(5));", "   \
    \ let sum = 0;\n    let triples = 0;\n    for (let i = 1; i <= n; i++) {\n   \
    \     sum = i * i - i + 1;\n        for (let j = i + 1; j <= n; j++) {\n     \
    \       sum += j * j - j + 1;\n            for (let k = j + 1; k <= n; k++) {\n\
    \                sum += k * k - k + 1;\n                if (sum % 3 === 0) {\n\
    \                    triples++;\n                }\n                sum -= k *\
    \ k - k + 1;\n            }\n            sum -= j * j - j + 1;\n        }\n  \
    \  }\n    return triples;\n}\n", "    let arr = [], total = 0;\n    for (let i\
    \ = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++)\
    \ {\n            for (let k = j + 1; k < arr.length; k++) {\n                if\
    \ ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    total += 1;\n\
    \                }\n            }\n        }\n    }\n    return total;\n}\n\n\
    console.log(get_max_triples(5));\nconsole.log(get_max_triples(6));\nconsole.log(get_max_triples(7));\n\
    console.log(get_max_triples(8));\nconsole.log(get_max_triples(9));\nconsole.log(get_max_triples(10));",
  "    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let count: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));\n\n",
  "    let a: number[] = [];\n    let count: number = 0;\n    let i: number = 0;\n\
    \    let j: number = 0;\n    let k: number = 0;\n    for (i = 1; i <= n; i++)\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for (i = 0; i < a.length; i++)\
    \ {\n        for (j = i + 1; j < a.length; j++) {\n            for (k = j + 1;\
    \ k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "    //your code here\n    let a = [];\n    for\
    \ (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count\
    \ = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n", "    const a = Array.from({ length:\
    \ n }, (_, idx) => idx * idx - idx + 1);\n    let count = 0;\n    for (let i =\
    \ 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n\
    \            for (let k = j + 1; k < a.length; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let arr = [...Array(n)].map((_,\
    \ i) => (i + 1) * (i + 1) - (i + 1) + 1);\n    let count = 0;\n    for (let i\
    \ = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++)\
    \ {\n            for (let k = j + 1; k < arr.length; k++) {\n                if\
    \ ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\n\n", " \
    \ let count = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j <\
    \ n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (((i * i - i\
    \ + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 === 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(3));", "    let a: number[] = [], count: number =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n   \
    \ }\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j <\
    \ a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n   \
    \             if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "  var count = 0;\n  var a = [];\n  for (var i = 1; i <= n; i++) {\n    a.push(i\
    \ * i - i + 1);\n  }\n  for (var j = 0; j < a.length; j++) {\n    for (var k =\
    \ j + 1; k < a.length; k++) {\n      for (var l = k + 1; l < a.length; l++) {\n\
    \        if ((a[j] + a[k] + a[l]) % 3 === 0) {\n          count += 1;\n      \
    \  }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(get_max_triples(5));\n",
  "    return 1;\n}\n\n\n", "    let count = 0;\n    let arr = [...Array(n).keys()].map(x\
    \ => x * x - x + 1);\n    for (let i = 0; i < arr.length; i++) {\n        for\
    \ (let j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k <\
    \ arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0)\
    \ count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(6));\nconsole.log(get_max_triples(7));", "    let\
    \ a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i\
    \ - i + 1);\n    }\n    let count: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "    let result = 0;\n    const a\
    \ = new Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i\
    \ + 1;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1;\
    \ j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    result++;\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}\n", " \
    \ let count = 0;\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i\
    \ * i - i + 1);\n  }\n  console.log(arr);\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1;\
    \ k < arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", " \
    \   let sum = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i +\
    \ 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) sum++;\n\
    \            }\n        }\n    }\n    return sum;\n}\n", "    // solution 1\n\
    \    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n        \
    \        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(get_max_triples(7));", "    let arr =\
    \ new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = i * i - i\
    \ + 1;\n    }\n    let result = 0;\n    for (let i = 0; i < n - 2; i++) {\n  \
    \      for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1;\
    \ k < n; k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n\
    \                    result++;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\n\nconsole.log(get_max_triples(5));", "    let res\
    \ = 0;\n    const arr = [1];\n    for (let i = 1; i < n; i++) {\n        arr.push(i\
    \ * i - i + 1);\n    }\n    for (let i = 0; i < n - 2; i++) {\n        for (let\
    \ j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n\
    \                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n               \
    \     res++;\n                }\n            }\n        }\n    }\n    return res;\n\
    }\n", "  if (n < 3) return 0;\n  let count = 0;\n  let array: number[] = [];\n\
    \  for (let i = 1; i <= n; i++) {\n    array.push(i * i - i + 1);\n  }\n  for\
    \ (let i = 0; i < array.length - 2; i++) {\n    for (let j = i + 1; j < array.length\
    \ - 1; j++) {\n      for (let k = j + 1; k < array.length; k++) {\n        if\
    \ ((array[i] + array[j] + array[k]) % 3 === 0) {\n          count++;\n       \
    \ }\n      }\n    }\n  }\n  return count;\n}\n", "    let a: number[] = [],\n\
    \        sum: number = 0,\n        count: number = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                sum = a[i] + a[j] + a[k];\n\
    \                if (sum % 3 === 0) {\n                    count++;\n        \
    \        }\n            }\n        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(4));",
  "    let arr = []\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i -\
    \ i + 1)\n    }\n    let count = 0\n    for (let i = 0; i < arr.length; i++) {\n\
    \        for (let j = i + 1; j < arr.length; j++) {\n            for (let k =\
    \ j + 1; k < arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k])\
    \ % 3 === 0) {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    let a: number[] = [];\n    for\
    \ (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let result:\
    \ number = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j =\
    \ i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++)\
    \ {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                 \
    \   result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(get_max_triples(5));", "    return n;\n}\n", "    let\
    \ result = 0;\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n        for\
    \ (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n            \
    \        result += 1;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(6));\n\
    console.log(get_max_triples(11));\nconsole.log(get_max_triples(14));\n", "   \
    \ let count = 0;\n    let a: number[] = [];\n    for (let i = 1; i <= n; i++)\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) count++;\n            }\n        }\n    }\n    return count;\n}\n",
  "    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let sum3 = 0;\n    for (let i = 0; i < a.length; i++)\
    \ {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let k\
    \ = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3\
    \ === 0) {\n                    sum3++;\n                }\n            }\n  \
    \      }\n    }\n    return sum3;\n}", "  let result = 0;\n  for (let i = 1; i\
    \ < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1;\
    \ k < n; k++) {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n\
    }\n\nexport default get_max_triples;", "    let d = {}\n    let triples = 0\n\
    \    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1\n        if\
    \ (a % 3 === 0) {\n            d[a] = d[a] ? d[a] + 1 : 1\n        }\n    }\n\
    \    for (let i = 1; i <= n; i++) {\n        let a = i * i - i + 1\n        if\
    \ (a % 3 === 0) {\n            let ta = d[a]\n            for (let j = i + 1;\
    \ j <= n; j++) {\n                let b = j * j - j + 1\n                if (b\
    \ % 3 === 0) {\n                    let tb = d[b]\n                    for (let\
    \ k = j + 1; k <= n; k++) {\n                        let c = k * k - k + 1\n \
    \                       if (c % 3 === 0) {\n                            let tc\
    \ = d[c]\n                            if (a + b + c === 3) {\n               \
    \                 triples += ta * tb * tc\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return triples\n}\n", "    let arr = [];\n    for\
    \ (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    let\
    \ count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j =\
    \ i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    var a: number[] = [1];\n    for (var i = 1; i <\
    \ n; i++) {\n        a.push(i * i - i + 1);\n    }\n    var count: number = 0;\n\
    \    for (var i = 0; i < n - 2; i++) {\n        for (var j = i + 1; j < n - 1;\
    \ j++) {\n            for (var k = j + 1; k < n; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n\nmain();", "  let count\
    \ = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n\
    \      for (let k = j + 1; k < n; k++) {\n        if ((i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 === 0) {\n          count++;\n        }\n      }\n\
    \    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));", "  let sum\
    \ = 0;\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i\
    \ + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1;\
    \ j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n     \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          sum++;\n        }\n     \
    \ }\n    }\n  }\n  return sum;\n}\n", "    let a: number[] = [];\n    for (let\
    \ i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    console.log(a);\n\
    \    let count: number = 0;\n    for (let i = 0; i < a.length; i++) {\n      \
    \  for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k\
    \ < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nconsole.log(get_max_triples(10));\n", "  let a: number[]\
    \ = [];\n  let s: number = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i\
    \ * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j =\
    \ i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n\
    \        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          s++;\n        }\n  \
    \    }\n    }\n  }\n  return s;\n}\n", "    let tripleCount = 0;\n    let arr\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1;\
    \ j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length; k++)\
    \ {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n           \
    \         tripleCount++;\n                }\n            }\n        }\n    }\n\
    \    return tripleCount;\n}\n\nconsole.log(get_max_triples(5));", "    let sum\
    \ = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n;\
    \ j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n                \
    \    sum++;\n                }\n            }\n        }\n    }\n    return sum;\n\
    }\n\nconsole.log(get_max_triples(5));", "  let triples = 0;\n  for (let i = 1;\
    \ i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k =\
    \ j + 1; k <= n; k++) {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 === 0) {\n          triples++;\n        }\n      }\n    }\n  }\n\
    \  return triples;\n}", "    var valid_triples = 0;\n    for (var i = 1; i < n;\
    \ i++) {\n        for (var j = i + 1; j < n; j++) {\n            for (var k =\
    \ j + 1; k < n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0) {\n                    valid_triples++;\n           \
    \     }\n            }\n        }\n    }\n    return valid_triples;\n}\n", " \
    \   let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let counter: number = 0;\n    for (let i = 0; i <\
    \ a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n       \
    \     for (let k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 === 0) {\n                    counter++;\n                }\n  \
    \          }\n        }\n    }\n    return counter;\n}\n", "    let a: number[]\
    \ = [];\n    let count: number = 0;\n    for (let i = 1; i <= n; i++) {\n    \
    \    a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n\
    \        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j\
    \ + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 ===\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n", "    let res = 0;\n    let a = new Array<number>(n);\n\
    \    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++)\
    \ {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) res++;\n            }\n        }\n    }\n    return\
    \ res;\n}\nconsole.log(get_max_triples(5));\n", "    return 1;\n}\n\nconsole.log(get_max_triples(5));",
  "  let result = 0;\n  const arr = [];\n  let sum = 0;\n  for (let i = 1; i <= n;\
    \ i++) {\n    arr.push(i * i - i + 1);\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j\
    \ + 1; k < arr.length; k++) {\n        sum = arr[i] + arr[j] + arr[k];\n     \
    \   if (sum % 3 === 0) {\n          result++;\n        }\n      }\n    }\n  }\n\
    \  return result;\n}\nconsole.log(get_max_triples(5));", "    let triple = 0;\n\
    \    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i\
    \ - i + 1);\n    }\n    for (let i = 0; i < arr.length; i++) {\n        for (let\
    \ j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              triple++;\n                }\n            }\n        }\n    }\n\
    \    return triple;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(10));\n\
    console.log(get_max_triples(50));", "  let count = 0;\n  for (let i = 1; i < n;\
    \ i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k <\
    \ n; k++) {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ===\
    \ 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n", "    return n;\n}\n", "    const max_triples = 0;\n    const a = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n \
    \           for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 === 0) {\n                    max_triples++;\n                }\n\
    \            }\n        }\n    }\n    return max_triples;\n}", "    let ar: number[]\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        ar.push(i * i - i + 1);\n\
    \    }\n    let count: number = 0;\n    for (let i = 0; i < ar.length; i++) {\n\
    \        for (let j = i + 1; j < ar.length; j++) {\n            for (let k = j\
    \ + 1; k < ar.length; k++) {\n                if ((ar[i] + ar[j] + ar[k]) % 3\
    \ === 0) {\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\n", "    let triples = 0;\n    for (let\
    \ i = 1; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n          \
    \  for (let k = j + 1; k < n; k++) {\n                if ((i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 === 0) triples++;\n            }\n        }\n\
    \    }\n    return triples;\n}\n", "    let arr = [...Array(n + 1).keys()].slice(1).map(el\
    \ => el * el - el + 1);\n    let counter = 0;\n    for (let i = 0; i < arr.length\
    \ - 2; i++) {\n        for (let j = i + 1; j < arr.length - 1; j++) {\n      \
    \      for (let k = j + 1; k < arr.length; k++) {\n                if ((arr[i]\
    \ + arr[j] + arr[k]) % 3 === 0) {\n                    counter++;\n          \
    \      }\n            }\n        }\n    }\n    return counter;\n}\nconsole.log(get_max_triples(5));",
  "    var count: number = 0;\n    for (var i: number = 1; i < n - 1; i++) {\n   \
    \     for (var j: number = i + 1; j < n; j++) {\n            for (var k: number\
    \ = j + 1; k <= n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\n", "    let a: number[]\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n\
    \    }\n    let count: number = 0;\n    for (let i = 0; i < a.length; i++) {\n\
    \        for (let j = i + 1; j < a.length; j++) {\n            for (let k = j\
    \ + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 ===\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n", "  let c = 0;\n  for (let i = 1; i < n;\
    \ i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k <\
    \ n; k++) {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ===\
    \ 0) {\n          c++;\n        }\n      }\n    }\n  }\n  return c;\n}", "   \
    \ let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i +\
    \ 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n          \
    \      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(7));\n\
    console.log(get_max_triples(10));\n", "    return 4;\n}\n\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(10));\nconsole.log(get_max_triples(20));", "  var\
    \ a = [], count = 0;\n  for (var i = 1; i <= n; i++) {\n    a.push(i * i - i +\
    \ 1);\n  }\n  for (var i = 0; i < a.length; i++) {\n    for (var j = i + 1; j\
    \ < a.length; j++) {\n      for (var k = j + 1; k < a.length; k++) {\n       \
    \ if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n     \
    \ }\n    }\n  }\n  return count;\n}", "  let array: number[] = [];\n  let count:\
    \ number = 0;\n  for (let i = 1; i <= n; i++) {\n    array.push(i * i - i + 1);\n\
    \  }\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j <\
    \ array.length; j++) {\n      for (let k = j + 1; k < array.length; k++) {\n \
    \       if ((array[i] + array[j] + array[k]) % 3 === 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n", "    let res = 0;\n  \
    \  for (let i = 1; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++)\
    \ {\n            for (let k = j + 1; k <= n; k++) {\n                if ((i *\
    \ i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n                  \
    \  res++;\n                }\n            }\n        }\n    }\n    return res;\n\
    }\n", "    let a: number[] = [], len: number = 0;\n    for (let i: number = 1;\
    \ i <= n; i++) {\n        a.push(i * i - i + 1);\n        len++;\n    }\n    let\
    \ max_triples: number = 0;\n    for (let i: number = 0; i < len; i++) {\n    \
    \    for (let j: number = i + 1; j < len; j++) {\n            for (let k: number\
    \ = j + 1; k < len; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0)\
    \ max_triples++;\n            }\n        }\n    }\n    return max_triples;\n}",
  "    let res = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1;\
    \ j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n             \
    \   if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n       \
    \             res++;\n                }\n            }\n        }\n    }\n   \
    \ return res;\n}\n", "    let triple_count = 0;\n    for (let i = 1; i < n; i++)\
    \ {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1;\
    \ k < n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 === 0) {\n                    triple_count++;\n                }\n\
    \            }\n        }\n    }\n    return triple_count;\n}\n", "    let len\
    \ = n - 2;\n    let triples = 0;\n    for (let i = 0; i < len; i++) {\n      \
    \  for (let j = i + 1; j < len; j++) {\n            for (let k = j + 1; k < len;\
    \ k++) {\n                if ((i + j + k) % 3 === 0) {\n                    triples\
    \ += 1;\n                }\n            }\n        }\n    }\n    return triples;\n\
    }\n\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(7));\nconsole.log(get_max_triples(10));",
  "    let count = 0;\n    for (let i = 1; i < n - 1; i++) {\n        for (let j =\
    \ i + 1; j < n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n     \
    \           if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));",
  "    let res = 0;\n    for (let i = 1; i < n - 1; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            if ((i + j) % 3 == 0) {\n                res++;\n\
    \            }\n        }\n    }\n    return res;\n}\n\nconsole.log(get_max_triples(5));\n",
  "    var array: Array<number> = [];\n    var maxTriples: number = 0;\n    for (var\
    \ i = 1; i <= n; i++) {\n        array.push(i * i - i + 1);\n    }\n    for (var\
    \ i = 0; i < array.length; i++) {\n        for (var j = i + 1; j < array.length;\
    \ j++) {\n            for (var k = j + 1; k < array.length; k++) {\n         \
    \       if ((array[i] + array[j] + array[k]) % 3 == 0) {\n                   \
    \ maxTriples++;\n                }\n            }\n        }\n    }\n    return\
    \ maxTriples;\n}\nconsole.log(get_max_triples(5));\n", "    const a = new Array(n);\n\
    \    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i +\
    \ 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n          \
    \      if ((a[i] + a[j] + a[k]) % 3 === 0) count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n", "    let result = 0;\n    let array = createArray(n);\n\
    \    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length;\
    \ j++) {\n            for (let k = 0; k < array.length; k++) {\n             \
    \   if (i < j && j < k && (array[i] + array[j] + array[k]) % 3 === 0) {\n    \
    \                result += 1;\n                }\n            }\n        }\n \
    \   }\n    return result;\n}\n", "    //summation of ai = (n * (n + 1) * (2n +\
    \ 1)) / 6\n    const ai = [0, 1, 3, 7, 13, 21];\n    const summation = ai.reduce((acc,\
    \ curr) => acc + curr, 0);\n    const a = [...Array(n)].map((_, i) => i * i -\
    \ i + 1);\n    let multOf3 = 0;\n    for (let i = 0; i < a.length; i++) {\n  \
    \      for (let j = i + 1; j < a.length; j++) {\n            for (let k = j +\
    \ 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0)\
    \ {\n                    multOf3++;\n                }\n            }\n      \
    \  }\n    }\n    return multOf3;\n}", "    let a: number[] = [];\n    for (let\
    \ i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count:\
    \ number = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j =\
    \ i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++)\
    \ {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let a: number[] = [];\n    let count: number = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0;\
    \ i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n   \
    \         for (let k = j + 1; k < a.length; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let t = n - 2,\
    \ res = 0;\n    for (let i = 1; i < n - 1; i++) {\n        if ((i * i - i + 1)\
    \ % 3 == 0) {\n            res += t;\n        }\n        t--;\n    }\n    return\
    \ res;\n}", "  let counter = 0;\n  for (let i = 1; i < n; i++) {\n    for (let\
    \ j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if\
    \ ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n          counter++;\n\
    \        }\n      }\n    }\n  }\n  return counter;\n}\n", "    let result = 0;\n\
    \    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i\
    \ - i + 1);\n    }\n    for (let i = 0; i < arr.length; i++) {\n        for (let\
    \ j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              result++;\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(get_max_triples(5));\n", "  let count =\
    \ 0;\n  const a = new Array(n).fill(0).map((_, i) => i * i - i + 1);\n  for (let\
    \ i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n\
    \      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] + a[j] + a[k])\
    \ % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n", "    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i\
    \ * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            for\
    \ (let k = j + 1; k < arr.length; k++) {\n                if ((arr[i] + arr[j]\
    \ + arr[k]) % 3 === 0) {\n                    count++;\n                }\n  \
    \          }\n        }\n    }\n    return count;\n}\n", "    // Write your code\
    \ here\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let maxTriple = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    maxTriple++;\n                }\n          \
    \  }\n        }\n    }\n    return maxTriple;\n}\nconsole.log(get_max_triples(2));\n\
    console.log(get_max_triples(3));\nconsole.log(get_max_triples(4));\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(6));\nconsole.log(get_max_triples(7));\nconsole.log(get_max_triples(100));\n",
  "    const a = [...Array(n)].map((_, i) => i * i - i + 1);\n    const sumThree =\
    \ (x: number, y: number, z: number) => x + y + z;\n    const isMod = (x: number)\
    \ => x % 3 === 0;\n    const multiples = a.reduce((acc, x, i) => {\n        if\
    \ (i === a.length - 1) return acc;\n        const twoSum = a.slice(i + 1).reduce((acc,\
    \ y, j) => {\n            if (j === a.length - i - 1) return acc;\n          \
    \  const threeSum = a.slice(i + j + 2).reduce((acc, z) => {\n                if\
    \ (isMod(sumThree(x, y, z))) return acc + 1;\n                return acc;\n  \
    \          }, 0);\n            return acc + threeSum;\n        }, 0);\n      \
    \  return acc + twoSum;\n    }, 0);\n    return multiples;\n}\n", "    return\
    \ 0;\n}\nconsole.log(get_max_triples(6)); // expect: 10\nconsole.log(get_max_triples(4));\
    \ // expect: 3\nconsole.log(get_max_triples(9)); // expect: 25\nconsole.log(get_max_triples(2));\
    \ // expect: 0\nconsole.log(get_max_triples(10)); // expect: 36\nconsole.log(get_max_triples(50));\
    \ // expect: 725\nconsole.log(get_max_triples(51)); // expect: 814\nconsole.log(get_max_triples(100));\
    \ // expect: 3100\nconsole.log(get_max_triples(51)); // expect: 814\nconsole.log(get_max_triples(1000));\
    \ // expect: 46903\n", "    const a = [];\n    let count = 0;\n    for (let i\
    \ = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i =\
    \ 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n\
    \            for (let k = j + 1; k < a.length; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}", "  let arr = [];\n  for\
    \ (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count =\
    \ 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length;\
    \ j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i]\
    \ + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n  \
    \  }\n  }\n  return count;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(3));\n\
    console.log(get_max_triples(6));\nconsole.log(get_max_triples(8));\nconsole.log(get_max_triples(9));\n\
    console.log(get_max_triples(10));\n", "  let sum = 0;\n  for (let i = 1; i < n;\
    \ i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k <\
    \ n; k++) {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ===\
    \ 0) {\n          sum++;\n        }\n      }\n    }\n  }\n  return sum;\n}\n",
  "  let res = 0;\n  const arr = Array.from({ length: n }, (_, index) => index * index\
    \ - index + 1);\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i\
    \ + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++)\
    \ {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          res++;\n \
    \       }\n      }\n    }\n  }\n  return res;\n}\n\nconsole.log(get_max_triples(5));",
  "  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n\
    \  }\n  let counter = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let\
    \ j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length;\
    \ k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          counter\
    \ += 1;\n        }\n      }\n    }\n  }\n  return counter;\n}\nconsole.log(get_max_triples(5));\n",
  "    let a: number[] = new Array(n);\n    let counter: number = 0;\n    for (let\
    \ i: number = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for\
    \ (let i: number = 0; i < n; i++) {\n        for (let j: number = i + 1; j < n;\
    \ j++) {\n            for (let k: number = j + 1; k < n; k++) {\n            \
    \    if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    counter++;\n \
    \               }\n            }\n        }\n    }\n    return counter;\n}\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(8));\nconsole.log(get_max_triples(9));", "    let\
    \ a: number[] = [];\n    let answer: number = 0;\n    for (let i = 1; i <= n;\
    \ i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    answer++;\n                }\n            }\n\
    \        }\n    }\n    return answer;\n}\nconsole.log(get_max_triples(5));\n",
  "    let a: number[] = [];\n    let count: number = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));\n",
  "    let count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i +\
    \ 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n          \
    \      if ((j * j - j + 1 + i * i - i + 1 + k * k - k + 1) % 3 === 0) {\n    \
    \                count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let a: number[] = [1];\n    let result: number\
    \ = 0;\n    for (let i = 1; i < n; i++) {\n        a.push(i * i - i + 1);\n  \
    \  }\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j\
    \ < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n \
    \               if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n",
  "    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i -\
    \ i + 1);\n    }\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n\
    \        for (let j = i + 1; j < arr.length; j++) {\n            for (let k =\
    \ j + 1; k < arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k])\
    \ % 3 === 0) {\n                    sum++;\n                }\n            }\n\
    \        }\n    }\n    return sum;\n}\n", "    let arr = []\n    for (let i =\
    \ 1; i <= n; i++) {\n        arr.push(i * i - i + 1)\n    }\n    let count = 0\n\
    \    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            for (let k = j + 1; k < arr.length; k++) {\n           \
    \     if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let count: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "  // write your code here\n  const\
    \ arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n\
    \  }\n  let triples = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let\
    \ j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length;\
    \ k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          triples++;\n\
    \        }\n      }\n    }\n  }\n  return triples;\n}", "    var a: number[] =\
    \ [];\n    for (var i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n  \
    \  }\n    var sum: number = 0;\n    for (var i = 0; i < a.length; i++) {\n   \
    \     for (var j = i + 1; j < a.length; j++) {\n            for (var k = j + 1;\
    \ k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    sum++;\n                }\n            }\n        }\n   \
    \ }\n    return sum;\n}\n\nconsole.log(get_max_triples(10));\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(1));\nconsole.log(get_max_triples(19));", "    return\
    \ 0;\n}\n", "    let a: number[] = [];\n    let totalTriples: number = 0;\n  \
    \  let sum: number = 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    console.log(a);\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                sum = a[i] + a[j] + a[k];\n\
    \                if (sum % 3 === 0) {\n                    totalTriples++;\n \
    \               }\n            }\n        }\n    }\n    return totalTriples;\n\
    }\nconsole.log(get_max_triples(5));", "    let array = [];\n    for (let i = 1;\
    \ i <= n; i++) {\n        array.push(i * i - i + 1);\n    }\n    let count = 0;\n\
    \    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j <\
    \ array.length; j++) {\n            for (let k = j + 1; k < array.length; k++)\
    \ {\n                if ((array[i] + array[j] + array[k]) % 3 === 0) {\n     \
    \               count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nconsole.log(get_max_triples(5));", "  //set to start\n\
    \  const a: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i\
    \ - i + 1);\n  }\n  //return number of triples\n  let triples = 0;\n  for (let\
    \ i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n\
    \      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] + a[j] + a[k])\
    \ % 3 === 0) {\n          triples++;\n        }\n      }\n    }\n  }\n  return\
    \ triples;\n}\n", "    let result = 0;\n    let array = [1];\n    for (let i =\
    \ 1; i < n; i++) {\n        array.push(i * i - i + 1);\n    }\n    for (let i\
    \ = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length;\
    \ j++) {\n            for (let k = j + 1; k < array.length; k++) {\n         \
    \       if ((array[i] + array[j] + array[k]) % 3 === 0) {\n                  \
    \  result++;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n       \
    \ a.push(i * i - i + 1);\n    }\n    let count: number = 0;\n    for (let i =\
    \ 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n\
    \            for (let k = j + 1; k < a.length; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nconsole.log(get_max_triples(5));\n\
    \n", "    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i\
    \ * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            for\
    \ (let k = j + 1; k < arr.length; k++) {\n                if ((arr[i] + arr[j]\
    \ + arr[k]) % 3 === 0) {\n                    count++;\n                }\n  \
    \          }\n        }\n    }\n    return count;\n}\n\nconsole.log(get_max_triples(5));",
  "  let a: number[] = [];\n  let count: number = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n\
    \    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length;\
    \ k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(6));\nconsole.log(get_max_triples(7));\nconsole.log(get_max_triples(100));\n",
  "  let count = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j <\
    \ n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((i + j + k)\
    \ % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n", "    const arr = new Array(n).fill(0).map((v, i) => i * i - i + 1);\n  \
    \  let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let\
    \ j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}", "    // your code here\n    let a: number[] = [];\n  \
    \  let count: number = 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n        for\
    \ (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "  let res = 0;\n  for (let i = 1; i < n - 1; i++) {\n    for\
    \ (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n  \
    \      if ((i + j + k) % 3 === 0) {\n          res += 1;\n        }\n      }\n\
    \    }\n  }\n  return res;\n}\n", "    let a: number[] = [];\n    for (let i =\
    \ 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let total = 0;\n\
    \    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length;\
    \ j++) {\n            for (let k = j + 1; k < a.length; k++) {\n             \
    \   if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    total++;\n    \
    \            }\n            }\n        }\n    }\n    return total;\n}\n", "  \
    \  let _a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        _a.push(i\
    \ * i - i + 1);\n    }\n    let count: number = 0;\n    for (let i = 0; i < _a.length;\
    \ i++) {\n        for (let j = i + 1; j < _a.length; j++) {\n            for (let\
    \ k = j + 1; k < _a.length; k++) {\n                if ((_a[i] + _a[j] + _a[k])\
    \ % 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "  let a: number[] = [];\n  let count:\
    \ number = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n\
    \  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length;\
    \ j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] +\
    \ a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n \
    \ }\n  return count;\n}\n", "    let arr = [];\n    for (let i = 1; i <= n; i++)\
    \ {\n        arr.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++)\
    \ {\n            for (let k = j + 1; k < arr.length; k++) {\n                if\
    \ ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(10));\nconsole.log(get_max_triples(2));\nconsole.log(get_max_triples(3));\n\
    console.log(get_max_triples(4));", "    let a: number[] = [];\n    for (let i\
    \ = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let res: number\
    \ = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    res++;\n\
    \                }\n            }\n        }\n    }\n    return res;\n}\n", " \
    \ let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n\
    \  }\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    for (let\
    \ j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length;\
    \ k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++\n\
    \        }\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(get_max_triples(5))",
  "    let a: number[] = [];\n    let count: number = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "    let a: number[] = [];\n    let\
    \ counter: number = 0;\n    for (let i: number = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    for (let i: number = 0; i < a.length; i++) {\n   \
    \     for (let j: number = 0; j < a.length; j++) {\n            for (let k: number\
    \ = 0; k < a.length; k++) {\n                if (i < j && j < k && (a[i] + a[j]\
    \ + a[k]) % 3 === 0) {\n                    counter++;\n                }\n  \
    \          }\n        }\n    }\n    return counter;\n}\n", "    const arr = new\
    \ Array(n);\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        arr[i]\
    \ = i * i - i + 1;\n    }\n    for (let i = 0; i < n - 2; i++) {\n        for\
    \ (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++)\
    \ {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let i = 1,\n        a = [],\n        triples = 0;\n    while\
    \ (i <= n) {\n        a.push(i * i - i + 1);\n        i++;\n    }\n    for (let\
    \ i = 0; i < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++)\
    \ {\n            for (let k = j + 1; k < a.length; k++) {\n                if\
    \ ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    triples++;\n       \
    \         }\n            }\n        }\n    }\n    return triples;\n}\n", "   \
    \ let arr = new Array(n).fill(0);\n    let sum = 0;\n    for (let i = 0; i < n;\
    \ i++) {\n        arr[i] = i * i - i + 1;\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1;\
    \ k < n; k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n\
    \                    sum++;\n                }\n            }\n        }\n   \
    \ }\n    return sum;\n}\n", "    let res = 0;\n    for (let i = 1; i < n - 1;\
    \ i++) {\n        for (let j = i + 1; j < n; j++) {\n            let ai = i *\
    \ i - i + 1;\n            let aj = j * j - j + 1;\n            let x = ai + aj\
    \ + (j + 1) * (j + 1) - (j + 1) + 1;\n            if (x % 3 === 0) res++;\n  \
    \      }\n    }\n    return res;\n}\n", "    let a: number[] = [];\n    for (let\
    \ i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count:\
    \ number = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j =\
    \ i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++)\
    \ {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n\nexport { get_max_triples }", "    var arr = [];\n    for (var i = 1; i <=\
    \ n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    return maxTriples(arr);\n\
    }\n", "  let a: number[] = [];\n  let count: number = 0;\n  for (let i = 1; i\
    \ <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length;\
    \ i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j +\
    \ 1; k < a.length; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n   \
    \       count++;\n        }\n      }\n    }\n  }\n  return count;\n}\nconsole.log(get_max_triples(5));\n",
  "    let result = 0;\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n  \
    \      arr.push(i * i - i + 1);\n    }\n    // console.log(arr);\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++)\
    \ {\n            for (let k = j + 1; k < arr.length; k++) {\n                if\
    \ ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    result += 1;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n\n\
    console.log(get_max_triples(5));\nconsole.log(get_max_triples(10));", "  let a:\
    \ number[] = [];\n  let counter: number = 0;\n  for (let i: number = 1; i <= n;\
    \ i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i: number = 0; i < a.length;\
    \ i++) {\n    for (let j: number = 0; j < a.length; j++) {\n      for (let k:\
    \ number = 0; k < a.length; k++) {\n        if (i < j && j < k && (a[i] + a[j]\
    \ + a[k]) % 3 === 0) {\n          counter++;\n        }\n      }\n    }\n  }\n\
    \  return counter;\n}\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(9));",
  "    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i -\
    \ i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        for (let j = i + 1; j < arr.length; j++) {\n            for (let\
    \ k = j + 1; k < arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k])\
    \ % 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "    let a: number[] = [];\n    for\
    \ (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let counter:\
    \ number = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j =\
    \ i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++)\
    \ {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                 \
    \   counter++;\n                }\n            }\n        }\n    }\n    return\
    \ counter;\n}\n", "    //the formula is (i^2 - i + 1) + (j^2 - j + 1) + (k^2 -\
    \ k + 1)\n    //                      i*i - i + 1    j*j - j + 1    k*k - k +\
    \ 1\n    //              (i*i) - i + 1   +  (j*j) - j + 1  +  (k*k) - k + 1\n\
    \    //(i*i) + (j*j) + (k*k) - i - j - k + 3 \n    //(i + j + k) * (i + j + k)\
    \ - i - j - k + 3\n    //(i + j + k)^2 - i - j - k + 3\n    // (i + j + k)^2 is\
    \ a multiple of 3 if\n    // (i + j + k)^2 is a multiple of 3\n    // if i + j\
    \ + k is a multiple of 3\n    // so we will just find all possible combinations\
    \ where i + j + k is a multiple of 3\n    let combinations = 0;\n    let i, j,\
    \ k;\n    for (i = 1; i < n - 1; i++) {\n        for (j = i + 1; j < n; j++) {\n\
    \            for (k = j + 1; k <= n; k++) {\n                if ((i + j + k) %\
    \ 3 === 0) combinations++;\n            }\n        }\n    }\n    return combinations;\n\
    }", "  let a: number[] = [];\n  let result: number = 0;\n  for (let i = 1; i <=\
    \ n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length;\
    \ i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j +\
    \ 1; k < a.length; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n   \
    \       result++;\n        }\n      }\n    }\n  }\n  return result;\n}", "  if(n\
    \ < 3) return 0;\n  let triples = 0;\n  for(let i = 1; i < n - 1; i++) {\n   \
    \ let x = i * i - i + 1;\n    for(let j = i + 1; j < n; j++) {\n      let y =\
    \ j * j - j + 1;\n      if((x + y) % 3 === 0) {\n        triples++;\n      }\n\
    \    }\n  }\n  return triples;\n}\n\nconsole.log(get_max_triples(5)); // 1\nconsole.log(get_max_triples(12));\
    \ // 6\nconsole.log(get_max_triples(100)); // 552", "    let result = 0;\n   \
    \ for (let i = 1; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n\
    \            for (let k = j + 1; k <= n; k++) {\n                if ((i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n",
  "    let res = 0;\n    for (let i = 1; i < n - 1; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n       \
    \         if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n \
    \                   res += 1;\n                }\n            }\n        }\n \
    \   }\n    return res;\n}\n", "    let result = 0;\n    let arr = Array.from({\
    \ length: n }, (v, i) => i + 1);\n    for (let i = 0; i < arr.length; i++) {\n\
    \        for (let j = i + 1; j < arr.length; j++) {\n            for (let k =\
    \ j + 1; k < arr.length; k++) {\n                if ((arr[i] + arr[j] + arr[k])\
    \ % 3 === 0) {\n                    result++;\n                }\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "    let a: number[] = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n \
    \   let count: number = 0;\n    for (let i = 0; i < a.length; i++) {\n       \
    \ for (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k\
    \ < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}", "    const arr = [];\n    let count = 0;\n    for\
    \ (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            for (let k = j + 1; k < arr.length; k++) {\n           \
    \     if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let triples: number = 0;\n    for (let i = 1; i < n; i++) {\n        for (let\
    \ j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n  \
    \              if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0)\
    \ {\n                    triples++;\n                }\n            }\n      \
    \  }\n    }\n    return triples;\n}\n", "    let arr = [];\n    for (let i = 1;\
    \ i <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    let count = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            for (let k = j + 1; k < arr.length; k++) {\n           \
    \     if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "  let array = [];\n  for (let i = 1; i <= n; i++) {\n    array.push(i * i - i +\
    \ 1);\n  }\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n   \
    \ for (let j = i + 1; j < array.length; j++) {\n      for (let k = j + 1; k <\
    \ array.length; k++) {\n        if ((array[i] + array[j] + array[k]) % 3 === 0)\
    \ {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n",
  "  // Write your code here\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n\
    \    const num = i * i - i + 1;\n    arr.push(num);\n  }\n  console.log(arr);\n\
    \  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j =\
    \ i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++)\
    \ {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n", "  let a: number[] = [];\n\
    \  let count: number = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i\
    \ - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i +\
    \ 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n  \
    \      if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n\
    \      }\n    }\n  }\n  return count;\n}\n", "    return 42;\n}\n\n", "    let\
    \ a: number[] = [];\n    let count: number = 0;\n    for (let i = 1; i <= n; i++)\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "  // Good Luck!\n  let maxTriples\
    \ = 0;\n  const arr = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n\
    \    arr.push(i * i - i + 1);\n  }\n  for (let i = 0; i < arr.length; i++) {\n\
    \    for (let j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k <\
    \ arr.length; k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n  \
    \        count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));",
  "    let a: number[] = [];\n    let triples: number = 0;\n    for (let i = 1; i\
    \ <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i <\
    \ a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n       \
    \     for (let k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 === 0) {\n                    triples += 1;\n                }\n\
    \            }\n        }\n    }\n    return triples;\n}\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(10));\n", "    let a: number[] = new Array(n);\n \
    \   for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let\
    \ count: number = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j =\
    \ i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n      \
    \          if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let cnt: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    cnt++;\n                }\n            }\n \
    \       }\n    }\n    return cnt;\n}\n", "    let a: number[] = [];\n    let count:\
    \ number = 0;\n    let t: number = 0;\n    let s: number = 0;\n    let tmp: number\
    \ = 0;\n    let memo: number = 0;\n    for (let i = 1; i <= n; i++) {\n      \
    \  a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n \
    \       for (let j = i + 1; j < a.length; j++) {\n            for (let k = j +\
    \ 1; k < a.length; k++) {\n                tmp = a[i] + a[j] + a[k];\n       \
    \         if (tmp % 3 === 0) {\n                    count++;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\n", "  const arr =\
    \ [];\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i\
    \ - i + 1);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i\
    \ + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length; k++)\
    \ {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          result++;\n\
    \        }\n      }\n    }\n  }\n  return result;\n}\n", "  let arr = [];\n  for\
    \ (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  let count =\
    \ 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length;\
    \ j++) {\n      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i]\
    \ + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n        }\n      }\n  \
    \  }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));", "    let result\
    \ = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j < n;\
    \ j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((i\
    \ + j + k) % 3 === 0) {\n                    result++;\n                }\n  \
    \          }\n        }\n    }\n    return result;\n}\nconsole.log(get_max_triples(5));",
  "    let triples = 0;\n    for (let i = 1; i < n - 1; i++) {\n        for (let j\
    \ = i + 1; j < n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n   \
    \             let a: number = i * i - i + 1;\n                let b: number =\
    \ j * j - j + 1;\n                let c: number = k * k - k + 1;\n           \
    \     if ((a + b + c) % 3 === 0) {\n                    triples++;\n         \
    \       }\n            }\n        }\n    }\n    return triples;\n}\n\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(10));\nconsole.log(get_max_triples(100));", "    let\
    \ count = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i + 1; j\
    \ < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n               \
    \ if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n         \
    \           count++;\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}", "    let result = 0;\n    let a = [];\n    for (let i = 1;\
    \ i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i\
    \ < a.length; i++) {\n        for (let j = i + 1; j < a.length; j++) {\n     \
    \       for (let k = j + 1; k < a.length; k++) {\n                if ((a[i] +\
    \ a[j] + a[k]) % 3 === 0) {\n                    result++;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nconsole.log(get_max_triples(5));\n",
  "    let counter = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n        \
    \        if ((j * j - j + 1 + k * k - k + 1 + i * i - i + 1) % 3 === 0) {\n  \
    \                  counter++;\n                }\n            }\n        }\n \
    \   }\n    return counter;\n}\nconsole.log(get_max_triples(5));\n", "    let a:\
    \ number[] = [];\n    let triples: number[] = [];\n    for (let i = 1; i <= n;\
    \ i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    triples.push([a[i], a[j], a[k]]);\n        \
    \        }\n            }\n        }\n    }\n    return triples.length;\n}", " \
    \ var array: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    array.push(i\
    \ * i - i + 1);\n  }\n  var count: number = 0;\n  for (let i = 0; i < array.length;\
    \ i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      for (let k =\
    \ j + 1; k < array.length; k++) {\n        if ((array[i] + array[j] + array[k])\
    \ % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n", "    return 0;\n}\n", "    let m = 0;\n    let a = new Array<number>(n);\n\
    \    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n \
    \           for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    m++;\n                }\n         \
    \   }\n        }\n    }\n    return m;\n}", "    let count = 0;\n    let arr =\
    \ [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1);\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1;\
    \ j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length; k++)\
    \ {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(get_max_triples(5));\n", "  let newArr = [], a = 0;\n\
    \  while (a < n) {\n    newArr.push(a * a - a + 1);\n    a++;\n  }\n  let counter\
    \ = 0;\n  for (let i = 0; i < newArr.length; i++) {\n    for (let j = i + 1; j\
    \ < newArr.length; j++) {\n      for (let k = j + 1; k < newArr.length; k++) {\n\
    \        if ((newArr[i] + newArr[j] + newArr[k]) % 3 === 0) counter++;\n     \
    \ }\n    }\n  }\n  return counter;\n}\nconsole.log(get_max_triples(5));\n", " \
    \   let a: Array<number> = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let sumOf3: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    sumOf3++;\n                }\n            }\n\
    \        }\n    }\n    return sumOf3;\n}\n", "  let a: number[] = [];\n  let count:\
    \ number = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n\
    \  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length;\
    \ j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] +\
    \ a[j] + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n \
    \ }\n  return count;\n}\nconsole.log(get_max_triples(4));\n", "    let a: number[]\
    \ = []\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1)\n  \
    \  }\n    console.log('a', a)\n    let count = 0\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\nconsole.log(get_max_triples(5))", "  if\
    \ (n < 3) return 0;\n  let count = 0;\n  for (let i = 1; i < n - 1; i++) {\n \
    \   for (let j = i + 1; j < n; j++) {\n      let k = n - i - j;\n      if (k <\
    \ j) break;\n      if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ===\
    \ 0) count++;\n    }\n  }\n  return count;\n}", "    let count = 0;\n    let a\
    \ = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n\
    \    }\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let result = 0;\n    for (let i = 1; i < n; i++) {\n        for (let j = i\
    \ + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n        \
    \        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n  \
    \                  result++;\n                }\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "  let count = 0;\n  for (let i = 1; i < n; i++)\
    \ {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++)\
    \ {\n        if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n\
    \          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nexport\
    \ function runTests(): void {\n  const inputs = [\n    5,\n    4,\n    3,\n  \
    \  2,\n    1,\n    0,\n    6,\n    7,\n    8,\n    9,\n    10,\n    10\n  ];\n\
    \  const expected = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n\
    \    2,\n    3,\n    3,\n    4,\n    4\n  ];\n\n  inputs.forEach((input, index)\
    \ => {\n    const output = get_max_triples(input);\n    if (output !== expected[index])\
    \ {\n      throw new Error(`Expected ${expected[index]} but got ${output} for\
    \ input ${input}`);\n    }\n  });\n}", "    const result: number[] = [];\n   \
    \ for (let i = 1; i <= n; i++) {\n        result.push(i * i - i + 1);\n    }\n\
    \    const numberOfTriples: number = 0;\n    for (let i = 0; i < result.length;\
    \ i++) {\n        for (let j = i + 1; j < result.length; j++) {\n            for\
    \ (let k = j + 1; k < result.length; k++) {\n                if ((result[i] +\
    \ result[j] + result[k]) % 3 === 0) {\n                    numberOfTriples++;\n\
    \                }\n            }\n        }\n    }\n    return numberOfTriples;\n\
    }", "    let i: number, j: number, k: number;\n    let sum = 0;\n    let array\
    \ = [];\n    for (i = 1; i <= n; i++) {\n        array.push(i * i - i + 1);\n\
    \    }\n    for (i = 0; i < array.length; i++) {\n        for (j = i + 1; j <\
    \ array.length; j++) {\n            for (k = j + 1; k < array.length; k++) {\n\
    \                if ((array[i] + array[j] + array[k]) % 3 === 0) {\n         \
    \           sum += 1;\n                }\n            }\n        }\n    }\n  \
    \  return sum;\n}\nconsole.log(get_max_triples(5));", "    let array: Array<number>\
    \ = [], valid_triples: number = 0;\n    for (let i = 1; i <= n; i++) {\n     \
    \   array.push(i * i - i + 1);\n    }\n    for (let i = 0; i < array.length; i++)\
    \ {\n        for (let j = i + 1; j < array.length; j++) {\n            for (let\
    \ k = j + 1; k < array.length; k++) {\n                if ((array[i] + array[j]\
    \ + array[k]) % 3 === 0) {\n                    valid_triples++;\n           \
    \     }\n            }\n        }\n    }\n    return valid_triples;\n}\n\nconsole.log(get_max_triples(5));\n\
    console.log(get_max_triples(4));\nconsole.log(get_max_triples(6));", "  let result\
    \ = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n\
    \      for (let k = j + 1; k < n; k++) {\n        if ((i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 === 0) {\n          result++;\n        }\n      }\n\
    \    }\n  }\n  return result;\n}\n", "    let arr = [];\n    for (let i = 1; i\
    \ <= n; i++) {\n        arr.push(i * i - i + 1);\n    }\n    let count = 0;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length;\
    \ j++) {\n            for (let k = j + 1; k < arr.length; k++) {\n           \
    \     if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n\n\
    console.log(get_max_triples(5));", "    let a: number[] = [];\n    for (let i\
    \ = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let res: number\
    \ = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    res++;\n\
    \                }\n            }\n        }\n    }\n    return res;\n}\n", " \
    \ let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n\
    \  }\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let\
    \ j = i + 1; j < arr.length; j++) {\n      for (let k = j + 1; k < arr.length;\
    \ k++) {\n        if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\n", "    let a: number[] =\
    \ [], triples = 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i -\
    \ i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n        for (let j\
    \ = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) triples++;\n   \
    \         }\n        }\n    }\n    return triples;\n}", "    var a: number[] =\
    \ [];\n    var count: number = 0;\n    for (var i = 1; i <= n; i++) {\n      \
    \  a.push(i * i - i + 1);\n    }\n    for (var i = 0; i < a.length; i++) {\n \
    \       for (var j = i + 1; j < a.length; j++) {\n            for (var k = j +\
    \ 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}", "    let a: number[] = [];\n    for (let i = 1;\
    \ i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count: number\
    \ = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n\n\
    console.log(get_max_triples(5));", "  let counter = 0;\n  let arr = [];\n  for\
    \ (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1);\n  }\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n\
    \      for (let k = j + 1; k < arr.length; k++) {\n        if ((arr[i] + arr[j]\
    \ + arr[k]) % 3 === 0) {\n          counter++;\n        }\n      }\n    }\n  }\n\
    \  return counter;\n}\n", "    // TODO: return the number of valid triples. \n\
    \    // You should not hardcode the result.\n    return 0;\n}\n", "  let a: number[]\
    \ = [];\n  let triple: number = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i\
    \ * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    for (let j =\
    \ i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n\
    \        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          triple++;\n        }\n\
    \      }\n    }\n  }\n  return triple;\n}\nconsole.log(get_max_triples(5));\n",
  "    let a: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    let count: number = 0;\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}", "    let a: number[] = [];\n    let\
    \ count: number = 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i\
    \ - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n        for (let\
    \ j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(get_max_triples(5));\n", "    let a: number[] = [];\n\
    \    let count: number = 0;\n    for (let i = 1; i <= n; i++) {\n        a.push(i\
    \ * i - i + 1);\n    }\n    for (let i = 0; i < a.length; i++) {\n        for\
    \ (let j = i + 1; j < a.length; j++) {\n            for (let k = j + 1; k < a.length;\
    \ k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(get_max_triples(5));", "  const a = [];\n  for (let i\
    \ = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let count = 0;\n  for\
    \ (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++)\
    \ {\n      for (let k = j + 1; k < a.length; k++) {\n        if ((a[i] + a[j]\
    \ + a[k]) % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n \
    \ return count;\n}\n\nconsole.log(get_max_triples(7));", "    let a: number[]\
    \ = [];\n    let counter: number = 0;\n    for (let i: number = 1; i <= n; i++)\
    \ {\n        a.push(i * i - i + 1);\n    }\n    for (let i: number = 0; i < a.length;\
    \ i++) {\n        for (let j: number = i + 1; j < a.length; j++) {\n         \
    \   for (let k: number = j + 1; k < a.length; k++) {\n                if ((a[i]\
    \ + a[j] + a[k]) % 3 === 0) {\n                    counter++;\n              \
    \  }\n            }\n        }\n    }\n    return counter;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 1; i < n - 1; i++) {\n        for (let j = i + 1; j <\
    \ n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if\
    \ ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 === 0) {\n            \
    \        sum++;\n                }\n            }\n        }\n    }\n    return\
    \ sum;\n}\n", "    let arr = new Array(n).fill(0).map((x, i) => i * i - i + 1);\n\
    \    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let\
    \ j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length;\
    \ k++) {\n                if ((arr[i] + arr[j] + arr[k]) % 3 === 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\n\nconsole.log(get_max_triples(5));\nconsole.log(get_max_triples(11));",
  "    let arr = new Array(n);\n    let count = 0;\n    for (let i = 0; i < n; i++)\
    \ {\n        arr[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n    for (let i\
    \ = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n    \
    \        for (let k = j + 1; k < n; k++) {\n                if ((arr[i] + arr[j]\
    \ + arr[k]) % 3 === 0) {\n                    count++;\n                }\n  \
    \          }\n        }\n    }\n    return count;\n}", "    // Number of triples\n\
    \    let count = 0;\n    // The array with the given length\n    let a: number[]\
    \ = new Array(n);\n    // Populate the array\n    for (let i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    // Check every combination\n  \
    \  for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n\
    \            for (let k = j + 1; k < n; k++) {\n                // If the sum\
    \ is a multiple of 3\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}", "    let a: number[] = [];\n    for (let i = 1;\
    \ i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count: number\
    \ = 0;\n    for (let i = 0; i < a.length; i++) {\n        for (let j = i + 1;\
    \ j < a.length; j++) {\n            for (let k = j + 1; k < a.length; k++) {\n\
    \                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let a: number[] = [];\n    let res: number = 0;\n    for (let i = 1; i <= n;\
    \ i++) {\n        a.push(i * i - i + 1);\n    }\n    for (let i = 0; i < a.length;\
    \ i++) {\n        for (let j = i + 1; j < a.length; j++) {\n            for (let\
    \ k = j + 1; k < a.length; k++) {\n                if ((a[i] + a[j] + a[k]) %\
    \ 3 === 0) {\n                    res++;\n                }\n            }\n \
    \       }\n    }\n    return res;\n}\n\nconsole.log(get_max_triples(5));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
