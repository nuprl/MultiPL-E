name: HumanEval_71_triangle_area
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return the area of\n\
  // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
  \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a:\
  \ number, b: number, c: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4,\
  \ 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4,\
  \ 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2,\
  \ 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),-1);\n}\n\ntest();"
completions: ["  const s = (a + b + c) / 2;\n  return (s * (s - a) * (s - b) * (s\
    \ - c)) ** 0.5;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  // TypeScript arrays\n  const sides: number[] = [a, b, c];\n\
    \  sides.sort((a, b) => a - b);\n\n  if (sides[0] + sides[1] > sides[2]) {\n \
    \   const p = (a + b + c) / 2;\n    return Math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n  } else {\n    return -1;\n  }\n}\n\nconsole.log(triangle_area(3, 4,\
    \ 5));\nconsole.log(triangle_area(1, 2, 10));\n", "  let sorted = [a, b, c].sort((x,\
    \ y) => x - y);\n  let [c1, c2, c3] = sorted;\n  if (c3 >= c1 + c2) {\n    return\
    \ -1;\n  }\n  let s = (c1 + c2 + c3) / 2;\n  return Math.sqrt(s * (s - c1) * (s\
    \ - c2) * (s - c3));\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));", "    return 0;\n}\n", "    if (a + b <= c || a + c <= b || b + c\
    \ <= a) {\n        return -1;\n    }\n    const halfPerimeter = (a + b + c) /\
    \ 2;\n    return Math.sqrt(halfPerimeter * (halfPerimeter - a) * (halfPerimeter\
    \ - b) * (halfPerimeter - c));\n}\n", "    let p = (a + b + c) / 2;\n    let result\
    \ = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    return result > 0 ? +result.toFixed(2)\
    \ : -1;\n}\n", "    // we need to calculate half of the perimeter\n    let p =\
    \ (a + b + c) / 2;\n    // then apply the formula\n    let area = Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    // if the triangle is valid\n    if (area\
    \ > 0) {\n        // return the rounded answer\n        return Number(area.toFixed(2));\n\
    \    }\n    // otherwise return -1\n    return -1;\n}\n", "    // write your code\
    \ here\n    return 0;\n}\n", "  let res = -1;\n  if (a + b > c && a + c > b &&\
    \ b + c > a) {\n    res = Math.round(100 * Math.sqrt((a + b + c) * (a + b - c)\
    \ * (a + c - b) * (b + c - a)) / 4) / 100;\n  }\n  return res;\n}\n\n", "  let\
    \ p = (a + b + c) / 2;\n  let result = Math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n  if (result == 0) {\n    return -1;\n  } else {\n    return +result.toFixed(2);\n\
    \  }\n}\n", "    let area = -1;\n    let s = (a + b + c) / 2;\n    if (s > a &&\
    \ s > b && s > c) {\n        area = Number(Math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c)).toFixed(2));\n    }\n    return area;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5)); //6.0\nconsole.log(triangle_area(1, 2, 10)); //-1", "  let p = (a +\
    \ b + c) / 2;\n  let S = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n  return\
    \ S < 0 ? -1 : S;\n}\n", "    let sum: number = a + b + c;\n    if (sum - Math.max(a,\
    \ b, c) > Math.max(a, b, c)) {\n        let s: number = (a + b + c) / 2;\n   \
    \     return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n\
    }\n", "    let p = (a + b + c) / 2;\n    if (p > a && p > b && p > c) {\n    \
    \    return Number((Math.sqrt(p * (p - a) * (p - b) * (p - c))).toFixed(2));\n\
    \    }\n    return -1;\n}\n\nexport {\n    is_vowel,\n    add_length,\n    is_prime,\n\
    \    to_camel_case,\n    triangle_area\n}", "  if(a+b > c && a+c > b && b+c >\
    \ a){\n    return Math.round(Math.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4 * 100)/100;\n\
    \  }\n  return -1;\n}\n", "  if (a + b > c && a + c > b && b + c > a) {\n    return\
    \ +(a * b / 2).toFixed(2);\n  } else {\n    return -1;\n  }\n}\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "  let [side1, side2, side3]\
    \ = [a, b, c];\n  let result = Math.round(\n    0.5 * Math.abs(side1 * (side2\
    \ - side3) + side2 * (side3 - side1) + side3 * (side1 - side2)) * 100\n  ) / 100;\n\
    \  return side1 + side2 > side3 && side1 + side3 > side2 && side2 + side3 > side1\
    \ ? result : -1;\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    // write your solution here\n    if (a + b > c && a + c >\
    \ b && b + c > a) {\n        return Math.round(100 * Math.sqrt((a + b + c) * (a\
    \ + b - c) * (a + c - b) * (b + c - a)) / 4) / 100;\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\n\nexport { triangle_area\
    \ };", "    if (a + b > c && a + c > b && b + c > a) {\n        const p = (a +\
    \ b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n  \
    \  }\n    return -1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
