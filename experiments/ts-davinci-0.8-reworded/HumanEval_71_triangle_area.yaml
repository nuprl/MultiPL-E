name: HumanEval_71_triangle_area
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return the area of\n\
  // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
  \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a:\
  \ number, b: number, c: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4,\
  \ 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4,\
  \ 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2,\
  \ 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),-1);\n}\n\ntest();"
completions: ["  const s = (a + b + c) / 2;\n  return (s * (s - a) * (s - b) * (s\
    \ - c)) ** 0.5;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  // TypeScript arrays\n  const sides: number[] = [a, b, c];\n\
    \  sides.sort((a, b) => a - b);\n\n  if (sides[0] + sides[1] > sides[2]) {\n \
    \   const p = (a + b + c) / 2;\n    return Math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n  } else {\n    return -1;\n  }\n}\n\nconsole.log(triangle_area(3, 4,\
    \ 5));\nconsole.log(triangle_area(1, 2, 10));\n", "  let sorted = [a, b, c].sort((x,\
    \ y) => x - y);\n  let [c1, c2, c3] = sorted;\n  if (c3 >= c1 + c2) {\n    return\
    \ -1;\n  }\n  let s = (c1 + c2 + c3) / 2;\n  return Math.sqrt(s * (s - c1) * (s\
    \ - c2) * (s - c3));\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));", "    return 0;\n}\n", "    if (a + b <= c || a + c <= b || b + c\
    \ <= a) {\n        return -1;\n    }\n    const halfPerimeter = (a + b + c) /\
    \ 2;\n    return Math.sqrt(halfPerimeter * (halfPerimeter - a) * (halfPerimeter\
    \ - b) * (halfPerimeter - c));\n}\n", "    let p = (a + b + c) / 2;\n    let result\
    \ = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    return result > 0 ? +result.toFixed(2)\
    \ : -1;\n}\n", "    // we need to calculate half of the perimeter\n    let p =\
    \ (a + b + c) / 2;\n    // then apply the formula\n    let area = Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    // if the triangle is valid\n    if (area\
    \ > 0) {\n        // return the rounded answer\n        return Number(area.toFixed(2));\n\
    \    }\n    // otherwise return -1\n    return -1;\n}\n", "    // write your code\
    \ here\n    return 0;\n}\n", "  let res = -1;\n  if (a + b > c && a + c > b &&\
    \ b + c > a) {\n    res = Math.round(100 * Math.sqrt((a + b + c) * (a + b - c)\
    \ * (a + c - b) * (b + c - a)) / 4) / 100;\n  }\n  return res;\n}\n\n", "  let\
    \ p = (a + b + c) / 2;\n  let result = Math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c));\n  if (result == 0) {\n    return -1;\n  } else {\n    return +result.toFixed(2);\n\
    \  }\n}\n", "    let area = -1;\n    let s = (a + b + c) / 2;\n    if (s > a &&\
    \ s > b && s > c) {\n        area = Number(Math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c)).toFixed(2));\n    }\n    return area;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5)); //6.0\nconsole.log(triangle_area(1, 2, 10)); //-1", "  let p = (a +\
    \ b + c) / 2;\n  let S = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n  return\
    \ S < 0 ? -1 : S;\n}\n", "    let sum: number = a + b + c;\n    if (sum - Math.max(a,\
    \ b, c) > Math.max(a, b, c)) {\n        let s: number = (a + b + c) / 2;\n   \
    \     return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n\
    }\n", "    let p = (a + b + c) / 2;\n    if (p > a && p > b && p > c) {\n    \
    \    return Number((Math.sqrt(p * (p - a) * (p - b) * (p - c))).toFixed(2));\n\
    \    }\n    return -1;\n}\n\nexport {\n    is_vowel,\n    add_length,\n    is_prime,\n\
    \    to_camel_case,\n    triangle_area\n}", "  if(a+b > c && a+c > b && b+c >\
    \ a){\n    return Math.round(Math.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4 * 100)/100;\n\
    \  }\n  return -1;\n}\n", "  if (a + b > c && a + c > b && b + c > a) {\n    return\
    \ +(a * b / 2).toFixed(2);\n  } else {\n    return -1;\n  }\n}\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "  let [side1, side2, side3]\
    \ = [a, b, c];\n  let result = Math.round(\n    0.5 * Math.abs(side1 * (side2\
    \ - side3) + side2 * (side3 - side1) + side3 * (side1 - side2)) * 100\n  ) / 100;\n\
    \  return side1 + side2 > side3 && side1 + side3 > side2 && side2 + side3 > side1\
    \ ? result : -1;\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    // write your solution here\n    if (a + b > c && a + c >\
    \ b && b + c > a) {\n        return Math.round(100 * Math.sqrt((a + b + c) * (a\
    \ + b - c) * (a + c - b) * (b + c - a)) / 4) / 100;\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\n\nexport { triangle_area\
    \ };", "    if (a + b > c && a + c > b && b + c > a) {\n        const p = (a +\
    \ b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n  \
    \  }\n    return -1;\n}\n", "    let area: number;\n    if (a > b + c || b > a\
    \ + c || c > a + b) {\n        area = -1;\n    } else {\n        let s = (a +\
    \ b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  \
    \  }\n    return area;\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n\
    \        let s = (a + b + c) / 2;\n        return Number((Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))).toFixed(2));\n    }\n    return -1;\n}\n", "    if ((a\
    \ + b) > c && (a + c) > b && (b + c) > a) {\n        return +(0.5 * (a * b + b\
    \ * c + a * c)).toFixed(2);\n    } else {\n        return -1;\n    }\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));", "  if ((a + b) > c && (a +\
    \ c) > b && (b + c) > a) {\n    return Math.round(100 * Math.sqrt((a + b + c)\
    \ * (a + b - c) * (a + c - b) * (b + c - a)) / 4) / 100;\n  } else {\n    return\
    \ -1;\n  }\n}\n", "    if(a + b <= c) return -1;\n    if(a + c <= b) return -1;\n\
    \    if(b + c <= a) return -1;\n    return Number(((a + b + c) / 2).toFixed(2));\n\
    }\n", "  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n\
    \  const s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n}\n", "  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s -\
    \ a) * (s - b) * (s - c));\n  if (isNaN(area)) {\n    return -1;\n  }\n  return\
    \ Math.round(area * 100) / 100;\n}\n", "    let p = (a + b + c) / 2;\n    let\
    \ area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    if (a + b > c && a +\
    \ c > b && b + c > a) {\n        return area;\n    } else {\n        return -1;\n\
    \    }\n}\n", "    let p = (a + b + c) / 2;\n    if (p > a && p > b && p > c)\
    \ {\n        return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return\
    \ -1;\n}\n", "    let area = 0;\n    let s = (a + b + c) / 2;\n    if (s > a &&\
    \ s > b && s > c) {\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    } else {\n        area = -1;\n    }\n    return area.toFixed(2);\n}\n", " \
    \   let sum = a + b + c;\n    if (sum - Math.max(a, b, c) > Math.max(a, b, c))\
    \ {\n        let s = sum / 2;\n        return Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    }\n    return -1;\n}\nconsole.log(triangle_area(3, 4, 5));\n\
    console.log(triangle_area(1, 2, 10));\n", "  const [longest, shortest1, shortest2]\
    \ = [a, b, c].sort((a, b) => b - a);\n  if (longest < shortest1 + shortest2) {\n\
    \    return Number((Math.sqrt(longest * (longest - shortest1) * (longest - shortest2)\
    \ * (shortest1 - shortest2)) / 4).toFixed(2));\n  }\n  return -1;\n}\n", "  let\
    \ maxSide = Math.max(a, b, c);\n  let area = (a + b + c - maxSide) * maxSide /\
    \ 2;\n  return area > 0 ? Number(area.toFixed(2)) : -1;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\nconsole.log(triangle_area(2,\
    \ 2, 2));", "    //valid triangle\n    if (a + b > c && a + c > b && b + c > a)\
    \ {\n        return (a + b + c) / 2;\n    }\n    else return -1;\n}\n\nconsole.log(triangle_area(1,\
    \ 2, 10));\n\n", "    if (a + b > c && a + c > b && b + c > a) {\n        let\
    \ sp = (a + b + c) / 2;\n        let a = Math.sqrt(sp * (sp - a) * (sp - b) *\
    \ (sp - c));\n        return +a.toFixed(2);\n    }\n    return -1;\n}\n", "  \
    \  const p = (a + b + c) / 2;\n    return (Math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c))).toFixed(2);\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    const [x, y, z] = [a, b, c].sort();\n    return x + y > z\
    \ ? Math.round(Math.sqrt(z * (z - x) * (z - y) * (z - y)) * 100) / 100 : -1;\n\
    }\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n",
  "  //find largest side\n  let largest = Math.max(a, b, c);\n  let remaining = a\
    \ + b + c - largest;\n  if (remaining <= largest) {\n    return -1;\n  }\n  let\
    \ s = (a + b + c) / 2;\n  return Number((Math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c))).toFixed(2));\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n  if (s - a < 0 || s - b < 0 || s - c < 0) {\n    return\
    \ -1;\n  } else {\n    return +area.toFixed(2);\n  }\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "  //code...\n  let area:\
    \ number = (a + b + c) / 2;\n  if (area > a && area > b && area > c) {\n    return\
    \ Math.round(Math.sqrt(area * (area - a) * (area - b) * (area - c)) * 100) / 100;\n\
    \  } else {\n    return -1;\n  }\n}\n", "  return 0;\n}\n", "  let condition =\
    \ (a + b > c) && (a + c > b) && (b + c > a);\n  return condition ? (a + b + c)\
    \ / 2 : -1;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));", "    return 0;\n}", "  const s = (a + b + c) / 2;\n  const area =\
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  if (Number.isNaN(area)) {\n \
    \   return -1;\n  }\n  return area;\n}\n", "    if (a + b > c && a + c > b &&\
    \ b + c > a) {\n        return Math.round(1 / 2 * (a * b + b * c + a * c) * 100)\
    \ / 100;\n    } else {\n        return -1;\n    }\n}\n", "  return -1;\n}\n\n\
    export { triangle_area };", "    let s = (a + b + c) / 2\n    let A = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    if (A > 0) {\n        return A\n    } else\
    \ {\n        return -1\n    }\n}\n", "    if(a + b > c && a + c > b && b + c >\
    \ a){\n        return Math.round(.5 * a * b * 100) / 100;\n    } else {\n    \
    \    return -1;\n    }\n}\n", "  return -1;\n}\n", "    if (a + b > c && a + c\
    \ > b && b + c > a) {\n        let area = ((a + b + c) / 2) * (((a + b + c) /\
    \ 2) - a) * (((a + b + c) / 2) - b) * (((a + b + c) / 2) - c);\n        let height\
    \ = Math.sqrt(area);\n        let finalArea = (height * (a * b * c)) / (4 * area);\n\
    \        return finalArea.toFixed(2);\n    } else {\n        return -1;\n    }\n\
    }\n", "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n  return area < 0 ? -1 : area;\n}\n", "  let s = 0.5 * (a + b +\
    \ c);\n  let d = (s - a) * (s - b) * (s - c);\n  let area = Math.sqrt(s * d);\n\
    \  if (d < 0) {\n    return -1;\n  } else {\n    return Number(area.toFixed(2));\n\
    \  }\n}\n", "  if (a + b > c && a + c > b && b + c > a) {\n    const p = (a +\
    \ b + c) / 2;\n    return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n  }\n \
    \ return -1;\n}\n\nimport { expect } from \"chai\";\nimport \"mocha\";\n\ndescribe(\"\
    triangle_area\", () => {\n  it(\"should return -1 when invalid triangle\", ()\
    \ => {\n    expect(triangle_area(1, 2, 10)).to.equal(-1);\n  });\n  it(\"should\
    \ return 6 when valid triangle\", () => {\n    expect(triangle_area(3, 4, 5)).to.equal(6);\n\
    \  });\n});", "  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  let\
    \ s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \  if (isNaN(area)) {\n    return -1;\n  }\n  return Number(area.toFixed(2));\n\
    }\n", "  if (a + b > c && a + c > b && b + c > a) {\n    const s = (a + b + c)\
    \ / 2;\n    return +Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n \
    \ } else {\n    return -1;\n  }\n}\n", "  if (a < b + c && b < a + c && c < a\
    \ + b) {\n    return parseFloat(((a + b + c) / 2).toFixed(2));\n  } else {\n \
    \   return -1;\n  }\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    if (a + b <= c || a + c <= b || b + c <= a) {\n        return\
    \ -1;\n    } else {\n        const s = (a + b + c) / 2;\n        return Math.round(Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)) * 100) / 100;\n    }\n}\n\ndescribe(\"triangle_area\"\
    , function () {\n    it(\"triangle_area(3, 4, 5)\", function () {\n        assert.strictEqual(triangle_area(3,\
    \ 4, 5), 6);\n    });\n    it(\"triangle_area(1, 2, 10)\", function () {\n   \
    \     assert.strictEqual(triangle_area(1, 2, 10), -1);\n    });\n    it(\"triangle_area(6,\
    \ 6, 6)\", function () {\n        assert.strictEqual(triangle_area(6, 6, 6), 15.59);\n\
    \    });\n    it(\"triangle_area(3, 4, 6)\", function () {\n        assert.strictEqual(triangle_area(3,\
    \ 4, 6), 5.33);\n    });\n    it(\"triangle_area(2, 3, 2)\", function () {\n \
    \       assert.strictEqual(triangle_area(2, 3, 2), 1.98);\n    });\n    it(\"\
    triangle_area(5, 7, 3)\", function () {\n        assert.strictEqual(triangle_area(5,\
    \ 7, 3), -1);\n    });\n    it(\"triangle_area(2, 3, 4)\", function () {\n   \
    \     assert.strictEqual(triangle_area(2, 3, 4), 2.90);\n    });\n    it(\"triangle_area(5,\
    \ 4, 3)\", function () {\n        assert.strictEqual(triangle_area(5, 4, 3), 6);\n\
    \    });\n    it(\"triangle_area(10, 12, 8)\", function () {\n        assert.strictEqual(triangle_area(10,\
    \ 12, 8), 41.62);\n    });\n    it(\"triangle_area(", "    let area: number =\
    \ 0;\n    // add if statement\n    if (a + b > c && a + c > b && b + c > a) {\n\
    \        let s: number = (a + b + c) / 2;\n        area = Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n    } else {\n        area = -1;\n    }\n    return area;\n\
    }\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n",
  "  let p = (a + b + c) / 2;\n  let result = Math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c));\n  return (isNaN(result) || result < 0) ? -1 : result;\n}\n", "    if\
    \ ((a + b > c) && (a + c > b) && (b + c > a)) {\n        return +(0.5 * (a * b\
    \ + b * c + a * c)).toFixed(2);\n    } else {\n        return -1;\n    }\n}\n",
  "    return a + b > c && a + c > b && b + c > a ?\n        Math.round(Math.sqrt((a\
    \ + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) * 100) / 100 : -1;\n}\n",
  "    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n\
    \        return Number((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));\n\
    \    }\n    return -1;\n}\n", "  let area: number = -1;\n  if (a + b > c && a\
    \ + c > b && b + c > a) {\n    const s: number = (a + b + c) / 2;\n    area =\
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  }\n  return Math.round(area *\
    \ 100) / 100;\n}\n\nconsole.log(triangle_area(4, 3, 5));\n", "  if (a + b > c\
    \ && a + c > b && b + c > a) {\n    return +(0.5 * (a * b + b * c + a * c)).toFixed(2);\n\
    \  }\n  return -1;\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n  \
    \      const p = (a + b + c) / 2;\n        return Math.sqrt(p * (p - a) * (p -\
    \ b) * (p - c));\n    }\n    return -1;\n}\n\nconsole.log(triangle_area(3, 4,\
    \ 5));\nconsole.log(triangle_area(1, 2, 10));", "    //return -1;\n    //return\
    \ 6.0;\n    let s: number = (a + b + c) / 2;\n    let area: number = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return area;\n}\n", "  if (a <= 0 || b\
    \ <= 0 || c <= 0) {\n    return -1;\n  }\n  let perimeter = (a + b + c) / 2;\n\
    \  let area = Math.sqrt(\n    perimeter * (perimeter - a) * (perimeter - b) *\
    \ (perimeter - c)\n  );\n  return Number(area.toFixed(2));\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\nconsole.log(triangle_area(1,\
    \ -2, 3));\n", "  // Complete this function\n  let p = (a + b + c) / 2;\n  if\
    \ (p - a <= 0 || p - b <= 0 || p - c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n}\n\nexport function main(): void {\n  let\
    \ input: string = readline();\n  let tokens: string[] = input.split(\" \");\n\
    \  let a: number = parseInt(tokens[0]);\n  let b: number = parseInt(tokens[1]);\n\
    \  let c: number = parseInt(tokens[2]);\n  console.log(triangle_area(a, b, c));\n\
    }", "  if (a + b > c && a + c > b && b + c > a) {\n    let s = (a + b + c) / 2;\n\
    \    return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n\
    \  } else {\n    return -1;\n  }\n}\n", "    let s = (a + b + c) / 2\n    let\
    \ area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return isNaN(area) ?\
    \ -1 : area\n}\n", "  let p = (a + b + c) / 2;\n  let s = Math.sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n  if (s > 0) {\n    return Math.round(s * 100) / 100;\n\
    \  } else {\n    return -1;\n  }\n}\n", "  if ((a + b > c) && (a + c > b) && (b\
    \ + c > a)) {\n    let s = (a + b + c) / 2;\n    return Math.round(Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)) * 100) / 100;\n  } else {\n    return -1;\n \
    \ }\n}", "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n  return area < 0 ? -1 : area;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));", "    let s = (a + b + c) /\
    \ 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return (area)\
    \ ? area : -1;\n}\n", "  let p = (a + b + c) / 2;\n  let s = Math.sqrt(p * (p\
    \ - a) * (p - b) * (p - c));\n  return s && +s.toFixed(2);\n}\n", "    if (is_valid_triangle(a,\
    \ b, c)) {\n        return Math.sqrt(get_semiperimeter(a, b, c) * (get_semiperimeter(a,\
    \ b, c) - a) * (get_semiperimeter(a, b, c) - b) * (get_semiperimeter(a, b, c)\
    \ - c));\n    } else {\n        return -1;\n    }\n}\n", "    //fill in code here.\n\
    \    let perimeter = (a + b + c) / 2;\n    let area = Math.sqrt(perimeter * (perimeter\
    \ - a) * (perimeter - b) * (perimeter - c));\n    if (area === 0) {\n        return\
    \ -1;\n    }\n    else {\n        return area;\n    }\n}\n", "    let result =\
    \ -1\n    if (a + b > c && a + c > b && b + c > a) {\n        let p = (a + b +\
    \ c) / 2\n        result = Math.sqrt(p * (p - a) * (p - b) * (p - c))\n    }\n\
    \    return Math.round(result * 100) / 100\n}\n", "    if (a + b > c && a + c\
    \ > b && b + c > a) {\n        const s = (a + b + c) / 2;\n        return Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\n    return -1;\n}\n\n", " \
    \   let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    return area > 0 ? Math.round(area * 100) / 100 : -1;\n}\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  // Write your code here...\n  let t: number = triangle(a, b,\
    \ c);\n  return t;\n}\n", "    // your code here\n    if (a + b > c && a + c >\
    \ b && b + c > a) {\n        return (a + b + c) / 2;\n    } else {\n        return\
    \ -1;\n    }\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));", "    let s = (a + b + c) / 2\n    let a2 = Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    return (a2 == a2) ? Number(a2.toFixed(2)) : -1\n}\n\
    \nconsole.log(triangle_area(3, 4, 5))\nconsole.log(triangle_area(1, 2, 10))",
  "  if (a + b > c && a + c > b && b + c > a) {\n    return Number((0.5 * a * b).toFixed(2));\n\
    \  }\n  return -1;\n}\n", "    // your code here\n    let x: number = (a + b +\
    \ c) / 2;\n    if (x < a || x < b || x < c) {\n        return -1;\n    }\n   \
    \ return Math.round(Math.sqrt(x * (x - a) * (x - b) * (x - c)) * 100) / 100;\n\
    }\n", "  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n\
    \  const s = (a + b + c) / 2;\n  return Number((Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))).toFixed(2));\n}\n", "  let area = -1;\n  const sorted = [a, b, c].sort((x,\
    \ y) => y - x);\n  if (sorted[0] < sorted[1] + sorted[2]) {\n    area = (a + b\
    \ + c) / 2;\n  }\n  return Number(area.toFixed(2));\n}\n\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n    return Number.isNaN(area) ? -1 : area;\n\
    }\n\nexport default triangle_area;", "  if (a < b + c && b < a + c && c < a +\
    \ b) {\n    let semiP = (a + b + c) / 2;\n    let area = Math.sqrt(semiP * (semiP\
    \ - a) * (semiP - b) * (semiP - c));\n    return Number(area.toFixed(2));\n  }\
    \ else {\n    return -1;\n  }\n}\n", "    let area: number = -1;\n    if (a+b\
    \ > c && a+c > b && b+c > a) {\n        let s: number = (a+b+c)/2;\n        area\
    \ = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    return area;\n}\n", "  let longest\
    \ = Math.max(a, b, c);\n  if (longest > a + b + c - longest) {\n    return -1;\n\
    \  } else {\n    let s = (a + b + c) / 2;\n    return +Math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c)).toFixed(2);\n  }\n}\n", "    const [min, mid, max] = [a,\
    \ b, c].sort((x, y) => x - y);\n    if (min + mid > max) {\n        return 0.5\
    \ * min * Math.sqrt(mid ** 2 - (min ** 2 / 4));\n    }\n    return -1;\n}\n",
  "  let [s1, s2, s3] = [a, b, c].sort((a, b) => a - b);\n  if (s1 + s2 > s3) {\n\
    \    return ((s1 + s2) / 2) * Math.sqrt(Math.pow(s3, 2) - Math.pow((s1 - s2) /\
    \ 2, 2));\n  }\n  return -1;\n}\n", "  const s = (a + b + c) / 2;\n  const area\
    \ = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area > 0 ? area : -1;\n\
    }\n\ndescribe('simple test', () => {\n  it('invalid triangle', () => {\n    expect(triangle_area(1,\
    \ 2, 10)).toEqual(-1);\n  });\n  it('valid triangle', () => {\n    expect(triangle_area(3,\
    \ 4, 5)).toEqual(6);\n  });\n});", "  // TODO\n  return 0\n}\n", "  let A: number\
    \ = (a * b * c) / 2;\n  let sum: number = a + b + c;\n  let avg: number = sum\
    \ / 3;\n  let min = a;\n  let max = a;\n  if (b < min) {\n    min = b;\n  }\n\
    \  if (c < min) {\n    min = c;\n  }\n  if (b > max) {\n    max = b;\n  }\n  if\
    \ (c > max) {\n    max = c;\n  }\n  if (min + max < avg) {\n    return A;\n  }\
    \ else {\n    return -1;\n  }\n}\n", "    if (a + b > c && a + c > b && b + c\
    \ > a) {\n        return Math.round(a * b / 2 * 100) / 100;\n    } else {\n  \
    \      return -1;\n    }\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    // your code here\n    return -1;\n}\n", "    let area: number;\n\
    \    if (a + b > c && a + c > b && b + c > a) {\n        let s: number = (a +\
    \ b + c) / 2;\n        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  \
    \  } else {\n        area = -1;\n    }\n    return area;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "    let validTriangle =\
    \ ((a + b) > c) && ((a + c) > b) && ((b + c) > a);\n    if (validTriangle) {\n\
    \        let p = (a + b + c) / 2;\n        let area = Math.sqrt(p * (p - a) *\
    \ (p - b) * (p - c));\n        return Number(area.toFixed(2));\n    } else {\n\
    \        return -1;\n    }\n}\n\n", "  let max = Math.max(a, b, c);\n  let sum\
    \ = a + b + c;\n  let area = sum - max;\n  if (area <= max) {\n    return -1;\n\
    \  } else {\n    return +Math.sqrt(area * (area - a) * (area - b) * (area - c)).toFixed(2);\n\
    \  }\n}\n", "  if (a + b > c && a + c > b && b + c > a) {\n    return Number(((a\
    \ + b + c) / 2 * (a + b + c) / 2 - a * a - b * b - c * c).toFixed(2));\n  } else\
    \ {\n    return -1;\n  }\n}\n", "    let s = (a + b + c) / 2;\n    let area =\
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area.toFixed(2) ===\
    \ 'NaN' ? -1 : Number(area.toFixed(2));\n}\n", "    if (a + b > c && a + c > b\
    \ && b + c > a) {\n        let s = (a + b + c) / 2;\n        return parseFloat((Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))).toFixed(2));\n    }\n    return -1;\n}\n\n",
  "  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  let s = (a\
    \ + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n", " \
    \ if (a + b > c && a + c > b && b + c > a) {\n    return Math.round(100 * Math.sqrt((a\
    \ + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4) / 100;\n  } else {\n\
    \    return -1;\n  }\n}\n", "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (isNaN(area)) {\n        return -1;\n\
    \    }\n    return area;\n}\n", "    let s = (a + b + c) / 2;\n    let area =\
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if (area <= 0) return -1;\n\
    \    return +area.toFixed(2);\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c));\n  return area > 0 ? +area.toFixed(2) : -1;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\nconsole.log(triangle_area(1,\
    \ 2, 3));", "  if (a + b > c && a + c > b && b + c > a) {\n    return Number(((a\
    \ + b + c) / 2 * Math.sqrt(((a + b + c) / 2) * ((a + b + c) / 2 - a) * ((a + b\
    \ + c) / 2 - b) * ((a + b + c) / 2 - c))).toFixed(2));\n  } else {\n    return\
    \ -1;\n  }\n}\n", "    return (a + b > c && a + c > b && b + c > a) ? Number(((a\
    \ * b * c) ** 0.5).toFixed(2)) : -1;\n}\n", "    //your code here\n    return\
    \ 0;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));", "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n  if (area == 0) {\n    return -1;\n  } else {\n    return\
    \ area;\n  }\n}\n", "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    if (area > 0) {\n        return Number(area.toFixed(2));\n\
    \    } else {\n        return -1;\n    }\n}\n", "    return -1;\n}\n\n", "   \
    \ return -1;\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n        let\
    \ p = (a + b + c) / 2;\n        return Number((Math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c))).toFixed(2));\n    }\n    return -1;\n}\n", "    const p = (a + b\
    \ + c) / 2;\n    const A = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    return\
    \ Math.round(A * 100) / 100;\n}\n", "    let r = -1;\n    if (isTriangle(a, b,\
    \ c)) {\n        let s = (a + b + c) / 2;\n        r = Math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c)).toFixed(2);\n    }\n    return Number(r);\n}\n", "    if\
    \ (a + b > c && a + c > b && b + c > a) {\n        return +(0.5 * (a * b + b *\
    \ c + a * c)).toFixed(2);\n    } else {\n        return -1;\n    }\n}\n", "  \
    \  if (a <= 0 || b <= 0 || c <= 0) {\n        return -1;\n    }\n    if (a + b\
    \ <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    let p =\
    \ (a + b + c) / 2;\n    let s = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n\
    \    return Math.round(s * 100) / 100;\n}\n", "    if (a + b <= c || a + c <=\
    \ b || b + c <= a) return -1;\n    var p = (a + b + c) / 2;\n    return Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n}\n", "    return -1;\n}\n", "  let result\
    \ = -1;\n  if (a + b > c && a + c > b && b + c > a) {\n    result = (a + b + c)\
    \ / 2;\n  }\n  return result;\n}\n", "    const sum = (a + b + c) / 2;\n    const\
    \ area = Math.sqrt(sum * (sum - a) * (sum - b) * (sum - c));\n    return area\
    \ > 0 ? area : -1;\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    if (isValidTriangle(a, b, c)) {\n        let p = (a + b +\
    \ c) / 2;\n        return Number(Math.sqrt(p * (p - a) * (p - b) * (p - c)).toFixed(2));\n\
    \    }\n    return -1;\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n\
    \        return parseFloat((a * b / 2).toFixed(2));\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n        let\
    \ s = (a + b + c) / 2;\n        return Math.round(Math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c)) * 100) / 100;\n    }\n    return -1;\n}\n\ntest(triangle_area(3,\
    \ 4, 5), 6.0);\ntest(triangle_area(1, 2, 10), -1);\ntest(triangle_area(2, 2, 3),\
    \ 1.5);\ntest(triangle_area(4, 5, 6), 9.92);\ntest(triangle_area(5, 5, 5), 10.83);\n\
    test(triangle_area(5, 5, 6), 12.04);\ntest(triangle_area(5, 10, 10), 24.99);\n\
    test(triangle_area(3, 5, 5), 7.48);\ntest(triangle_area(10, 10, 10), 43.3);\n\
    test(triangle_area(2, 2, 4), -1);\ntest(triangle_area(2, 1, 5), -1);\ntest(triangle_area(0,\
    \ 0, 0), -1);\ntest(triangle_area(2, 1, 3), -1);\ntest(triangle_area(1, 2, 1),\
    \ -1);\ntest(triangle_area(3, 4, 2), -1);\ntest(triangle_area(2, 3, 1), -1);\n\
    test(triangle_area(4, 2, 1), -1);\ntest(triangle_area(1, 4, 2), -1);\ntest(triangle_area(2,\
    \ 1, 4), -1);\ntest(triangle_area(1, 2, 4), -1);\ntest(triangle_area(3, 2, 1),\
    \ -1);\ntest(triangle_area(3, 1, 2), -1);\ntest(triangle_area(1, 3, 2), -1);\n\
    test(triangle_area(2, 3, 1), -1);\ntest(triangle_area(1", "    return -1;\n}\n",
  "  const arr = [a, b, c];\n  arr.sort((a, b) => a - b);\n  if (arr[0] + arr[1] >\
    \ arr[2]) {\n    return Number((arr[0] * arr[2] / 2).toFixed(2));\n  }\n  return\
    \ -1;\n}\n", "    // your code here\n    let area: number = -1;\n    if (a + b\
    \ > c && a + c > b && b + c > a) {\n        let s: number = (a + b + c) / 2;\n\
    \        area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n    return\
    \ Math.round(area * 100) / 100;\n}\n", "    if (a + b <= c || a + c <= b || b\
    \ + c <= a) {\n        return -1;\n    }\n    let p = (a + b + c) / 2;\n    return\
    \ Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100) / 100;\n}\n", " \
    \   let mySides: number[] = [a, b, c];\n    mySides.sort((a, b) => a - b);\n\n\
    \    if (mySides[0] + mySides[1] <= mySides[2]) {\n        return -1;\n    } else\
    \ {\n        let s: number = (a + b + c) / 2;\n        return Number((Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))).toFixed(2));\n    }\n}\n", "    // TODO: Implement\n\
    \    return -1;\n}\n", "  let first = a * b * c;\n  if (a + b > c && a + c > b\
    \ && b + c > a) {\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n    return Math.round(area * 100) / 100;\n  }\
    \ else {\n    return -1;\n  }\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\nconsole.log(triangle_area(0, 4, 5));", "    if (a + b > c && a + c\
    \ > b && b + c > a) {\n        return +(a * b / 2).toFixed(2);\n    } else {\n\
    \        return -1;\n    }\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));", "    if (a < b + c && b < a + c && c < a + b) {\n        const p\
    \ = (a + b + c) / 2;\n        return Number((Math.sqrt(p * (p - a) * (p - b) *\
    \ (p - c))).toFixed(2));\n    }\n    return -1;\n}\n\n", "  // fill this in\n\
    \  const [valid, area] = triangle_area_helper(a, b, c);\n  return valid ? area\
    \ : -1;\n}\n", "    if (a < b + c && b < a + c && c < a + b) {\n        return\
    \ Math.round(a + b + c) / 2;\n    } else {\n        return -1;\n    }\n}\n", " \
    \ if (a + b > c && a + c > b && b + c > a) {\n    // console.log(\n    //   `s\
    \ = (${a} + ${b} + ${c}) / 2 = ${(a + b + c) / 2} , ${\n    //     (a + b + c)\
    \ / 2\n    //   } - ${a} = ${(a + b + c) / 2 - a}`\n    // );\n    return Math.round(\n\
    \      Math.sqrt(\n        ((a + b + c) / 2) *\n          (((a + b + c) / 2) -\
    \ a) *\n          (((a + b + c) / 2) - b) *\n          (((a + b + c) / 2) - c)\n\
    \      ) *\n        100\n    ) / 100;\n  } else {\n    return -1;\n  }\n}\n",
  "    const area = ((a + b + c) / 2) * (((a + b + c) / 2) - a) * (((a + b + c) /\
    \ 2) - b) * (((a + b + c) / 2) - c);\n    if (a + b > c && a + c > b && b + c\
    \ > a) {\n        return Number(Math.sqrt(area).toFixed(2));\n    } else {\n \
    \       return -1;\n    }\n}\n", "  let temp: number = a + b;\n  if (temp > c)\
    \ {\n    return (a * b) / 2;\n  } else {\n    return -1;\n  }\n}\n", "    // if(a+b>c\
    \ && a+c>b && b+c>a){\n    //     return a*b/2\n    // }else{\n    //     return\
    \ -1\n    // }\n    return a + b > c && a + c > b && b + c > a ? a * b / 2 : -1;\n\
    }\n", "  return a + b > c && a + c > b && b + c > a\n    ? (a + b + c) / 2\n \
    \   : -1;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  let result = -1;\n  if (a + b > c && a + c > b && b + c > a)\
    \ {\n    const s = (a + b + c) / 2;\n    result = Math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c));\n  }\n  return result;\n}\n", "    if (a + b > c && a + c > b\
    \ && b + c > a) {\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    }\n    return -1;\n}\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "    let s = (a + b + c)\
    \ / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if (area\
    \ > 0) {\n        return Number(area.toFixed(2));\n    } else {\n        return\
    \ -1;\n    }\n}\n\n\n", "    // your code goes here\n    if (a + b > c && a +\
    \ c > b && b + c > a) {\n        return Number((0.5 * a * b).toFixed(2));\n  \
    \  } else {\n        return -1;\n    }\n}\n", "    const s = (a + b + c) / 2\n\
    \    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\
    \ > 0 ? +area.toFixed(2) : -1\n}\n", "  if (a <= 0 || b <= 0 || c <= 0) {\n  \
    \  return -1;\n  }\n  if (a + b > c && a + c > b && b + c > a) {\n    const s\
    \ = (a + b + c) / 2;\n    return Math.round(Math.sqrt(s * (s - a) * (s - b) *\
    \ (s - c)) * 100) / 100;\n  }\n  return -1;\n}\n\nexport { triangle_area };",
  "  let [max, mid, min] = [a, b, c].sort((x, y) => y - x);\n  return max < min +\
    \ mid ? 0.5 * (a + b + c) : -1;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    const s = (a + b + c) / 2\n    const area = Math.sqrt(s *\
    \ (s - a) * (s - b) * (s - c))\n    return area > 0 ? +area.toFixed(2) : -1\n\
    }\n", "    const p = (a + b + c) / 2;\n    const area = Math.sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n    if (Number.isNaN(area)) {\n        return -1;\n \
    \   }\n    return Number(area.toFixed(2));\n}\n", "  //Given the lengths of the\
    \ three sides of a triangle,\n  //Return the area of the triangle rounded to 2\
    \ decimal points\n  // if the three sides form a valid triangle.\n  // Otherwise\
    \ return -1\n\n  //I need to use a formula:\n  //  A = 1/2 ( base * height )\n\
    \  //  base = one of the sides\n  //  height = distance from base to the opposite\
    \ point ( pythagorean theorem )\n  //  A = 1/2 ( c * b )\n  //  c = the side opposite\
    \ of point A\n  //  b = side opposite of point B\n\n  //Step 1: I need to make\
    \ sure these sides actually make a triangle.\n  if ((a + b) > c) {\n    if ((a\
    \ + c) > b) {\n      if ((b + c) > a) {\n        //Step 2: Find the height from\
    \ the side that makes the base.\n        const height: number =\n          Math.sqrt(Math.pow(c,\
    \ 2) - Math.pow(b / 2, 2));\n        //Step 3: Use formula to find area.\n   \
    \     const area: number = 0.5 * c * height;\n        //Step 4: Return area.\n\
    \        return area;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n\nexport default triangle_area;",
  "    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n    return area > 0 ? +area.toFixed(2) : -1;\n}\n", "  // Your\
    \ code goes here\n  if (a+b>c && a+c>b && b+c>a) {\n    let s = (a+b+c)/2;\n \
    \   return Math.sqrt(s*(s-a)*(s-b)*(s-c));\n  } else {\n    return -1;\n  }\n\
    }\n", "    let area = -1;\n    if (a + b > c && a + c > b && b + c > a) {\n  \
    \      area = Math.sqrt((a + b + c) * (a + b - c) * (a - b + c) * (-a + b + c))\
    \ / 4;\n    }\n    return area;\n}\n\nconsole.log(triangle_area(2, 3, 4));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    if ((a + b) > c && (a + c) > b && (b + c) > a) {\n       \
    \ let p = (a + b + c) / 2;\n        let s = Math.sqrt(p * (p - a) * (p - b) *\
    \ (p - c));\n        return +s.toFixed(2);\n    }\n    return -1;\n}\n", "  //\
    \ TODO: return the area of the triangle (rounded to two decimal places)\n  //\
    \ if the sum of any two sides is greater than the third, otherwise return -1\n\
    \  return -1;\n}\n", "    const s = (a + b + c) / 2;\n    const area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n    return isNaN(area) ? -1 : Math.round(area\
    \ * 100) / 100;\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n    return area > 0 ? area : -1;\n}\n", "    //\
    \ \n    if ( (a + b > c) && (b + c > a) && (a + c > b) ) {\n        // \n    \
    \    let p = (a + b + c) / 2;\n        let s = Math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c));\n        return Number(s.toFixed(2));\n    }\n    else {\n     \
    \   return -1;\n    }\n}\n\n", "    // TODO: implement function\n    // no matter\
    \ the way to calculate the area, it will be calculated only when\n    // the three\
    \ sides make a valid triangle.\n    if ((a + b) > c && (a + c) > b && (b + c)\
    \ > a) {\n        return Math.round(Math.sqrt((a + b + c) * (a + b - c) * (a +\
    \ c - b) * (b + c - a)) * 100) / 100;\n    } else {\n        return -1;\n    }\n\
    }\n\n", "    if ((a + b) > c && (a + c) > b && (b + c) > a) {\n        return\
    \ Number(((a + b + c) / 2).toFixed(2));\n    } else {\n        return -1;\n  \
    \  }\n}\n", "  // your code here\n  if (isValidTriangle(a, b, c)) {\n    let s\
    \ = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \  }\n  return -1;\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    // your code here\n    if (a + b > c && a + c > b && b + c\
    \ > a) {\n        let s = (a + b + c) / 2;\n        return Number((Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))).toFixed(2));\n    }\n    return -1;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "    const p = (a + b + c)\
    \ / 2;\n    const area = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    return\
    \ area > 0 ? +area.toFixed(2) : -1;\n}\n\nconsole.log(triangle_area(3, 4, 5));\n\
    console.log(triangle_area(1, 2, 10));", "    let s = (a + b + c) / 2;\n    let\
    \ area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if (area > 0) {\n  \
    \      return Number(area.toFixed(2));\n    } else {\n        return -1;\n   \
    \ }\n}\n", "    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a\
    \ + b + c) / 2;\n        return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c)) * 100) / 100;\n    }\n    return -1;\n}\n", "  return triangle_area_solution(a,\
    \ b, c);\n}\n", "    // edge cases\n    if (a <= 0 || b <= 0 || c <= 0) {\n  \
    \      return -1;\n    }\n\n    // use Heron's formula\n    let s = (a + b + c)\
    \ / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ area;\n}\n", "    const area = (a + b + c) / 2;\n    if (area <= 0) {\n    \
    \    return -1;\n    }\n    return +Math.sqrt(area * (area - a) * (area - b) *\
    \ (area - c)).toFixed(2);\n}\n", "    if(a + b > c && a + c > b && b + c > a){\n\
    \        return Math.round(.5 * a * b * 100) / 100;\n    }\n    return -1;\n}\n\
    \nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1, 2, 10));",
  "  if (a + b > c && a + c > b && b + c > a) {\n    return Number(((a + b + c) /\
    \ 2).toFixed(2));\n  }\n  return -1;\n}\n", "  if (a + b > c && a + c > b && b\
    \ + c > a) {\n    return Number((0.5 * a * b).toFixed(2));\n  }\n  return -1;\n\
    }\n", "  let s = (a + b + c) / 2;\n  let area = s * (s - a) * (s - b) * (s - c);\n\
    \  return area > 0 ? Math.sqrt(area) : -1;\n}\n", "  if (a + b > c && a + c >\
    \ b && b + c > a) {\n    const perimeter = (a + b + c) / 2;\n    const area =\
    \ Math.sqrt(\n      perimeter * (perimeter - a) * (perimeter - b) * (perimeter\
    \ - c)\n    );\n    return Number(area.toFixed(2));\n  } else {\n    return -1;\n\
    \  }\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "  let s = (a + b + c) / 2;\n  if (s > a && s > b && s > c) {\n\
    \    return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n\
    \  } else {\n    return -1;\n  }\n}\n\ndescribe(\"triangle_area\", function()\
    \ {\n  it(\"should work for some examples\", function() {\n    Test.assertEquals(triangle_area(1,\
    \ 2, 2), 1);\n    Test.assertEquals(triangle_area(7, 2, 2), -1);\n    Test.assertEquals(triangle_area(4,\
    \ 13, 15), 24);\n    Test.assertEquals(triangle_area(9, 9, 9), 40.24);\n    Test.assertEquals(triangle_area(7,\
    \ 12, 8), 30);\n    Test.assertEquals(triangle_area(4, 2, 6), 5.33);\n    Test.assertEquals(triangle_area(5,\
    \ 10, 8), 17.88);\n    Test.assertEquals(triangle_area(10, 8, 5), 17.88);\n  \
    \  Test.assertEquals(triangle_area(10, 5, 8), 17.88);\n    Test.assertEquals(triangle_area(8,\
    \ 5, 10), 17.88);\n    Test.assertEquals(triangle_area(8, 10, 5), 17.88);\n  \
    \  Test.assertEquals(triangle_area(5, 8, 10), 17.88);\n    Test.assertEquals(triangle_area(5,\
    \ 6, 7), 14.7);\n    Test.assertEquals(triangle_area(15, 20, 25), 96);\n    Test.assertEquals(triangle_area(50,\
    \ 50, 50), 866.96);\n    Test.assertEquals(triangle_area(50, 50, 60), -1);\n \
    \   Test.assertEquals(triangle_area(51, 51, 51), -1);\n    Test.assertEquals(triangle_area(51,\
    \ 52, 51), -", "  //your code here\n  return 0;\n}\n", "    if ((a + b) > c &&\
    \ (a + c) > b && (b + c) > a) {\n        return (a + b + c) / 2;\n    } else {\n\
    \        return -1;\n    }\n}\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    const triangle = [a, b, c].sort((a, b) => a - b);\n    return\
    \ triangle[0] + triangle[1] > triangle[2]\n        ? Number(((triangle[0] + triangle[1])\
    \ * triangle[2] / 2).toFixed(2))\n        : -1;\n}\n", "    if (a + b > c && a\
    \ + c > b && b + c > a) {\n        const p = (a + b + c) / 2;\n        return\
    \ Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    return -1;\n}\n", " \
    \ let sides: number[] = [a, b, c];\n  // If a side is equal to 0, this is not\
    \ a triangle\n  if (sides.includes(0)) {\n    return -1;\n  }\n  // sort array\
    \ from lowest to highest\n  sides.sort((a, b) => a - b);\n  // if a side is greater\
    \ than the sum of the other two sides,\n  // this is not a triangle\n  if (sides[0]\
    \ + sides[1] <= sides[2]) {\n    return -1;\n  }\n  // Heron's Formula\n  let\
    \ p = sides.reduce((a, b) => a + b) / 2;\n  let area = Math.sqrt(p * (p - sides[0])\
    \ * (p - sides[1]) * (p - sides[2]));\n  return Math.round(area * 100) / 100;\n\
    }\n", "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c));\n  return (area > 0) ? Math.round(area * 100) / 100 : -1;\n}\n",
  "    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n\
    \        return +Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\
    \ else {\n        return -1;\n    }\n}\n\n", "    if (a + b > c && a + c > b &&\
    \ b + c > a) {\n        return Number((0.5 * a * b).toFixed(2));\n    } else {\n\
    \        return -1;\n    }\n}\n", "    return a + b > c && a + c > b && b + c\
    \ > a ? Math.round(\n        (a + b + c) *\n        (Math.sqrt((a + b + c) * (a\
    \ + b - c) * (a + c - b) * (b + c - a))) /\n        4 *\n        100) / 100 :\
    \ -1;\n}\n", "  if(a + b > c && a + c > b && b + c > a)\n    return Math.round(a\
    \ * b * Math.sin(c * Math.PI / 180) * 100) / 100;\n  return -1;\n}\n", "    let\
    \ s = (a + b + c) / 2;\n    let res = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    return res > 0 ? res : -1;\n}\n\nconsole.log(triangle_area(1, 2, 10));\n\
    console.log(triangle_area(3, 4, 5));\n", "    if (a + b > c && a + c > b && b\
    \ + c > a) {\n        let area = ((a + b + c) / 2)\n        let triangleArea =\
    \ Math.sqrt(area * (area - a) * (area - b) * (area - c))\n        return Math.round(triangleArea\
    \ * 100) / 100\n    } else {\n        return -1\n    }\n}\n", "    if (a + b <=\
    \ c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    let s = (a\
    \ + b + c) / 2;\n    return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)) * 100) / 100;\n}\n\n", "    const s = (a + b + c) / 2;\n    const area =\
    \ Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Number.isNaN(area) ?\
    \ -1 : area;\n}\n", "    const p = (a + b + c) / 2;\n    const s = Math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c));\n    if (!isNaN(s)) {\n        return Math.round(s\
    \ * 100) / 100;\n    }\n    return -1;\n}\n", "    //returns the area of a triangle\n\
    \    let s = (a + b + c) / 2;\n    return Math.round(Math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c)) * 100) / 100;\n}\n", "    const s = (a + b + c) / 2;\n    return\
    \ Math.round(\n        Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100\n    )\
    \ / 100;\n}\n", "    const first = Math.round(a * b * Math.sin(c) * 100) / 100;\n\
    \    if (first <= 0) {\n        return -1;\n    }\n    return first;\n}\n", " \
    \ if (a < 0 || b < 0 || c < 0) {\n    return -1;\n  }\n  let s = (a + b + c) /\
    \ 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n", "  if (a <=\
    \ 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (a + b > c && a + c > b\
    \ && b + c > a) {\n    return (\n      Math.round(\n        (Math.sqrt(\n    \
    \      (a + b + c) *\n            (a + b - c) *\n            (a - b + c) *\n \
    \           (-a + b + c)\n        ) /\n          4) *\n          100\n      )\
    \ / 100\n    );\n  } else {\n    return -1;\n  }\n}\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "    let area: number = ((a\
    \ + b + c) / 2) * Math.sqrt(((a + b + c) / 2) - a) * Math.sqrt(((a + b + c) /\
    \ 2) - b) * Math.sqrt(((a + b + c) / 2) - c);\n    if (area) {\n        return\
    \ area;\n    } else {\n        return -1;\n    }\n}\n", "    const result = area(a,\
    \ b, c);\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
