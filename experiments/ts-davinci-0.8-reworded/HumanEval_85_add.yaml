name: HumanEval_85_add
language: ts
prompt: "//Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
  \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
  \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
completions: ["  return lst.filter((x, i) => i % 2 === 1).reduce((x, y) => x + y);\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result += lst[i];\n  \
    \      }\n    }\n    return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0\
    \ && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1\
    \ && lst[i] % 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (i % 2 == 1){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1\
    \ && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  // Write your code here\n  return\
    \ lst.filter((v, i) => v % 2 === 0 && i % 2 !== 0).reduce((a, v) => a + v);\n\
    }\n", "  return lst.filter((x, i) => i % 2 !== 0 && x % 2 === 0).reduce((a, b)\
    \ => a + b, 0);\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n",
  "    let result = 0;\n    lst.forEach((item, index) => {\n        if (index % 2\
    \ !== 0 && item % 2 === 0) {\n            result += item;\n        }\n    });\n\
    \    return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "    return lst.filter((e,\
    \ i) => i % 2 !== 0).reduce((acc, curr) => acc + curr, 0);\n}\n", "    return\
    \ lst.filter((num, i) => i % 2 === 1 && num % 2 === 0).reduce((sum, num) => sum\
    \ + num, 0);\n}\n", "    let sum: number = 0;\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n         \
    \   sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    //throw \"Not Implemented\"\
    ;\n    let result: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n", "\treturn lst.filter((number, index)\
    \ => index % 2 === 1 && number % 2 === 0).reduce((acc, curr) => acc + curr);\n\
    }\n\nconsole.log(add([4, 2, 6, 7]));\n", "    let result = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n\
    \            result += lst[i];\n        }\n    }\n    return result;\n}\n", " \
    \   let res = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i %\
    \ 2 == 1 && lst[i] % 2 == 0) {\n            res += lst[i];\n        }\n    }\n\
    \    return res;\n}\n", "    let evenNumbers = lst.filter(n => n % 2 === 0)\n\
    \    let oddIndexs = lst.filter((_, index) => index % 2 != 0)\n    let x = evenNumbers.filter(e\
    \ => oddIndexs.indexOf(e) != -1)\n    return x.reduce((a, b) => a + b, 0)\n}\n",
  "    return undefined;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n", "  let result = 0;\n  lst.forEach((e, i) => {\n    if (i\
    \ % 2 === 1 && e % 2 === 0) {\n      result += e;\n    }\n  });\n  return result;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2\
    \ !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\n", "    let total = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n   \
    \         total += lst[i];\n        }\n    }\n    return total;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "    let result = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n\ndescribe(\"add(lst)\", function ()\
    \ {\n    it(\"add([4, 2, 6, 7])\", function () {\n        assert.equal(add([4,\
    \ 2, 6, 7]), 2);\n    });\n    it(\"add([-5, 0, 5, 10])\", function () {\n   \
    \     assert.equal(add([-5, 0, 5, 10]), 10);\n    });\n    it(\"add([1, 2, 3,\
    \ 4])\", function () {\n        assert.equal(add([1, 2, 3, 4]), 0);\n    });\n\
    \    it(\"add([2, 3, 4, 5])\", function () {\n        assert.equal(add([2, 3,\
    \ 4, 5]), 2);\n    });\n    it(\"add([1, 3, 5, 7])\", function () {\n        assert.equal(add([1,\
    \ 3, 5, 7]), 0);\n    });\n    it(\"add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\", function\
    \ () {\n        assert.equal(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 12);\n    });\n\
    \    it(\"add([-3, -2, -1, 1, 2, 3])\", function () {\n        assert.equal(add([-3,\
    \ -2, -1, 1, 2, 3]), -2);\n    });\n    it(\"add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])\", function () {\n        assert.equal(add([0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]), 20);\n    });\n    it(\"add([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\", function\
    \ () {\n        assert.equal(add([0, 0, 0, 0,", "\treturn lst.filter((num, index)\
    \ => num % 2 === 0 && index % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "\tlet sum = 0;\n\tfor (let i = 0; i < lst.length; i++) {\n\t\
    \tif (i % 2 !== 0 && lst[i] % 2 === 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\t\
    return sum;\n}\n", "  return lst.filter((_, i) => i % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}", "  var sum = 0;\n  for (var i = 0; i < lst.length; i = i + 2)\
    \ {\n    if (lst[i] % 2 == 0) {\n      sum = sum + lst[i];\n    }\n  }\n  return\
    \ sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  return lst.filter((x, i) =>\
    \ i % 2 == 1).reduce((x, y) => x + y, 0);\n}\n", "    return lst.filter((_, index)\
    \ => index % 2 == 1).reduce((acc, curr) => acc + curr, 0);\n}\n", "    let evens\
    \ = lst.filter((v, i) => v % 2 === 0 && i % 2 !== 0);\n    let sum = evens.reduce((total,\
    \ value) => total + value);\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\
    \n", "  return lst.filter((num, index) => index % 2 !== 0 && num % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));", "    return lst.filter((e,i)\
    \ => e % 2 === 0 && i % 2 !== 0).reduce((a,e) => a + e, 0);\n}\n", "  let result\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 &&\
    \ lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \   let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i\
    \ % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n \
    \   }\n    return result;\n}\n", "    let result = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n         \
    \   result += lst[i];\n        }\n    }\n    return result;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 &&\
    \ lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n \
    \   if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(add([4, 2, 6, 7]));\n", "  return lst.filter((num, index) =>\
    \ num % 2 === 0 && index % 2 !== 0).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([1,2,3,4,5,6,7,8,9,10]));\n",
  "    return lst.filter((_, i) => i % 2 !== 0).reduce((acc, curr) => acc + curr,\
    \ 0);\n}", "  var sum: number = 0;\n  for (var i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));", "    let sum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 ===\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", " \
    \ return undefined;\n}\n", "  return 0;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n    \
    \  sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0 && lst[i] % 2 ==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", " \
    \ const oddIndices = [];\n  const even = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const element = lst[i];\n    if (i % 2 === 0) {\n      oddIndices.push(element);\n\
    \    }\n    if (element % 2 === 0) {\n      even.push(element);\n    }\n  }\n\
    \  return oddIndices.filter(x => even.includes(x)).reduce((a, b) => a + b, 0);\n\
    }\n\ndescribe(\"add\", () => {\n  it(\"should work\", () => {\n    expect(add([4,\
    \ 2, 6, 7])).toEqual(2);\n    expect(add([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2])).toEqual(8);\n    expect(add([1, 1, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2", "  return lst.filter((x, i) => x % 2 === 0 && i % 2 !==\
    \ 0).reduce((a, b) => a + b, 0);\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "    let total\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1 &&\
    \ lst[i] % 2 === 0) {\n            total += lst[i];\n        }\n    }\n    return\
    \ total;\n}\n", "  return lst.filter((el, i) => el % 2 === 0 && i % 2 !== 0).reduce((a,\
    \ b) => a + b);\n}\n", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "    return lst.filter((x,i) => (x % 2 == 0 && i %\
    \ 2 != 0)).reduce((a,b) => a + b);\n}\n", "  let count = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      count\
    \ += lst[i];\n    }\n  }\n  return count;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n",
  "    return 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n", "  var result = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      result += lst[i];\n   \
    \ }\n  }\n  return result;\n}\n", "  let res = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      res += lst[i];\n \
    \   }\n  }\n  return res;\n}\n", "    let result = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n         \
    \   result += lst[i];\n        }\n    }\n    return result;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n       \
    \ }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "    let evenNumbers = lst.filter(x => (x % 2\
    \ == 0));\n    return evenNumbers.reduce((a, b) => (a + b), 0);\n}", "\tlet sum\
    \ = 0;\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "  // write your solution here\n  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \  sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  return lst.filter((v, i)\
    \ => v % 2 === 0 && i % 2 === 1).reduce((p, c) => p + c, 0);\n}\n", "    let a:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !==\
    \ 0 && lst[i] % 2 === 0) {\n            a += lst[i];\n        }\n    }\n    return\
    \ a;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "    let evenOddIndexSum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            evenOddIndexSum\
    \ += lst[i];\n        }\n    }\n    return evenOddIndexSum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\nconsole.log(add([3, 2, 5, 7]));\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] %\
    \ 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
  "    return lst.filter((num, idx) => idx % 2 == 1).reduce((a, b) => a + b);\n}\n",
  "    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    let i = 1;\n    let sum = 0;\n    for (; i < lst.length; i+=2) {\n\
    \        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\n", "  return lst.filter((num, i) => i % 2 === 1 && num\
    \ % 2 === 0).reduce((sum, num) => sum + num);\n}\n", "  // TODO\n  let x = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 ===\
    \ 0) {\n      x += lst[i];\n    }\n  }\n  return x;\n}", "    return lst.filter((e,\
    \ i) => i % 2 === 1 && e % 2 === 0).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\nconsole.log(add([1, 1, 1, 1]));\n", "    return lst.filter((v,\
    \ i) => v % 2 === 0 && i % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++){\n        if (i % 2 == 1\
    \ && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}", "    return lst.filter((ele, i) => ele % 2 === 0 && i % 2 !== 0).reduce((sum,\
    \ ele) => sum + ele, 0);\n}\n", "    return lst.filter((e, i) => i % 2 !== 0 &&\
    \ e % 2 === 0).reduce((x, y) => x + y);\n}\n\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}", "  return lst.filter((num,\
    \ idx) => idx % 2 !== 0 && num % 2 === 0).reduce((acc, item) => acc + item, 0);\n\
    }\n\nadd([4, 2, 6, 7]);\n", "  return lst.filter((e, i) => e % 2 === 0 && i %\
    \ 2 != 0).reduce((a, c) => a + c);\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "  let sum = 0;\n  lst.forEach((el, i) => {\n    if (i % 2 ===\
    \ 1 && el % 2 === 0) {\n      sum += el;\n    }\n  });\n  return sum;\n}", " \
    \ // write code here\n  return lst.filter((x, i) => i % 2 === 1 && x % 2 === 0).reduce((x,\
    \ i) => x + i);\n}\n", "  var result = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n    }\n\
    \  }\n  return result;\n}\n", "  return lst.filter((x, i) => x % 2 === 0 && i\
    \ % 2 !== 0).reduce((a, b) => a + b);\n}\n", "  return lst.filter((x, i) => i\
    \ % 2 === 1 && x % 2 === 0).reduce((x, y) => x + y, 0);\n}\n", "  // write your\
    \ code here\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n      total += lst[i];\n    }\n  }\n  return\
    \ total;\n}\n", "    let evenNum = 0;\n    let index = 0;\n    while (index <\
    \ lst.length) {\n        if (lst[index] % 2 === 0) {\n            evenNum += lst[index];\n\
    \        }\n        index += 2;\n    }\n    return evenNum;\n}", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 &&\
    \ lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  return lst.filter((num, index)\
    \ => num % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nlet lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\
    console.log(add(lst));", "  return lst.filter((item, index) => index % 2 == 1).reduce((a,\
    \ b) => a + b);\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n", " \
    \ let sum = 0;\n  lst.forEach((number, index) => {\n    if (number % 2 === 0 &&\
    \ index % 2 !== 0) {\n      sum += number;\n    }\n  });\n  return sum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "    var result = 0;\n    for (var i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n", "  let res = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      res\
    \ += lst[i];\n    }\n  }\n  return res;\n}\n", "  return lst.filter((x, i) =>\
    \ i % 2 !== 0 && x % 2 === 0).reduce((x, y) => x + y, 0);\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 &&\
    \ lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    var sum: number = 0;\n    for (var\
    \ i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  let evens\
    \ = lst.filter((item, idx) => item % 2 === 0 && idx % 2 !== 0);\n  return evens.reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2\
    \ === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n",
  "  let ans = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2\
    \ === 0) {\n      ans += lst[i];\n    }\n  }\n  return ans;\n}\n", "  return lst.filter((x,\
    \ index) => x % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}\n",
  "    let sum: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\n", "\tlet oddSum = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tif (i % 2 === 1 && lst[i] % 2 === 0) {\n\t\t\toddSum += lst[i];\n\
    \t\t}\n\t}\n\treturn oddSum;\n}\n", "    let sum = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n       \
    \     sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "  let sum = 0;\n  lst.forEach((el, index) => {\n    if (el\
    \ % 2 === 0 && index % 2 !== 0) {\n      sum += el;\n    }\n  });\n  return sum;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\n", "  // Your code goes here.\n  return 0;\n\
    }\n", "  return lst.filter((e, i) => i % 2 === 1 && e % 2 === 0).reduce((a, b)\
    \ => a + b, 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nlet testA = [4, 2, 6, 7];\nconsole.log(add(testA));\n",
  "    //SOLUTION: 1\n    // return lst.filter((num, idx) => idx % 2 != 0 && num %\
    \ 2 == 0).reduce((a, b) => a + b, 0);\n\n    //SOLUTION: 2\n    // return lst.filter((num,\
    \ idx) => num % 2 == 0 && idx % 2 != 0).reduce((a, b) => a + b, 0);\n\n    //SOLUTION:\
    \ 3\n    // return lst.filter((num, idx) => idx % 2 != 0).filter(num => num %\
    \ 2 == 0).reduce((a, b) => a + b, 0);\n\n    //SOLUTION: 4\n    // return lst.filter((num,\
    \ idx) => idx % 2 != 0).reduce((a, b) => a + (b % 2 == 0 ? b : 0), 0);\n\n   \
    \ //SOLUTION: 5\n    // let sum = 0;\n    // for (let i = 1; i < lst.length; i\
    \ += 2) {\n    //     if (lst[i] % 2 == 0) {\n    //         sum += lst[i];\n\
    \    //     }\n    // }\n    // return sum;\n\n    //SOLUTION: 6\n    // let sum\
    \ = 0;\n    // for (let i = 0; i < lst.length; i++) {\n    //     if (i % 2 !=\
    \ 0 && lst[i] % 2 == 0) {\n    //         sum += lst[i];\n    //     }\n    //\
    \ }\n    // return sum;\n\n    //SOLUTION: 7\n    // let sum = 0;\n    // for\
    \ (let i = 0; i < lst.length; i++) {\n    //     if (lst[i] % 2 == 0 && i % 2\
    \ != 0) {\n    //         sum += lst[i];\n    //     }\n    // }\n    // return\
    \ sum;\n\n    //SOLUTION: 8\n    // return lst.reduce((sum, num, idx) => sum +\
    \ (idx % 2 != 0 && num % 2 == 0 ? num : 0), 0);\n\n    //SOLUTION", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0 &&\
    \ lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    return lst.filter((item, index) => index % 2 !== 0 && item\
    \ % 2 === 0).reduce((acc, item) => acc + item, 0);\n}\n", "  var sum = 0;\n  for\
    \ (var i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6,\
    \ 7]));\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\n", "  let result = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}\n", "\tlet sum = 0;\n\tfor (let\
    \ i = 0; i < lst.length; i++) {\n\t\tif (i % 2 === 1 && lst[i] % 2 === 0) {\n\t\
    \t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum +=\
    \ lst[i];\n    }\n  }\n  return sum;\n}", "  let result = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n",
  "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 1 && lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\n", "    let sum: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2\
    \ === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    console.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20]));\n", "  return lst.filter((num, i) => i % 2 !== 0 && num % 2 === 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n", "    // add your code here\n    let res = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n            res += lst[i];\n        }\n    }\n    return res;\n\
    }\n\n", "  return lst.filter((num, i) => i % 2 !== 0 && num % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  //your code\n  let res = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      res +=\
    \ lst[i];\n    }\n  }\n  return res;\n}\n", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}", "    return lst.filter((e, i) => e % 2 === 0 &&\
    \ i % 2 === 1).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([4, 2, 6, 7]));\n",
  "    let x: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 !== 0 && lst[i] % 2 === 0) {\n            x += lst[i];\n        }\n \
    \   }\n    return x;\n}\n", "    let sum: number = 0;\n    lst.forEach((element,\
    \ index) => {\n        if (element % 2 === 0 && index % 2 === 1) {\n         \
    \   sum += element;\n        }\n    });\n    return sum;\n}\n", "    let total\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 != 0 &&\
    \ lst[i] % 2 == 0) {\n            total += lst[i];\n        }\n    }\n    return\
    \ total;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  return lst.filter((num, index)\
    \ => num % 2 === 0 && index % 2 !== 0).reduce((prev, curr) => prev + curr);\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n    \
    \    }\n    }\n    return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  \
    \  let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2\
    \ != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "    // let\
    \ result: number = 0;\n    // for (let i = 0; i < lst.length; i++) {\n    // \
    \    if (i % 2 == 1 && lst[i] % 2 == 0) {\n    //         result += lst[i];\n\
    \    //     }\n    // }\n    // return result;\n    return lst.reduce((acc, curr,\
    \ index) => (index % 2 == 1 && curr % 2 == 0) ? acc + curr : acc, 0);\n}\n", " \
    \   return lst.filter((n, i) => i % 2 !== 0 && n % 2 === 0).reduce((acc, curr)\
    \ => acc + curr, 0);\n}\n", "    return lst.filter((n, i) => i % 2 != 0 && n %\
    \ 2 == 0).reduce((a, b) => a + b);\n}", "\tlet sum: number = 0;\n\tlst.forEach((num,\
    \ i) => {\n\t\tif (i % 2 !== 0 && num % 2 === 0) {\n\t\t\tsum += num;\n\t\t}\n\
    \t});\n\treturn sum;\n}", "    let sum: number = 0;\n    for (let i: number =\
    \ 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  return\
    \ lst.filter((num, i) => i % 2 == 1).reduce((a, b) => a + b);\n}\n", "  let result\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", " \
    \   let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i %\
    \ 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", " \
    \   let sum = 0;\n    lst.forEach((element, index) => {\n        if (index % 2\
    \ === 1 && element % 2 === 0) {\n            sum += element;\n        }\n    });\n\
    \    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ntest(add([2, 3, 4, 6, 7, 8, 9, 10]),\
    \ 12);\n\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n \
    \   if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n    }\n  }\n\
    \  return result;\n}\n", "  return lst.filter((value, index) => value % 2 ===\
    \ 0 && index % 2 === 1).reduce((prev, curr) => prev + curr, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n\
    \  }\n  return result;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n", "    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2\
    \ === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\n", "  let result = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      result\
    \ += lst[i];\n    }\n  }\n  return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n",
  "  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0\
    \ && lst[i] % 2 === 0) {\n      count += lst[i];\n    }\n  }\n  return count;\n\
    }\n", "\treturn lst.filter((x, i) => i % 2 === 1).reduce((x, y) => x + y, 0);\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i]\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconsole.log(add([4, 2, 6, 7]));\n", "  let even: number = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n  \
    \    even += lst[i];\n    }\n  }\n  return even;\n}\n", "  let s = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n  \
    \    s += lst[i];\n    }\n  }\n  return s;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n",
  "    let sum: number = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n     \
    \   if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "  return lst.filter((val,\
    \ i) => i % 2 === 1 && val % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));", "  return lst.filter((element, i) => i % 2 === 1).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));", "    let sum:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !=\
    \ 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  const add = 0;\n  return lst.reduce((acc, el) => {\n    if (el\
    \ % 2 === 0 && el % 2 !== 0) {\n      return acc + el;\n    }\n    return acc;\n\
    \  }, add);\n}", "    let ans = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            ans += lst[i];\n  \
    \      }\n    }\n    return ans;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  return lst.filter((_, index) => index % 2).reduce((acc,\
    \ val) => val + acc);\n}\nconsole.log(add([4, 2, 6, 7]));\n", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "    return lst.filter((val, i) => i % 2 !== 0 && val % 2 === 0).reduce((curr,\
    \ prev) => curr + prev, 0);\n}\n\n", "  let evens = lst.filter((element, index)\
    \ => {\n    return index % 2 !== 0 && element % 2 === 0;\n  });\n  let total =\
    \ evens.reduce((a, b) => a + b);\n  return total;\n}\n", "  return lst.filter((x,\
    \ i) => x % 2 === 0 && i % 2 !== 0).reduce((x, y) => x + y);\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "  return lst.filter((el, index) => index % 2 !== 0 && el %\
    \ 2 === 0).reduce((acc, curr) => acc + curr, 0);\n}\n", "  let result = 0;\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 ==\
    \ 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", "    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < lst.length; i += 2) {\n  \
    \      if (lst[i] % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n", "    return lst.filter((e,\
    \ i) => (i % 2 == 1) && (e % 2 == 0)).reduce((a, b) => a + b, 0);\n}\n", "  return\
    \ lst.filter((n, i) => i % 2 === 1).reduce((sum, n) => sum + n, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\nconsole.log(add([]));\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\n", "    return lst.filter((num, index) => num % 2 === 0 && index\
    \ % 2 !== 0).reduce((sum, num) => sum + num, 0);\n}\n\nconsole.log(add([4, 2,\
    \ 6, 7]));\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "    return lst.filter((v, i) => i % 2\
    \ != 0 && v % 2 == 0).reduce((a, b) => a + b, 0);\n}\n", "    let sum = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] %\
    \ 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    console.log(add([4, 2, 6, 7]));\n", "    let sum: number = 0;\n    for (let i:\
    \ number = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 != 0 &&\
    \ lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
