language: ts
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\nexport function* stream_words(string: string):\
    \ IterableIterator<string> {\n    const characters = string.split(\"\");\n   \
    \ let index = 0;\n    while (index < characters.length) {\n        let word =\
    \ \"\";\n        while (index < characters.length && is_letter(characters[index]))\
    \ {\n            word += characters[index];\n            index++;\n        }\n\
    \        if (word !== \"\") {\n            yield word;\n        }\n        index++;\n\
    \    }\n}\n\nexport function* stream_numbers(string: string): IterableIterator<string>\
    \ {\n    const characters = string.split(\"\");\n    let index = 0;\n    while\
    \ (index < characters.length) {\n        let number = \"\";\n        while (index\
    \ < characters.length && is_digit(characters[index])) {\n            number +=\
    \ characters[index];\n            index++;\n        }\n        if (number !==\
    \ \"\") {\n            yield number;\n        }\n        index++;\n    }\n}\n\n\
    export function* stream_line_numbers(string: string): IterableIterator<string>\
    \ {\n    const lines = string.split(\"\\n\");\n    let line_number = 1;\n    while\
    \ (line_number <= lines.length) {\n        yield line_number.toString();\n   \
    \     line_number++;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: 'error TS2318: Cannot find global type ''IterableIterator''.

    ../../../../../tmp/tmpb_91tomu.ts(12,48): error TS2304: Cannot find name ''IterableIterator''.

    ../../../../../tmp/tmpb_91tomu.ts(17,45): error TS2304: Cannot find name ''is_letter''.

    ../../../../../tmp/tmpb_91tomu.ts(28,50): error TS2304: Cannot find name ''IterableIterator''.

    ../../../../../tmp/tmpb_91tomu.ts(33,45): error TS2304: Cannot find name ''is_digit''.

    ../../../../../tmp/tmpb_91tomu.ts(44,55): error TS2304: Cannot find name ''IterableIterator''.

    '
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((_, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let answer: string[] = []\n    for (let i: number =\
    \ 1; i <= string.length; i++) {\n        answer.push(string.slice(0, i))\n   \
    \ }\n    return answer\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var output = [];\n    for (var i = 1; i <= string.length;\
    \ i++) {\n        output.push(string.substring(0, i));\n    }\n    return output;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return string.split(\"\").map((letter, index) => string.slice(0,\
    \ index + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var all_prefixes: string[] = [];\n    for (var i =\
    \ 0; i < string.length; i++) {\n        all_prefixes.push(string.substring(0,\
    \ i + 1));\n    }\n    return all_prefixes;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const num_prefixes = string.length;\n    const result\
    \ = new Array<string>(num_prefixes);\n    for (let i = 0; i < num_prefixes; i++)\
    \ {\n        result[i] = string.slice(0, i + 1);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let results: string[] = []\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        results.push(string.slice(0, i))\n\
    \    }\n    return results\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((e, i, a) => a.slice(0,\
    \ i + 1).join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const arr = []\n    for (let i = 0; i < string.length;\
    \ i++) {\n        arr.push(string.slice(0, i + 1))\n    }\n    return arr\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return [...Array(string.length + 1)].map((x, i) =>\
    \ string.slice(0, i));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpxcwx9s35.js:17:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpxcwx9s35.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const prefixes: string[] = []\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    prefixes.push(string.slice(0, i))\n  }\n  return\
    \ prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  //If the input string length is less than 2, the prefix\
    \ is the string itself\n  if (string.length < 2) {\n    return [string];\n  }\n\
    \  //Recursive case: add the first letter of the string to each prefix of the\
    \ remaining letters\n  else {\n    return [string[0]].concat(all_prefixes(string.slice(1)).map(x\
    \ => string[0] + x));\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ''\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmps56fl5ql.js:17:12)\n   \
    \ at Object.<anonymous> (/tmp/tmps56fl5ql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let output: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    output.push(string.slice(0, i + 1));\n  }\n  return output;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var i: number;\n    var results: string[] = [];\n \
    \   for (i = 1; i <= string.length; i++) {\n        results.push(string.substring(0,\
    \ i));\n    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = []\n    for (let n = 1; n\
    \ <= string.length; n++) {\n        prefixes.push(string.slice(0, n))\n    }\n\
    \    return prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return _.map(_.range(1, string.length + 1), function(i:\
    \ number): string {\n        return string.slice(0, i);\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk00_raxx.ts(5,12): error TS2304: Cannot find name
    ''_''.

    ../../../../../tmp/tmpk00_raxx.ts(5,18): error TS2304: Cannot find name ''_''.

    '
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let out: string[] = [];\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        out.push(string.substring(0, i));\n    }\n    return out;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let char = 0;\
    \ char < string.length; char++) {\n        prefixes.push(string.slice(0, char\
    \ + 1));\n    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    //Use reduce to get all prefixes\n    return string.split(\"\
    \").reduce((prefixes, char, idx) => {\n        //Concatenate prefixes with next\
    \ char to form new prefixes\n        return prefixes.concat(string.slice(0, idx\
    \ + 1));\n    }, []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    let current = \"\"\
    ;\n    for (let c of string) {\n        current += c;\n        prefixes.push(current);\n\
    \    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx4nrn2t2.ts(7,19): error TS2494: Using a string in
    a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let output: string[] = []\n  for (let i = 0; i < string.length;\
    \ i++) {\n    output.push(string.slice(0, i + 1))\n  }\n  return output\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((_, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    let start: number =\
    \ 0;\n    let end: number = 1;\n    for (; end <= string.length; end++) {\n  \
    \      result.push(string.slice(start, end));\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    //TODO: Implement Me\n    return [];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n\
    ]\n    at test (/tmp/tmpi422l3cq.js:12:12)\n    at Object.<anonymous> (/tmp/tmpi422l3cq.js:15:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    //Base cases:\n    if (string.length === 0) {\n   \
    \     return [];\n    }\n    if (string.length === 1) {\n        return [string];\n\
    \    }\n\n    //Recursive case:\n    return [\n        string,\n        ...all_prefixes(string.slice(0,\
    \ string.length - 1))\n    ];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'asdfgh',\n\
    \  'asdfg',\n  'asdf',\n  'asd',\n  'as',\n  'a'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmpapco0qfi.js:28:12)\n    at Object.<anonymous> (/tmp/tmpapco0qfi.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'asdfgh',\
    \ 'asdfg', 'asdf', 'asd', 'as', 'a' ],\n  expected: [ 'a', 'as', 'asd', 'asdf',\
    \ 'asdfg', 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let final_array: string[] = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        final_array.push(string.slice(0, i + 1));\n\
    \    }\n    return final_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n\
    \    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const res: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        res.push(string.slice(0, i));\n    }\n    return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var result: string[] = [];\n    for (var i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    //Using reduceRight because it goes from longest prefix\
    \ to shortest\n    return string.split(\"\").reduceRight((acc, next) => {\n  \
    \      const acc_copy = [...acc];\n        acc_copy.push(acc[acc.length - 1] +\
    \ next);\n        return acc_copy;\n    }, [string[0]]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9kqth9nr.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9kqth9nr.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var results: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        results.push(string.substring(0, i));\n  \
    \  }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = []\n    for (let i = 0; i <\
    \ string.length; i++) {\n        result.push(string.slice(0, i + 1))\n    }\n\
    \    return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const result: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const result: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let res: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    res.push(string.slice(0, i + 1));\n  }\n  return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefs: string[] = [];\n    for (let i = 0; i <\
    \ string.length; i++) {\n        prefs.push(string.slice(0, i + 1));\n    }\n\
    \    return prefs;\n}\n\nexport class TrieNode {\n    value: string;\n    children:\
    \ { [index: string]: TrieNode };\n    list: string[];\n\n    constructor(value:\
    \ string) {\n        this.value = value;\n        this.children = {};\n      \
    \  this.list = [];\n    }\n}\n\nexport class Trie {\n    root: TrieNode;\n\n \
    \   constructor() {\n        this.root = new TrieNode(\"\");\n    }\n\n    add(word:\
    \ string): void {\n        let node: TrieNode = this.root;\n        for (let pref\
    \ of all_prefixes(word)) {\n            if (!(pref in node.children)) {\n    \
    \            node.children[pref] = new TrieNode(pref);\n            }\n      \
    \      node = node.children[pref];\n            node.list.push(word);\n      \
    \  }\n    }\n\n    get(prefix: string): string[] {\n        let node: TrieNode\
    \ = this.root;\n        for (let char of prefix) {\n            if (!(char in\
    \ node.children)) {\n                return [];\n            }\n            node\
    \ = node.children[char];\n        }\n        return node.list;\n    }\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpechmt7nd.ts(44,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = []\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1))\n   \
    \ }\n    return prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let res: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        res.push(string.slice(0, i + 1));\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = []\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1))\n  }\n  return prefixes\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var arr: string[] = [];\n    for (var i = 1; i <= string.length;\
    \ i++) {\n        arr.push(string.substring(0, i));\n    }\n    return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return [\"a\", \"ab\", \"abc\"];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'a',\n  'ab',\n\
    \  'abc'\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpxopgr7xm.js:10:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxopgr7xm.js:14:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'a', 'ab',\
    \ 'abc' ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let output: string[] = []\n    for (let i = 0; i <\
    \ string.length; i++) {\n        output.push(string.slice(0, i + 1))\n    }\n\
    \    return output\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((_, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return range(string.length + 1).map(k => string.slice(0,\
    \ k));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp36ojmfb0.ts(5,12): error TS2552: Cannot find name
    ''range''. Did you mean ''Range''?

    '
  timestamp: 1660004028
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const prefixes: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return\
    \ prefixes;\n}\n\nexport { capitalize, iter, sum, contains, zip_with, index_of,\
    \ all_prefixes };\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmceusipy.ts(12,10): error TS2304: Cannot find name
    ''capitalize''.

    ../../../../../tmp/tmpmceusipy.ts(12,22): error TS2304: Cannot find name ''iter''.

    ../../../../../tmp/tmpmceusipy.ts(12,28): error TS2304: Cannot find name ''sum''.

    ../../../../../tmp/tmpmceusipy.ts(12,33): error TS2304: Cannot find name ''contains''.

    ../../../../../tmp/tmpmceusipy.ts(12,43): error TS2304: Cannot find name ''zip_with''.

    ../../../../../tmp/tmpmceusipy.ts(12,53): error TS2304: Cannot find name ''index_of''.

    '
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n\
    \    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const results: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        results.push(string.slice(0, i));\n    }\n\
    \    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 1; i <= string.length;\
    \ i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  var prefixes: string[] = [];\n  for (var i = 1; i <=\
    \ string.length; i++) {\n    prefixes.push(string.substring(0, i));\n  }\n  return\
    \ prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return range(1, string.length).map(function(n) {\n  \
    \  return string.slice(0, n);\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnnle24re.ts(5,10): error TS2552: Cannot find name
    ''range''. Did you mean ''Range''?

    '
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let l = 1; l\
    \ <= string.length; l++) {\n        prefixes.push(string.substring(0, l));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let all_prefixes = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        all_prefixes.push(string.slice(0, i + 1));\n    }\n    return\
    \ all_prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var rv: string[] = [];\n    for (var i = 1; i <= string.length;\
    \ i++) {\n        rv.push(string.substring(0, i));\n    }\n    return rv;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    let i: number = 0;\n\
    \    let length: number = string.length;\n    while (i < length) {\n        prefixes.push(string.substring(0,\
    \ i + 1));\n        i++;\n    }\n    return prefixes;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = []\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1))\n   \
    \ }\n    return prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const result: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let res: string[] = []\n    for (let len = 1; len <=\
    \ string.length; len++) {\n        res.push(string.slice(0, len))\n    }\n   \
    \ return res\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let ret: string[] = []\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        ret.push(string.substring(0, i))\n    }\n    return ret\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = []\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i))\n    }\n\
    \    return prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return all_substrings(string).filter(s => s.length\
    \ <= string.length)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzl7s7od6.ts(5,12): error TS2304: Cannot find name
    ''all_substrings''.

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let res: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    res.push(string.slice(0, i + 1));\n  }\n  return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = []\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1))\n   \
    \ }\n    return prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const array = [];\n  const length = string.length;\n\
    \  for (let i = 1; i <= length; i++) {\n    array.push(string.slice(0, i));\n\
    \  }\n  return array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = []\n    for (let i: number =\
    \ 1; i <= string.length; i++) {\n        result.push(string.slice(0, i))\n   \
    \ }\n    return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return d3.range(string.length).map(i => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzxpmn7k8.ts(5,12): error TS2304: Cannot find name
    ''d3''.

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    let current_prefix\
    \ = \"\";\n    for (let i = 0; i < string.length; i++) {\n        current_prefix\
    \ += string[i];\n        result.push(current_prefix);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let index =\
    \ 0; index < string.length; index++) {\n        prefixes.push(string.slice(0,\
    \ index + 1));\n    }\n    return prefixes;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = []\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        prefixes.push(string.slice(0, i))\n\
    \    }\n    return prefixes\n}\n\nexport default function parse(string: string,\
    \ start: number = 0): Expression | null {\n    let prefixes: string[] = all_prefixes(string.slice(start))\n\
    \    for (let prefix of prefixes) {\n        let end: number = start + prefix.length\n\
    \        if (end > string.length) {\n            break\n        }\n        if\
    \ (prefix in VALID_VALUES) {\n            let ast: Expression = parse(string,\
    \ end)\n            if (ast === null) {\n                return null\n       \
    \     }\n            return {\n                type: \"Application\",\n      \
    \          operator: {\n                    type: \"Value\",\n               \
    \     value: prefix\n                },\n                operand: ast\n      \
    \      }\n        }\n    }\n    return null\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwxcg5p2n.ts(12,67): error TS2304: Cannot find name
    ''Expression''.

    ../../../../../tmp/tmpwxcg5p2n.ts(19,23): error TS2304: Cannot find name ''VALID_VALUES''.

    ../../../../../tmp/tmpwxcg5p2n.ts(20,22): error TS2304: Cannot find name ''Expression''.

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var result: string[] = [];\n    for (var i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let ret: string[] = [];\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        ret.push(string.substring(0, i));\n    }\n    return ret;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  var result: string[] = [];\n  for (var i = 1; i <= string.length;\
    \ i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\nconst Pair = StructType({ first: \"string\", second:\
    \ \"string\" });\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp51jolzvx.ts(12,14): error TS2304: Cannot find name
    ''StructType''.

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var a: string[] = [];\n    for (var i = 1; i <= string.length;\
    \ i++) {\n        a.push(string.substring(0, i));\n    }\n    return a;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((_, index) => string.slice(0,\
    \ index + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    result.push(string.slice(0, i + 1));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return range(1, string.length + 1).map(str_range(string));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuzjpbzoa.ts(5,12): error TS2552: Cannot find name
    ''range''. Did you mean ''Range''?

    ../../../../../tmp/tmpuzjpbzoa.ts(5,44): error TS2304: Cannot find name ''str_range''.

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let output: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        output.push(string.slice(0, i));\n    }\n   \
    \ return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return Array.from(Array(string.length + 1), (_, i)\
    \ => string.slice(0, i));\n}\n\nexport function distance(str1: string, str2: string):\
    \ number {\n    if (str1 === str2) {\n        return 0;\n    }\n\n    const str1_length\
    \ = str1.length;\n    const str2_length = str2.length;\n\n    //Swap the two strings\
    \ if str1 is longer than str2\n    if (str1_length > str2_length) {\n        return\
    \ distance(str2, str1);\n    }\n\n    //Make sure str1 is the shorter string in\
    \ str1 and str2\n    if (str1_length === str2_length) {\n        const is_str1_shorter\
    \ = str1 < str2;\n        if (is_str1_shorter) {\n            return distance(str2,\
    \ str1);\n        }\n    }\n\n    const str1_prefixes = all_prefixes(str1);\n\
    \    const str2_prefixes = all_prefixes(str2);\n\n    //Do an overlap search on\
    \ str1_prefixes and str2_prefixes\n    const overlap_length = str1_prefixes.reduce((overlap_length:\
    \ number, item1: string) => {\n        const search_result = str2_prefixes.find((item2:\
    \ string) => item1 === item2);\n        if (search_result) {\n            return\
    \ Math.max(search_result.length, overlap_length);\n        }\n        return overlap_length;\n\
    \    }, 0);\n\n    //The total length of the strings minus the overlap length\
    \ is the distance\n    return str1_length + str2_length - 2 * overlap_length;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9mpkxv92.ts(5,18): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmp9mpkxv92.ts(34,45): error TS2339: Property ''find'' does
    not exist on type ''string[]''.

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return range(string.length).map(i => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpybk3jy00.ts(5,10): error TS2552: Cannot find name
    ''range''. Did you mean ''Range''?

    '
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const all_prefixes = []\n    for (let i = 0; i < string.length;\
    \ i++) {\n        all_prefixes.push(string.slice(0, i + 1))\n    }\n    return\
    \ all_prefixes\n}\n\nconst all_prefixes_test = all_prefixes(\"abc\")\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let output: string[] = []\n    for (let i = 0; i <\
    \ string.length; i++) {\n        output.push(string.slice(0, i + 1))\n    }\n\
    \    return output\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const result: string[] = [];\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let ret: string[] = [];\n  for (let i = 1; i <= string.length;\
    \ i++) {\n    ret.push(string.slice(0, i));\n  }\n  return ret;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = []\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1))\n   \
    \ }\n    return prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let index: number\
    \ = 1; index <= string.length; index++) {\n    prefixes.push(string.slice(0, index));\n\
    \  }\n  return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((character, index) =>\
    \ {\n        return string.slice(0, index + 1);\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i: number\
    \ = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n\
    \    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = []\n    for (let i = 0; i <\
    \ string.length; i++) {\n        result.push(string.slice(0, i + 1))\n    }\n\
    \    return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let result: string[] = [];\n  for (let i = 1; i <= string.length;\
    \ i++) {\n    result.push(string.slice(0, i));\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let list: string[] = [];\n    for (let x: number =\
    \ 1; x <= string.length; x++) {\n        list.push(string.substring(0, x));\n\
    \    }\n    return list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  var allPrefixes: string[] = [];\n  for (var i: number\
    \ = 1; i <= string.length; i++) {\n    allPrefixes.push(string.substring(0, i));\n\
    \  }\n  return allPrefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((letter, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004032
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    let i: number = 0;\n\
    \    while (i < string.length) {\n        prefixes.push(string.slice(0, i + 1));\n\
    \        i++;\n    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004032
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let index =\
    \ 0; index < string.length; index++) {\n        let sub = string.substring(0,\
    \ index + 1);\n        prefixes.push(sub);\n    }\n    return prefixes;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return string.split(\"\").map((_, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004032
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  var ret = [];\n  for (var i = 1; i <= string.length;\
    \ i++) {\n    ret.push(string.substring(0, i));\n  }\n  return ret;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\",\
    \ \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  const prefixes: string[] = []\n  for (let i = 1; i <=\
    \ string.length; i++) {\n    prefixes.push(string.slice(0, i))\n  }\n  return\
    \ prefixes\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return _.map(_.range(1, string.length + 1), (num: number)\
    \ => string.slice(0, num));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqzm_r4df.ts(5,10): error TS2304: Cannot find name
    ''_''.

    ../../../../../tmp/tmpqzm_r4df.ts(5,16): error TS2304: Cannot find name ''_''.

    '
  timestamp: 1660004032
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  //Create prefixes from\
    \ 0 to string length and push to array\n  for (let i = 0; i < string.length; i++)\
    \ {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string.split(\"\").map((_, i) => string.slice(0,\
    \ i + 1));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i: number\
    \ = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n\
    \    }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    let currentPrefix =\
    \ '';\n    for (let i = 0; i < string.length; i++) {\n        currentPrefix +=\
    \ string[i];\n        result.push(currentPrefix);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  var prefixes: string[] = [];\n  for (var i = 1; i <=\
    \ string.length; i++) {\n    prefixes.push(string.substring(0, i));\n  }\n  return\
    \ prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const result: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        result.push(string.substring(0, i));\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  var result: string[] = [];\n  for (var i = 1; i <= string.length;\
    \ i++) {\n    result.push(string.substring(0, i));\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004030
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let output: string[] = [];\n    for (let i = 1; i <=\
    \ string.length; i++) {\n        output.push(string.slice(0, i));\n    }\n   \
    \ return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004031
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  let prefixes: string[] = [];\n  for (let i = 0; i < string.length;\
    \ i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var result: string[] = [];\n    for (var i = 1; i <=\
    \ string.length; i++) {\n        result.push(string.substring(0, i));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = []\n    for (let i = 0; i <\
    \ string.length; i++) {\n        result.push(string.slice(0, i + 1))\n    }\n\
    \    return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const output: string[] = [];\n    for (let i = 1; i\
    \ <= string.length; i++) {\n        output.push(string.slice(0, i));\n    }\n\
    \    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return range(1, string.length).map(n => string.slice(0,\
    \ n));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6mq0xxxi.ts(5,10): error TS2552: Cannot find name
    ''range''. Did you mean ''Range''?

    '
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const results: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        results.push(string.slice(0, i));\n    }\n\
    \    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004028
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var result: string[] = [];\n    for (var x: number\
    \ = 1; x <= string.length; x++) {\n        result.push(string.substring(0, x));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return [...new Array(string.length)]\n    .map((v, i)\
    \ => i + 1)\n    .map(i => string.slice(0, i));\n}\n\nexport const createPrefixManager\
    \ = () => {\n  const memory = new Memory();\n  const prefixes: string[] = [];\n\
    \n  return {\n    addPrefix(prefix: string) {\n      const all_prefs = all_prefixes(prefix);\n\
    \      all_prefs.forEach(p => memory.add(p));\n      prefixes.push(...all_prefs);\n\
    \    },\n    getMatches(query: string): string[] {\n      return memory.getMatches(query);\n\
    \    },\n    autoCompleteWord(word: string): string[] {\n      return all_prefixes(word).reduce((acc,\
    \ cur) => {\n        const matches = memory.getMatches(cur);\n        if (matches.length\
    \ > 0) {\n          return acc.concat(matches);\n        }\n        return acc;\n\
    \      }, []);\n    },\n    autoCompletePrefix(prefix: string): string[] {\n \
    \     return memory.getMatches(prefix);\n    },\n    get length() {\n      return\
    \ prefixes.length;\n    },\n    getAllPrefixes() {\n      return prefixes;\n \
    \   },\n  };\n};\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqrtq1vn.ts(11,22): error TS2552: Cannot find name
    ''Memory''. Did you mean ''memory''?

    ../../../../../tmp/tmpwqrtq1vn.ts(35,9): error TS1056: Accessors are only available
    when targeting ECMAScript 5 and higher.

    '
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    for (let i: number\
    \ = 1; i <= string.length; i++) {\n        result.push(string.substring(0, i));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 1
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return string\n        .split(\"\")\n        .map((_,\
    \ i) => string.slice(0, i + 1))\n        .slice(1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'as',\n \
    \ 'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'a',\n  'as',\n  'asd',\n  'asdf',\n  'asdfg',\n  'asdfgh'\n]\n    at test\
    \ (/tmp/tmpo_te9zgv.js:14:12)\n    at Object.<anonymous> (/tmp/tmpo_te9zgv.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'as', 'asd',\
    \ 'asdf', 'asdfg', 'asdfgh' ],\n  expected: [ 'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let index\
    \ = 0; index < string.length; index++) {\n        prefixes.push(string.slice(0,\
    \ index + 1));\n    }\n    return prefixes;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let res: string[] = []\n    for (let i = 0; i < string.length;\
    \ i++) {\n        res.push(string.slice(0, i + 1))\n    }\n    return res\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    const prefixes: string[] = [];\n    for (let i = 1;\
    \ i <= string.length; i++) {\n        prefixes.push(string.slice(0, i));\n   \
    \ }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004025
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let prefixes: string[] = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n  \
    \  }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n  return d3.range(string.length + 1).map(function(length)\
    \ {\n    return string.slice(0, length);\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjf09rgqp.ts(5,10): error TS2304: Cannot find name
    ''d3''.

    '
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let res: string[] = []\n    for (let i = 0; i < string.length;\
    \ i++) {\n        res.push(string.slice(0, i + 1))\n    }\n    return res\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\"\
    , \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\"\
    , \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return map(string, prefix);\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0uu7333.ts(5,12): error TS2304: Cannot find name
    ''map''.

    ../../../../../tmp/tmpz0uu7333.ts(5,24): error TS2304: Cannot find name ''prefix''.

    '
  timestamp: 1660004033
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    var prefixes: string[] = [];\n    for (var i = 1; i\
    \ <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n \
    \   }\n    return prefixes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    let result: string[] = [];\n    let length = string.length;\n\
    \    for (let i = 1; i <= length; i++) {\n        result.push(string.substring(0,\
    \ i));\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = all_prefixes;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"\
    ),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
    WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004033
- exit_code: 2
  program: "//Return array of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string:\
    \ string): string[] {\n    return range(1, string.length).map(i => string.slice(0,\
    \ i));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\"\
    , \"WW\", \"WWW\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpspfsv6cc.ts(5,12): error TS2552: Cannot find name
    ''range''. Did you mean ''Range''?

    '
  timestamp: 1660004033
