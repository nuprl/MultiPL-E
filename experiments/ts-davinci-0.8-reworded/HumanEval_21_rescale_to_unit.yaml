name: HumanEval_21_rescale_to_unit
language: ts
prompt: "//Given array of numbers (of at least two elements), apply a linear transform\
  \ to that array,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
  \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
  \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0,\
  \ 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n", "    const min =\
    \ numbers.reduce((memo, num) => Math.min(memo, num), numbers[0]);\n    const max\
    \ = numbers.reduce((memo, num) => Math.max(memo, num), numbers[0]);\n    const\
    \ dist = max - min;\n    return numbers.map(x => (x - min) / dist);\n}\n", " \
    \ const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return\
    \ numbers.map(n => (n - min) / (max - min));\n}\n", "  const m = Math.min(...numbers);\n\
    \  const M = Math.max(...numbers);\n  const scale = M - m;\n  const offsets =\
    \ Array(numbers.length).fill(m);\n  return numbers.map((e, i) => (e - offsets[i])\
    \ / scale);\n}\n", "  return numbers.map(n => (n - Math.min(...numbers)) / (Math.max(...numbers)\
    \ - Math.min(...numbers)));\n}\n", "  let min = numbers[0];\n  let max = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n \
    \     min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n  }\n  const scaled_numbers = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    scaled_numbers.push((numbers[i] - min) / (max - min));\n  }\n  return\
    \ scaled_numbers;\n}\n", "    let max = Math.max(...numbers);\n    let min = Math.min(...numbers);\n\
    \    let factor = 1 / (max - min);\n    return numbers.map(item => (item - min)\
    \ * factor);\n}\n", "  let max = Number.MIN_VALUE;\n  let min = Number.MAX_VALUE;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    max = numbers[i] > max ? numbers[i]\
    \ : max;\n    min = numbers[i] < min ? numbers[i] : min;\n  }\n  return numbers.map(n\
    \ => (n - min) / (max - min));\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    return numbers.map(x => (x - min)\
    \ / (max - min));\n}\n", "    let max = Math.max(...numbers);\n    let min = Math.min(...numbers);\n\
    \    let result = numbers.map(n => (n - min) / (max - min));\n    return result;\n\
    }\n", "    const smallest_number = Math.min(...numbers);\n    const largest_number\
    \ = Math.max(...numbers);\n    const scaled_numbers = numbers.map(number => (number\
    \ - smallest_number) / (largest_number - smallest_number));\n    return scaled_numbers;\n\
    }\n", "    let max = Math.max(...numbers);\n    let min = Math.min(...numbers);\n\
    \    let diff = max - min;\n    return numbers.map(n => (n - min) / diff);\n}\n",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let\
    \ delta = max - min;\n    return numbers.map(n => (n - min) / delta);\n}\n", " \
    \   let min = numbers[0], max = numbers[0];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n   \
    \     }\n        if (numbers[i] > max) {\n            max = numbers[i];\n    \
    \    }\n    }\n    const diff = max - min;\n    return numbers.map(number => (number\
    \ - min) / diff);\n}\n", "  if (!numbers.length) {\n    return [];\n  }\n  const\
    \ min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(number\
    \ => (number - min) / (max - min));\n}\n", "  if (numbers.length < 2) {\n    throw\
    \ new Error('cannot rescale array of less than 2 numbers');\n  }\n  if (numbers.length\
    \ === 2) {\n    return [0, 1];\n  }\n  const min = min_number(numbers);\n  const\
    \ max = max_number(numbers);\n  const factor = 1 / (max - min);\n  const rescaled\
    \ = numbers.map(n => (n - min) * factor);\n  return rescaled;\n}\n", "  return\
    \ numbers.map(n => (n - Math.min(...numbers)) / (Math.max(...numbers) - Math.min(...numbers)));\n\
    }\n\nexport { rescale_to_unit };", "    if (numbers.length < 2) {\n        throw\
    \ new Error(\"Input array should have at least two elements\");\n    }\n    const\
    \ min_n = numbers.reduce((a, b) => Math.min(a, b));\n    const max_n = numbers.reduce((a,\
    \ b) => Math.max(a, b));\n    const diff = max_n - min_n;\n    return numbers.map(n\
    \ => (n - min_n) / diff);\n}\n", "  const min = Math.min(...numbers);\n  const\
    \ max = Math.max(...numbers);\n  return numbers.map(number => (number - min) /\
    \ (max - min));\n}\n", "  let min_number = Math.min(...numbers);\n  let max_number\
    \ = Math.max(...numbers);\n  return numbers.map(n => (n - min_number) / (max_number\
    \ - min_number));\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let result = numbers.map(x => (x - min) / (max - min));\n    return result;\n\
    }\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  return numbers.map(n => (n - min) / (max - min));\n}\n", "    if (numbers.length\
    \ < 2) {\n        throw new Error('Array must have at least two elements.');\n\
    \    }\n    const max = Math.max(...numbers);\n    const min = Math.min(...numbers);\n\
    \    const scale = max - min;\n    return numbers.map(number => (number - min)\
    \ / scale);\n}\n", "    let max = numbers[0];\n    let min = numbers[0];\n   \
    \ for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n \
    \           min = numbers[i];\n        }\n    }\n    if (max === min) {\n    \
    \    return numbers.map(function (x) {\n            return 1.0;\n        });\n\
    \    }\n    return numbers.map(function (x) {\n        return (x - min) / (max\
    \ - min);\n    });\n}\n", "  const [min, max] = [Math.min(...numbers), Math.max(...numbers)];\n\
    \  const diff = max - min;\n  return numbers.map(x => (x - min) / diff);\n}\n",
  "    return numbers.map(x => x/numbers[numbers.length-1]);\n}\n", "  return numbers.map(number\
    \ => {\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    return (number - min) / (max - min);\n  });\n}\n\nconst arr_to_rescale =\
    \ [1.0, 2.0, 3.0, 4.0, 5.0];", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const transformed = numbers.map(x => (x - min)\
    \ / (max - min));\n    return transformed;\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const scale = max - min;\n  return numbers.map(n\
    \ => (n - min) / scale);\n}\n", "    const min_val = Math.min(...numbers);\n \
    \   const max_val = Math.max(...numbers);\n    return numbers.map(function (i)\
    \ {\n        return (i - min_val) / (max_val - min_val);\n    });\n}\n", "  const\
    \ min_num = min(numbers);\n  const max_num = max(numbers);\n  const normalizer\
    \ = (num: number) => (num - min_num) / (max_num - min_num);\n  return numbers.map(normalizer);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    const scaled = numbers.map(x => (x - min) /\
    \ range);\n    return scaled;\n}\n", "    // find max and min of the numbers\n\
    \    const { min, max } = numbers.reduce(\n        (prev, curr) => ({\n      \
    \      min: curr < prev.min ? curr : prev.min,\n            max: curr > prev.max\
    \ ? curr : prev.max,\n        }),\n        { min: numbers[0], max: numbers[0]\
    \ }\n    );\n\n    return numbers.map(n => (n - min) / (max - min));\n}\n", " \
    \ return numbers.map(x => rescale_to_unit_number(x, min(numbers), max(numbers)));\n\
    }\n", "    let min = numbers[0];\n    let max = numbers[0];\n    for (let number\
    \ of numbers) {\n        if (number < min) {\n            min = number;\n    \
    \    }\n        if (number > max) {\n            max = number;\n        }\n  \
    \  }\n    let size = max - min;\n    return numbers.map(number => (number - min)\
    \ / size);\n}\n", "  let min = numbers[0];\n  let max = numbers[0];\n  let scaled:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n    \
    \  max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    scaled.push((numbers[i] - min) / (max - min));\n  }\n  return scaled;\n}\n",
  "  const min = numbers.reduce((a, b) => Math.min(a, b), Number.MAX_VALUE);\n  const\
    \ max = numbers.reduce((a, b) => Math.max(a, b), Number.MIN_VALUE);\n  return\
    \ numbers.map(x => (x - min) / (max - min));\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const rescaled = numbers.map(x =>\
    \ (x - min) / (max - min));\n    return rescaled;\n}\n", "  const [min, max] =\
    \ _.minmax(numbers);\n  const result = numbers.map(n => {\n    if (n === min)\
    \ {\n      return 0;\n    } else if (n === max) {\n      return 1;\n    } else\
    \ {\n      return (n - min) / (max - min);\n    }\n  });\n  return result;\n}\n\
    \nexport { rescale_to_unit };", "    return rescale(numbers, 0, 1);\n}\n", " \
    \   let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n   \
    \ return numbers.map(x => (x - min) / (max - min));\n}\n", "  let minValue = Math.min(...numbers);\n\
    \  let maxValue = Math.max(...numbers);\n  return numbers.map(i => (i - minValue)\
    \ / (maxValue - minValue));\n}\n", "    const min = Math.min(...numbers);\n  \
    \  const max = Math.max(...numbers);\n    const range = max - min;\n    return\
    \ numbers.map(n => (n - min) / range);\n}\n", "    let min_value = Math.min(...numbers);\n\
    \    let max_value = Math.max(...numbers);\n    let range = max_value - min_value;\n\
    \    return numbers.map(x => (x - min_value) / range);\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  return numbers.map(x => (x - min) / (max\
    \ - min));\n}\n\nexport default rescale_to_unit;", "    let result: number[] =\
    \ []\n    let min: number = Math.min(...numbers)\n    let max: number = Math.max(...numbers)\n\
    \    let range: number = max - min\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        result.push((numbers[i] - min) / range)\n    }\n    return result\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let scalar = max - min;\n    return numbers.map(x => (x - min) / scalar);\n\
    }\n", "  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n\
    \  const denom = max - min;\n  const scale = 1 / denom;\n  return numbers.map(n\
    \ => (n - min) * scale);\n}\n", "    let min = Math.min(...numbers);\n    let\
    \ max = Math.max(...numbers);\n    let denominator = max - min;\n    if (denominator\
    \ === 0)\n        denominator = 1;\n    let result = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        result.push((numbers[i] - min) / denominator);\n\
    \    }\n    return result;\n}\n", "    let max = Math.max(...numbers);\n    let\
    \ min = Math.min(...numbers);\n    let diff = max - min;\n    let res = numbers.map(n\
    \ => (n - min) / diff);\n    return res;\n}\n\nexport default rescale_to_unit;",
  "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    return\
    \ numbers.map(n => n > max ? 1 : n < min ? 0 : (n - min) / (max - min));\n}\n",
  "    return rescale(numbers, [0, 1]);\n}\n", "    if (numbers.length < 2) {\n  \
    \      throw \"`numbers` must have at least two elements\";\n    }\n    const\
    \ max_value = Math.max(...numbers);\n    const min_value = Math.min(...numbers);\n\
    \    return numbers.map(n => (n - min_value) / (max_value - min_value));\n}\n",
  "    const max = Math.max(...numbers);\n    const min = Math.min(...numbers);\n\
    \    const result = numbers.map(item => ((item - min) / (max - min)));\n    return\
    \ result;\n}\nconsole.log(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]));\nconsole.log(rescale_to_unit([10.0,\
    \ 2.0, 3.0, -1.0, 5.0]));\n", "    let min: number = Math.min(...numbers)\n  \
    \  let max: number = Math.max(...numbers)\n    let length: number = numbers.length\n\
    \    let unit_array: number[] = []\n    for (let i = 0; i < length; i++) {\n \
    \       unit_array.push((numbers[i] - min) / (max - min))\n    }\n    return unit_array\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    if (min === max) {\n        return numbers.map((number) => 0);\n    }\n \
    \   return numbers.map((number) => (number - min) / (max - min));\n}\n", "  let\
    \ min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let scale\
    \ = max - min;\n  let ans = [];\n  numbers.forEach(n => {\n    ans.push((n - min)\
    \ / scale);\n  });\n  return ans;\n}\n", "    let min_val = min(numbers);\n  \
    \  let max_val = max(numbers);\n    let scaled_values = numbers.map(value => (value\
    \ - min_val) / (max_val - min_val));\n    return scaled_values;\n}\n\nexport default\
    \ get_points_from_array;", "    const max = Math.max(...numbers);\n    const min\
    \ = Math.min(...numbers);\n    return numbers.map(number => (number - min) / (max\
    \ - min));\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    const rescaled = numbers.map(function (num) {\n        if\
    \ (range === 0) {\n            return 0;\n        }\n        return (num - min)\
    \ / range;\n    });\n    return rescaled;\n}\n", "    let max_number = numbers[0];\n\
    \    let min_number = numbers[0];\n    for (let i of numbers) {\n        if (i\
    \ > max_number) {\n            max_number = i;\n        }\n        if (i < min_number)\
    \ {\n            min_number = i;\n        }\n    }\n    let result = [];\n   \
    \ for (let i of numbers) {\n        result.push((i - min_number) / (max_number\
    \ - min_number));\n    }\n    return result;\n}\n\nexport {rescale_to_unit}",
  "  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  return\
    \ numbers.map(n => (n - min) / (max - min));\n}\n", "    const maximum = Math.max(...numbers);\n\
    \    const minimum = Math.min(...numbers);\n    const delta = maximum - minimum;\n\
    \    return numbers.map(n => (n - minimum) / delta);\n}\n", "    const min: number\
    \ = Math.min(...numbers);\n    const max: number = Math.max(...numbers);\n   \
    \ const scaled: number[] = [];\n    numbers.forEach((n: number) => {\n       \
    \ scaled.push((n - min) / (max - min));\n    });\n    return scaled;\n}\n", " \
    \   let min = min_of_array(numbers);\n    let max = max_of_array(numbers);\n \
    \   let range = max - min;\n    return numbers.map(number => (number - min) /\
    \ range);\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const scale = max - min;\n    return numbers.map(num => num / scale);\n}\n",
  "    const minimum = Math.min(...numbers);\n    const maximum = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - minimum) / (maximum - minimum));\n}\n", "  \
    \  return rescale(numbers, [0, 1]);\n}\n", "    const max = Math.max(...numbers);\n\
    \    const min = Math.min(...numbers);\n    return numbers.map(x => (x - min)\
    \ / (max - min));\n}\n", "    if (numbers.length < 2) throw 'Array is to short'\n\
    \    const min = min_by(numbers, Math.min)\n    const max = max_by(numbers, Math.max)\n\
    \    const d_ = max - min\n    return numbers.map(x => {\n        if (d_ === 0)\
    \ return 1\n        return (x - min) / d_\n    })\n}\n", "    let min = min_array(numbers);\n\
    \    let max = max_array(numbers);\n    return numbers.map(x => (x - min) / (max\
    \ - min));\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const scale = max - min;\n  return numbers.map(n => (n - min) / scale);\n}\n",
  "    if (!numbers || numbers.length < 2) {\n        throw new Error('numbers array\
    \ must contain at least two elements')\n    }\n    const min = Math.min(...numbers)\n\
    \    const max = Math.max(...numbers)\n    return numbers.map(x => (x - min) /\
    \ (max - min))\n}\n", "    const min: number = Math.min(...numbers);\n    const\
    \ max: number = Math.max(...numbers);\n    const new_numbers: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        new_numbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return new_numbers;\n}\n", "  let max: number\
    \ = Math.max(...numbers);\n  let min: number = Math.min(...numbers);\n  return\
    \ numbers.map(number => (number - min) / (max - min));\n}\n", "    let max = numbers[0];\n\
    \    let min = numbers[0];\n    for (let number of numbers) {\n        if (number\
    \ > max) {\n            max = number;\n        }\n        if (number < min) {\n\
    \            min = number;\n        }\n    }\n    return numbers.map(n => (n -\
    \ min) / (max - min));\n}\n", "    let minimum = numbers[0];\n    let maximum\
    \ = numbers[0];\n    numbers.forEach(number => {\n        if (number < minimum)\
    \ {\n            minimum = number;\n        }\n        if (number > maximum) {\n\
    \            maximum = number;\n        }\n    });\n    const delta = maximum\
    \ - minimum;\n    return numbers.map(number => (number - minimum) / delta);\n\
    }\n", "    let offset = numbers[0];\n    let scale = numbers[0];\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        offset = Math.min(offset, numbers[i]);\n\
    \        scale = Math.max(scale, numbers[i]);\n    }\n    const result = new Array(numbers.length);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        result[i] = (numbers[i]\
    \ - offset) / (scale - offset);\n    }\n    return result;\n}\n\n", "  let min\
    \ = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if\
    \ (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const width = max\
    \ - min;\n  const scaled = numbers.map(n => (n - min) / width);\n  return scaled;\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const result = numbers.map(n => (n - min) / (max - min));\n    return result;\n\
    }\n", "  if (numbers.length === 0) return [];\n  const min = min_of_array(numbers);\n\
    \  const max = max_of_array(numbers);\n  const result = numbers.map(x => (x -\
    \ min) / (max - min));\n  return result;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    return numbers.map(function\
    \ (num) {\n        return (num - min) / range;\n    });\n}\n", "    const max\
    \ = Math.max(...numbers);\n    const min = Math.min(...numbers);\n    return numbers.map(i\
    \ => (i - min) / (max - min));\n}\n", "  let lowest = Math.min(...numbers);\n\
    \  let highest = Math.max(...numbers);\n  return numbers.map(val => ((val - lowest)\
    \ / (highest - lowest)));\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    const range = max - min;\n    return numbers.map(n\
    \ => (n - min) / range);\n}\n", "  if (numbers.length <= 1) {\n    return numbers;\n\
    \  }\n  let min_val = numbers[0];\n  let max_val = numbers[0];\n  for (let i =\
    \ 1; i < numbers.length; i++) {\n    min_val = Math.min(min_val, numbers[i]);\n\
    \    max_val = Math.max(max_val, numbers[i]);\n  }\n  const result = numbers.map(function\
    \ (val) {\n    return (val - min_val) / (max_val - min_val);\n  });\n  return\
    \ result;\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(n => (n - min) / (max - min));\n}\n", "    if (!numbers.length)\
    \ {\n        return []\n    }\n    const mini = Math.min(...numbers)\n    const\
    \ maxi = Math.max(...numbers)\n    return numbers.map(n => (n - mini) / (maxi\
    \ - mini))\n}\n", "    //Math.min.apply(null, numbers)\n    var min = Math.min(...numbers);\n\
    \    var max = Math.max(...numbers);\n    var range = max - min;\n    var transformed\
    \ = numbers.map(function (x) {\n        return (x - min) / range;\n    });\n \
    \   return transformed;\n}\n", "    let normalized_numbers: number[] = [];\n \
    \   let max_number = Math.max(...numbers);\n    let min_number = Math.min(...numbers);\n\
    \    let difference = max_number - min_number;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        normalized_numbers.push((numbers[i] - min_number) / difference);\n\
    \    }\n    return normalized_numbers;\n}\n", "    const min_number = Math.min(...numbers);\n\
    \    const max_number = Math.max(...numbers);\n    const range = max_number -\
    \ min_number;\n    return numbers.map(n => ((n - min_number) / range));\n}\n",
  "    const min_number = _.min(numbers);\n    const max_number = _.max(numbers);\n\
    \    const result = numbers.map(number => (number - min_number) / (max_number\
    \ - min_number));\n    return result;\n}\n", "    const [min, max] = [Math.min(...numbers),\
    \ Math.max(...numbers)];\n    return numbers.map(x => (x - min) / (max - min));\n\
    }\n", "    if (numbers.length < 2) {\n        throw new Error('Array length needs\
    \ to be at least 2, was ' + numbers.length);\n    }\n    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let range = max - min;\n    if (range\
    \ === 0) {\n        throw new Error('Cannot rescale to unit: input array only\
    \ contains a single value: ' + min);\n    }\n    return numbers.map(n => (n -\
    \ min) / range);\n}\n\nexport function color(name: string): number[] {\n    if\
    \ (name in COLORS) {\n        return COLORS[name];\n    }\n    throw new Error('Color\
    \ not found for name ' + name);\n}\n\nexport function css_rgba(color: number[]):\
    \ string {\n    if (color.length !== 4) {\n        throw new Error('css_rgba called\
    \ with incorrect number of channels, must be 4');\n    }\n    return 'rgba(' +\
    \ color.map(c => 255 * c).join(',') + ')';\n}\n\nexport function css_rgb(color:\
    \ number[]): string {\n    if (color.length !== 3) {\n        throw new Error('css_rgb\
    \ called with incorrect number of channels, must be 3');\n    }\n    return 'rgb('\
    \ + color.map(c => 255 * c).join(',') + ')';\n}\n\nexport function lerp(a: number,\
    \ b: number, t: number): number {\n    return a + t * (b - a);\n}\n\nexport function\
    \ lerp_color(a: number[], b: number[], t: number): number[] {\n    if (a.length\
    \ !== b.length) {\n        throw new Error('Trying to lerp between colors with\
    \ unequal number of channels');\n    }\n    return a.map((c, i) => lerp(c, b[i],\
    \ t));\n}\n\nexport function to_hex(color: number[]): string {\n    if (color.length\
    \ !== 3) {\n        throw new Error('to_hex called with incorrect number of channels,\
    \ must be", "    let max = numbers[0];\n    let min = numbers[0];\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        if (numbers[i] < min) {\n        \
    \    min = numbers[i];\n        }\n    }\n    return numbers.map(\n        function\
    \ (number) {\n            return (number - min) / (max - min);\n        }\n  \
    \  );\n}\n", "    const max = Math.max(...numbers);\n    const min = Math.min(...numbers);\n\
    \    const x = min;\n    const y = max;\n    let u = 1.0;\n    let v = 0.0;\n\
    \    let l = (y - x) / (u - v);\n    let k = (x - v * y + u * x) / (x - y);\n\
    \    return numbers.map(x => l * x + k);\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const delta = max - min;\n  return numbers.map(num\
    \ => (num - min) / delta);\n}\n", "  const t = math.transpose(numbers);\n  const\
    \ min = math.min(t);\n  const max = math.max(t);\n  const d = math.range(0, numbers.length);\n\
    \  d.map((i) => (d[i] = (numbers[i] - min) / (max - min)));\n  return d;\n}\n\n\
    export function rescale_to_unit_vector(v: Vector): Vector {\n  return rescale_to_unit(v.values)\
    \ as Vector;\n}\n\nexport function rescale_to_unit_matrix(m: Matrix): Matrix {\n\
    \  return rescale_to_unit(m.values) as Matrix;\n}\n", "    const max = Math.max(...numbers);\n\
    \    const min = Math.min(...numbers);\n    const range = max - min;\n    const\
    \ unit = numbers.map(n => (n - min) / range);\n    return unit;\n}\n", "    let\
    \ nums_copy = numbers.slice();\n    nums_copy.sort((a, b) => a - b);\n\n    const\
    \ min_value = nums_copy[0];\n    const max_value = nums_copy[nums_copy.length\
    \ - 1];\n\n    let diff = max_value - min_value;\n\n    return numbers.map(num\
    \ => (num - min_value) / diff);\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const difference = max - min;\n  if (difference\
    \ === 0) {\n    return numbers.map(() => 0);\n  }\n  return numbers.map(n => (n\
    \ - min) / difference);\n}\n", "    const minimum: number = Math.min(...numbers);\n\
    \    const maximum: number = Math.max(...numbers);\n    const diff: number = maximum\
    \ - minimum;\n    const scaled: number[] = numbers.map((number: number) => number\
    \ / diff);\n    return scaled;\n}\n", "  let min = Number.MAX_VALUE;\n  let max\
    \ = Number.MIN_VALUE;\n  for (let n of numbers) {\n    if (n < min) {\n      min\
    \ = n;\n    }\n    if (n > max) {\n      max = n;\n    }\n  }\n  let div = max\
    \ - min;\n  return numbers.map(n => (n - min) / div);\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const range\
    \ = max - min;\n    return numbers.map(x => (x - min) / range);\n}\n", "    let\
    \ min = Number.MAX_VALUE;\n    let max = Number.MIN_VALUE;\n    for (let n of\
    \ numbers) {\n        if (n < min) {\n            min = n;\n        }\n      \
    \  if (n > max) {\n            max = n;\n        }\n    }\n    if (min == max)\
    \ {\n        return numbers.map(i => 0);\n    }\n    const factor = 1 / (max -\
    \ min);\n    return numbers.map(i => (i - min) * factor);\n}\n", "    let max\
    \ = Math.max(...numbers);\n    let min = Math.min(...numbers);\n    let result\
    \ = [];\n    numbers.forEach(function (number: number) {\n        result.push((number\
    \ - min) / (max - min));\n    });\n    return result;\n}\n", "  if (numbers.length\
    \ < 2) {\n    return numbers;\n  }\n  const min = Math.min(...numbers);\n  const\
    \ max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(n\
    \ => (n - min) / range);\n}\n", "    let max = Math.max(...numbers);\n    let\
    \ min = Math.min(...numbers);\n    let range = max - min;\n    return numbers.map(function\
    \ (num) {\n        return (num - min) / range;\n    });\n}\n", "    let max =\
    \ Math.max(...numbers);\n    let min = Math.min(...numbers);\n    return numbers.map(x\
    \ => (x - min) / (max - min));\n}\n", "    if (numbers.length < 2) {\n       \
    \ throw new Error(\"Sequence too short\");\n    }\n    let min_value = numbers[0];\n\
    \    let max_value = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] < min_value) {\n            min_value = numbers[i];\n\
    \        }\n        if (numbers[i] > max_value) {\n            max_value = numbers[i];\n\
    \        }\n    }\n    if (min_value == max_value) {\n        return numbers.map(()\
    \ => 0.5);\n    }\n    const scaled_min = 0;\n    const scaled_max = 1;\n    const\
    \ scale = (scaled_max - scaled_min) / (max_value - min_value);\n    const scaled_numbers\
    \ = numbers.map(n => scale * (n - min_value) + scaled_min);\n    return scaled_numbers;\n\
    }\n", "  return numbers.map(number => normalize(number, numbers));\n}\n", "  let\
    \ sorted_numbers = numbers.sort();\n  let zero = sorted_numbers[0];\n  let one\
    \ = sorted_numbers[sorted_numbers.length - 1];\n  let step = 1 / (one - zero);\n\
    \  return numbers.map(n => (n - zero) * step);\n}\n\nexport {normalise_to_unit,\
    \ rescale_to_unit};", "    if (!numbers || numbers.length < 2) {\n        throw\
    \ Error(\"There must be at least two elements\");\n    }\n    const result = []\
    \ as number[];\n    let max = numbers[0];\n    let min = numbers[0];\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        const el = numbers[i];\n   \
    \     if (el > max) {\n            max = el;\n        }\n        if (el < min)\
    \ {\n            min = el;\n        }\n    }\n    const diff = max - min;\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        const el = numbers[i];\n\
    \        result.push((el - min) / diff);\n    }\n    return result;\n}\n", " \
    \   let min = Number.MAX_VALUE;\n    let max = Number.MIN_VALUE;\n    for (let\
    \ number of numbers) {\n        if (number < min) {\n            min = number;\n\
    \        }\n        if (number > max) {\n            max = number;\n        }\n\
    \    }\n    let diff = max - min;\n    return numbers.map(function (number) {\n\
    \        return (number - min) / diff;\n    });\n}\n", "    if (numbers.length\
    \ < 2) {\n        throw new Error('array length is smaller than 2');\n    }\n\
    \    const max = Math.max(...numbers);\n    const min = Math.min(...numbers);\n\
    \    const scale = 1 / (max - min);\n    return numbers.map(n => (n - min) * scale);\n\
    }\n", "    let min = Math.min(...numbers)\n    let max = Math.max(...numbers)\n\
    \    return numbers.map(function (n) {\n        return (n - min) / (max - min)\n\
    \    })\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  const normalized_numbers = numbers.map(num => (num - min) / (max - min));\n\
    \  return normalized_numbers;\n}\n", "  const min = Math.min(...numbers);\n  const\
    \ max = Math.max(...numbers);\n  return numbers.map(x => (x - min) / (max - min));\n\
    }\n", "    return numbers.map(x => {\n        const min_value = Math.min(...numbers);\n\
    \        const max_value = Math.max(...numbers);\n        return (x - min_value)\
    \ / (max_value - min_value);\n    });\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const result = numbers.map(x => (x\
    \ - min) / (max - min));\n    return result;\n}\n", "    return [];\n}\n", " \
    \   const min_value = Math.min(...numbers);\n    const max_value = Math.max(...numbers);\n\
    \    return numbers.map(value => (value - min_value) / (max_value - min_value));\n\
    }\n", "    // TODO implement as desired\n    return numbers;\n}\n", "  // find\
    \ min, max\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  // calculate the scale\n  const scale = 1 / (max - min);\n  // return normalized\
    \ array\n  return numbers.map(n => (n - min) * scale);\n}\n", "    let min = numbers[0];\n\
    \    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n \
    \       if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max)\
    \ max = numbers[i];\n    }\n    let scale = 1 / (max - min);\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        numbers[i] = (numbers[i] - min) * scale;\n\
    \    }\n    return numbers;\n}\n", "  let scaling_factor = 1.0 / numbers.reduce((a,\
    \ b) => Math.max(a, b));\n  return numbers.map(x => x * scaling_factor);\n}\n\n\
    describe(\"Mandelbrot Visualization\", () => {\n  it(\"should compute maximum\
    \ iterations for the given complex\", () => {\n    let n = compute_max_iterations({\
    \ real: -1.2901, imaginary: 0.0344 });\n    expect(n).toBe(35);\n  });\n\n  it(\"\
    should compute whether a complex number is in the mandelbrot set\", () => {\n\
    \    let in_set = is_in_mandelbrot_set({ real: -1.2901, imaginary: 0.0344 });\n\
    \    expect(in_set).toBe(true);\n  });\n\n  it(\"should compute values for given\
    \ complex\", () => {\n    let complex_values = compute_mandelbrot_set(\n     \
    \ { real: -1.2901, imaginary: 0.0344 },\n      150\n    );\n    expect(complex_values).toStrictEqual([\n\
    \      0,\n      1,\n      4,\n      9,\n      16,\n      25,\n      36,\n   \
    \   49,\n      64,\n      81,\n      100,\n      121,\n      144,\n      169,\n\
    \      196,\n      225,\n      256,\n      289,\n      324,\n      361,\n    \
    \  400,\n      441,\n      484,\n      529,\n      576,\n      625,\n      676,\n\
    \      729,\n      784,\n      841,\n      900,\n      961,\n      1024,\n   \
    \   1089,\n      1156,\n      1225,\n      1296,\n      1369,\n      1444,\n \
    \     1521,\n      1600,\n      1681,\n      1764,\n      1849,\n      1936,\n\
    \      2025,\n      2116,\n      2209,\n      2304,\n      2401,\n      2500,\n\
    \      2601,\n      2704,\n      2809,\n      2916,\n      3025,\n      3136",
  "  const min: number = Math.min(...numbers);\n  const max: number = Math.max(...numbers);\n\
    \  const denom: number = max - min;\n  const result: number[] = numbers.map((num:\
    \ number) => (num - min) / denom);\n  return result;\n}\n", "    return numbers.map(n\
    \ => ((n - min(numbers)) / (max(numbers) - min(numbers))));\n}\n", "    let min_num\
    \ = Math.min(...numbers);\n    let max_num = Math.max(...numbers);\n    let transform\
    \ = (n: number) => (n - min_num) / (max_num - min_num);\n    return numbers.map(transform);\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let normalized = numbers.map(x => (x\
    \ - min) / (max - min));\n    return normalized;\n}\n", "  if (numbers.length\
    \ === 0) {\n    return numbers;\n  }\n  const min = Math.min(...numbers);\n  const\
    \ max = Math.max(...numbers);\n  const scale = max - min;\n  return numbers.map(n\
    \ => (n - min) / scale);\n}\n", "  const max = Math.max(...numbers);\n  const\
    \ min = Math.min(...numbers);\n  const range = max - min;\n  return numbers.map(x\
    \ => (x - min) / range);\n}\n", "    if (numbers.length < 2) {\n        throw\
    \ new Error(\"The array must contain at least two elements\");\n    }\n    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    if (min\
    \ == max) {\n        throw new Error(\"The array cannot have all the same element,\
    \ as this will result in a 0-length denominator\");\n    }\n    return numbers.map(x\
    \ => (x - min) / (max - min));\n}\n", "    // get min and max\n    let min: number\
    \ = 0, max: number = 0;\n    for (let number of numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        }\n        if (number > max) {\n\
    \            max = number;\n        }\n    }\n    // apply transform\n    let\
    \ new_numbers: number[] = [];\n    for (let number of numbers) {\n        new_numbers.push((number\
    \ - min) / (max - min));\n    }\n    return new_numbers;\n}\n", "    const minimum\
    \ = _.min(numbers);\n    const maximum = _.max(numbers);\n    return numbers.map(n\
    \ => (n - minimum) / (maximum - minimum));\n}\n", "  // Find max and min\n  let\
    \ max = numbers[0];\n  let min = numbers[0];\n  for (let number of numbers) {\n\
    \    if (number > max) {\n      max = number;\n    }\n    if (number < min) {\n\
    \      min = number;\n    }\n  }\n  const range = max - min;\n  // Perform rescaling\n\
    \  return numbers.map(value => (value - min) / range);\n}\n", "    const min =\
    \ Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const delta\
    \ = max - min;\n    if (delta === 0) {\n        return numbers.map(() => 0);\n\
    \    } else {\n        return numbers.map(n => (n - min) / delta);\n    }\n}\n\
    \n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let length = max - min;\n    let scaled = numbers.map(x => ((x - min) / length))\n\
    \    return scaled;\n}\n\nlet numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\nlet result\
    \ = rescale_to_unit(numbers);\nconsole.log(result);", "    let min = numbers[0];\n\
    \    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n \
    \       if (numbers[i] < min) {\n            min = numbers[i];\n        }\n  \
    \      if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n\
    }\n", "  const max_val = Math.max(...numbers);\n  const min_val = Math.min(...numbers);\n\
    \  const distance = max_val - min_val;\n  const scaled = numbers.map(\n    (x)\
    \ => (x - min_val) / distance\n  );\n  return scaled;\n}\n", "  const offset =\
    \ Math.min(...numbers);\n  const range = Math.max(...numbers) - offset;\n  return\
    \ numbers.map(x => (x - offset) / range);\n}\n", "  const min_val = numbers.reduce((a,\
    \ b) => Math.min(a, b));\n  const max_val = numbers.reduce((a, b) => Math.max(a,\
    \ b));\n  const scales = numbers.map(n => (n - min_val) / (max_val - min_val));\n\
    \  return scales;\n}\n", "    const min = Math.min(...numbers);\n    const max\
    \ = Math.max(...numbers);\n    return numbers.map(n => (n - min) / (max - min));\n\
    }\n", "    return rescale(numbers, 0, 1);\n}\n", "    return rescale(numbers,\
    \ 0, 1);\n}\n", "  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n\
    \  return numbers.map(\n    (num) => ((num - min) / (max - min))\n  );\n}\n\n",
  "    const min: number = Math.min(...numbers);\n    const max: number = Math.max(...numbers);\n\
    \    const num_scale: number = max - min;\n    const new_numbers: number[] = numbers.map((num:\
    \ number) => (num - min) / num_scale);\n    return new_numbers;\n}\n", "  const\
    \ min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map(function(number)\
    \ {\n    return (number - min) / (max - min);\n  });\n}\n", "    let sorted_numbers\
    \ = numbers.sort((a, b) => a - b);\n    let min = sorted_numbers[0];\n    let\
    \ max = sorted_numbers[sorted_numbers.length - 1];\n    let scaled_numbers = numbers.map(num\
    \ => (num - min) / (max - min));\n    return scaled_numbers;\n}\n", "  let min\
    \ = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let numbers_shifted\
    \ = numbers.map(n => n - min);\n  let numbers_scaled = numbers_shifted.map(n =>\
    \ n / (max - min));\n  return numbers_scaled;\n}\n", "  const min = Math.min(...numbers);\n\
    \  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map(n\
    \ => (n - min) / range);\n}\n", "  const max = Math.max(...numbers);\n  const\
    \ min = Math.min(...numbers);\n  return numbers.map(x => (x - min) / (max - min));\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const xs = numbers.map(x => (x - min) / (max - min));\n    return xs;\n}\n",
  "    if (numbers.length < 2) {\n        throw new Error(\"Cannot rescale with less\
    \ than 2 numbers\");\n    }\n    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    if (min == max) {\n        return numbers.map(value\
    \ => 1);\n    }\n    return numbers.map(value => (value - min) / (max - min));\n\
    }\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const d = max - min;\n    return numbers.map(x => (x - min) / d);\n}\n",
  "  let transformed: number[] = [];\n  let max = numbers[0];\n  let min = numbers[0];\n\
    \  for (let i of numbers) {\n    if (i > max) {\n      max = i;\n    }\n    if\
    \ (i < min) {\n      min = i;\n    }\n  }\n  for (let i of numbers) {\n    transformed.push((i\
    \ - min) / (max - min));\n  }\n  return transformed;\n}\n", "    const min_max\
    \ = min_max_of_numbers(numbers);\n    const min = min_max[0];\n    const max =\
    \ min_max[1];\n    return numbers.map(number => rescale_number(number, min, max));\n\
    }\n", "  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n\
    \  if (min == max) {\n    return numbers.map(x => 1);\n  }\n  return numbers.map(x\
    \ => (x - min) / (max - min));\n}\n", "    let min = numbers[0], max = numbers[0];\n\
    \    for (let num of numbers) {\n        if (num < min) {\n            min = num;\n\
    \        }\n        if (num > max) {\n            max = num;\n        }\n    }\n\
    \    let result = [];\n    for (let num of numbers) {\n        result.push((num\
    \ - min) / (max - min));\n    }\n    return result;\n}\n\nexport { compute_alpha,\
    \ compute_delta, rescale_to_unit }", "    //Write your code here\n    let numbers2\
    \ = [...numbers];\n    numbers2.sort((a, b) => a - b);\n    let min = numbers2[0];\n\
    \    let max = numbers2[numbers2.length - 1];\n    if (max === min) {\n      \
    \  return numbers2.map(x => 0);\n    }\n    return numbers.map(x => (x - min)\
    \ / (max - min));\n}\n", "    if (!Array.isArray(numbers) || numbers.length <\
    \ 2) {\n        throw new Error('Input should be an array of 2 or more numbers');\n\
    \    }\n    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    const range = max - min;\n    return numbers.map(n => (n - min) / range);\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let diff = max - min;\n    return numbers.map(x => (x - min) / diff);\n}\n",
  "    const max_number = Math.max(...numbers);\n    const min_number = Math.min(...numbers);\n\
    \    const unit_scale = 1 / (max_number - min_number);\n    return numbers.map(num\
    \ => (num - min_number) * unit_scale);\n}\n", "    let max = Math.max(...numbers);\n\
    \    let min = Math.min(...numbers);\n    let result = numbers.map(function (number)\
    \ {\n        return (number - min) / (max - min);\n    });\n    return result;\n\
    }\n", "    return numbers.map(n => (n - Math.min(...numbers)) / (Math.max(...numbers)\
    \ - Math.min(...numbers)));\n}\n", "    const min_n: number = Math.min(...numbers);\n\
    \    const max_n: number = Math.max(...numbers);\n    return numbers.map(n =>\
    \ (n - min_n) / (max_n - min_n));\n}\n", "  if (numbers.length < 2) {\n    throw\
    \ Error('Cannot rescale list of numbers shorter than 2');\n  }\n  const min =\
    \ numbers.reduce((acc, x) => Math.min(acc, x), numbers[0]);\n  const max = numbers.reduce((acc,\
    \ x) => Math.max(acc, x), numbers[0]);\n  const delta = max - min;\n  return numbers.map(x\
    \ => (x - min) / delta);\n}\n", "    if (numbers.length < 2) {\n        throw\
    \ new Error(\"At least two numbers required\");\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const range = max - min;\n    return\
    \ numbers.map(value => (value - min) / range);\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    return numbers.map(v => (v - min) /\
    \ (max - min));\n}\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    return numbers.map(e => (e - min) / (max - min));\n}\n", "    let max = Math.max(...numbers);\n\
    \    let min = Math.min(...numbers);\n    let result = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        result.push((numbers[i] - min) / (max -\
    \ min));\n    }\n    return result;\n}\n", "    let min = Math.min(...numbers);\n\
    \    let max = Math.max(...numbers);\n    let delta = max - min;\n    if (delta\
    \ !== 0) {\n        return numbers.map(n => (n - min) / delta);\n    } else {\n\
    \        return numbers.map(n => 0);\n    }\n}\n", "    let min = numbers[0];\n\
    \    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n \
    \       if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max)\
    \ max = numbers[i];\n    }\n    let span = max - min;\n    let numbers_rescaled\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        numbers_rescaled.push((numbers[i]\
    \ - min) / span);\n    }\n    return numbers_rescaled;\n}\n", "    if (!numbers\
    \ || numbers.length < 2) {\n        throw new Error('Input must have at least\
    \ two elements');\n    }\n    let result: number[] = [];\n    const max = Math.max(...numbers);\n\
    \    const min = Math.min(...numbers);\n    for (let num of numbers) {\n     \
    \   result.push((num - min) / (max - min));\n    }\n    return result;\n}\n",
  "  let max_val = Math.max(...numbers);\n  let min_val = Math.min(...numbers);\n\
    \  return numbers.map(x => (x - min_val) / (max_val - min_val));\n}\n", "  let\
    \ lowest = Math.min(...numbers);\n  let highest = Math.max(...numbers);\n  return\
    \ numbers.map(number => (number - lowest) / (highest - lowest));\n}\n", "    const\
    \ min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n    const\
    \ result = [];\n    for (let number of numbers) {\n        result.push((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\n", "    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const diff = max - min;\n    return\
    \ numbers.map(number => (number - min) / diff);\n}\n\nconst image = $('.image-container').toArray()[0];\n\
    image.remove();\n", "    let min_number = Math.min(...numbers);\n    let max_number\
    \ = Math.max(...numbers);\n    if (min_number === max_number) {\n        return\
    \ [1];\n    }\n    let scaled = numbers.map(number => (number - min_number) /\
    \ (max_number - min_number));\n    return scaled;\n}\n\n", "    const max = Math.max(...numbers);\n\
    \    const min = Math.min(...numbers);\n    return numbers.map(n => (n - min)\
    \ / (max - min));\n}\n", "    if (numbers.length < 2) {\n        throw new Error(\"\
    cannot rescale a single number\");\n    }\n    const min = Math.min(...numbers);\n\
    \    const max = Math.max(...numbers);\n    const scale = max - min;\n    return\
    \ numbers.map(n => (n - min) / scale);\n}\n", "    if (numbers.length < 2) {\n\
    \        throw new Error('`numbers` array must have at least two elements');\n\
    \    }\n    var max_num = max(numbers);\n    var min_num = min(numbers);\n   \
    \ var subtrahend = min_num;\n    var denominator = max_num - min_num;\n    var\
    \ result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        var numerator\
    \ = numbers[i] - subtrahend;\n        result.push(numerator / denominator);\n\
    \    }\n    return result;\n}\n\nexport { rescale_to_unit };", "    if (numbers.length\
    \ < 2) {\n        throw new Error(\"Cannot rescale an array of less than two numbers\"\
    );\n    }\n    let sorted = numbers.sort((a, b) => a - b);\n    let min = sorted[0];\n\
    \    let max = sorted[sorted.length - 1];\n    return numbers.map(value => (value\
    \ - min) / (max - min));\n}\n", "    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    if (min === max) {\n        return numbers.map(x\
    \ => x > 0 ? 1 : -1);\n    }\n    return numbers.map(x => (x - min) / (max - min));\n\
    }\n", "    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let step = 1 / (max - min);\n    let result = [];\n    for (let number of\
    \ numbers) {\n        result.push((number - min) * step);\n    }\n    return result;\n\
    }\n\nexport {rescale_to_unit};", "  const min = numbers.reduce((a, b) => Math.min(a,\
    \ b));\n  const max = numbers.reduce((a, b) => Math.max(a, b));\n  const diff\
    \ = max - min;\n  return numbers.map(n => (n - min) / diff);\n}\n", "  const min:\
    \ number = Math.min(...numbers);\n  const max: number = Math.max(...numbers);\n\
    \  return numbers.map((val: number) => (val - min) / (max - min));\n}\n", "  \
    \  // let min = numbers[0];\n    // let max = numbers[0];\n    // for (let i =\
    \ 1; i < numbers.length; i++) {\n    //     if (numbers[i] < min) {\n    //  \
    \       min = numbers[i];\n    //     }\n    //     if (numbers[i] > max) {\n\
    \    //         max = numbers[i];\n    //     }\n    // }\n    // return numbers.map(n\
    \ => (n - min) / (max - min));\n    const min = Math.min(...numbers);\n    const\
    \ max = Math.max(...numbers);\n    return numbers.map(n => (n - min) / (max -\
    \ min));\n}\n\ntest(\"test rescale_to_unit\", () => {\n    expect(rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])).toEqual([0.0, 0.25, 0.5, 0.75, 1.0]);\n});\n", "  //let\
    \ max, min;\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n\
    \  const factor = 1 / (max - min);\n  return numbers.map(n => (n - min) * factor);\n\
    }\n", "    return numbers.map(n => (n - Math.min(...numbers)) / (Math.max(...numbers)\
    \ - Math.min(...numbers)));\n}\n", "  const nums = [...numbers];\n  const max\
    \ = Math.max(...nums);\n  const min = Math.min(...nums);\n  return nums.map(n\
    \ => (n - min) / (max - min));\n}\n", "    if (numbers.length < 2) {\n       \
    \ throw new Error(\"rescale_to_unit expects an array of at least two elements\"\
    );\n    }\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n\
    \    let z = (max - min) / 2;\n    let a = (max + min) / 2;\n    return numbers.map(n\
    \ => {\n        return (n - a) / z;\n    });\n}\n", "  const max = numbers.reduce((a,\
    \ b) => Math.max(a, b));\n  const min = numbers.reduce((a, b) => Math.min(a, b));\n\
    \  const range = max - min;\n  const result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const n = numbers[i];\n    const res = (n - min) / range;\n    result.push(res);\n\
    \  }\n  return result;\n}\n", "    const min = min_element(numbers);\n    const\
    \ max = max_element(numbers);\n    return map(numbers, (n) => (n - min) / (max\
    \ - min));\n}\n", "    if (numbers.length < 2) {\n        return numbers\n   \
    \ }\n    const x = Math.min(...numbers)\n    const y = Math.max(...numbers)\n\
    \    return numbers.map(n => (n - x) / (y - x))\n}\n", "    const new_numbers\
    \ = [...numbers];\n    if (numbers.length <= 1) {\n        return numbers;\n \
    \   }\n    new_numbers.sort((a, b) => a - b);\n    const min = new_numbers[0];\n\
    \    const max = new_numbers[new_numbers.length - 1];\n    const base = max -\
    \ min;\n    const scaled = numbers.map(x => (x - min) / base);\n    return scaled;\n\
    }\n", "    const min_n = min(numbers);\n    const max_n = max(numbers);\n    return\
    \ numbers.map(function (n) {\n        return (n - min_n) / (max_n - min_n);\n\
    \    });\n}\n", "    const min = Math.min(...numbers);\n    const max = Math.max(...numbers);\n\
    \    return numbers.map(x => (x - min) / (max - min));\n}\n\nexport function get_ranges(max_value:\
    \ number, steps: number): number[] {\n    const range = Math.ceil(max_value /\
    \ steps);\n    const ranges = [];\n    for (let i = 0; i < steps; i++) {\n   \
    \     ranges.push(i * range);\n    }\n    return ranges;\n}\n\nexport function\
    \ get_min_max(numbers: number[]): [number, number] {\n    return [Math.min(...numbers),\
    \ Math.max(...numbers)];\n}\n\nexport function dist_to_segments(points: Point2D[],\
    \ segments: Line2D[]): number[] {\n    return points.map(p =>\n        segments.map(s\
    \ => dist_to_segment(p, s)).reduce((a, b) => Math.min(a, b), Number.MAX_VALUE)\n\
    \    );\n}\n\nexport function dist_to_segment(point: Point2D, segment: Line2D):\
    \ number {\n    const l2 = dist_to_point_squared(segment[0], segment[1]);\n  \
    \  if (l2 === 0) return dist_to_point(point, segment[0]);\n    let t = ((point.x\
    \ - segment[0].x) * (segment[1].x - segment[0].x) + (point.y - segment[0].y) *\
    \ (segment[1].y - segment[0].y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n\
    \    return dist_to_point(point, { x: segment[0].x + t * (segment[1].x - segment[0].x),\
    \ y: segment[0].y + t * (segment[1].y - segment[0].y) });\n}\n\nexport function\
    \ dist_to_point(p1: Point2D, p2: Point2D): number {\n    return Math.sqrt(dist_to_point_squared"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
