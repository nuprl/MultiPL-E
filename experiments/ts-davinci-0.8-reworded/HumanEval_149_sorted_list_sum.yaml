name: HumanEval_149_sorted_list_sum
language: ts
prompt: "//Write a function that accepts an array of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted array\
  \ with a sorted order,\n// The array is always an array of strings and never an\
  \ array of numbers,\n// and it may contain duplicates.\n// The order of the array\
  \ should be ascending by length of each word, and you\n// should return the array\
  \ sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n\
  // The function should return an array of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
  aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
  AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
  d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\",\
  \ \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
  , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\n\
  test();"
completions: ["    let lst_odd_size: string[] = [];\n    lst.forEach(element => {\n\
    \        if (element.length % 2 != 0) {\n            lst_odd_size.push(element);\n\
    \        }\n    });\n    return lst_odd_size.sort();\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "    let lst_res: string[] = [];\n    for (let item of lst) {\n\
    \        if (item.length % 2 == 0) {\n            lst_res.push(item);\n      \
    \  }\n    }\n    // lst_res.sort((a, b) => a.length - b.length);\n    // or\n\
    \    lst_res.sort((a, b) => a.length - b.length || a.localeCompare(b));\n    return\
    \ lst_res;\n}\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));", "    let result = lst.filter(function (e) {\n\
    \        return e.length % 2 === 0;\n    });\n    result.sort(function (a, b)\
    \ {\n        return a.length - b.length;\n    });\n    return result;\n}\n", " \
    \   const result: string[] = [];\n    lst.forEach(element => {\n        if (element.length\
    \ % 2 == 0) {\n            result.push(element);\n        }\n    });\n    return\
    \ result.sort((a, b) => a.length - b.length);\n}\n\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));", "    let answer: string[] = [];\n    lst.forEach(function (item:\
    \ string) {\n        if (item.length % 2 === 0) {\n            answer.push(item);\n\
    \        }\n    });\n    answer.sort();\n    return answer;\n}\n", "    let ordered_lst:\
    \ string[] = lst.sort(function (x, y) {\n        if (x.length < y.length) {\n\
    \            return -1;\n        }\n        if (x.length > y.length) {\n     \
    \       return 1;\n        }\n        if (x < y) {\n            return -1;\n \
    \       }\n        if (x > y) {\n            return 1;\n        }\n        return\
    \ 0;\n    });\n    return ordered_lst;\n}\n", "    let odd_length_words = [];\n\
    \    for (let item of lst) {\n        if (item.length % 2 === 1) {\n         \
    \   odd_length_words.push(item);\n        }\n    }\n    odd_length_words.sort();\n\
    \    return odd_length_words;\n}\n", "    let new_lst: string[] = [];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 === 0) {\n\
    \            new_lst.push(lst[i]);\n        }\n    }\n    let n = new_lst.length;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - i - 1; j++)\
    \ {\n            if (new_lst[j].length > new_lst[j + 1].length) {\n          \
    \      let temp = new_lst[j];\n                new_lst[j] = new_lst[j + 1];\n\
    \                new_lst[j + 1] = temp;\n            }\n        }\n    }\n   \
    \ return new_lst;\n}\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"]));\n", "    return lst.filter(s => s.length % 2 == 0).sort((s1, s2) => s1.length\
    \ - s2.length);\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    console.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));", "    let odd_lst:\
    \ string[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length\
    \ % 2 !== 0) {\n            odd_lst.push(lst[i]);\n        }\n    }\n    for (let\
    \ j = 0; j < odd_lst.length; j++) {\n        for (let k = 0; k < lst.length; k++)\
    \ {\n            if (odd_lst[j] === lst[k]) {\n                lst.splice(k, 1);\n\
    \            }\n        }\n    }\n    lst.sort(function (a, b) {\n        return\
    \ a.length - b.length;\n    });\n    return lst;\n}\n", "    let output: string[]\
    \ = [];\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length\
    \ % 2 == 0) {\n            output.push(lst[i]);\n        }\n    }\n    output.sort();\n\
    \    return output;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    console.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));", "    let count:\
    \ number = 0;\n    let result: string[] = [];\n    lst.forEach(value => {\n  \
    \      if (value.length % 2 == 0) {\n            result.push(value);\n       \
    \ }\n    });\n    result.sort((a, b) => {\n        return a.length - b.length;\n\
    \    });\n    return result;\n}", "    let odd_strs: string[] = [];\n    for (let\
    \ str of lst) {\n        if (str.length % 2 === 1) {\n            odd_strs.push(str);\n\
    \        }\n    }\n    odd_strs.sort();\n    return odd_strs;\n}\nconsole.log(sorted_list_sum([\"\
    a\", \"ab\", \"aaa\", \"cd\"]));", "    return _.sortBy(lst.filter(word => word.length\
    \ % 2 === 0), [word => word.length, word => word]);\n}", "    var lst2: string[]\
    \ = [];\n    var lenght: number = 0;\n    for (var i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i].length % 2 === 0) {\n            lst2.push(lst[i]);\n\
    \        }\n    }\n    for (var j: number = 0; j < lst2.length; j++) {\n     \
    \   lenght = lst2[j].length;\n        for (var k: number = 0; k < lst2.length;\
    \ k++) {\n            if (lenght < lst2[k].length) {\n                lenght =\
    \ lst2[k].length;\n            }\n        }\n    }\n    return lst2.sort();\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));", "    let result = [];\n    let min: number\
    \ = 100;\n    let min_str: string = \"\";\n    while (lst.length > 0) {\n    \
    \    for (let j = 0; j < lst.length; j++) {\n            if (lst[j].length < min)\
    \ {\n                min = lst[j].length;\n                min_str = lst[j];\n\
    \            }\n        }\n        for (let j = 0; j < lst.length; j++) {\n  \
    \          if (lst[j].length === min) {\n                result.push(lst[j]);\n\
    \                lst.splice(j, 1);\n                j--;\n            }\n    \
    \    }\n        min = 100;\n    }\n    return result;\n}\n", "    let counter\
    \ = 0;\n    let arr: string[] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i].length % 2 === 0) {\n            arr[counter] = lst[i];\n\
    \            counter++;\n        }\n    }\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i].length\
    \ > arr[j].length) {\n                let x = arr[i];\n                arr[i]\
    \ = arr[j];\n                arr[j] = x;\n            }\n        }\n    }\n  \
    \  return arr;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));", "    let result: string[] = [];\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 === 0)\
    \ {\n            result.push(lst[i]);\n        }\n    }\n    result.sort(function\
    \ (a, b) {\n        return a.length - b.length || a.localeCompare(b);\n    });\n\
    \    return result;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    console.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let i:\
    \ number = 0;\n    let len: number = lst.length;\n    let odd_lst: string[] =\
    \ [];\n    for (i = 0; i < len; i++) {\n        if (lst[i].length % 2 === 0) {\n\
    \            odd_lst.push(lst[i]);\n        }\n    }\n    return odd_lst.sort();\n\
    }\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let result: string[] = [];\n    for\
    \ (let item of lst) {\n        if (item.length % 2 === 0) {\n            result.push(item);\n\
    \        }\n    }\n    result.sort();\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
