name: HumanEval_51_remove_vowels
language: ts
prompt: "//remove_vowels is a function that takes string and returns string without\
  \ vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\"\
  )\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"\
  aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_vowels;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"abcdef\\nghijklm\"),\"bcdf\\nghjklm\");\n\
  \  assert.deepEqual(candidate(\"fedcba\"),\"fdcb\");\n  assert.deepEqual(candidate(\"\
  eeeee\"),\"\");\n  assert.deepEqual(candidate(\"acBAA\"),\"cB\");\n  assert.deepEqual(candidate(\"\
  EcBOO\"),\"cB\");\n  assert.deepEqual(candidate(\"ybcd\"),\"ybcd\");\n}\n\ntest();"
completions: ["  let new_text = \"\";\n  for (let i = 0; i < text.length; i++) {\n\
    \    if (\n      text[i] !== \"a\" &&\n      text[i] !== \"e\" &&\n      text[i]\
    \ !== \"i\" &&\n      text[i] !== \"o\" &&\n      text[i] !== \"u\"\n    ) {\n\
    \      new_text += text[i];\n    }\n  }\n  return new_text;\n}\n", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n\
    \    let result: string = '';\n    for (let index = 0; index < text.length; index++)\
    \ {\n        if (!vowels.includes(text[index])) {\n            result += text[index];\n\
    \        }\n    }\n    return result;\n}\n", "    let countVowels = 0;\n    let\
    \ numOfVowels = 0;\n    let new_text = \"\";\n    let vowels = [\"a\", \"A\",\
    \ \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"U\"];\n    for (let i = 0;\
    \ i < text.length; i++) {\n        for (let j = 0; j < vowels.length; j++) {\n\
    \            if (text[i] === vowels[j]) {\n                numOfVowels++;\n  \
    \          }\n        }\n    }\n    for (let i = 0; i < text.length; i++) {\n\
    \        for (let j = 0; j < vowels.length; j++) {\n            if (text[i] ===\
    \ vowels[j]) {\n                countVowels++;\n            }\n        }\n   \
    \     if (countVowels === 0) {\n            new_text += text[i];\n        }\n\
    \        countVowels = 0;\n    }\n    return new_text;\n}\nconsole.log(remove_vowels(\"\
    zbcd\"));", "  return text.replace(/[aeiou]/gi, '');\n}\n", "    // your code\
    \ here\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let newText\
    \ = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i].toLowerCase())\
    \ == -1) {\n            newText += text[i];\n        }\n    }\n    return newText;\n\
    }\n", "    var vowels: string = \"aeiouAEIOU\";\n    var result: string = \"\"\
    ;\n    for (var i = 0; i < text.length; i++) {\n        var c: string = text[i];\n\
    \        if (vowels.indexOf(c) == -1) {\n            result += c;\n        }\n\
    \    }\n    return result;\n}\n", "    // REPLACE THIS CODE WITH YOUR remove_vowels\
    \ IMPLEMENTATION\n    return text.replace(/[aeiou]/g, '');\n}\n", "    return\
    \ text.replace(/[aeiou]/gi, '');\n}\n", "  const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  let newText = \"\";\n  let i = 0;\n  while (i < text.length) {\n  \
    \  let letter = text[i];\n    if (vowels.indexOf(letter) === -1) {\n      newText\
    \ += letter;\n    }\n    i += 1;\n  }\n  return newText;\n}\n", "    let newtext:\
    \ string = '';\n    for (let i = 0; i < text.length; i++) {\n        if (!vowels.includes(text[i]))\
    \ {\n            newtext += text[i];\n        }\n    }\n    return newtext;\n\
    }\n", "    return text.replace(/[AEIOUaeiou]/g, '');\n}\n", "  let new_text =\
    \ \"\";\n  for (let i = 0; i < text.length; i++) {\n    let letter = text[i];\n\
    \    if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter !==\
    \ \"o\" && letter !== \"u\") {\n      new_text += letter;\n    }\n  }\n  return\
    \ new_text;\n}\n", "  return \"\";\n}\n", "    return text.replace(/[aeiou]/ig,\
    \ '');\n}\n", "    return text.replace(/[aeiou]/gi, '');\n}\n", "  return text.replace(/[aeiou]/gi,\
    \ '');\n}\n", "    return \"\";\n}\n", "    var vowels = \"aeiou\";\n    var result\
    \ = \"\";\n    var i = 0;\n    var c = text.charAt(i);\n    while (i < text.length)\
    \ {\n        if (vowels.indexOf(c) < 0) {\n            result += c;\n        }\n\
    \        i += 1;\n        c = text.charAt(i);\n    }\n    return result;\n}\n",
  "    let newString: string = text.replace(/[aeiou]/ig,'');\n    return newString;\n\
    }\n\nconsole.log(remove_vowels(\"abcdef\"));\nconsole.log(remove_vowels(\"\"));\n\
    console.log(remove_vowels(\"zbcd\"));\nconsole.log(remove_vowels(\"aaBAA\"));\n\
    console.log(remove_vowels(\"aaaaa\"));", "  return text.replace(/[aeiou]/gi, '');\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
