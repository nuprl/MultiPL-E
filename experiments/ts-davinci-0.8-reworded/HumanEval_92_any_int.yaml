name: HumanEval_92_any_int
language: ts
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n\
  // >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
  \ -2.2, 2)\n// false\nfunction any_int(x: number, y: number, z: number): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
  \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
  \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
  \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
  \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
  \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
completions: ["    if ((Math.floor(x) === x) && (Math.floor(y) === y) && (Math.floor(z)\
    \ === z)) {\n        if ((x + y === z) || (x + z === y) || (y + z === x)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "    if\
    \ ((x + y) === z || (x + z) === y || (y + z) === x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    return (Math.floor(x)\
    \ + Math.floor(y) === Math.floor(z)) || (Math.floor(x) + Math.floor(z) === Math.floor(y))\
    \ || (Math.floor(y) + Math.floor(z) === Math.floor(x));\n}\n", "    if (x % 1\
    \ == 0 && y % 1 == 0 && z % 1 == 0) {\n        if (x == y + z || y == x + z ||\
    \ z == x + y) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n", "    let sum = y + z;\n    if (x === sum || y === sum || z ===\
    \ sum) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(3, -2, 1));\n\n", "    if (x + y === z || x + z === y || y\
    \ + z === x) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));", "    return (Math.floor(x) +\
    \ Math.floor(y) === Math.floor(z)) || (Math.floor(x) + Math.floor(z) === Math.floor(y))\
    \ || (Math.floor(y) + Math.floor(z) === Math.floor(x));\n}\n", "    if (Number.isInteger(x)\
    \ && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x === y + z ||\
    \ y === x + z || z === x + y) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n", "    let sum: number = x + y + z;\n    if (sum === x\
    \ || sum === y || sum === z) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2,\
    \ 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));",
  "    if ((Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ===\
    \ false) {\n        return false;\n    } else if (x + y === z || x + z === y ||\
    \ y + z === x) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let result: boolean = false;\n    if (x === y + z || y ===\
    \ x + z || z === x + y) {\n        result = true;\n    }\n    return result;\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n", "    if (Number.isInteger(x\
    \ + y) || Number.isInteger(x + z) || Number.isInteger(y + z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    return (x + y\
    \ === z || x + z === y || y + z === x) && Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z);\n}\n", "    if (typeof x === \"number\" && typeof y\
    \ === \"number\" && typeof z === \"number\") {\n        return x + y === z ||\
    \ x + z === y || y + z === x;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n", "    if (x + y === z) {\n\
    \        return true;\n    } else if (x + z === y) {\n        return true;\n \
    \   } else if (y + z === x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2,\
    \ 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n",
  "    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}\nconsole.log(any_int(5, 2, 7));\n\
    console.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));", "    let result: boolean = false;\n    if (x % 1 === 0 && y % 1\
    \ === 0 && z % 1 === 0) {\n        if (x === y + z || y === x + z || z === x +\
    \ y) {\n            result = true;\n        }\n    }\n    return result;\n}\n",
  "    return x + y === z || x + z === y || y + z === x\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n", "    if (typeof x === \"number\" && typeof y === \"number\" &&\
    \ typeof z === \"number\") {\n        return Math.floor(x) + Math.floor(y) ===\
    \ Math.floor(z) || Math.floor(x) + Math.floor(z) === Math.floor(y) || Math.floor(y)\
    \ + Math.floor(z) === Math.floor(x);\n    } else {\n        return false;\n  \
    \  }\n}\n\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\
    console.log(any_int(3, 2, 2));\nconsole.log(any_int(5, 2, 7));\n", "    let sum\
    \ = x + y + z;\n    if (sum % 1 == 0) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\nconsole.log(any_int(1, 1, 1));\nconsole.log(any_int(1,\
    \ 1, 3));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
