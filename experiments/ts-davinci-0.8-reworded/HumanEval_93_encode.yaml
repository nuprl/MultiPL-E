name: HumanEval_93_encode
language: ts
prompt: "//Write a function that takes a message, and encodes in such a \n// way that\
  \ it swaps case of all letters, replaces all vowels in \n// the message with the\
  \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
  \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
  \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
  tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
  YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
  \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
  k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
completions: ["    let index = 0;\n    let vowels = \"aeiouAEIOU\";\n    let encodedMessage\
    \ = \"\";\n    for (const char of message) {\n        // Swap cases\n        if\
    \ (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        // Replace vowels\n        if (vowels.includes(char)) {\n       \
    \     index = vowels.indexOf(char);\n            if (index === vowels.length -\
    \ 1) {\n                encodedMessage = encodedMessage.slice(0, encodedMessage.length\
    \ - 1) + vowels[1];\n            } else if (index === vowels.length - 2) {\n \
    \               encodedMessage = encodedMessage.slice(0, encodedMessage.length\
    \ - 1) + vowels[0];\n            } else {\n                encodedMessage = encodedMessage.slice(0,\
    \ encodedMessage.length - 1) + vowels[index + 2];\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n", "    const alphabet: string[] = [\n\
    \        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\",\n    ];\n    let encodedMessage: string =\
    \ \"\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            const location: number = alphabet.indexOf(message[i].toLowerCase());\n\
    \            encodedMessage += alphabet[location + 2].toUpperCase();\n       \
    \ } else {\n            const location: number = alphabet.indexOf(message[i]);\n\
    \            encodedMessage += alphabet[location + 2];\n        }\n    }\n   \
    \ return encodedMessage;\n}", "    var charIndex = 0;\n    var result = \"\";\n\
    \    while (charIndex < message.length) {\n        var char = message[charIndex];\n\
    \        if (char.match(/[aeiou]/i)) {\n            result += switchCase(getVowelInAlphabet(char));\n\
    \        } else {\n            result += switchCase(char);\n        }\n      \
    \  charIndex++;\n    }\n    return result;\n}\n", "    // TODO\n    return \"\"\
    ;\n}\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result\
    \ = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        if (vowels.includes(letter.toLowerCase())) {\n      \
    \      let index = vowels.indexOf(letter.toLowerCase());\n            result +=\
    \ vowels[(index + 2) % 5];\n        } else {\n            result += letter.toUpperCase();\n\
    \        }\n    }\n    return result;\n}\n", "  var result: string = \"\";\n \
    \ var vowel: number = 0;\n  for (var i: number = 0; i < message.length; i++) {\n\
    \    vowel = (message[i] === \"a\" || message[i] === \"e\" || message[i] === \"\
    i\" || message[i] === \"o\" || message[i] === \"u\") ? 1 : 0;\n    result += (vowel\
    \ === 1) ? String.fromCharCode(message[i].charCodeAt(0) + 2) : String.fromCharCode(message[i].charCodeAt(0)\
    \ - 2);\n  }\n  return result;\n}\n", "    const newMessage = message.split('').map(char\
    \ => {\n        const charCode = char.charCodeAt(0);\n        const isUpperCase\
    \ = char === char.toUpperCase();\n        if (isUpperCase) {\n            if (charCode\
    \ >= 85 && charCode <= 89) {\n                return String.fromCharCode(charCode\
    \ + 20);\n            } else if (charCode >= 65 && charCode <= 84) {\n       \
    \         return String.fromCharCode(charCode + 21);\n            } else if (charCode\
    \ >= 90 && charCode <= 90) {\n                return String.fromCharCode(65);\n\
    \            }\n        } else {\n            if (charCode >= 117 && charCode\
    \ <= 121) {\n                return String.fromCharCode(charCode + 20);\n    \
    \        } else if (charCode >= 97 && charCode <= 116) {\n                return\
    \ String.fromCharCode(charCode + 21);\n            } else if (charCode >= 122\
    \ && charCode <= 122) {\n                return String.fromCharCode(97);\n   \
    \         }\n        }\n        return char;\n    });\n    return newMessage.join('');\n\
    }", "    let encodedMessage: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (isAlpha(char)) {\n   \
    \         if (isUpperCase(char)) {\n                encodedMessage += char.toLowerCase();\n\
    \            } else {\n                encodedMessage += char.toUpperCase();\n\
    \            }\n        } else {\n            encodedMessage += char;\n      \
    \  }\n    }\n    return encodedMessage;\n}", "    let result = \"\"\n    const\
    \ lookup = {\n        \"a\": \"c\",\n        \"e\": \"g\",\n        \"i\": \"\
    k\",\n        \"o\": \"q\",\n        \"u\": \"w\",\n        \"A\": \"C\",\n  \
    \      \"E\": \"G\",\n        \"I\": \"K\",\n        \"O\": \"Q\",\n        \"\
    U\": \"W\"\n    }\n    for (let i = 0; i < message.length; i++) {\n        let\
    \ char = message[i]\n        if (lookup[char]) {\n            result += lookup[char]\n\
    \        } else if (char === char.toUpperCase()) {\n            result += char.toLowerCase()\n\
    \        } else {\n            result += char.toUpperCase()\n        }\n    }\n\
    \    return result\n}\nconsole.log(encode(\"test\"))\nconsole.log(encode(\"This\
    \ is a message\"))\n", "    let encodedMessage: string = \"\";\n    const alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    const vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        let indexOfChar: number = alphabet.indexOf(char.toLowerCase());\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char;\n\
    \        } else if (vowels.indexOf(char) !== -1) {\n            encodedMessage\
    \ += encode(alphabet, vowels, char, indexOfChar);\n        } else {\n        \
    \    encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}",
  "    let translated = '';\n    for (let i = 0; i < message.length; i++) {\n    \
    \    const char = message[i];\n        if (char.toLowerCase() == 'a') translated\
    \ += 'c';\n        else if (char.toLowerCase() == 'e') translated += 'g';\n  \
    \      else if (char.toLowerCase() == 'i') translated += 'k';\n        else if\
    \ (char.toLowerCase() == 'o') translated += 'q';\n        else if (char.toLowerCase()\
    \ == 'u') translated += 'y';\n        else if (char == char.toUpperCase()) translated\
    \ += char.toLowerCase();\n        else translated += char.toUpperCase();\n   \
    \ }\n    return translated;\n}\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const newMessage: string[] = [];\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        let char2 = char.toLowerCase();\n\
    \        if (vowels.includes(char2)) {\n            const index = vowels.indexOf(char2);\n\
    \            const newIndex = (index + 2) % 5;\n            char = vowels[newIndex].toUpperCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ newMessage.push(char);\n    }\n    return newMessage.join('');\n}\n", "  //\
    \ TODO: your code here\n  return message;\n}\n", "    let newMessage: string =\
    \ '';\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n\
    \        } else {\n            newMessage += message[i].toUpperCase();\n     \
    \   }\n    }\n    return newMessage;\n}\n", "    const lowerAlphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    const upperAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const vowels = 'aeiou';\n\
    \    const newMessage = message.split('').map(letter => {\n        const index\
    \ = lowerAlphabet.indexOf(letter.toLowerCase());\n        if (index > -1) {\n\
    \            const newIndex = index + 2 > 25 ? Math.abs(index - 24) : index +\
    \ 2;\n            if (lowerAlphabet.includes(letter)) {\n                return\
    \ lowerAlphabet[newIndex];\n            } else {\n                return upperAlphabet[newIndex];\n\
    \            }\n        } else {\n            return letter;\n        }\n    }).join('');\n\
    \    return newMessage;\n}\n", "    // for (let i = 0; i < message.length; i++)\
    \ {\n    //     const charCode = message.charCodeAt(i);\n    //     if(charCode\
    \ >= 65 && charCode <= 90) {\n    //         encodedMessage += String.fromCharCode(message.charCodeAt(i)\
    \ + 32);\n    //     } else if (charCode >= 97 && charCode <= 122) {\n    // \
    \        encodedMessage += String.fromCharCode(message.charCodeAt(i) - 32);\n\
    \    //     } else {\n    //         encodedMessage += message[i];\n    //   \
    \  }\n    // }\n    // return encodedMessage;\n    let encodedMessage = '';\n\
    \    for (let i = 0; i < message.length; i++) {\n        const charCode = message.charCodeAt(i);\n\
    \        if (charCode >= 65 && charCode <= 90) {\n            encodedMessage +=\
    \ String.fromCharCode(message.charCodeAt(i) + 32);\n        } else if (charCode\
    \ >= 97 && charCode <= 122) {\n            encodedMessage += String.fromCharCode(message.charCodeAt(i)\
    \ - 32);\n        } else {\n            encodedMessage += message[i];\n      \
    \  }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"This is a message\"\
    ));", "    //YOUR CODE HERE\n}\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const alpha = 'abcdefghijklmnopqrstuvwxyz';\n    const alpha_upper = alpha.toUpperCase();\n\
    \    const output = [];\n    for (let i = 0; i < message.length; i++) {\n    \
    \    const char = message[i];\n        const char_upper = char.toUpperCase();\n\
    \        if (alpha.includes(char_upper)) {\n            if (alpha_upper.includes(char))\
    \ {\n                output.push(alpha_upper[alpha_upper.indexOf(char)+2]);\n\
    \            } else {\n                output.push(alpha[alpha.indexOf(char_upper)+2]);\n\
    \            }\n        } else {\n            output.push(char);\n        }\n\
    \    }\n    return output.join('');\n}\nconsole.log(encode('This is a message'));",
  "    // loop through the message\n    // check if the character is a vowel, assign\
    \ it to a variable\n    // check if the character is uppercase, assign it to a\
    \ variable\n    // assign the encoded character to a variable\n    // concatenate\
    \ it to the encoded message\n    // return the encoded message\n    let encodedMessage:\
    \ string = \"\";\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  for (let i = 0; i < message.length; i++) {\n        const character = message[i];\n\
    \        const isUpperCase = character === character.toUpperCase();\n        const\
    \ isVowel = vowels.includes(character.toLowerCase());\n        let encodedCharacter:\
    \ string;\n        if (isVowel) {\n            const indexOfVowel = vowels.indexOf(character.toLowerCase());\n\
    \            const offset = 2;\n            let encodedVowelIndex = indexOfVowel\
    \ + offset;\n            if (encodedVowelIndex >= vowels.length) {\n         \
    \       encodedVowelIndex = encodedVowelIndex - vowels.length;\n            }\n\
    \            encodedCharacter = vowels[encodedVowelIndex];\n        } else {\n\
    \            encodedCharacter = character;\n        }\n        if (isUpperCase)\
    \ {\n            encodedCharacter = encodedCharacter.toUpperCase();\n        }\n\
    \        encodedMessage += encodedCharacter;\n    }\n    return encodedMessage;\n\
    }\nconsole.log(encode(\"This is a message\"));\nconsole.log(encode(\"test\"));\n",
  "  let encoding = \"\"\n  for (let i = 0; i < message.length; i++) {\n    const\
    \ currentChar = message[i]\n    const lower = currentChar.toLowerCase()\n    if\
    \ (lower === \"a\") {\n      encoding += \"c\"\n    } else if (lower === \"e\"\
    ) {\n      encoding += \"g\"\n    } else if (lower === \"i\") {\n      encoding\
    \ += \"k\"\n    } else if (lower === \"o\") {\n      encoding += \"q\"\n    }\
    \ else if (lower === \"u\") {\n      encoding += \"y\"\n    } else if (lower !==\
    \ currentChar) {\n      encoding += lower.toUpperCase()\n    } else {\n      encoding\
    \ += lower\n    }\n  }\n  return encoding\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
