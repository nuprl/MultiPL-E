name: HumanEval_93_encode
language: ts
prompt: "//Write a function that takes a message, and encodes in such a \n// way that\
  \ it swaps case of all letters, replaces all vowels in \n// the message with the\
  \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
  \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
  \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
  tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
  YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
  \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
  k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
completions: ["    let index = 0;\n    let vowels = \"aeiouAEIOU\";\n    let encodedMessage\
    \ = \"\";\n    for (const char of message) {\n        // Swap cases\n        if\
    \ (char === char.toUpperCase()) {\n            encodedMessage += char.toLowerCase();\n\
    \        } else {\n            encodedMessage += char.toUpperCase();\n       \
    \ }\n        // Replace vowels\n        if (vowels.includes(char)) {\n       \
    \     index = vowels.indexOf(char);\n            if (index === vowels.length -\
    \ 1) {\n                encodedMessage = encodedMessage.slice(0, encodedMessage.length\
    \ - 1) + vowels[1];\n            } else if (index === vowels.length - 2) {\n \
    \               encodedMessage = encodedMessage.slice(0, encodedMessage.length\
    \ - 1) + vowels[0];\n            } else {\n                encodedMessage = encodedMessage.slice(0,\
    \ encodedMessage.length - 1) + vowels[index + 2];\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n", "    const alphabet: string[] = [\n\
    \        \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\",\n    ];\n    let encodedMessage: string =\
    \ \"\";\n    for (let i: number = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            const location: number = alphabet.indexOf(message[i].toLowerCase());\n\
    \            encodedMessage += alphabet[location + 2].toUpperCase();\n       \
    \ } else {\n            const location: number = alphabet.indexOf(message[i]);\n\
    \            encodedMessage += alphabet[location + 2];\n        }\n    }\n   \
    \ return encodedMessage;\n}", "    var charIndex = 0;\n    var result = \"\";\n\
    \    while (charIndex < message.length) {\n        var char = message[charIndex];\n\
    \        if (char.match(/[aeiou]/i)) {\n            result += switchCase(getVowelInAlphabet(char));\n\
    \        } else {\n            result += switchCase(char);\n        }\n      \
    \  charIndex++;\n    }\n    return result;\n}\n", "    // TODO\n    return \"\"\
    ;\n}\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result\
    \ = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let letter\
    \ = message[i];\n        if (vowels.includes(letter.toLowerCase())) {\n      \
    \      let index = vowels.indexOf(letter.toLowerCase());\n            result +=\
    \ vowels[(index + 2) % 5];\n        } else {\n            result += letter.toUpperCase();\n\
    \        }\n    }\n    return result;\n}\n", "  var result: string = \"\";\n \
    \ var vowel: number = 0;\n  for (var i: number = 0; i < message.length; i++) {\n\
    \    vowel = (message[i] === \"a\" || message[i] === \"e\" || message[i] === \"\
    i\" || message[i] === \"o\" || message[i] === \"u\") ? 1 : 0;\n    result += (vowel\
    \ === 1) ? String.fromCharCode(message[i].charCodeAt(0) + 2) : String.fromCharCode(message[i].charCodeAt(0)\
    \ - 2);\n  }\n  return result;\n}\n", "    const newMessage = message.split('').map(char\
    \ => {\n        const charCode = char.charCodeAt(0);\n        const isUpperCase\
    \ = char === char.toUpperCase();\n        if (isUpperCase) {\n            if (charCode\
    \ >= 85 && charCode <= 89) {\n                return String.fromCharCode(charCode\
    \ + 20);\n            } else if (charCode >= 65 && charCode <= 84) {\n       \
    \         return String.fromCharCode(charCode + 21);\n            } else if (charCode\
    \ >= 90 && charCode <= 90) {\n                return String.fromCharCode(65);\n\
    \            }\n        } else {\n            if (charCode >= 117 && charCode\
    \ <= 121) {\n                return String.fromCharCode(charCode + 20);\n    \
    \        } else if (charCode >= 97 && charCode <= 116) {\n                return\
    \ String.fromCharCode(charCode + 21);\n            } else if (charCode >= 122\
    \ && charCode <= 122) {\n                return String.fromCharCode(97);\n   \
    \         }\n        }\n        return char;\n    });\n    return newMessage.join('');\n\
    }", "    let encodedMessage: string = '';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (isAlpha(char)) {\n   \
    \         if (isUpperCase(char)) {\n                encodedMessage += char.toLowerCase();\n\
    \            } else {\n                encodedMessage += char.toUpperCase();\n\
    \            }\n        } else {\n            encodedMessage += char;\n      \
    \  }\n    }\n    return encodedMessage;\n}", "    let result = \"\"\n    const\
    \ lookup = {\n        \"a\": \"c\",\n        \"e\": \"g\",\n        \"i\": \"\
    k\",\n        \"o\": \"q\",\n        \"u\": \"w\",\n        \"A\": \"C\",\n  \
    \      \"E\": \"G\",\n        \"I\": \"K\",\n        \"O\": \"Q\",\n        \"\
    U\": \"W\"\n    }\n    for (let i = 0; i < message.length; i++) {\n        let\
    \ char = message[i]\n        if (lookup[char]) {\n            result += lookup[char]\n\
    \        } else if (char === char.toUpperCase()) {\n            result += char.toLowerCase()\n\
    \        } else {\n            result += char.toUpperCase()\n        }\n    }\n\
    \    return result\n}\nconsole.log(encode(\"test\"))\nconsole.log(encode(\"This\
    \ is a message\"))\n", "    let encodedMessage: string = \"\";\n    const alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    const vowels: string = \"aeiou\"\
    ;\n    for (let i: number = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        let indexOfChar: number = alphabet.indexOf(char.toLowerCase());\n\
    \        if (char === char.toUpperCase()) {\n            encodedMessage += char;\n\
    \        } else if (vowels.indexOf(char) !== -1) {\n            encodedMessage\
    \ += encode(alphabet, vowels, char, indexOfChar);\n        } else {\n        \
    \    encodedMessage += char;\n        }\n    }\n    return encodedMessage;\n}",
  "    let translated = '';\n    for (let i = 0; i < message.length; i++) {\n    \
    \    const char = message[i];\n        if (char.toLowerCase() == 'a') translated\
    \ += 'c';\n        else if (char.toLowerCase() == 'e') translated += 'g';\n  \
    \      else if (char.toLowerCase() == 'i') translated += 'k';\n        else if\
    \ (char.toLowerCase() == 'o') translated += 'q';\n        else if (char.toLowerCase()\
    \ == 'u') translated += 'y';\n        else if (char == char.toUpperCase()) translated\
    \ += char.toLowerCase();\n        else translated += char.toUpperCase();\n   \
    \ }\n    return translated;\n}\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const newMessage: string[] = [];\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        let char2 = char.toLowerCase();\n\
    \        if (vowels.includes(char2)) {\n            const index = vowels.indexOf(char2);\n\
    \            const newIndex = (index + 2) % 5;\n            char = vowels[newIndex].toUpperCase();\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ newMessage.push(char);\n    }\n    return newMessage.join('');\n}\n", "  //\
    \ TODO: your code here\n  return message;\n}\n", "    let newMessage: string =\
    \ '';\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n\
    \        } else {\n            newMessage += message[i].toUpperCase();\n     \
    \   }\n    }\n    return newMessage;\n}\n", "    const lowerAlphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    const upperAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const vowels = 'aeiou';\n\
    \    const newMessage = message.split('').map(letter => {\n        const index\
    \ = lowerAlphabet.indexOf(letter.toLowerCase());\n        if (index > -1) {\n\
    \            const newIndex = index + 2 > 25 ? Math.abs(index - 24) : index +\
    \ 2;\n            if (lowerAlphabet.includes(letter)) {\n                return\
    \ lowerAlphabet[newIndex];\n            } else {\n                return upperAlphabet[newIndex];\n\
    \            }\n        } else {\n            return letter;\n        }\n    }).join('');\n\
    \    return newMessage;\n}\n", "    // for (let i = 0; i < message.length; i++)\
    \ {\n    //     const charCode = message.charCodeAt(i);\n    //     if(charCode\
    \ >= 65 && charCode <= 90) {\n    //         encodedMessage += String.fromCharCode(message.charCodeAt(i)\
    \ + 32);\n    //     } else if (charCode >= 97 && charCode <= 122) {\n    // \
    \        encodedMessage += String.fromCharCode(message.charCodeAt(i) - 32);\n\
    \    //     } else {\n    //         encodedMessage += message[i];\n    //   \
    \  }\n    // }\n    // return encodedMessage;\n    let encodedMessage = '';\n\
    \    for (let i = 0; i < message.length; i++) {\n        const charCode = message.charCodeAt(i);\n\
    \        if (charCode >= 65 && charCode <= 90) {\n            encodedMessage +=\
    \ String.fromCharCode(message.charCodeAt(i) + 32);\n        } else if (charCode\
    \ >= 97 && charCode <= 122) {\n            encodedMessage += String.fromCharCode(message.charCodeAt(i)\
    \ - 32);\n        } else {\n            encodedMessage += message[i];\n      \
    \  }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"This is a message\"\
    ));", "    //YOUR CODE HERE\n}\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const alpha = 'abcdefghijklmnopqrstuvwxyz';\n    const alpha_upper = alpha.toUpperCase();\n\
    \    const output = [];\n    for (let i = 0; i < message.length; i++) {\n    \
    \    const char = message[i];\n        const char_upper = char.toUpperCase();\n\
    \        if (alpha.includes(char_upper)) {\n            if (alpha_upper.includes(char))\
    \ {\n                output.push(alpha_upper[alpha_upper.indexOf(char)+2]);\n\
    \            } else {\n                output.push(alpha[alpha.indexOf(char_upper)+2]);\n\
    \            }\n        } else {\n            output.push(char);\n        }\n\
    \    }\n    return output.join('');\n}\nconsole.log(encode('This is a message'));",
  "    // loop through the message\n    // check if the character is a vowel, assign\
    \ it to a variable\n    // check if the character is uppercase, assign it to a\
    \ variable\n    // assign the encoded character to a variable\n    // concatenate\
    \ it to the encoded message\n    // return the encoded message\n    let encodedMessage:\
    \ string = \"\";\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  for (let i = 0; i < message.length; i++) {\n        const character = message[i];\n\
    \        const isUpperCase = character === character.toUpperCase();\n        const\
    \ isVowel = vowels.includes(character.toLowerCase());\n        let encodedCharacter:\
    \ string;\n        if (isVowel) {\n            const indexOfVowel = vowels.indexOf(character.toLowerCase());\n\
    \            const offset = 2;\n            let encodedVowelIndex = indexOfVowel\
    \ + offset;\n            if (encodedVowelIndex >= vowels.length) {\n         \
    \       encodedVowelIndex = encodedVowelIndex - vowels.length;\n            }\n\
    \            encodedCharacter = vowels[encodedVowelIndex];\n        } else {\n\
    \            encodedCharacter = character;\n        }\n        if (isUpperCase)\
    \ {\n            encodedCharacter = encodedCharacter.toUpperCase();\n        }\n\
    \        encodedMessage += encodedCharacter;\n    }\n    return encodedMessage;\n\
    }\nconsole.log(encode(\"This is a message\"));\nconsole.log(encode(\"test\"));\n",
  "  let encoding = \"\"\n  for (let i = 0; i < message.length; i++) {\n    const\
    \ currentChar = message[i]\n    const lower = currentChar.toLowerCase()\n    if\
    \ (lower === \"a\") {\n      encoding += \"c\"\n    } else if (lower === \"e\"\
    ) {\n      encoding += \"g\"\n    } else if (lower === \"i\") {\n      encoding\
    \ += \"k\"\n    } else if (lower === \"o\") {\n      encoding += \"q\"\n    }\
    \ else if (lower === \"u\") {\n      encoding += \"y\"\n    } else if (lower !==\
    \ currentChar) {\n      encoding += lower.toUpperCase()\n    } else {\n      encoding\
    \ += lower\n    }\n  }\n  return encoding\n}\n", "    let encodedMessage: string\
    \ = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n\
    \        } else {\n            encodedMessage += message[i].toUpperCase();\n \
    \       }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"\
    ));", "    let newString: string = '';\n    let vowels: string = 'aeiou';\n  \
    \  let alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i\
    \ < message.length; i++) {\n        let char = message[i];\n        if (char ===\
    \ char.toUpperCase()) {\n            newString += char.toLowerCase();\n      \
    \  } else {\n            newString += char.toUpperCase();\n        }\n       \
    \ for (let j = 0; j < vowels.length; j++) {\n            if (char === vowels[j])\
    \ {\n                newString = newString.replace(char, alphabet[(alphabet.indexOf(char)\
    \ + 2) % alphabet.length]);\n            }\n        }\n    }\n    return newString;\n\
    }\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n",
  "    return message.replace(/[a-z]/gi, match => {\n        if (/[aeiou]/i.test(match))\
    \ {\n            return String.fromCharCode(match.charCodeAt(0) + 2);\n      \
    \  } else {\n            return String.fromCharCode(match.charCodeAt(0) - 20);\n\
    \        }\n    });\n}\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));", "    const alphabet = [\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let chars = message.split(\"\");\n    let encoded = \"\";\n    for (let i\
    \ = 0; i < chars.length; i++) {\n        let char = chars[i];\n        let charIndex\
    \ = alphabet.indexOf(char.toLowerCase());\n        if (charIndex !== -1) {\n \
    \           let newChar = alphabet[charIndex + 2];\n            if (char === char.toUpperCase())\
    \ {\n                newChar = newChar.toUpperCase();\n            }\n       \
    \     encoded += newChar;\n        } else {\n            encoded += char;\n  \
    \      }\n    }\n    return encoded;\n}\n", "    let vowels: string[] = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    let result: string = '';\n    let character: string;\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        character = message[i];\n\
    \        if (vowels.indexOf(character.toLowerCase()) >= 0) {\n            character\
    \ = String.fromCharCode(character.charCodeAt(0) + 2);\n        }\n        result\
    \ += character;\n    }\n    return result;\n}\nconsole.log(encode(\"test\"));\n\
    console.log(encode(\"This is a message\"));", "  var output: string = \"\";\n\
    \  var vowels: string = \"aeiou\";\n  var alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (var i: number = 0; i < message.length; i++) {\n    var encodedChar:\
    \ string = \"\";\n    if (message[i] === message[i].toUpperCase()) {\n      encodedChar\
    \ = message[i].toLowerCase();\n    } else {\n      encodedChar = message[i].toUpperCase();\n\
    \    }\n    var foundVowel: boolean = false;\n    for (var j: number = 0; j <\
    \ vowels.length; j++) {\n      if (message[i] === vowels[j] || message[i] ===\
    \ vowels[j].toUpperCase()) {\n        foundVowel = true;\n        var foundLetter:\
    \ boolean = false;\n        for (var k: number = 0; k < alphabet.length; k++)\
    \ {\n          if (encodedChar === alphabet[k]) {\n            encodedChar = alphabet[(k\
    \ + 2) % alphabet.length];\n            foundLetter = true;\n            break;\n\
    \          }\n        }\n        if (foundLetter) {\n          break;\n      \
    \  }\n      }\n    }\n    if (!foundVowel) {\n      output += encodedChar;\n \
    \   } else {\n      output += encodedChar.toUpperCase();\n    }\n  }\n  return\
    \ output;\n}\n\nvar message: string = \"This is a message\";\nconsole.log(encode(message));",
  "    let vowels = \"aeiou\";\n    let alphabets = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let encodedMessage = \"\";\n    let alphabetIndex = 0;\n    let encodedChar\
    \ = \"\";\n    for (let i = 0; i < message.length; i++) {\n        // Encoding\
    \ message\n        if (message[i] === message[i].toUpperCase()) {\n          \
    \  encodedChar = message[i].toLowerCase();\n        } else {\n            encodedChar\
    \ = message[i].toUpperCase();\n        }\n        // Encoding vowels\n       \
    \ if (vowels.includes(encodedChar)) {\n            alphabetIndex = alphabets.indexOf(encodedChar);\n\
    \            if (alphabetIndex + 2 >= 26) {\n                encodedChar = alphabets[alphabetIndex\
    \ + 2 - 26];\n            } else {\n                encodedChar = alphabets[alphabetIndex\
    \ + 2];\n            }\n        }\n        encodedMessage += encodedChar;\n  \
    \  }\n    return encodedMessage;\n}\n", "  let result: string = \"\";\n  const\
    \ alphabet: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  for (let i: number = 0;\
    \ i < message.length; i++) {\n    const char: string = message[i];\n    const\
    \ charCase: string = (char === char.toUpperCase()) ? \"upper\" : \"lower\";\n\
    \    const charIndex: number = alphabet.indexOf(char.toUpperCase());\n    if (charIndex\
    \ !== -1) {\n      let charIndexEncode: number = charIndex + 2;\n      if (charIndexEncode\
    \ > alphabet.length - 1) {\n        charIndexEncode -= alphabet.length;\n    \
    \  }\n      const charEncode: string = alphabet[charIndexEncode];\n      result\
    \ += (charCase === \"upper\") ? charEncode : charEncode.toLowerCase();\n    }\
    \ else {\n      result += char;\n    }\n  }\n  return result;\n}\n", "    let\
    \ result: string = '';\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let ascii: number = message.charCodeAt(i);\n        if (ascii >= 65 && ascii\
    \ <= 90) {\n            ascii += 32;\n        } else if (ascii >= 97 && ascii\
    \ <= 122) {\n            ascii -= 32;\n        }\n        if (ascii === 97) {\n\
    \            ascii = 99;\n        } else if (ascii === 101) {\n            ascii\
    \ = 103;\n        } else if (ascii === 105) {\n            ascii = 107;\n    \
    \    } else if (ascii === 111) {\n            ascii = 113;\n        } else if\
    \ (ascii === 117) {\n            ascii = 119;\n        }\n        result += String.fromCharCode(ascii);\n\
    \    }\n    return result;\n}\n", "    return message.split('').map(function(letter){\n\
    \        if (/[a-z]/.test(letter)){\n            let code = letter.charCodeAt(0);\n\
    \            if (code >= 97 && code <= 99){\n                return String.fromCharCode(code\
    \ + 24);\n            } else if (code >= 65 && code <= 67){\n                return\
    \ String.fromCharCode(code + 24);\n            } else {\n                return\
    \ String.fromCharCode(code - 2);\n            }\n        } else if (/[A-Z]/.test(letter)){\n\
    \            let code = letter.charCodeAt(0);\n            if (code >= 97 && code\
    \ <= 99){\n                return String.fromCharCode(code + 24);\n          \
    \  } else if (code >= 65 && code <= 67){\n                return String.fromCharCode(code\
    \ + 24);\n            } else {\n                return String.fromCharCode(code\
    \ - 2);\n            }\n        } else {\n            return letter;\n       \
    \ }\n    }).join('');\n}\n", "    let vowels: string[] = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let encodedMessage: string = \"\";\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (vowels.indexOf(currentChar.toLowerCase()) !== -1) {\n           \
    \ let code: number = currentChar.charCodeAt(0);\n            code += 2;\n    \
    \        if (currentChar === currentChar.toUpperCase()) {\n                currentChar\
    \ = String.fromCharCode(code).toUpperCase();\n            } else {\n         \
    \       currentChar = String.fromCharCode(code);\n            }\n        } else\
    \ if (currentChar === currentChar.toUpperCase()) {\n            currentChar =\
    \ currentChar.toLowerCase();\n        } else {\n            currentChar = currentChar.toUpperCase();\n\
    \        }\n        encodedMessage += currentChar;\n    }\n    return encodedMessage;\n\
    }", "    const messageArr = message.split('');\n    const newArr = [];\n    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    messageArr.forEach(letter => {\n  \
    \      if (vowels.includes(letter.toLowerCase())) {\n            let newIndex\
    \ = vowels.indexOf(letter.toLowerCase()) + 2;\n            if (newIndex > 4) {\n\
    \                newIndex = newIndex - 5;\n            }\n            newArr.push(vowels[newIndex]);\n\
    \        } else if (letter === letter.toUpperCase()) {\n            newArr.push(letter.toLowerCase());\n\
    \        } else {\n            newArr.push(letter.toUpperCase());\n        }\n\
    \    });\n    return newArr.join('');\n}\n", "  const lowercaseAlphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  const uppercaseAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const vowels\
    \ = \"aeiou\";\n  let newMessage = \"\";\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (uppercaseAlphabet.includes(message[i])) {\n      let currentIndex\
    \ = uppercaseAlphabet.indexOf(message[i]);\n      newMessage += lowercaseAlphabet[currentIndex];\n\
    \    } else if (lowercaseAlphabet.includes(message[i])) {\n      let currentIndex\
    \ = lowercaseAlphabet.indexOf(message[i]);\n      newMessage += uppercaseAlphabet[currentIndex];\n\
    \    } else {\n      newMessage += message[i];\n    }\n  }\n  let encodedMessage\
    \ = \"\";\n  for (let i = 0; i < newMessage.length; i++) {\n    if (vowels.includes(newMessage[i]))\
    \ {\n      let currentIndex = vowels.indexOf(newMessage[i]);\n      encodedMessage\
    \ += vowels[currentIndex + 2];\n    } else {\n      encodedMessage += newMessage[i];\n\
    \    }\n  }\n  return encodedMessage;\n}\nconsole.log(encode(\"This is a message\"\
    ));", "  let messageArray = message.split(\"\");\n  let alphaArray = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n  let encodedArray = [];\n  for (let i = 0; i < messageArray.length;\
    \ i++) {\n    if (\n      alphaArray.indexOf(messageArray[i].toLowerCase()) >=\
    \ 0 &&\n      messageArray[i] === messageArray[i].toLowerCase()\n    ) {\n   \
    \   encodedArray.push(messageArray[i].toUpperCase());\n    } else if (\n     \
    \ alphaArray.indexOf(messageArray[i].toLowerCase()) >= 0 &&\n      messageArray[i]\
    \ === messageArray[i].toUpperCase()\n    ) {\n      encodedArray.push(messageArray[i].toLowerCase());\n\
    \    } else {\n      encodedArray.push(messageArray[i]);\n    }\n  }\n  let encodedMessage\
    \ = encodedArray.join(\"\");\n  let output = \"\";\n  for (let i = 0; i < encodedMessage.length;\
    \ i++) {\n    let thisChar = encodedMessage[i];\n    if (thisChar === \"A\") {\n\
    \      output += \"C\";\n    } else if (thisChar === \"E\") {\n      output +=\
    \ \"G\";\n    } else if (thisChar === \"I\") {\n      output += \"K\";\n    }\
    \ else if (thisChar === \"O\") {\n      output += \"Q\";\n    } else if (thisChar\
    \ === \"U\") {\n      output += \"W\";\n    } else if (thisChar === \"a\") {\n\
    \      output += \"c\";\n    } else if (thisChar === \"e\") {\n      output +=\
    \ \"g\";\n    } else if (thisChar === \"i\") {\n      output += \"k\";\n    }\
    \ else if (thisChar === \"o\") {\n      output += \"q\";\n    } else if (thisChar\
    \ === \"u\") {\n      output += \"w\";\n    } else {\n      output += thisChar;\n\
    \    }\n  }\n  return output;\n}\n", "  let codedMessage = \"\";\n  let charVal:\
    \ number;\n  const vowelNum = \"aeiou\".split(\"\");\n  const vowelUpperNum =\
    \ \"AEIOU\".split(\"\");\n  let isVowel = false;\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (message[i] == message[i].toUpperCase()) {\n      charVal = message.charCodeAt(i)\
    \ + 2;\n      if (charVal > 90) {\n        charVal = charVal - 90 + 64;\n    \
    \  }\n      for (let j = 0; j < vowelUpperNum.length; j++) {\n        if (message[i]\
    \ == vowelUpperNum[j]) {\n          isVowel = true;\n        }\n      }\n    \
    \  if (isVowel) {\n        codedMessage += String.fromCharCode(charVal);\n   \
    \   } else {\n        codedMessage += String.fromCharCode(charVal - 32);\n   \
    \   }\n    } else {\n      charVal = message.charCodeAt(i) + 2;\n      if (charVal\
    \ > 122) {\n        charVal = charVal - 122 + 96;\n      }\n      for (let j =\
    \ 0; j < vowelNum.length; j++) {\n        if (message[i] == vowelNum[j]) {\n \
    \         isVowel = true;\n        }\n      }\n      if (isVowel) {\n        codedMessage\
    \ += String.fromCharCode(charVal);\n      } else {\n        codedMessage += String.fromCharCode(charVal\
    \ - 32);\n      }\n    }\n    isVowel = false;\n  }\n  return codedMessage;\n\
    }\n", "    var result = \"\";\n    var case_flag = 0;\n    for (var i = 0; i <\
    \ message.length; i++) {\n        var c = message.charAt(i);\n        if (c >=\
    \ 'a' && c <= 'z') {\n            if (case_flag == 0) {\n                c = c.toUpperCase();\n\
    \                case_flag = 1;\n            } else {\n                c = c.toLowerCase();\n\
    \                case_flag = 0;\n            }\n        }\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            if (c == 'u')\
    \ {\n                c = 'a';\n            } else {\n                c = String.fromCharCode(c.charCodeAt(0)\
    \ + 2);\n            }\n        }\n        result += c;\n    }\n    return result;\n\
    }\n", "    return message.split('').map(function(char){\n        if (/[a-z]/i.test(char))\
    \ {\n            var currentPos = char.charCodeAt(0);\n            var newPos\
    \ = currentPos + 2;\n            var alpha = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \            if (newPos > 122){\n                newPos = (newPos - 122) + 96;\n\
    \            }\n            return char.toUpperCase() === char ? alpha[newPos\
    \ - 97].toUpperCase() : alpha[newPos - 97];\n        }\n        return char;\n\
    \    }).join('');\n}\nconsole.log(encode(\"This is a message\"));", "    let result:\
    \ string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (isLetter(message[i]))\
    \ {\n            if (isVowel(message[i])) {\n                result += nextVowel(message[i]);\n\
    \            } else {\n                result += nextConsonant(message[i]);\n\
    \            }\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;\n}", "  return \"\";\n}\n", "  let result: string =\
    \ \"\";\n  for (let i = 0; i < message.length; i++) {\n    let code = message.charCodeAt(i);\n\
    \    if (isLetter(code)) {\n      code = isUpperCase(code) ? code + 32 : code\
    \ - 32;\n      result += checkVowel(code);\n    } else {\n      result += message[i];\n\
    \    }\n  }\n  return result;\n}\n", "    const v = {\n        a: \"c\",\n   \
    \     e: \"g\",\n        i: \"k\",\n        o: \"q\",\n        u: \"w\",\n   \
    \ };\n    const vowels = Object.keys(v);\n    let result = \"\";\n    for (let\
    \ i = 0; i < message.length; i++) {\n        let char = message[i];\n        if\
    \ (vowels.includes(char.toLowerCase())) {\n            char = v[char.toLowerCase()];\n\
    \        }\n        result += char.toUpperCase() === char ? char.toLowerCase()\
    \ : char.toUpperCase();\n    }\n    return result;\n}\nencode(\"test\");\nencode(\"\
    This is a message\");", "    // initialize empty array to store the encoded message\n\
    \    let encoded = [];\n    // for each letter in the message\n    for (let i\
    \ = 0; i < message.length; i++) {\n        // get the character code of the letter\n\
    \        let charCode = message.charCodeAt(i);\n        // check if the character\
    \ is a letter\n        if (isLetter(charCode)) {\n            // check if the\
    \ character is uppercase\n            if (isUpperCase(charCode)) {\n         \
    \       // get the integer code of the lowercase letter\n                charCode\
    \ = getLowerCase(charCode);\n            }\n            // check if the letter\
    \ is a vowel\n            if (isVowel(charCode)) {\n                // increment\
    \ the charCode by 2 to encode it\n                charCode += 2;\n           \
    \     // if the code is greater than the 'z' character, wrap it around\n     \
    \           if (charCode > 122) {\n                    charCode -= 26;\n     \
    \           }\n            }\n            // add the encoded character to the\
    \ end of the array\n            encoded.push(String.fromCharCode(charCode));\n\
    \        } else {\n            // if the character is not a letter, just copy\
    \ it from the message\n            encoded.push(message[i]);\n        }\n    }\n\
    \    // return the array as a string\n    return encoded.join('');\n}\n", "  let\
    \ encodeMessage = \"\";\n  const vowels = \"aeiou\";\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i].toLowerCase()))\
    \ {\n      let index = vowels.indexOf(message[i].toLowerCase());\n      if (message[i]\
    \ === message[i].toUpperCase()) {\n        encodeMessage += vowels[(index + 2)\
    \ % 5].toUpperCase();\n      } else {\n        encodeMessage += vowels[(index\
    \ + 2) % 5];\n      }\n    } else if (alphabet.includes(message[i].toLowerCase()))\
    \ {\n      let index = alphabet.indexOf(message[i].toLowerCase());\n      if (message[i]\
    \ === message[i].toUpperCase()) {\n        encodeMessage += alphabet[(index +\
    \ 13) % 26].toUpperCase();\n      } else {\n        encodeMessage += alphabet[(index\
    \ + 13) % 26];\n      }\n    } else {\n      encodeMessage += message[i];\n  \
    \  }\n  }\n  return encodeMessage;\n}\n", "    let encoded: string = \"\";\n \
    \   for (let i = 0; i < message.length; i++) {\n        if (/[a-z]/.test(message[i]))\
    \ {\n            encoded += message[i].toUpperCase();\n        } else if (/[A-Z]/.test(message[i]))\
    \ {\n            encoded += message[i].toLowerCase();\n        } else {\n    \
    \        encoded += message[i];\n        }\n    }\n    return encoded;\n}\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));", "  const VOWELS = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n  const ALPHABET = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  const isVowel = (letter: string): boolean => VOWELS.includes(letter);\n \
    \ const encodeLetter = (letter: string): string => {\n    let encodedLetter =\
    \ \"\";\n    if (isVowel(letter)) {\n      const index = ALPHABET.indexOf(letter);\n\
    \      if (index + 2 < ALPHABET.length) {\n        encodedLetter = ALPHABET[index\
    \ + 2];\n      } else {\n        encodedLetter = ALPHABET[index + 2 - ALPHABET.length];\n\
    \      }\n    } else {\n      encodedLetter = letter;\n    }\n    return isUpperCase(letter)\
    \ ? encodedLetter.toUpperCase() : encodedLetter;\n  };\n  const encodeMessage\
    \ = (message: string): string => {\n    let result = \"\";\n    for (let i = 0;\
    \ i < message.length; i++) {\n      result += encodeLetter(message[i]);\n    }\n\
    \    return result;\n  };\n  return encodeMessage(message);\n}\n", "    // your\
    \ code here\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded: string\
    \ = '';\n    for (let i = 0; i < message.length; i++) {\n        let char: string\
    \ = message[i];\n        if (vowels.includes(char.toLowerCase())) {\n        \
    \    let index: number = vowels.indexOf(char.toLowerCase());\n            if (index\
    \ === 4) {\n                index = -1;\n            }\n            encoded +=\
    \ vowels[index + 2].toUpperCase();\n        } else {\n            encoded += char.toUpperCase();\n\
    \        }\n    }\n    return encoded;\n}\n\nconsole.log(encode(\"test\"));\n\
    console.log(encode(\"This is a message\"));\n", "    let newMessage: string =\
    \ \"\";\n    let lowercase: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let\
    \ uppercase: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let vowels: string\
    \ = \"aeiou\";\n    for (let i: number = 0; i < message.length; i++) {\n     \
    \   let char: string = message[i];\n        if (lowercase.indexOf(char) > -1)\
    \ {\n            newMessage += lowercase[(lowercase.indexOf(char) + 13) % 26];\n\
    \        } else if (uppercase.indexOf(char) > -1) {\n            newMessage +=\
    \ uppercase[(uppercase.indexOf(char) + 13) % 26];\n        } else {\n        \
    \    newMessage += char;\n        }\n    }\n    return newMessage;\n}\n", "  \
    \  const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encodedMessage = '';\n \
    \   for (let i = 0; i < message.length; i++) {\n        let c = message[i];\n\
    \        if (vowels.includes(c.toLowerCase())) {\n            c = nextChar(c,\
    \ 2);\n        }\n        c = swapCase(c);\n        encodedMessage += c;\n   \
    \ }\n    return encodedMessage;\n}\n", "    let newMsg: string = \"\";\n    let\
    \ englishAlphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        let char: string = message[i];\n  \
    \      if (isUpperCase(char)) {\n            char = char.toLowerCase();\n    \
    \        newMsg += char;\n        } else if (isLowerCase(char)) {\n          \
    \  char = char.toUpperCase();\n            newMsg += char;\n        } else {\n\
    \            newMsg += char;\n        }\n    }\n    return newMsg;\n}", "    let\
    \ result = '';\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let currChar = message[i];\n\
    \        if (vowels.includes(currChar)) {\n            const currCharIndex = alphabet.indexOf(currChar.toLowerCase());\n\
    \            const vowelIndex = (currCharIndex + 2) % alphabet.length;\n     \
    \       currChar = alphabet[vowelIndex];\n        }\n        result += currChar;\n\
    \    }\n    return result;\n}\nconsole.log(encode('test'));\nconsole.log(encode('This\
    \ is a message'));\n", "    const vowels = 'aeiouAEIOU'\n    const vowelsArr =\
    \ vowels.split('')\n    const vowelsHash: any = {}\n    for (let i = 0; i < vowelsArr.length;\
    \ i++) {\n        vowelsHash[vowelsArr[i]] = vowelsArr[(i + 2) % vowelsArr.length]\n\
    \    }\n    let ans = ''\n    for (let i = 0; i < message.length; i++) {\n   \
    \     if (vowelsHash[message[i]]) {\n            ans += vowelsHash[message[i]]\n\
    \        } else if (message[i] === message[i].toUpperCase()) {\n            ans\
    \ += message[i].toLowerCase()\n        } else {\n            ans += message[i].toUpperCase()\n\
    \        }\n    }\n    return ans\n}\n", "    // write your code here\n    let\
    \ result = \"\";\n    for (let i = 0; i < message.length; i++) {\n        result\
    \ += message[i].toUpperCase() === message[i] ? message[i].toLowerCase() : message[i].toUpperCase();\n\
    \    }\n    return result;\n}\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let cipher = \"\";\n    for (let i = 0; i < message.length; i++) {\n  \
    \      let char = message[i];\n        let index = alphabet.indexOf(char.toLowerCase());\n\
    \        // handle case where character is not in alphabet\n        if (index\
    \ === -1) {\n            cipher += char;\n        } else {\n            // handle\
    \ the case where the character is a vowel\n            if (char === \"a\" || char\
    \ === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n       \
    \         let newIndex = index + 2;\n                // handle the case where\
    \ the new index is larger than the length of the alphabet\n                if\
    \ (newIndex > alphabet.length - 1) {\n                    newIndex = newIndex\
    \ - alphabet.length;\n                }\n                cipher += alphabet[newIndex];\n\
    \            } else {\n                // handle the case where the character\
    \ is not a vowel\n                cipher += char;\n            }\n        }\n\
    \    }\n    return cipher;\n}\n", "    let vowels = 'aeiou'\n    let encoded =\
    \ ''\n    for (let char of message) {\n        let newChar = char\n        if\
    \ (vowels.includes(char.toLowerCase())) {\n            let index = vowels.indexOf(char.toLowerCase())\n\
    \            newChar = vowels[(index + 2) % 5]\n        }\n        encoded +=\
    \ newChar.toUpperCase() === char ? newChar.toLowerCase() : newChar.toUpperCase()\n\
    \    }\n    return encoded\n}\n\nconsole.log(encode('This is a message'))", " \
    \   return message.replace(/[A-Z]/g, (match) => String.fromCharCode(match.charCodeAt(0)\
    \ + 32))\n        .replace(/[a-z]/g, (match) => {\n            switch (match)\
    \ {\n                case 'a':\n                    return 'c';\n            \
    \    case 'e':\n                    return 'g';\n                case 'i':\n \
    \                   return 'k';\n                case 'o':\n                 \
    \   return 'q';\n                case 'u':\n                    return 'y';\n\
    \                default:\n                    return String.fromCharCode(match.charCodeAt(0)\
    \ - 32);\n            }\n        });\n}\n", "    let newMessage: string = \"\"\
    ;\n    let alpha = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    for (let i = 0; i < message.length;\
    \ i++) {\n        if (message[i] === message[i].toUpperCase()) {\n           \
    \ newMessage += message[i].toLowerCase();\n        } else {\n            newMessage\
    \ += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n\
    let msg = \"This is a message\";\nlet encoded = encode(msg);\nconsole.log(encoded);",
  "  let encodedMsg = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (let\
    \ i = 0; i < message.length; i++) {\n    let index = alphabet.indexOf(message[i].toLowerCase());\n\
    \    if (index > -1) {\n      let shiftedIndex = (index + 2) % alphabet.length;\n\
    \      if (message[i] === message[i].toUpperCase()) {\n        encodedMsg += alphabet[shiftedIndex].toUpperCase();\n\
    \      } else {\n        encodedMsg += alphabet[shiftedIndex];\n      }\n    }\
    \ else {\n      encodedMsg += message[i];\n    }\n  }\n  return encodedMsg;\n\
    }\n", "    let output: string = '';\n    const vowels: string[] = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let str: string[] = message.split('');\n    for (let i: number\
    \ = 0; i < str.length; i++) {\n        if (str[i] === str[i].toUpperCase()) {\n\
    \            str[i] = str[i].toLowerCase();\n        } else {\n            str[i]\
    \ = str[i].toUpperCase();\n        }\n        for (let j: number = 0; j < vowels.length;\
    \ j++) {\n            if (str[i] === vowels[j]) {\n                if (vowels[j]\
    \ === 'u') {\n                    str[i] = 'a';\n                } else {\n  \
    \                  str[i] = vowels[j + 1];\n                }\n            }\n\
    \        }\n        output += str[i];\n    }\n    return output;\n}\nconsole.log(encode('test'));\n\
    console.log(encode('This is a message'));", "  let result: string = \"\";\n  for\
    \ (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char.match(/[A-Z]/))\
    \ {\n      result += char.toLowerCase();\n    } else if (char.match(/[a-z]/))\
    \ {\n      result += char.toUpperCase();\n    } else {\n      result += char;\n\
    \    }\n  }\n  return result;\n}\n", "    let result: string = \"\";\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let originalLetter: string =\
    \ message[i];\n        if (originalLetter.toUpperCase() === originalLetter) {\n\
    \            originalLetter = originalLetter.toLowerCase();\n        } else {\n\
    \            originalLetter = originalLetter.toUpperCase();\n        }\n     \
    \   if (originalLetter === \"a\") {\n            result += \"c\";\n        } else\
    \ if (originalLetter === \"e\") {\n            result += \"g\";\n        } else\
    \ if (originalLetter === \"i\") {\n            result += \"k\";\n        } else\
    \ if (originalLetter === \"o\") {\n            result += \"q\";\n        } else\
    \ if (originalLetter === \"u\") {\n            result += \"y\";\n        } else\
    \ {\n            result += originalLetter;\n        }\n    }\n    return result;\n\
    }", "  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var vowelsEncode =\
    \ [\"c\", \"g\", \"k\", \"o\", \"s\"];\n  var messageUpperCase = message.toUpperCase();\n\
    \  var messageLength = message.length;\n  var messageEncoded = \"\";\n  for (var\
    \ i = 0; i < messageLength; i++) {\n    var messageChar = messageUpperCase[i];\n\
    \    if (messageChar === messageChar.toUpperCase()) {\n      messageEncoded +=\
    \ messageChar.toLowerCase();\n    } else {\n      messageEncoded += messageChar.toUpperCase();\n\
    \    }\n    for (var j = 0; j < vowels.length; j++) {\n      if (messageChar ===\
    \ vowels[j]) {\n        messageEncoded = messageEncoded.replace(\n          messageChar,\n\
    \          vowelsEncode[j]\n        );\n      }\n    }\n  }\n  return messageEncoded;\n\
    }\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n",
  "    let result: string = '';\n    message.split('').forEach(char => {\n       \
    \ if (char === char.toUpperCase()) {\n            result += char.toLowerCase();\n\
    \        } else {\n            result += char.toUpperCase();\n        }\n    });\n\
    \    return result;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n", "    let encodedMessage: string = \"\";\n    let alphabet:\
    \ string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let character: string = message[i];\n        let encodedCharacter:\
    \ string = character;\n        if (character.match(/[a-z]/i)) {\n            let\
    \ index: number = alphabet.indexOf(character.toUpperCase());\n            if (index\
    \ < 0) {\n                throw new Error(\"Cannot find alphabet index for: \"\
    \ + character);\n            }\n            let encodedIndex: number = index +\
    \ 2;\n            if (encodedIndex >= alphabet.length) {\n                encodedIndex\
    \ -= alphabet.length;\n            }\n            encodedCharacter = alphabet[encodedIndex];\n\
    \            if (character.match(/[a-z]/)) {\n                encodedCharacter\
    \ = encodedCharacter.toLowerCase();\n            }\n        }\n        encodedMessage\
    \ += encodedCharacter;\n    }\n    return encodedMessage;\n}\n", "    let result:\
    \ string = '';\n    let alphabet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n   \
    \ message = message.toUpperCase();\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let currChar: string = message[i];\n        let index: number\
    \ = alphabet.indexOf(currChar);\n        if (index == -1) {\n            result\
    \ += currChar;\n        } else {\n            let newIndex: number = (index +\
    \ 3) % 26;\n            result += alphabet[newIndex];\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(encode('This is a message'));", "    let result: string\
    \ = \"\";\n    let vowels: string = \"aeiou\";\n    let alphabet: string = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        let index: number =\
    \ alphabet.indexOf(char.toLowerCase());\n        if (vowels.indexOf(char.toLowerCase())\
    \ !== -1) {\n            result += alphabet[(index + 2) % 26].toUpperCase();\n\
    \        } else if (alphabet.indexOf(char.toLowerCase()) !== -1) {\n         \
    \   result += alphabet[index].toUpperCase();\n        } else {\n            result\
    \ += char;\n        }\n    }\n    return result;\n}\nconsole.log(encode(\"test\"\
    ));\nconsole.log(encode(\"This is a message\"));\n", "    const alphabet: string[]\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"];\n    const vowels: string[] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let result: string = \"\";\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            result += message[i].toLowerCase();\n        } else {\n     \
    \       result += message[i].toUpperCase();\n        }\n    }\n    for (let i:\
    \ number = 0; i < result.length; i++) {\n        if (vowels.indexOf(result[i])\
    \ >= 0) {\n            result = result.replace(result[i], alphabet[vowels.indexOf(result[i])\
    \ + 2]);\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"This\
    \ is a message\"));\n", "  let encode = \"\";\n  const vowels = \"aeiou\";\n \
    \ for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n \
    \   if (vowels.includes(char.toLowerCase())) {\n      const index = vowels.indexOf(char.toLowerCase());\n\
    \      const letter = vowels[(index + 2) % vowels.length];\n      encode += letter;\n\
    \    } else {\n      encode += char;\n    }\n  }\n  return encode;\n}\n", "  \
    \  return message.split('').map(char => {\n        return char === char.toUpperCase()\
    \ ? char.toLowerCase() : char.toUpperCase();\n    }).map(char => {\n        if\
    \ (isVowel(char)) {\n            return getNextTwoVowels(char);\n        }\n \
    \       return char;\n    }).join('');\n}\n", "    var alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var output: string = \"\";\n    var letters: string[] = message.split(\"\
    \");\n    for (var i = 0; i < letters.length; i++) {\n        var currentLetter:\
    \ string = letters[i];\n        var currentLetterIndex: number = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \        if (currentLetterIndex >= 0) {\n            var encodedIndex: number\
    \ = currentLetterIndex + 2;\n            if (encodedIndex >= alphabet.length)\
    \ {\n                encodedIndex = encodedIndex - alphabet.length;\n        \
    \    }\n            var encodedLetter: string = alphabet[encodedIndex];\n    \
    \        if (currentLetter === currentLetter.toUpperCase()) {\n              \
    \  encodedLetter = encodedLetter.toUpperCase();\n            }\n            output\
    \ += encodedLetter;\n        } else {\n            output += currentLetter;\n\
    \        }\n    }\n    return output;\n}\n", "    let newMessage: string = \"\"\
    ;\n    for (let i = 0; i < message.length; i++) {\n        let currentChar: string\
    \ = message[i];\n        if (/[A-Z]/.test(currentChar)) {\n            currentChar\
    \ = currentChar.toLowerCase();\n        } else if (/[a-z]/.test(currentChar))\
    \ {\n            currentChar = currentChar.toUpperCase();\n        }\n       \
    \ if (/[aeiou]/.test(currentChar)) {\n            let newCharCode: number = currentChar.charCodeAt(0)\
    \ + 2;\n            if (newCharCode > 122) {\n                newCharCode -= 26;\n\
    \            }\n            currentChar = String.fromCharCode(newCharCode);\n\
    \        }\n        newMessage += currentChar;\n    }\n    return newMessage;\n\
    }\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));",
  "    const notEncodedVowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const encodedVowels\
    \ = [\"c\", \"g\", \"k\", \"o\", \"s\"];\n    let encodedString = '';\n    for\
    \ (let i = 0; i < message.length; i++) {\n        let char = message[i];\n   \
    \     if (char === char.toUpperCase()) {\n            encodedString += char.toLowerCase();\n\
    \        } else {\n            encodedString += char.toUpperCase();\n        }\n\
    \        if (notEncodedVowels.includes(char)) {\n            encodedString = encodedString.slice(0,\
    \ encodedString.length - 1) + encodedVowels[notEncodedVowels.indexOf(char)];\n\
    \        }\n    }\n    return encodedString;\n}\n", "  return message\n    .split(\"\
    \")\n    .map(function(char, index) {\n      const isUpperCase = char.toUpperCase()\
    \ === char;\n      const isLowerCase = char.toLowerCase() === char;\n      if\
    \ (isUpperCase) {\n        return char.toLowerCase();\n      } else if (isLowerCase)\
    \ {\n        return char.toUpperCase();\n      } else {\n        return char;\n\
    \      }\n    })\n    .join(\"\");\n}", "    let messageArr = message.split(\"\
    \");\n    for (let i = 0; i < messageArr.length; i++) {\n        let code: number\
    \ = messageArr[i].charCodeAt(0);\n        if (code >= 65 && code <= 90) {\n  \
    \          messageArr[i] = String.fromCharCode(code + 32);\n        } else if\
    \ (code >= 97 && code <= 122) {\n            messageArr[i] = String.fromCharCode(code\
    \ - 32);\n        } else if (code === 97) {\n            messageArr[i] = \"c\"\
    ;\n        } else if (code === 101) {\n            messageArr[i] = \"f\";\n  \
    \      } else if (code === 105) {\n            messageArr[i] = \"j\";\n      \
    \  } else if (code === 111) {\n            messageArr[i] = \"n\";\n        } else\
    \ if (code === 117) {\n            messageArr[i] = \"r\";\n        }\n    }\n\
    \    return messageArr.join(\"\");\n}\nconsole.log(encode(\"This is a message\"\
    ));\n", "    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let encodedMessage:\
    \ string = \"\";\n    for (let i: number = 0; i < message.length; i++) {\n   \
    \     let currentChar: string = message[i];\n        if (currentChar === currentChar.toUpperCase())\
    \ {\n            currentChar = currentChar.toLowerCase();\n            encodedMessage\
    \ += currentChar;\n        } else if (currentChar === currentChar.toLowerCase())\
    \ {\n            currentChar = currentChar.toUpperCase();\n            encodedMessage\
    \ += currentChar;\n        }\n        if (currentChar == \"a\") {\n          \
    \  encodedMessage += \"c\";\n        } else if (currentChar == \"e\") {\n    \
    \        encodedMessage += \"g\";\n        } else if (currentChar == \"i\") {\n\
    \            encodedMessage += \"k\";\n        } else if (currentChar == \"o\"\
    ) {\n            encodedMessage += \"q\";\n        } else if (currentChar == \"\
    u\") {\n            encodedMessage += \"w\";\n        } else {\n            encodedMessage\
    \ += currentChar;\n        }\n    }\n    return encodedMessage;\n}\nconsole.log(encode(\"\
    hello\"));\nconsole.log(encode(\"This is a message\"));\n", "    let str: string\
    \ = \"\";\n    let final: string = \"\";\n    const vowels: string[] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    const alphabet: string[] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n    for (let index = 0; index < message.length; index++) {\n\
    \        const element = message[index];\n        if (element === element.toUpperCase())\
    \ {\n            str += element.toLowerCase();\n        } else {\n           \
    \ str += element.toUpperCase();\n        }\n    }\n    for (let index = 0; index\
    \ < str.length; index++) {\n        const letter = str[index];\n        if (vowels.includes(letter))\
    \ {\n            const vowelIndex = vowels.indexOf(letter);\n            if (vowelIndex\
    \ + 2 < vowels.length) {\n                final += vowels[vowelIndex + 2];\n \
    \           } else {\n                final += vowels[vowelIndex + 2 - vowels.length];\n\
    \            }\n        } else {\n            final += letter;\n        }\n  \
    \  }\n    return final;\n}\n", "  let result: string = \"\";\n  for (let i = 0;\
    \ i < message.length; i++) {\n    let temp: string = message[i];\n    if (isUpperCase(temp))\
    \ {\n      temp = temp.toLowerCase();\n    } else {\n      temp = temp.toUpperCase();\n\
    \    }\n    if (isVowel(temp)) {\n      switch (temp) {\n        case \"a\":\n\
    \          temp = \"c\";\n          break;\n        case \"e\":\n          temp\
    \ = \"g\";\n          break;\n        case \"i\":\n          temp = \"k\";\n \
    \         break;\n        case \"o\":\n          temp = \"q\";\n          break;\n\
    \        case \"u\":\n          temp = \"y\";\n          break;\n        case\
    \ \"y\":\n          temp = \"a\";\n          break;\n        case \"c\":\n   \
    \       temp = \"e\";\n          break;\n        case \"g\":\n          temp =\
    \ \"i\";\n          break;\n        case \"k\":\n          temp = \"o\";\n   \
    \       break;\n        case \"q\":\n          temp = \"u\";\n          break;\n\
    \      }\n    }\n    result += temp;\n  }\n  return result;\n}\n", "    let encoded\
    \ = \"\";\n    let messageLetters = message.split(\"\");\n    for (let i = 0;\
    \ i < messageLetters.length; i++) {\n        let currentLetter = messageLetters[i];\n\
    \        if (currentLetter !== currentLetter.toLowerCase()) {\n            encoded\
    \ += currentLetter.toLowerCase();\n        } else {\n            encoded += currentLetter.toUpperCase();\n\
    \        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ let shiftedVowels = [];\n    for (let i = 0; i < vowels.length; i++) {\n   \
    \     shiftedVowels.push(vowels[i].charCodeAt(0) + 2);\n    }\n    let encodedLetters\
    \ = encoded.split(\"\");\n    for (let i = 0; i < encodedLetters.length; i++)\
    \ {\n        let currentLetter = encodedLetters[i];\n        if (vowels.includes(currentLetter))\
    \ {\n            let index = vowels.indexOf(currentLetter);\n            encodedLetters[i]\
    \ = String.fromCharCode(shiftedVowels[index]);\n        }\n    }\n    return encodedLetters.join(\"\
    \");\n}", "    // Put code here!\n    return \"\";\n}\n", "    let newMessage:\
    \ string = '';\n    for (let i = 0; i < message.length; i++) {\n        if (message[i]\
    \ === message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n\
    \        } else {\n            newMessage += message[i].toUpperCase();\n     \
    \   }\n    }\n    for (let i = 0; i < newMessage.length; i++) {\n        if (newMessage[i]\
    \ === 'a') {\n            newMessage = newMessage.slice(0, i) + 'c' + newMessage.slice(i\
    \ + 1);\n        } else if (newMessage[i] === 'e') {\n            newMessage =\
    \ newMessage.slice(0, i) + 'g' + newMessage.slice(i + 1);\n        } else if (newMessage[i]\
    \ === 'i') {\n            newMessage = newMessage.slice(0, i) + 'k' + newMessage.slice(i\
    \ + 1);\n        } else if (newMessage[i] === 'o') {\n            newMessage =\
    \ newMessage.slice(0, i) + 'q' + newMessage.slice(i + 1);\n        } else if (newMessage[i]\
    \ === 'u') {\n            newMessage = newMessage.slice(0, i) + 's' + newMessage.slice(i\
    \ + 1);\n        }\n    }\n    return newMessage;\n}\nconsole.log(encode('test'));\n\
    console.log(encode('This is a message'));", "    let lowerCaseAlphabet: string\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    let upperCaseAlphabet: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    let vowels: string = \"aeiou\";\n    let encodedStr: string = \"\";\n \
    \   let letterIndex: number = 0;\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let char: string = message[i];\n        if (char.match(/\\s/))\
    \ {\n            encodedStr += \" \";\n        } else if (lowerCaseAlphabet.indexOf(char)\
    \ >= 0) {\n            if (vowels.indexOf(char) >= 0) {\n                encodedStr\
    \ += lowerCaseAlphabet[(lowerCaseAlphabet.indexOf(char) + 2) % 26];\n        \
    \    } else {\n                encodedStr += lowerCaseAlphabet[(lowerCaseAlphabet.indexOf(char)\
    \ + 26) % 26];\n            }\n        } else if (upperCaseAlphabet.indexOf(char)\
    \ >= 0) {\n            if (vowels.indexOf(char.toLowerCase()) >= 0) {\n      \
    \          encodedStr += upperCaseAlphabet[(upperCaseAlphabet.indexOf(char) +\
    \ 2) % 26];\n            } else {\n                encodedStr += upperCaseAlphabet[(upperCaseAlphabet.indexOf(char)\
    \ + 26) % 26];\n            }\n        }\n    }\n    return encodedStr;\n}\n",
  "    let encodedMessage: string = '';\n    const vowels: string[] = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    for (let letter of message) {\n        if (letter === letter.toUpperCase())\
    \ {\n            if (vowels.includes(letter.toLowerCase())) {\n              \
    \  let encoding = vowels.indexOf(letter.toLowerCase()) + 2;\n                encoding\
    \ = encoding >= vowels.length ? encoding - vowels.length : encoding;\n       \
    \         encodedMessage += vowels[encoding].toUpperCase();\n            } else\
    \ {\n                encodedMessage += letter.toLowerCase();\n            }\n\
    \        } else {\n            if (vowels.includes(letter)) {\n              \
    \  let encoding = vowels.indexOf(letter) + 2;\n                encoding = encoding\
    \ >= vowels.length ? encoding - vowels.length : encoding;\n                encodedMessage\
    \ += vowels[encoding];\n            } else {\n                encodedMessage +=\
    \ letter.toUpperCase();\n            }\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconsole.log(encode('This is a message'));", "  const vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n  const letters = [...message];\n  const lettersArr\
    \ = letters.map((char: string) => {\n    if (char.match(/[A-Z]/)) {\n      return\
    \ char.toLowerCase();\n    } else if (char.match(/[a-z]/)) {\n      return char.toUpperCase();\n\
    \    } else {\n      return char;\n    }\n  });\n  const vowelsArr = lettersArr.map((char:\
    \ string) => {\n    if (vowels.includes(char)) {\n      return vowels[vowels.indexOf(char)\
    \ + 2];\n    } else {\n      return char;\n    }\n  });\n  return vowelsArr.join(\"\
    \");\n}\n", "  let encodedMessage = \"\";\n  for (let char of message) {\n   \
    \ if (char == char.toUpperCase()) {\n      encodedMessage += char.toLowerCase();\n\
    \    } else {\n      encodedMessage += char.toUpperCase();\n    }\n  }\n  let\
    \ modifiedMessage = \"\";\n  for (let i = 0; i < encodedMessage.length; i++) {\n\
    \    switch (encodedMessage[i]) {\n      case \"a\":\n        modifiedMessage\
    \ += \"c\";\n        break;\n      case \"e\":\n        modifiedMessage += \"\
    g\";\n        break;\n      case \"i\":\n        modifiedMessage += \"k\";\n \
    \       break;\n      case \"o\":\n        modifiedMessage += \"q\";\n       \
    \ break;\n      case \"u\":\n        modifiedMessage += \"w\";\n        break;\n\
    \      default:\n        modifiedMessage += encodedMessage[i];\n    }\n  }\n \
    \ return modifiedMessage;\n}\n", "    return message.split('').map(letter => {\n\
    \        if (isVowel(letter)) {\n            return getVowel(getValue(letter)\
    \ + 2);\n        }\n        if (isUpperCase(letter)) {\n            return letter.toLowerCase();\n\
    \        }\n        if (isLowerCase(letter)) {\n            return letter.toUpperCase();\n\
    \        }\n        return letter;\n    }).join('');\n}\n\nexport default encode;",
  "    let newWord: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        if (message[i] === message[i].toUpperCase()) {\n            if (message[i]\
    \ === \"Z\") {\n                newWord += \"B\";\n            } else if (message[i]\
    \ === \"Y\") {\n                newWord += \"A\";\n            } else {\n    \
    \            newWord += String.fromCharCode(message.charCodeAt(i) + 2).toLowerCase();\n\
    \            }\n        } else {\n            if (message[i] === \"z\") {\n  \
    \              newWord += \"b\";\n            } else if (message[i] === \"y\"\
    ) {\n                newWord += \"a\";\n            } else {\n               \
    \ newWord += String.fromCharCode(message.charCodeAt(i) + 2);\n            }\n\
    \        }\n    }\n    return newWord;\n}\n", "    const vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let codedMsg = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        const char = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            codedMsg += char.toLowerCase();\n        } else {\n         \
    \   codedMsg += char.toUpperCase();\n        }\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            const idx = vowels.indexOf(char.toLowerCase());\n           \
    \ const nextIdx = idx === vowels.length - 1 ? 0 : idx + 1;\n            codedMsg\
    \ += vowels[nextIdx];\n        }\n    }\n    return codedMsg;\n}\n", "    return\
    \ \"\";\n}\n", "    return message.split('').map(char => {\n        return char\
    \ === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    }).map(char\
    \ => {\n        const index = 'abcdefghijklmnopqrstuvwxyz'.indexOf(char);\n  \
    \      return index === -1 ? char : 'cdefghijklmnopqrstuvwxyzab'[index];\n   \
    \ }).join('');\n}\n", "    let encode: string = \"\";\n    for (let i = 0; i <\
    \ message.length; i++) {\n        let ch = message.charAt(i);\n        if (ch\
    \ == ch.toUpperCase()) {\n            encode += ch.toLowerCase();\n        } else\
    \ {\n            encode += ch.toUpperCase();\n        }\n    }\n    return encode;\n\
    }\nconsole.log(encode(\"tHKS KS C MGSSCGG\"));", "    let encodedMessage: string\
    \ = \"\";\n    for (let index = 0; index < message.length; index++) {\n      \
    \  const code = message.charCodeAt(index);\n        if (code >= 97 && code <=\
    \ 122) {\n            // lower case -> upper case\n            encodedMessage\
    \ += String.fromCharCode(code - 32);\n        } else if (code >= 65 && code <=\
    \ 90) {\n            // upper case -> lower case\n            encodedMessage +=\
    \ String.fromCharCode(code + 32);\n        } else {\n            encodedMessage\
    \ += message[index];\n        }\n    }\n    // vowels that need to be replaced\n\
    \    const vowels = {\n        a: 1,\n        e: 1,\n        i: 1,\n        o:\
    \ 1,\n        u: 1,\n    };\n    let encodedMessage2: string = \"\";\n    for\
    \ (let index = 0; index < encodedMessage.length; index++) {\n        const code\
    \ = encodedMessage.charCodeAt(index);\n        if (vowels[encodedMessage[index]])\
    \ {\n            encodedMessage2 += String.fromCharCode(code + 2);\n        }\
    \ else {\n            encodedMessage2 += encodedMessage[index];\n        }\n \
    \   }\n    return encodedMessage2;\n}", "    let str: string = \"\";\n    for\
    \ (let i: number = 0; i < message.length; i++) {\n        if (message[i] == message[i].toUpperCase())\
    \ {\n            str += message[i].toLowerCase();\n        } else {\n        \
    \    str += message[i].toUpperCase();\n        }\n    }\n    let newString: string\
    \ = \"\";\n    for (let i: number = 0; i < str.length; i++) {\n        if (str[i]\
    \ == \"a\") {\n            newString += \"c\";\n        } else if (str[i] == \"\
    e\") {\n            newString += \"g\";\n        } else if (str[i] == \"i\") {\n\
    \            newString += \"k\";\n        } else if (str[i] == \"o\") {\n    \
    \        newString += \"q\";\n        } else if (str[i] == \"u\") {\n        \
    \    newString += \"y\";\n        } else {\n            newString += str[i];\n\
    \        }\n    }\n    return newString;\n}\nconsole.log(encode(\"This is a message\"\
    ));\n", "  let result: string = \"\";\n  for (let i = 0; i < message.length; i++)\
    \ {\n    let letter: string = message[i];\n    if (letter === letter.toUpperCase())\
    \ {\n      result += letter.toLowerCase();\n    } else {\n      result += letter.toUpperCase();\n\
    \    }\n  }\n  return result;\n}\n", "    var vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    var result = \"\";\n    var letter: string;\n    for (var i\
    \ = 0; i < message.length; i++) {\n        letter = message[i];\n        if (letter\
    \ >= \"a\" && letter <= \"z\") {\n            if (vowels.indexOf(letter) != -1)\
    \ {\n                letter = vowels[(vowels.indexOf(letter) + 2) % 5];\n    \
    \        }\n            result += letter.toUpperCase();\n        } else if (letter\
    \ >= \"A\" && letter <= \"Z\") {\n            if (vowels.indexOf(letter.toLowerCase())\
    \ != -1) {\n                letter = vowels[(vowels.indexOf(letter.toLowerCase())\
    \ + 2) % 5];\n            }\n            result += letter.toLowerCase();\n   \
    \     } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\n", "  const encoded = message.split('').map(char => {\n    let index = char.charCodeAt(0);\n\
    \    if (char === char.toUpperCase()) {\n      if (index === 90) {\n        index\
    \ = 65;\n      } else {\n        index++;\n      }\n    } else if (char === char.toLowerCase())\
    \ {\n      if (index === 122) {\n        index = 97;\n      } else {\n       \
    \ index++;\n      }\n    }\n    if ('aeiou'.includes(char.toLowerCase())) {\n\
    \      index += 2;\n    }\n    return String.fromCharCode(index);\n  });\n  return\
    \ encoded.join('');\n}\n\nexport {\n  getAverage,\n  validateInput,\n  encode\n\
    };", "\tlet alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\tlet encodedMessage = '';\n\
    \tlet char = '';\n\tlet charIndex = 0;\n\tlet letterFound = false;\n\tfor (let\
    \ i = 0; i < message.length; i++) {\n\t\tchar = message[i];\n\t\tletterFound =\
    \ false;\n\t\tfor (let j = 0; j < alphabet.length; j++) {\n\t\t\tif (char ===\
    \ alphabet[j] || char === alphabet[j].toUpperCase()) {\n\t\t\t\tcharIndex = j;\n\
    \t\t\t\tletterFound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (letterFound)\
    \ {\n\t\t\tlet newChar = '';\n\t\t\tif (char === char.toUpperCase()) {\n\t\t\t\
    \tif (charIndex + 2 >= alphabet.length) {\n\t\t\t\t\tnewChar = alphabet[(charIndex\
    \ + 2) - alphabet.length].toUpperCase();\n\t\t\t\t} else {\n\t\t\t\t\tnewChar\
    \ = alphabet[charIndex + 2].toUpperCase();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t\
    if (charIndex + 2 >= alphabet.length) {\n\t\t\t\t\tnewChar = alphabet[(charIndex\
    \ + 2) - alphabet.length];\n\t\t\t\t} else {\n\t\t\t\t\tnewChar = alphabet[charIndex\
    \ + 2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tencodedMessage += newChar;\n\t\t} else {\n\t\
    \t\tencodedMessage += char;\n\t\t}\n\t}\n\treturn encodedMessage;\n}\n", "  var\
    \ encodedMessage = \"\";\n  var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n \
    \ for (var i = 0; i < message.length; i++) {\n    var char = message[i];\n   \
    \ var charIndex = alphabet.indexOf(char.toUpperCase());\n    if (charIndex ===\
    \ -1) {\n      encodedMessage += char;\n    } else {\n      var shiftIndex = charIndex;\n\
    \      if (charIndex === 25) {\n        shiftIndex = 1;\n      } else if (charIndex\
    \ === 24) {\n        shiftIndex = 0;\n      } else {\n        shiftIndex += 2;\n\
    \      }\n      var encodedChar = alphabet[shiftIndex];\n      if (char === char.toLowerCase())\
    \ {\n        encodedChar = encodedChar.toLowerCase();\n      }\n      encodedMessage\
    \ += encodedChar;\n    }\n  }\n  return encodedMessage;\n}\n", "  let alphabet:\
    \ string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let encodeMessage: string = \"\"\
    ;\n  for (let i: number = 0; i < message.length; i++) {\n    let index: number\
    \ = alphabet.indexOf(message[i].toUpperCase());\n    if (index === -1) {\n   \
    \   encodeMessage += message[i];\n    } else {\n      if (message[i] === message[i].toUpperCase())\
    \ {\n        encodeMessage += alphabet[(index + 2) % 26].toUpperCase();\n    \
    \  } else {\n        encodeMessage += alphabet[(index + 2) % 26].toLowerCase();\n\
    \      }\n    }\n  }\n  return encodeMessage;\n}\n", "    let msg = message.toLowerCase();\n\
    \    let result = \"\";\n    for (let i = 0; i < msg.length; i++) {\n        let\
    \ code = msg.charCodeAt(i);\n        if (code >= 97 && code <= 122) {\n      \
    \      code += 2;\n            if (code > 122) {\n                code -= 26;\n\
    \            }\n            if (isVowel(code)) {\n                code += 2;\n\
    \                if (code > 122) {\n                    code -= 26;\n        \
    \        }\n            }\n        }\n        result += String.fromCharCode(code);\n\
    \    }\n    return result;\n}\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let currentCharacter = message[i];\n        if (currentCharacter\
    \ === currentCharacter.toUpperCase()) {\n            encodedMessage += currentCharacter.toLowerCase();\n\
    \        } else {\n            encodedMessage += currentCharacter.toUpperCase();\n\
    \        }\n        if (currentCharacter.match(/[aeiou]/)) {\n            let\
    \ nextCharacter = currentCharacter;\n            for (let j = 0; j < 2; j++) {\n\
    \                nextCharacter = nextCharacter.next();\n            }\n      \
    \      encodedMessage += nextCharacter;\n        }\n    }\n    return encodedMessage;\n\
    }\nconsole.log(encode(\"this is a message\"));", "  let result: string = \"\"\
    ;\n  for (let i = 0; i < message.length; i++) {\n    let letter: string = message[i];\n\
    \    if (letter.toUpperCase() === letter) {\n      result += letter.toLowerCase();\n\
    \    } else {\n      result += letter.toUpperCase();\n    }\n    if (\n      letter\
    \ === \"a\" ||\n      letter === \"e\" ||\n      letter === \"i\" ||\n      letter\
    \ === \"o\" ||\n      letter === \"u\"\n    ) {\n      result = result.slice(0,\
    \ result.length - 1);\n      result += nextVowel(letter);\n    }\n  }\n  return\
    \ result;\n}\n", "    let result: string = '';\n    let vowels: string = 'aeiou';\n\
    \    let alpha: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        let currentChar: string = message[i];\n\
    \        if (vowels.indexOf(currentChar) !== -1) {\n            result += alpha[(alpha.indexOf(currentChar)\
    \ + 2) % 26];\n        } else if (alpha.indexOf(currentChar) !== -1) {\n     \
    \       result += alpha[(alpha.indexOf(currentChar) + 13) % 26];\n        } else\
    \ {\n            result += currentChar;\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(encode('hello'));\nconsole.log(encode('How are you doing today?'));\n",
  "    return message.split('').map(letter => {\n        return letter.toUpperCase()\
    \ === letter ? encodeToLowerCase(letter) : encodeToUpperCase(letter);\n    }).join('');\n\
    }\n", "    let result: string = \"\";\n    const vowels: string[] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    const newVowels: string[] = [\"c\", \"f\", \"\
    i\", \"l\", \"o\"];\n    for (let i: number = 0; i < message.length; i++) {\n\
    \        let current: string = message[i];\n        if (current == current.toUpperCase())\
    \ {\n            result += current.toLowerCase();\n        } else {\n        \
    \    result += current.toUpperCase();\n        }\n        if (vowels.indexOf(current)\
    \ != -1) {\n            result = result.replace(current, newVowels[vowels.indexOf(current)]);\n\
    \        }\n    }\n    return result;\n}\n", "    let vowels = \"aeiou\";\n  \
    \  let encoded: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let char = message[i];\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let nextChar = message[i + 1];\n            if (nextChar) {\n\
    \                encoded += nextChar;\n                i++;\n            }\n \
    \       } else {\n            encoded += char;\n        }\n    }\n    return encoded;\n\
    }\n", "    const isVowel = (c: string): boolean => {\n        switch (c) {\n \
    \           case 'a':\n            case 'e':\n            case 'i':\n        \
    \    case 'o':\n            case 'u':\n                return true;\n        \
    \    default:\n                return false;\n        }\n    }\n    return message.split('').map(c\
    \ => {\n        if (isVowel(c)) {\n            return String.fromCharCode(c.charCodeAt(0)\
    \ + 2);\n        } else {\n            return c.toUpperCase();\n        }\n  \
    \  }).join('');\n}\n\nconst encodeTest = (message: string): void => {\n    console.log(`${message}\
    \ -> ${encode(message)}`);\n}\n\nencodeTest('test');\nencodeTest('This is a message');",
  "    let output = '';\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    let\
    \ vowels = 'aeiou'\n    for (let char of message) {\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            let index = vowels.indexOf(char.toLowerCase())\n            let\
    \ newIndex = index + 2\n            let newVowel = vowels[newIndex % 5]\n    \
    \        if (char === char.toUpperCase()) {\n                output += newVowel.toUpperCase()\n\
    \            } else {\n                output += newVowel\n            }\n   \
    \     } else if (alphabet.includes(char.toLowerCase())) {\n            let index\
    \ = alphabet.indexOf(char.toLowerCase())\n            let newIndex = index + 2\n\
    \            let newChar = alphabet[newIndex % 26]\n            if (char === char.toUpperCase())\
    \ {\n                output += newChar.toUpperCase()\n            } else {\n \
    \               output += newChar\n            }\n        } else {\n         \
    \   output += char\n        }\n    }\n    return output\n}\n", "    let result\
    \ = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for (let i = 0; i < message.length; i++) {\n        let currentChar = message[i]\n\
    \        let currentCharIndex = alphabet.indexOf(currentChar.toLowerCase())\n\
    \        if (currentChar == currentChar.toUpperCase()) {\n            if (vowels.includes(currentChar.toLowerCase()))\
    \ {\n                result += alphabet[(currentCharIndex + 2) % 26].toUpperCase()\n\
    \            } else {\n                result += alphabet[currentCharIndex].toUpperCase()\n\
    \            }\n        } else {\n            if (vowels.includes(currentChar))\
    \ {\n                result += alphabet[(currentCharIndex + 2) % 26]\n       \
    \     } else {\n                result += alphabet[currentCharIndex]\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    let characters: string[]\
    \ = message.split('');\n    let vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let englishAlphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'];\n    let isUpperCase: boolean;\n    let index: number;\n    let encodedMessage:\
    \ string = '';\n\n    for (let character of characters) {\n        isUpperCase\
    \ = (character === character.toUpperCase());\n        index = englishAlphabet.indexOf(character.toLowerCase());\n\
    \n        if (isUpperCase) {\n            if (vowels.indexOf(character.toLowerCase())\
    \ !== -1) {\n                encodedMessage += englishAlphabet[index + 2].toUpperCase();\n\
    \            } else {\n                encodedMessage += englishAlphabet[index].toUpperCase();\n\
    \            }\n        } else {\n            if (vowels.indexOf(character) !==\
    \ -1) {\n                encodedMessage += englishAlphabet[index + 2];\n     \
    \       } else {\n                encodedMessage += englishAlphabet[index];\n\
    \            }\n        }\n    }\n\n    return encodedMessage;\n}\n", "  return\
    \ message\n    .toUpperCase()\n    .split(\"\")\n    .map(letter => {\n      if\
    \ (vowels.includes(letter)) {\n        return vowels[(vowels.indexOf(letter) +\
    \ 2) % vowels.length];\n      } else {\n        return letter;\n      }\n    })\n\
    \    .join(\"\");\n}\n\nconsole.log(encode(\"this is a message\"));", "    //Setting\
    \ up a vars needed\n    let encoded: string = \"\";\n    let charCode: number;\n\
    \    //To change case of each letter, add 32 to the charCode value\n    for (let\
    \ i = 0; i < message.length; i++) {\n        charCode = message.charCodeAt(i);\n\
    \        if (charCode > 90) {\n            charCode -= 32;\n        } else {\n\
    \            charCode += 32;\n        }\n        //Need to change the vowels\n\
    \        if (charCode === 65 || charCode === 69 || charCode === 73 || charCode\
    \ === 79 || charCode === 85) {\n            charCode += 2;\n        }\n      \
    \  //Check if the charCode is still a letter after adding 2 (in case of vowels,\
    \ 'Z' or 'z')\n        if (charCode > 90 && charCode < 97) {\n            charCode\
    \ -= 24;\n        } else if (charCode > 122) {\n            charCode -= 24;\n\
    \        }\n        encoded += String.fromCharCode(charCode);\n    }\n    return\
    \ encoded;\n}\n", "  let vowels = \"aeiou\";\n  let result = \"\";\n  for (let\
    \ i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n\
    \      result += String.fromCharCode(message[i].charCodeAt(0) + 2);\n    } else\
    \ if (message[i] === message[i].toUpperCase()) {\n      result += message[i].toLowerCase();\n\
    \    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return\
    \ result;\n}\n", "    let letters: string[] = message.split(\"\");\n    let encoded:\
    \ string[] = [];\n    let lowerCase: string[] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let upperCase: string[] = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  \
    \  for (let i = 0; i < letters.length; i++) {\n        if (lowerCase.includes(letters[i]))\
    \ {\n            let index: number = lowerCase.indexOf(letters[i]);\n        \
    \    if (index === 4) {\n                encoded.push(lowerCase[0]);\n       \
    \     } else {\n                encoded.push(lowerCase[index + 2]);\n        \
    \    }\n        } else if (upperCase.includes(letters[i])) {\n            let\
    \ index: number = upperCase.indexOf(letters[i]);\n            if (index === 4)\
    \ {\n                encoded.push(upperCase[0]);\n            } else {\n     \
    \           encoded.push(upperCase[index + 2]);\n            }\n        } else\
    \ {\n            if (letters[i] === letters[i].toUpperCase()) {\n            \
    \    encoded.push(letters[i].toLowerCase());\n            } else {\n         \
    \       encoded.push(letters[i].toUpperCase());\n            }\n        }\n  \
    \  }\n    return encoded.join(\"\");\n}\nconsole.log(encode(\"This is a message\"\
    ));", "  let output: string = \"\";\n  for (let letter of message) {\n    if (isVowel(letter))\
    \ {\n      output += getEncodedVowel(letter);\n    } else {\n      output += getEncodedConsonant(letter);\n\
    \    }\n  }\n  return output;\n}\n", "    // YOUR CODE HERE\n    return message;\n\
    }\n", "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let result = '';\n  for (let\
    \ i = 0; i < message.length; i++) {\n    let character = message[i];\n    if (vowels.includes(character.toLowerCase()))\
    \ {\n      let index = vowels.indexOf(character.toLowerCase());\n      result\
    \ += vowels[(index + 2) % 5];\n    } else {\n      result += character;\n    }\n\
    \  }\n  return result;\n}\n", "    let result: string = '';\n    let encoded:\
    \ string = message.toUpperCase();\n    for (let i = 0; i < encoded.length; i++)\
    \ {\n        if (vowels.indexOf(encoded[i]) != -1) {\n            let newPlace:\
    \ number = vowels.indexOf(encoded[i]) + 2;\n            if (newPlace > 4) {\n\
    \                newPlace = newPlace - 5;\n            }\n            result +=\
    \ vowels[newPlace];\n        } else {\n            result += encoded[i];\n   \
    \     }\n    }\n    return result;\n}", "    let encoded = message.split('').map(e\
    \ => {\n        if(e.match(/[a-z]/i)) {\n            e = e.toUpperCase() === e\
    \ ? e.toLowerCase() : e.toUpperCase();\n            switch(e) {\n            \
    \    case 'a':\n                    return 'c';\n                case 'e':\n \
    \                   return 'g';\n                case 'i':\n                 \
    \   return 'k';\n                case 'o':\n                    return 'q';\n\
    \                case 'u':\n                    return 'y';\n                default:\n\
    \                    return e;\n            }\n        } else {\n            return\
    \ e;\n        }\n    });\n    return encoded.join('');\n}\n", "    let result:\
    \ string = '';\n    for (let i = 0; i < message.length; i++) {\n        if (isVowel(message[i]))\
    \ {\n            let upperCase: boolean = isUpperCase(message[i]);\n         \
    \   if (upperCase) {\n                result += message[i].toLowerCase();\n  \
    \          } else {\n                result += message[i].toUpperCase();\n   \
    \         }\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;\n}", "  const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  const alphabet = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n\
    \    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n\
    \    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n\
    \    'w',\n    'x',\n    'y',\n    'z',\n  ];\n  let result = '';\n  for (let\
    \ i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (char\
    \ === char.toUpperCase()) {\n      char = char.toLowerCase();\n      result +=\
    \ char;\n    } else if (char === char.toLowerCase()) {\n      char = char.toUpperCase();\n\
    \      result += char;\n    }\n    if (vowels.includes(char)) {\n      let index\
    \ = alphabet.indexOf(char);\n      char = alphabet[index + 2];\n      result +=\
    \ char;\n    }\n  }\n  return result;\n}\n", "    return message\n        .split('')\n\
    \        .map(function (character): string {\n            if (character.match(/[a-z]/i))\
    \ {\n                return encodeCharacter(character)\n            }\n      \
    \      return character\n        })\n        .join('')\n}\n", "    const vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    return message.split(\"\").map(x\
    \ => {\n        if (vowels.includes(x.toLowerCase())) {\n            return vowels[(vowels.indexOf(x.toLowerCase())\
    \ + 2) % 5].toUpperCase();\n        } else if (x.toLowerCase() === \"z\") {\n\
    \            return \"B\";\n        } else if (x.toLowerCase() === \"y\") {\n\
    \            return \"A\";\n        } else {\n            return x.toUpperCase();\n\
    \        }\n    }).join(\"\");\n}\n", "    let result: string = \"\";\n    const\
    \ vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        const letter: string = message[i];\n\
    \        const isUpperCase: boolean = isUpperCaseLetter(letter);\n        const\
    \ lowerCaseLetter: string = letter.toLowerCase();\n        if (isUpperCase) {\n\
    \            if (vowels.includes(lowerCaseLetter)) {\n                result +=\
    \ getEncodeLetter(lowerCaseLetter, true);\n            } else {\n            \
    \    result += lowerCaseLetter;\n            }\n        } else {\n           \
    \ if (vowels.includes(lowerCaseLetter)) {\n                result += getEncodeLetter(lowerCaseLetter,\
    \ false);\n            } else {\n                result += lowerCaseLetter.toUpperCase();\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let encodedMessage:\
    \ string = '';\n    const vowel: Set<string> = new Set(['a', 'e', 'i', 'o', 'u']);\n\
    \    for (let i: number = 0; i < message.length; i++) {\n        if (vowel.has(message[i].toLowerCase()))\
    \ {\n            encodedMessage += String.fromCharCode(message.charCodeAt(i) +\
    \ 2);\n        } else {\n            encodedMessage += message[i];\n        }\n\
    \    }\n    return encodedMessage;\n}\nconsole.log(encode('This is a message'));\n",
  "    let encoded = '';\n    let alphabet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    let vowls: string = 'aeiouAEIOU';\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let temp = message[i];\n        if (alphabet.includes(temp))\
    \ {\n            let index = alphabet.indexOf(temp);\n            if (index <\
    \ alphabet.length - 2) {\n                if (vowls.includes(temp)) {\n      \
    \              temp = alphabet[index + 2];\n                } else {\n       \
    \             temp = alphabet[index + 2].toLowerCase();\n                }\n \
    \           } else {\n                if (vowls.includes(temp)) {\n          \
    \          temp = alphabet[index - alphabet.length + 2];\n                } else\
    \ {\n                    temp = alphabet[index - alphabet.length + 2].toLowerCase();\n\
    \                }\n            }\n        }\n        encoded += temp;\n    }\n\
    \    return encoded;\n}\n", "    let new_message = message.toUpperCase();\n  \
    \  let vowels = ['A', 'E', 'I', 'O', 'U'];\n    let encode_message = \"\";\n \
    \   for (let i = 0; i < new_message.length; i++) {\n        if (vowels.includes(new_message[i]))\
    \ {\n            let j = i + 2;\n            if (j > new_message.length - 1) {\n\
    \                j = j - new_message.length;\n            }\n            encode_message\
    \ += new_message[j];\n        } else {\n            encode_message += new_message[i];\n\
    \        }\n    }\n    return encode_message;\n}\n", "  const swapped: string\
    \ = message.split('').map(char => {\n    const lowerCase: boolean = char === char.toLowerCase();\n\
    \    const upperCase: boolean = char === char.toUpperCase();\n    const uppercaseAlphabet:\
    \ string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const lowercaseAlphabet: string\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    const vowels: string = 'aeiou';\n    const\
    \ encode: string = 'cdfghjklmnpqrstvwxyzab';\n    if (lowerCase) {\n      if (vowels.includes(char))\
    \ {\n        const index = vowels.indexOf(char);\n        return encode[index];\n\
    \      } else {\n        const index = lowercaseAlphabet.indexOf(char);\n    \
    \    return lowercaseAlphabet[index + 2];\n      }\n    } else if (upperCase)\
    \ {\n      if (vowels.includes(char.toLowerCase())) {\n        const index = vowels.indexOf(char.toLowerCase());\n\
    \        return encode[index].toUpperCase();\n      } else {\n        const index\
    \ = uppercaseAlphabet.indexOf(char);\n        return uppercaseAlphabet[index +\
    \ 2];\n      }\n    } else {\n      return char;\n    }\n  }).join('');\n  return\
    \ swapped;\n}\n", "    let message_array = message.split(\"\");\n    let encoded_array\
    \ = message_array.map(function(char) {\n        let lower_char = char.toLowerCase();\n\
    \        if (/[aeiou]/.test(lower_char)) {\n            let vowel_index = \"aeiou\"\
    .indexOf(lower_char);\n            let new_index = (vowel_index + 2) % 5;\n  \
    \          let new_vowel = \"aeiou\".charAt(new_index);\n            return char.toUpperCase()\
    \ === char ? new_vowel.toUpperCase() : new_vowel;\n        } else {\n        \
    \    return char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n\
    \        }\n    });\n    return encoded_array.join(\"\");\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));", "  var encodedMessage\
    \ = \"\";\n  for (var i = 0; i < message.length; i++) {\n    var c = message[i];\n\
    \    if (c == c.toUpperCase()) {\n      c = c.toLowerCase();\n    } else {\n \
    \     c = c.toUpperCase();\n    }\n    switch (c) {\n      case \"a\":\n     \
    \   c = \"c\";\n        break;\n      case \"e\":\n        c = \"g\";\n      \
    \  break;\n      case \"i\":\n        c = \"k\";\n        break;\n      case \"\
    o\":\n        c = \"q\";\n        break;\n      case \"u\":\n        c = \"y\"\
    ;\n        break;\n    }\n    encodedMessage += c;\n  }\n  return encodedMessage;\n\
    }\n", "  let result: string = \"\";\n  const vowels: Set<string> = new Set([\"\
    a\", \"e\", \"i\", \"o\", \"u\"]);\n  const aCode: number = \"a\".charCodeAt(0);\n\
    \  for (let i: number = 0; i < message.length; i++) {\n    let character: string\
    \ = message[i];\n    const code: number = character.charCodeAt(0);\n    if (code\
    \ >= aCode && code < aCode + 26) {\n      if (character === character.toUpperCase())\
    \ {\n        character = character.toLowerCase();\n      } else {\n        character\
    \ = character.toUpperCase();\n      }\n      if (vowels.has(character)) {\n  \
    \      character = String.fromCharCode(code + 2);\n      }\n    }\n    result\
    \ += character;\n  }\n  return result;\n}\n", "    let vowels: string[] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let result: string = \"\";\n    let next:\
    \ string = \"\";\n    let index: number = 0;\n    for (let i: number = 0; i <\
    \ message.length; i++) {\n        if (message[i] == message[i].toUpperCase())\
    \ {\n            next = message[i].toLowerCase();\n        } else {\n        \
    \    next = message[i].toUpperCase();\n        }\n        index = vowels.indexOf(next);\n\
    \        if (index != -1) {\n            if (index + 2 > vowels.length - 1) {\n\
    \                index = -2;\n            }\n            next = vowels[index +\
    \ 2];\n        }\n        result += next;\n    }\n    return result;\n}\n", "\t\
    let encodedMessage = '';\n\tconst encodedCharMap = getEncodedCharMap();\n\tfor\
    \ (let i = 0; i < message.length; i++) {\n\t\tconst currChar = message[i];\n\t\
    \tconst encodedChar = encodedCharMap[currChar];\n\t\tif (encodedChar) {\n\t\t\t\
    encodedMessage += encodedChar;\n\t\t} else {\n\t\t\tencodedMessage += currChar;\n\
    \t\t}\n\t}\n\treturn encodedMessage;\n}\n", "  let encoded = \"\";\n  let chars\
    \ = message.split(\"\");\n  const vowels = {\n    a: \"c\",\n    e: \"g\",\n \
    \   i: \"k\",\n    o: \"q\",\n    u: \"y\"\n  };\n  for (let i = 0; i < chars.length;\
    \ i++) {\n    if (chars[i] === chars[i].toUpperCase()) {\n      encoded += chars[i].toLowerCase();\n\
    \    } else {\n      encoded += chars[i].toUpperCase();\n    }\n    if (vowels[chars[i].toLowerCase()])\
    \ {\n      encoded = encoded.slice(0, -1) + vowels[chars[i].toLowerCase()];\n\
    \    }\n  }\n  return encoded;\n}\n\nencode(\"test\");\n", "  const vowelList\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let newMessage = \"\";\n  for (let\
    \ i = 0; i < message.length; i++) {\n    const messageChar = message[i];\n   \
    \ if (vowelList.includes(messageChar)) {\n      if (vowelList.indexOf(messageChar)\
    \ === 4) {\n        newMessage += vowelList[0];\n      } else {\n        newMessage\
    \ += vowelList[vowelList.indexOf(messageChar) + 2];\n      }\n    } else if (messageChar.toUpperCase()\
    \ === messageChar) {\n      newMessage += messageChar.toLowerCase();\n    } else\
    \ {\n      newMessage += messageChar.toUpperCase();\n    }\n  }\n  return newMessage;\n\
    }\n", "  return message.split('').map(function(letter: string, index: number):\
    \ string {\n    let isUpperCase: boolean = letter === letter.toUpperCase();\n\
    \    let charCode: number = letter.charCodeAt(0);\n    let newCharCode: number\
    \ = 0;\n    let vowels: string[] = ['A', 'E', 'I', 'O', 'U'];\n    if (isUpperCase)\
    \ {\n      newCharCode = ((charCode - 65 + 2) % 26) + 65;\n    } else {\n    \
    \  newCharCode = ((charCode - 97 + 2) % 26) + 97;\n    }\n    if (vowels.indexOf(letter.toUpperCase())\
    \ !== -1) {\n      return String.fromCharCode(newCharCode);\n    } else {\n  \
    \    return letter;\n    }\n  }).join('');\n}\nconsole.log(encode('This is a message'));",
  "  const letters = message.split(\"\");\n  const vowels = \"aeiou\";\n  let encoded:\
    \ string = \"\";\n  for (let i = 0; i < letters.length; i++) {\n    let c = letters[i];\n\
    \    if (vowels.includes(c.toLowerCase())) {\n      let pos = vowels.indexOf(c.toLowerCase());\n\
    \      pos = (pos + 2) % vowels.length;\n      c = vowels[pos];\n    }\n    encoded\
    \ += c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase();\n  }\n  return\
    \ encoded;\n}\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a\
    \ message\"));\n", "    let result = '';\n    let messageLower = message.toLowerCase();\n\
    \    let messageUpper = message.toUpperCase();\n    for (let i = 0; i < message.length;\
    \ i++) {\n        if (message[i] === messageLower[i]) {\n            result +=\
    \ messageUpper[i];\n        } else {\n            result += messageLower[i];\n\
    \        }\n    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let alpha\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i = 0; i < result.length; i++)\
    \ {\n        if (vowels.includes(result[i])) {\n            let index = alpha.indexOf(result[i]);\n\
    \            if (index < 24) {\n                result = result.slice(0, i) +\
    \ alpha[index + 2] + result.slice(i + 1);\n            } else {\n            \
    \    result = result.slice(0, i) + alpha[index - 24] + result.slice(i + 1);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let vowels: string[]\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let result: string = \"\";\n    for (let i\
    \ = 0; i < message.length; i++) {\n        //Check if letter is uppercase or lowercase\n\
    \        if (message[i] === message[i].toUpperCase()) {\n            //Check if\
    \ letter is a vowel\n            if (vowels.includes(message[i].toLowerCase()))\
    \ {\n                //Lowercase letter, put Uppercase vowel at index + 2\n  \
    \              result += vowels[vowels.indexOf(message[i].toLowerCase()) + 2].toUpperCase();\n\
    \            } else {\n                //Lowercase letter, put Uppercase letter\
    \ at index + 2\n                result += message[i].toLowerCase();\n        \
    \    }\n        } else {\n            //Check if letter is a vowel\n         \
    \   if (vowels.includes(message[i])) {\n                //Uppercase letter, put\
    \ lowercase vowel at index + 2\n                result += vowels[vowels.indexOf(message[i])\
    \ + 2];\n            } else {\n                //Uppercase letter, put lowercase\
    \ letter at index + 2\n                result += message[i].toUpperCase();\n \
    \           }\n        }\n    }\n    return result;\n}\n\nconsole.log(encode(\"\
    This is a message\"));\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    encode\"));\nconsole.log(encode(\"teste\"));\nconsole.log(encode(\"testa\"));\n\
    console.log(encode(\"testi\"));\nconsole.log(encode(\"testo\"));\nconsole.log(encode(\"\
    testu\"));", "    var vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    var encoded: string = \"\";\n    for (var i: number = 0; i < message.length;\
    \ i++) {\n        var letter: string = message[i];\n        var idx: number =\
    \ vowels.indexOf(letter.toLowerCase());\n        if (idx >= 0) {\n           \
    \ idx = (idx + 2) % vowels.length;\n            letter = vowels[idx];\n      \
    \  } else {\n            var code: number = letter.charCodeAt(0);\n          \
    \  if (code >= 97 && code <= 122) {\n                letter = String.fromCharCode(code\
    \ - 32);\n            } else if (code >= 65 && code <= 90) {\n               \
    \ letter = String.fromCharCode(code + 32);\n            }\n        }\n       \
    \ encoded += letter;\n    }\n    return encoded;\n}\n", "    var vowels = \"aeiou\"\
    ;\n    var encoded = \"\";\n    for (var i = 0; i < message.length; i++) {\n \
    \       var char = message[i];\n        if (char.match(/[a-z]/i)) {\n        \
    \    if (char === char.toUpperCase()) {\n                encoded += char.toLowerCase();\n\
    \            } else {\n                encoded += char.toUpperCase();\n      \
    \      }\n        } else {\n            encoded += char;\n        }\n    }\n \
    \   return encoded;\n}\nconsole.log(encode(\"This is a message\"));\n", "    const\
    \ alphabet: string[] = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    const vowels:\
    \ string[] = 'aeiou'.split('');\n    const encodedMessage: string[] = [];\n  \
    \  message.split('').forEach(letter => {\n        if (letter === letter.toUpperCase())\
    \ {\n            encodedMessage.push(letter.toLowerCase());\n        } else {\n\
    \            encodedMessage.push(letter.toUpperCase());\n        }\n    });\n\
    \    encodedMessage.forEach((letter, index) => {\n        if (vowels.includes(letter))\
    \ {\n            if (vowels.indexOf(letter) + 2 >= 5) {\n                encodedMessage[index]\
    \ = vowels[(vowels.indexOf(letter) + 2) - 5];\n            } else {\n        \
    \        encodedMessage[index] = vowels[vowels.indexOf(letter) + 2];\n       \
    \     }\n        }\n    });\n    return encodedMessage.join('');\n}\n\nconsole.log(encode('test'));\n\
    console.log(encode('This is a message'));", "    let encoded = \"\";\n    const\
    \ vowels = \"aeiou\";\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        if (alphabet.includes(message[i]))\
    \ {\n            encoded += message[i] === message[i].toUpperCase() ? alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % 26].toUpperCase() : alphabet[(alphabet.indexOf(message[i]) + 2) % 26];\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    return\
    \ encoded;\n}", "    var alpha: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ var result: string = \"\";\n    for (var i: number = 0; i < message.length;\
    \ i++) {\n        if (message[i] == message[i].toUpperCase()) {\n            result\
    \ += message[i].toLowerCase();\n        } else {\n            result += message[i].toUpperCase();\n\
    \        }\n        if (alpha.indexOf(result[i]) > -1) {\n            var index:\
    \ number = alpha.indexOf(result[i]);\n            if (index < 23) {\n        \
    \        result = result.slice(0, i) + alpha[index + 2] + result.slice(i + 1);\n\
    \            } else if (index == 23) {\n                result = result.slice(0,\
    \ i) + alpha[index + 3] + result.slice(i + 1);\n            } else if (index ==\
    \ 24) {\n                result = result.slice(0, i) + alpha[index + 1] + result.slice(i\
    \ + 1);\n            } else if (index == 25) {\n                result = result.slice(0,\
    \ i) + alpha[index - 23] + result.slice(i + 1);\n            }\n        }\n  \
    \  }\n    return result;\n}\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n", "  const alphabeth: string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  const vovwels: string = 'aeiou';\n  let result: string = '';\n  let shifted:\
    \ string = '';\n  let index: number = 0;\n  let upperCase: boolean = false;\n\
    \  for (let i: number = 0; i < message.length; i++) {\n    if (alphabeth.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n      if (message[i] === message[i].toUpperCase()) {\n        upperCase\
    \ = true;\n      } else {\n        upperCase = false;\n      }\n      index =\
    \ alphabeth.indexOf(message[i].toLowerCase());\n      if (vovwels.indexOf(message[i].toLowerCase())\
    \ !== -1) {\n        if (index === 25) {\n          shifted = alphabeth[1];\n\
    \        } else if (index === 24) {\n          shifted = alphabeth[0];\n     \
    \   } else {\n          shifted = alphabeth[index + 2];\n        }\n      } else\
    \ {\n        shifted = alphabeth[index];\n      }\n      if (upperCase) {\n  \
    \      result += shifted.toUpperCase();\n      } else {\n        result += shifted;\n\
    \      }\n    } else {\n      result += message[i];\n    }\n  }\n  return result;\n\
    }\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));", " \
    \ let result: string = \"\";\n  for (let i = 0; i < message.length; i++) {\n \
    \   let ch: string = message[i];\n    if (ch === ch.toUpperCase()) {\n      result\
    \ += ch.toLowerCase();\n    } else {\n      result += ch.toUpperCase();\n    }\n\
    \  }\n  const vowels: string = \"aeiou\";\n  for (let i = 0; i < result.length;\
    \ i++) {\n    let ch: string = result[i];\n    if (vowels.includes(ch)) {\n  \
    \    result = result.replace(ch, vowels[(vowels.indexOf(ch) + 2) % 5]);\n    }\n\
    \  }\n  return result;\n}\n\nconsole.log(encode(\"This is a message\"));\n", " \
    \   const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let result = \"\";\n\
    \    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n\
    \        let isUpper = letter === letter.toUpperCase();\n        let index = alphabet.indexOf(letter.toLowerCase());\n\
    \        if (index !== -1) {\n            let newIndex = (index + 2) % alphabet.length;\n\
    \            result += isUpper ? alphabet[newIndex].toUpperCase() : alphabet[newIndex];\n\
    \        } else {\n            result += letter;\n        }\n    }\n    return\
    \ result;\n}\n", "    let messageAsArray = message.split(\"\");\n    let encodedArray\
    \ = messageAsArray.map(letter => {\n        let asciiLetter: number = letter.charCodeAt(0);\n\
    \        let encodedLetter: string;\n        if (asciiLetter < 97 || asciiLetter\
    \ > 122) {\n            encodedLetter = String.fromCharCode(asciiLetter);\n  \
    \      } else if (asciiLetter < 101 || asciiLetter > 117) {\n            encodedLetter\
    \ = String.fromCharCode(asciiLetter - 32);\n        } else {\n            encodedLetter\
    \ = String.fromCharCode(asciiLetter + 2);\n        }\n        return encodedLetter;\n\
    \    });\n    return encodedArray.join(\"\");\n}\n", "  // implement the function\
    \ here\n\n  return \"\";\n}\n", "  let result: string = \"\";\n  let messageToArray:\
    \ string[] = message.split(\"\");\n  messageToArray.forEach((element: string)\
    \ => {\n    if (element.match(/[a-z]/i)) {\n      if (element.match(/[aeiou]/i))\
    \ {\n        result += element.replace(element, nextVowel(element));\n      }\
    \ else {\n        result += element.replace(element, nextConsonant(element));\n\
    \      }\n    } else {\n      result += element;\n    }\n  });\n  return result;\n\
    }\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let encoded\
    \ = \"\";\n  let vowels = \"aeiou\".split(\"\");\n  for (let char of message)\
    \ {\n    if (vowels.includes(char.toLowerCase())) {\n      let index = alphabet.indexOf(char.toLowerCase());\n\
    \      let newChar = alphabet[index + 2];\n      encoded += newChar;\n    } else\
    \ {\n      if (char === char.toUpperCase()) {\n        encoded += char.toLowerCase();\n\
    \      } else {\n        encoded += char.toUpperCase();\n      }\n    }\n  }\n\
    \  return encoded;\n}\n", "  // split message into char array\n  const messageArr\
    \ = message.split('');\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const uppercaseVowels\
    \ = ['A', 'E', 'I', 'O', 'U'];\n  const encodeChar = (char: string): string =>\
    \ {\n    let index: number;\n    if (vowels.includes(char)) {\n      index = vowels.indexOf(char);\n\
    \      return vowels[(index + 2) % 5];\n    } else if (uppercaseVowels.includes(char))\
    \ {\n      index = uppercaseVowels.indexOf(char);\n      return uppercaseVowels[(index\
    \ + 2) % 5];\n    } else {\n      return char.toUpperCase();\n    }\n  };\n  const\
    \ encodedMessage = messageArr.map(encodeChar).join('');\n  return encodedMessage;\n\
    }\n", "    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n    let result:\
    \ string = \"\";\n    for (let i: number = 0; i < message.length; i++) {\n   \
    \     let char: string = message[i];\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            result += alphabet[alphabet.indexOf(char)\
    \ + 2].toUpperCase();\n        } else {\n            if (alphabet.indexOf(char)\
    \ === -1) {\n                result += char;\n            } else {\n         \
    \       result += alphabet[alphabet.indexOf(char) + 2];\n            }\n     \
    \   }\n    }\n    return result;\n}\n", "    const vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    const letters = message.split(\"\");\n    const encoded\
    \ = letters.map(letter => {\n        if (letter === letter.toUpperCase()) {\n\
    \            return letter.toLowerCase();\n        } else if (letter === letter.toLowerCase())\
    \ {\n            return letter.toUpperCase();\n        } else {\n            return\
    \ letter;\n        }\n    });\n    const encodedVowels = encoded.map(letter =>\
    \ {\n        if (vowels.includes(letter)) {\n            const index = vowels.indexOf(letter);\n\
    \            if (index === vowels.length - 1) {\n                return vowels[0];\n\
    \            } else {\n                return vowels[index + 1];\n           \
    \ }\n        } else {\n            return letter;\n        }\n    });\n    return\
    \ encodedVowels.join(\"\");\n}\n", "    let alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    let alphabet = alpha.concat(alpha.toLowerCase())\n\n    let vowels = \"\
    aeiou\";\n    let current: string;\n    let encoded = \"\";\n    for (let i =\
    \ 0; i < message.length; i++) {\n        current = message[i];\n        if (alphabet.indexOf(current)\
    \ >= 0) {\n            encoded += alphabet[alphabet.indexOf(current) + 2];\n \
    \       } else {\n            encoded += current;\n        }\n    }\n    return\
    \ encoded;\n}\n\nconsole.log(encode(\"Test\"));", "    let encodedMessage: string\
    \ = \"\";\n    let encodedCharacter: string = \"\";\n    let isUpperCase = false;\n\
    \    for (let i = 0; i < message.length; i++) {\n        let character = message[i];\n\
    \        if (isAlpha(character)) {\n            if (isUpperCase(character)) {\n\
    \                isUpperCase = true;\n                character = character.toLowerCase();\n\
    \            }\n            encodedCharacter = character;\n            if (isVowel(character))\
    \ {\n                encodedCharacter = getEncodedVowel(character);\n        \
    \    }\n            if (isUpperCase) {\n                encodedCharacter = encodedCharacter.toUpperCase();\n\
    \                isUpperCase = false;\n            }\n            encodedMessage\
    \ += encodedCharacter;\n        } else {\n            encodedMessage += character;\n\
    \        }\n    }\n    return encodedMessage;\n}", "    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    let result = '';\n    for (let i = 0; i < message.length; i++) {\n      \
    \  const currentLetter = message[i];\n        const currentLetterUpper = currentLetter.toUpperCase();\n\
    \        const index = ALPHABET.indexOf(currentLetterUpper);\n        let newIndex\
    \ = index + 2;\n        if (newIndex > ALPHABET.length - 1) {\n            newIndex\
    \ = newIndex - ALPHABET.length;\n        }\n        const encodedLetter = ALPHABET[newIndex];\n\
    \        const encodedLetterUpper = encodedLetter.toUpperCase();\n        if (currentLetter\
    \ === currentLetterUpper) {\n            result += encodedLetterUpper;\n     \
    \   } else {\n            result += encodedLetter;\n        }\n    }\n    return\
    \ result;\n}\n", "    const vowels = 'aeiou';\n    return message.split('').map(x\
    \ => {\n        if (vowels.includes(x.toLowerCase())) {\n            const index\
    \ = vowels.indexOf(x.toLowerCase());\n            return vowels[(index + 2) %\
    \ 5];\n        } else {\n            return x.toUpperCase() === x ? x.toLowerCase()\
    \ : x.toUpperCase();\n        }\n    }).join('');\n}", "    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n     \
    \   let letter = message[i];\n        let index = alphabet.indexOf(letter.toLowerCase());\n\
    \        if (index === -1) {\n            encoded += letter;\n        } else {\n\
    \            if (letter.toLowerCase() === letter) {\n                encoded +=\
    \ alphabet[(index + 2) % alphabet.length].toUpperCase();\n            } else {\n\
    \                encoded += alphabet[(index + 2) % alphabet.length];\n       \
    \     }\n        }\n    }\n    return encoded;\n}\n", "    let encoded = \"\"\
    ;\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i = 0;\
    \ i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase())\
    \ {\n            encoded += message[i].toLowerCase();\n        } else {\n    \
    \        encoded += message[i].toUpperCase();\n        }\n        if (vowels.includes(encoded[i]))\
    \ {\n            encoded = encoded.slice(0, i) + \"ab\"[vowels.indexOf(encoded[i])]\
    \ + encoded.slice(i + 1);\n        }\n    }\n    return encoded;\n}\nconsole.log(encode(\"\
    HeLLo WoRld\"));\n", "  var alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  var result: string = \"\";\n  for (var i: number = 0; i < message.length;\
    \ i++) {\n    var char: string = message[i];\n    var index: number = alphabet.indexOf(char.toLowerCase());\n\
    \    if (index > -1) {\n      if (index + 2 > alphabet.length - 1) {\n       \
    \ index = (index + 2) % alphabet.length;\n      } else {\n        index += 2;\n\
    \      }\n      result += char == char.toUpperCase() ? alphabet[index].toUpperCase()\
    \ : alphabet[index];\n    } else {\n      result += char;\n    }\n  }\n  return\
    \ result;\n}\n\nencode(\"This is a message\");\n\n\n", "    let codedMessage:\
    \ string = '';\n    const alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n \
    \   const vowels: string = 'aeiou';\n    for (let i: number = 0; i < message.length;\
    \ i++) {\n        let currChar: string = message[i];\n        if (vowels.includes(currChar.toLowerCase()))\
    \ {\n            let index: number = alphabet.indexOf(currChar.toLowerCase());\n\
    \            if (index + 2 > alphabet.length - 1) {\n                index = (index\
    \ + 2) % alphabet.length;\n            } else {\n                index += 2;\n\
    \            }\n            codedMessage += alphabet[index];\n        } else if\
    \ (alphabet.includes(currChar.toLowerCase())) {\n            let index: number\
    \ = alphabet.indexOf(currChar.toLowerCase());\n            if (currChar === currChar.toUpperCase())\
    \ {\n                codedMessage += alphabet[index].toUpperCase();\n        \
    \    } else {\n                codedMessage += alphabet[index];\n            }\n\
    \        } else {\n            codedMessage += currChar;\n        }\n    }\n \
    \   return codedMessage;\n}\nconsole.log(encode('This is a message'));\nconsole.log(encode('test'));",
  "    let output: string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let\
    \ i: number = 0; i < message.length; i++) {\n        let index: number = vowels.indexOf(message[i].toLowerCase());\n\
    \        if (index === -1) {\n            output += message[i];\n        } else\
    \ {\n            let vindex: number = (index + 2) % vowels.length;\n         \
    \   output += vowels[vindex];\n        }\n    }\n    return output;\n}\n\n", " \
    \ let encodedMessage = '';\n  const vowels = {\n    'a': 'c',\n    'e': 'g',\n\
    \    'i': 'k',\n    'o': 'q',\n    'u': 'y'\n  };\n  for (let i = 0; i < message.length;\
    \ i++) {\n    const asciiVal = message.charCodeAt(i);\n    if (asciiVal >= 65\
    \ && asciiVal <= 90) {\n      encodedMessage += String.fromCharCode(asciiVal +\
    \ 32);\n    } else if (asciiVal >= 97 && asciiVal <= 122) {\n      encodedMessage\
    \ += String.fromCharCode(asciiVal - 32);\n    } else {\n      encodedMessage +=\
    \ message[i];\n    }\n  }\n  for (let j = 0; j < encodedMessage.length; j++) {\n\
    \    if (vowels[encodedMessage[j]]) {\n      encodedMessage = encodedMessage.replace(encodedMessage[j],\
    \ vowels[encodedMessage[j]]);\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('This\
    \ is a message'));", "  let result: string = '';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    let currentChar = message[i];\n    let currentCode = message.charCodeAt(i);\n\
    \    if (currentCode < 97) {\n      result += String.fromCharCode(currentCode\
    \ + 32);\n    } else if (currentCode > 90) {\n      result += String.fromCharCode(currentCode\
    \ - 32);\n    } else {\n      result += currentChar;\n    }\n  }\n  return result;\n\
    }\n", "    return message.split('').map(function(letter){\n        let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n        if (vowels.indexOf(letter.toLowerCase())\
    \ !== -1) {\n            let vowelIndex = vowels.indexOf(letter.toLowerCase());\n\
    \            let newVowel = vowels[(vowelIndex + 2) % 5];\n            return\
    \ (letter.toUpperCase() === letter) ? newVowel.toUpperCase() : newVowel;\n   \
    \     } else {\n            return (letter.toUpperCase() === letter) ? letter.toLowerCase()\
    \ : letter.toUpperCase();\n        }\n    }).join('');\n}", "  // +++ your code\
    \ here +++\n  let swapMessage = message.split(\"\").map(char => {\n    if(/[A-Z]/.test(char)){\n\
    \      return char.toLowerCase();\n    } else if(/[a-z]/.test(char)){\n      return\
    \ char.toUpperCase();\n    } else {\n      return char;\n    }\n  }).join(\"\"\
    );\n  let result = swapMessage.split(\"\").map(char => {\n    switch(char){\n\
    \      case \"a\": return \"c\";\n      case \"e\": return \"g\";\n      case\
    \ \"i\": return \"k\";\n      case \"o\": return \"q\";\n      case \"u\": return\
    \ \"w\";\n      case \"A\": return \"C\";\n      case \"E\": return \"G\";\n \
    \     case \"I\": return \"K\";\n      case \"O\": return \"Q\";\n      case \"\
    U\": return \"W\";\n      default: return char;\n    }\n  }).join(\"\");\n  return\
    \ result;\n}\n", "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    let\
    \ messageArray = message.split(\"\");\n    let encodedArray = [];\n    let lowerCaseAlpha\
    \ = alphabet.toLowerCase();\n    let lowerCaseMessage = message.toLowerCase();\n\
    \    messageArray.forEach(function(character) {\n        if (lowerCaseAlpha.indexOf(character)\
    \ !== -1) {\n            let newIndex = (lowerCaseAlpha.indexOf(character) + 2)\
    \ % 26;\n            let newChar = alphabet[newIndex];\n            if (lowerCaseMessage.indexOf(character)\
    \ !== -1) {\n                encodedArray.push(newChar.toLowerCase());\n     \
    \       } else {\n                encodedArray.push(newChar);\n            }\n\
    \        } else {\n            encodedArray.push(character);\n        }\n    });\n\
    \    return encodedArray.join(\"\");\n}\n", "    let encodedMessage: string =\
    \ \"\";\n    const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   const englishAlphabet: string[] = [\n        \"a\",\n        \"b\",\n    \
    \    \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n\
    \        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\"\
    ,\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"\
    q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n       \
    \ \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\"\n    ];\n\
    \    for (let i = 0; i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase()))\
    \ {\n            const index =\n                englishAlphabet.indexOf(message[i].toLowerCase())\
    \ + 2;\n            if (englishAlphabet[index] === undefined) {\n            \
    \    encodedMessage += englishAlphabet[index - 26];\n            } else {\n  \
    \              encodedMessage += englishAlphabet[index];\n            }\n    \
    \    } else {\n            if (message[i] === message[i].toUpperCase()) {\n  \
    \              encodedMessage += message[i].toLowerCase();\n            } else\
    \ {\n                encodedMessage += message[i].toUpperCase();\n           \
    \ }\n        }\n    }\n    return encodedMessage;\n}\n\nconsole.log(encode(\"\
    test\"));\nconsole.log(encode(\"This is a message\"));\n", "    const vowels =\
    \ \"aeiou\";\n    let ret = \"\";\n    for (let i = 0; i < message.length; i++)\
    \ {\n        const letter = message[i];\n        if (vowels.includes(letter))\
    \ {\n            const ind = vowels.indexOf(letter);\n            const retInd\
    \ = (ind + 2) % vowels.length;\n            ret += vowels[retInd];\n        }\
    \ else if (letter === letter.toUpperCase()) {\n            ret += letter.toLowerCase();\n\
    \        } else {\n            ret += letter.toUpperCase();\n        }\n    }\n\
    \    return ret;\n}\n", "    let result: string = \"\";\n    let messageArray:\
    \ string[] = message.split(\"\");\n    const vowels: string[] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < messageArray.length;\
    \ i++) {\n        if (messageArray[i] === messageArray[i].toUpperCase()) {\n \
    \           messageArray[i] = messageArray[i].toLowerCase();\n        } else {\n\
    \            messageArray[i] = messageArray[i].toUpperCase();\n        }\n   \
    \     if (vowels.includes(messageArray[i])) {\n            switch (messageArray[i])\
    \ {\n                case \"a\":\n                    messageArray[i] = \"c\"\
    ;\n                    break;\n                case \"e\":\n                 \
    \   messageArray[i] = \"g\";\n                    break;\n                case\
    \ \"i\":\n                    messageArray[i] = \"k\";\n                    break;\n\
    \                case \"o\":\n                    messageArray[i] = \"m\";\n \
    \                   break;\n                case \"u\":\n                    messageArray[i]\
    \ = \"w\";\n                    break;\n            }\n        }\n        result\
    \ += messageArray[i];\n    }\n    return result;\n}\n", "  let result: string\
    \ = \"\";\n  const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \ for (let i = 0; i < message.length; i++) {\n    let letter: string = message[i];\n\
    \    if (letter === letter.toUpperCase()) {\n      letter = letter.toLowerCase();\n\
    \    } else {\n      letter = letter.toUpperCase();\n    }\n    if (vowels.includes(letter))\
    \ {\n      if (letter === \"u\") {\n        letter = \"a\";\n      } else {\n\
    \        letter = vowels[vowels.indexOf(letter) + 1];\n      }\n    }\n    result\
    \ += letter;\n  }\n  return result;\n}\n", "    let vowels: string[] = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let encodedMessage: string = '';\n    for (let letter\
    \ of message) {\n        // If it's a letter, swap the case\n        if (alphabet.includes(letter.toLowerCase()))\
    \ {\n            if (letter.toLowerCase() === letter) {\n                encodedMessage\
    \ += letter.toUpperCase();\n            } else {\n                encodedMessage\
    \ += letter.toLowerCase();\n            }\n        } else {\n            encodedMessage\
    \ += letter;\n        }\n    }\n    for (let letter of encodedMessage) {\n   \
    \     if (vowels.includes(letter.toLowerCase())) {\n            // find index\
    \ of vowel in alphabet, add 2 to it, find the letter at that index in the alphabet\n\
    \            let index = alphabet.indexOf(letter.toLowerCase());\n           \
    \ let indexToSwap = (index + 2) % alphabet.length;\n            encodedMessage\
    \ = encodedMessage.replace(letter, alphabet[indexToSwap]);\n        }\n    }\n\
    \    return encodedMessage;\n}\n", "    let encodedMessage: string = \"\";\n \
    \   const vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let letters:\
    \ string[] = message.split(\"\");\n    letters.forEach(letter => {\n        if\
    \ (letter === letter.toUpperCase()) {\n            if (vowels.includes(letter.toLowerCase()))\
    \ {\n                encodedMessage += convertToPigLatin(letter.toLowerCase()).toUpperCase();\n\
    \            } else {\n                encodedMessage += letter.toLowerCase();\n\
    \            }\n        } else {\n            if (vowels.includes(letter)) {\n\
    \                encodedMessage += convertToPigLatin(letter);\n            } else\
    \ {\n                encodedMessage += letter;\n            }\n        }\n   \
    \ });\n    return encodedMessage;\n}\n\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"\
    This is a message\"));\n", "  let map: { [key: string]: string } = {\n    'a':\
    \ 'c',\n    'e': 'g',\n    'i': 'k',\n    'o': 'q',\n    'u': 'w',\n    'A': 'C',\n\
    \    'E': 'G',\n    'I': 'K',\n    'O': 'Q',\n    'U': 'W'\n  };\n  return message.split('').map(c\
    \ => map[c] || c).join('');\n}\n", "    let encoded = '';\n    let upperCase =\
    \ false;\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n\
    \        if (char === char.toUpperCase()) {\n            upperCase = true;\n \
    \       } else {\n            upperCase = false;\n        }\n        if (char.match(/[A-Z]/i))\
    \ {\n            char = char.toLowerCase();\n            if (char === 'a' || char\
    \ === 'e' || char === 'i' || char === 'o' || char === 'u') {\n               \
    \ char = String.fromCharCode(char.charCodeAt(0) + 2);\n            }\n       \
    \     if (upperCase) {\n                char = char.toUpperCase();\n         \
    \   }\n        }\n        encoded += char;\n    }\n    return encoded;\n}\n",
  "    let encodedMessage: string = '';\n    let lowercaseMessage: string = message.toLowerCase();\n\
    \    let alphabets: string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let letter\
    \ of lowercaseMessage) {\n        let indexOfLetter: number = alphabets.indexOf(letter);\n\
    \        if (indexOfLetter !== -1) {\n            let encodedLetter: string =\
    \ '';\n            if (indexOfLetter > 21) {\n                let indexToEncode:\
    \ number = indexOfLetter - 22;\n                encodedLetter = alphabets[indexToEncode];\n\
    \            } else {\n                let indexToEncode: number = indexOfLetter\
    \ + 4;\n                encodedLetter = alphabets[indexToEncode];\n          \
    \  }\n            if (letter === letter.toUpperCase()) {\n                encodedLetter\
    \ = encodedLetter.toUpperCase();\n            }\n            encodedMessage +=\
    \ encodedLetter;\n        } else {\n            encodedMessage += letter;\n  \
    \      }\n    }\n    return encodedMessage;\n}\nconsole.log(encode('test'));\n\
    console.log(encode('This is a message'));", "  const vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n  const encodedMessage = \"\";\n  // take the letter, turn\
    \ it to lowercase, check if it is a vowel,\n  // if it is, replace with the char\
    \ at index of that vowel + 2\n  // if it isn't, check if it is uppercase, if it\
    \ is, make it\n  // lowercase, if it isn't, make it uppercase\n  // return the\
    \ encoded message\n  return encodedMessage;\n}\n", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let result = \"\";\n    for (let i = 0; i < message.length; i++) {\n  \
    \      let char = message[i];\n        let isLetterLower = false;\n        if\
    \ (char == char.toLowerCase()) {\n            isLetterLower = true;\n        }\n\
    \        let isVowel = false;\n        if (vowels.includes(char.toLowerCase()))\
    \ {\n            isVowel = true;\n        }\n        if (isLetterLower) {\n  \
    \          char = char.toUpperCase();\n        }\n        if (isVowel) {\n   \
    \         let index = english_alphabet.indexOf(char.toLowerCase());\n        \
    \    index += 2;\n            index = index % 26;\n            char = english_alphabet[index];\n\
    \        }\n        result += char;\n    }\n    return result;\n}\n", "  const\
    \ vowels = \"AEIOUaeiou\";\n  const encoded = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n  let result = '';\n  for (let i = 0; i < message.length; i++) {\n    const\
    \ curChar = message[i];\n    const index = vowels.indexOf(curChar);\n    result\
    \ += index > -1 ? encoded[index + 2] : curChar.toUpperCase();\n  }\n  return result;\n\
    }\nconsole.log(encode(\"test\"));\nconsole.log(encode(\"This is a message\"));\n",
  "  let chars: string[] = message.split(\"\");\n  let coder: string[] = [];\n  let\
    \ alpha: string[] = [\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"\
    e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n\
    \    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"\
    r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n\
    \    \"y\",\n    \"z\"\n  ];\n  let vowels: string[] = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n  for (let i: number = 0; i < chars.length; i++) {\n    if (chars[i]\
    \ == chars[i].toUpperCase()) {\n      coder.push(chars[i].toLowerCase());\n  \
    \  } else {\n      coder.push(chars[i].toUpperCase());\n    }\n  }\n  for (let\
    \ i: number = 0; i < coder.length; i++) {\n    if (vowels.includes(coder[i]))\
    \ {\n      let index: number = alpha.indexOf(coder[i]);\n      coder[i] = alpha[index\
    \ + 2];\n    }\n  }\n  return coder.join(\"\");\n}", "    let tempResult = message.split('');\n\
    \    let result = '';\n    let code = '';\n    let isUpperCase = false;\n    let\
    \ vowels = \"aeiou\";\n    let vowelsMap = { a: 'c', e: 'g', i: 'k', o: 'q', u:\
    \ 's' };\n    for (let char of tempResult) {\n        if (char === char.toUpperCase())\
    \ {\n            isUpperCase = true;\n        }\n        if (isUpperCase) {\n\
    \            char = char.toLowerCase();\n        }\n        if (vowels.includes(char))\
    \ {\n            code = vowelsMap[char];\n            if (isUpperCase) {\n   \
    \             code = code.toUpperCase();\n            }\n            result +=\
    \ code;\n        } else {\n            result += char;\n        }\n        isUpperCase\
    \ = false;\n    }\n    return result;\n}\n", "  let result: string = \"\";\n \
    \ let vowels: string = \"AEIOUaeiou\";\n  for (let i: number = 0; i < message.length;\
    \ i++) {\n    let index: number = vowels.indexOf(message[i]);\n    if (message[i]\
    \ === message[i].toUpperCase()) {\n      result += message[i].toLowerCase();\n\
    \    } else if (index !== -1) {\n      result += vowels[index + 2];\n    } else\
    \ {\n      result += message[i].toUpperCase();\n    }\n  }\n  return result;\n\
    }", "  const VOWELS = ['a', 'e', 'i', 'o', 'u']\n  const CHAR_CODE_A = 'a'.charCodeAt(0)\n\
    \  const CHAR_CODE_Z = 'z'.charCodeAt(0)\n  const ASCII_SPACE = ' '.charCodeAt(0)\n\
    \  const ASCII_EXCLAMATION = '!'.charCodeAt(0)\n  const ASCII_A = 'A'.charCodeAt(0)\n\
    \  const ASCII_Z = 'Z'.charCodeAt(0)\n  const ASCII_DIFF = 'a'.charCodeAt(0) -\
    \ 'A'.charCodeAt(0)\n\n  function changeCase(char: string): string {\n    let\
    \ code = char.charCodeAt(0)\n    if (code >= ASCII_A && code <= ASCII_Z) {\n \
    \     code += ASCII_DIFF\n    } else if (code >= CHAR_CODE_A && code <= CHAR_CODE_Z)\
    \ {\n      code -= ASCII_DIFF\n    }\n    return String.fromCharCode(code)\n \
    \ }\n\n  function encodeLetter(char: string): string {\n    let code = char.charCodeAt(0)\n\
    \    if (code >= CHAR_CODE_A && code <= CHAR_CODE_Z) {\n      code += 2\n    \
    \  if (code > CHAR_CODE_Z) {\n        code -= 26\n      }\n      if (VOWELS.includes(String.fromCharCode(code)))\
    \ {\n        code += 1\n        if (code > CHAR_CODE_Z) {\n          code -= 26\n\
    \        }\n      }\n    }\n    return String.fromCharCode(code)\n  }\n\n  let\
    \ result = ''\n  for (let i = 0; i < message.length; i++) {\n    let code = message.charCodeAt(i)\n\
    \    if (code >= ASCII_SPACE && code <= ASCII_EXCLAMATION) {\n      result +=\
    \ message[i]\n    } else {\n      result += encodeLetter(changeCase(message[i]))\n\
    \    }\n  }\n  return result\n}\n\ndescribe('encode', () => {\n  test('encode(\"\
    test", "    let output: string = '';\n    const vowels: string[] = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    for (let i = 0; i < message.length; i++) {\n        if\
    \ (message[i] === message[i].toUpperCase()) {\n            output += message[i].toLowerCase();\n\
    \        } else {\n            output += message[i].toUpperCase();\n        }\n\
    \        if (vowels.includes(output[i])) {\n            output = output.slice(0,\
    \ i) + encodeVowel(output[i]) + output.slice(i + 1);\n        }\n    }\n    return\
    \ output;\n}\n", "    let lu: number[] = [65, 69, 73, 79, 85];\n    let lu_convert:\
    \ number[] = [67, 71, 75, 81, 87];\n    let ll: number[] = [97, 101, 105, 111,\
    \ 117];\n    let ll_convert: number[] = [99, 103, 107, 113, 119];\n    let result:\
    \ string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message.charCodeAt(i)\
    \ >= 65 && message.charCodeAt(i) <= 90) {\n            if (lu.includes(message.charCodeAt(i)))\
    \ {\n                result += String.fromCharCode(message.charCodeAt(i) + 2);\n\
    \            } else {\n                result += String.fromCharCode(message.charCodeAt(i));\n\
    \            }\n        } else if (message.charCodeAt(i) >= 97 && message.charCodeAt(i)\
    \ <= 122) {\n            if (ll.includes(message.charCodeAt(i))) {\n         \
    \       result += String.fromCharCode(message.charCodeAt(i) + 2);\n          \
    \  } else {\n                result += String.fromCharCode(message.charCodeAt(i));\n\
    \            }\n        } else {\n            result += message[i];\n        }\n\
    \    }\n    return result;\n}\n", "    // TODO\n    return '';\n}\n\n", "    let\
    \ vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let output: string\
    \ = \"\";\n    let encodeChar: string = \"\";\n    let charCode: number = 0;\n\
    \    let charAscii = 0;\n    let isUpperCase: boolean = false;\n    for (let i\
    \ = 0; i < message.length; i++) {\n        charCode = message.charCodeAt(i);\n\
    \        isUpperCase = false;\n        if (charCode >= 65 && charCode <= 90) {\n\
    \            isUpperCase = true;\n        }\n        encodeChar = message[i].toLowerCase();\n\
    \        // Encode characters\n        if (vowels.indexOf(encodeChar) > -1) {\n\
    \            charAscii = encodeChar.charCodeAt(0);\n            encodeChar = String.fromCharCode(charAscii\
    \ + 2);\n            if (isUpperCase) {\n                encodeChar = encodeChar.toUpperCase();\n\
    \            }\n        } else {\n            if (isUpperCase) {\n           \
    \     encodeChar = encodeChar.toUpperCase();\n            }\n        }\n     \
    \   output += encodeChar;\n    }\n    return output;\n}\n", "  let encodedMessage\
    \ = message.split(\"\").map(char => {\n    if (char === char.toUpperCase()) {\n\
    \      return char.toLowerCase();\n    } else {\n      return char.toUpperCase();\n\
    \    }\n  }).join(\"\");\n  console.log(encodedMessage);\n  let encodedVowels\
    \ = encodedMessage.split(\"\").map(char => {\n    if (char === \"a\") {\n    \
    \  return \"c\";\n    } else if (char === \"e\") {\n      return \"g\";\n    }\
    \ else if (char === \"i\") {\n      return \"k\";\n    } else if (char === \"\
    o\") {\n      return \"q\";\n    } else if (char === \"u\") {\n      return \"\
    y\";\n    } else {\n      return char;\n    }\n  }).join(\"\");\n  return encodedVowels;\n\
    }\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const alphabet = {};\n\
    \    for (let i = 97; i < 123; i++) {\n        alphabet[String.fromCharCode(i)]\
    \ = String.fromCharCode(i);\n    }\n    let temp;\n    for (let i = 1; i < 26;\
    \ i++) {\n        temp = String.fromCharCode(97 + i);\n        alphabet[temp]\
    \ = String.fromCharCode(97 + i + 2);\n    }\n    let messageReturn = '';\n   \
    \ for (let i = 0; i < message.length; i++) {\n        let current = message[i];\n\
    \        if (current === current.toUpperCase()) {\n            messageReturn +=\
    \ alphabet[current.toLowerCase()].toUpperCase();\n        } else {\n         \
    \   messageReturn += alphabet[current];\n        }\n    }\n    return messageReturn;\n\
    }\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n",
  "    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let letter: string = message[i];\n        encodedMessage +=\
    \ encodeLetter(letter);\n    }\n    return encodedMessage;\n}\n", "    let encode_msg:\
    \ string = \"\";\n    let vowels: string = \"aeiou\";\n    for (let i: number\
    \ = 0; i < message.length; i++) {\n        let encode_char: string = \"\";\n \
    \       let current_char: string = message[i];\n        if (current_char === current_char.toUpperCase())\
    \ {\n            encode_char = current_char.toLowerCase();\n        } else {\n\
    \            encode_char = current_char.toUpperCase();\n        }\n        if\
    \ (vowels.includes(encode_char)) {\n            let idx: number = (vowels.indexOf(encode_char)\
    \ + 2) % 5;\n            encode_char = vowels[idx];\n        }\n        encode_msg\
    \ += encode_char;\n    }\n    return encode_msg;\n}\n\n", "  let temp = \"\";\n\
    \  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    temp\
    \ = message[i];\n    switch (temp) {\n      case \"A\":\n        result += \"\
    C\";\n        break;\n      case \"a\":\n        result += \"c\";\n        break;\n\
    \      case \"E\":\n        result += \"G\";\n        break;\n      case \"e\"\
    :\n        result += \"g\";\n        break;\n      case \"I\":\n        result\
    \ += \"K\";\n        break;\n      case \"i\":\n        result += \"k\";\n   \
    \     break;\n      case \"O\":\n        result += \"Q\";\n        break;\n  \
    \    case \"o\":\n        result += \"q\";\n        break;\n      case \"U\":\n\
    \        result += \"Y\";\n        break;\n      case \"u\":\n        result +=\
    \ \"y\";\n        break;\n      default:\n        if (temp.charCodeAt(0) >= 65\
    \ && temp.charCodeAt(0) <= 90) {\n          result += String.fromCharCode(temp.charCodeAt(0)\
    \ + 32);\n        } else if (temp.charCodeAt(0) >= 97 && temp.charCodeAt(0) <=\
    \ 122) {\n          result += String.fromCharCode(temp.charCodeAt(0) - 32);\n\
    \        } else {\n          result += temp;\n        }\n    }\n  }\n  return\
    \ result;\n}", "    let result: string = \"\";\n    const vowels: string[] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    const alphabet: string[] = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n    for (let char of message) {\n        if (char === char.toUpperCase())\
    \ {\n            char = char.toLowerCase();\n            result += char;\n   \
    \     } else if (char === char.toLowerCase()) {\n            char = char.toUpperCase();\n\
    \            result += char;\n        }\n        if (vowels.includes(char)) {\n\
    \            const index = alphabet.indexOf(char);\n            const encodedChar\
    \ = alphabet[index + 2];\n            result += encodedChar;\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(encode(\"This is a message\"));", "    //write\
    \ your code here\n    return \"\";\n}\n\n", "  let encodedMessage = '';\n  const\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const vowels = 'aeiou';\n  for (let\
    \ i = 0; i < message.length; i++) {\n    if (message[i] === message[i].toUpperCase())\
    \ {\n      encodedMessage += message[i].toLowerCase();\n    } else {\n      encodedMessage\
    \ += message[i].toUpperCase();\n    }\n    for (let j = 0; j < vowels.length;\
    \ j++) {\n      if (encodedMessage[i] === vowels[j]) {\n        if (vowels[j]\
    \ === 'u') {\n          encodedMessage += alphabet[0];\n        } else if (vowels[j]\
    \ === 'z') {\n          encodedMessage += alphabet[1];\n        } else {\n   \
    \       encodedMessage += alphabet[alphabet.indexOf(vowels[j]) + 2];\n       \
    \ }\n      }\n    }\n  }\n  return encodedMessage;\n}\n\nconsole.log(encode('abcdz'));\n",
  "    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let i = 0; i\
    \ < message.length; i++) {\n        if(message[i] === message[i].toUpperCase())\
    \ {\n            if(vowels.includes(message[i])) {\n                result +=\
    \ vowels[(vowels.indexOf(message[i]) + 2) % 10].toUpperCase();\n            }\
    \ else {\n                result += message[i].toLowerCase();\n            }\n\
    \        } else {\n            if(vowels.includes(message[i])) {\n           \
    \     result += vowels[(vowels.indexOf(message[i]) + 2) % 10];\n            }\
    \ else {\n                result += message[i];\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "  // solution goes here\n  let convert = message.split(\"\
    \");\n  let encoded = \"\";\n  for (let i = 0; i < convert.length; i++) {\n  \
    \  if (convert[i] === convert[i].toUpperCase()) {\n      convert[i] = convert[i].toLowerCase();\n\
    \    } else {\n      convert[i] = convert[i].toUpperCase();\n    }\n    switch\
    \ (convert[i]) {\n      case \"a\":\n        convert[i] = \"c\";\n        break;\n\
    \      case \"e\":\n        convert[i] = \"g\";\n        break;\n      case \"\
    i\":\n        convert[i] = \"k\";\n        break;\n      case \"o\":\n       \
    \ convert[i] = \"q\";\n        break;\n      case \"u\":\n        convert[i] =\
    \ \"y\";\n        break;\n      default:\n        break;\n    }\n    encoded +=\
    \ convert[i];\n  }\n  return encoded;\n}\n", "  let result: string = '';\n  const\
    \ alpha = 'abcdefghijklmnopqrstuvwxyz';\n  for (let i = 0; i < message.length;\
    \ i++) {\n    if (alpha.indexOf(message[i]) === -1) {\n      result += message[i];\n\
    \    } else if (alpha.indexOf(message[i]) === 25) {\n      result += alpha[1];\n\
    \    } else if (alpha.indexOf(message[i]) === 24) {\n      result += alpha[0];\n\
    \    } else {\n      result += alpha[alpha.indexOf(message[i]) + 2];\n    }\n\
    \  }\n  return result;\n}\n", "  let result: string = \"\";\n  for (let i = 0;\
    \ i < message.length; i++) {\n    const char = message[i];\n    if (char === char.toUpperCase())\
    \ {\n      result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n\
    \    }\n  }\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  return result.split(\"\
    \").map(char => {\n    if (vowels.includes(char)) {\n      const vowelIndex =\
    \ vowels.indexOf(char);\n      const newVowelIndex = (vowelIndex + 2) % vowels.length;\n\
    \      return vowels[newVowelIndex];\n    } else {\n      return char;\n    }\n\
    \  }).join(\"\");\n}\n", "    let result = \"\";\n    const lowerMessage = message.toLowerCase();\n\
    \    for (let i = 0; i < lowerMessage.length; i++) {\n        const char = lowerMessage[i];\n\
    \        if (\"aeiou\".includes(char)) {\n            if (char === \"u\") {\n\
    \                result += \"a\";\n            } else {\n                result\
    \ += String.fromCharCode(char.charCodeAt(0) + 2);\n            }\n        } else\
    \ {\n            result += char.toUpperCase();\n        }\n    }\n    return result;\n\
    }\n", "  // Parse each character in string\n  return message.split('').map(char\
    \ => {\n    // Check if character is lowercase\n    if (char === char.toLowerCase())\
    \ {\n      if (char === 'a') {\n        // If character is \"a\", return \"c\"\
    \n        return 'c';\n      } else if (char === 'e') {\n        // If character\
    \ is \"e\", return \"g\"\n        return 'g';\n      } else if (char === 'i')\
    \ {\n        // If character is \"i\", return \"k\"\n        return 'k';\n   \
    \   } else if (char === 'o') {\n        // If character is \"o\", return \"q\"\
    \n        return 'q';\n      } else if (char === 'u') {\n        // If character\
    \ is \"u\", return \"y\"\n        return 'y';\n      } else {\n        // Return\
    \ uppercase version of character\n        return char.toUpperCase();\n      }\n\
    \    } else {\n      // If character is uppercase, return lowercase version\n\
    \      return char.toLowerCase();\n    }\n  }).join('');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
