name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["  // Your solution here\n  return 0;\n}\n", "    return 0;\n}\n", " \
    \   return new Set(string.toLowerCase()).size;\n}\n\nassert(count_distinct_characters(\"\
    Jerry\") === 4);\nassert(count_distinct_characters(\"xyzXYZ\") === 3);\n", " \
    \ let freq_chars: number[] = [];\n  let i: number;\n  string = string.toLowerCase();\n\
    \  for (i = 0; i < string.length; i++) {\n    if (freq_chars[string.charCodeAt(i)]\
    \ === undefined) {\n      freq_chars[string.charCodeAt(i)] = 1;\n    }\n  }\n\
    \  let count: number = 0;\n  for (i = 0; i < freq_chars.length; i++) {\n    if\
    \ (freq_chars[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  return string.length;\n}\n", "  const charDict: { [char: string]: boolean } =\
    \ {};\n  for (let index = 0; index < string.length; index++) {\n    charDict[string[index].toLowerCase()]\
    \ = true;\n  }\n  return Object.keys(charDict).length;\n}\n", "  var distinctCharacters:\
    \ number = 0;\n  string = string.toLowerCase();\n  for (var i = 0; i < string.length;\
    \ i++) {\n    if (string.indexOf(string[i]) === i) {\n      distinctCharacters++;\n\
    \    }\n  }\n  return distinctCharacters;\n}\n", "    let result = {};\n    let\
    \ count = 0;\n    string.split('').forEach(s => {\n        if (!result[s.toLowerCase()])\
    \ {\n            result[s.toLowerCase()] = true;\n            count++;\n     \
    \   }\n    });\n    return count;\n}\n", "    let dict = {};\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (dict[string[i].toLowerCase()] ===\
    \ undefined) {\n            dict[string[i].toLowerCase()] = 1;\n        }\n  \
    \  }\n    return Object.keys(dict).length;\n}\n", "    let distinct: string[]\
    \ = [];\n    for (let char of string) {\n        if (!distinct.includes(char.toLowerCase()))\
    \ {\n            distinct.push(char.toLowerCase());\n        }\n    }\n    return\
    \ distinct.length;\n}\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n\n", "  const characters: string[] = string.split(\"\");\n  const\
    \ distinctCharacters: string[] = [];\n  characters.forEach(character => {\n  \
    \  if (!distinctCharacters.includes(character.toLowerCase())) {\n      distinctCharacters.push(character.toLowerCase());\n\
    \    }\n  });\n  return distinctCharacters.length;\n}\n", "    return 0;\n}\n",
  "    let chars: string[] = []\n    for (let i = 0; i < string.length; i++) {\n \
    \       if (chars.indexOf(string[i].toLowerCase()) === -1) {\n            chars.push(string[i].toLowerCase())\n\
    \        }\n    }\n    return chars.length\n}\n", "    let distinctChar = string.split('').filter((item,\
    \ pos, self) => {\n        return self.indexOf(item) == pos;\n    }).join('').length;\n\
    \    return distinctChar;\n}\n", "    const uniqueCharSet = new Set(string.toLowerCase().split(''));\n\
    \    return uniqueCharSet.size;\n}\n", "    let count = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string.indexOf(string[i]) === i) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    var result:\
    \ number = 0;\n    var count_set: Set<string> = new Set();\n    for (var i: number\
    \ = 0; i < string.length; i++) {\n        var str: string = string[i];\n     \
    \   var upper: string = str.toUpperCase();\n        var lower: string = str.toLowerCase();\n\
    \        if (upper != lower) {\n            count_set.add(upper);\n          \
    \  count_set.add(lower);\n        } else {\n            count_set.add(str);\n\
    \        }\n    }\n    return count_set.size;\n}\n", "    return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\n", "    return (new Set(string.toLowerCase())).size;\n\
    }\n\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n", "    const charArray = string.split('');\n    const uniqueSet =\
    \ new Set(charArray);\n    return uniqueSet.size;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
