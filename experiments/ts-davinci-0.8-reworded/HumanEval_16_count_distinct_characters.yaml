name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string:\
  \ string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["  // Your solution here\n  return 0;\n}\n", "    return 0;\n}\n", " \
    \   return new Set(string.toLowerCase()).size;\n}\n\nassert(count_distinct_characters(\"\
    Jerry\") === 4);\nassert(count_distinct_characters(\"xyzXYZ\") === 3);\n", " \
    \ let freq_chars: number[] = [];\n  let i: number;\n  string = string.toLowerCase();\n\
    \  for (i = 0; i < string.length; i++) {\n    if (freq_chars[string.charCodeAt(i)]\
    \ === undefined) {\n      freq_chars[string.charCodeAt(i)] = 1;\n    }\n  }\n\
    \  let count: number = 0;\n  for (i = 0; i < freq_chars.length; i++) {\n    if\
    \ (freq_chars[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  return string.length;\n}\n", "  const charDict: { [char: string]: boolean } =\
    \ {};\n  for (let index = 0; index < string.length; index++) {\n    charDict[string[index].toLowerCase()]\
    \ = true;\n  }\n  return Object.keys(charDict).length;\n}\n", "  var distinctCharacters:\
    \ number = 0;\n  string = string.toLowerCase();\n  for (var i = 0; i < string.length;\
    \ i++) {\n    if (string.indexOf(string[i]) === i) {\n      distinctCharacters++;\n\
    \    }\n  }\n  return distinctCharacters;\n}\n", "    let result = {};\n    let\
    \ count = 0;\n    string.split('').forEach(s => {\n        if (!result[s.toLowerCase()])\
    \ {\n            result[s.toLowerCase()] = true;\n            count++;\n     \
    \   }\n    });\n    return count;\n}\n", "    let dict = {};\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (dict[string[i].toLowerCase()] ===\
    \ undefined) {\n            dict[string[i].toLowerCase()] = 1;\n        }\n  \
    \  }\n    return Object.keys(dict).length;\n}\n", "    let distinct: string[]\
    \ = [];\n    for (let char of string) {\n        if (!distinct.includes(char.toLowerCase()))\
    \ {\n            distinct.push(char.toLowerCase());\n        }\n    }\n    return\
    \ distinct.length;\n}\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n\n", "  const characters: string[] = string.split(\"\");\n  const\
    \ distinctCharacters: string[] = [];\n  characters.forEach(character => {\n  \
    \  if (!distinctCharacters.includes(character.toLowerCase())) {\n      distinctCharacters.push(character.toLowerCase());\n\
    \    }\n  });\n  return distinctCharacters.length;\n}\n", "    return 0;\n}\n",
  "    let chars: string[] = []\n    for (let i = 0; i < string.length; i++) {\n \
    \       if (chars.indexOf(string[i].toLowerCase()) === -1) {\n            chars.push(string[i].toLowerCase())\n\
    \        }\n    }\n    return chars.length\n}\n", "    let distinctChar = string.split('').filter((item,\
    \ pos, self) => {\n        return self.indexOf(item) == pos;\n    }).join('').length;\n\
    \    return distinctChar;\n}\n", "    const uniqueCharSet = new Set(string.toLowerCase().split(''));\n\
    \    return uniqueCharSet.size;\n}\n", "    let count = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string.indexOf(string[i]) === i) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    var result:\
    \ number = 0;\n    var count_set: Set<string> = new Set();\n    for (var i: number\
    \ = 0; i < string.length; i++) {\n        var str: string = string[i];\n     \
    \   var upper: string = str.toUpperCase();\n        var lower: string = str.toLowerCase();\n\
    \        if (upper != lower) {\n            count_set.add(upper);\n          \
    \  count_set.add(lower);\n        } else {\n            count_set.add(str);\n\
    \        }\n    }\n    return count_set.size;\n}\n", "    return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\n", "    return (new Set(string.toLowerCase())).size;\n\
    }\n\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n", "    const charArray = string.split('');\n    const uniqueSet =\
    \ new Set(charArray);\n    return uniqueSet.size;\n}\n", "  return string.length;\n\
    }\n", "    let lowercase = string.toLowerCase();\n    let distinctChars = Array.from(new\
    \ Set(lowercase));\n    return distinctChars.length;\n}\n", "    if (string.length\
    \ === 0) {\n        return 0;\n    }\n    let distinctCharacters = 0;\n    let\
    \ characters = string.toLowerCase().split('');\n    let characterIsDistinct =\
    \ {};\n    for (let i = 0; i < characters.length; i++) {\n        if (!characterIsDistinct[characters[i]])\
    \ {\n            characterIsDistinct[characters[i]] = true;\n            distinctCharacters++;\n\
    \        }\n    }\n    return distinctCharacters;\n}\n", "    let result = 0;\n\
    \    let result_arr = [];\n    let new_string = string.toLowerCase();\n    for\
    \ (let i = 0; i < new_string.length; i++) {\n        if (result_arr.indexOf(new_string[i])\
    \ === -1) {\n            result++;\n            result_arr.push(new_string[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    const uniqueChars = new Set(string.toLowerCase());\n\
    \    return uniqueChars.size;\n}\n", "    let temp: string[] = string.split('');\n\
    \    let temp2: string[] = [];\n    for (let i = 0; i < temp.length; i++) {\n\
    \        if (temp2.indexOf(temp[i].toLowerCase()) === -1) {\n            temp2.push(temp[i].toLowerCase());\n\
    \        }\n    }\n    return temp2.length;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  return\
    \ string.split('').filter((char, index, arr) => arr.indexOf(char) === index).length;\n\
    }\n\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n", "    return string.length - [...new Set(string.toLowerCase())].length;\n\
    }\n", "  let chars = new Set<string>();\n  for (let i = 0; i < string.length;\
    \ i++) {\n    chars.add(string[i].toLowerCase());\n  }\n  return chars.size;\n\
    }\n", "    const lower = string.toLowerCase();\n    const set = new Set(lower);\n\
    \    return set.size;\n}\n", "    let chars: string[] = string.split('');\n  \
    \  let distinctChars: string[] = [];\n    chars.forEach(function (char) {\n  \
    \      if (distinctChars.indexOf(char.toLowerCase()) === -1) {\n            distinctChars.push(char.toLowerCase());\n\
    \        }\n    });\n    return distinctChars.length;\n}\n", "    let counts:\
    \ { [key: string]: number } = {};\n    for (let i = 0; i < string.length; i++)\
    \ {\n        let char = string[i];\n        if (counts[char]) {\n            counts[char]\
    \ += 1;\n        } else {\n            counts[char] = 1;\n        }\n    }\n \
    \   return Object.keys(counts).length;\n}\n\nlet testString: string = \"xyzXYZ\"\
    ;\nconsole.log(`There are ${count_distinct_characters(testString)} distinct characters\
    \ in ${testString}`);\n\ntestString = \"Jerry\";\nconsole.log(`There are ${count_distinct_characters(testString)}\
    \ distinct characters in ${testString}`);\n", "    const char_set = new Set();\n\
    \    for (let index = 0; index < string.length; index++) {\n        char_set.add(string[index].toLowerCase());\n\
    \    }\n    return char_set.size;\n}\n", "    let result = 0;\n    for (let i\
    \ = 0; i < string.length; i++) {\n        if (!string.toLowerCase().includes(string[i].toLowerCase(),\
    \ i + 1)) {\n            result += 1;\n        }\n    }\n    return result;\n\
    }\n", "  const characters = [];\n  for (let i = 0; i < string.length; i++) {\n\
    \    const c = string[i].toLowerCase();\n    if (!characters.includes(c)) {\n\
    \      characters.push(c);\n    }\n  }\n  return characters.length;\n}\n", " \
    \ let chars: string[] = string.split(\"\");\n  chars = chars.map(c => c.toLowerCase());\n\
    \  let uniqueChars: string[] = chars.filter((c, i) => chars.indexOf(c) === i);\n\
    \  return uniqueChars.length;\n}\n", "    let distinctChars = [...new Set(string)];\n\
    \    return distinctChars.length;\n}\n", "  let set = new Set();\n  string.split(\"\
    \").forEach(s => set.add(s.toLowerCase()));\n  return set.size;\n}\n", "    let\
    \ result: string[] = [];\n    for (let i = 0; i < string.length; i++) {\n    \
    \    if (result.indexOf(string[i].toLowerCase()) === -1) {\n            result.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return result.length;\n}\n", "    return string.toLowerCase().split('').filter((item,\
    \ pos, self) => self.indexOf(item) == pos).length;\n}\n", "    return -1;\n}",
  "    let lowercase = string.toLowerCase();\n    let distinctCharacters = '';\n \
    \   let distinctCharactersCount = 0;\n    for (let i = 0; i < lowercase.length;\
    \ i++) {\n        if (distinctCharacters.indexOf(lowercase[i]) == -1) {\n    \
    \        distinctCharacters += lowercase[i];\n            distinctCharactersCount++;\n\
    \        }\n    }\n    return distinctCharactersCount;\n}\n", "    // return \"\
    stub\"; // remove this line and implement the function!\n    return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\n", "  let seen: string[] = [];\n  for\
    \ (let char of string) {\n    if (!seen.includes(char.toLowerCase())) {\n    \
    \  seen.push(char.toLowerCase());\n    }\n  }\n  return seen.length;\n}\n", " \
    \ let distinct_characters = \"\";\n  for (let i = 0; i < string.length; i++) {\n\
    \    if (distinct_characters.indexOf(string[i].toLowerCase()) === -1) {\n    \
    \  distinct_characters += string[i].toLowerCase();\n    }\n  }\n  return distinct_characters.length;\n\
    }\n", "  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string.lastIndexOf(string[i])\
    \ == string.indexOf(string[i])) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "  const charMap: { [key: string]: string } = {};\n  for (let char of string)\
    \ {\n    if (!charMap[char.toLowerCase()]) {\n      charMap[char.toLowerCase()]\
    \ = char;\n    }\n  }\n  return Object.keys(charMap).length;\n}\n", "  return\
    \ Array.from(new Set(string.toLowerCase())).length;\n}\n", "    let distinct =\
    \ 0;\n    let strUpper = string.toUpperCase();\n    for (let i = 0; i < strUpper.length;\
    \ i++) {\n        if (strUpper.indexOf(strUpper[i]) === i) {\n            distinct++;\n\
    \        }\n    }\n    return distinct;\n}\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "    const result = new Set<string>();\n    for (const i of string) {\n\
    \        result.add(i.toLowerCase());\n    }\n    return result.size;\n}\n", " \
    \ return new Set(string.toLowerCase()).size;\n}\n", "    let charCount = 0;\n\
    \    const newString = string.toLowerCase();\n    for (let i = 0; i < newString.length;\
    \ i++) {\n        const char = newString.charAt(i);\n        if (newString.indexOf(char)\
    \ === i) {\n            charCount++;\n        }\n    }\n    return charCount;\n\
    }\n", "    //your code here\n    let result = {};\n    for (let chr of string.toLowerCase())\
    \ {\n        result[chr] = true;\n    }\n    return Object.keys(result).length;\n\
    }\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  const charMap: object\
    \ = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n\
    \    if (!charMap[char]) {\n      charMap[char] = true;\n    }\n  }\n  return\
    \ Object.keys(charMap).length;\n}\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "  const charset = new Set();\n  for (let c of string) {\n    charset.add(c.toLowerCase());\n\
    \  }\n  return charset.size;\n}\n", "    let characters = new Set<string>();\n\
    \    for (let char of string) {\n        if (characters.has(char.toUpperCase()))\
    \ continue;\n        characters.add(char.toUpperCase());\n    }\n    return characters.size;\n\
    }\n", "  return [...string].map(v => v.toLowerCase()).filter((x, i, a) => a.indexOf(x)\
    \ === i).length;\n}\n", "    return string.toUpperCase().split('').reduce((distinct_char_count,\
    \ char) => {\n        if (!distinct_char_count.includes(char)) distinct_char_count.push(char);\n\
    \        return distinct_char_count;\n    }, []).length;\n}\n", "    let count\
    \ = 0;\n    let unique_char_dict = {};\n    for (let c of string) {\n        let\
    \ char = c.toLowerCase();\n        if (!unique_char_dict[char]) {\n          \
    \  unique_char_dict[char] = 1;\n            count += 1;\n        }\n    }\n  \
    \  return count;\n}\n", "    if (string.length === 0) {\n        return 0;\n \
    \   }\n\n    const set: Set<string> = new Set();\n    string.split('').forEach(char\
    \ => set.add(char.toLowerCase()));\n    return set.size;\n}\n", "    return new\
    \ Set(string.toLowerCase()).size;\n}\n", "    let count_distinct_characters =\
    \ 0;\n    let arr = Array.from(string.toLowerCase());\n    for (let i = 0; i <\
    \ arr.length; i++) {\n        if (arr.indexOf(arr[i]) === i) {\n            count_distinct_characters++;\n\
    \        }\n    }\n    return count_distinct_characters;\n}\n", "  return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\n", "    var distinctChars = [];\n   \
    \ for (var i = 0; i < string.length; i++) {\n        if (distinctChars.indexOf(string[i].toLowerCase())\
    \ == -1) {\n            distinctChars.push(string[i].toLowerCase());\n       \
    \ }\n    }\n    return distinctChars.length;\n}\n\ncount_distinct_characters(\"\
    xyzXYZ\");\ncount_distinct_characters(\"Jerry\");\n", "    const distinct_characters:\
    \ string[] = [];\n    for (let i: number = 0; i < string.length; i++) {\n    \
    \    if (distinct_characters.indexOf(string[i].toLowerCase()) === -1) {\n    \
    \        distinct_characters.push(string[i].toLowerCase());\n        }\n    }\n\
    \    return distinct_characters.length;\n}\n", "  let result = new Set(string.toLowerCase());\n\
    \  return result.size;\n}\n", "    let s: string = string.toLowerCase();\n   \
    \ let distinctCharacters: string[] = [];\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (distinctCharacters.indexOf(s[i]) == -1) {\n            distinctCharacters.push(s[i]);\n\
    \        }\n    }\n    return distinctCharacters.length;\n}\n", "    let set =\
    \ new Set(string);\n    return set.size;\n}\n", "    return 0;\n}\n", "    let\
    \ arr = string.split('');\n    let newArr = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === arr[i].toUpperCase()) {\n            arr[i] =\
    \ arr[i].toLowerCase();\n        }\n        if (newArr.indexOf(arr[i]) < 0) {\n\
    \            newArr.push(arr[i]);\n        }\n    }\n    return newArr.length;\n\
    }\n", "    let characters: string[] = string.split('');\n    let distinctCharacters:\
    \ string[] = [];\n    for (let i = 0; i < characters.length; i++) {\n        if\
    \ (distinctCharacters.indexOf(characters[i].toLowerCase()) === -1) {\n       \
    \     distinctCharacters.push(characters[i].toLowerCase());\n        }\n    }\n\
    \    return distinctCharacters.length;\n}\n", "  return Array.from(new Set(string.toLowerCase())).length;\n\
    }\n\nexport { count_distinct_characters };", "    let set = new Set(string);\n\
    \    return set.size;\n}\nconsole.log(count_distinct_characters(\"Jerry\"));\n",
  "    let result: number = 0;\n    let dict = {};\n    let letters = string.split('');\n\
    \    for (let letter of letters) {\n        if (!dict[letter.toLowerCase()]) {\n\
    \            dict[letter.toLowerCase()] = 1;\n            result++;\n        }\n\
    \    }\n    return result;\n}\n\ntest('Test count_distinct_characters function',\
    \ () => {\n    let result = count_distinct_characters(\"xyzXYZ\");\n    expect(result).toBe(3);\n\
    \    result = count_distinct_characters(\"Jerry\");\n    expect(result).toBe(4);\n\
    });\n\n", "  return _.uniq(string.toLowerCase().split('')).length;\n}\n", "  \
    \  return -1;\n}\n", "  const set: Set<string> = new Set(string.toLowerCase());\n\
    \  return set.size;\n}\n", "  return [...new Set(string.toLowerCase())].length;\n\
    }\n", "  const distinct = new Set(string.toLowerCase());\n  return distinct.size;\n\
    }\n", "    return new Set(string.toLowerCase()).size;\n}\n", "    let distinctChars:\
    \ string[] = [];\n    for (let i = 0; i < string.length; i++) {\n        if (distinctChars.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            distinctChars.push(string[i].toLowerCase());\n      \
    \  }\n    }\n    return distinctChars.length;\n}\n", "    return [...new Set(string.toLowerCase())].length;\n\
    }\n", "  var unique = \"\";\n  var unique_array = unique.split('');\n  var string_array\
    \ = string.split('');\n  for (var i = 0; i < string_array.length; i++) {\n   \
    \ if (unique_array.indexOf(string_array[i].toLowerCase()) == -1) {\n      unique\
    \ += string_array[i].toLowerCase();\n    }\n  }\n  return unique.length;\n}\n",
  "    return 0;\n}\n", "    let charCount: number = 0;\n    string = string.toLowerCase();\n\
    \    while (string.length > 0) {\n        let char: string = string.charAt(0);\n\
    \        string = string.replace(char, \"\");\n        charCount++;\n    }\n \
    \   return charCount;\n}\n", "  let result = new Set();\n  for (let index = 0;\
    \ index < string.length; index++) {\n    result.add(string[index].toLowerCase());\n\
    \  }\n  return result.size;\n}\n", "  let result = {};\n  for (let i = 0; i <\
    \ string.length; i++) {\n    result[string[i].toLowerCase()] = null;\n  }\n  return\
    \ Object.keys(result).length;\n}\nconsole.log(count_distinct_characters(\"xyzXYZ\"\
    ));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  return [...new\
    \ Set(string.toLowerCase())].length;\n}\n", "  let distinctCount = 0;\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string.toLowerCase().indexOf(string[i].toLowerCase())\
    \ === i) {\n      distinctCount++;\n    }\n  }\n  return distinctCount;\n}\n",
  "    var arr: string[] = [];\n    var count: number = 0;\n    for (var i = 0; i\
    \ < string.length; i++) {\n        if (arr.indexOf(string[i].toUpperCase()) ==\
    \ -1) {\n            arr.push(string[i].toUpperCase());\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "  const chars: string[] = [];\n \
    \ for (let char of string) {\n    if (!chars.includes(char.toLowerCase())) {\n\
    \      chars.push(char.toLowerCase());\n    }\n  }\n  return chars.length;\n}\n",
  "    //return string.split('').filter((v, i, a) => a.indexOf(v) === i).length;\n\
    \    let result = [];\n    for (let i = 0; i < string.length; i++) {\n       \
    \ if (result.indexOf(string[i].toLowerCase()) === -1) {\n            result.push(string[i].toLowerCase());\n\
    \        }\n    }\n    return result.length;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  let unique\
    \ = [];\n  for (let i = 0; i < string.length; i++) {\n    if (!unique.includes(string[i].toLowerCase()))\
    \ {\n      unique.push(string[i].toLowerCase());\n    }\n  }\n  return unique.length;\n\
    }\n", "  const chars = new Set();\n  for (const char of string) {\n    chars.add(char.toLowerCase());\n\
    \  }\n  return chars.size;\n}\n", "    let str = string.toLowerCase();\n    let\
    \ obj = {};\n    let result = 0;\n    for (let i = 0; i < str.length; i++) {\n\
    \        obj[str[i]] = true;\n    }\n    return Object.keys(obj).length;\n}\n",
  "    const upperString = string.toUpperCase();\n    let count = 0;\n    for (let\
    \ i = 0; i < upperString.length; i++) {\n        const currentChar = upperString.charAt(i);\n\
    \        if (upperString.indexOf(currentChar) === i) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "  var res: number = 0;\n  var unique:\
    \ Set<string> = new Set();\n  var str: string = string.toLowerCase();\n  for (var\
    \ i: number = 0; i < str.length; i++) {\n    unique.add(str[i]);\n  }\n  return\
    \ unique.size;\n}\n", "    // TODO: Fill me in!\n    return 0;\n}\n", "    return\
    \ new Set(string.toLowerCase()).size;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  const lowerString\
    \ = string.toLowerCase();\n  const distinctCharacters = new Set(lowerString);\n\
    \  return distinctCharacters.size;\n}\n", "    return string.split('').map(char\
    \ => char.toLowerCase()).filter((v, i, a) => a.indexOf(v) === i).length;\n}\n\n",
  "  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (result.indexOf(string[i].toLowerCase())\
    \ === -1) {\n      result += string[i].toLowerCase();\n    }\n  }\n  return result.length;\n\
    }\nconsole.log(count_distinct_characters(\"Jerry\"));\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\n", "    return (new Set(string.toLowerCase())).size;\n}\n", "  let\
    \ count = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length;\
    \ i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  count = charSet.size;\n\
    \  return count;\n}\n", "  const lower = string.toLowerCase();\n  const length\
    \ = lower.length;\n  let distinct = '';\n  for (let i = 0; i < length; i++) {\n\
    \    const char = lower[i];\n    if (distinct.indexOf(char) === -1) {\n      distinct\
    \ += char;\n    }\n  }\n  return distinct.length;\n}\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "    const letters = string.toLowerCase().split('');\n    const distinctLetters\
    \ = new Set(letters);\n    return distinctLetters.size;\n}\n", "    const chars:\
    \ string[] = string.split('');\n    const lower_chars: string[] = chars.map(char\
    \ => char.toLowerCase());\n    return new Set(lower_chars).size;\n}\n", "  return\
    \ [...new Set(string.toLowerCase())].length;\n}\n", "    const lowerCaseString\
    \ = string.toLowerCase();\n    const set = new Set(lowerCaseString);\n    return\
    \ set.size;\n}\n\nconsole.log(count_distinct_characters(\"Jerry\"));\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\n", "    var res = 0;\n    var lower = string.toLowerCase();\n   \
    \ for (var i = 0; i < lower.length; i++) {\n        var char = lower.charAt(i);\n\
    \        if (lower.indexOf(char) == i) {\n            res += 1;\n        }\n \
    \   }\n    return res;\n}\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "    let distinctCharacters = 0;\n    let tempArray = string.split('');\n\
    \    let lowercaseArray = [];\n    for (let i = 0; i < tempArray.length; i++)\
    \ {\n        lowercaseArray.push(tempArray[i].toLowerCase());\n    }\n    for\
    \ (let i = 0; i < lowercaseArray.length; i++) {\n        let currentCharacter\
    \ = lowercaseArray[i];\n        for (let j = 0; j < lowercaseArray.length; j++)\
    \ {\n            if (currentCharacter === lowercaseArray[j]) {\n             \
    \   lowercaseArray.splice(j, 1);\n            }\n        }\n    }\n    return\
    \ lowercaseArray.length;\n}\nconsole.log(count_distinct_characters(\"xyzXYZ\"\
    ));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "    return [...new\
    \ Set(string.toLowerCase())].length;\n}\n", "  let unique = [];\n  let uniqueString\
    \ = \"\";\n  let charCount = 0;\n  //1. go through each character in the string\
    \ and if it doesn't exist in the unique array, push it in there\n  //2. join the\
    \ unique array with a comma separator\n  //3. count the length of the unique string\n\
    \  for (let char of string) {\n    if (!unique.includes(char.toLowerCase())) {\n\
    \      unique.push(char.toLowerCase());\n    }\n  }\n  uniqueString = unique.join(\"\
    ,\");\n  charCount = uniqueString.length;\n  return charCount;\n}\n", "    return\
    \ 0;\n}\n", "  let chars: Set<string> = new Set();\n  for (let i = 0; i < string.length;\
    \ i++) {\n    let currentChar = string[i];\n    chars.add(currentChar.toLowerCase());\n\
    \  }\n  return chars.size;\n}\n", "    let uniqueLetters: string[] = [];\n   \
    \ for (let i = 0; i < string.length; i++) {\n        if (uniqueLetters.indexOf(string[i].toLowerCase())\
    \ === -1) {\n            uniqueLetters.push(string[i].toLowerCase());\n      \
    \  }\n    }\n    return uniqueLetters.length;\n}\n", "    const array = string.split('');\n\
    \    let result = 0;\n    let unique_characters = new Set();\n    let unique_chars\
    \ = new Set(array);\n    for (let i = 0; i < array.length; i++) {\n        let\
    \ lowercase_character = array[i].toLowerCase();\n        if (!unique_characters.has(lowercase_character))\
    \ {\n            unique_characters.add(lowercase_character);\n            result\
    \ += 1;\n        }\n    }\n    return result;\n}\n", "  let result = [];\n  string.split(\"\
    \").forEach(char => {\n    if (!result.includes(char.toLowerCase())) {\n     \
    \ result.push(char.toLowerCase());\n    }\n  });\n  return result.length;\n}\n\
    \nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n", "    let set = new Set<string>();\n    for (let i = 0; i < string.length;\
    \ i++) {\n        set.add(string[i]);\n    }\n    return set.size;\n}\n", "  let\
    \ count = 0;\n  let letters = [];\n  for (let i = 0; i < string.length; i++) {\n\
    \    let curr = string[i].toLowerCase();\n    if (!letters.includes(curr)) {\n\
    \      letters.push(curr);\n      count++;\n    }\n  }\n  return count;\n}\n",
  "  return unique_characters(string).length;\n}", "  const mySet = new Set(string.toLowerCase());\n\
    \  return mySet.size;\n}\nconsole.log(count_distinct_characters(\"Jerry\"));\n",
  "  const characters: string[] = string.split(\"\");\n  return new Set(characters).size;\n\
    }\n", "  //return new Set(string.toLowerCase().split('')).size;\n  let set = new\
    \ Set();\n  string.toLowerCase().split('').forEach(char => set.add(char));\n \
    \ return set.size;\n}", "  // TODO\n  return 0;\n}\n", "  const characters = [...string];\n\
    \  const distinctCharacters = characters.filter(\n    (character, index) =>\n\
    \      characters.indexOf(character) === index || characters.indexOf(character.toLowerCase())\
    \ === index || characters.indexOf(character.toUpperCase()) === index\n  );\n \
    \ return distinctCharacters.length;\n}\n", "    const set_of_characters = new\
    \ Set(string.toLowerCase());\n    return set_of_characters.size;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  //check\
    \ input\n  if (string === undefined || string === null) {\n    return 0;\n  }\n\
    \n  //if there is only one character, return 1\n  if (string.length === 1) {\n\
    \    return 1;\n  }\n\n  //create a set to avoid duplicate characters\n  let set:\
    \ Set<string> = new Set<string>();\n\n  //for each character in string\n  for\
    \ (let i = 0; i < string.length; i++) {\n    set.add(string[i]);\n  }\n\n  //return\
    \ the size of the set\n  return set.size;\n}\n", "    return [...new Set(string.toLowerCase())].length;\n\
    }\nconsole.log(count_distinct_characters(\"Jerry\"));\n\n", "  const set: Set<string>\
    \ = new Set();\n  const lowerCaseString: string = string.toLowerCase();\n  for\
    \ (let i = 0; i < lowerCaseString.length; i++) {\n    set.add(lowerCaseString[i]);\n\
    \  }\n  return set.size;\n}\n", "    const set = new Set(string.toLowerCase().split(''));\n\
    \    return set.size;\n}\n", "  let newString = string.toLowerCase();\n  let seen:\
    \ string[] = [];\n  let count = 0;\n  for (let i = 0; i < newString.length; i++)\
    \ {\n    if (!seen.includes(newString[i])) {\n      seen.push(newString[i]);\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "  const set = new Set(string.toLowerCase());\n  return set.size;\n}\n",
  "    const charObj: any = {};\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        charObj[string[i].toLowerCase()] = true;\n    }\n    return Object.keys(charObj).length;\n\
    }\n", "    let chars: Set<string> = new Set<string>();\n    for (let index = 0;\
    \ index < string.length; index++) {\n        chars.add(string[index].toLowerCase());\n\
    \    }\n    return chars.size;\n}\n", "  let result = 0;\n  let characters = {};\n\
    \  string.split(\"\").forEach(element => {\n    if (!characters[element.toLowerCase()])\
    \ {\n      characters[element.toLowerCase()] = true;\n      result++;\n    }\n\
    \  });\n  return result;\n}\n", "  return new Set(string.toLowerCase()).size;\n\
    }\n", "    var unique = new Set();\n    string.split('').forEach(char => unique.add(char.toLowerCase()));\n\
    \    return unique.size;\n}\n", "    let d_char: Set<string> = new Set();\n  \
    \  string.split('').forEach(\n        (char) => {\n            d_char.add(char.toLowerCase());\n\
    \        }\n    );\n    return d_char.size;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "    const\
    \ chars = string.toLowerCase().split('');\n    return Array.from(new Set(chars)).length;\n\
    }\n", "    // write your code here\n    return string.toLowerCase().split('').filter((item,\
    \ index, array) => array.indexOf(item) === index).length;\n}\n", "  let count\
    \ = 0;\n  const seen: Set<string> = new Set();\n  for (let char of string) {\n\
    \    if (!seen.has(char.toLowerCase())) {\n      count++;\n      seen.add(char.toLowerCase());\n\
    \    }\n  }\n  return count;\n}\n", "    return 0;\n}\n", "    // TODO: Implement\
    \ Me\n    let charCount: { [character: string]: number } = {};\n    for (let i\
    \ = 0; i < string.length; i++) {\n        charCount[string[i]] = (charCount[string[i]]\
    \ || 0) + 1;\n    }\n    return Object.keys(charCount).length;\n}\n", "  return\
    \ [...new Set(string.toLowerCase())].length;\n}\n", "  let count = 0;\n  for (let\
    \ char of string) {\n    if (\n      string.toLowerCase().indexOf(char.toLowerCase())\
    \ ===\n      string.toLowerCase().lastIndexOf(char.toLowerCase())\n    ) {\n \
    \     count++;\n    }\n  }\n  return count;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "    const\
    \ alphabet = Array.from(Array(26).keys()).map(i => String.fromCharCode(i + 65))\n\
    \    return string.split('').filter(char => alphabet.includes(char.toUpperCase())).length\n\
    }\n\nconsole.log(count_distinct_characters(\"xyzXYZ\"))\nconsole.log(count_distinct_characters(\"\
    Jerry\"))\n", "    return Array.from(new Set(string.toLowerCase())).length;\n\
    }\n\nassert.equal(count_distinct_characters(\"xyzXYZ\"), 3);\nassert.equal(count_distinct_characters(\"\
    Jerry\"), 4);\n", "    let result = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let char = string.charAt(i);\n        if (result.indexOf(char)\
    \ == -1) {\n            result.push(char);\n        }\n    }\n    return result.length;\n\
    }\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n", "    return _.uniq(string.toLowerCase().split('')).length;\n}\n\
    console.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n\n", "    return new Set(string.toLowerCase()).size;\n}\n", "  let\
    \ letters: string[] = [];\n  let count: number = 0;\n  let string_to_count = string.toLowerCase();\n\
    \  for (let i: number = 0; i < string_to_count.length; i++) {\n    if (letters.indexOf(string_to_count[i])\
    \ == -1) {\n      letters.push(string_to_count[i]);\n      count++;\n    }\n \
    \ }\n  return count;\n}\n", "    let set: Set<string> = new Set<string>();\n \
    \   for (let i = 0; i < string.length; i++) {\n        set.add(string[i].toLowerCase());\n\
    \    }\n    return set.size;\n}\nconsole.log(count_distinct_characters(\"xyzXYZ\"\
    ));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "    const lower =\
    \ string.toLowerCase();\n    const distinct = [...new Set(lower)];\n    return\
    \ distinct.length;\n}\n", "    let count: number = 0;\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let letter = string[i].toLowerCase();\n\
    \        for (let j: number = 0; j < string.length; j++) {\n            if (letter\
    \ === string[j].toLowerCase()) {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    // so the split\
    \ function will take a string and spilt it at every character\n    // it will\
    \ return an array with a string for each character\n    // for every character\
    \ we will store it in a array\n    // if the character doesn't exist in the array\
    \ add it\n    // if it does exist we will ignore it\n    // once we have checked\
    \ all the character we will return the length of the array\n    // which will\
    \ be the number of distinct character\n    const distinct_characters: string[]\
    \ = [];\n    string.split('').forEach(character => {\n        // if the character\
    \ is not in the array we will add it,\n        // if it is in the array we will\
    \ ignore it\n        if (distinct_characters.indexOf(character) === -1) {\n  \
    \          distinct_characters.push(character);\n        }\n    });\n    return\
    \ distinct_characters.length;\n}\n", "    let counter = 0;\n    let chars = {};\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (!chars[string[i].toLowerCase()])\
    \ {\n            chars[string[i].toLowerCase()] = true;\n            counter +=\
    \ 1;\n        }\n    }\n    return counter;\n}\n", "  const set = new Set(string.toLowerCase());\n\
    \  return set.size;\n}\n", "  let charCount = {};\n  let distinctCount = 0;\n\
    \  for (let i = 0; i < string.length; i++) {\n    let char = string[i].toLowerCase();\n\
    \    if (charCount[char] === undefined) {\n      charCount[char] = 1;\n      distinctCount++;\n\
    \    }\n  }\n  return distinctCount;\n}\n", "    let distinct: number = 0;\n \
    \   const charArray: string[] = string.split('');\n    charArray.forEach(element\
    \ => {\n        if (string.toLowerCase().indexOf(element.toLowerCase()) == charArray.indexOf(element))\
    \ {\n            distinct++;\n        }\n    });\n    return distinct;\n}\n",
  "    let currentCharacters: string[] = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (!currentCharacters.includes(string[i].toLowerCase()))\n\
    \            currentCharacters.push(string[i].toLowerCase());\n    }\n    return\
    \ currentCharacters.length;\n}\n", "  let result = new Set();\n  for (let i =\
    \ 0; i < string.length; i++) {\n    result.add(string[i].toLowerCase());\n  }\n\
    \  return result.size;\n}\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\n\
    console.log(count_distinct_characters(\"Jerry\"));\n", "    return [...new Set(string.toLowerCase())].length;\n\
    }\n", "    const count = {}\n    let distinct = 0\n    string.split('').forEach(char\
    \ => {\n        if (!count[char.toLowerCase()]) {\n            count[char.toLowerCase()]\
    \ = true\n            distinct++\n        }\n    })\n    return distinct\n}\n",
  "    const characters = new Set();\n    for (const c of string) {\n        characters.add(c.toLowerCase());\n\
    \    }\n    return characters.size;\n}", "  return new Set(string.toLowerCase()).size;\n\
    }\n", "    let result = {};\n    let str = string.toLowerCase();\n    for (let\
    \ i = 0; i < str.length; i++) {\n        result[str[i]] = 1;\n    }\n    return\
    \ Object.keys(result).length;\n}\n", "    return Array.from(new Set(string.toLowerCase())).length;\n\
    }\n", "    if (string === '') return 0;\n    return new Set(string.toLowerCase().split('')).size;\n\
    }\n", "  let count = 0;\n  let char_dict = {};\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (!char_dict[string[i].toLowerCase()]) {\n      char_dict[string[i].toLowerCase()]\
    \ = true;\n      count++;\n    }\n  }\n  return count;\n}\n", "  return [...new\
    \ Set(string.toLowerCase())].length;\n}\n", "    // TODO\n    return -1;\n}\n",
  "    if (string.length === 0) {\n        return 0;\n    }\n\n    const lowerCaseString\
    \ = string.toLowerCase();\n    const characters = new Set(lowerCaseString);\n\
    \    return characters.size;\n}\n\ntest('test count_distinct_characters()', t\
    \ => {\n    t.is(count_distinct_characters('Bob'), 3);\n    t.is(count_distinct_characters('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc",
  "  const uniqueChars = string.toLowerCase().split('').filter((v, i, a) => a.indexOf(v)\
    \ === i);\n  return uniqueChars.length;\n}\n", "  let output = 0;\n  let check\
    \ = {};\n  for (let letter of string) {\n    if (!check[letter.toLowerCase()])\
    \ {\n      output++;\n      check[letter.toLowerCase()] = 1;\n    }\n  }\n  return\
    \ output;\n}\n", "  const distinctCharacters = new Set(string.toLowerCase());\n\
    \  return distinctCharacters.size;\n}\n", "    return string.split('').filter((x,\
    \ i, a) => a.indexOf(x) === i).length;\n}\n", "  let result = 0;\n  for (let i\
    \ = 0; i < string.length; i++) {\n    if (\n      string.indexOf(string[i]) ===\
    \ i &&\n      string.indexOf(string[i].toUpperCase()) === i\n    ) {\n      result++;\n\
    \    }\n  }\n  return result;\n}\n", "    let chars: Set<string> = new Set(string.toLowerCase().split(''));\n\
    \    return chars.size;\n}\n", "    let s = string.toLowerCase();\n    let count\
    \ = 0;\n    let set: string[] = [];\n    for (let i = 0; i < s.length; i++) {\n\
    \        if (set.indexOf(s[i]) == -1) {\n            set.push(s[i]);\n       \
    \     count++;\n        }\n    }\n    return count;\n}", "  let chars = string.toLowerCase().split(\"\
    \");\n  return new Set(chars).size;\n}\n", "    let distinct_character: string[]\
    \ = [];\n    let lowercase_string: string = string.toLowerCase();\n    for (let\
    \ i: number = 0; i < lowercase_string.length; i++) {\n        if (distinct_character.indexOf(lowercase_string[i])\
    \ === -1) {\n            distinct_character.push(lowercase_string[i]);\n     \
    \   }\n    }\n    return distinct_character.length;\n}\n", "    let ans: number\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.indexOf(string[i])\
    \ === i) {\n            ans++;\n        }\n    }\n    return ans;\n}\n", "  let\
    \ count = 0;\n  let arr = string.split(\"\");\n  let unique = new Set(arr);\n\
    \  unique.forEach(() => count++);\n  return count;\n}\nconsole.log(count_distinct_characters(\"\
    xyzXYZ\"));\nconsole.log(count_distinct_characters(\"Jerry\"));\n", "  // TODO\n\
    \  return 0;\n}\n", "  return new Set(string.toLowerCase()).size;\n}\n", "  const\
    \ set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    set.add(string[i].toLowerCase());\n\
    \  }\n  return set.size;\n}\n", "  let set: Set<string> = new Set<string>();\n\
    \  for (let i = 0; i < string.length; i++) {\n    set.add(string[i].toLowerCase());\n\
    \  }\n  return set.size;\n}\n", "  let characters: string[] = [...string];\n \
    \ let upperCharacters: string[] = characters.map(\n    character => character.toUpperCase()\n\
    \  );\n  let lowerCharacters: string[] = characters.map(\n    character => character.toLowerCase()\n\
    \  );\n  let upperSet: Set<string> = new Set(upperCharacters);\n  let lowerSet:\
    \ Set<string> = new Set(lowerCharacters);\n  return upperSet.size + lowerSet.size;\n\
    }\nconsole.log(count_distinct_characters(\"xyzXYZ\"));\nconsole.log(count_distinct_characters(\"\
    Jerry\"));\n", "    return string.split('').map(s => s.toLowerCase()).filter((value,\
    \ index, self) => self.indexOf(value) === index).length;\n}\n", "    return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\n", "  let distinct_characters: string[]\
    \ = [];\n  let string_to_array: string[] = string.split(\"\");\n  for (let char\
    \ of string_to_array) {\n    if (!distinct_characters.includes(char.toLowerCase()))\
    \ {\n      distinct_characters.push(char.toLowerCase());\n    }\n  }\n  return\
    \ distinct_characters.length;\n}\n", "  // Your code here\n  const s = string.toLowerCase();\n\
    \  let arr = new Set();\n  let res = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    let ch = s.charAt(i);\n    if (!arr.has(ch)) {\n      arr.add(ch);\n\
    \      res += 1;\n    }\n  }\n  return res;\n}\n", "    //TODO: count the number\
    \ of distinct characters in the string\n    const charMap = {};\n    for (let\
    \ i = 0; i < string.length; i++) {\n        const char = string[i].toLowerCase();\n\
    \        if (!charMap[char]) {\n            charMap[char] = true;\n        }\n\
    \    }\n    return Object.keys(charMap).length;\n}\n", "    return 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
