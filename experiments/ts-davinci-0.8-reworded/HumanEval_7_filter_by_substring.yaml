name: HumanEval_7_filter_by_substring
language: ts
prompt: "//Filter an input array of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\"\
  , \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction\
  \ filter_by_substring(strings: string[], substring: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"\
  trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
completions: ["  return strings.filter(s => s.includes(substring));\n}\n", "  let\
    \ result: string[] = [];\n  for (let i = 0; i < strings.length; i++) {\n    if\
    \ (strings[i].includes(substring)) {\n      result.push(strings[i]);\n    }\n\
    \  }\n  return result;\n}\n", "    return strings.filter(e => e.includes(substring));\n\
    }\n\n", "    const res: string[] = [];\n    for (const el of strings) {\n    \
    \    if (el.includes(substring)) {\n            res.push(el);\n        }\n   \
    \ }\n    return res;\n}\n", "    return strings.filter(s => s.includes(substring));\n\
    }\n\n", "    return strings.filter(str => str.includes(substring));\n}\n\n", " \
    \   return _.filter(strings, (str) => {\n        return str.includes(substring);\n\
    \    });\n}\n", "  const result: string[] = [];\n  for (const string of strings)\
    \ {\n    if (string.includes(substring)) {\n      result.push(string);\n    }\n\
    \  }\n  return result;\n}\n", "  return strings.filter(str => str.includes(substring));\n\
    }\n", "  return strings.filter(s => s.includes(substring));\n}\n", "  var ret:\
    \ string[] = [];\n  for (var i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)\
    \ >= 0) {\n      ret.push(strings[i]);\n    }\n  }\n  return ret;\n}\n", "  return\
    \ strings.filter(word => word.includes(substring));\n}\n\nconsole.log(filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\"));\n", "  return strings.filter(function(str)\
    \ {\n    return str.includes(substring);\n  });\n}\n", "  const result: string[]\
    \ = [];\n  for (const s of strings) {\n    if (s.includes(substring)) {\n    \
    \  result.push(s);\n    }\n  }\n  return result;\n}\n", "    return strings.filter(str\
    \ => str.includes(substring));\n}\n", "    return strings.filter(str => str.includes(substring));\n\
    }\n", "    return strings.filter(x => x.includes(substring));\n}\n", "    return\
    \ strings.filter(string => string.includes(substring));\n}\n", "    return _.filter(strings,\
    \ (s: string) => s.indexOf(substring) >= 0);\n}\n", "    return strings.filter(word\
    \ => word.includes(substring));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
