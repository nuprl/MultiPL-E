name: HumanEval_57_monotonic
language: ts
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["    let increasing = true\n    let decreasing = true\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false\n        }\n        if (l[i] < l[i + 1]) {\n           \
    \ decreasing = false\n        }\n    }\n    return increasing || decreasing\n\
    }\n", "    if (l.length < 2) return true;\n    let flag = l[1] - l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] - l[i - 1] !== flag) return\
    \ false;\n    }\n    return true;\n}\n", "    if (l.length < 3) {\n        return\
    \ true;\n    }\n    let increasing = (l[1] > l[0]);\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (increasing) {\n            if (l[i] < l[i - 1]) {\n    \
    \            return false;\n            }\n        } else {\n            if (l[i]\
    \ > l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}\n", "  return l.every((x, i) => {\n    if (i === 0) return\
    \ true;\n    return l[i] >= l[i - 1];\n  }) || l.every((x, i) => {\n    if (i\
    \ === 0) return true;\n    return l[i] <= l[i - 1];\n  });\n}\n", "    if(l.length\
    \ < 2) {\n        return true;\n    }\n    const inc: boolean = l[0] < l[1];\n\
    \    for(let i = 1; i < l.length; i++) {\n        if(inc) {\n            if(l[i]\
    \ < l[i - 1]) {\n                return false;\n            }\n        } else\
    \ {\n            if(l[i] > l[i - 1]) {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;\n}\n", "    var a = l[0];\n    var\
    \ type = null;\n    for (var i = 1; i < l.length; i++) {\n        if (type ==\
    \ null) {\n            if (l[i] > a) {\n                type = \"increasing\"\
    ;\n            } else if (l[i] < a) {\n                type = \"decreasing\";\n\
    \            }\n        } else if (type == \"increasing\") {\n            if (l[i]\
    \ < a) {\n                return false;\n            }\n        } else if (type\
    \ == \"decreasing\") {\n            if (l[i] > a) {\n                return false;\n\
    \            }\n        }\n        a = l[i];\n    }\n    return true;\n}\n", " \
    \   let a = l[0];\n    let b = l[1];\n    let c = l[2];\n    if (a > b && b >\
    \ c) {\n        return true;\n    } else if (a < b && b < c) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let inc = true;\n\
    \    let dec = true;\n    let prev = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        inc = inc && l[i] >= prev;\n        dec = dec && l[i] <= prev;\n\
    \        prev = l[i];\n    }\n    return inc || dec;\n}\n", "    return monotonic_inc(l)\
    \ || monotonic_dec(l);\n}\n", "  let dif: number = 0;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      if (dif > 0) {\n        return\
    \ false;\n      }\n      dif = 1;\n    } else if (l[i] > l[i + 1]) {\n      if\
    \ (dif < 0) {\n        return false;\n      }\n      dif = -1;\n    }\n  }\n \
    \ return true;\n}\n", "  return l.every((x, i) => {\n    if (i < l.length - 1)\
    \ {\n      return l[i] <= l[i + 1];\n    }\n    return true;\n  });\n}\n", " \
    \   let inc = true, dec = true;\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > l[i - 1]) dec = false;\n        if (l[i] < l[i - 1]) inc = false;\n\
    \    }\n    return dec || inc;\n}\n", "  return all(l, (elem: number, ind: number)\
    \ => {\n    if (ind === 0) {\n      return true;\n    }\n    return (elem - l[ind\
    \ - 1]) * (l[1] - l[0]) >= 0;\n  });\n}\n", "  let i = 0;\n  let j = l.length\
    \ - 1;\n  let k = 0;\n  let m = 0;\n  for (i = 0; i < l.length - 1; i++) {\n \
    \   if (l[i] <= l[i + 1]) {\n      k = 1;\n    } else {\n      k = 0;\n      break;\n\
    \    }\n  }\n  for (j = l.length - 1; j > 0; j--) {\n    if (l[j] >= l[j - 1])\
    \ {\n      m = 1;\n    } else {\n      m = 0;\n      break;\n    }\n  }\n  if\
    \ (k === 1 || m === 1) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\nmonotonic([1, 2, 4, 20]);\nmonotonic([1, 20, 4, 10]);\nmonotonic([4, 1, 0,\
    \ -10]);\n", "    if (l.length <= 1) return true;\n    var inc: boolean = true;\n\
    \    var dec: boolean = true;\n    for (var i = 1; i < l.length; i++) {\n    \
    \    if (l[i - 1] < l[i]) dec = false;\n        if (l[i - 1] > l[i]) inc = false;\n\
    \    }\n    return inc || dec;\n}\n", "    let d = l[1] - l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (d * (l[i] - l[i - 1]) < 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let increasing = l[0] < l[1];\n  let prev =\
    \ l[0];\n  for (let i = 1; i < l.length; i++) {\n    let curr = l[i];\n    if\
    \ (increasing) {\n      if (curr < prev) {\n        return false;\n      }\n \
    \   } else {\n      if (curr > prev) {\n        return false;\n      }\n    }\n\
    \    prev = curr;\n  }\n  return true;\n}\n", "    if (l.length === 0) {\n   \
    \     return true;\n    }\n    let prev = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (prev < l[i]) {\n            if (prev === 0) {\n        \
    \        prev = l[i];\n                continue;\n            }\n            return\
    \ false;\n        }\n        if (prev > l[i]) {\n            if (prev === 0) {\n\
    \                prev = l[i];\n                continue;\n            }\n    \
    \        return false;\n        }\n        prev = l[i];\n    }\n    return true;\n\
    }\n", "    let flag = true;\n    if (l.length == 0) {\n        return true;\n\
    \    }\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i +\
    \ 1]) {\n            if (flag == false) {\n                return false;\n   \
    \         }\n        } else if (l[i] > l[i + 1]) {\n            if (flag == true)\
    \ {\n                flag = false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "    if (l.length\
    \ < 2) return true;\n    let newL = [...l];\n    let increasing = newL.sort((a,\
    \ b) => a - b);\n    let decreasing = newL.sort((a, b) => b - a);\n    let equal\
    \ = true;\n    for (let i = 0; i < newL.length; i++) {\n        if (newL[i] !==\
    \ increasing[i]) {\n            equal = false;\n            break;\n        }\n\
    \    }\n    if (equal) return true;\n    for (let i = 0; i < newL.length; i++)\
    \ {\n        if (newL[i] !== decreasing[i]) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
