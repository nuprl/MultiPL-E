name: HumanEval_57_monotonic
language: ts
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["    let increasing = true\n    let decreasing = true\n    for (let\
    \ i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  increasing = false\n        }\n        if (l[i] < l[i + 1]) {\n           \
    \ decreasing = false\n        }\n    }\n    return increasing || decreasing\n\
    }\n", "    if (l.length < 2) return true;\n    let flag = l[1] - l[0];\n    for\
    \ (let i = 1; i < l.length; i++) {\n        if (l[i] - l[i - 1] !== flag) return\
    \ false;\n    }\n    return true;\n}\n", "    if (l.length < 3) {\n        return\
    \ true;\n    }\n    let increasing = (l[1] > l[0]);\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (increasing) {\n            if (l[i] < l[i - 1]) {\n    \
    \            return false;\n            }\n        } else {\n            if (l[i]\
    \ > l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}\n", "  return l.every((x, i) => {\n    if (i === 0) return\
    \ true;\n    return l[i] >= l[i - 1];\n  }) || l.every((x, i) => {\n    if (i\
    \ === 0) return true;\n    return l[i] <= l[i - 1];\n  });\n}\n", "    if(l.length\
    \ < 2) {\n        return true;\n    }\n    const inc: boolean = l[0] < l[1];\n\
    \    for(let i = 1; i < l.length; i++) {\n        if(inc) {\n            if(l[i]\
    \ < l[i - 1]) {\n                return false;\n            }\n        } else\
    \ {\n            if(l[i] > l[i - 1]) {\n                return false;\n      \
    \      }\n        }\n    }\n    return true;\n}\n", "    var a = l[0];\n    var\
    \ type = null;\n    for (var i = 1; i < l.length; i++) {\n        if (type ==\
    \ null) {\n            if (l[i] > a) {\n                type = \"increasing\"\
    ;\n            } else if (l[i] < a) {\n                type = \"decreasing\";\n\
    \            }\n        } else if (type == \"increasing\") {\n            if (l[i]\
    \ < a) {\n                return false;\n            }\n        } else if (type\
    \ == \"decreasing\") {\n            if (l[i] > a) {\n                return false;\n\
    \            }\n        }\n        a = l[i];\n    }\n    return true;\n}\n", " \
    \   let a = l[0];\n    let b = l[1];\n    let c = l[2];\n    if (a > b && b >\
    \ c) {\n        return true;\n    } else if (a < b && b < c) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let inc = true;\n\
    \    let dec = true;\n    let prev = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        inc = inc && l[i] >= prev;\n        dec = dec && l[i] <= prev;\n\
    \        prev = l[i];\n    }\n    return inc || dec;\n}\n", "    return monotonic_inc(l)\
    \ || monotonic_dec(l);\n}\n", "  let dif: number = 0;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] < l[i + 1]) {\n      if (dif > 0) {\n        return\
    \ false;\n      }\n      dif = 1;\n    } else if (l[i] > l[i + 1]) {\n      if\
    \ (dif < 0) {\n        return false;\n      }\n      dif = -1;\n    }\n  }\n \
    \ return true;\n}\n", "  return l.every((x, i) => {\n    if (i < l.length - 1)\
    \ {\n      return l[i] <= l[i + 1];\n    }\n    return true;\n  });\n}\n", " \
    \   let inc = true, dec = true;\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > l[i - 1]) dec = false;\n        if (l[i] < l[i - 1]) inc = false;\n\
    \    }\n    return dec || inc;\n}\n", "  return all(l, (elem: number, ind: number)\
    \ => {\n    if (ind === 0) {\n      return true;\n    }\n    return (elem - l[ind\
    \ - 1]) * (l[1] - l[0]) >= 0;\n  });\n}\n", "  let i = 0;\n  let j = l.length\
    \ - 1;\n  let k = 0;\n  let m = 0;\n  for (i = 0; i < l.length - 1; i++) {\n \
    \   if (l[i] <= l[i + 1]) {\n      k = 1;\n    } else {\n      k = 0;\n      break;\n\
    \    }\n  }\n  for (j = l.length - 1; j > 0; j--) {\n    if (l[j] >= l[j - 1])\
    \ {\n      m = 1;\n    } else {\n      m = 0;\n      break;\n    }\n  }\n  if\
    \ (k === 1 || m === 1) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\nmonotonic([1, 2, 4, 20]);\nmonotonic([1, 20, 4, 10]);\nmonotonic([4, 1, 0,\
    \ -10]);\n", "    if (l.length <= 1) return true;\n    var inc: boolean = true;\n\
    \    var dec: boolean = true;\n    for (var i = 1; i < l.length; i++) {\n    \
    \    if (l[i - 1] < l[i]) dec = false;\n        if (l[i - 1] > l[i]) inc = false;\n\
    \    }\n    return inc || dec;\n}\n", "    let d = l[1] - l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (d * (l[i] - l[i - 1]) < 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  let increasing = l[0] < l[1];\n  let prev =\
    \ l[0];\n  for (let i = 1; i < l.length; i++) {\n    let curr = l[i];\n    if\
    \ (increasing) {\n      if (curr < prev) {\n        return false;\n      }\n \
    \   } else {\n      if (curr > prev) {\n        return false;\n      }\n    }\n\
    \    prev = curr;\n  }\n  return true;\n}\n", "    if (l.length === 0) {\n   \
    \     return true;\n    }\n    let prev = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (prev < l[i]) {\n            if (prev === 0) {\n        \
    \        prev = l[i];\n                continue;\n            }\n            return\
    \ false;\n        }\n        if (prev > l[i]) {\n            if (prev === 0) {\n\
    \                prev = l[i];\n                continue;\n            }\n    \
    \        return false;\n        }\n        prev = l[i];\n    }\n    return true;\n\
    }\n", "    let flag = true;\n    if (l.length == 0) {\n        return true;\n\
    \    }\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i +\
    \ 1]) {\n            if (flag == false) {\n                return false;\n   \
    \         }\n        } else if (l[i] > l[i + 1]) {\n            if (flag == true)\
    \ {\n                flag = false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    }\n    return true;\n}", "    if (l.length\
    \ < 2) return true;\n    let newL = [...l];\n    let increasing = newL.sort((a,\
    \ b) => a - b);\n    let decreasing = newL.sort((a, b) => b - a);\n    let equal\
    \ = true;\n    for (let i = 0; i < newL.length; i++) {\n        if (newL[i] !==\
    \ increasing[i]) {\n            equal = false;\n            break;\n        }\n\
    \    }\n    if (equal) return true;\n    for (let i = 0; i < newL.length; i++)\
    \ {\n        if (newL[i] !== decreasing[i]) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    if (l.length === 0) return true;\n\
    \    let cur = l[0];\n    let inc = true;\n    let dec = true;\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] >= cur) {\n            dec = false;\n\
    \        } else {\n            inc = false;\n        }\n        cur = l[i];\n\
    \    }\n    return inc || dec;\n}\n", "    let c = l[0];\n    let b: boolean;\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] - c >= 0) {\n    \
    \        b = true;\n        } else {\n            b = false;\n        }\n    \
    \    c = l[i];\n    }\n    return b;\n}\n", "  let i = 0;\n  while (i < l.length\
    \ - 1) {\n    if (l[i] < l[i + 1]) {\n      while (i < l.length - 1) {\n     \
    \   if (l[i] > l[i + 1]) {\n          return false;\n        }\n        i++;\n\
    \      }\n    } else if (l[i] > l[i + 1]) {\n      while (i < l.length - 1) {\n\
    \        if (l[i] < l[i + 1]) {\n          return false;\n        }\n        i++;\n\
    \      }\n    }\n    i++;\n  }\n  return true;\n}\n", "  return l.every((a, b)\
    \ => b < l.length - 1 ? a <= l[b + 1] : true) || l.every((a, b) => b < l.length\
    \ - 1 ? a >= l[b + 1] : true);\n}\n", "    if (l.length < 2) {\n        return\
    \ true;\n    }\n\n    let isIncreasing = l[0] < l[1];\n    for (let i = 1; i <\
    \ l.length - 1; i++) {\n        if (isIncreasing && l[i] > l[i + 1]) {\n     \
    \       return false;\n        } else if (!isIncreasing && l[i] < l[i + 1]) {\n\
    \            return false;\n        }\n    }\n\n    return true;\n}\n", "    let\
    \ isIncreasing = true;\n    let isDecreasing = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            isIncreasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            isDecreasing\
    \ = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\nconsole.log(monotonic([1,\
    \ 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\nconsole.log(monotonic([4,\
    \ 1, 0, -10]));\n", "  var is_monotonic = true;\n  if (l.length < 2) {\n    is_monotonic\
    \ = true;\n  } else {\n    var i = 0;\n    while (i < l.length - 1) {\n      if\
    \ (l[i] < l[i + 1]) {\n        if (l[i + 1] > l[i + 2]) {\n          is_monotonic\
    \ = false;\n          break;\n        }\n      } else if (l[i] > l[i + 1]) {\n\
    \        if (l[i + 1] < l[i + 2]) {\n          is_monotonic = false;\n       \
    \   break;\n        }\n      }\n      i++;\n    }\n  }\n  return is_monotonic;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n    \
    \    if (l[i] < l[i + 1]) {\n            count = count + 1;\n        }\n     \
    \   else if (l[i] > l[i + 1]) {\n            count = count - 1;\n        }\n \
    \   }\n    if (count === l.length - 1 || count === -l.length + 1) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}", "    if (l.length\
    \ < 2) {\n        return true;\n    }\n    let hasIncreased = true;\n    let hasDecreased\
    \ = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            hasIncreased = false;\n        }\n        if (l[i] > l[i\
    \ - 1]) {\n            hasDecreased = false;\n        }\n    }\n    return hasIncreased\
    \ || hasDecreased;\n}\n", "    const isInc = l[0] <= l[l.length - 1];\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (isInc && l[i] > l[i + 1])\
    \ {\n            return false;\n        }\n        if (!isInc && l[i] < l[i +\
    \ 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "  let posOrNeg = null;\n  let prev = l[0];\n  let curr: number;\n  for (let i =\
    \ 1; i < l.length; i++) {\n    curr = l[i];\n    if (posOrNeg === null) {\n  \
    \    posOrNeg = curr - prev;\n    } else if (posOrNeg * (curr - prev) < 0) {\n\
    \      return false;\n    }\n    prev = curr;\n  }\n  return true;\n}\n", "  let\
    \ increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n\
    \    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing\
    \ || decreasing;\n}\n", "    let x: boolean = true;\n    let y: boolean = true;\n\
    \    let i: number = 0;\n    let j: number = 0;\n    while (i < l.length - 1)\
    \ {\n        if (l[i] < l[i + 1]) {\n            i++;\n        } else {\n    \
    \        x = false;\n            break;\n        }\n    }\n    while (j < l.length\
    \ - 1) {\n        if (l[j] > l[j + 1]) {\n            j++;\n        } else {\n\
    \            y = false;\n            break;\n        }\n    }\n    return x ||\
    \ y;\n}\n", "    let inc = true;\n    let dec = true;\n    for (let i = 0; i <\
    \ l.length - 1; i++) {\n        inc = inc && l[i] <= l[i + 1];\n        dec =\
    \ dec && l[i] >= l[i + 1];\n    }\n    return inc || dec;\n}\n", "    return l.every((v,\
    \ i, l) => {\n        if (i == 0) {\n            return true;\n        } else\
    \ {\n            const p = l[i - 1];\n            if (p < v) {\n             \
    \   return true;\n            } else if (p > v) {\n                return true;\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    });\n}\n", "  if (l.length < 3) {\n    return true;\n  }\n  let a = l[0]\
    \ < l[1];\n  let b = l[0] > l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n\
    \    if (l[i] < l[i + 1] && !a) {\n      return false;\n    }\n    if (l[i] >\
    \ l[i + 1] && !b) {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \   let r = true;\n    let asc = undefined;\n    let i = 0;\n    while (r && i\
    \ < l.length) {\n        if (asc === undefined) {\n            asc = l[i] < l[i\
    \ + 1];\n        } else {\n            r = asc == (l[i] < l[i + 1]);\n       \
    \ }\n        i += 1;\n    }\n    return r;\n}", "    let direction = 0;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        const d = l[i] - l[i + 1];\n \
    \       if (d !== 0) {\n            if (direction === 0) {\n                direction\
    \ = d;\n            } else if (direction !== d) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "  // TODO: Implement\n\
    \  return false;\n}\n", "  let result = true;\n  let increase = false;\n  let\
    \ decrease = false;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i]\
    \ < l[i + 1]) {\n      increase = true;\n    } else if (l[i] > l[i + 1]) {\n \
    \     decrease = true;\n    }\n    if (increase && decrease) {\n      result =\
    \ false;\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(monotonic([1,\
    \ 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\nconsole.log(monotonic([4,\
    \ 1, 0, -10]));\n", "    let r = true;\n    let size = l.length;\n    if (size\
    \ > 1) {\n        let inc = l[1] > l[0];\n        for (let i = 1; i < size; i++)\
    \ {\n            let current = l[i];\n            let previous = l[i - 1];\n \
    \           if (inc && current < previous) {\n                r = false;\n   \
    \             break;\n            }\n            if (!inc && current > previous)\
    \ {\n                r = false;\n                break;\n            }\n     \
    \   }\n    }\n    return r;\n}\n", "    let isIncreasing = true;\n    let isDecreasing\
    \ = true;\n    let i = 0;\n    while (i < l.length - 1) {\n        if (l[i] >\
    \ l[i + 1]) {\n            isIncreasing = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) {\n            isDecreasing = false;\n        }\n        i++;\n\
    \    }\n    return isIncreasing || isDecreasing;\n}\n", "    return l.every((v,\
    \ i, l) => {\n        if (i === 0) return true;\n        return (l[i - 1] <= v\
    \ && l[i + 1] <= v) || (l[i - 1] >= v && l[i + 1] >= v);\n    });\n}\n", "   \
    \ if (l.length <= 1) {\n        return true;\n    }\n    let p = l[0];\n    let\
    \ s = l[1] - p;\n    let j = 1;\n    while (j < l.length && s * (l[j] - p) >=\
    \ 0) {\n        p = l[j];\n        s = l[j + 1] - p;\n        j++;\n    }\n  \
    \  return j === l.length;\n}\n", "  let isIncreasing = true;\n  let isDecreasing\
    \ = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1])\
    \ {\n      isIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isDecreasing\
    \ = false;\n    }\n  }\n  return isIncreasing || isDecreasing;\n}\n\nexport default\
    \ monotonic;", "  const direction = l[1] - l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (direction * (l[i] - l[i - 1]) < 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nexport { removeDups, removeDupsSet, removeDupsSet2,\
    \ monotonic };", "    let increasing = true;\n    let decreasing = true;\n   \
    \ for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n \
    \           increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n \
    \           decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "  const increasing = isIncreasing(l);\n  const decreasing = isDecreasing(l);\n\
    \  return increasing || decreasing;\n}\n", "    let a: boolean = true;\n    let\
    \ b: boolean = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            a = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            b = false;\n        }\n    }\n    return a || b;\n}\n",
  "    var increasing = 0;\n    var decreasing = 0;\n    for (var i = 0; i < l.length\
    \ - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            increasing++;\n   \
    \     } else if (l[i] > l[i + 1]) {\n            decreasing++;\n        }\n  \
    \  }\n    return (increasing == l.length - 1 || decreasing == l.length - 1);\n\
    }\n", "    let increase = true;\n    let decrease = true;\n    for (let i = 0;\
    \ i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increase\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decrease =\
    \ false;\n        }\n    }\n    return increase || decrease;\n}\n", "  if (!l.length)\
    \ return true;\n  let isIncreasing = l[0] <= l[1];\n  for (let i = 0; i < l.length\
    \ - 1; i++) {\n    if (isIncreasing && l[i] > l[i + 1]) return false;\n    if\
    \ (!isIncreasing && l[i] < l[i + 1]) return false;\n  }\n  return true;\n}\n",
  "  const n = l.length;\n  if (n < 2) {\n    return true;\n  }\n  let inc = false;\n\
    \  let dec = false;\n  for (let i = 1; i < n; i++) {\n    const diff = l[i] -\
    \ l[i - 1];\n    if (diff > 0) {\n      inc = true;\n    } else if (diff < 0)\
    \ {\n      dec = true;\n    }\n    if (inc && dec) {\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n", "    let increasing = true;\n    let decreasing\
    \ = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "  // \"l.length - 1\" is used because the loop needs\
    \ to iterate to the\n  // second to last element to compare it to the last element.\n\
    \  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] <= l[i + 1]) {\n   \
    \   continue;\n    } else {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    let isNonDecreasing = true;\n    let isNonIncreasing = true;\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n         \
    \   isNonDecreasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n    \
    \        isNonIncreasing = false;\n        }\n    }\n    return isNonDecreasing\
    \ || isNonIncreasing;\n}\n", "    if (l.length <= 1) {\n        return true;\n\
    \    }\n\n    let isIncreasing = undefined;\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] == l[i - 1]) {\n            continue;\n        }\n\n\
    \        if (isIncreasing === undefined) {\n            isIncreasing = l[i] >\
    \ l[i - 1];\n        } else if (isIncreasing != (l[i] > l[i - 1])) {\n       \
    \     return false;\n        }\n    }\n\n    return true;\n}\n", "  return l.every((num,\
    \ index) => {\n    if (index > 0) {\n      if (num > l[index - 1]) {\n       \
    \ return l.every((num2, index2) => {\n          if (index2 > 0) {\n          \
    \  return num2 >= l[index2 - 1];\n          }\n          return true;\n      \
    \  });\n      } else if (num < l[index - 1]) {\n        return l.every((num2,\
    \ index2) => {\n          if (index2 > 0) {\n            return num2 <= l[index2\
    \ - 1];\n          }\n          return true;\n        });\n      }\n    }\n  \
    \  return true;\n  });\n}\n", "    let last = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (last != l[i]) {\n            let diff = last - l[i];\n \
    \           for (let j = i + 1; j < l.length; j++) {\n                if (diff\
    \ != last - l[j]) {\n                    return false;\n                }\n  \
    \          }\n            return true;\n        }\n    }\n    return true;\n}\n",
  "    let f = 0\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] ==\
    \ l[i + 1]) {\n            continue\n        }\n        else if (l[i] < l[i +\
    \ 1]) {\n            if (f == 0) {\n                f = 1\n            }\n   \
    \         else if (f == -1) {\n                return false\n            }\n \
    \       }\n        else {\n            if (f == 0) {\n                f = -1\n\
    \            }\n            else if (f == 1) {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n", "    let up = true;\n\
    \    let down = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > l[i - 1]) {\n            down = false;\n        }\n        if (l[i] < l[i\
    \ - 1]) {\n            up = false;\n        }\n    }\n    return up || down;\n\
    }\n", "  return l.every((element, i) => {\n    if (i === 0) {\n      return true;\n\
    \    }\n    return element === l[i - 1] || element > l[i - 1] || element < l[i\
    \ - 1];\n  });\n}\n", "    let increasing = true;\n    let decreasing = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n\
    \            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    let d = false;\n    let i = 0;\n    while (i < l.length - 1) {\n  \
    \      if (l[i] > l[i + 1]) {\n            if (d === true) {\n               \
    \ return false;\n            }\n            d = false;\n        } else if (l[i]\
    \ < l[i + 1]) {\n            if (d === false) {\n                return false;\n\
    \            }\n            d = true;\n        }\n        i++;\n    }\n    return\
    \ true;\n}", "    let inc = true;\n    let dec = true;\n    for (let i = 0; i\
    \ < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n       \
    \ }\n    }\n    return inc || dec;\n}\n", "    let increasing = true;\n    let\
    \ decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if\
    \ (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n   \
    \ return increasing || decreasing;\n}\n", "  if (l.length === 0) {\n    return\
    \ true;\n  }\n\n  let trend = 0;\n  for (let i = 1; i < l.length; i++) {\n   \
    \ if (l[i] > l[i - 1]) {\n      if (trend === -1) {\n        return false;\n \
    \     }\n      trend = 1;\n    } else if (l[i] < l[i - 1]) {\n      if (trend\
    \ === 1) {\n        return false;\n      }\n      trend = -1;\n    }\n  }\n  return\
    \ true;\n}\n", "    if (l.length < 2) {\n        return true;\n    }\n\n    if\
    \ (l[0] < l[1]) {\n        for (let i = 1; i < l.length; i++) {\n            if\
    \ (l[i] < l[i - 1]) {\n                return false;\n            }\n        }\n\
    \    } else {\n        for (let i = 1; i < l.length; i++) {\n            if (l[i]\
    \ > l[i - 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n\n    return true;\n}\n", "  return l.every((e, i) => (i === 0 || l[i] >=\
    \ l[i - 1])) || l.every((e, i) => (i === 0 || l[i] <= l[i - 1]));\n}\n", "  if\
    \ (l.length === 0) {\n    return true;\n  }\n\n  let increasing = true;\n  let\
    \ decreasing = true;\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] <\
    \ l[i - 1]) {\n      increasing = false;\n    }\n    if (l[i] > l[i - 1]) {\n\
    \      decreasing = false;\n    }\n  }\n\n  return increasing || decreasing;\n\
    }\n", "    return true;\n}\n", "  const direction = Math.sign(l[1] - l[0]);\n\
    \  for (let i = 2; i < l.length; i++) {\n    if (Math.sign(l[i] - l[i - 1]) !==\
    \ direction) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    return\
    \ l.every((i, ind) => {\n        return ind === 0 || (i - l[ind - 1]) >= 0;\n\
    \    }) || l.every((i, ind) => {\n        return ind === 0 || (i - l[ind - 1])\
    \ <= 0;\n    });\n}\n", "    return l.slice(1).every((x, idx) => x * l[idx] >=\
    \ 0);\n}", "    let isIncreasing = true;\n    let isDecreasing = true;\n    for\
    \ (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n     \
    \       isIncreasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n   \
    \         isDecreasing = false;\n        }\n    }\n    return isIncreasing ||\
    \ isDecreasing;\n}\n\n", "  const len = l.length;\n  const dir = l[1] - l[0];\n\
    \  for (let i = 1; i < len; i++) {\n    if (dir === 0) {\n      continue;\n  \
    \  }\n    if (dir > 0 && l[i + 1] < l[i]) {\n      return false;\n    }\n    if\
    \ (dir < 0 && l[i + 1] > l[i]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    const n = l.length;\n    if (n === 0) return true;\n    let direction\
    \ = null;\n    for (let i = 1; i < n; i++) {\n        const prev = l[i - 1];\n\
    \        const curr = l[i];\n        const increment = curr - prev;\n        if\
    \ (direction == null) {\n            direction = increment;\n        } else if\
    \ (increment > 0 && direction < 0) {\n            return false;\n        } else\
    \ if (increment < 0 && direction > 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\ntest(\"monotonic\", () => {\n    expect(monotonic([])).toBe(true);\n\
    \    expect(monotonic([1, 2, 4, 20])).toBe(true);\n    expect(monotonic([1, 20,\
    \ 4, 10])).toBe(false);\n    expect(monotonic([4, 1, 0, -10])).toBe(true);\n});\n",
  "  return true;\n}\n", "  if (l.length < 3) {\n    return true;\n  }\n  let s =\
    \ 1;\n  if (l[0] > l[1]) {\n    s = -1;\n  }\n  for (let i = 0; i < l.length -\
    \ 1; i++) {\n    if (s * (l[i] - l[i + 1]) < 0) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    let increasing = true;\n    let decreasing =\
    \ true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] < l[i\
    \ + 1]) {\n            decreasing = false;\n        }\n        if (l[i] > l[i\
    \ + 1]) {\n            increasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "  const sorted = l.sort();\n  if (l.every((value, index)\
    \ => value === sorted[index])) {\n    return true;\n  }\n  const reverseSorted\
    \ = l.sort().reverse();\n  if (l.every((value, index) => value === reverseSorted[index]))\
    \ {\n    return true;\n  }\n  return false;\n}\n", "  let inc = false,\n    dec\
    \ = false;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1])\
    \ {\n      inc = true;\n    } else if (l[i] > l[i + 1]) {\n      dec = true;\n\
    \    }\n    if (inc && dec) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nexport { monotonic };", "    var t;\n    if (l.length == 0) return true;\n\
    \    else t = l[0];\n    if (l.length == 1) return true;\n    else {\n       \
    \ for (var i = 1; i < l.length; i++) {\n            if (l[i] - t == 1) t = l[i];\n\
    \            else if (l[i] - t == -1) t = l[i];\n            else return false;\n\
    \        }\n    }\n    return true;\n}", "    let inc = true;\n    let dec = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n\
    \            inc = false;\n        }\n        if (l[i] < l[i + 1]) {\n       \
    \     dec = false;\n        }\n    }\n    return inc || dec;\n}\n\n", "    if\
    \ (l.length < 2) return true;\n    const first = l[0];\n    const last = l[l.length\
    \ - 1];\n    if (first < last) {\n        for (let i = 1; i < l.length; i++) {\n\
    \            if (l[i] < l[i - 1]) return false;\n        }\n    } else {\n   \
    \     for (let i = 1; i < l.length; i++) {\n            if (l[i] > l[i - 1]) return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  let increasing = l[0] <\
    \ l[1];\n  for (let i = 0; i < l.length - 1; i++) {\n    if (increasing) {\n \
    \     if (l[i] > l[i + 1]) {\n        return false;\n      }\n    } else {\n \
    \     if (l[i] < l[i + 1]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "    var increasing = true;\n    var decreasing = true;\n    for\
    \ (var i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n     \
    \       increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n     \
    \       decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n", "    const size = l.length;\n    if (size === 0) {\n        return true;\n\
    \    }\n    let direction = 0;\n    for (let i = 1; i < size; i++) {\n       \
    \ const d = l[i] - l[i - 1];\n        if (d !== 0) {\n            if (direction\
    \ === 0) {\n                direction = d;\n            } else if (direction >\
    \ 0 !== d > 0) {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;\n}\n", "  if (l.length < 3) {\n    return true;\n  }\n\
    \  const direction = Math.sign(l[1] - l[0]);\n  for (let i = 2; i < l.length;\
    \ i++) {\n    if (Math.sign(l[i] - l[i - 1]) !== direction) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    if (l.length <= 1) {\n        return true;\n\
    \    }\n\n    const direction = l[1] - l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (direction * (l[i] - l[i - 1]) < 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "  let inc = false;\n  let dec\
    \ = false;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] < l[i + 1])\
    \ {\n      inc = true;\n    } else if (l[i] > l[i + 1]) {\n      dec = true;\n\
    \    }\n  }\n  return inc && !dec || !inc && dec;\n}\n", "  const s = l.join('');\n\
    \  return s === s.split('').sort().join('') || s === s.split('').sort().reverse().join('');\n\
    }", "    if (l.length <= 1) {\n        return true;\n    }\n    let inc = true;\n\
    \    let dec = true;\n    for (let i = 1; i < l.length; i++) {\n        inc =\
    \ inc && l[i] >= l[i - 1];\n        dec = dec && l[i] <= l[i - 1];\n    }\n  \
    \  return inc || dec;\n}\n", "  var t = l[0]\n  var mode = 0\n  for (var i = 1;\
    \ i < l.length; i++) {\n    if (mode == 0) {\n      if (l[i] > t) {\n        mode\
    \ = 1\n      } else if (l[i] < t) {\n        mode = -1\n      }\n    } else if\
    \ (mode == 1) {\n      if (l[i] < t) {\n        return false\n      }\n    } else\
    \ if (mode == -1) {\n      if (l[i] > t) {\n        return false\n      }\n  \
    \  }\n    t = l[i]\n  }\n  return true\n}\n", "    var isIncreasing = true, isDecreasing\
    \ = true;\n    for (var i = 1; i < l.length; i++) {\n        if (l[i] > l[i -\
    \ 1]) {\n            isDecreasing = false;\n        }\n        if (l[i] < l[i\
    \ - 1]) {\n            isIncreasing = false;\n        }\n    }\n    return isIncreasing\
    \ || isDecreasing;\n}\n", "    let increasing = true;\n    let decreasing = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n\
    \            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\n\
    console.log(monotonic([4, 1, 0, -10]));\n", "    let descending = true;\n    let\
    \ ascending = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] < l[i + 1]) {\n            descending = false;\n        }\n        if\
    \ (l[i] > l[i + 1]) {\n            ascending = false;\n        }\n    }\n    return\
    \ descending || ascending;\n}\n", "    let dec = true;\n    let inc = true;\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i - 1] > l[i]) {\n  \
    \          inc = false;\n        }\n        if (l[i - 1] < l[i]) {\n         \
    \   dec = false;\n        }\n    }\n    return dec || inc;\n}\n", "    const up\
    \ = l.every((e, i) => i == 0 || e >= l[i - 1]);\n    const down = l.every((e,\
    \ i) => i == 0 || e <= l[i - 1]);\n    return up || down;\n}\n", "    let increasing\
    \ = true\n    let decreasing = true\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false\n        }\n\
    \        if (l[i] < l[i + 1]) {\n            decreasing = false\n        }\n \
    \   }\n    return increasing || decreasing\n}\n", "    let decreasing = true;\n\
    \    let increasing = true;\n    for (let i = 0; i < l.length; i++) {\n      \
    \  if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n      \
    \  if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n", "    if (l.length < 2) return true;\n\
    \    if (l[0] < l[1]) {\n        for (let i = 0; i < l.length - 1; i++) {\n  \
    \          if (l[i] > l[i + 1]) return false;\n        }\n    } else {\n     \
    \   for (let i = 0; i < l.length - 1; i++) {\n            if (l[i] < l[i + 1])\
    \ return false;\n        }\n    }\n    return true;\n}\n", "  return l.every((e,\
    \ i) => i === 0 || l[i - 1] < e) || l.every((e, i) => i === 0 || l[i - 1] > e);\n\
    }\n", "    let inc = true;\n    let dec = true;\n    for (let i = 0; i < l.length\
    \ - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n    \
    \    }\n        if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n\
    \    }\n    return inc || dec;\n}\n", "    let inc = true;\n    let dec = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        inc = inc && l[i] <= l[i\
    \ + 1];\n        dec = dec && l[i] >= l[i + 1];\n    }\n    return inc || dec;\n\
    }\n", "    let ordering = '';\n    for (let i = 0; i < l.length - 1; i++) {\n\
    \        if (l[i] === l[i + 1]) continue;\n        if (l[i] < l[i + 1]) {\n  \
    \          if (ordering !== '' && ordering !== 'increasing') return false;\n \
    \           ordering = 'increasing';\n        } else {\n            if (ordering\
    \ !== '' && ordering !== 'decreasing') return false;\n            ordering = 'decreasing';\n\
    \        }\n    }\n    return true;\n}\n", "  return l.every((v, i) => (i < l.length\
    \ - 1 ? v < l[i + 1] : true)) || l.every((v, i) => (i < l.length - 1 ? v > l[i\
    \ + 1] : true));\n}\n", "  return isIncreasing(l) || isDecreasing(l);\n}\n", " \
    \ var inc = true;\n  var dec = true;\n  for (var i = 1; i < l.length; i++) {\n\
    \    inc = inc && l[i] >= l[i - 1];\n    dec = dec && l[i] <= l[i - 1];\n  }\n\
    \  return inc || dec;\n}\n", "  if (l.length <= 1) {\n    return true;\n  }\n\
    \  // The initial state of the function\n  const [first, second] = l;\n  // We\
    \ don't care which direction the numbers are going yet.\n  let [curr, prev] =\
    \ [second, first];\n  let ordered = curr >= prev;\n  for (let i = 2; i < l.length;\
    \ i++) {\n    prev = curr;\n    curr = l[i];\n    if (ordered && curr < prev)\
    \ {\n      return false;\n    } else if (!ordered && curr > prev) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    let init = l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if ((init > l[i] && init >= l[i - 1]) ||\
    \ (init < l[i] && init <= l[i - 1])) {\n            init = l[i];\n        } else\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  if (l.length <= 1) return true;\n    const isIncreasing = l[0] < l[1];\n  \
    \  for (let i = 0; i < l.length - 1; i++) {\n        if (isIncreasing && l[i]\
    \ > l[i + 1]) return false;\n        if (!isIncreasing && l[i] < l[i + 1]) return\
    \ false;\n    }\n    return true;\n}\n", "  return l.every((_, i) => (i === 0\
    \ || l[i] === l[i - 1] + 1 || l[i] === l[i - 1] - 1));\n}\n", "    let isIncreasing\
    \ = true;\n    let isDecreasing = true;\n    for (let i = 0; i < l.length - 1;\
    \ i++) {\n        if (l[i] > l[i + 1]) {\n            isIncreasing = false;\n\
    \        }\n        if (l[i] < l[i + 1]) {\n            isDecreasing = false;\n\
    \        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "  let increasing\
    \ = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++)\
    \ {\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n    if (l[i]\
    \ > l[i + 1]) {\n      increasing = false;\n    }\n  }\n  return increasing ||\
    \ decreasing;\n}\n", "    let isPositive: boolean = true;\n    let isNegative:\
    \ boolean = true;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ < l[i + 1]) {\n            isNegative = false;\n        }\n        if (l[i]\
    \ > l[i + 1]) {\n            isPositive = false;\n        }\n    }\n    return\
    \ isPositive || isNegative;\n}\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1,\
    \ 20, 4, 10]));\nconsole.log(monotonic([4, 1, 0, -10]));\n", "  // Your solution\
    \ goes here\n  let count = 0;\n  let rev = true;\n  if (l.length <= 1) {\n   \
    \ return true;\n  }\n  while (count < l.length) {\n    if (count + 1 < l.length)\
    \ {\n      if (l[count] > l[count + 1]) {\n        rev = false;\n        break;\n\
    \      }\n    }\n    count++;\n  }\n  count = 0;\n  while (count < l.length) {\n\
    \    if (count + 1 < l.length) {\n      if (l[count] < l[count + 1]) {\n     \
    \   rev = false;\n        break;\n      }\n    }\n    count++;\n  }\n  return\
    \ rev;\n}\n", "  let increasing = true;\n  let decreasing = true;\n  for (let\
    \ i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\n", "  // 1. check if the array\
    \ is increasing\n  let increasing = true;\n  let decreasing = true;\n  for (let\
    \ i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing\
    \ = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n   \
    \ }\n  }\n  return increasing || decreasing;\n}\n\ntest('monotonic function',\
    \ () => {\n  expect(monotonic([1, 2, 4, 20])).toBe(true);\n  expect(monotonic([1,\
    \ 20, 4, 10])).toBe(false);\n  expect(monotonic([4, 1, 0, -10])).toBe(true);\n\
    });\n", "    let inc = 0;\n    let dec = 0;\n    for (let i = 0; i < l.length\
    \ - 1; i++) {\n        if (l[i] < l[i + 1]) {\n            inc++;\n        } else\
    \ if (l[i] > l[i + 1]) {\n            dec++;\n        }\n    }\n    return inc\
    \ > 0 && dec == 0 || inc == 0 && dec > 0;\n}", "    let increasing = true;\n \
    \   let decreasing = true;\n    for (let i = 0; i < l.length - 1; i++) {\n   \
    \     if (l[i] > l[i + 1]) increasing = false;\n        if (l[i] < l[i + 1]) decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n", "  if (l.length\
    \ <= 1) {\n    return true;\n  }\n  let increasing = l[0] < l[1];\n  let decreasing\
    \ = l[0] > l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n    if (increasing\
    \ && l[i] > l[i + 1]) {\n      return false;\n    }\n    if (decreasing && l[i]\
    \ < l[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    const\
    \ sign = l[1] - l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (sign\
    \ * (l[i] - l[i - 1]) < 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n\ndescribe(\"monotonic\", () => {\n    it(\"[1, 2, 4, 20]\"\
    , () => {\n        expect(monotonic([1, 2, 4, 20])).toBe(true);\n    });\n   \
    \ it(\"[1, 20, 4, 10]\", () => {\n        expect(monotonic([1, 20, 4, 10])).toBe(false);\n\
    \    });\n    it(\"[4, 1, 0, -10]\", () => {\n        expect(monotonic([4, 1,\
    \ 0, -10])).toBe(true);\n    });\n});", "    return l.every((x, i) => i === 0\
    \ || (x > l[i - 1] || x < l[i - 1]));\n}", "  if (l.length <= 1) {\n    return\
    \ true;\n  }\n  const dir = l[1] > l[0] ? 1 : -1;\n  for (let i = 2; i < l.length;\
    \ i++) {\n    if (dir === 1 && l[i] < l[i - 1]) {\n      return false;\n    }\n\
    \    if (dir === -1 && l[i] > l[i - 1]) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n", "    if (l.length === 0) {\n        return true;\n    }\n\
    \    let diffs = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let\
    \ d = l[i + 1] - l[i];\n        diffs.push(d);\n    }\n    return (allEqual(diffs)\
    \ || allEqual(diffs.map(d => d * -1)));\n}\n", "  if (l.length < 2) {\n    return\
    \ true;\n  }\n\n  const first = l[0];\n  const second = l[1];\n  const increasing\
    \ = second > first;\n  const decreasing = second < first;\n\n  if (increasing\
    \ || decreasing) {\n    for (let i = 1; i < l.length; i++) {\n      const prev\
    \ = l[i - 1];\n      const curr = l[i];\n      if (increasing && prev > curr)\
    \ {\n        return false;\n      } else if (decreasing && prev < curr) {\n  \
    \      return false;\n      }\n    }\n  } else {\n    return false;\n  }\n\n \
    \ return true;\n}\n\ntype Range = { start: number; end: number };\ntype Event\
    \ = { start: number; end: number };\ntype EventWithProcessedTime = { start: number;\
    \ end: number; processedTime: number };\n", "    let monotonic = true;\n    let\
    \ inc = l[0] < l[1];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i\
    \ - 1] < l[i] !== inc) {\n            monotonic = false;\n            break;\n\
    \        }\n    }\n    return monotonic;\n}\n", "    return l.length == 0 ? true\
    \ :\n        l.every((_, i) => i == 0 ? true : l[i - 1] <= l[i]) ||\n        l.every((_,\
    \ i) => i == 0 ? true : l[i - 1] >= l[i]);\n}\n", "    let increasing = true\n\
    \    let decreasing = true\n    let lLen = l.length\n    for (let i = 0; i < lLen;\
    \ i++) {\n        increasing = increasing && l[i] >= l[i - 1]\n        decreasing\
    \ = decreasing && l[i] <= l[i - 1]\n    }\n    return increasing || decreasing\n\
    }\n\nlet m1 = monotonic([1, 2, 4, 20])\nassert(m1, true)\n\nlet m2 = monotonic([1,\
    \ 20, 4, 10])\nassert(m2, false)\n\nlet m3 = monotonic([4, 1, 0, -10])\nassert(m3,\
    \ true)\n", "  if (l.length === 0) {\n    return true;\n  }\n  let inc = true;\n\
    \  let dec = true;\n  for (let i = 1; i < l.length; i++) {\n    inc = inc && l[i]\
    \ >= l[i - 1];\n    dec = dec && l[i] <= l[i - 1];\n  }\n  return inc || dec;\n\
    }\n", "  if (l.length <= 1) {\n    return true;\n  }\n  let increasing = l[0]\
    \ < l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n    if (increasing) {\n\
    \      if (l[i] > l[i + 1]) {\n        return false;\n      }\n    } else {\n\
    \      if (l[i] < l[i + 1]) {\n        return false;\n      }\n    }\n  }\n  return\
    \ true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let increasing\
    \ = l[0] < l[1];\n  for (let i = 1; i < l.length - 1; i++) {\n    if (increasing)\
    \ {\n      if (l[i] > l[i + 1]) {\n        return false;\n      }\n    } else\
    \ {\n      if (l[i] < l[i + 1]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n  let change:\
    \ boolean = false;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > l[i\
    \ - 1]) {\n      if (change === false) {\n        change = true;\n      } else\
    \ if (change === true) {\n        return false;\n      }\n    } else if (l[i]\
    \ < l[i - 1]) {\n      if (change === false) {\n        change = false;\n    \
    \  } else if (change === false) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "    let increasing = true;\n    let decreasing = true;\n\
    \    for (let i = 0; i < l.length - 1; i++) {\n        increasing = increasing\
    \ && l[i] <= l[i + 1];\n        decreasing = decreasing && l[i] >= l[i + 1];\n\
    \    }\n    return increasing || decreasing;\n}\n\n", "    const direction = l[0]\
    \ > l[l.length - 1] ? -1 : 1;\n    for (let i = 0; i < l.length - 1; i++) {\n\
    \        if (direction * (l[i] - l[i + 1]) < 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  if (l.length < 3) {\n    return\
    \ true;\n  }\n  let inc: boolean = l[1] > l[0];\n  for (let i = 1; i < l.length;\
    \ i++) {\n    if (inc && l[i] < l[i - 1]) {\n      return false;\n    }\n    if\
    \ (!inc && l[i] > l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    return _monotonic(l, true) || _monotonic(l, false);\n}\n", "    let\
    \ inc = true;\n    let dec = true;\n    for (let i = 0; i < l.length - 1; i++)\
    \ {\n        if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n   \
    \     if (l[i] < l[i + 1]) {\n            dec = false;\n        }\n    }\n   \
    \ return inc || dec;\n}\n\ntest(\"testMonotonic\", () => {\n    expect(monotonic([1,\
    \ 2, 4, 20])).toBe(true);\n    expect(monotonic([1, 20, 4, 10])).toBe(false);\n\
    \    expect(monotonic([4, 1, 0, -10])).toBe(true);\n});\n", "    let inc = true;\n\
    \    let dec = true;\n    let i = 0;\n    while (i < l.length - 1) {\n       \
    \ if (l[i] > l[i + 1]) {\n            inc = false;\n        }\n        if (l[i]\
    \ < l[i + 1]) {\n            dec = false;\n        }\n        i++;\n    }\n  \
    \  return (inc || dec);\n}\n", "  if (l.length < 2) {\n    return true;\n  }\n\
    \  const head = l[0];\n  const tail = l.slice(1);\n  const subResult = monotonic(tail);\n\
    \  if (!subResult) {\n    return false;\n  }\n  if (head < tail[0]) {\n    return\
    \ tail.every(x => x >= head);\n  } else {\n    return tail.every(x => x <= head);\n\
    \  }\n}\n\ndescribe(\"monotonic\", () => {\n  it(\"test1\", () => {\n    const\
    \ l: number[] = [1, 2, 4, 20];\n    expect(monotonic(l)).toBe(true);\n  });\n\
    \  it(\"test2\", () => {\n    const l: number[] = [1, 20, 4, 10];\n    expect(monotonic(l)).toBe(false);\n\
    \  });\n  it(\"test3\", () => {\n    const l: number[] = [4, 1, 0, -10];\n   \
    \ expect(monotonic(l)).toBe(true);\n  });\n});", "  let increase = true;\n  let\
    \ decrease = true;\n  let len = l.length;\n  for (let i = 0; i < len - 1; i++)\
    \ {\n    if (l[i] < l[i + 1]) {\n      decrease = false;\n    }\n    if (l[i]\
    \ > l[i + 1]) {\n      increase = false;\n    }\n  }\n  return increase || decrease;\n\
    }\n", "  return l.sort((a, b) => a - b).every((e, i, arr) => e === arr[0] || e\
    \ - arr[i - 1] === arr[1] - arr[0]);\n}\n", "  const n = l.length;\n  if (n <\
    \ 2) {\n    return true;\n  }\n\n  if (l[0] < l[1]) {\n    for (let i = 1; i <\
    \ n; i++) {\n      if (l[i - 1] > l[i]) {\n        return false;\n      }\n  \
    \  }\n  } else {\n    for (let i = 1; i < n; i++) {\n      if (l[i - 1] < l[i])\
    \ {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n", "  let\
    \ isIncreasing = false;\n  let isDecreasing = false;\n  l.forEach((num, index)\
    \ => {\n    if (index === 0) {\n      return;\n    }\n    if (num > l[index -\
    \ 1]) {\n      isIncreasing = true;\n    } else if (num < l[index - 1]) {\n  \
    \    isDecreasing = true;\n    }\n  });\n  return isIncreasing || isDecreasing;\n\
    }\n", "    const ln = l.length;\n    if (ln <= 1) {\n        return true;\n  \
    \  }\n    // init\n    let factor = l[1] - l[0];\n    for (let i = 2; i < ln;\
    \ i++) {\n        if (factor === 0) {\n            factor = l[i] - l[i - 1];\n\
    \        } else if (factor < 0) {\n            if (l[i] - l[i - 1] >= 0) {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ (l[i] - l[i - 1] <= 0) {\n                return false;\n            }\n   \
    \     }\n    }\n    return true;\n}", "    let increase = true;\n    let decrease\
    \ = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i\
    \ + 1]) {\n            increase = false;\n        }\n        if (l[i] < l[i +\
    \ 1]) {\n            decrease = false;\n        }\n    }\n    return increase\
    \ || decrease;\n}\n", "    if (l.length < 2) {\n        return true;\n    }\n\n\
    \    let grow = l[1] > l[0];\n    for (let i = 2; i < l.length; i++) {\n     \
    \   let cur = l[i] > l[i - 1];\n        if (cur !== grow) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n", "  let increasing = true;\n\
    \  let decreasing = true;\n  let prev = l[0];\n  for (let v of l) {\n    if (v\
    \ > prev) {\n      decreasing = false;\n    } else if (v < prev) {\n      increasing\
    \ = false;\n    }\n    prev = v;\n  }\n  return increasing || decreasing;\n}\n",
  "  const direction = getDirection(l);\n  if (direction == null) {\n    return false;\n\
    \  }\n  for (let i = 1; i < l.length; i++) {\n    if ((direction === \"down\"\
    \ && l[i] > l[i - 1]) || (direction === \"up\" && l[i] < l[i - 1])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    if (l.length <= 1) {\n      \
    \  return true;\n    }\n\n    let monotonicIncreasing = true;\n    let monotonicDecreasing\
    \ = true;\n\n    let i = 0;\n    while (i < l.length - 1) {\n        if (l[i]\
    \ > l[i + 1]) {\n            monotonicIncreasing = false;\n        }\n       \
    \ if (l[i] < l[i + 1]) {\n            monotonicDecreasing = false;\n        }\n\
    \        i++;\n    }\n\n    return monotonicIncreasing || monotonicDecreasing;\n\
    }\n", "    const ordered = l.sort((a, b) => a - b);\n    return ordered.every((_,\
    \ i) => i == 0 || ordered[i] - ordered[i - 1] >= 0);\n}\n", "    const N = l.length;\n\
    \    let increasing = true;\n    let decreasing = true;\n    for (let i = 0; i\
    \ < N - 1; i++) {\n        increasing = increasing && l[i] <= l[i + 1];\n    \
    \    decreasing = decreasing && l[i] >= l[i + 1];\n    }\n    return increasing\
    \ || decreasing;\n}\n", "  if (l.length === 0) {\n    return true;\n  }\n\n  let\
    \ increasing = l[0] < l[1];\n  let decreasing = l[0] > l[1];\n\n  for (let i =\
    \ 2; i < l.length; i++) {\n    if (increasing && l[i - 1] > l[i]) {\n      return\
    \ false;\n    }\n\n    if (decreasing && l[i - 1] < l[i]) {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n", "    const length = l.length;\n    let i\
    \ = 0;\n    let j = 1;\n    let direction: boolean;\n    while (j < length) {\n\
    \        const delta = l[j] - l[i];\n        if (delta === 0) {\n            j++;\n\
    \            continue;\n        }\n        if (direction === undefined) {\n  \
    \          direction = delta > 0;\n        }\n        if (direction !== (delta\
    \ > 0)) {\n            return false;\n        }\n        i = j;\n        j++;\n\
    \    }\n    return true;\n}\n", "  return false;\n}\n", "    let increasing =\
    \ l[0] < l[1];\n    let decreasing = l[0] > l[1];\n    for (let i = 2; i < l.length;\
    \ i++) {\n        if (increasing && l[i] < l[i - 1]) {\n            return false;\n\
    \        }\n        if (decreasing && l[i] > l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n", "    let isMono = true;\n    let\
    \ pos = 0;\n    let neg = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n \
    \       if (l[i] < l[i + 1]) {\n            pos++;\n        } else if (l[i] >\
    \ l[i + 1]) {\n            neg++;\n        }\n    }\n    if (pos > 0 && neg >\
    \ 0) {\n        isMono = false;\n    }\n    return isMono;\n}\n", "    const incr\
    \ = (a: number, b: number) => a < b;\n    const decr = (a: number, b: number)\
    \ => a > b;\n    return l.every((v, i, a) => i === 0 || a[i - 1] === v || incr(a[i\
    \ - 1], v) || decr(a[i - 1], v));\n}\n", "    let inc = l[0] <= l[1];\n    for\
    \ (let i = 1; i < l.length - 1; i++) {\n        let curr = l[i];\n        let\
    \ next = l[i + 1];\n        if (inc && curr > next) {\n            return false;\n\
    \        } else if (!inc && curr < next) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\n", "  if (l.length <= 1) {\n    return true;\n\
    \  }\n  let a: number = Math.sign(l[1] - l[0]);\n  for (let i = 2; i < l.length;\
    \ i++) {\n    if (a * (l[i] - l[i - 1]) < 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "    if (l.length <= 1) return true;\n    let direction\
    \ = l[1] - l[0];\n    for (let i = 2; i < l.length; i++) {\n        if (direction\
    \ * (l[i] - l[i - 1]) < 0) return false;\n    }\n    return true;\n}\n", "  //\
    \ YOUR CODE HERE\n  let direction: number = l[0] - l[1];\n  let isMonotonic: boolean\
    \ = true;\n  let elmt: number;\n  for (let i = 0; i < l.length; i++) {\n    if\
    \ (direction === 0) {\n      direction = l[i] - l[i + 1];\n    } else {\n    \
    \  elmt = l[i] - l[i + 1];\n      if (direction * elmt < 0) {\n        isMonotonic\
    \ = false;\n        break;\n      }\n    }\n  }\n  return isMonotonic;\n}\n",
  "    if (l.length < 3) {\n        return true;\n    }\n    let prev = l[0];\n  \
    \  let direction = l[1] - l[0];\n    for (let i = 1; i < l.length; i++) {\n  \
    \      let val = l[i];\n        if (direction * (val - prev) <= 0) {\n       \
    \     return false;\n        }\n        prev = val;\n    }\n    return true;\n\
    }\n", "  let up = true;\n  let down = true;\n  for (let i = 1; i < l.length; i++)\
    \ {\n    if (l[i] < l[i - 1]) up = false;\n    if (l[i] > l[i - 1]) down = false;\n\
    \  }\n  return up || down;\n}\n", "  return l.every((v, i) => !i || l[i - 1] <=\
    \ v) || l.every((v, i) => !i || l[i - 1] >= v);\n}\n", "  return isIncreasing(l)\
    \ || isDecreasing(l);\n}\n", "    if (l.length <= 1) {\n        return true;\n\
    \    }\n\n    let direction = l[0] - l[1];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (direction == 0) {\n            direction = l[i - 1] - l[i];\n\
    \            continue;\n        }\n\n        if (Math.sign(direction) != Math.sign(l[i\
    \ - 1] - l[i])) {\n            return false;\n        }\n    }\n\n    return true;\n\
    }\n\n", "    if (l.length <= 1) {\n        return true;\n    }\n    let i = 0;\n\
    \    let direction = l[i + 1] - l[i];\n    while (i < l.length - 1) {\n      \
    \  if (direction * (l[i + 1] - l[i]) < 0) {\n            return false;\n     \
    \   }\n        i++;\n    }\n    return true;\n}\n", "  if (l.length < 2) {\n \
    \   return true;\n  }\n  const dir = l[1] - l[0];\n  for (let i = 2; i < l.length;\
    \ i++) {\n    if (dir * (l[i] - l[i - 1]) < 0) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nexport const primes = (n: number): number[] => {\n\
    \  const primes = [];\n  const notPrimes = new Set();\n  for (let i = 2; i <=\
    \ n; i++) {\n    if (!notPrimes.has(i)) {\n      primes.push(i);\n      for (let\
    \ j = i * i; j <= n; j += i) {\n        notPrimes.add(j);\n      }\n    }\n  }\n\
    \  return primes;\n};\n\nexport function permutations(s: string): string[] {\n\
    \  const perms = permutationsR(s);\n  const out = [];\n  for (const p of perms)\
    \ {\n    if (!out.includes(p)) {\n      out.push(p);\n    }\n  }\n  return out;\n\
    }\n", "    if (l.length <= 1) {\n        return true;\n    }\n    let isAscending\
    \ = l[0] < l[1];\n    for (let i = 1; i < l.length - 1; i++) {\n        if (isAscending)\
    \ {\n            if (l[i] > l[i + 1]) {\n                return false;\n     \
    \       }\n        } else {\n            if (l[i] < l[i + 1]) {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n", " \
    \ let mode = l[0] <= l[1] ? 'inc' : 'dec';\n  return l.every((num, index) => {\n\
    \    if (index === 0) return true;\n    if (mode === 'inc') return num >= l[index\
    \ - 1];\n    return num <= l[index - 1];\n  });\n}\n", "  let el: number;\n  let\
    \ prevEl: number;\n  let isIncreasing: boolean = null;\n  let isDecreasing: boolean\
    \ = null;\n  for (let i = 0; i < l.length; i++) {\n    prevEl = el;\n    el =\
    \ l[i];\n    if (prevEl !== undefined) {\n      if (prevEl < el) {\n        isIncreasing\
    \ = true;\n      } else if (prevEl > el) {\n        isDecreasing = true;\n   \
    \   }\n    }\n  }\n  return !(isIncreasing && isDecreasing);\n}\n", "  return\
    \ l.every((a, i) => {\n    if (i === 0) return true;\n    const r = l[i - 1];\n\
    \    return a > r || a < r;\n  });\n}\n", "  let newL = [...l];\n  let result\
    \ = false;\n  let isIncrease = isIncreasing(newL);\n  let isDecrease = isDecreasing(newL);\n\
    \  if (isIncrease || isDecrease) {\n    result = true;\n  }\n  return result;\n\
    }\n", "  let increasing = true;\n  let decreasing = true;\n  for (let i = 0; i\
    \ < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n\
    \    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return\
    \ increasing || decreasing;\n}\n", "  let cmp = l[0] < l[1] ? 1 : -1;\n  for (let\
    \ i = 0; i < l.length - 1; i++) {\n    if (cmp !== (l[i] < l[i + 1] ? 1 : -1))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  const N = l.length;\n\
    \  let up = 0;\n  let down = 0;\n  for (let i = 1; i < N; i++) {\n    if (l[i]\
    \ > l[i - 1]) {\n      up += 1;\n    } else if (l[i] < l[i - 1]) {\n      down\
    \ += 1;\n    }\n  }\n  return up === 0 || down === 0;\n}\n", "    let asc = true;\n\
    \    let desc = true;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            asc = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            desc = false;\n        }\n    }\n    return asc || desc;\n\
    }\n", "    let increasing = true;\n    let decreasing = true;\n    for (let i\
    \ = 0; i < l.length - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n", "  \
    \  const diff = l.map((e, i) => e - l[i + 1]);\n    return diff.every(e => e ===\
    \ 0 || e < 0) || diff.every(e => e === 0 || e > 0);\n}\n", "    return l.every((v,\
    \ i, l) => (i === 0 || l[i - 1] <= v) && (i === l.length - 1 || v <= l[i + 1]));\n\
    }\n", "    return l.reduce((acc, cur, i, arr) => {\n        return acc === 0 &&\
    \ i > 0 ? acc + Math.sign(cur - arr[i - 1]) : acc;\n    }, 0) === 0;\n}\n", " \
    \   if (l.length <= 1) {\n        return true;\n    }\n\n    let m: number = l[0];\n\
    \    let m_decreasing: boolean = false;\n    let m_increasing: boolean = false;\n\
    \n    for (let i: number = 1; i < l.length; i++) {\n        if (l[i] > m) {\n\
    \            m_increasing = true;\n        } else if (l[i] < m) {\n          \
    \  m_decreasing = true;\n        }\n        if (m_increasing && m_decreasing)\
    \ {\n            return false;\n        }\n        m = l[i];\n    }\n    return\
    \ true;\n}\n", "  const check = l.map((e, i) => {\n    if (i === 0) {\n      return\
    \ 1;\n    }\n    return Math.sign(e - l[i - 1]);\n  });\n  const result = check.filter((e,\
    \ i) => {\n    if (i === 0) {\n      return e;\n    }\n    return e !== check[i\
    \ - 1];\n  });\n  return result.length <= 1;\n}\n", "    if (l.length < 3) return\
    \ true;\n    let res: boolean;\n    if (l[0] < l[1]) {\n        res = l.slice(1).every((n,\
    \ i) => n >= l[i]);\n    } else {\n        res = l.slice(1).every((n, i) => n\
    \ <= l[i]);\n    }\n    return res;\n}", "    const isIncreasing = l[0] < l[1];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (isIncreasing && l[i] <\
    \ l[i - 1]) {\n            return false;\n        }\n        if (!isIncreasing\
    \ && l[i] > l[i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    let first = l[0];\n    let increasing = first < l[1];\n  \
    \  for (let i = 1; i < l.length; i++) {\n        if (increasing && l[i] < l[i\
    \ - 1]) {\n            return false;\n        }\n        if (!increasing && l[i]\
    \ > l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ntest('monotonic', () => {\n    expect(monotonic([1, 2, 4, 20])).toBe(true);\n\
    \    expect(monotonic([1, 20, 4, 10])).toBe(false);\n    expect(monotonic([4,\
    \ 1, 0, -10])).toBe(true);\n});\n", "    if (l.length < 2) {\n        return true;\n\
    \    }\n    let direction = 0;\n    for (let i = 1; i < l.length; i++) {\n   \
    \     const diff = l[i] - l[i - 1];\n        if (diff === 0) {\n            continue;\n\
    \        }\n        if (direction === 0) {\n            direction = diff;\n  \
    \      } else if (diff !== direction) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  if (l.length === 0) {\n    return true;\n \
    \ }\n  let i = 0;\n  while (i < l.length - 1) {\n    if (Math.sign(l[i] - l[i\
    \ + 1]) !== Math.sign(l[0] - l[1])) {\n      return false;\n    }\n    i += 1;\n\
    \  }\n  return true;\n}\n", "  let isIncreasing = true;\n  let isDecreasing =\
    \ true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1])\
    \ {\n      isIncreasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      isDecreasing\
    \ = false;\n    }\n  }\n  return isIncreasing || isDecreasing;\n}\n\nconsole.log(monotonic([1,\
    \ 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\nconsole.log(monotonic([4,\
    \ 1, 0, -10]));\n", "    return l.every((x, i) => i === 0 || (l[i - 1] <= x &&\
    \ l[i - 1] >= x));\n}\n", "    if (l.length <= 1) {\n        return true;\n  \
    \  }\n    let increasing = l[0] < l[1];\n    for (let i = 1; i < l.length - 1;\
    \ i++) {\n        if (increasing) {\n            if (l[i] > l[i + 1]) {\n    \
    \            return false;\n            }\n        } else {\n            if (l[i]\
    \ < l[i + 1]) {\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}\n", "  let direction = l[1] - l[0];\n  for (let i = 2;\
    \ i < l.length; i++) {\n    if (direction !== 0) {\n      if (direction > 0) {\n\
    \        if (l[i] < l[i - 1]) {\n          return false;\n        }\n      } else\
    \ {\n        if (l[i] > l[i - 1]) {\n          return false;\n        }\n    \
    \  }\n    } else {\n      direction = l[i] - l[i - 1];\n    }\n  }\n  return true;\n\
    }\n", "    var i = 0;\n    var increasing = true;\n    while (i < l.length - 1)\
    \ {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n       \
    \     break;\n        }\n        i++;\n    }\n    i = 0;\n    while (i < l.length\
    \ - 1) {\n        if (l[i] < l[i + 1]) {\n            if (!increasing) return\
    \ false;\n        }\n        i++;\n    }\n    return true;\n}\n", "    if (l.length\
    \ <= 1) {\n        return true;\n    }\n    if (l[0] < l[1]) {\n        for (let\
    \ i = 1; i < l.length; i++) {\n            if (l[i] < l[i - 1]) {\n          \
    \      return false;\n            }\n        }\n    } else {\n        for (let\
    \ i = 1; i < l.length; i++) {\n            if (l[i] > l[i - 1]) {\n          \
    \      return false;\n            }\n        }\n    }\n    return true;\n}\n",
  "  // TODO your code here\n  return false;\n}\n", "  return isIncreasing(l) || isDecreasing(l);\n\
    }\n", "  let direction: string = 'equal';\n  for (let i = 0; i < l.length - 1;\
    \ i++) {\n    if (l[i] < l[i + 1]) {\n      if (direction == 'decreasing') {\n\
    \        return false;\n      }\n      direction = 'increasing';\n    } else if\
    \ (l[i] > l[i + 1]) {\n      if (direction == 'increasing') {\n        return\
    \ false;\n      }\n      direction = 'decreasing';\n    }\n  }\n  return true;\n\
    }\n", "    let c = l[0];\n    let inc = true;\n    let dec = true;\n    for (let\
    \ i = 1; i < l.length; i++) {\n        inc = inc && (l[i] >= c);\n        dec\
    \ = dec && (l[i] <= c);\n        c = l[i];\n    }\n    return inc || dec;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
