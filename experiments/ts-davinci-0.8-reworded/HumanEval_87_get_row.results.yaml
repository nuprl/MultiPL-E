language: ts
name: HumanEval_87_get_row
results:
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    const coordinates: [number, number][] = [];\n    lst.forEach((row, rowIndex)\
    \ => {\n        row.forEach((column, columnIndex) => {\n            if (column\
    \ === x) {\n                coordinates.push([rowIndex, columnIndex]);\n     \
    \       }\n        });\n    });\n    return coordinates.sort((a, b) => a[0] -\
    \ b[0] || b[1] - a[1]);\n}\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n\
    \  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ [ 0, 0 ], [ 1, 4 ], [ 1, 0 ], [ 2, 5 ], [ 2, 0 ] ]

    '
  timestamp: 1659822276
- exit_code: 2
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    const res: [number, number][] = [];\n    lst.forEach((row, i) => {\n\
    \        if (row.includes(x)) {\n            for (let j = 0; j < row.length; j++)\
    \ {\n                if (row[j] === x) {\n                    res.push([i, j]);\n\
    \                }\n            }\n        }\n    });\n    return res.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx2g16h63.ts(19,17): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  const rows = [];\n  for (let y = 0; y < lst.length; y++) {\n    for (let\
    \ x = 0; x < lst[y].length; x++) {\n      if (lst[y][x] === x) {\n        rows.push([y,\
    \ x]);\n      }\n    }\n  }\n  return rows.sort(([y1, x1], [y2, x2]) => {\n  \
    \  if (y1 > y2) {\n      return 1;\n    } else if (y1 < y2) {\n      return -1;\n\
    \    } else {\n      if (x1 > x2) {\n        return -1;\n      } else if (x1 <\
    \ x2) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\
    \  });\n}\n\nconsole.log(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4],\
    \ [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n\
    \  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1,\
    \ 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
    \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1,\n    4\n  ],\n  [\n \
    \   1,\n    0\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    2,\n    0\n  ]\n]\n  \
    \  at test (/tmp/tmpzg29gloj.js:51:12)\n    at Object.<anonymous> (/tmp/tmpzg29gloj.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ [ 0, 0 ], [ 1, 4 ], [ 1, 0 ], [ 2, 5 ], [ 2, 0 ] ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: '[]

    '
  timestamp: 1659822276
- exit_code: 2
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  return lst\n    .reduce((acc, row, row_idx) => {\n      const y_lst = row.reduce((acc_row,\
    \ cell, y_idx) => {\n        if (cell === x) {\n          acc_row.push([row_idx,\
    \ y_idx]);\n        }\n        return acc_row;\n      }, []);\n      return acc.concat(y_lst);\n\
    \    }, [])\n    .sort((a, b) => {\n      if (a[0] === b[0]) {\n        return\
    \ a[1] - b[1];\n      }\n      return a[0] - b[0];\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmppljv2muc.ts(17,3): error TS2322: Type 'number[]'\
    \ is not assignable to type '[number, number][]'.\n  Type 'number' is not assignable\
    \ to type '[number, number]'.\n"
  timestamp: 1659822276
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    let arr: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                arr.push([i, j]);\n            }\n        }\n    }\n\
    \    return arr.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return\
    \ b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\nconsole.log(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ [ 0, 0 ], [ 1, 4 ], [ 1, 0 ], [ 2, 5 ], [ 2, 0 ] ]

    '
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  let res: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    let row = lst[i];\n    for (let j = 0; j < row.length; j++) {\n     \
    \ if (row[j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort((a,\
    \ b) => a[0] - b[0]);\n  for (let i = 0; i < res.length; i++) {\n    let row =\
    \ res[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === x)\
    \ {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2,\
    \ 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n\
    \    0\n  ],\n  [\n    1,\n    0\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    2,\n\
    \    0\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    1,\n    0\n  ],\n  [\n    2,\n\
    \    0\n  ],\n  [\n    5,\n    0\n  ]\n]\n\nshould loosely deep-equal\n\n[\n \
    \ [\n    0,\n    0\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    0\n  ],\n\
    \  [\n    2,\n    5\n  ],\n  [\n    2,\n    0\n  ]\n]\n    at test (/tmp/tmpa7dxt7rb.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa7dxt7rb.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 0,\
    \ 0 ], [ 1, 0 ],\n    [ 1, 4 ], [ 2, 0 ],\n    [ 2, 5 ], [ 1, 0 ],\n    [ 2, 0\
    \ ], [ 5, 0 ]\n  ],\n  expected: [ [ 0, 0 ], [ 1, 4 ], [ 1, 0 ], [ 2, 5 ], [ 2,\
    \ 0 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822276
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    const result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n    \
    \        return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
    \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    let res: [number, number][] = [];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n        \
    \    if (lst[i][j] === x) {\n                res.push([i, j]);\n            }\n\
    \        }\n    }\n    res.sort((a, b) => a[0] - b[0]);\n    for (let i: number\
    \ = 0; i < res.length; i++) {\n        if (res[i][0] !== res[i - 1][0]) {\n  \
    \          res.sort((a, b) => b[1] - a[1]);\n        }\n    }\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
    \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp8sr10hdn.js:27\n        if (res[i][0] !== res[i - 1][0]) {\n  \
    \                                  ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading '0')\n    at get_row (/tmp/tmp8sr10hdn.js:27:37)\n    at test (/tmp/tmp8sr10hdn.js:36:22)\n\
    \    at Object.<anonymous> (/tmp/tmp8sr10hdn.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let row: number[] = lst[i];\n        for (let j = 0; j < row.length;\
    \ j++) {\n            if (row[j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n  \
    \  result.sort((a, b) => a[1] - b[1]);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n\
    \    0\n  ],\n  [\n    1,\n    0\n  ],\n  [\n    2,\n    0\n  ],\n  [\n    1,\n\
    \    4\n  ],\n  [\n    2,\n    5\n  ]\n]\n\nshould loosely deep-equal\n\n[\n \
    \ [\n    0,\n    0\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    0\n  ],\n\
    \  [\n    2,\n    5\n  ],\n  [\n    2,\n    0\n  ]\n]\n    at test (/tmp/tmpa4wpnr_5.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa4wpnr_5.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ],\
    \ [ 1, 0 ], [ 2, 0 ], [ 1, 4 ], [ 2, 5 ] ],\n  expected: [ [ 0, 0 ], [ 1, 4 ],\
    \ [ 1, 0 ], [ 2, 5 ], [ 2, 0 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    const res: [number, number][] = [];\n    lst.forEach((v, i) => {\n  \
    \      v.forEach((v, j) => {\n            if (v === x) {\n                res.push([i,\
    \ j]);\n            }\n        });\n    });\n    res.sort((a, b) => a[0] - b[0]);\n\
    \    res.forEach((v, i) => {\n        res.forEach((v, j) => {\n            if\
    \ (v[0] === i) {\n                res.sort((a, b) => b[1] - a[1]);\n         \
    \   }\n        });\n    });\n    return res;\n}\nconsole.log(get_row([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));\nconsole.log(get_row([],\
    \ 1));\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n\
    \    5\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    0,\n    0\n  ],\n  [\n    1,\n\
    \    0\n  ],\n  [\n    2,\n    0\n  ]\n]\n\nshould loosely deep-equal\n\n[\n \
    \ [\n    0,\n    0\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    0\n  ],\n\
    \  [\n    2,\n    5\n  ],\n  [\n    2,\n    0\n  ]\n]\n    at test (/tmp/tmpc47qwq95.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc47qwq95.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 5 ],\
    \ [ 1, 4 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],\n  expected: [ [ 0, 0 ], [ 1, 4 ],\
    \ [ 1, 0 ], [ 2, 5 ], [ 2, 0 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ [ 2, 5 ], [ 1, 4 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ]

    []

    [ [ 2, 2 ] ]

    '
  timestamp: 1659822276
- exit_code: 2
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  return lst\n    .map((row, rowIndex) =>\n      row\n        .map((item,\
    \ columnIndex) => ({ item, rowIndex, columnIndex }))\n        .filter(({ item\
    \ }) => item === x)\n    )\n    .flat()\n    .sort((a, b) => {\n      if (a.rowIndex\
    \ !== b.rowIndex) {\n        return a.rowIndex - b.rowIndex;\n      }\n      return\
    \ b.columnIndex - a.columnIndex;\n    })\n    .map(({ rowIndex, columnIndex })\
    \ => [rowIndex, columnIndex]);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n\
    \  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnpl_9arx.ts(23,6): error TS2339: Property ''flat''
    does not exist on type ''{ item: number; rowIndex: number; columnIndex: number;
    }[][]''.

    '
  timestamp: 1659822276
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  const xCoordinates: [number, number][] = [];\n  lst.forEach((row, i) =>\
    \ {\n    row.forEach((col, j) => {\n      if (col === x) {\n        xCoordinates.push([i,\
    \ j]);\n      }\n    });\n  });\n  xCoordinates.sort((a, b) => {\n    return a[0]\
    \ - b[0] || b[1] - a[1];\n  });\n  return xCoordinates;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822276
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    let row_cols: [number, number][] = [];\n    lst.forEach((row, row_num)\
    \ => {\n        row.forEach((col, col_num) => {\n            if (col === x) {\n\
    \                row_cols.push([row_num, col_num]);\n            }\n        });\n\
    \    });\n    row_cols.sort((a, b) => {\n        let result = a[0] - b[0];\n \
    \       if (result === 0) {\n            result = b[1] - a[1];\n        }\n  \
    \      return result;\n    });\n    return row_cols;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822276
- exit_code: 2
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  return lst\n    .map((row, row_index) =>\n      row\n        .map((column,\
    \ column_index) =>\n          column === x ? [row_index, column_index] : null\n\
    \        )\n        .filter(Boolean)\n    )\n    .flat()\n    .sort((a, b) =>\
    \ a[0] - b[0] || b[1] - a[1]);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n\
    \  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdq533pa6.ts(25,6): error TS2339: Property ''flat''
    does not exist on type ''number[][][]''.

    '
  timestamp: 1659822276
- exit_code: 2
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  return lst\n    .map((row, i) => row.map((num, j) => [i, j]))\n    .reduce((acc,\
    \ curr) => [...acc, ...curr], [])\n    .filter(([i, j]) => lst[i][j] === x)\n\
    \    .sort(([x1, y1], [x2, y2]) => {\n      if (x1 !== x2) {\n        return x1\
    \ - x2;\n      }\n      return y2 - y1;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpod2bxd4c.ts(17,3): error TS2322: Type 'number[][]'\
    \ is not assignable to type '[number, number][]'.\n  Type 'number[]' is missing\
    \ the following properties from type '[number, number]': 0, 1\n"
  timestamp: 1659822276
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    const result: [number, number][] = [];\n    lst.forEach((row, r) => {\n\
    \        row.forEach((element, c) => {\n            if (element === x) {\n   \
    \             result.push([r, c]);\n            }\n        });\n    });\n    return\
    \ result.sort((a, b) => (a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : b[1] - a[1]));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
    \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n    let result: [number, number][] = [];\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    result.sort((a, b) => a[0] - b[0]);\n  \
    \  for (let i: number = 0; i < result.length; i++) {\n        if (result[i][0]\
    \ === result[i + 1][0]) {\n            result.sort((a, b) => b[1] - a[1]);\n \
    \       }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_row;\n\
    \  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1],\
    \ [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3,\
    \ 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpuk_6jxmw.js:27\n        if (result[i][0] === result[i + 1][0])\
    \ {\n                                          ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading '0')\n    at get_row (/tmp/tmpuk_6jxmw.js:27:43)\n   \
    \ at test (/tmp/tmpuk_6jxmw.js:36:22)\n    at Object.<anonymous> (/tmp/tmpuk_6jxmw.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822276
- exit_code: 2
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  return [];\n}\n\nexport { is_isogram, is_upper, get_factors, get_row };\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
    \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprpu7gt52.ts(20,10): error TS2304: Cannot find name
    ''is_isogram''.

    ../../../../../tmp/tmprpu7gt52.ts(20,22): error TS2304: Cannot find name ''is_upper''.

    ../../../../../tmp/tmprpu7gt52.ts(20,32): error TS2304: Cannot find name ''get_factors''.

    '
  timestamp: 1659822276
- exit_code: 0
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  const result: [number, number][] = [];\n  lst.forEach((row, i) => {\n \
    \   row.forEach((item, j) => {\n      if (item === x) {\n        result.push([i,\
    \ j]);\n      }\n    });\n  });\n  return result.sort((a, b) => {\n    if (a[0]\
    \ === b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
    \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1,\
    \ 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5],\
    \ [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]],\
    \ 2),[]);\n  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822276
- exit_code: 1
  program: "//You are given a 2 dimensional data, as a nested arrays,\n// which is\
    \ similar to matrix, however, unlike matrices,\n// each row may contain a different\
    \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
    // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
    \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
    \ by rows in ascending order.\n// Also, sort coordinates of the row by columns\
    \ in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5],\
    \ [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]],\
    \ 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][]\
    \ {\n  let result: [number, number][] = [];\n  lst.forEach((row, rowIndex) =>\
    \ {\n    row.forEach((number, numberIndex) => {\n      if (number === x) {\n \
    \       result.push([rowIndex, numberIndex]);\n      }\n    });\n  });\n  // sort\
    \ by rows in ascending order\n  result.sort((a, b) => a[0] - b[0]);\n  // sort\
    \ by columns in descending order\n  result.sort((a, b) => b[1] - a[1]);\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4],\
    \ [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n\
    \  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1,\
    \ 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
    \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([],\
    \ 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
    \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n\
    \    5\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    0,\n    0\n  ],\n  [\n    1,\n\
    \    0\n  ],\n  [\n    2,\n    0\n  ]\n]\n\nshould loosely deep-equal\n\n[\n \
    \ [\n    0,\n    0\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    0\n  ],\n\
    \  [\n    2,\n    5\n  ],\n  [\n    2,\n    0\n  ]\n]\n    at test (/tmp/tmpcnhmgbk3.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcnhmgbk3.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 5 ],\
    \ [ 1, 4 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],\n  expected: [ [ 0, 0 ], [ 1, 4 ],\
    \ [ 1, 0 ], [ 2, 5 ], [ 2, 0 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822276
