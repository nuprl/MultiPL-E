name: HumanEval_61_correct_bracketing
language: ts
prompt: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
  ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
  ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
  )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
  ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
  (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())()))()\"),false);\n}\n\ntest();"
completions: ["    let leftBracketCounter = 0;\n    let rightBracketCounter = 0;\n\
    \    for (let index = 0; index < brackets.length; index++) {\n        if (brackets[index]\
    \ === \"(\") {\n            leftBracketCounter++;\n        } else if (brackets[index]\
    \ === \")\") {\n            rightBracketCounter++;\n        }\n    }\n    return\
    \ leftBracketCounter === rightBracketCounter;\n}\n", "    return brackets.split(\"\
    \").reduce((a, c) => a + (c === \"(\" ? 1 : -1), 0) === 0;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"(\") {\n      count++;\n    } else if (brackets[i] === \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ === 0;\n}\n", "  // INSERT YOUR CODE HERE\n  return false;\n}\n\n", "    var\
    \ stack: string[] = [];\n    for (var i = 0; i < brackets.length; i++) {\n   \
    \     if (brackets[i] == \"(\") {\n            stack.push(brackets[i]);\n    \
    \    } else if (brackets[i] == \")\") {\n            if (stack.length == 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length == 0;\n}\n", "    //\
    \ placeholder\n    return false;\n}\n\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      sum += 1;\n\
    \    } else {\n      sum -= 1;\n    }\n    if (sum < 0) {\n      return false;\n\
    \    }\n  }\n  return sum === 0;\n}\n", "    let bracketStack: string[] = [];\n\
    \    for (let i: number = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === '(') {\n            bracketStack.push('(');\n        } else if (brackets[i]\
    \ === ')') {\n            bracketStack.pop();\n        }\n    }\n    return bracketStack.length\
    \ === 0;\n}\n", "    // console.log(brackets);\n    let newBrackets = brackets.split(\"\
    \");\n    // console.log(newBrackets);\n    let leftBrackets = 0;\n    for (let\
    \ bracket of newBrackets) {\n        if (bracket === \"(\") {\n            leftBrackets\
    \ += 1;\n        } else if (bracket === \")\") {\n            leftBrackets -=\
    \ 1;\n        }\n        if (leftBrackets < 0) {\n            return false;\n\
    \        }\n    }\n    if (leftBrackets === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "  let openCounter = 0;\n  let closeCounter\
    \ = 0;\n  for (let bracket of brackets) {\n    if (bracket === '(') {\n      openCounter\
    \ += 1;\n    } else if (bracket === ')') {\n      closeCounter += 1;\n    }\n\
    \  }\n  return openCounter === closeCounter;\n}\n", "    let num_open = 0;\n \
    \   for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"\
    (\") {\n            num_open++;\n        } else if (brackets[i] === \")\") {\n\
    \            num_open--;\n        }\n        if (num_open < 0) {\n           \
    \ return false;\n        }\n    }\n    return num_open === 0;\n}\n", "  const\
    \ arr = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      arr.push(brackets[i]);\n    } else if (brackets[i] === \"\
    )\") {\n      arr.pop();\n    }\n  }\n  return arr.length === 0;\n}\n", "  const\
    \ stack: string[] = [];\n  for (const bracket of brackets) {\n    if (bracket\
    \ === \"(\") {\n      stack.push(bracket);\n    } else if (bracket === \")\")\
    \ {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n\
    \    }\n  }\n  return stack.length === 0;\n}\n", "    const openingBrackets =\
    \ new Stack();\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"(\") {\n            openingBrackets.push(brackets[i]);\n        } else\
    \ if (brackets[i] === \")\") {\n            if (openingBrackets.isEmpty()) {\n\
    \                return false;\n            }\n            openingBrackets.pop();\n\
    \        }\n    }\n    return openingBrackets.isEmpty();\n}\n", "  let num_open\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"(\") {\n      num_open++;\n    } else if (brackets[i] === \")\") {\n     \
    \ num_open--;\n    }\n    if (num_open < 0) {\n      return false;\n    }\n  }\n\
    \  return num_open === 0;\n}\n", "  if (brackets === \"\") {\n    return true;\n\
    \  }\n  const stack: string[] = [];\n  for (const bracket of brackets) {\n   \
    \ if (bracket === \"(\") {\n      stack.push(bracket);\n    } else if (bracket\
    \ === \")\") {\n      if (stack.length === 0) {\n        return false;\n     \
    \ }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n\ndescribe(\"\
    correct_bracketing\", () => {\n  it(\"returns true when given empty string\",\
    \ () => {\n    expect(correct_bracketing(\"\")).toBe(true);\n  });\n  it(\"returns\
    \ false when given single open bracket\", () => {\n    expect(correct_bracketing(\"\
    (\")).toBe(false);\n  });\n  it(\"returns true when given valid bracket pair\"\
    , () => {\n    expect(correct_bracketing(\"()\")).toBe(true);\n  });\n  it(\"\
    returns true when given valid bracket expression\", () => {\n    expect(correct_bracketing(\"\
    (()())\")).toBe(true);\n  });\n  it(\"returns false when given invalid bracket\
    \ expression\", () => {\n    expect(correct_bracketing(\")(()\")).toBe(false);\n\
    \  });\n});", "  // Find the number of opening brackets\n  let open = 0;\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n\
    \      open++;\n    }\n  }\n  // If the number of closing brackets does not match\
    \ the number of opening\n  // brackets, then the bracketing is incorrect.\n  return\
    \ (brackets.length - open) === open;\n}\n", "  let count = 0;\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n\
    \    } else if (brackets[i] === \")\") {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}\n", "    return\
    \ !!brackets.match(/^\\(?[^\\(\\)]*\\)*$/);\n}\n\n", "    let count = 0;\n   \
    \ for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(')\
    \ {\n            count++;\n        } else if (brackets[i] === ')') {\n       \
    \     count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count === 0;\n}\n\n", "  let counter = 0;\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n\
    \      counter++;\n    } else if (brackets[i] === \")\") {\n      counter--;\n\
    \    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  return counter\
    \ === 0;\n}\n", "    let counter = 0;\n    for (let b of brackets) {\n       \
    \ if (b === '(') {\n            counter++;\n        } else if (b === ')') {\n\
    \            counter--;\n        }\n        if (counter < 0) {\n            return\
    \ false;\n        }\n    }\n    return counter === 0;\n}\n", "    // your code\
    \ goes here\n    return false;\n}\n", "    let total = 0;\n    let len = brackets.length;\n\
    \    for (let i = 0; i < len; i++) {\n        let curr = brackets[i];\n      \
    \  total += curr === \"(\" ? 1 : -1;\n        if (total < 0) return false;\n \
    \   }\n    return total === 0;\n}\n", "    let count = 0;\n    for (let i = 0;\
    \ i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n        \
    \    count += 1;\n        } else if (brackets[i] === \")\") {\n            count\
    \ -= 1;\n        }\n        if (count < 0) {\n            return false;\n    \
    \    }\n    }\n    return count === 0;\n}\n", "  return brackets.length > 0 &&\
    \ correct_bracketing_helper(brackets, 0, 0);\n}\n", "  let count = 0;\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n     \
    \ count++;\n    } else if (brackets[i] === \")\") {\n      count--;\n    }\n \
    \   if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n\
    }\n", "    // Your code here\n    return false;\n}\n\n", "  //TODO\n  return false;\n\
    }\n\n", "    let count: number = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '(') {\n            count++;\n        }\
    \ else if (brackets[i] === ')') {\n            count--;\n        } else {\n  \
    \          throw 'brackets shold be of \"(\" and \")\"';\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ === 0;\n}\n", "  let stack: string[] = [];\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    let bracket = brackets[i];\n    if (bracket === '(') {\n      stack.push(bracket);\n\
    \    } else if (bracket === ')') {\n      if (stack.length === 0) {\n        return\
    \ false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n\
    }\n", "    let n = 0;\n    for (let i = 0; i < brackets.length; i++) {\n     \
    \   if (brackets[i] === '(') {\n            n++;\n        } else {\n         \
    \   n--;\n        }\n        if (n < 0) {\n            return false;\n       \
    \ }\n    }\n    return n === 0;\n}\n", "  return true;\n}\n", "    var counter\
    \ = 0;\n    for (var bracket of brackets) {\n        if (bracket == \"(\") {\n\
    \            counter += 1;\n        } else if (bracket == \")\") {\n         \
    \   counter -= 1;\n        }\n        if (counter < 0) {\n            return false;\n\
    \        }\n    }\n    return counter == 0;\n}\n", "    return true;\n}\n", " \
    \   // TODO\n    // for each character in the string\n    for (let character of\
    \ brackets) {\n        // if it is a \"(\" push it onto the stack\n        if\
    \ (character === \"(\") {\n            stack.push(character);\n        } else\
    \ {\n            // otherwise, it must be a \")\"\n            // if the stack\
    \ is empty, return false\n            if (stack.length === 0) {\n            \
    \    return false;\n            }\n            // pop a character from the stack\n\
    \            stack.pop();\n        }\n    }\n    // if the stack is empty, return\
    \ true\n    // otherwise, return false\n    return stack.length === 0;\n}\n\n",
  "    const stack: string[] = [];\n    for (const bracket of brackets) {\n      \
    \  if (bracket === '(') {\n            stack.push(bracket);\n        } else if\
    \ (bracket === ')') {\n            if (stack.length === 0) {\n               \
    \ return false;\n            }\n            stack.pop();\n        }\n    }\n \
    \   return stack.length === 0;\n}\n\nexport function run() {\n    console.log('Q2:\
    \ Test `correct_bracketing`');\n    console.log(correct_bracketing('('));\n  \
    \  console.log(correct_bracketing('()'));\n    console.log(correct_bracketing('(()())'));\n\
    \    console.log(correct_bracketing(')(()'));\n}", "    // todo: write your code\
    \ here\n    return false;\n}\n", "  let counter = 0;\n  let i = 0;\n  while (i\
    \ < brackets.length) {\n    if (brackets[i] === \"(\") {\n      counter += 1;\n\
    \    } else if (brackets[i] === \")\") {\n      counter -= 1;\n    } else {\n\
    \      throw new Error(\"unknown bracket\");\n    }\n    if (counter < 0) {\n\
    \      return false;\n    }\n    i += 1;\n  }\n  return counter === 0;\n}\n",
  "  let opens = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      opens++;\n    } else if (brackets[i] === \")\") {\n    \
    \  opens--;\n    }\n    if (opens < 0) {\n      return false;\n    }\n  }\n  return\
    \ opens === 0;\n}\n\ntest(correct_bracketing, [\"(\", false]);\ntest(correct_bracketing,\
    \ [\"()\", true]);\ntest(correct_bracketing, [\"(()())\", true]);\ntest(correct_bracketing,\
    \ [\")(()\", false]);\n", "    // base case: if there are no brackets left\n \
    \   if (brackets === \"\") return true;\n    // if the first bracket is \"(\"\n\
    \    if (brackets[0] === \"(\") {\n        // find the next matching closing bracket\n\
    \        let end = brackets.indexOf(\")\");\n        // make sure there is a matching\
    \ closing bracket\n        if (end < 0) return false;\n        // check the brackets\
    \ inside\n        let inside = brackets.slice(1, end);\n        if (!correct_bracketing(inside))\
    \ return false;\n        // keep checking the remaining brackets\n        return\
    \ correct_bracketing(brackets.slice(end + 1));\n    }\n    // if the first bracket\
    \ is \")\"\n    else {\n        // if the first bracket is a closing bracket and\
    \ there is no matching opening bracket\n        return false;\n    }\n}", "  \
    \  let open_count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n    \
    \    const bracket = brackets[i];\n        if (bracket === \"(\") {\n        \
    \    open_count++;\n        } else if (bracket === \")\") {\n            open_count--;\n\
    \        }\n        if (open_count < 0) {\n            return false;\n       \
    \ }\n    }\n    return open_count === 0;\n}\n\n", "  let acc = 0;\n  let p: string;\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    p = brackets[i];\n    if (p\
    \ === \"(\") {\n      acc++;\n    } else if (p === \")\") {\n      acc--;\n  \
    \  }\n    if (acc < 0) {\n      return false;\n    }\n  }\n  return acc === 0;\n\
    }\n", "    var num: number = 0;\n    for (var i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] == \"(\") {\n            num += 1;\n        } else\
    \ if (brackets[i] == \")\") {\n            num -= 1;\n        }\n        if (num\
    \ < 0) {\n            return false;\n        }\n    }\n    return num == 0;\n\
    }\n", "  let stack: string[] = [];\n  let i: number = 0;\n  while (i < brackets.length)\
    \ {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else\
    \ if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n    i++;\n  }\n\
    \  return stack.length === 0;\n}\n", "    // your code here\n    return false;\n\
    }\n", "  let count: number = 0;\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "  const BRACKETS = {\n    ')': '(',\n\
    \    ']': '[',\n    '}': '{',\n  };\n  const BRACKETS_OPEN = Object.values(BRACKETS);\n\
    \  const BRACKETS_CLOSE = Object.keys(BRACKETS);\n\n  const stack = [];\n  for\
    \ (const bracket of brackets) {\n    if (BRACKETS_OPEN.includes(bracket)) {\n\
    \      stack.push(bracket);\n    } else if (BRACKETS_CLOSE.includes(bracket))\
    \ {\n      if (stack.length === 0) {\n        return false;\n      }\n      const\
    \ top = stack.pop();\n      if (BRACKETS[bracket] !== top) {\n        return false;\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}", "  let stack: string[]\
    \ = [];\n  let openBracket = false;\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n      openBracket\
    \ = true;\n    } else if (brackets[i] === \")\") {\n      stack.pop();\n    }\n\
    \  }\n  if (stack.length === 0 && openBracket) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    let count = 0;\n    let temp = brackets.split(\"\
    \");\n    for (let i = 0; i < temp.length; i++) {\n        if (temp[i] == \"(\"\
    ) {\n            count += 1;\n        } else if (temp[i] == \")\") {\n       \
    \     count -= 1;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    if (count == 0) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n", "  let num_brackets = 0;\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      num_brackets\
    \ += 1;\n    } else if (brackets[i] === \")\") {\n      num_brackets -= 1;\n \
    \   }\n    if (num_brackets < 0) {\n      return false;\n    }\n  }\n  return\
    \ num_brackets === 0;\n}\n", "  let open = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      open++;\n    } else if (brackets[i]\
    \ === \")\") {\n      open--;\n    }\n    if (open < 0) {\n      return false;\n\
    \    }\n  }\n  return open === 0;\n}\n", "    let count = 0;\n    for (let i =\
    \ 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n     \
    \       count++;\n        } else if (brackets[i] === \")\") {\n            count--;\n\
    \        } else {\n            console.log(\"Invalid character in input\");\n\
    \            return false;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n\nconsole.log(correct_bracketing(\"\
    (()())\"));\nconsole.log(correct_bracketing(\"()\"));\nconsole.log(correct_bracketing(\"\
    (\"));\nconsole.log(correct_bracketing(\")(()\"));\nconsole.log(correct_bracketing(\"\
    ((((((((()))))))\"));", "    return brackets.split(\"\").filter(p => p === \"\
    (\").length === brackets.split(\"\").filter(p => p === \")\").length;\n}\n", " \
    \ const length = brackets.length;\n  const half = Math.ceil(length / 2);\n  const\
    \ stack: string[] = [];\n  let index = 0;\n  while (index < half) {\n    stack.push(brackets[index]);\n\
    \    index++;\n  }\n  while (index < length) {\n    if (stack.pop() !== brackets[index])\
    \ {\n      return false;\n    }\n    index++;\n  }\n  return true;\n}\n", "  //(()())\
    \  \n  //((())) \n  if (brackets === \"\") {\n    return true;\n  }\n  else if\
    \ (brackets.charAt(0) === \"(\") {\n    let closeBrackets = brackets.indexOf(\"\
    )\");\n    if (closeBrackets === -1) {\n      return false;\n    }\n    else {\n\
    \      brackets = brackets.slice(closeBrackets + 1);\n      return correct_bracketing(brackets);\n\
    \    }\n  }\n  else {\n    return false;\n  }\n}\n\n", "  if (brackets.length\
    \ % 2 !== 0) {\n    return false;\n  }\n  let opening_brackets = 0;\n  for (let\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n     \
    \ opening_brackets++;\n    } else {\n      opening_brackets--;\n    }\n    if\
    \ (opening_brackets < 0) {\n      return false;\n    }\n  }\n  return opening_brackets\
    \ === 0;\n}\n", "    let left = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"(\") {\n            left++;\n        } else\
    \ {\n            if (left === 0) {\n                return false;\n          \
    \  }\n            left--;\n        }\n    }\n    return left === 0;\n}\n", " \
    \ let counter = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      counter += 1;\n    } else if (brackets[i] === \")\") {\n\
    \      counter -= 1;\n    }\n    if (counter < 0) {\n      return false;\n   \
    \ }\n  }\n  return counter === 0;\n}\n", "  let count = 0;\n  for (let i of brackets)\
    \ {\n    if (i === \"(\") {\n      count++;\n    } else if (i === \")\") {\n \
    \     count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count === 0;\n}\n", "    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            count++;\n       \
    \ } else if (brackets[i] === \")\") {\n            count--;\n        }\n     \
    \   if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    let open = 0;\n    for (let char of brackets) {\n \
    \       if (char === \"(\") {\n            open++;\n        } else if (char ===\
    \ \")\") {\n            open--;\n        }\n        if (open < 0) {\n        \
    \    return false;\n        }\n    }\n    return open === 0;\n}\n", "    if (brackets\
    \ === '') {\n        return true;\n    }\n    const stack: string[] = [];\n  \
    \  for (const char of brackets) {\n        if (char === '(') {\n            stack.push(char);\n\
    \        } else if (char === ')') {\n            if (stack.length === 0) {\n \
    \               return false;\n            }\n            stack.pop();\n     \
    \   }\n    }\n    return stack.length === 0;\n}\n", "    if (brackets.length ===\
    \ 0) {\n        return true;\n    }\n    let count = 0;\n    for (let c of brackets)\
    \ {\n        if (c === '(') {\n            count++;\n        } else if (c ===\
    \ ')') {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count === 0;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"(\") {\n      count++;\n    } else if (brackets[i] === \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ === 0;\n}\n\nconsole.log(correct_bracketing(\"(\"));\nconsole.log(correct_bracketing(\"\
    ()\"));\nconsole.log(correct_bracketing(\"(()())\"));\nconsole.log(correct_bracketing(\"\
    )(()\"));\n", "    let counter = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            counter += 1;\n  \
    \      } else if (brackets[i] === \")\") {\n            counter -= 1;\n      \
    \  }\n        if (counter < 0) {\n            return false;\n        }\n    }\n\
    \    return counter === 0;\n}\n", "    return false;\n}\n", "    let counter =\
    \ 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"(\") {\n            counter++;\n        } else if (brackets[i] === \"\
    )\") {\n            counter--;\n        } else {\n            return false;\n\
    \        }\n        if (counter < 0) {\n            return false;\n        }\n\
    \    }\n    return counter === 0;\n}\n", "  let count = 0;\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      count +=\
    \ 1;\n    } else if (brackets[i] === \")\") {\n      count -= 1;\n    }\n    if\
    \ (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n}\n",
  "    // FILL IN YOUR ANSWER HERE\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < brackets.length; i++) {\n        if (brackets[i] == '(') {\n      \
    \      sum++;\n        } else {\n            sum--;\n        }\n        if (sum\
    \ < 0) {\n            return false;\n        }\n    }\n    return sum == 0;\n\
    }\n", "  let stack: string[] = [];\n  for (let i: number = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n \
    \   } else if (brackets[i] === \")\") {\n      if (stack.length > 0) {\n     \
    \   stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n\
    \  return stack.length === 0;\n}\n", "    var openParenCount = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n \
    \           openParenCount++;\n        } else if (brackets[i] === \")\") {\n \
    \           openParenCount--;\n        }\n        if (openParenCount < 0) {\n\
    \            return false;\n        }\n    }\n    return openParenCount === 0;\n\
    }\n\nexport { correct_bracketing }", "    return false;\n}", "    let opening_count\
    \ = 0\n    let closing_count = 0\n    for (let index = 0; index < brackets.length;\
    \ index++) {\n        if (brackets[index] == \"(\") {\n            opening_count\
    \ += 1\n        } else if (brackets[index] == \")\") {\n            closing_count\
    \ += 1\n        }\n    }\n    if (opening_count != closing_count) {\n        return\
    \ false\n    }\n    return true\n}\n", "    // TODO: Make it work for a string\
    \ of any length\n    if (brackets.length === 1) {\n        return false;\n   \
    \ } else if (brackets.length === 2) {\n        return true;\n    } else {\n  \
    \      return brackets[0] === \"(\" && brackets[1] === \")\" && correct_bracketing(brackets.slice(2));\n\
    \    }\n}\n", "    const stack: string[] = [];\n    for (const c of brackets)\
    \ {\n        if (c === \"(\") {\n            stack.push(c);\n        } else if\
    \ (c === \")\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "  const openCloseStack: string[] = [];\n  const\
    \ splitBrackets = brackets.split(\"\");\n  if (splitBrackets[0] === \")\") {\n\
    \    return false;\n  }\n  for (let i = 0; i < splitBrackets.length; i++) {\n\
    \    if (splitBrackets[i] === \"(\") {\n      openCloseStack.push(splitBrackets[i]);\n\
    \    } else {\n      if (openCloseStack.length === 0) {\n        return false;\n\
    \      }\n      openCloseStack.pop();\n    }\n  }\n  return openCloseStack.length\
    \ === 0;\n}", "    let stack: string[] = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "  let\
    \ count: number = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n \
    \     count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n \
    \ }\n  return count === 0;\n}\n", "    return /^[()]*$/.test(brackets) && !/^[()]*[(][()]*$/.test(brackets);\n\
    }\n", "    let arr: string[] = brackets.split(\"\");\n    let counter: number\
    \ = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === \"(\") {\n            counter++;\n        } else if (arr[i] === \")\") {\n\
    \            counter--;\n        }\n        if (counter < 0) {\n            return\
    \ false;\n        }\n    }\n    return counter === 0;\n}\n\ntest(correct_bracketing(\"\
    (()())\"), true);\ntest(correct_bracketing(\"(()\"), false);\ntest(correct_bracketing(\"\
    (())(\"), false);\ntest(correct_bracketing(\"()\"), true);\ntest(correct_bracketing(\"\
    (()())\"), true);\ntest(correct_bracketing(\"((()())\"), false);\ntest(correct_bracketing(\"\
    (())()\"), true);\ntest(correct_bracketing(\"()()()\"), true);\ntest(correct_bracketing(\"\
    ()(()())\"), true);\ntest(correct_bracketing(\"(()(()()))\"), true);\ntest(correct_bracketing(\"\
    (()(()()))(())\"), true);\ntest(correct_bracketing(\"(()(()()))()()()()\"), true);\n\
    test(correct_bracketing(\"(()(()()))()()()())\"), false);\ntest(correct_bracketing(\"\
    (()(()()))()()()())\"), false);\ntest(correct_bracketing(\"(()(()()))()()()(())\"\
    ), false);\ntest(correct_bracketing(\"()(()()))()()()(())\"), false);\ntest(correct_bracketing(\"\
    ()(()()))()()()(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(()",
  "  let valid = true;\n  let count: number = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i]\
    \ === \")\") {\n      count--;\n    } else {\n      valid = false;\n    }\n  \
    \  if (count < 0) {\n      valid = false;\n    }\n  }\n  if (count !== 0) {\n\
    \    valid = false;\n  }\n  return valid;\n}\n", "    let countOpen = 0;\n   \
    \ let countClose = 0;\n    for (let i = 0; i < brackets.length; i++) {\n     \
    \   if (brackets[i] === \"(\") {\n            countOpen++;\n        } else if\
    \ (brackets[i] === \")\") {\n            countClose++;\n        }\n    }\n   \
    \ return countOpen === countClose;\n}\n", "  let opened = 0;\n  for (let i = 0;\
    \ i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      opened++;\n\
    \    } else if (brackets[i] === \")\") {\n      opened--;\n    }\n    if (opened\
    \ < 0) {\n      return false;\n    }\n  }\n  return opened === 0;\n}\n", "  let\
    \ i = 0;\n  let brack = 0;\n  while (i < brackets.length) {\n    if (brackets[i]\
    \ === \"(\") {\n      brack++;\n    } else if (brackets[i] === \")\") {\n    \
    \  brack--;\n    }\n    if (brack < 0) {\n      return false;\n    }\n    i++;\n\
    \  }\n  return brack === 0;\n}\n", "    return false;\n}\n", "  let count = 0;\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\"\
    ) {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n      count -=\
    \ 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    //declare\
    \ a number called \"left\" to count how many \"(\" we have in brackets.\n    let\
    \ left: number = 0;\n    //this loop will iterate through each character in brackets\n\
    \    for (let i: number = 0; i < brackets.length; i++) {\n        //increase left\
    \ by 1 if we have a \"(\"\n        if (brackets[i] == \"(\") {\n            left++;\n\
    \        }\n        //if we have a \")\" and left is more than zero, we decrease\
    \ left by 1\n        //to represent a close bracket for the last open bracket\
    \ we have.\n        if (brackets[i] == \")\" && left > 0) {\n            left--;\n\
    \        }\n        //if we have a \")\" and left is already zero, there is a\
    \ close bracket \n        //without any open bracket, so we return false\n   \
    \     if (brackets[i] == \")\" && left == 0) {\n            return false;\n  \
    \      }\n    }\n    //if all characters in brackets are iterated, and left is\
    \ zero,\n    //there is the same number of \"(\" and \")\", so we return true.\n\
    \    if (left == 0) {\n        return true;\n    }\n    //otherwise, there are\
    \ not enough \")\" to match all the \"(\"\n    //so we return false.\n    else\
    \ {\n        return false;\n    }\n}\n", "    let result: boolean = true;\n  \
    \  let openBrackets: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            openBrackets += 1;\n\
    \        } else if (brackets[i] === \")\") {\n            openBrackets -= 1;\n\
    \        }\n        if (openBrackets < 0) {\n            result = false;\n   \
    \     }\n    }\n    if (openBrackets > 0) {\n        result = false;\n    }\n\
    \    return result;\n}\n\nconsole.log(correct_bracketing(\"(\"));\nconsole.log(correct_bracketing(\"\
    ()\"));\nconsole.log(correct_bracketing(\"(()())\"));\nconsole.log(correct_bracketing(\"\
    )(()\"));\nconsole.log(correct_bracketing(\"())(()\"));\nconsole.log(correct_bracketing(\"\
    ()(()\"));", "    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(correct_bracketing(\"\
    (\"));\nconsole.log(correct_bracketing(\"()\"));\nconsole.log(correct_bracketing(\"\
    (()())\"));\nconsole.log(correct_bracketing(\")(()\"));", "  let count = 0;\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\"\
    ) {\n      count++;\n    } else if (brackets[i] === \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ === 0;\n}\n", "  if (brackets.length == 0) {\n    return true;\n  } else if\
    \ (brackets.length == 1) {\n    return false;\n  } else {\n    if (brackets[0]\
    \ == \"(\") {\n      let brackets_copy = brackets.substring(1);\n      for (let\
    \ i = 0; i < brackets_copy.length; i++) {\n        if (brackets_copy[i] == \"\
    )\") {\n          let brackets_copy2 = brackets_copy.substring(i + 1);\n     \
    \     return correct_bracketing(brackets_copy2);\n        }\n      }\n      return\
    \ false;\n    } else {\n      return false;\n    }\n  }\n}\n", "    let bracket_left\
    \ = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === '(') {\n            bracket_left += 1;\n        } else if (brackets[i] ===\
    \ ')') {\n            bracket_left -= 1;\n        } else {\n            return\
    \ false;\n        }\n        if (bracket_left < 0) {\n            return false;\n\
    \        }\n    }\n    return bracket_left === 0;\n}\n", "    let result: boolean\
    \ = true;\n    let openBracketCount: number = 0;\n    let closeBracketCount: number\
    \ = 0;\n    for (let i: number = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"(\") {\n            openBracketCount++;\n        } else if (brackets[i]\
    \ === \")\") {\n            closeBracketCount++;\n        }\n    }\n    if (openBracketCount\
    \ !== closeBracketCount) {\n        result = false;\n    }\n    return result;\n\
    }\n\nconsole.log(correct_bracketing(\"(\"));\nconsole.log(correct_bracketing(\"\
    ()\"));\nconsole.log(correct_bracketing(\"(()())\"));\nconsole.log(correct_bracketing(\"\
    )(()\"));\n", "  //possible input: \"(\", \"()\", \"(()())\", \")(()\"\n  //expected\
    \ output: false, true, true, false\n  //initialize a counter for brackets\n  //loop\
    \ through the string\n  //if \"(\", increment bracket counter by 1\n  //if \"\
    )\", decrement bracket counter by 1\n  //if the counter is ever negative, return\
    \ false\n  //after the loop, if the counter is 0, return true\n  //else return\
    \ false\n  let bracketCounter = 0;\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      bracketCounter++;\n    } else if\
    \ (brackets[i] === \")\") {\n      bracketCounter--;\n    }\n    if (bracketCounter\
    \ < 0) {\n      return false;\n    }\n  }\n  if (bracketCounter === 0) {\n   \
    \ return true;\n  } else {\n    return false;\n  }\n}\n", "  let bracket_count\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"(\") {\n      bracket_count += 1;\n    } else if (brackets[i] === \")\") {\n\
    \      bracket_count -= 1;\n    }\n    if (bracket_count < 0) {\n      return\
    \ false;\n    }\n  }\n  return bracket_count === 0;\n}\n", "    // let openBrackets:\
    \ number = 0;\n    // for (let i: number = 0; i < brackets.length; i++) {\n  \
    \  //     if (brackets[i] === \"(\") {\n    //         openBrackets++;\n    //\
    \     } else if (brackets[i] === \")\") {\n    //         openBrackets--;\n  \
    \  //     }\n    //     if (openBrackets < 0) {\n    //         return false;\n\
    \    //     }\n    // }\n    // return openBrackets === 0;\n    // if the openBrackets\
    \ is less than 0 return false\n    // return openBrackets as boolean\n    // return\
    \ openBrackets === 0;\n    return brackets.split(\"\").reduce((acc, current) =>\
    \ current === \"(\" ? acc + 1 : acc - 1, 0) === 0;\n}\n\nexport {\n    correct_bracketing\n\
    }", "    let open = 0;\n    for (let c of brackets) {\n        if (c === \"(\"\
    ) {\n            open += 1;\n        } else if (c === \")\") {\n            open\
    \ -= 1;\n        }\n        if (open < 0) {\n            return false;\n     \
    \   }\n    }\n    return open === 0;\n}", "    var c: number = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n  \
    \          c++;\n        } else {\n            c--;\n        }\n        if (c\
    \ < 0) {\n            return false;\n        }\n    }\n    return c == 0;\n}\n\
    \nvar O: string = open_bracket();\nvar C: string = close_bracket();\nvar Brack:\
    \ string = \"\";\nfor (var i = 0; i < correct_length; i++) {\n    if (i % 2 ==\
    \ 0) {\n        Brack += O;\n    } else {\n        Brack += C;\n    }\n}\nvar\
    \ Brack2: string = \"(\" + Brack + \")\";\nvar result: boolean = correct_bracketing(Brack2);\n\
    \nconsole.log(result);", "  let brackets_count = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      brackets_count++;\n    } else\
    \ if (brackets[i] === \")\") {\n      brackets_count--;\n    }\n    if (brackets_count\
    \ < 0) {\n      return false;\n    }\n  }\n  return brackets_count === 0;\n}\n\
    \ntest(\"correct_bracketing\", () => {\n  expect(correct_bracketing(\"(\")).toBe(false);\n\
    \  expect(correct_bracketing(\"()\")).toBe(true);\n  expect(correct_bracketing(\"\
    (()())\")).toBe(true);\n  expect(correct_bracketing(\")(()\")).toBe(false);\n\
    });\n", "  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if\
    \ (brackets[i] == \"(\") {\n      open++;\n    } else if (brackets[i] == \")\"\
    ) {\n      open--;\n    }\n    if (open < 0) {\n      return false;\n    }\n \
    \ }\n  return open == 0;\n}\n", "    const open: number = brackets.split(\"(\"\
    ).length - 1;\n    const close: number = brackets.split(\")\").length - 1;\n \
    \   const delta: number = open - close;\n    return delta >= 0 && brackets.indexOf(\"\
    )\") < brackets.indexOf(\"(\");\n}\n", "    let count = 0;\n    for (let i = 0;\
    \ i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n        \
    \    count++;\n        } else if (brackets[i] === \")\") {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\n", "  //TODO\n  return false;\n}\n", "    const\
    \ bracket_count: number = brackets.length;\n    let count: number = 0;\n    for\
    \ (let i: number = 0; i < bracket_count; i++) {\n        const bracket: string\
    \ = brackets[i];\n        if (bracket === '(') {\n            count++;\n     \
    \   } else if (bracket === ')') {\n            count--;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ === 0;\n}\n", "  let counter = 0;\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      counter++;\n    } else if (brackets[i]\
    \ === \")\") {\n      counter--;\n    }\n    if (counter < 0) {\n      return\
    \ false;\n    }\n  }\n  return counter === 0;\n}\n", "    let counter = 0;\n \
    \   for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"\
    (\") {\n            counter++;\n        } else if (brackets[i] === \")\") {\n\
    \            counter--;\n        }\n        if (counter < 0) {\n            return\
    \ false;\n        }\n    }\n    return counter === 0;\n}\n\nconsole.log(correct_bracketing(\"\
    (\"));\nconsole.log(correct_bracketing(\"()\"));\nconsole.log(correct_bracketing(\"\
    (()())\"));\nconsole.log(correct_bracketing(\")(()\"));\n", "  return brackets.split(\"\
    \").reduce((a, e) => {\n    if (e === \"(\") {\n      return a + 1;\n    } else\
    \ if (e === \")\") {\n      return a - 1;\n    } else {\n      return a;\n   \
    \ }\n  }, 0) === 0;\n}\n", "    let count = 0;\n    for (let ch of brackets) {\n\
    \        if (ch === '(') {\n            count += 1;\n        } else if (ch ===\
    \ ')') {\n            count -= 1;\n        }\n        if (count < 0) {\n     \
    \       return false;\n        }\n    }\n    return count === 0;\n}\ntest(correct_bracketing,\
    \ [\"(\", \"()\", \"(()())\", \")(()\"], [false, true, true, false]);\n", "  if\
    \ (brackets.length < 2) {\n    return false;\n  }\n\n  let openBrackets = 0;\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\"\
    ) {\n      openBrackets++;\n    } else if (brackets[i] === \")\") {\n      openBrackets--;\n\
    \    }\n\n    if (openBrackets < 0) {\n      return false;\n    }\n  }\n\n  return\
    \ openBrackets === 0;\n}\n", "  let count = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i]\
    \ === \")\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    let count = 0;\n    for (let i\
    \ = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n   \
    \         count++;\n        } else if (brackets[i] === \")\") {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\n", "    let stack = new Stack();\n    for (let\
    \ i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n   \
    \         stack.push(brackets[i]);\n        } else if (brackets[i] === ')') {\n\
    \            if (stack.empty()) {\n                return false;\n           \
    \ } else {\n                stack.pop();\n            }\n        }\n    }\n  \
    \  return stack.empty();\n}\n", "  let check = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      check++;\n    } else {\n   \
    \   check--;\n    }\n    if (check < 0) {\n      return false;\n    }\n  }\n \
    \ return check === 0;\n}\n", "  // TODO: implement\n  // look at the first bracket\n\
    \  // if it is a (, add it to our list of 'open brackets'\n  // if it is a ),\
    \ look at the last 'open bracket' and remove it.\n\n  let openBrackets: string[]\
    \ = [];\n\n  for (let bracket of brackets) {\n    if (bracket === \"(\") {\n \
    \     openBrackets.push(bracket);\n    } else if (bracket === \")\") {\n     \
    \ if (openBrackets.length === 0) {\n        return false;\n      }\n      openBrackets.pop();\n\
    \    }\n  }\n\n  return openBrackets.length === 0;\n}\n", "  //TODO: write your\
    \ code here\n  let left = 0\n  let right = 0\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      left++\n    } else {\n     \
    \ right++\n    }\n    if (right > left) {\n      return false\n    }\n  }\n  return\
    \ left === right\n}\n", "    let stack = [];\n    for (let bracket of brackets)\
    \ {\n        if (bracket === \"(\") {\n            stack.push(bracket);\n    \
    \    } else if (bracket === \")\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(correct_bracketing(\"\
    (\"));\nconsole.log(correct_bracketing(\"()\"));\nconsole.log(correct_bracketing(\"\
    (()())\"));\nconsole.log(correct_bracketing(\")(()\"));\n", "  const stack: string[]\
    \ = [];\n  for (const bracket of brackets) {\n    if (bracket === \"(\") {\n \
    \     stack.push(bracket);\n    } else if (bracket === \")\") {\n      if (stack.length\
    \ === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n \
    \ return stack.length === 0;\n}\n", "    let count = 0;\n    for (let i = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n          \
    \  count++;\n        } else if (brackets[i] === \")\") {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\n", "  // for (let i = 0; i < brackets.length;\
    \ i++) {\n  //   const currentBracket = brackets[i];\n  //   for (let j = i +\
    \ 1; j < brackets.length; j++) {\n  //     const currentBracket = brackets[j];\n\
    \  //     // go from left to right and from right to left.\n  //     // if \"\
    )\" \"(\" -> false\n  //     // if \"(\" \")\" -> then remove both\n  //     //\
    \ if \"(\" \"(\" -> ignore\n  //     // if \")\" \")\" -> ignore\n  //   }\n \
    \ // }\n  return false;\n}\n", "    return brackets.split(\"\").reduce((prev,\
    \ current) => {\n        if (current === \"(\") {\n            return prev + 1;\n\
    \        } else if (current === \")\") {\n            return prev - 1;\n     \
    \   } else {\n            return prev;\n        }\n    }, 0) === 0;\n}\n", " \
    \ // TODO: implement this function.\n  return false;\n}\n", "    return brackets.length\
    \ % 2 === 0 && brackets[0] !== \")\" &&\n           brackets[brackets.length -\
    \ 1] !== \"(\" && brackets.replace(/\\(/g, \"\").length === brackets.replace(/\\\
    )/g, \"\").length;\n}\n", "  let stack: string[] = [];\n  for (let i = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n\
    \    } else if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n  \
    \      return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length\
    \ === 0;\n}\n", "    let balance = 0;\n    for (let x of brackets) {\n       \
    \ if (x === \"(\") {\n            balance++;\n        } else if (x === \")\")\
    \ {\n            balance--;\n        }\n        if (balance < 0) {\n         \
    \   return false;\n        }\n    }\n    return balance === 0;\n}\n", "  let counter\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"(\") {\n      counter++;\n    } else if (brackets[i] === \")\") {\n      counter--;\n\
    \    } else {\n      throw new Error(\"Brackets can only contain ( and )\");\n\
    \    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  return counter\
    \ === 0;\n}\n", "    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"(\") {\n            count++;\n       \
    \ } else if (brackets[i] === \")\") {\n            count--;\n        }\n     \
    \   if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    return false;\n}\n", "    return false;\n}\n\n", " \
    \   let left = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"(\") {\n            left += 1;\n        } else {\n      \
    \      left -= 1;\n        }\n        if (left < 0) {\n            return false;\n\
    \        }\n    }\n    return left === 0;\n}\n", "    let arr: string[] = brackets.split(\"\
    \");\n    let counter: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] == \"(\") {\n            counter++;\n        } else if (arr[i]\
    \ == \")\") {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            return false;\n        }\n    }\n    return counter == 0;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}", "    let\
    \ [l, r] = [\"(\", \")\"];\n    let [count_l, count_r] = [0, 0];\n    for (let\
    \ i = 0; i < brackets.length; i++) {\n        let c = brackets[i];\n        if\
    \ (c === l) {\n            count_l++;\n        } else if (c === r) {\n       \
    \     count_r++;\n        }\n        if (count_r > count_l) {\n            return\
    \ false;\n        }\n    }\n    return count_l === count_r;\n}\n", "    let open\
    \ = 0;\n    for (let c of brackets) {\n        if (c === '(') {\n            open\
    \ += 1;\n        } else if (c === ')') {\n            open -= 1;\n        }\n\
    \        if (open < 0) {\n            return false;\n        }\n    }\n    return\
    \ open === 0;\n}\n", "  let count = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i]\
    \ === \")\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "  let counter = 0;\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      counter++;\n\
    \    } else if (brackets[i] === \")\") {\n      counter--;\n    }\n    if (counter\
    \ < 0) {\n      return false;\n    }\n  }\n  return counter === 0;\n}\n\ntest(\"\
    correct_bracketing\", () => {\n  expect(correct_bracketing(\"(\")).toBe(false);\n\
    \  expect(correct_bracketing(\"()\")).toBe(true);\n  expect(correct_bracketing(\"\
    (()())\")).toBe(true);\n  expect(correct_bracketing(\")(()\")).toBe(false);\n\
    });\n", "    //holds the number of \"(\" in the string\n    let open: number =\
    \ 0;\n    //holds the number of \")\" in the string\n    let close: number = 0;\n\
    \    //loop through every element in brackets\n    for (let i: number = 0; i <\
    \ brackets.length; i++) {\n        //if it's an open bracket, increase the number\
    \ of open bracket by 1\n        if (brackets[i] == \"(\") {\n            open++;\n\
    \        }\n        //if it's a close bracket, increase the number of close bracket\
    \ by 1\n        else if (brackets[i] == \")\") {\n            close++;\n     \
    \   }\n        // return false if there are more close brackets than open\n  \
    \      if (close > open) {\n            return false;\n        }\n    }\n    //\
    \ return true if there are the same number of open and close\n    if (open ==\
    \ close) {\n        return true;\n    }\n    // if none of the statements above\
    \ are true, return false\n    return false;\n}\n", "    let count = 0;\n    for\
    \ (let bracket of brackets) {\n        if (bracket === \"(\") {\n            count\
    \ += 1;\n        } else if (bracket === \")\") {\n            count -= 1;\n  \
    \      }\n        if (count < 0) {\n            return false;\n        }\n   \
    \ }\n    return count === 0;\n}\n", "    let open = 0;\n    for (let i = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n          \
    \  open += 1;\n        } else if (brackets[i] === \")\") {\n            open -=\
    \ 1;\n        }\n        if (open < 0) {\n            return false;\n        }\n\
    \    }\n    return open === 0;\n}\n", "    let check: number = 0;\n    for (let\
    \ i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '(') {\n    \
    \        check += 1;\n        } else if (brackets[i] == ')') {\n            check\
    \ -= 1;\n        }\n        if (check < 0) {\n            return false;\n    \
    \    }\n    }\n    return check == 0;\n}\n", "  return brackets\n    .split(\"\
    \")\n    .reduce((acc, next) => {\n      if (next === \"(\") {\n        return\
    \ [...acc, next];\n      } else if (next === \")\") {\n        if (acc.length\
    \ === 0) {\n          return [\"(\"];\n        } else {\n          return acc.slice(0,\
    \ acc.length - 1);\n        }\n      }\n    }, [])\n    .every(c => c === \"(\"\
    );\n}\n", "  const myArray = brackets.split(\"\");\n  let cnt = 0;\n  for (let\
    \ i = 0; i < myArray.length; i++) {\n    if (myArray[i] === \"(\") {\n      cnt\
    \ += 1;\n    } else if (myArray[i] === \")\") {\n      cnt -= 1;\n    }\n    if\
    \ (cnt < 0) {\n      return false;\n    }\n  }\n  return cnt === 0;\n}\n", " \
    \ let str: string = \"\";\n  for (let i = 0; i < brackets.length; i++) {\n   \
    \ if (brackets[i] === \"(\") {\n      str += \"(\";\n    } else if (brackets[i]\
    \ === \")\") {\n      if (str[str.length - 1] === \"(\") {\n        str = str.slice(0,\
    \ str.length - 1);\n      } else {\n        return false;\n      }\n    }\n  }\n\
    \  if (str.length === 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "    // hint: use a stack\n    let stack = [];\n    for (let i = 0;\
    \ i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n        \
    \    stack.push(brackets[i]);\n        } else if (brackets[i] === \")\") {\n \
    \           if (stack.length === 0) {\n                return false;\n       \
    \     } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    return false;\n}\n", "    return brackets.indexOf(\"\
    (\") === brackets.lastIndexOf(\")\");\n}\n", "  const openBrackets: string[] =\
    \ [];\n  const length = brackets.length;\n  for (let i = 0; i < length; i++) {\n\
    \    const bracket = brackets[i];\n    if (bracket === \"(\") {\n      openBrackets.push(bracket);\n\
    \    } else if (bracket === \")\") {\n      if (openBrackets.length === 0) {\n\
    \        return false;\n      }\n      openBrackets.pop();\n    }\n  }\n  return\
    \ openBrackets.length === 0;\n}\n", "  const openCount: number = brackets.split(\"\
    (\").length - 1;\n  const closeCount: number = brackets.split(\")\").length -\
    \ 1;\n  return openCount === closeCount;\n}\n", "    let stack = [];\n    for\
    \ (let index = 0; index < brackets.length; index++) {\n        const char = brackets[index];\n\
    \        if (char === \"(\") {\n            stack.push(char);\n        } else\
    \ if (char === \")\") {\n            if (stack.length === 0) {\n             \
    \   return false;\n            }\n            stack.pop();\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "  let count = 0;\n  for (let i = 0; i\
    \ < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket\
    \ === \"(\") {\n      count += 1;\n    } else if (bracket === \")\") {\n     \
    \ count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count === 0;\n}\n", "  // result = correct_bracketing(\"(()())\")\n\
    \  // result\n  // true\n  // Use a stack of partial results.\n  // Will hold\
    \ the number of unmatched left brackets we've seen.\n  // We'll push to the top\
    \ of the stack as we see more left brackets,\n  // and pop from the top of the\
    \ stack as we see right brackets.\n  let unmatched: number[] = [];\n  for (let\
    \ b of brackets) {\n    if (b === \"(\") {\n      unmatched.push(1);\n    } else\
    \ if (b === \")\") {\n      // Check if there's a corresponding left bracket.\n\
    \      if (unmatched.length === 0) {\n        return false;\n      }\n      unmatched.pop();\n\
    \    }\n  }\n  return unmatched.length === 0;\n}\n", "    let count: number =\
    \ 0;\n    for (let i: number = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"(\") {\n            count++;\n        } else if (brackets[i] === \")\"\
    ) {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n\nconsole.log(correct_bracketing(\"\
    ()\"));\nconsole.log(correct_bracketing(\"(()())\"));\nconsole.log(correct_bracketing(\"\
    )(()\"));\n", "  let lst = [];\n  for (let c of brackets) {\n    if (c === '(')\
    \ {\n      lst.push(c);\n    } else if (c === ')') {\n      if (lst.length ==\
    \ 0) {\n        return false;\n      }\n      lst.pop();\n    }\n  }\n  return\
    \ lst.length == 0;\n}\n", "  // TODO: implement this function\n  return false;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n \
    \       if (brackets[i] === \"(\") {\n            count++;\n        } else if\
    \ (brackets[i] === \")\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n", "  let count: number = 0;\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i]\
    \ === \")\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    if (brackets.length % 2 !== 0)\
    \ {\n        return false;\n    }\n    let stack: string[] = [];\n    for (let\
    \ i: number = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\"\
    ) {\n            stack.push(brackets[i]);\n        } else {\n            if (stack.length\
    \ > 0) {\n                stack.pop();\n            } else {\n               \
    \ return false;\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "  return false;\n}\n", "    const emptyArray: boolean[] = [];\n \
    \   for (let bracket of brackets) {\n        if (bracket === '(') {\n        \
    \    emptyArray.push(true);\n        } else if (bracket === ')') {\n         \
    \   if (emptyArray.length !== 0) {\n                emptyArray.pop();\n      \
    \      } else {\n                return false;\n            }\n        }\n   \
    \ }\n    return emptyArray.length === 0;\n}\n", "  let i: number = 0;\n  for (let\
    \ bracket of brackets) {\n    if (bracket === \"(\") {\n      i += 1;\n    } else\
    \ if (bracket === \")\") {\n      i -= 1;\n    }\n    if (i < 0) {\n      return\
    \ false;\n    }\n  }\n  return i === 0;\n}\n", "  let num_open_brackets = 0;\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\"\
    ) {\n      num_open_brackets++;\n    } else if (brackets[i] === \")\") {\n   \
    \   num_open_brackets--;\n    }\n    if (num_open_brackets < 0) {\n      return\
    \ false;\n    }\n  }\n  return num_open_brackets === 0;\n}\n", "  return false;\n\
    }\n", "  return false;\n}\n", "    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '(') {\n            count += 1;\n      \
    \  } else if (brackets[i] === ')') {\n            count -= 1;\n        }\n   \
    \     if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}", "  let stack: string[] = [];\n  let i = 0;\n  while (i < brackets.length)\
    \ {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else\
    \ if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n    i++;\n  }\n\
    \  return stack.length === 0;\n}\n", "    let stack: string[] = [];\n    for (let\
    \ char of brackets) {\n        if (char === \"(\") {\n            stack.push(char);\n\
    \        } else if (char === \")\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return stack.length === 0;\n}\n", "    const size: number =\
    \ brackets.length;\n    let stack: string[] = [];\n    for (let i: number = 0;\
    \ i < size; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "  return false;\n}\n",
  "    let arr: string[] = brackets.split(\"\");\n    if (arr.length % 2 !== 0) {\n\
    \        return false;\n    }\n    else {\n        for (let i = 0; i < arr.length;\
    \ i++) {\n            if (arr[i] === \"(\" && arr[i + 1] === \")\") {\n      \
    \          arr.splice(i, 2);\n                i -= 2;\n            }\n       \
    \ }\n        if (arr.length === 0) {\n            return true;\n        }\n  \
    \      else {\n            return false;\n        }\n    }\n}\n", "  return true;\n\
    }\n\ntest(\"test correct_bracketing\", () => {\n  expect(correct_bracketing(\"\
    (\")).toBe(false);\n  expect(correct_bracketing(\"()\")).toBe(true);\n  expect(correct_bracketing(\"\
    (()())\")).toBe(true);\n  expect(correct_bracketing(\")(()\")).toBe(false);\n\
    });\n", "  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n   \
    \ if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i] ===\
    \ \")\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    let count = 0;\n    for (let char\
    \ of brackets) {\n        if (char === '(') {\n            count++;\n        }\
    \ else if (char === ')') {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n", "    const left = \"(\";\n    const right = \")\";\n    let no_left = 0;\n\
    \    let no_right = 0;\n    for (let i = 0; i < brackets.length; i++) {\n    \
    \    if (brackets[i] === left) {\n            no_left++;\n        } else if (brackets[i]\
    \ === right) {\n            no_right++;\n        }\n    }\n    return no_left\
    \ === no_right;\n}\n", "  var num_brackets = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    var char = brackets.charAt(i);\n    if (char == \"(\") {\n     \
    \ num_brackets++;\n    } else if (char == \")\") {\n      num_brackets--;\n  \
    \  } else {\n      return false;\n    }\n    if (num_brackets < 0) {\n      return\
    \ false;\n    }\n  }\n  return num_brackets == 0;\n}\n", "    if (brackets.charAt(0)\
    \ == \")\") return false;\n    let c = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets.charAt(i) == \"(\") {\n            c++;\n     \
    \   } else {\n            c--;\n        }\n        if (c < 0) return false;\n\
    \    }\n    return c == 0;\n}\n", "  let open = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      open++;\n    } else if (brackets[i]\
    \ === \")\") {\n      open--;\n    }\n    if (open < 0) {\n      return false;\n\
    \    }\n  }\n  return open === 0;\n}", "    let counter = 0;\n    for (let i =\
    \ 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n     \
    \       counter++;\n        } else if (brackets[i] === \")\") {\n            counter--;\n\
    \        }\n        if (counter < 0) {\n            return false;\n        }\n\
    \    }\n    return counter === 0;\n}\n", "    let counter = 0;\n    let result:\
    \ boolean = true;\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"(\") {\n            counter++;\n        } else if (brackets[i]\
    \ === \")\") {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            result = false;\n            break;\n        }\n    }\n    if (counter\
    \ > 0) {\n        result = false;\n    }\n    return result;\n}\n", "    let bracket_balance\
    \ = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"(\") {\n            bracket_balance += 1;\n        } else if (brackets[i]\
    \ === \")\") {\n            bracket_balance -= 1;\n        } else {\n        \
    \    console.log(\"ERROR: unexpected string value: \" + brackets[i]);\n      \
    \  }\n        if (bracket_balance < 0) {\n            return false;\n        }\n\
    \    }\n    return bracket_balance === 0;\n}\n", "    let stack: string[] = [];\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === \")\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let count: number\
    \ = 0;\n    let i: number = 0;\n    while (i < brackets.length) {\n        if\
    \ (brackets[i] === \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ === \")\") {\n            count--;\n        }\n        if (count < 0) {\n  \
    \          return false;\n        }\n        i++;\n    }\n    return count ===\
    \ 0;\n}\n", "  let i = 0;\n  while (i < brackets.length) {\n    if (brackets[i]\
    \ === \"(\") {\n      if (brackets[i + 1] === \")\") {\n        i += 2;\n    \
    \  } else {\n        return false;\n      }\n    } else {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  let count = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    const stack: string[] = [];\n \
    \   for (const c of brackets) {\n        if (c === \"(\") {\n            stack.push(c);\n\
    \        } else if (c === \")\") {\n            if (stack.length === 0) {\n  \
    \              return false;\n            }\n            stack.pop();\n      \
    \  }\n    }\n    return stack.length === 0;\n}\n\n\nconsole.log(correct_bracketing(\"\
    (\"));\nconsole.log(correct_bracketing(\"()\"));\nconsole.log(correct_bracketing(\"\
    (()())\"));\nconsole.log(correct_bracketing(\")(()\"));\n", "    let leftCount\
    \ = 0;\n    let rightCount = 0;\n    for (let char of brackets) {\n        if\
    \ (char === '(') {\n            leftCount += 1;\n        } else if (char === ')')\
    \ {\n            rightCount += 1;\n        }\n        if (rightCount > leftCount)\
    \ {\n            return false;\n        }\n    }\n    return leftCount === rightCount;\n\
    }\n\nexport {correct_bracketing};", "    return brackets.split(\"\").reduce((acc,\
    \ val) => {\n        if (acc.stack.length == 0 && val == \")\") {\n          \
    \  return {is_valid: false, stack: acc.stack};\n        } else if (val == \"(\"\
    ) {\n            acc.stack.push(val);\n            return acc;\n        } else\
    \ if (val == \")\") {\n            acc.stack.pop();\n            return acc;\n\
    \        }\n    }, {is_valid: true, stack: []}).is_valid;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n     \
    \ count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count === 0;\n}\n\ntest(\"correct_bracketing\", function() {\n  expect(correct_bracketing(\"\
    (\")).toBe(false);\n  expect(correct_bracketing(\"()\")).toBe(true);\n  expect(correct_bracketing(\"\
    (()())\")).toBe(true);\n  expect(correct_bracketing(\")(()\")).toBe(false);\n\
    });\n", "    let bracketCount = 0;\n    for (let index = 0; index < brackets.length;\
    \ index++) {\n        if (brackets[index] === \"(\") {\n            bracketCount++;\n\
    \        } else if (brackets[index] === \")\") {\n            bracketCount--;\n\
    \        } else {\n            return false;\n        }\n        if (bracketCount\
    \ < 0) {\n            return false;\n        }\n    }\n    return bracketCount\
    \ === 0;\n}\n", "    let a: number = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"(\") {\n            a++;\n        } else\
    \ {\n            a--;\n        }\n        if (a < 0) {\n            return false;\n\
    \        }\n    }\n    return a == 0;\n}\n", "  return brackets.split(\"\").filter(bracket\
    \ => bracket === \"(\").length === brackets.split(\"\").filter(bracket => bracket\
    \ === \")\").length;\n}\n", "  let counter = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      counter++;\n    } else if (brackets[i]\
    \ === \")\") {\n      counter--;\n    }\n    if (counter < 0) {\n      return\
    \ false;\n    }\n  }\n  return counter === 0;\n}\n", "    let count = 0;\n   \
    \ for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"\
    (\") {\n            count++;\n        } else if (brackets[i] === \")\") {\n  \
    \          count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count === 0;\n}\n", "    if (brackets.length ===\
    \ 0) {\n        return true;\n    }\n    let parens = 0;\n    for (let i = 0;\
    \ i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n        \
    \    parens++;\n        } else if (brackets[i] === \")\") {\n            parens--;\n\
    \        }\n        if (parens < 0) {\n            return false;\n        }\n\
    \    }\n    return parens === 0;\n}\n", "    if (brackets.length % 2 !== 0) return\
    \ false;\n    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] === \"(\") count++;\n        else if (brackets[i] ===\
    \ \")\") count--;\n        if (count < 0) return false;\n    }\n    return count\
    \ === 0;\n}\n", "  // YOUR CODE HERE\n  return undefined;\n}\n", "    let balance\
    \ = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        const bracket\
    \ = brackets[i];\n        if (bracket === \"(\") {\n            balance += 1;\n\
    \        } else if (bracket === \")\") {\n            balance -= 1;\n        }\n\
    \        if (balance < 0) {\n            return false;\n        }\n    }\n   \
    \ return balance === 0;\n}\n\n", "  let c = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      c++;\n    } else {\n      c--;\n\
    \    }\n    if (c < 0) {\n      return false;\n    }\n  }\n  return c === 0;\n\
    }\nconsole.log(correct_bracketing(\"()\"));\nconsole.log(correct_bracketing(\"\
    (()())\"));\nconsole.log(correct_bracketing(\")(()\"));\n", "  const matches:\
    \ number[] = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket\
    \ = brackets[i];\n    const match = matches[matches.length - 1];\n    if (bracket\
    \ === '(') {\n      matches.push(i);\n    } else if (bracket === ')') {\n    \
    \  if (matches.length === 0) {\n        return false;\n      }\n      matches.pop();\n\
    \    }\n  }\n  return matches.length === 0;\n}\n", "  let open_count = 0;\n  for\
    \ (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n\
    \      open_count++;\n    } else if (brackets[i] === \")\") {\n      open_count--;\n\
    \    }\n    if (open_count < 0) {\n      return false;\n    }\n  }\n  return open_count\
    \ === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
