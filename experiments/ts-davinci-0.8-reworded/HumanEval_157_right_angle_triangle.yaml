name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["    if (is_positive_number(a) && is_positive_number(b) && is_positive_number(c))\
    \ {\n        if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n      \
    \      return true;\n        }\n        else if (Math.pow(a, 2) + Math.pow(c,\
    \ 2) == Math.pow(b, 2)) {\n            return true;\n        }\n        else if\
    \ (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)) {\n            return true;\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    let [hypotenuse, cathetus1, cathetus2]\
    \ = [a, b, c].sort((x, y) => x - y);\n    return Math.pow(hypotenuse, 2) === Math.pow(cathetus1,\
    \ 2) + Math.pow(cathetus2, 2);\n}\n", "    // TODO - remove this comment and put\
    \ your code here\n    return undefined;\n}\n", "    const squaredSides = [a, b,\
    \ c].map(x => x * x);\n    const sortedSides = squaredSides.sort((x, y) => x -\
    \ y);\n    return sortedSides[0] + sortedSides[1] === sortedSides[2];\n}\n", " \
    \   return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c\
    \ === a * a;\n}\n", "    const lengthArr = [a, b, c].sort((a, b) => a - b);\n\
    \    const c_squared = lengthArr[2] * lengthArr[2];\n    const a_squared = lengthArr[0]\
    \ * lengthArr[0];\n    const b_squared = lengthArr[1] * lengthArr[1];\n    return\
    \ c_squared === a_squared + b_squared;\n}\n", "    const max = Math.max(a, b,\
    \ c);\n    return max * max === a * a + b * b + c * c - max * max;\n}\n", "  \
    \  return false;\n}\n", "    if (a == 0 || b == 0 || c == 0) {\n        return\
    \ false;\n    }\n    else if (a > b && a > c) {\n        if (Math.pow(a, 2) ==\
    \ Math.pow(b, 2) + Math.pow(c, 2)) {\n            return true;\n        }\n  \
    \      else {\n            return false;\n        }\n    }\n    else if (b > a\
    \ && b > c) {\n        if (Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2))\
    \ {\n            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else if (c > a && c > b) {\n        if (Math.pow(c, 2)\
    \ == Math.pow(a, 2) + Math.pow(b, 2)) {\n            return true;\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    else {\n   \
    \     return false;\n    }\n}\n", "    if ((a * a) + (b * b) == (c * c)) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n", "    return\
    \ a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b;\n}\n", "    return\
    \ a**2 + b**2 === c**2\n}\n", "  // Your code goes here\n  if (a >= b && a >=\
    \ c) {\n    return (b * b + c * c) == a * a;\n  }\n  if (b >= a && b >= c) {\n\
    \    return (a * a + c * c) == b * b;\n  }\n  if (c >= a && c >= b) {\n    return\
    \ (a * a + b * b) == c * c;\n  }\n  return false;\n}", "    if(a > b && a > c){\n\
    \        return b**2 + c**2 === a**2;\n    }\n    if(b > a && b > c){\n      \
    \  return a**2 + c**2 === b**2;\n    }\n    if(c > a && c > b){\n        return\
    \ a**2 + b**2 === c**2;\n    }\n    return false;\n}\n", "    // your code here!\n\
    \    return;\n}\n", "    // your code here\n    return false;\n}\n", "  return\
    \ (a ** 2 + b ** 2 == c ** 2)\n    || (a ** 2 + c ** 2 == b ** 2)\n    || (b **\
    \ 2 + c ** 2 == a ** 2);\n}\n", "  let [longest, shortest] = [a, b].sort((a, b)\
    \ => b - a);\n  if (longest ** 2 === (shortest ** 2) + (c ** 2)) {\n    return\
    \ true;\n  }\n  return false;\n}", "    return false;\n}\n", "    let angles:\
    \ number[] = [a, b, c];\n    angles.sort((x, y) => x - y);\n    if (angles[0]\
    \ * angles[0] + angles[1] * angles[1] == angles[2] * angles[2]) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    const [side1, side2, side3] = [a,\
    \ b, c].sort();\n    return side1 ** 2 + side2 ** 2 === side3 ** 2;\n}\n", " \
    \   if (a >= b + c || b >= a + c || c >= a + b) {\n        return false;\n   \
    \ }\n    let sqA = a * a;\n    let sqB = b * b;\n    let sqC = c * c;\n    if\
    \ (sqA === sqB + sqC || sqB === sqA + sqC || sqC === sqA + sqB) {\n        return\
    \ true;\n    }\n    return false;\n}\nconsole.log(right_angle_triangle(1, 2, 3));\n\
    console.log(right_angle_triangle(3, 4, 5));\n", "    if (a * a + b * b == c *\
    \ c) {\n        return true;\n    }\n    if (a * a + c * c == b * b) {\n     \
    \   return true;\n    }\n    if (b * b + c * c == a * a) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if ((a*a + b*b) == c*c) {\n        return\
    \ true;\n    }\n    else if ((a*a + c*c) == b*b) {\n        return true;\n   \
    \ }\n    else if ((b*b + c*c) == a*a) {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    // TODO: your code here\n    return\
    \ false;\n}\n", "    if ((a * a) + (b * b) == (c * c)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "  return false;\n}\n\ntest('test\
    \ right_angle_triangle', () => {\n  expect(right_angle_triangle(3, 4, 5)).toBe(true);\n\
    \  expect(right_angle_triangle(1, 2, 3)).toBe(false);\n});", "    let arr = [a,\
    \ b, c].sort((a, b) => a - b);\n    return (arr[0] * arr[0] + arr[1] * arr[1])\
    \ === arr[2] * arr[2];\n}\n", "    if ((a > b && a > c) && (a * a === b * b +\
    \ c * c)) {\n        return true;\n    } else if ((b > a && b > c) && (b * b ===\
    \ a * a + c * c)) {\n        return true;\n    } else if ((c > a && c > b) &&\
    \ (c * c === a * a + b * b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let a2 = a * a;\n    let b2 = b * b;\n    let c2 =\
    \ c * c;\n    return (a2 == b2 + c2 || b2 == a2 + c2 || c2 == a2 + b2);\n}\n",
  "  // return false;\n  if(a > 0 && b > 0 && c > 0){\n    if(a*a + b*b == c*c){\n\
    \      return true;\n    }\n    else if(a*a + c*c == b*b){\n      return true;\n\
    \    }\n    else if(b*b + c*c == a*a){\n      return true;\n    }\n    else{\n\
    \      return false;\n    }\n  }\n  else{\n    return false;\n  }\n}\n\ndescribe('right_angle_triangle',\
    \ () => {\n  it('shoud be right_angle_triangle', () => {\n    expect(right_angle_triangle(3,\
    \ 4, 5)).toEqual(true);\n    expect(right_angle_triangle(1, 2, 3)).toEqual(false);\n\
    \    expect(right_angle_triangle(1, 1, 1)).toEqual(false);\n    expect(right_angle_triangle(0,\
    \ 0, 0)).toEqual(false);\n    expect(right_angle_triangle(5, 12, 13)).toEqual(true);\n\
    \    expect(right_angle_triangle(0, 4, 5)).toEqual(false);\n    expect(right_angle_triangle(3,\
    \ 4, 0)).toEqual(false);\n    expect(right_angle_triangle(4, 0, 5)).toEqual(false);\n\
    \    expect(right_angle_triangle(4, 12, 0)).toEqual(false);\n    expect(right_angle_triangle(5,\
    \ 12, 0)).toEqual(false);\n    expect(right_angle_triangle(0, 12, 13)).toEqual(false);\n\
    \    expect(right_angle_triangle(5, 0, 13)).toEqual(false);\n    expect(right_angle_triangle(12,\
    \ 13, 0)).toEqual(false);\n    expect(right_angle_triangle(0, 12, 13)).toEqual(false);\n\
    \    expect(right_angle_triangle(3, 4, 6)).toEqual(false);\n    expect(right_angle_triangle",
  "  let longest = c;\n  let otherA = a;\n  let otherB = b;\n  if (c < a) {\n    longest\
    \ = a;\n    otherA = c;\n    otherB = b;\n  }\n  if (a < b) {\n    longest = b;\n\
    \    otherA = a;\n    otherB = c;\n  }\n  return Math.pow(longest, 2) === Math.pow(otherA,\
    \ 2) + Math.pow(otherB, 2);\n}\n", "    return a*a+b*b === c*c || c*c+b*b ===\
    \ a*a || a*a+c*c === b*b;\n}\n", "    let flag: boolean = false;\n    let sidesArray:\
    \ number[] = [a, b, c];\n    sidesArray.sort((x, y) => x - y);\n    let test:\
    \ number = sidesArray[0] * sidesArray[0] + sidesArray[1] * sidesArray[1];\n  \
    \  if (test == sidesArray[2] * sidesArray[2]) {\n        flag = true;\n    }\n\
    \    return flag;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n", "    if(a==0\
    \ || b==0 || c==0) return false;\n    if((a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a)) return true;\n    return false;\n}\n", "    return a\
    \ * a + b * b === c * c;\n}\n\n", "  if (Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c,\
    \ 2)) {\n    return true;\n  } else if (Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b,\
    \ 2)) {\n    return true;\n  } else if (Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a,\
    \ 2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  // find\
    \ the hypotenuse\n  let s = [a, b, c];\n  s.sort();\n  return Math.pow(s[0], 2)\
    \ + Math.pow(s[1], 2) === Math.pow(s[2], 2);\n}\n", "    return false;\n}\n\n",
  "    let squaredA = Math.pow(a, 2);\n    let squaredB = Math.pow(b, 2);\n    let\
    \ squaredC = Math.pow(c, 2);\n    let list = [squaredA, squaredB, squaredC].sort((a,\
    \ b) => b - a);\n    return list[0] === list[1] + list[2];\n}\n", "  // Explanation:\
    \ a^2 + b^2 = c^2\n  return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n\
    }\n", "    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    return true;\n\
    }\n", "    let [max, min1, min2] = [a, b, c].sort((a, b) => a - b);\n    return\
    \ max * max === min1 * min1 + min2 * min2;\n}\n\n", "  if (a * a + b * b === c\
    \ * c) {\n    return true;\n  } else if (a * a + c * c === b * b) {\n    return\
    \ true;\n  } else if (b * b + c * c === a * a) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    return Math.pow(a, 2) + Math.pow(b, 2) ===\
    \ Math.pow(c, 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));", "    // Your implementation goes here\n    // Good luck!\n    if (Math.pow(a,\
    \ 2) == Math.pow(b, 2) + Math.pow(c, 2) ||\n        Math.pow(b, 2) == Math.pow(a,\
    \ 2) + Math.pow(c, 2) ||\n        Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
    \ 2)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "    return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c\
    \ === a * a;\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let arr = [a, b, c].sort((x, y) => x > y ? 1 : -1);\n    return\
    \ arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    const square = (n: number)\
    \ => Math.pow(n, 2);\n    const sorted = [a, b, c].sort((x, y) => x - y);\n  \
    \  return square(sorted[0]) + square(sorted[1]) === square(sorted[2]);\n}\n",
  "  if (a * a + b * b === c * c) {\n    return true;\n  }\n  return false;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    return (Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2))\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    // Your code\n\
    \    // finding max number\n    let max = Math.max(a, b, c);\n    let sum = 0;\n\
    \    // adding to sum all number except max\n    if (max == a) {\n        sum\
    \ = b + c;\n    } else if (max == b) {\n        sum = a + c;\n    } else {\n \
    \       sum = a + b;\n    }\n    // checking if max number to the power of 2 equal\
    \ to sum to the power of 2\n    if (max ** 2 == sum ** 2) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    return a ** 2 + b ** 2\
    \ === c ** 2;\n}\n", "    const result = Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,\
    \ 2);\n    return result;\n}\n", "    return a*a + b*b == c*c;\n}\n", "    let\
    \ array = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(array[0], 2) +\
    \ Math.pow(array[1], 2) === Math.pow(array[2], 2);\n}\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\nconsole.log(right_angle_triangle(3, 4, 5));\n", "    return Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}\n\n", "    if (a == 0 || b == 0 ||\
    \ c == 0) {\n        return false;\n    }\n    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2) ||\n        Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a,\
    \ 2) ||\n        Math.pow(c, 2) + Math.pow(a, 2) == Math.pow(b, 2);\n}\n\n", " \
    \   // write your code here\n    // return true or false\n    let sides = [a,\
    \ b, c].sort();\n    let sqa = Math.pow(sides[0], 2);\n    let sqb = Math.pow(sides[1],\
    \ 2);\n    let sqc = Math.pow(sides[2], 2);\n    return (sqa + sqb == sqc);\n\
    }\n", "    if ((a**2 + b**2) == c**2) {\n        return true;\n    }\n    else\
    \ if ((a**2 + c**2) == b**2) {\n        return true;\n    }\n    else if ((b**2\
    \ + c**2) == a**2) {\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\n", "    let s = [a, b, c].sort();\n    return s[0] ** 2 +\
    \ s[1] ** 2 === s[2] ** 2;\n}\n", "    // your code here\n    var x: number =\
    \ Math.pow(a, 2);\n    var y: number = Math.pow(b, 2);\n    var z: number = Math.pow(c,\
    \ 2);\n    if (x + y == z || x + z == y || y + z == x) {\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    return ((Math.pow(a,\
    \ 2) + Math.pow(b, 2)) === Math.pow(c, 2)) ||\n        ((Math.pow(a, 2) + Math.pow(c,\
    \ 2)) === Math.pow(b, 2)) ||\n        ((Math.pow(b, 2) + Math.pow(c, 2)) === Math.pow(a,\
    \ 2));\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n", "    let result: boolean\
    \ = true;\n    if(a > c)\n    {\n        if((c * c) + (b * b) !== (a * a))\n \
    \       {\n            result = false;\n        }\n    }\n    else if((a * a)\
    \ + (b * b) !== (c * c))\n    {\n        result = false;\n    }\n    return result;\n\
    }\n", "    let aa = a*a;\n    let bb = b*b;\n    let cc = c*c;\n    return ((aa+bb==cc)\
    \ || (aa+cc==bb) || (bb+cc==aa));\n}", "    let hypotenuse: number = Math.max(a,\
    \ b, c);\n    let o = a ** 2 + b ** 2;\n    let h = c ** 2;\n    return (o ===\
    \ h) ? true : false;\n}\n", "    if (a > b && a > c) {\n        return a * a ==\
    \ b * b + c * c;\n    }\n    if (b > a && b > c) {\n        return b * b == a\
    \ * a + c * c;\n    }\n    if (c > a && c > b) {\n        return c * c == a *\
    \ a + b * b;\n    }\n    return false;\n}\n", "    let sides: number[] = [a, b,\
    \ c];\n    let minSide: number = Math.min(...sides);\n    let maxSide: number\
    \ = Math.max(...sides);\n    let midSide: number = 0;\n    sides.forEach(x =>\
    \ {\n        if (x != minSide && x != maxSide) {\n            midSide = x;\n \
    \       }\n    });\n    return (minSide ** 2 + midSide ** 2 == maxSide ** 2);\n\
    }\n", "  return a**2 + b**2 === c**2 || a**2 + c**2 === b**2 || b**2 + c**2 ===\
    \ a**2;\n}\n", "\tif (a > 0 && b > 0 && c > 0) {\n\t\tif (a ** 2 + b ** 2 ===\
    \ c ** 2) {\n\t\t\treturn true;\n\t\t} else if (b ** 2 + c ** 2 === a ** 2) {\n\
    \t\t\treturn true;\n\t\t} else if (a ** 2 + c ** 2 === b ** 2) {\n\t\t\treturn\
    \ true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n", "    return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||\
    \ (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) || (Math.pow(b, 2) + Math.pow(c,\
    \ 2) == Math.pow(a, 2));\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "  let biggestSide: number = 0;\n  let firstSmallSide: number =\
    \ 0;\n  let secondSmallSide: number = 0;\n  if (a > b && a > c) {\n    biggestSide\
    \ = a;\n    firstSmallSide = b;\n    secondSmallSide = c;\n  } else if (b > a\
    \ && b > c) {\n    biggestSide = b;\n    firstSmallSide = a;\n    secondSmallSide\
    \ = c;\n  } else {\n    biggestSide = c;\n    firstSmallSide = a;\n    secondSmallSide\
    \ = b;\n  }\n  return Math.pow(biggestSide, 2) === Math.pow(firstSmallSide, 2)\
    \ + Math.pow(secondSmallSide, 2);\n}\n", "  let sides = [a, b, c];\n  // Heron's\
    \ formula:\n  // A = sqrt(s * (s - a) * (s - b) * (s - c))\n  // Where A is the\
    \ area of the triangle, and s = (a + b + c) / 2.\n  // This formula is used to\
    \ calculate an approximate area of the triangle.\n  let s = (a + b + c) / 2;\n\
    \  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  sides.sort((a, b)\
    \ => a - b);\n  // Pythagorean theorem:\n  // a^2 + b^2 = c^2.\n  // Thus, the\
    \ square of the longest side should be equal to the sum of the \n  // squares\
    \ of the two shortest sides.\n  let c_squared = sides[2] * sides[2];\n  let a_squared\
    \ = sides[0] * sides[0];\n  let b_squared = sides[1] * sides[1];\n  return area\
    \ > 0 && c_squared === a_squared + b_squared;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5)); // true\nconsole.log(right_angle_triangle(1, 2, 3)); // false\n", " \
    \   // Your code here\n    throw new Error(\"Method not implemented.\");\n}\n",
  "  if (a < 1 || b < 1 || c < 1) return false;\n  var s = [a, b, c].sort((a, b) =>\
    \ a - b);\n  return s[0] * s[0] + s[1] * s[1] == s[2] * s[2];\n}\n", "  // your\
    \ code here\n  let sides = [a, b, c].sort((x, y) => x - y);\n  let c_squared =\
    \ Math.pow(sides[2], 2);\n  let a_squared = Math.pow(sides[0], 2);\n  let b_squared\
    \ = Math.pow(sides[1], 2);\n  return c_squared === a_squared + b_squared;\n}\n",
  "    let sides = [a, b, c];\n    sides.sort((a, b) => b - a);\n\n    if (sides[0]\
    \ * sides[0] === sides[1] * sides[1] + sides[2] * sides[2]) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nconsole.log(right_angle_triangle(3, 4,\
    \ 5));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(5,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 5, 4));\nconsole.log(right_angle_triangle(4,\
    \ 3, 5));\nconsole.log(right_angle_triangle(4, 5, 3));\nconsole.log(right_angle_triangle(2,\
    \ 3, 4));\nconsole.log(right_angle_triangle(3, 2, 4));\nconsole.log(right_angle_triangle(4,\
    \ 2, 3));\nconsole.log(right_angle_triangle(2, 4, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 2));\nconsole.log(right_angle_triangle(4, 3, 2));\nconsole.log(right_angle_triangle(2,\
    \ 4, 3));\nconsole.log(right_angle_triangle(2, 3, 4));\nconsole.log(right_angle_triangle(4,\
    \ 2, 3));\nconsole.log(right_angle_triangle(3, 2, 4));\nconsole.log(right_angle_triangle(2,\
    \ 4, 3));\nconsole.log(right_angle_triangle(3, 4, 2));\nconsole.log(right_angle_triangle(4,\
    \ 3, 2));\nconsole.log(right_angle_triangle(2, 4, 3));\nconsole.log(right_angle_triangle(1,\
    \ 2, 2));\nconsole.log(right_angle_triangle(2, 1, 2));\nconsole.log(right_angle_triangle(2,\
    \ 2, 1));\nconsole.log(right_angle_triangle(1, 2, 2));\nconsole", "    // TODO\n\
    \    return false;\n}\n", "    return Math.sqrt(a ** 2 + b ** 2) === c;\n}\n",
  "  let sides: Array<number> = [a, b, c];\n  let maxSide: number = Math.max(...sides);\n\
    \  let sidesMinusMax: Array<number> = sides.slice(0, -1);\n  let sumSides: number\
    \ = sidesMinusMax.reduce((a, b) => a + b, 0);\n  return maxSide ** 2 === sumSides\
    \ ** 2;\n}\n\nexport { right_angle_triangle };", "    const hypotenuse: number\
    \ = Math.max(a, b, c);\n    const cathetus1: number = Math.min(a, b, c);\n   \
    \ const cathetus2: number = a+b+c-hypotenuse-cathetus1;\n    if (hypotenuse**2\
    \ === cathetus1**2 + cathetus2**2) {\n        return true;\n    } else {\n   \
    \     return false;\n    }\n}\n", "    const a2 = a * a;\n    const b2 = b * b;\n\
    \    const c2 = c * c;\n    return c2 === a2 + b2 || a2 === b2 + c2 || b2 ===\
    \ a2 + c2;\n}", "    let array=[a,b,c]\n    array.sort((a,b)=>a-b)\n    return\
    \ array[0]**2+array[1]**2===array[2]**2;\n}\n", "    let sum = a + b + c;\n  \
    \  let max = Math.max(a, b, c);\n    let min = Math.min(a, b, c);\n    let mid\
    \ = sum - max - min;\n    return min ** 2 + mid ** 2 === max ** 2;\n}\n", "  if\
    \ (((Math.pow(a, 2) + Math.pow(b, 2)) === Math.pow(c, 2)) ||\n    ((Math.pow(a,\
    \ 2) + Math.pow(c, 2)) === Math.pow(b, 2)) ||\n    ((Math.pow(b, 2) + Math.pow(c,\
    \ 2)) === Math.pow(a, 2))) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "    if (a * a + b * b == c * c) {\n        return true;\n    }\n\
    \    else if (a * a + c * c == b * b) {\n        return true;\n    }\n    else\
    \ if (b * b + c * c == a * a) {\n        return true;\n    }\n    else {\n   \
    \     return false;\n    }\n}\n", "  if(a*a+b*b == c*c){\n    return true;\n \
    \ }else if(a*a+c*c == b*b){\n    return true;\n  }else if(b*b+c*c == a*a){\n \
    \   return true;\n  }else{\n    return false;\n  }\n}\n", "    return a ** 2 +\
    \ b ** 2 === c ** 2;\n}\nconsole.log(right_angle_triangle(3, 4, 5)); // true\n\
    console.log(right_angle_triangle(1, 2, 3)); // false\nconsole.log(right_angle_triangle(5,\
    \ 12, 13)); // true\nconsole.log(right_angle_triangle(5, 14, 15)); // false\n",
  "  let longest = Math.max(a, b, c);\n  let lSum = Math.pow(a, 2) + Math.pow(b, 2)\
    \ + Math.pow(c, 2) - Math.pow(longest, 2);\n  return lSum === Math.pow(longest,\
    \ 2);\n}\n", "    let result: boolean = false;\n    if (a**2 + b**2 === c**2)\
    \ {\n        result = true;\n    } else if (a**2 + c**2 === b**2) {\n        result\
    \ = true;\n    } else if (b**2 + c**2 === a**2) {\n        result = true;\n  \
    \  }\n    return result;\n}\n", "    return a * a + b * b === c * c;\n}\n", " \
    \   let aSq: number = a * a;\n    let bSq: number = b * b;\n    let cSq: number\
    \ = c * c;\n    if ((aSq + bSq == cSq) || (bSq + cSq == aSq) || (aSq + cSq ==\
    \ bSq)) {\n        return true;\n    }\n    return false;\n}\n", "  // use the\
    \ Pythagorean theorem to determine if side lengths\n  // can form a right angle\n\
    \  // a^2 + b^2 = c^2\n  // the hypotenuse is the longest side\n  let sorted_sides\
    \ = [a, b, c].sort();\n  // the last item in the sorted array is the longest side\n\
    \  let hypotenuse = sorted_sides[2];\n  let ab = sorted_sides[0]**2 + sorted_sides[1]**2;\n\
    \  // return true if ab is the same as c^2\n  return ab === hypotenuse**2;\n}\n\
    \nconsole.log(right_angle_triangle(3, 4, 5))\nconsole.log(right_angle_triangle(1,\
    \ 2, 3))\n", "    // put your code here\n    return false;\n}\n", "  // Write\
    \ your code here\n  let x = [a, b, c].sort((a, b) => b - a);\n  return x[0] *\
    \ x[0] === x[1] * x[1] + x[2] * x[2];\n}\n\nexport { right_angle_triangle };",
  "  // input validation\n  if(a <= 0 || b <= 0 || c <= 0) {\n    throw \"invalid\
    \ input\";\n  }\n  // check if the triangle is right angle\n  if(Math.pow(a, 2)\
    \ + Math.pow(b, 2) === Math.pow(c, 2)) {\n    return true;\n  }\n  if(Math.pow(b,\
    \ 2) + Math.pow(c, 2) === Math.pow(a, 2)) {\n    return true;\n  }\n  if(Math.pow(c,\
    \ 2) + Math.pow(a, 2) === Math.pow(b, 2)) {\n    return true;\n  }\n  return false;\n\
    }\n", "    if(a<b+c && b<a+c && c<a+b){\n        return true;\n    }\n    return\
    \ false;\n\n}\n", "    return (a*a+b*b)==c*c || (a*a+c*c)==b*b || (b*b+c*c)==a*a\n\
    }\n\n", "    let right_triangle = false;\n    if (a**2 + b**2 === c**2) {\n  \
    \      right_triangle = true;\n    } else if (b**2 + c**2 === a**2) {\n      \
    \  right_triangle = true;\n    } else if (c**2 + a**2 === b**2) {\n        right_triangle\
    \ = true;\n    }\n    return right_triangle;\n}\n", "  const pythagoreanTriples\
    \ = [\n    [3, 4, 5],\n    [5, 12, 13],\n    [7, 24, 25],\n    [8, 15, 17],\n\
    \    [9, 40, 41],\n    [11, 60, 61],\n    [12, 35, 37],\n    [13, 84, 85],\n \
    \   [16, 63, 65],\n    [20, 21, 29],\n    [28, 45, 53],\n    [33, 56, 65],\n \
    \   [36, 77, 85],\n    [39, 80, 89],\n    [48, 55, 73],\n    [65, 72, 97],\n \
    \   [20, 99, 101],\n    [60, 91, 109],\n    [11, 180, 181],\n    [17, 288, 289],\n\
    \    [20, 99, 101],\n    [48, 55, 73],\n    [24, 143, 145],\n    [40, 1189, 1191],\n\
    \    [52, 165, 173],\n    [68, 285, 293],\n    [88, 357, 365],\n    [264, 513,\
    \ 565],\n    [96, 1345, 1357],\n    [112, 481, 529],\n    [240, 571, 641],\n \
    \   [216, 729, 785],\n    [360, 1189, 1321],\n    [144, 1465, 1485],\n    [312,\
    \ 1073, 1325],\n    [672, 685, 969],\n    [640, 927, 1153],\n    [90, 999, 1001],\n\
    \    [80, 1551, 1559],\n    [156, 1665, 1801],\n    [130, 1301, 1449],\n    [240,\
    \ 1471, 1641],\n    [420, 1771, 1921],\n    [320, 2751, 2841],\n    [596, 2135,\
    \ 2533],\n    [960, 2731, 3121],\n    [12, 1681, 1683],\n    [220, 3721, 3869],\n\
    \    [128, 2979, 3041],\n    [468, 3871, 4601],\n    [12, 17", "    // Find greatest\
    \ side\n    let side1: number;\n    let side2: number;\n    let hypotenuse: number;\n\
    \    if (a > b && a > c) {\n        hypotenuse = a;\n        side1 = b;\n    \
    \    side2 = c;\n    } else if (b > a && b > c) {\n        hypotenuse = b;\n \
    \       side1 = a;\n        side2 = c;\n    } else {\n        hypotenuse = c;\n\
    \        side1 = a;\n        side2 = b;\n    }\n    // a^2 + b^2 = c^2\n    //\
    \ square the sides\n    side1 = side1 * side1;\n    side2 = side2 * side2;\n \
    \   hypotenuse = hypotenuse * hypotenuse;\n    // compare squares to hypotenuse\
    \ square\n    return side1 + side2 === hypotenuse;\n}\n", "    if (a === b &&\
    \ b === c) {\n        return false;\n    } else if (a > b && a > c) {\n      \
    \  if (Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2)) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    } else if\
    \ (b > a && b > c) {\n        if (Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2)) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    } else if (c > a && c > b) {\n        if (Math.pow(c, 2) === Math.pow(a,\
    \ 2) + Math.pow(b, 2)) {\n            return true;\n        } else {\n       \
    \     return false;\n        }\n    }\n}\n", "  return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2);\n}\n", "    //your code here\n    let arr: number[] =\
    \ [a, b, c].sort();\n    let a2: number = arr[0] ** 2;\n    let b2: number = arr[1]\
    \ ** 2;\n    let c2: number = arr[2] ** 2;\n    return a2 + b2 === c2;\n}\n",
  "    // your code here\n    // todo\n    return false;\n}\n", "  let right = false;\n\
    \  let hypotenuse = Math.max(a, b, c);\n  let opposite = a;\n  let adjacent =\
    \ b;\n  let hypSquared = hypotenuse * hypotenuse;\n  let oppSquared = opposite\
    \ * opposite;\n  let adjSquared = adjacent * adjacent;\n  if (hypSquared === oppSquared\
    \ + adjSquared) {\n    right = true;\n  }\n  return right;\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let sides: number[]\
    \ = [a, b, c].sort((x, y) => y - x);\n    return sides[0] < sides[1] + sides[2];\n\
    }\n", "    return (((a*a) + (b*b)) === (c*c));\n}\n", "    return Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5)); // true\nconsole.log(right_angle_triangle(1, 2, 3)); // false\n", " \
    \   // Check whether the sum of the squares of two sides\n    // is equal to the\
    \ square of the hypotenuse (3rd side)\n    return (Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2))\n}\n", "    let min = Math.min(a, b, c);\n    let max\
    \ = Math.max(a, b, c);\n    let sumOfMin: number = (a + b + c) - min - max;\n\
    \    return Math.pow(min, 2) + Math.pow(sumOfMin, 2) === Math.pow(max, 2);\n}\n",
  "    if (a * a + b * b == c * c) {\n        return true;\n    }\n    if (a * a +\
    \ c * c == b * b) {\n        return true;\n    }\n    if (b * b + c * c == a *\
    \ a) {\n        return true;\n    }\n    return false;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    return (Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2) ||\n        Math.pow(a, 2) + Math.pow(c,\
    \ 2) == Math.pow(b, 2) ||\n        Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a,\
    \ 2))\n}\n", "    return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2\
    \ + c**2 == a**2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    return (a * a + b * b == c * c) || (a * a + c * c == b * b)\
    \ || (b * b + c * c == a * a);\n}\n", "    let arr = [a, b, c].sort();\n    return\
    \ (arr[0] * arr[0] + arr[1] * arr[1]) === arr[2] * arr[2];\n}\n", "    let s1\
    \ = a * a;\n    let s2 = b * b;\n    let s3 = c * c;\n    if (s1 + s2 == s3 ||\
    \ s1 + s3 == s2 || s2 + s3 == s1) {\n        return true;\n    }\n    return false;\n\
    }\n", "    // TODO: Add your code here\n    return false;\n}\n", "  // Given side\
    \ lengths a, b, c, calculate whether they form a right-angled triangle\n  // Return\
    \ true if they do, false otherwise\n  // Remember: a^2 + b^2 = c^2\n  if (Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2)) {\n    return true;\n  } else {\n  \
    \  return false;\n  }\n}\n", "  // your code here\n  return true;\n}\n", "   \
    \ let ans: boolean = false;\n    // not a triangle\n    if (a + b < c || a + c\
    \ < b || b + c < a) {\n        return ans;\n    }\n\n    if (c**2 === a**2 + b**2\
    \ || a**2 === b**2 + c**2 || b**2 === a**2 + c**2) {\n        ans = true;\n  \
    \  }\n    return ans;\n}\n", "    const sides = [a, b, c].sort();\n    return\
    \ (sides[0] ** 2 + sides[1] ** 2) === sides[2] ** 2;\n}\n", "    let isRightAngle:\
    \ boolean = false;\n    let squaredSides: number[] = [a * a, b * b, c * c];\n\
    \    squaredSides.sort((a, b) => b - a);\n    let squaredSidesSum: number = squaredSides[0]\
    \ + squaredSides[1];\n    if (squaredSidesSum === squaredSides[2]) {\n       \
    \ isRightAngle = true;\n    }\n    return isRightAngle;\n}\n", "  // for a right\
    \ triangle, a^2 + b^2 = c^2\n  return (a ** 2 + b ** 2 == c ** 2)\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5))\nconsole.log(right_angle_triangle(1, 2, 3))\n", "    if (a > b && a >\
    \ c) {\n        if (a * a === b * b + c * c) {\n            return true;\n   \
    \     }\n    } else if (b > a && b > c) {\n        if (b * b === a * a + c * c)\
    \ {\n            return true;\n        }\n    } else if (c > a && c > b) {\n \
    \       if (c * c === a * a + b * b) {\n            return true;\n        }\n\
    \    }\n    return false;\n}", "    return a*a + b*b == c*c;\n}\n", "    if(a\
    \ === undefined || b === undefined || c === undefined)\n        return false;\n\
    \    let aSq = a*a;\n    let bSq = b*b;\n    let cSq = c*c;\n    return (aSq +\
    \ bSq === cSq || aSq + cSq === bSq || bSq + cSq === aSq);\n}\n", "    if (a ===\
    \ 0 || b === 0 || c === 0) {\n        return false;\n    } else if (a * a + b\
    \ * b === c * c) {\n        return true;\n    } else if (a * a + c * c === b *\
    \ b) {\n        return true;\n    } else if (b * b + c * c === a * a) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n", "    let\
    \ a2 = a * a;\n    let b2 = b * b;\n    let c2 = c * c;\n    let temp = 0;\n \
    \   if (a2 > b2 && a2 > c2) {\n        temp = a2;\n        a2 = c2;\n        c2\
    \ = temp;\n    } else if (b2 > a2 && b2 > c2) {\n        temp = b2;\n        b2\
    \ = c2;\n        c2 = temp;\n    }\n    if (a2 + b2 == c2) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    // Calculate the\
    \ triangles three sides\n    let hypotenuse = Math.max(a, b, c);\n    let otherSide1\
    \ = a - hypotenuse;\n    let otherSide2 = b - hypotenuse;\n    if (otherSide1\
    \ < 0) {\n        otherSide1 = hypotenuse - a;\n    }\n    if (otherSide2 < 0)\
    \ {\n        otherSide2 = hypotenuse - b;\n    }\n    // Test if triangle is 90-degree\n\
    \    if (hypotenuse ** 2 === otherSide1 ** 2 + otherSide2 ** 2) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    let ab: number = Math.pow(a, 2)\
    \ + Math.pow(b, 2);\n    let bc: number = Math.pow(b, 2) + Math.pow(c, 2);\n \
    \   let ac: number = Math.pow(a, 2) + Math.pow(c, 2);\n    if (ab == Math.pow(c,\
    \ 2) || bc == Math.pow(a, 2) || ac == Math.pow(b, 2)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    let max_side: number =\
    \ Math.max(a, b, c);\n    let sum_of_other_sides: number = a + b + c - max_side;\n\
    \    return max_side * max_side === sum_of_other_sides * sum_of_other_sides;\n\
    }\n", "    let sides = [a, b, c];\n    sides.sort();\n    if (sides[0]**2 + sides[1]**2\
    \ === sides[2]**2) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let result = false;\n    // Hint: you can use Math.hypot(x,\
    \ y) to get the length of the hypotenuse\n    // from the lengths of the catheti.\
    \ Don't forget to import it.\n    if (hypot(a, b) == c || hypot(a, c) == b ||\
    \ hypot(b, c) == a) {\n        result = true;\n    }\n    return result;\n}\n",
  "    return ((Math.pow(a, 2) + Math.pow(b, 2)) === Math.pow(c, 2)) ? true : false;\n\
    }\n", "    // Enter code here\n    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,\
    \ 2)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
  "  // Your code here.\n  // Check for a right triangle.\n  let hyp = Math.max(a,\
    \ b, c);\n  let sides: number[] = [a, b, c];\n  sides.splice(sides.indexOf(hyp),\
    \ 1);\n  let opposite = sides[0];\n  let adjacent = sides[1];\n  if (opposite**2\
    \ + adjacent**2 === hyp**2) {\n    return true;\n  }\n  return false;\n}\n", " \
    \   if (a * a + b * b == c * c) {\n        return true;\n    }\n    if (a * a\
    \ + c * c == b * b) {\n        return true;\n    }\n    if (b * b + c * c == a\
    \ * a) {\n        return true;\n    }\n    return false;\n}\n", "    let sides:\
    \ number[] = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    let max_length:\
    \ number = Math.max(a, b, c);\n    let min_length: number = Math.min(a, b, c);\n\
    \    let middle_length: number = a + b + c - max_length - min_length;\n    return\
    \ max_length ** 2 == middle_length ** 2 + min_length ** 2;\n}\n", "    let a2\
    \ = a * a;\n    let b2 = b * b;\n    let c2 = c * c;\n    return ((a2 + b2) ===\
    \ c2) || ((a2 + c2) === b2) || ((b2 + c2) === a2);\n}\n", "    return (a*a+b*b==c*c);\n\
    }", "    let squared_sides = [a * a, b * b, c * c];\n    squared_sides.sort();\n\
    \    return squared_sides[0] + squared_sides[1] === squared_sides[2];\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    return (a * a\
    \ + b * b == c * c)\n}\n", "    let test = Math.pow(a, 2) + Math.pow(b, 2);\n\
    \    let check = Math.pow(c, 2);\n    if (test == check) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let a2 = a * a;\n\
    \    let b2 = b * b;\n    let c2 = c * c;\n    if (a2 + b2 == c2 || a2 + c2 ==\
    \ b2 || b2 + c2 == a2) {\n        return true;\n    }\n    return false;\n}\n",
  "    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\n    let\
    \ x = Math.max(a, b, c);\n    let y = Math.min(a, b, c);\n    let z = a + b +\
    \ c - x - y;\n\n    return x * x == y * y + z * z;\n}\n", "    //Checking if right\
    \ angled triangle\n    if (a*a + b*b == c*c) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    const hypotenuse: number = Math.max(a,\
    \ b, c);\n    const hypotenuseSquared: number = Math.pow(hypotenuse, 2);\n   \
    \ const restSquared: number = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)\
    \ - hypotenuseSquared;\n    return restSquared === hypotenuseSquared;\n}\n", " \
    \   let flag: boolean = false;\n    let sides: number[] = [a, b, c];\n    let\
    \ smallestNum: number = Math.min(...sides);\n    sides.splice(sides.indexOf(smallestNum),\
    \ 1);\n    let hypotenuse: number = Math.max(...sides);\n    let cathetus: number\
    \ = sides.reduce((a, b) => a + b);\n    if (hypotenuse ** 2 === cathetus ** 2\
    \ + smallestNum ** 2) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let sorted_sides\
    \ = [a, b, c].sort();\n    return sorted_sides[0] ** 2 + sorted_sides[1] ** 2\
    \ === sorted_sides[2] ** 2;\n}\n", "  let isRightAngleTriangle = false;\n  let\
    \ sides = [a, b, c];\n  let max = Math.max(...sides);\n  if (sides.indexOf(max)\
    \ !== -1) {\n    let index = sides.indexOf(max);\n    sides.splice(index, 1);\n\
    \    if (Math.pow(max, 2) === Math.pow(sides[0], 2) + Math.pow(sides[1], 2)) {\n\
    \      isRightAngleTriangle = true;\n    }\n  }\n  return isRightAngleTriangle;\n\
    }\n", "    return true;\n}\n", "    if (a == b && b == c) {\n        return false;\n\
    \    }\n    return c * c == a * a + b * b || a * a == b * b + c * c || b * b ==\
    \ a * a + c * c;\n}\n", "  const hypotenuse: number = Math.max(a, b, c);\n  const\
    \ other_two: number = Math.min(a, b, c) + Math.max(a, b, c) - hypotenuse;\n  return\
    \ hypotenuse ** 2 == other_two ** 2;\n}\n", "    if (a <= 0 || b <= 0 || c <=\
    \ 0) return false;\n    var abc = [a, b, c];\n    abc.sort();\n    if (abc[0]\
    \ * abc[0] + abc[1] * abc[1] == abc[2] * abc[2]) return true;\n    return false;\n\
    }\n", "    // type your solution here\n    if (a > b && a > c) {\n        return\
    \ a*a == b*b + c*c;\n    } else if (b > a && b > c) {\n        return b*b == a*a\
    \ + c*c;\n    } else {\n        return c*c == a*a + b*b;\n    }\n}\n", "    let\
    \ sides = [a, b, c];\n    sides.sort();\n    let side1 = sides[0];\n    let side2\
    \ = sides[1];\n    let side3 = sides[2];\n    return side1 ** 2 + side2 ** 2 ===\
    \ side3 ** 2;\n}\n\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\n", "  return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n\
    }\n", "  let r = false;\n  if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,\
    \ 2)) {\n    r = true;\n  }\n  return r;\n}\n", "    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2);\n}\n", "  let isTriangle = a + b > c && a + c > b &&\
    \ b + c > a;\n  if (isTriangle) {\n    let arr: number[] = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    if (arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n", "  let isRightAngle: boolean = false;\n\
    \  if (((a * a) + (b * b)) === (c * c)) {\n    isRightAngle = true;\n  }\n  return\
    \ isRightAngle;\n}\n", "    let max = Math.max(a, b, c);\n    if (max === a) {\n\
    \        return Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c, 2);\n    } else\
    \ if (max === b) {\n        return Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,\
    \ 2) || Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2) || Math.pow(b, 2) +\
    \ Math.pow(c, 2) == Math.pow(a, 2));\n}\n", "    let right = [a, b, c].sort(function(a,\
    \ b) { return a - b });\n    return right[0] * right[0] + right[1] * right[1]\
    \ == right[2] * right[2];\n}\n", "    if (a <= 0 || b <= 0 || c <= 0) {\n    \
    \    return false;\n    }\n    return a * a + b * b === c * c || a * a + c * c\
    \ === b * b || b * b + c * c === a * a;\n}\n", "    if ((Math.pow(a, 2) + Math.pow(b,\
    \ 2)) === Math.pow(c, 2)) {\n        return true;\n    } else if ((Math.pow(a,\
    \ 2) + Math.pow(c, 2)) === Math.pow(b, 2)) {\n        return true;\n    } else\
    \ if ((Math.pow(b, 2) + Math.pow(c, 2)) === Math.pow(a, 2)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    if(a > b && a\
    \ > c){\n        let h: number = a;\n        let x: number = b;\n        let y:\
    \ number = c;\n        return h*h === x*x + y*y;\n    }\n    else if(b > a &&\
    \ b > c){\n        let h: number = b;\n        let x: number = a;\n        let\
    \ y: number = c;\n        return h*h === x*x + y*y;\n    }\n    else{\n      \
    \  let h: number = c;\n        let x: number = a;\n        let y: number = b;\n\
    \        return h*h === x*x + y*y;\n    }\n}\n", "    //Write your code here\n\
    \    if (isRightTriangle(a, b, c)) {\n        return true;\n    }\n    else if\
    \ (isRightTriangle(b, c, a)) {\n        return true;\n    }\n    else if (isRightTriangle(c,\
    \ a, b)) {\n        return true;\n    }\n    else {\n        return false;\n \
    \   }\n}\n", "    if (a * a == b * b + c * c || b * b == a * a + c * c || c *\
    \ c == a * a + b * b) {\n        return true;\n    }\n    return false;\n}\n",
  "    // Write your code here\n    return false;\n}\n", "    if (a > b && a > c)\
    \ {\n        return a * a === b * b + c * c;\n    }\n    if (b > a && b > c) {\n\
    \        return b * b === a * a + c * c;\n    }\n    if (c > a && c > b) {\n \
    \       return c * c === a * a + b * b;\n    }\n    return false;\n}\n", "   \
    \ return (c ** 2 == a ** 2 + b ** 2) || (a ** 2 == b ** 2 + c ** 2) || (b ** 2\
    \ == a ** 2 + c ** 2);\n}\n", "    return Math.pow(a, 2) + Math.pow(b, 2) ===\
    \ Math.pow(c, 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    // find longest side\n    const longestSide = Math.max(a, b,\
    \ c);\n    const otherSides = [a, b, c].filter(side => side !== longestSide);\n\
    \    const sumSides = otherSides.reduce((sum, side) => {\n        return sum +\
    \ Math.pow(side, 2);\n    }, 0);\n    return Math.pow(longestSide, 2) === sumSides;\n\
    }\n", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}", " \
    \   // Checks Pythagorean theorem\n    let hypotenuse = Math.max(a, b, c);\n \
    \   let two_smallest = [a, b, c].sort().slice(0, 2);\n    return hypotenuse **\
    \ 2 === two_smallest[0] ** 2 + two_smallest[1] ** 2;\n}\n", "  if (a > b && a\
    \ > c) {\n    return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n  }\
    \ else if (b > a && b > c) {\n    return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n  } else {\n    return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n  }\n}\n", "    const sides = [a, b, c].sort((a, b) => a - b);\n    const\
    \ [a, b, c] = sides;\n    return c * c === a * a + b * b;\n}\n", "    let sides\
    \ = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    return (c*c\
    \ === a*a + b*b);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));", "    // Check if any two sides add up to be greater than the third\
    \ side\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return false;\n\
    \    }\n    // Check if any two sides squared equal to the third side squared\n\
    \    return a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a;\n}\n",
  "  const sides: number[] = [a, b, c].sort();\n  return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    let high = Math.max(a, b, c);\n  \
    \  let low = [a, b, c].filter(x => x !== high);\n    return low[0] * low[0] +\
    \ low[1] * low[1] === high * high;\n}\n", "    // your code here.\n    return\
    \ false;\n}\n", "    return (a**2 + b**2 === c**2) || (a**2 + c**2 === b**2) ||\
    \ (b**2 + c**2 === a**2);\n}\n", "  return Math.pow(a, 2) + Math.pow(b, 2) ===\
    \ Math.pow(c, 2);\n}\n", "  // TODO: your code goes here...\n  if (a ** 2 + b\
    \ ** 2 === c ** 2) {\n    return true;\n  }\n  return false;\n}\n", "  return\
    \ (a * a + b * b === c * c) || (a * a + c * c === b * b) || (b * b + c * c ===\
    \ a * a);\n}\n\n\nconsole.log(right_angle_triangle(3, 4, 5));", "    return Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let [x, y, z]\
    \ = [a, b, c].sort((x, y) => x - y);\n    return z ** 2 === x ** 2 + y ** 2;\n\
    }\n", "  // a^2 + b^2 = c^2\n  // (a^2 + b^2 - c^2) < 0.01\n  // Pythagorean theorem\n\
    \  let aSquared = Math.pow(a, 2);\n  let bSquared = Math.pow(b, 2);\n  let cSquared\
    \ = Math.pow(c, 2);\n  if (Math.abs(aSquared + bSquared - cSquared) < 0.01) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));", "    // write code here\n\
    \    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let result = false;\n\
    \    let square_a = Math.pow(a, 2);\n    let square_b = Math.pow(b, 2);\n    let\
    \ square_c = Math.pow(c, 2);\n    if (square_a + square_b === square_c || square_a\
    \ + square_c === square_b || square_b + square_c === square_a) {\n        result\
    \ = true;\n    }\n    return result;\n}\n", "    return a*a + b*b == c*c;\n}",
  "    let r: boolean = false;\n    // your code here\n    if (a * a + b * b == c\
    \ * c) {\n        r = true;\n    }\n    return r;\n}\n", "    return a*a + b*b\
    \ == c*c;\n}\n", "    // use pythagoras theorem to see if the two sides squared\
    \ equals the \n    // hypotenuse squared\n    return ((a * a) + (b * b) === (c\
    \ * c));\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
