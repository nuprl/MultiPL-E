name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["    if (is_positive_number(a) && is_positive_number(b) && is_positive_number(c))\
    \ {\n        if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n      \
    \      return true;\n        }\n        else if (Math.pow(a, 2) + Math.pow(c,\
    \ 2) == Math.pow(b, 2)) {\n            return true;\n        }\n        else if\
    \ (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)) {\n            return true;\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    let [hypotenuse, cathetus1, cathetus2]\
    \ = [a, b, c].sort((x, y) => x - y);\n    return Math.pow(hypotenuse, 2) === Math.pow(cathetus1,\
    \ 2) + Math.pow(cathetus2, 2);\n}\n", "    // TODO - remove this comment and put\
    \ your code here\n    return undefined;\n}\n", "    const squaredSides = [a, b,\
    \ c].map(x => x * x);\n    const sortedSides = squaredSides.sort((x, y) => x -\
    \ y);\n    return sortedSides[0] + sortedSides[1] === sortedSides[2];\n}\n", " \
    \   return a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c\
    \ === a * a;\n}\n", "    const lengthArr = [a, b, c].sort((a, b) => a - b);\n\
    \    const c_squared = lengthArr[2] * lengthArr[2];\n    const a_squared = lengthArr[0]\
    \ * lengthArr[0];\n    const b_squared = lengthArr[1] * lengthArr[1];\n    return\
    \ c_squared === a_squared + b_squared;\n}\n", "    const max = Math.max(a, b,\
    \ c);\n    return max * max === a * a + b * b + c * c - max * max;\n}\n", "  \
    \  return false;\n}\n", "    if (a == 0 || b == 0 || c == 0) {\n        return\
    \ false;\n    }\n    else if (a > b && a > c) {\n        if (Math.pow(a, 2) ==\
    \ Math.pow(b, 2) + Math.pow(c, 2)) {\n            return true;\n        }\n  \
    \      else {\n            return false;\n        }\n    }\n    else if (b > a\
    \ && b > c) {\n        if (Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2))\
    \ {\n            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else if (c > a && c > b) {\n        if (Math.pow(c, 2)\
    \ == Math.pow(a, 2) + Math.pow(b, 2)) {\n            return true;\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    else {\n   \
    \     return false;\n    }\n}\n", "    if ((a * a) + (b * b) == (c * c)) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n", "    return\
    \ a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b;\n}\n", "    return\
    \ a**2 + b**2 === c**2\n}\n", "  // Your code goes here\n  if (a >= b && a >=\
    \ c) {\n    return (b * b + c * c) == a * a;\n  }\n  if (b >= a && b >= c) {\n\
    \    return (a * a + c * c) == b * b;\n  }\n  if (c >= a && c >= b) {\n    return\
    \ (a * a + b * b) == c * c;\n  }\n  return false;\n}", "    if(a > b && a > c){\n\
    \        return b**2 + c**2 === a**2;\n    }\n    if(b > a && b > c){\n      \
    \  return a**2 + c**2 === b**2;\n    }\n    if(c > a && c > b){\n        return\
    \ a**2 + b**2 === c**2;\n    }\n    return false;\n}\n", "    // your code here!\n\
    \    return;\n}\n", "    // your code here\n    return false;\n}\n", "  return\
    \ (a ** 2 + b ** 2 == c ** 2)\n    || (a ** 2 + c ** 2 == b ** 2)\n    || (b **\
    \ 2 + c ** 2 == a ** 2);\n}\n", "  let [longest, shortest] = [a, b].sort((a, b)\
    \ => b - a);\n  if (longest ** 2 === (shortest ** 2) + (c ** 2)) {\n    return\
    \ true;\n  }\n  return false;\n}", "    return false;\n}\n", "    let angles:\
    \ number[] = [a, b, c];\n    angles.sort((x, y) => x - y);\n    if (angles[0]\
    \ * angles[0] + angles[1] * angles[1] == angles[2] * angles[2]) {\n        return\
    \ true;\n    }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
