name: HumanEval_22_filter_integers
language: ts
prompt: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
  a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1,\
  \ 2, 3]\nfunction filter_integers(values: any[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
  \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["    return values.filter(Number.isInteger);\n}\n", "    return values.filter(value\
    \ => typeof value === \"number\" && isFinite(value));\n}\n", "    return values.filter(element\
    \ => (typeof element) === \"number\" && Number.isInteger(element));\n}\n", " \
    \   return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < values.length; i++)\
    \ {\n    let x = values[i];\n    if (typeof x === \"number\" && x >= 0 && x ===\
    \ Math.round(x)) {\n      result.push(x);\n    }\n  }\n  return result;\n}\n",
  "  let result = values.filter(function(value) {\n    return typeof value === \"\
    number\" && !isNaN(value);\n  });\n  return result;\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < values.length; i++) {\n        let cur: any =\
    \ values[i];\n        if (typeof cur === \"number\" && (cur % 1) === 0) {\n  \
    \          result.push(cur);\n        }\n    }\n    return result;\n}\n", "  return\
    \ values.filter(function(value) {\n    return typeof value === \"number\" && value\
    \ % 1 === 0;\n  });\n}\n", "    let filtered: number[] = [];\n    for (let i:\
    \ number = 0; i < values.length; i++) {\n        if (typeof values[i] === \"number\"\
    ) {\n            filtered.push(values[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    return values.filter(isInteger);\n}\n", "    const numbers: number[]\
    \ = values.filter(value => isFinite(value) && !isNaN(value));\n    return numbers;\n\
    }", "    return values.filter(n => Number.isInteger(n));\n}\n", "    return values.filter(value\
    \ => Number.isInteger(value));\n}\n", "  return values.filter(value => typeof\
    \ value === \"number\" && Number.isInteger(value));\n}\n", "    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && Number.isInteger(value);\n\
    \    });\n}\n", "    return values.filter(value => typeof value === \"number\"\
    \ && !Number.isNaN(value));\n}\n", "    return values.filter(item => item ===\
    \ parseInt(item, 10));\n}\n", "    let integers: number[] = [];\n    values.forEach(element\
    \ => {\n        if (typeof element === \"number\" && !isNaN(element))\n      \
    \      integers.push(element);\n    });\n    return integers;\n}\n", "    return\
    \ values.filter(value => typeof value === \"number\");\n}\n", "    //return values.filter(i\
    \ => Number.isInteger(i));\n    return values.filter(Number.isInteger);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
