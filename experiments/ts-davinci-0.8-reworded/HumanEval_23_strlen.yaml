name: HumanEval_23_strlen
language: ts
prompt: "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"\
  abc\")\n// 3\nfunction strlen(string: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n\
  \  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"\
  ),9);\n}\n\ntest();"
completions: ["    return string.length;\n}\n", "    return string.length;\n}\n",
  "    let length = 0;\n    for (const character of string) {\n        length++;\n\
    \    }\n    return length;\n}\n", "  return string.length;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        count++;\n    }\n\
    \    return count;\n}\n", "    return string.length;\n}\n", "    return string.length;\n\
    }\n", "  var i = 0\n  while (string[i] != \"\\0\") {\n    i = i + 1\n  }\n  return\
    \ i\n}\n", "    let length = 0;\n    for (let i = 0; i < string.length; i++) {\n\
    \        length += 1;\n    }\n    return length;\n}\n", "    return string.length;\n\
    }\n", "    return string.length;\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < string.length; i++) {\n    result++;\n  }\n  return result;\n}\n", "   \
    \ return 0;\n}\n", "    return string.length;\n}\n", "    return string.length;\n\
    }\n", "    return string.length;\n}\n", "    var i = 0;\n    var c = ' ';\n  \
    \  while (c != '') {\n        c = string[i];\n        i = i + 1;\n    }\n    return\
    \ i - 1;\n}\n", "    return string.length;\n}\n", "    let len = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        len++;\n    }\n    return len;\n}\n",
  "    return string.length;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
