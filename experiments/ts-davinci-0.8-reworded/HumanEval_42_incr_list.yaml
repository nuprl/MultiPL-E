name: HumanEval_42_incr_list
language: ts
prompt: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["    return l.map(function (v) { return v + 1; });\n}\n", "    const\
    \ res: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        res.push(l[i]\
    \ + 1);\n    }\n    return res;\n}\n", "  let result: number[] = [];\n  for (let\
    \ i: number = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return\
    \ result;\n}\n", "  return l.map(x => x + 1);\n}\n", "    for (let i = 0; i <\
    \ l.length; i++) {\n        l[i]++;\n    }\n    return l;\n}\n", "    return l.map(n\
    \ => n + 1);\n}\n", "    let mapped_list = l.map(function(e) { return e + 1; });\n\
    \    return mapped_list;\n}\nincr_list([1, 2, 3]);\nincr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]);\n", "    return l.map(function (n) {\n        return n + 1;\n\
    \    });\n}", "  const tmp = []\n  for (let i = 0; i < l.length; i++) {\n    tmp.push(l[i]\
    \ + 1)\n  }\n  return tmp\n}\n", "    let res: number[] = [];\n    for (let i:\
    \ number = 0; i < l.length; i++) {\n        res.push(l[i] + 1);\n    }\n    return\
    \ res;\n}\n", "  return l.map(v => v + 1);\n}\n", "    let incr_l: number[] =\
    \ [];\n    for (let i: number = 0; i < l.length; i++) {\n        incr_l.push(l[i]\
    \ + 1);\n    }\n    return incr_l;\n}\n", "    return l.map(x => x + 1);\n}\n",
  "    return l.map(i => i + 1);\n}\n", "    var result: number[] = [];\n    for (var\
    \ i: number = 0; i < l.length; i++) {\n        result.push(l[i] + 1);\n    }\n\
    \    return result;\n}\n", "    return l.map(x => x + 1);\n}\n", "  const new_list\
    \ = l.map(num => num + 1);\n  return new_list;\n}\n", "    return l.map(function\
    \ (element) {\n        return element + 1;\n    });\n}\n", "  const newList =\
    \ l.map(item => item + 1);\n  return newList;\n}\n", "  return l.map(element =>\
    \ element + 1);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
