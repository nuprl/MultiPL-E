name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["    let max = numbers[0];\n    let result = new Array(numbers.length);\n\
    \    result[0] = max;\n    for (let i = 1; i < numbers.length; i++) {\n      \
    \  if (numbers[i] > max) {\n            max = numbers[i];\n        }\n       \
    \ result[i] = max;\n    }\n    return result;\n}\n", "    const result: number[]\
    \ = [];\n    numbers.forEach((number, i) => {\n        result.push(Math.max(...numbers.slice(0,\
    \ i + 1)));\n    });\n    return result;\n}\n", "    let maxArray: number[] =\
    \ [];\n    let max: number = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        maxArray.push(max);\n    }\n    return maxArray;\n}\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "  return numbers.map((_, i) => Math.max(...numbers.slice(0,\
    \ i + 1)));\n}\n", "  const res: number[] = [];\n  let max = -Infinity;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max\
    \ = numbers[i];\n    }\n    res.push(max);\n  }\n  return res;\n}\n", "  let ret:\
    \ number[] = [];\n  let max = -Infinity;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    max = Math.max(max, numbers[i]);\n    ret.push(max);\n  }\n  return\
    \ ret;\n}\n", "    let max: number = numbers[0];\n    let rolling_maximum: number[]\
    \ = [max];\n    for (let i = 1; i < numbers.length; i++) {\n        max = Math.max(max,\
    \ numbers[i]);\n        rolling_maximum.push(max);\n    }\n    return rolling_maximum;\n\
    }\n", "    let maxs: number[] = [];\n    let max = numbers[0];\n    maxs.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        maxs.push(max);\n    }\n\
    \    return maxs;\n}\n\nlet numbers: number[] = [1, 2, 3, 2, 3, 4, 2];\nlet maxs:\
    \ number[] = rolling_max(numbers);\nconsole.log(maxs);\n", "    return numbers.map((number,\
    \ index) => Math.max(...numbers.slice(0, index + 1)));\n}\n", "    const maxes:\
    \ number[] = [];\n    let max = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        max = Math.max(max, numbers[i]);\n        maxes.push(max);\n\
    \    }\n    return maxes;\n}\n", "    let result: number[] = [];\n    let max\
    \ = -Infinity;\n    for (let index = 0; index < numbers.length; index++) {\n \
    \       if (numbers[index] > max) {\n            max = numbers[index];\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "  let result:\
    \ number[] = [];\n  if (numbers.length > 0) {\n    let max = numbers[0];\n   \
    \ result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n      if\
    \ (numbers[i] > max) {\n        max = numbers[i];\n      }\n      result.push(max);\n\
    \    }\n  }\n  return result;\n}\n", "    let result: number[] = [numbers[0]];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > result[i\
    \ - 1]) {\n            result.push(numbers[i]);\n        } else {\n          \
    \  result.push(result[i - 1]);\n        }\n    }\n    return result;\n}\n", " \
    \ const result: number[] = [];\n  let max = -Infinity;\n  for (const item of numbers)\
    \ {\n    max = Math.max(max, item);\n    result.push(max);\n  }\n  return result;\n\
    }\n", "    const result: number[] = [];\n    let max_number = 0;\n    numbers.forEach(\
    \ (number) => {\n        if (number > max_number) {\n            max_number =\
    \ number;\n        }\n        result.push(max_number);\n    });\n    return result;\n\
    }\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, -1]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5]));", " \
    \   if (!Array.isArray(numbers)) throw new Error('Invalid input');\n    if (numbers.length\
    \ === 0) return [];\n    if (numbers.length === 1) return [numbers[0]];\n\n  \
    \  let result: number[] = [numbers[0]];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        result.push(Math.max(result[i - 1], numbers[i]));\n    }\n \
    \   return result;\n}\n", "    let max: number = numbers[0];\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(max);\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \   }\n    return result;\n}\n", "    const result: number[] = [];\n    let maxElement\
    \ = numbers[0];\n    result.push(maxElement);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > maxElement) {\n            maxElement = numbers[i];\n\
    \        }\n        result.push(maxElement);\n    }\n    return result;\n}\n",
  "    return [];\n}\n", "    let max_elements: number[] = [];\n    let max_so_far:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        max_so_far\
    \ = Math.max(max_so_far, numbers[i]);\n        max_elements.push(max_so_far);\n\
    \    }\n    return max_elements;\n}\n", "  const result: number[] = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    let max = numbers[i];\n    for (let\
    \ j = 0; j <= i; j++) {\n      if (numbers[j] > max) {\n        max = numbers[j];\n\
    \      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "    if (numbers.length\
    \ == 0) return [];\n    if (numbers.length == 1) return [numbers[0]];\n    let\
    \ max: number = numbers[0];\n    let res: number[] = [];\n    res.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        res.push(max);\n    }\n\
    \    return res;\n}\n", "    const result: number[] = [];\n    let currentMax\
    \ = -1;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}\n", "  let maxes: number[] = [];\n  let max: number\
    \ = -Infinity;\n  numbers.forEach(function(number) {\n    if (number > max) {\n\
    \      max = number;\n    }\n    maxes.push(max);\n  });\n  return maxes;\n}\n",
  "    var result: number[] = [];\n    var max = -Infinity;\n    for (var i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    let currentMax: number = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        result.push(currentMax);\n\
    \        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n    }\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    const len = numbers.length;\n    let max = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < len; i++) {\n        if (numbers[i] > max) {\n      \
    \      max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "    var\
    \ max: number[] = [];\n    var max_number: number = numbers[0];\n    max.push(max_number);\n\
    \    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n        max.push(max_number);\n\
    \    }\n    return max;\n}\n", "  let max = Number.MIN_SAFE_INTEGER;\n  return\
    \ numbers.map(number => {\n    max = Math.max(max, number);\n    return max;\n\
    \  });\n}\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "    let result:\
    \ number[] = [];\n    let max: number = -1;\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "  let max_so_far\
    \ = numbers[0];\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    let current = numbers[i];\n    if (current > max_so_far) {\n      max_so_far\
    \ = current;\n    }\n    res.push(max_so_far);\n  }\n  return res;\n}\n", "  \
    \  const maxList: number[] = [numbers[0]];\n    let maxElement: number = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > maxElement)\
    \ {\n            maxElement = numbers[i];\n        }\n        maxList.push(maxElement);\n\
    \    }\n    return maxList;\n}\n", "  let result: number[] = [];\n  let currentMax\
    \ = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    currentMax\
    \ = Math.max(currentMax, numbers[i]);\n    result.push(currentMax);\n  }\n  return\
    \ result;\n}\n", "    let max = 0;\n    return numbers.map(x => {\n        if\
    \ (x > max) max = x;\n        return max;\n    });\n}\n", "    var max: number[]\
    \ = [];\n    var currentMax: number = numbers[0];\n    max.push(currentMax);\n\
    \    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n        }\n        max.push(currentMax);\n\
    \    }\n    return max;\n}\n", "    const maxima: number[] = [];\n    let currentMax\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n        maxima.push(currentMax);\n\
    \    }\n    return maxima;\n}\n", "    const result: number[] = [];\n    let max\
    \ = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        const\
    \ current = numbers[i];\n        if (current > max) {\n            max = current;\n\
    \        }\n        result.push(max);\n    }\n    return result;\n}\n", "  if\
    \ (numbers.length == 0) {\n    return [];\n  }\n  let max: number = numbers[0];\n\
    \  let result: number[] = [];\n  for (let i: number = 0; i < numbers.length; i++)\
    \ {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n  }\n  return\
    \ result;\n}\n", "    const max = [];\n    let m = numbers[0];\n    max.push(m);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > m) {\n\
    \            m = numbers[i];\n        }\n        max.push(m);\n    }\n    return\
    \ max;\n}\n", "    let result: number[] = [];\n    let max: number = 0;\n    numbers.forEach(element\
    \ => {\n        if (element > max) {\n            max = element;\n        }\n\
    \        result.push(max);\n    });\n    return result;\n}\n", "    let result:\
    \ number[] = []\n    for (let i = 0; i < numbers.length; i++) {\n        const\
    \ max = Math.max(...numbers.slice(0, i + 1))\n        result.push(max)\n    }\n\
    \    return result\n}\n", "  if (numbers.length == 0) {\n    return [];\n  }\n\
    \n  let max = numbers[0];\n  const result = [max];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    const number = numbers[i];\n    max = Math.max(max, number);\n \
    \   result.push(max);\n  }\n\n  return result;\n}\n", "    const result: number[]\
    \ = [];\n    let currentMax = numbers[0];\n    result.push(currentMax);\n    for\
    \ (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}\n", "    var results: number[] = [];\n    var cur_max:\
    \ number = -Infinity;\n    for (var i = 0; i < numbers.length; i++) {\n      \
    \  if (numbers[i] > cur_max) {\n            cur_max = numbers[i];\n        }\n\
    \        results.push(cur_max);\n    }\n    return results;\n}\n", "    let result:\
    \ number[] = [];\n    let current_max: number = numbers[0];\n    result.push(current_max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        current_max = Math.max(current_max,\
    \ numbers[i]);\n        result.push(current_max);\n    }\n    return result;\n\
    }\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "  const result: number[]\
    \ = [];\n  let max = numbers[0];\n  result.push(max);\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  let max = -Infinity;\n\
    \  for (const n of numbers) {\n    max = Math.max(max, n);\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [];\n    let maximum\
    \ = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > maximum) {\n            maximum = numbers[i];\n        }\n        result.push(maximum);\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        result.push(Math.max(...numbers.slice(0,\
    \ i + 1)));\n    }\n    return result;\n}\n", "    const result: number[] = [];\n\
    \    let max: number = numbers[0];\n    result.push(max);\n    for (let i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "  let result: number[] = [];\n  let currentMax = 0;\n  for (let i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n      currentMax\
    \ = numbers[i];\n    }\n    result.push(currentMax);\n  }\n  return result;\n\
    }\n", "    if (numbers.length < 1) {\n        return [];\n    }\n    var max =\
    \ numbers[0];\n    var maxes = [];\n    for (var i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n\
    \        maxes.push(max);\n    }\n    return maxes;\n}\n", "    var result: number[]\
    \ = [];\n    var max: number = 0;\n    for (var i = 0; i < numbers.length; i++)\
    \ {\n        var number = numbers[i];\n        if (number > max) {\n         \
    \   max = number;\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "  let max = 0;\n  let result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "  return numbers.map((number, index) => Math.max(...numbers.slice(0,\
    \ index + 1)));\n}\n", "  const maxs: number[] = [];\n  let max = 0;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n    maxs.push(max);\n  }\n  return maxs;\n}\n", "  var result:\
    \ number[] = [];\n  if(numbers.length == 0) {\n    return result;\n  }\n  result.push(numbers[0]);\n\
    \  for(var i: number = 1; i < numbers.length; i++) {\n    if(numbers[i] > result[i\
    \ - 1]) {\n      result.push(numbers[i]);\n    } else {\n      result.push(result[i\
    \ - 1]);\n    }\n  }\n  return result;\n}\n", "  let max = 0;\n  let result =\
    \ [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n\
    \    if (number > max) {\n      max = number;\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [numbers[0]];\n  \
    \  for (let i = 1; i < numbers.length; i++) {\n        result.push(Math.max(result[i\
    \ - 1], numbers[i]));\n    }\n    return result;\n}\n", "    const m: number[]\
    \ = [];\n    let max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      max = Math.max(max, numbers[i]);\n        m.push(max);\n    }\n    return\
    \ m;\n}\n\ntest(\"test rolling max\", () => {\n    expect(rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])).toEqual([1, 2, 3, 3, 3, 4, 4]);\n});\n", "    let result: number[]\
    \ = [];\n    let max: number = Number.MIN_SAFE_INTEGER;\n    for (let i: number\
    \ = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n", "    return numbers.map((n,\
    \ i) => numbers.slice(0, i + 1).reduce((a, b) => Math.max(a, b)));\n}\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n\n", "  let currentMax = 0;\n  let output = [];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    if\
    \ (num > currentMax) {\n      currentMax = num;\n    }\n    output.push(currentMax);\n\
    \  }\n  return output;\n}\n", "    return numbers.map((number, index) => {\n \
    \       return Math.max(...numbers.slice(0, index + 1));\n    });\n}\n", "   \
    \ let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let max: number[] = [];\n    let max_so_far: number = numbers[0];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        max.push(max_so_far);\n\
    \    }\n    return max;\n}\n", "    const maxes: number[] = [];\n    numbers.forEach((val,\
    \ i) => {\n        maxes.push(Math.max(...numbers.slice(0, i + 1)));\n    });\n\
    \    return maxes;\n}\n", "    const result: number[] = [];\n    let currentMax\
    \ = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}\n", "    return numbers.map((current, i, arr) =>\
    \ Math.max(...arr.slice(0, i + 1)));\n}\n", "    let max: number[] = [numbers[0]];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max.push(Math.max(max[i\
    \ - 1], numbers[i]));\n    }\n    return max;\n}\n", "    return numbers.map((n,\
    \ i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "  let output: number[]\
    \ = [];\n  let max: number = numbers[0];\n  output.push(max);\n  for (let i =\
    \ 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n\
    \    }\n    output.push(max);\n  }\n  return output;\n}\n", "    let result: number[]\
    \ = [];\n    let max = numbers[0];\n    result.push(max);\n    for (let i = 1;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "  let current = -Infinity;\n  return numbers.map(number => (current = Math.max(current,\
    \ number)));\n}\n", "  let max = numbers[0];\n  let result = [max];\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =\
    \ numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "  \
    \  var _roll = [];\n    var _current_max = 0;\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > _current_max) {\n            _current_max =\
    \ numbers[i];\n        }\n        _roll.push(_current_max);\n    }\n    return\
    \ _roll;\n}\n", "    const _rollingMax = [];\n    const _numberArray = numbers;\n\
    \    let _max = 0;\n    for (let i = 0; i < _numberArray.length; i++) {\n    \
    \    if (_numberArray[i] > _max) {\n            _max = _numberArray[i];\n    \
    \    }\n        _rollingMax.push(_max);\n    }\n    return _rollingMax;\n}\n",
  "  return numbers.map((number, index) => Math.max(...numbers.slice(0, index + 1)));\n\
    }\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "  const rolling = [numbers[0]];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    const num = numbers[i];\n \
    \   rolling.push(Math.max(rolling[i - 1], num));\n  }\n  return rolling;\n}\n\n\
    export class RollingMax {\n  numbers: number[];\n  result: number[];\n\n  constructor(numbers:\
    \ number[]) {\n    this.numbers = numbers;\n    this.result = rolling_max(numbers);\n\
    \  }\n\n  numbers_to_string() {\n    return this.numbers.join(\", \");\n  }\n\n\
    \  result_to_string() {\n    return this.result.join(\", \");\n  }\n}", "    let\
    \ max: number = numbers[0];\n    let result: number[] = new Array(numbers.length);\n\
    \    result[0] = max;\n    for (let i = 1; i < numbers.length; i++) {\n      \
    \  max = Math.max(max, numbers[i]);\n        result[i] = max;\n    }\n    return\
    \ result;\n}\n", "    return numbers.map((value, index, array) => {\n        return\
    \ Math.max(...array.slice(0, index + 1));\n    });\n}\n\ntest(test_case(\n   \
    \ rolling_max([1, 2, 3, 2, 3, 4, 2]),\n    [1, 2, 3, 3, 3, 4, 4]\n));\n", "  //\
    \ Incremental algorithm\n  // We always keep track of the current maximum value.\
    \ For the first element, it is itself the max.\n  // We start a \"transition\"\
    \ state when we detect that a lower value comes next in the array.\n  // The transition\
    \ is over when we detect that the next value is greater than the current maximum\
    \ value.\n  // In transition, we keep the current maximum value, but will update\
    \ it once transition is over.\n  let max = numbers[0];\n  let transition = false;\n\
    \  const result = [max];\n  for (let i = 1; i < numbers.length; i++) {\n    const\
    \ next = numbers[i];\n    if (next < max) {\n      // Start transition\n     \
    \ transition = true;\n    } else if (transition) {\n      // End transition, update\
    \ max\n      max = next;\n      transition = false;\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  let max: number\
    \ = 0;\n  numbers.forEach(element => {\n    if (element > max) {\n      max =\
    \ element;\n    }\n    result.push(max);\n  });\n  return result;\n}\n", "   \
    \ return numbers.map((val, idx) => Math.max(...numbers.slice(0, idx + 1)));\n\
    }\n", "    if (numbers.length === 0) {\n        return [];\n    }\n    const result:\
    \ number[] = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++) {\n \
    \       result.push(Math.max(result[i - 1], numbers[i]));\n    }\n    return result;\n\
    }\n", "    return numbers.map((number, index) => {\n        return Math.max(...numbers.slice(0,\
    \ index + 1));\n    });\n}\n", "    let max: number = -Infinity;\n    let maxes:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        maxes.push(max);\n\
    \    }\n    return maxes;\n}\n", "  if (!numbers.length) {\n    return [];\n \
    \ }\n  const output: number[] = [numbers[0]];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    output.push(Math.max(output[i - 1], numbers[i]));\n  }\n  return\
    \ output;\n}\n", "    if (numbers.length === 0) {\n        return numbers;\n \
    \   }\n    const result: number[] = [numbers[0]];\n    let max: number = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n", "  var maxes: number[]\
    \ = [];\n  var max: number = numbers[0];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    max = Math.max(max, numbers[i]);\n    maxes.push(max);\n  }\n  return\
    \ maxes;\n}\n", "    let currentMax: number = 0;\n    let maxes: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n        }\n        maxes.push(currentMax);\n\
    \    }\n    return maxes;\n}\n", "    let max = numbers[0];\n    return numbers.map(num\
    \ => {\n        if (num > max) {\n            max = num;\n        }\n        return\
    \ max;\n    });\n}\n", "    return [1, 2, 3, 3, 3, 4, 4];\n}\n", "    const result:\
    \ number[] = [];\n    let maxSoFar = numbers[0];\n    result.push(maxSoFar);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > maxSoFar)\
    \ {\n            maxSoFar = numbers[i];\n        }\n        result.push(maxSoFar);\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    let max:\
    \ number = numbers[0];\n    result.push(max);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    let\
    \ result: number[] = [];\n    let max = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let number = numbers[i];\n        if (number > max) {\n    \
    \        max = number;\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    let result: number[] = [];\n    result.push(numbers[0]);\n\
    \    let currentMax = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n        result.push(currentMax);\n    }\n    return result;\n}\n",
  "  return numbers.map((number, index) => Math.max(...numbers.slice(0, index + 1)));\n\
    }\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "  return numbers.map((val,\
    \ idx) => Math.max(...numbers.slice(0, idx + 1)));\n}\n", "  const result: number[]\
    \ = [];\n  numbers.forEach((number, index) => {\n    result.push(Math.max(...numbers.slice(0,\
    \ index + 1)));\n  });\n  return result;\n}\n", "  if (numbers.length === 0) {\n\
    \    return [];\n  }\n  let max_val = numbers[0];\n  const rolling_max_numbers\
    \ = [max_val];\n  for (let i = 1; i < numbers.length; i++) {\n    const current_val\
    \ = numbers[i];\n    if (current_val > max_val) {\n      max_val = current_val;\n\
    \    }\n    rolling_max_numbers.push(max_val);\n  }\n  return rolling_max_numbers;\n\
    }\n", "  let maxSoFar = 0;\n  return numbers.map(x => {\n    maxSoFar = Math.max(maxSoFar,\
    \ x);\n    return maxSoFar;\n  });\n}\n", "    var result: number[] = [];\n  \
    \  var max: number = numbers[0];\n    result.push(max);\n    for (var i = 1; i\
    \ < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max =\
    \ numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    return numbers.map((el, i) => {\n        return Math.max(...numbers.slice(0,\
    \ i + 1));\n    });\n}\n", "    var maxNum = numbers[0];\n    var result = [];\n\
    \    result.push(maxNum);\n    for (var i = 1; i < numbers.length; i++) {\n  \
    \      if (numbers[i] > maxNum) {\n            maxNum = numbers[i];\n        }\n\
    \        result.push(maxNum);\n    }\n    return result;\n}\n\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "    const result: number[] = [];\n    let max: number\
    \ = -Infinity;\n    for (let number of numbers) {\n        max = Math.max(max,\
    \ number);\n        result.push(max);\n    }\n    return result;\n}\n\nexport\
    \ { rolling_max };", "    if (numbers.length === 0) {\n        return [];\n  \
    \  }\n    let max = numbers[0];\n    const result = [max];\n    for (let i = 1;\
    \ i < numbers.length; i++) {\n        const currentValue = numbers[i];\n     \
    \   if (currentValue > max) {\n            max = currentValue;\n        }\n  \
    \      result.push(max);\n    }\n    return result;\n}\n\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "  return numbers.map((_, i) => {\n    const part = numbers.slice(0,\
    \ i + 1);\n    return Math.max(...part);\n  });\n}\n", "    let result: number[]\
    \ = [];\n    let max: number = numbers[0];\n    result.push(max);\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        let number: number = numbers[i];\n\
    \        if (number > max) {\n            max = number;\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var out: number[] = [];\n    if (numbers.length\
    \ > 0) {\n        var max_so_far = numbers[0];\n        out.push(max_so_far);\n\
    \        for (var i = 1; i < numbers.length; i++) {\n            if (numbers[i]\
    \ > max_so_far) {\n                max_so_far = numbers[i];\n            }\n \
    \           out.push(max_so_far);\n        }\n    }\n    return out;\n}\n", " \
    \   let result: number[] = [];\n    let max = numbers[0];\n    result.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "  let rmax: number[] = []\n  let rmax_e: number\
    \ = 0\n  for (let i: number = 0; i < numbers.length; i++) {\n    rmax_e = Math.max(rmax_e,\
    \ numbers[i])\n    rmax.push(rmax_e)\n  }\n  return rmax\n}\n", "    const result:\
    \ number[] = []\n    const clone = numbers.slice()\n    for (let index = 0; index\
    \ < numbers.length; index++) {\n        const current = numbers[index]\n     \
    \   clone.splice(0, index)\n        result.push(Math.max(...clone))\n    }\n \
    \   return result\n}\n", "    let result: number[] = [];\n    let max: number\
    \ = numbers[0];\n    result.push(max);\n    for (let index = 1; index < numbers.length;\
    \ index++) {\n        if (numbers[index] > max) {\n            max = numbers[index];\n\
    \        }\n        result.push(max);\n    }\n    return result;\n}\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "  if (numbers.length === 0) {\n    return [];\n  }\n\
    \  let max = numbers[0];\n  let result = [max];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "    if (numbers.length === 0) {\n        return\
    \ [];\n    }\n    let result: number[] = [];\n    let current_max = numbers[0];\n\
    \    result.push(current_max);\n    for (let index = 1; index < numbers.length;\
    \ index++) {\n        let num = numbers[index];\n        if (num > current_max)\
    \ {\n            current_max = num;\n        }\n        result.push(current_max);\n\
    \    }\n    return result;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n\
    console.log(rolling_max([2, 3, 2, 3, 4, 2]));\nconsole.log(rolling_max([3, 2,\
    \ 3, 4, 2]));\nconsole.log(rolling_max([2, 3, 4, 2]));\nconsole.log(rolling_max([3,\
    \ 4, 2]));\nconsole.log(rolling_max([4, 2]));\nconsole.log(rolling_max([2]));\n\
    console.log(rolling_max([]));", "    const maxes: number[] = [];\n    let currentMax\
    \ = numbers[0];\n    maxes.push(currentMax);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n        maxes.push(currentMax);\n    }\n    return maxes;\n}\n", " \
    \   if (numbers.length === 0) {\n        return [];\n    }\n\n    let result:\
    \ number[] = [];\n    let current_max = numbers[0];\n    result.push(current_max);\n\
    \n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > current_max)\
    \ {\n            current_max = numbers[i];\n        }\n        result.push(current_max);\n\
    \    }\n\n    return result;\n}\n", "    const result: number[] = [];\n    const\
    \ len = numbers.length;\n    for (let i = 0; i < len; i++) {\n        result.push(Math.max(...numbers.slice(0,\
    \ i + 1)));\n    }\n    return result;\n}\n", "    const output: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        const current = numbers[i];\n\
    \        const max = Math.max(...numbers.slice(0, i + 1));\n        output.push(max);\n\
    \    }\n    return output;\n}\n\n", "    const result: number[] = [numbers[0]];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        result.push(Math.max(result[i\
    \ - 1], numbers[i]));\n    }\n    return result;\n}\n", "    let max_left: number[]\
    \ = [];\n    max_left.push(numbers[0]);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max_left[i - 1]) {\n            max_left.push(numbers[i]);\n\
    \        } else {\n            max_left.push(max_left[i - 1]);\n        }\n  \
    \  }\n    return max_left;\n}\n", "  return numbers.map((num, i) => Math.max(...numbers.slice(0,\
    \ i + 1)));\n}\n", "    if (numbers.length === 0) {\n        return [];\n    }\n\
    \    const rolling_max = new Array(numbers.length);\n    rolling_max[0] = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        rolling_max[i] = Math.max(rolling_max[i\
    \ - 1], numbers[i]);\n    }\n    return rolling_max;\n}\n", "    return numbers.map((_,\
    \ i) => max(...numbers.slice(0, i + 1)));\n}\n", "  let maxSoFar = numbers[0];\n\
    \  return numbers.map(function(num) {\n    maxSoFar = Math.max(maxSoFar, num);\n\
    \    return maxSoFar;\n  });\n}\n", "    return numbers.map((n, i) => {\n    \
    \    return Math.max(...numbers.slice(0, i + 1));\n    });\n}\n", "    return\
    \ numbers.map((_, i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    let\
    \ sequence = [];\n    let sorted = numbers.sort((a, b) => a - b);\n    let max\
    \ = sorted[sorted.length - 1];\n    sequence.push(max);\n    for (let i = numbers.length\
    \ - 2; i >= 0; i--) {\n        if (numbers[i] >= max) {\n            max = numbers[i];\n\
    \        }\n        sequence.push(max);\n    }\n    return sequence.reverse();\n\
    }\n", "    return numbers.map((number, index) =>\n        index === 0 ? number\
    \ : Math.max(number, ...numbers.slice(0, index))\n    );\n}\n\ndescribe('rolling_max',\
    \ () => {\n    it('returns array of rolling maximum', () => {\n        expect(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])).toEqual([1, 2, 3, 3, 3, 4, 4]);\n    });\n});", "  let max:\
    \ number = 0;\n  const maxes: number[] = [];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    max = Math.max(max, numbers[i]);\n    maxes.push(max);\n  }\n  return\
    \ maxes;\n}", "    let maxes: number[] = [];\n    let currentMax = -1;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        let element = numbers[i];\n\
    \        if (element > currentMax) {\n            currentMax = element;\n    \
    \    }\n        maxes.push(currentMax);\n    }\n    return maxes;\n}\n", "   \
    \ let result: number[] = [];\n    let max: number = numbers[0];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    if (numbers === null || numbers.length === 0) {\n      \
    \  return [];\n    }\n    if (numbers.length === 1) {\n        return [numbers[0]];\n\
    \    }\n    let result: number[] = [numbers[0]];\n    let max: number = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n",
  "  return numbers.map((item, i) => {\n    return Math.max(...numbers.slice(0, i\
    \ + 1));\n  });\n}\n", "    const result: number[] = [];\n    let max = numbers[0];\n\
    \    result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n     \
    \   const number = numbers[i];\n        if (number > max) {\n            max =\
    \ number;\n        }\n        result.push(max);\n    }\n    return result;\n}\n",
  "    let max = null;\n    let result = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (max === null || numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n        result.push(max);\n    }\n    return result;\n}\n", "    return\
    \ numbers.map((number, index) => Math.max(...numbers.slice(0, index + 1)));\n\
    }\n", "    const result: number[] = [];\n    let max = 0;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max\
    \ = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let result: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    const rollingMax: number[] = [];\n    let currentMax = -1;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n        }\n        rollingMax.push(currentMax);\n\
    \    }\n    return rollingMax;\n}\n", "    const result: number[] = [];\n    let\
    \ max = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    const results: number[] = [];\n    const\
    \ length = numbers.length;\n    let max = numbers[0];\n    results.push(max);\n\
    \    for (let i = 1; i < length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        results.push(max);\n    }\n    return results;\n}\n\n", "    const max:\
    \ number[] = [];\n    let currentMax = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > currentMax) {\n            currentMax = numbers[i];\n\
    \        }\n        max.push(currentMax);\n    }\n    return max;\n}\n", "   \
    \ const ret = [];\n    let max = -Infinity;\n    for (const num of numbers) {\n\
    \        max = Math.max(max, num);\n        ret.push(max);\n    }\n    return\
    \ ret;\n}\n", "    let result: number[] = [];\n    let length = numbers.length;\n\
    \    let current = 0;\n    while (current < length) {\n        result.push(Math.max(...numbers.slice(0,\
    \ current + 1)));\n        current++;\n    }\n    return result;\n}\n\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "    const maxArray: number[] = [numbers[0]];\n   \
    \ for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > maxArray[i\
    \ - 1]) {\n            maxArray.push(numbers[i]);\n        } else {\n        \
    \    maxArray.push(maxArray[i - 1]);\n        }\n    }\n    return maxArray;\n\
    }\n", "  const maxes: number[] = [];\n  let maxSoFar = numbers[0];\n  maxes.push(maxSoFar);\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > maxSoFar)\
    \ {\n      maxSoFar = numbers[i];\n    }\n    maxes.push(maxSoFar);\n  }\n  return\
    \ maxes;\n}\n", "    return undefined;\n}\n", "    let max: number = numbers[0];\n\
    \    let result: number[] = [max];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        max = numbers[i] > max ? numbers[i] : max;\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n",
  "  if (numbers.length === 0) {\n    return [];\n  }\n\n  let max = numbers[0];\n\
    \  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n", "    const length = numbers.length;\n    const result = [];\n\
    \    let max = -Infinity;\n    for (let i = 0; i < length; i++) {\n        max\
    \ = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n\
    }\n", "  const result: number[] = [];\n  let max: number = numbers[0];\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max\
    \ = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n}\n", " \
    \   return numbers.map((x, i) => Math.max(...numbers.slice(0, i+1)));\n}\n", " \
    \ return numbers.map((_, i) => numbers.slice(0, i + 1).reduce((a, b) => Math.max(a,\
    \ b)));\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    let answer:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        answer.push(Math.max(...numbers.slice(0,\
    \ i + 1)));\n    }\n    return answer;\n}\n\nlet arr = [1, 2, 3, 2, 3, 4, 2];\n\
    let rollingMax = rolling_max(arr);\nconsole.log(rollingMax);\n", "    const result:\
    \ number[] = [];\n    let maxNumber = -Infinity;\n    for (let number of numbers)\
    \ {\n        maxNumber = Math.max(maxNumber, number);\n        result.push(maxNumber);\n\
    \    }\n    return result;\n}\n", "  return numbers.map((_, index) => Math.max(...numbers.slice(0,\
    \ index)));\n}\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    if (!numbers\
    \ || numbers.length === 0) {\n        return [];\n    }\n    let maxElem = numbers[0];\n\
    \    let maxArr = [maxElem];\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] > maxElem) {\n            maxElem = numbers[i];\n    \
    \    }\n        maxArr.push(maxElem);\n    }\n    return maxArr;\n}\n", "  var\
    \ result: number[] = []\n  var max = numbers[0]\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    max = Math.max(max, numbers[i])\n    result.push(max)\n  }\n  return\
    \ result\n}\n", "  const list = [];\n  let max = numbers[0];\n  list.push(max);\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     max = numbers[i];\n    }\n    list.push(max);\n  }\n  return list;\n}\n",
  "    let result: number[] = [numbers[0]];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        result.push(Math.max(result[i - 1], numbers[i]));\n    }\n \
    \   return result;\n}\n", "    let result: number[] = [];\n    let currentMax:\
    \ number = numbers[0];\n    result.push(currentMax);\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] > currentMax) {\n           \
    \ currentMax = numbers[i];\n        }\n        result.push(currentMax);\n    }\n\
    \    return result;\n}\n", "  let result: number[] = [];\n  let maxValue: number\
    \ = numbers[0];\n  result.push(maxValue);\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    maxValue = Math.max(maxValue, numbers[i]);\n    result.push(maxValue);\n\
    \  }\n  return result;\n}\n", "    var max_arr: number[] = [];\n    for (var i\
    \ = 0; i < numbers.length; i++) {\n        max_arr.push(Math.max.apply(null, numbers.slice(0,\
    \ i + 1)));\n    }\n    return max_arr;\n}\n", "  return numbers.map((_, i) =>\
    \ Math.max(...numbers.slice(0, i + 1)));\n}\n", "  let result: number[] = [numbers[0]];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    result.push(Math.max(result[i\
    \ - 1], numbers[i]));\n  }\n  return result;\n}\n", "    if (!numbers.length)\
    \ {\n        return [];\n    }\n    let max = numbers[0];\n    let result = [max];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        result.push(max);\n   \
    \ }\n    return result;\n}\n", "    const maxes: number[] = [];\n    let currentMax\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > currentMax) {\n            currentMax = numbers[i];\n        }\n        maxes.push(currentMax);\n\
    \    }\n    return maxes;\n}\n", "    if (numbers.length === 0) {\n        return\
    \ [];\n    }\n    const result: number[] = [numbers[0]];\n    let max = numbers[0];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n\
    \        result.push(max);\n    }\n    return result;\n}\n", "    const max_sums:\
    \ number[] = [];\n    let max_sum: number = 0;\n    numbers.forEach(el => {\n\
    \        max_sum = Math.max(max_sum, el);\n        max_sums.push(max_sum);\n \
    \   });\n    return max_sums;\n}\n", "  return [numbers[0]];\n}\n", "  const result:\
    \ number[] = [];\n  let maximumSoFar = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    const num = numbers[i];\n    if (num > maximumSoFar) {\n      maximumSoFar\
    \ = num;\n    }\n    result.push(maximumSoFar);\n  }\n  return result;\n}\n",
  "    if (!numbers || numbers.length === 0) {\n        return [];\n    }\n    let\
    \ result: number[] = [];\n    let currentMax = numbers[0];\n    result.push(currentMax);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            currentMax = numbers[i];\n        }\n        result.push(currentMax);\n\
    \    }\n    return result;\n}\n", "  let results: number[] = [];\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    const current_number = numbers[i];\n  \
    \  let max_so_far = current_number;\n    for (let j = 0; j <= i; j++) {\n    \
    \  const num = numbers[j];\n      if (num > max_so_far) {\n        max_so_far\
    \ = num;\n      }\n    }\n    results.push(max_so_far);\n  }\n  return results;\n\
    }\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 1, 2]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5]));\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 5, 6]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5, 6, 7]));\n\
    console.log(rolling_max([1, 2, 3, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14]));\nconsole.log(rolling", "  let result: number[] = [];\n  if (numbers.length\
    \ > 0) {\n    result.push(numbers[0]);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n      if (numbers[i] > result[i - 1]) {\n        result.push(numbers[i]);\n\
    \      } else {\n        result.push(result[i - 1]);\n      }\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "    let\
    \ max = numbers[0];\n    let out: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        out.push(max);\n    }\n    return out;\n}\n", "    return numbers.map((n,\
    \ i) => Math.max(...numbers.slice(0, i+1)));\n}\n\nrolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]);\n", "  return numbers.map((x, index) => Math.max(...numbers.slice(0,\
    \ index + 1)));\n}\n", "    const rolling_max = [numbers[0]];\n    for (let i\
    \ = 1; i < numbers.length; i++) {\n        rolling_max.push(Math.max(rolling_max[i\
    \ - 1], numbers[i]));\n    }\n    return rolling_max;\n}\n", "  return numbers.map((_,\
    \ i) => Math.max(...numbers.slice(0, i + 1)));\n}\n", "  return numbers.map((number,\
    \ index) => {\n    return Math.max(...numbers.slice(0, index+1));\n  });\n}\n",
  "    const maxValue: number[] = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        maxValue.push(Math.max(...numbers.slice(0, i + 1)));\n    }\n   \
    \ return maxValue;\n}\n", "    return [];\n}\n", "    let result: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        let maximum = numbers[i];\n\
    \        for (let j = 0; j <= i; j++) {\n            if (numbers[j] > maximum)\
    \ {\n                maximum = numbers[j];\n            }\n        }\n       \
    \ result.push(maximum);\n    }\n    return result;\n}\n", "    return numbers.map((e,\
    \ i) => {\n        let max = e;\n        if (i == 0) return max;\n        let\
    \ prevElements = numbers.slice(0, i);\n        prevElements.forEach(e => {\n \
    \           if (e > max) max = e;\n        });\n        return max;\n    });\n\
    }\n", "    let output: number[] = [];\n    let max: number = 0;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        output.push(max);\n    }\n    return\
    \ output;\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "  return\
    \ [...numbers].map((e, i, arr) => arr.slice(0, i + 1).reduce((a, b) => Math.max(a,\
    \ b)));\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "    return numbers.map((number,\
    \ index) => {\n        return Math.max(...numbers.slice(0, index+1));\n    });\n\
    }\n", "    return numbers.map((v, i) => {\n        return numbers.slice(0, i +\
    \ 1).reduce((acc, num) => {\n            return acc < num ? num : acc;\n     \
    \   }, 0);\n    });\n}\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2, 2, 3, 4, 5, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3,", "    return numbers.map((v, i) => Math.max(...numbers.slice(0, i + 1)));\n\
    }\n\nlet test = (x: number[]) => console.log(`${x} -> ${rolling_max(x)}`);\n\n\
    test([1, 2, 3, 2, 3, 4, 2]);\ntest([1, 2, 3, 4, 5, 6, 7]);\ntest([10, 100, 1000,\
    \ 10000, 100000, 1000000, 10000000]);\ntest([1, 1, 1, 1, 1, 1, 1]);\ntest([1,\
    \ 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]);\ntest([0, 2, -3, 4, 5, -6, 7, 6, -5, 4,\
    \ -3, 2, 1]);\ntest([0, 2, -3, 4, 5, -6, 7, 6, -5, 4, -3, 2, 1, 0, 2, -3, 4, 5,\
    \ -6, 7, 6, -5, 4, -3, 2, 1]);\ntest([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 1,\
    \ 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]);\ntest([0, 2, -3, 4, 5, -6, 7, 6, -5, 4,\
    \ -3, 2, 1, 0, 2, -3, 4, 5, -6, 7, 6, -5, 4, -3, 2, 1, 0, 2, -3, 4, 5, -6, 7,\
    \ 6, -5, 4, -3, 2, 1]);\ntest([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3,\
    \ 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]);\ntest([0,\
    \ 2, -3, 4, 5, -6, 7, 6, -5, 4", "    let result: number[] = [];\n    let max:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        max = numbers[i]\
    \ > max ? numbers[i] : max;\n        result.push(max);\n    }\n    return result;\n\
    }\n\nlet result = rolling_max([1, 2, 3, 2, 3, 4, 2]);\nconsole.log(\"Rolling max:\
    \ \" + result);\n", "    var maximums: number[] = [];\n    for (var i = 0; i <\
    \ numbers.length; i++) {\n        var current = numbers[i];\n        var lastMax\
    \ = maximums[i - 1] || current;\n        maximums.push(Math.max(current, lastMax));\n\
    \    }\n    return maximums;\n}\n", "    return numbers.map((number, i) => {\n\
    \        const rollingMax = Math.max(...numbers.slice(0, i + 1));\n        return\
    \ rollingMax;\n    });\n}\n", "    let result: number[] = [];\n    let max_so_far:\
    \ number = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   max_so_far = Math.max(max_so_far, numbers[i]);\n        result.push(max_so_far);\n\
    \    }\n    return result;\n}\n", "    let result: number[] = [];\n    if (numbers.length\
    \ == 0) {\n        return result;\n    }\n    let maxValue: number = numbers[0];\n\
    \    result.push(maxValue);\n    for (let i = 1; i < numbers.length; i++) {\n\
    \        if (numbers[i] > maxValue) {\n            maxValue = numbers[i];\n  \
    \      }\n        result.push(maxValue);\n    }\n    return result;\n}\n", " \
    \   let result: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (i == 0) {\n            result.push(numbers[i]);\n        } else {\n\
    \            if (numbers[i] > result[i - 1]) {\n                result.push(numbers[i]);\n\
    \            } else {\n                result.push(result[i - 1]);\n         \
    \   }\n        }\n    }\n    return result;\n}", "    return numbers.map((_, i)\
    \ => Math.max(...numbers.slice(0, i + 1)));\n}\n", "    let max = numbers[0];\n\
    \    let result = [max];\n    for (let i = 1; i < numbers.length; i++) {\n   \
    \     if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    \
    \    result.push(max);\n    }\n    return result;\n}\n", "    var maxes: number[]\
    \ = [];\n    maxes.push(numbers[0]);\n    for (var i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > maxes[i - 1]) {\n            maxes.push(numbers[i]);\n\
    \        } else {\n            maxes.push(maxes[i - 1]);\n        }\n    }\n \
    \   return maxes;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
