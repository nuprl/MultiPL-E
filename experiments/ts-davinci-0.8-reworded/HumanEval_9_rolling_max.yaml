name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["    let max = numbers[0];\n    let result = new Array(numbers.length);\n\
    \    result[0] = max;\n    for (let i = 1; i < numbers.length; i++) {\n      \
    \  if (numbers[i] > max) {\n            max = numbers[i];\n        }\n       \
    \ result[i] = max;\n    }\n    return result;\n}\n", "    const result: number[]\
    \ = [];\n    numbers.forEach((number, i) => {\n        result.push(Math.max(...numbers.slice(0,\
    \ i + 1)));\n    });\n    return result;\n}\n", "    let maxArray: number[] =\
    \ [];\n    let max: number = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        maxArray.push(max);\n    }\n    return maxArray;\n}\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "  return numbers.map((_, i) => Math.max(...numbers.slice(0,\
    \ i + 1)));\n}\n", "  const res: number[] = [];\n  let max = -Infinity;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max\
    \ = numbers[i];\n    }\n    res.push(max);\n  }\n  return res;\n}\n", "  let ret:\
    \ number[] = [];\n  let max = -Infinity;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    max = Math.max(max, numbers[i]);\n    ret.push(max);\n  }\n  return\
    \ ret;\n}\n", "    let max: number = numbers[0];\n    let rolling_maximum: number[]\
    \ = [max];\n    for (let i = 1; i < numbers.length; i++) {\n        max = Math.max(max,\
    \ numbers[i]);\n        rolling_maximum.push(max);\n    }\n    return rolling_maximum;\n\
    }\n", "    let maxs: number[] = [];\n    let max = numbers[0];\n    maxs.push(max);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n        }\n        maxs.push(max);\n    }\n\
    \    return maxs;\n}\n\nlet numbers: number[] = [1, 2, 3, 2, 3, 4, 2];\nlet maxs:\
    \ number[] = rolling_max(numbers);\nconsole.log(maxs);\n", "    return numbers.map((number,\
    \ index) => Math.max(...numbers.slice(0, index + 1)));\n}\n", "    const maxes:\
    \ number[] = [];\n    let max = numbers[0];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        max = Math.max(max, numbers[i]);\n        maxes.push(max);\n\
    \    }\n    return maxes;\n}\n", "    let result: number[] = [];\n    let max\
    \ = -Infinity;\n    for (let index = 0; index < numbers.length; index++) {\n \
    \       if (numbers[index] > max) {\n            max = numbers[index];\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "  let result:\
    \ number[] = [];\n  if (numbers.length > 0) {\n    let max = numbers[0];\n   \
    \ result.push(max);\n    for (let i = 1; i < numbers.length; i++) {\n      if\
    \ (numbers[i] > max) {\n        max = numbers[i];\n      }\n      result.push(max);\n\
    \    }\n  }\n  return result;\n}\n", "    let result: number[] = [numbers[0]];\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > result[i\
    \ - 1]) {\n            result.push(numbers[i]);\n        } else {\n          \
    \  result.push(result[i - 1]);\n        }\n    }\n    return result;\n}\n", " \
    \ const result: number[] = [];\n  let max = -Infinity;\n  for (const item of numbers)\
    \ {\n    max = Math.max(max, item);\n    result.push(max);\n  }\n  return result;\n\
    }\n", "    const result: number[] = [];\n    let max_number = 0;\n    numbers.forEach(\
    \ (number) => {\n        if (number > max_number) {\n            max_number =\
    \ number;\n        }\n        result.push(max_number);\n    });\n    return result;\n\
    }\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, -1]));\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 5]));", " \
    \   if (!Array.isArray(numbers)) throw new Error('Invalid input');\n    if (numbers.length\
    \ === 0) return [];\n    if (numbers.length === 1) return [numbers[0]];\n\n  \
    \  let result: number[] = [numbers[0]];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        result.push(Math.max(result[i - 1], numbers[i]));\n    }\n \
    \   return result;\n}\n", "    let max: number = numbers[0];\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(max);\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \   }\n    return result;\n}\n", "    const result: number[] = [];\n    let maxElement\
    \ = numbers[0];\n    result.push(maxElement);\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > maxElement) {\n            maxElement = numbers[i];\n\
    \        }\n        result.push(maxElement);\n    }\n    return result;\n}\n",
  "    return [];\n}\n", "    let max_elements: number[] = [];\n    let max_so_far:\
    \ number = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        max_so_far\
    \ = Math.max(max_so_far, numbers[i]);\n        max_elements.push(max_so_far);\n\
    \    }\n    return max_elements;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
