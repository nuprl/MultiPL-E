language: ts
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(Number.isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && isFinite(value));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp1ijhs_d8.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1ijhs_d8.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(element\
    \ => (typeof element) === \"number\" && Number.isInteger(element));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < values.length; i++) {\n    let x = values[i];\n\
    \    if (typeof x === \"number\" && x >= 0 && x === Math.round(x)) {\n      result.push(x);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let result\
    \ = values.filter(function(value) {\n    return typeof value === \"number\" &&\
    \ !isNaN(value);\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmppcxe3g_q.js:16:12)\n\
    \    at Object.<anonymous> (/tmp/tmppcxe3g_q.js:19:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        let cur:\
    \ any = values[i];\n        if (typeof cur === \"number\" && (cur % 1) === 0)\
    \ {\n            result.push(cur);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(value)\
    \ {\n    return typeof value === \"number\" && value % 1 === 0;\n  });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let filtered:\
    \ number[] = [];\n    for (let i: number = 0; i < values.length; i++) {\n    \
    \    if (typeof values[i] === \"number\") {\n            filtered.push(values[i]);\n\
    \        }\n    }\n    return filtered;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpaybc9an2.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaybc9an2.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332664
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmplhcflasd.ts(7,26): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const numbers:\
    \ number[] = values.filter(value => isFinite(value) && !isNaN(value));\n    return\
    \ numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  [],\n\
    \  23.2,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test\
    \ (/tmp/tmpiv_89l5d.js:14:12)\n    at Object.<anonymous> (/tmp/tmpiv_89l5d.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, [], 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(n\
    \ => Number.isInteger(n));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && Number.isInteger(value);\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && !Number.isNaN(value));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpgc0x_byi.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgc0x_byi.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(item\
    \ => item === parseInt(item, 10));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332665
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let integers:\
    \ number[] = [];\n    values.forEach(element => {\n        if (typeof element\
    \ === \"number\" && !isNaN(element))\n            integers.push(element);\n  \
    \  });\n    return integers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmputsns8f1.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmputsns8f1.js:21:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332665
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmprz74qzqo.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmprz74qzqo.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    //return\
    \ values.filter(i => Number.isInteger(i));\n    return values.filter(Number.isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && Number.isInteger(v));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  const newArray:\
    \ number[] = [];\n  for (let index = 0; index < values.length; index++) {\n  \
    \  if (Number.isInteger(values[index])) {\n      newArray.push(values[index]);\n\
    \    }\n  }\n  return newArray;\n}\nconsole.log(filter_integers([\"a\", 3.14,\
    \ 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332665
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(value)\
    \ {\n    return typeof value === \"number\" && value === parseInt(value.toString(),\
    \ 10);\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332665
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpdfprdxmq.ts(7,35): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\
    \ value => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let intArray:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            intArray.push(values[i]);\n       \
    \ }\n    }\n    return intArray;\n}\nconsole.log(filter_integers([\"a\", 3.14,\
    \ 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpekmt3kf8.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpekmt3kf8.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3.14, 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332665
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let ints:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof(values[i])\
    \ === \"number\") {\n            ints.push(values[i]);\n        }\n    }\n   \
    \ return ints;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp2te853v3.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2te853v3.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332665
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\n\
    \        (item) => {\n            return typeof item === \"number\" && !isNaN(item);\n\
    \        }\n    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpcaydklom.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcaydklom.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let filtered:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            filtered.push(values[i]);\n       \
    \ }\n    }\n    return filtered;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpyl6r_nzo.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl6r_nzo.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332665
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let intArray:\
    \ number[] = [];\n    for (let i: number = 0; i < values.length; i++) {\n    \
    \    if (Number.isInteger(values[i])) {\n            intArray.push(values[i]);\n\
    \        }\n    }\n    return intArray;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbh79f3i7.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332565
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpr_ti13pn.ts(7,24): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332670
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  const array:\
    \ number[] = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof\
    \ values[i] === \"number\") {\n      array.push(values[i]);\n    }\n  }\n  return\
    \ array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmphp_anh80.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmphp_anh80.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const isInteger\
    \ = (n: any): boolean => {\n        return typeof n === \"number\" && Number.isInteger(n);\n\
    \    };\n    return values.filter(isInteger);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(val\
    \ => typeof val === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpsfbqy1s0.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsfbqy1s0.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value: any): boolean {\n        return typeof value === \"number\" && !isNaN(value);\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp_04_keou.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_04_keou.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(i\
    \ => typeof i === \"number\" && isFinite(i));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpbwcr3feb.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbwcr3feb.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332672
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < values.length; i++) {\n    if (Number.isInteger(values[i]))\
    \ {\n      result.push(values[i]);\n    }\n  }\n  return result;\n}\n\nlet numbers:\
    \ number[] = [1, 2, 3, \"abc\", {}, []];\nconsole.log(filter_integers(numbers));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4t0bm8oj.ts(16,35): error TS2322: Type ''string'' is
    not assignable to type ''number''.

    ../../../../tmp/tmp4t0bm8oj.ts(16,42): error TS2322: Type ''{}'' is not assignable
    to type ''number''.

    ../../../../tmp/tmp4t0bm8oj.ts(16,46): error TS2322: Type ''[]'' is not assignable
    to type ''number''.

    '
  timestamp: 1660332671
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_number);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp4vl4whfe.ts(7,26): error TS2304: Cannot find name ''is_number''.

    '
  timestamp: 1660332671
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return filter(values,\
    \ is_integer);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0vts09t7.ts(7,10): error TS2552: Cannot find name ''filter''.
    Did you mean ''File''?

    ../../../../tmp/tmp0vts09t7.ts(7,25): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let value of values) {\n        if (typeof value ===\
    \ \"number\" && isFinite(value)) {\n            result.push(value);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpf20kzg9q.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf20kzg9q.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(n\
    \ => typeof n === \"number\" && n % 1 === 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp2e_k6vk8.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2e_k6vk8.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let filtered\
    \ = [];\n    for (let value of values) {\n        if (typeof value === \"number\"\
    \ && value % 1 === 0) {\n            filtered.push(value);\n        }\n    }\n\
    \    return filtered;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332672
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\
    \ (v) => typeof v === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp3avhfy4l.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3avhfy4l.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(n\
    \ => Number.isInteger(n));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && !Number.isNaN(value));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpgc0x_byi.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgc0x_byi.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const integer\
    \ = [];\n    for (let v of values) {\n        if (typeof v === \"number\" && Number.isInteger(v))\
    \ {\n            integer.push(v);\n        }\n    }\n    return integer;\n}\n\
    console.log(filter_integers([\"a\", 3.14, 5]));\nconsole.log(filter_integers([1,\
    \ 2, 3, \"abc\", {}, []]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332672
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    var result:\
    \ number[] = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            result.push(values[i]);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpfq6yd4kh.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfq6yd4kh.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp34to7q4z.ts(7,24): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(value)\
    \ {\n    return typeof value === \"number\" && !isNaN(value);\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpe1yjufju.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe1yjufju.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332672
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let res\
    \ = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof values[i]\
    \ === \"number\") {\n            res.push(values[i]);\n        }\n    }\n    return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpxi7icc8w.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxi7icc8w.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let new_list:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ (values[i]) === \"number\") {\n            new_list.push(values[i]);\n     \
    \   }\n    }\n    return new_list;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpffe102ad.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpffe102ad.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332672
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && !isNaN(value) && value === Math.round(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332672
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(x\
    \ => typeof x === \"number\" && (x % 1 === 0));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332672
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let filtered:\
    \ number[] = [];\n  values.forEach(value => {\n    if (typeof value === \"number\"\
    \ && value % 1 === 0) {\n      filtered.push(value);\n    }\n  });\n  return filtered;\n\
    }\nconsole.log(filter_integers([\"a\", 3.14, 5]));\nconsole.log(filter_integers([1,\
    \ 2, 3, \"abc\", {}, []]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332672
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let arr:\
    \ number[] = [];\n    for (let value of values) {\n        if (typeof value ===\
    \ \"number\" && value % 1 === 0) {\n            arr.push(value);\n        }\n\
    \    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332677
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(element\
    \ => typeof element === \"number\" && element % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332677
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let result:\
    \ number[] = [];\n  values.forEach(element => {\n    if (typeof element === \"\
    number\" && isFinite(element)) {\n      result.push(element);\n    }\n  });\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp5nzuskuv.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5nzuskuv.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332678
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value))\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(val\
    \ => typeof val === \"number\" && val.toString().indexOf(\".\") === -1);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332677
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(\
    \ (x) => typeof x === \"number\" );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpr4cpvdch.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr4cpvdch.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332678
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpx24ribbq.ts(7,33): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332677
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let numbers:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            numbers.push(values[i]);\n        }\n\
    \    }\n    return numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpbqnlq8b9.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbqnlq8b9.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332678
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbh79f3i7.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332565
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbh79f3i7.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && Number.isInteger(v));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let integers:\
    \ number[] = [];\n    for (let value of values) {\n        if (typeof value ===\
    \ \"number\" && Number.isInteger(value)) {\n            integers.push(value);\n\
    \        }\n    }\n    return integers;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(item\
    \ => typeof item === \"number\" && (item % 1) === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp34to7q4z.ts(7,24): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(x\
    \ => typeof x === \"number\" && !isNaN(x));\n}\nconsole.log(filter_integers([\"\
    a\", 3.14, 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp7qphjpz3.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7qphjpz3.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3.14, 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332678
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmplhcflasd.ts(7,26): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const numbers\
    \ = [];\n    for (const value of values) {\n        if (typeof value === \"number\"\
    \ && value === parseInt(value.toString())) {\n            numbers.push(value);\n\
    \        }\n    }\n    return numbers;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const a:\
    \ any[] = [];\n    values.forEach(function (value) {\n        if (typeof value\
    \ === \"number\" && value % 1 === 0) {\n            a.push(value);\n        }\n\
    \    });\n    return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < values.length; i++) {\n    if (typeof\
    \ values[i] === \"number\") {\n      result.push(values[i]);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpwcych5h_.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwcych5h_.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332679
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbh79f3i7.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(x\
    \ => x === Math.floor(x));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(item\
    \ => {\n    if (typeof item === \"number\") {\n      return item;\n    }\n  });\n\
    }\nconsole.log(filter_integers([\"a\", 3.14, 5]));\nconsole.log(filter_integers([1,\
    \ 2, 3, \"abc\", {}, []]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp4bqb07nw.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4bqb07nw.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3.14, 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332679
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  // Write code\
    \ here\n  return values.filter(x => typeof x === \"number\" && !isNaN(x));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpzto_8o4d.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzto_8o4d.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332678
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332678
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\
    \ (value) => typeof value === \"number\" && value%1 === 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332679
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(val\
    \ => typeof val === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpsfbqy1s0.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsfbqy1s0.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmprz74qzqo.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmprz74qzqo.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && Math.floor(value) ===\
    \ value;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332679
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(v\
    \ => Number.isInteger(v))\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332679
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const numbers\
    \ = [];\n    for (const value of values) {\n        if (typeof value === \"number\"\
    \ && !isNaN(value)) {\n            numbers.push(value);\n        }\n    }\n  \
    \  return numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpjotqtpg2.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjotqtpg2.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332679
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\n\
    \        (value: any) => typeof value === \"number\" && Number.isInteger(value)\n\
    \    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332679
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp2e_k6vk8.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2e_k6vk8.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const integers\
    \ = [];\n    for (let i = 0; i < values.length; i++) {\n        if (Number.isInteger(values[i]))\
    \ {\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332684
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let numbers:\
    \ number[] = []\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            numbers.push(values[i])\n        }\n\
    \    }\n    return numbers\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpv2xl50vn.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv2xl50vn.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332684
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  // your code\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpod2l0q1h.ts(6,42): error TS2355: A function whose declared
    type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660332683
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => Number.isInteger(v));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332684
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let integers\
    \ = [];\n  values.forEach(function(value) {\n    if (typeof value === \"number\"\
    \ && Number.isInteger(value)) {\n      integers.push(value);\n    }\n  });\n \
    \ return integers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let temp:\
    \ any[] = [];\n    for (let value of values) {\n        if (typeof value === \"\
    number\" && !isNaN(value)) {\n            temp.push(value);\n        }\n    }\n\
    \    return temp;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp3wlho0ts.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3wlho0ts.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && value % 1 === 0);\n}\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  //filter array\
    \ of values to only include integers\n  return values.filter(value => {\n    return\
    \ Number.isInteger(value);\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let integers:\
    \ number[] = [];\n    values.forEach(val => {\n        if (Number.isInteger(val))\
    \ {\n            integers.push(val);\n        }\n    });\n    return integers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let integers:\
    \ number[] = []\n    for (let value of values) {\n        if (Number.isInteger(value))\
    \ {\n            integers.push(value)\n        }\n    }\n    return integers\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value: any): boolean {\n        return typeof value === \"number\" && value\
    \ === Math.round(value);\n    });\n}\n\nconsole.log(filter_integers([\"a\", 3.14,\
    \ 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => {\n        return Number.isInteger(value);\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(isInt);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpb5iyo5s9.ts(7,26): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    var result\
    \ = [];\n    values.forEach(element => {\n        if (typeof element === \"number\"\
    \ && (element % 1 === 0)) {\n            result.push(element);\n        }\n  \
    \  });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp2e_k6vk8.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2e_k6vk8.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmprz74qzqo.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmprz74qzqo.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmprz74qzqo.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmprz74qzqo.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let integers:\
    \ number[] = [];\n  for (let index in values) {\n    if (typeof values[index]\
    \ === \"number\") {\n      integers.push(values[index]);\n    }\n  }\n  return\
    \ integers;\n}\n\nconsole.log(filter_integers([\"a\", 3.14, 5]));\nconsole.log(filter_integers([1,\
    \ 2, 3, \"abc\", {}, []]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpcx2fnbvo.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcx2fnbvo.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3.14, 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  const integers\
    \ = values.filter(function(value) {\n    return Number.isInteger(value);\n  });\n\
    \  return integers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let integers:\
    \ number[] = [];\n  values.forEach(value => {\n    if (typeof value === \"number\"\
    \ && value % 1 === 0) {\n      integers.push(value);\n    }\n  });\n  return integers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332686
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && Number.isInteger(value);\n\
    \    });\n}\nconsole.log(filter_integers([\"a\", 3.14, 5]));\nconsole.log(filter_integers([1,\
    \ 2, 3, \"abc\", {}, []]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332686
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && v === Math.round(v));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(v\
    \ => Number.isInteger(v));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  const result:\
    \ number[] = [];\n  for (const el of values) {\n    if (typeof el === \"number\"\
    \ && Number.isInteger(el)) {\n      result.push(el);\n    }\n  }\n  return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value) {\n        return typeof (value) === \"number\" && value % 1 === 0;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332685
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value: any): boolean {\n        return typeof value === \"number\" && !isNaN(value);\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp_04_keou.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_04_keou.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332671
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(val\
    \ => typeof val === \"number\" && !isNaN(val));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpzsyg3l3e.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzsyg3l3e.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332686
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const result:\
    \ number[] = [];\n    for (const value of values) {\n        if (typeof value\
    \ === \"number\" && Number.isInteger(value)) {\n            result.push(value);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(filter_integers([\"a\"\
    , 3.14, 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332690
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let nums:\
    \ number[] = [];\n    for (let i: number = 0; i < values.length; i++) {\n    \
    \    if (isInteger(values[i])) {\n            nums.push(values[i]);\n        }\n\
    \    }\n    return nums;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpgw787zz5.ts(9,13): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332690
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let numbers\
    \ = values.filter(value => typeof value === \"number\");\n    let integers = numbers.filter(value\
    \ => Number.isInteger(value));\n    return integers;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332691
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const nums:\
    \ number[] = [];\n    values.forEach(value => {\n        if (typeof value ===\
    \ \"number\" && Number.isInteger(value)) {\n            nums.push(value);\n  \
    \      }\n    });\n    return nums;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332691
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => {\n        return typeof v === \"number\" && Number.isInteger(v);\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332691
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(x\
    \ => typeof x === \"number\" && Number.isInteger(x));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value: any): boolean {\n        return Number.isInteger(value);\n    });\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  //TODO\n \
    \ return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpn07ydmgp.js:13:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpn07ydmgp.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(v\
    \ => typeof v === \"number\" && Number.isInteger(v));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const intArray:\
    \ number[] = [];\n    values.forEach(item => {\n        if (typeof item === \"\
    number\" && !isNaN(item)) {\n            intArray.push(item);\n        }\n   \
    \ });\n    return intArray;\n}\nconsole.log(filter_integers([\"a\", 3.14, 5]));\n\
    console.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpn72kygfo.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn72kygfo.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3.14, 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332692
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(x\
    \ => typeof x === \"number\");\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpt5ztur8j.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt5ztur8j.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let nums:\
    \ number[] = [];\n    for (let value of values) {\n        if (typeof value ===\
    \ \"number\" && Number.isInteger(value)) {\n            nums.push(value);\n  \
    \      }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let a: number[]\
    \ = [];\n    values.forEach(function (value: any): void {\n        if (typeof\
    \ value === \"number\" && Math.trunc(value) === value) {\n            a.push(value);\n\
    \        }\n    });\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(val\
    \ => typeof val === \"number\" && val === Math.floor(val));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(value)\
    \ {\n    return typeof value === \"number\" && value % 1 === 0;\n  });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  const result:\
    \ number[] = [];\n  for (const value of values) {\n    if (typeof value === \"\
    number\" && Number.isInteger(value)) {\n      result.push(value);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && !isNaN(v) && v % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return filter(values,\
    \ is_integer);\n}\n\nexport {sum, filter, is_positive, is_even, is_zero, is_integer,\
    \ filter_integers};\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpyk4i6npo.ts(7,12): error TS2552: Cannot find name ''filter''.
    Did you mean ''File''?

    ../../../../tmp/tmpyk4i6npo.ts(7,27): error TS2304: Cannot find name ''is_integer''.

    ../../../../tmp/tmpyk4i6npo.ts(10,9): error TS2304: Cannot find name ''sum''.

    ../../../../tmp/tmpyk4i6npo.ts(10,14): error TS2552: Cannot find name ''filter''.
    Did you mean ''File''?

    ../../../../tmp/tmpyk4i6npo.ts(10,22): error TS2304: Cannot find name ''is_positive''.

    ../../../../tmp/tmpyk4i6npo.ts(10,35): error TS2304: Cannot find name ''is_even''.

    ../../../../tmp/tmpyk4i6npo.ts(10,44): error TS2304: Cannot find name ''is_zero''.

    ../../../../tmp/tmpyk4i6npo.ts(10,53): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(Number.isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332664
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\
    \ v => typeof v === \"number\");\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpxqou9lb8.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxqou9lb8.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332693
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(element)\
    \ {\n    return element == parseInt(element, 10);\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  // Code here.\n\
    \  let retArr: number[] = [];\n  values.forEach(element => {\n    if (typeof element\
    \ === \"number\") {\n      retArr.push(element);\n    }\n  });\n  return retArr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpc5rdok7t.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc5rdok7t.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332693
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(i\
    \ => typeof i === \"number\" && !isNaN(i));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpap65y6q3.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpap65y6q3.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332692
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let int:\
    \ number[] = [];\n    values.forEach(function (v) {\n        if (isInteger(v))\
    \ {\n            int.push(v);\n        }\n    });\n    return int;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpxu76zbiz.ts(9,13): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332692
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && Number.isInteger(v));\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332693
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpozc6a1ir.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332696
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let numbers:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            numbers.push(values[i]);\n        }\n\
    \    }\n    return numbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpky140lfc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpky140lfc.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332697
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return filter(values,\
    \ filterInteger);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpu4h7moi6.ts(7,12): error TS2552: Cannot find name ''filter''.
    Did you mean ''File''?

    ../../../../tmp/tmpu4h7moi6.ts(7,27): error TS2552: Cannot find name ''filterInteger''.
    Did you mean ''filter_integers''?

    '
  timestamp: 1660332698
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(value)\
    \ {\n    return typeof value === \"number\" && Number.isInteger(value);\n  });\n\
    }\nconsole.log(filter_integers([\"a\", 3.14, 5]));\nconsole.log(filter_integers([1,\
    \ 2, 3, \"abc\", {}, []]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332698
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && Number.isInteger(v));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(\n\
    \        (value: any) => typeof value === \"number\" && !isNaN(value)\n    );\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp4yrjtnze.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4yrjtnze.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332698
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(v\
    \ => typeof v === \"number\");\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp2cp9ikll.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2cp9ikll.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332699
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value) {\n        return typeof (value) === \"number\" && !Number.isNaN(value);\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp8errzvmr.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8errzvmr.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332698
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(x\
    \ => Number.isInteger(x));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332698
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const result:\
    \ number[] = [];\n    for (const value of values) {\n        if (is_integer(value))\
    \ {\n            result.push(value);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpamnspq54.ts(9,13): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332699
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let result\
    \ = [];\n    for (let v of values) {\n        if (isNumber(v)) {\n           \
    \ result.push(v);\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpdo4y61e5.ts(9,13): error TS2552: Cannot find name ''isNumber''.
    Did you mean ''Number''?

    '
  timestamp: 1660332698
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value: any): boolean {\n        return typeof value === \"number\" && Math.floor(value)\
    \ === value;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332699
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(v\
    \ => typeof v === \"number\" && Number.isInteger(v));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332692
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbh79f3i7.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (value) {\n        return typeof value === \"number\" && value % 1 === 0;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(x\
    \ => is_integer(x));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpu0q_k226.ts(7,31): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332699
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (v) {\n        return typeof v === \"number\" && Number.isInteger(v);\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332699
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const numbers:\
    \ number[] = [];\n    for (const value of values) {\n        if (typeof value\
    \ === \"number\" && Number.isInteger(value)) {\n            numbers.push(value);\n\
    \        }\n    }\n    return numbers;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332699
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(val\
    \ => typeof val === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpypf3gmml.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpypf3gmml.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332699
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\");\n}\nconsole.log(filter_integers([\"a\", 3.14,\
    \ 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpert_lc_k.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmpert_lc_k.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3.14, 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332699
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && Number.isInteger(value));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    var num_array:\
    \ number[] = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof\
    \ (values[i]) == \"number\") {\n            num_array.push(values[i]);\n     \
    \   }\n    }\n    return num_array;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpok7qsdxv.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpok7qsdxv.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332699
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(function\
    \ (item) {\n        return typeof item === \"number\" && item % 1 === 0;\n   \
    \ });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332699
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(is_integer);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpbh79f3i7.ts(7,26): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332565
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(val\
    \ => typeof val === \"number\" && Math.round(val) === val);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332699
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let only_integers:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (typeof\
    \ values[i] === \"number\") {\n            only_integers.push(values[i]);\n  \
    \      }\n    }\n    return only_integers;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmp7lb6m0u7.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7lb6m0u7.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332699
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  let result:\
    \ number[] = [];\n  for (let v of values) {\n    if (typeof v === \"number\" &&\
    \ !Number.isNaN(v)) {\n      result.push(v);\n    }\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpjk6zh_rm.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjk6zh_rm.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332700
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(v\
    \ => typeof v === \"number\" && v % 1 === 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332566
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(e\
    \ => Number.isInteger(e));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332700
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(item\
    \ => typeof item === \"number\" && item === parseInt(item.toString()));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332700
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return [];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpoooci94d.js:13:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpoooci94d.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332702
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(item\
    \ => typeof item === \"number\" && isFinite(item));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpxiltw3_4.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxiltw3_4.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332703
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let integers:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        if (is_integer(values[i]))\
    \ {\n            integers.push(values[i]);\n        }\n    }\n    return integers;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpjq3qcn4w.ts(9,13): error TS2552: Cannot find name ''is_integer''.
    Did you mean ''integers''?

    '
  timestamp: 1660332703
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => typeof value === \"number\");\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmptbrpesk7.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmptbrpesk7.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332703
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    let out:\
    \ number[] = [];\n    for (let i = 0; i < values.length; i++) {\n        let value\
    \ = values[i];\n        if (typeof value === \"number\" && Number.isInteger(value))\
    \ {\n            out.push(value);\n        }\n    }\n    return out;\n}\nconsole.log(filter_integers([\"\
    a\", 3.14, 5]));\nconsole.log(filter_integers([1, 2, 3, \"abc\", {}, []]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 5 ]

    [ 1, 2, 3 ]

    '
  timestamp: 1660332703
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return filter(values,\
    \ is_integer);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp0vts09t7.ts(7,10): error TS2552: Cannot find name ''filter''.
    Did you mean ''File''?

    ../../../../tmp/tmp0vts09t7.ts(7,25): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332671
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  const integers:\
    \ number[] = [];\n  for (const value of values) {\n    if (typeof value === \"\
    number\" && value % 1 === 0) {\n      integers.push(value);\n    }\n  }\n  return\
    \ integers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332703
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(val\
    \ => Number.isInteger(val))\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332704
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(e\
    \ => typeof e === \"number\" && e % 1 === 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332704
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    var integers\
    \ = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i]\
    \ === \"number\") {\n            integers.push(values[i]);\n        }\n    }\n\
    \    return integers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmporkzqfcj.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmporkzqfcj.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332704
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const result:\
    \ number[] = [];\n    for (const value of values) {\n        if (Number.isInteger(value))\
    \ {\n            result.push(value);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332704
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\" && !isNaN(value));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmpgidx6crc.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgidx6crc.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function(value)\
    \ {\n    return is_integer(value);\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp8b1a8gga.ts(8,12): error TS2304: Cannot find name ''is_integer''.

    '
  timestamp: 1660332703
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(value\
    \ => Number.isInteger(value));\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332704
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(is_int);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpdwj051u1.ts(7,24): error TS2304: Cannot find name ''is_int''.

    '
  timestamp: 1660332704
- exit_code: 1
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(value\
    \ => typeof value === \"number\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  23.2,\n\
    \  9\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  9\n]\n    at test (/tmp/tmprz74qzqo.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmprz74qzqo.js:16:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2,\
    \ 9 ],\n  expected: [ 4, 9 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332566
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  // return\
    \ values.filter(v => typeof v === \"number\" && isInteger(v));\n  return values.filter(isInteger);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7w3af2l4.ts(8,24): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332704
- exit_code: 0
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const result:\
    \ number[] = [];\n    for (const value of values) {\n        if (typeof value\
    \ === \"number\" && Number.isInteger(value)) {\n            result.push(value);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660332704
- exit_code: 2
  program: "//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"\
    a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n//\
    \ [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    return values.filter(isInteger);\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp192c78gr.ts(7,26): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1660332704
