name: HumanEval_80_is_happy
language: ts
prompt: "//You are given a string s.\n// Your task is to check if the string is hapts\
  \ or not.\n// A string is hapts if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>> is_happy(aa)\n\
  // false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n// false\n// >>>\
  \ is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction is_happy(s: string):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
  \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"\
  ),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
  adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
  iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();"
completions: ["    let arr = [...s];\n    for (let i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] == arr[i + 1] && arr[i] == arr[i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconsole.log(is_happy(\"abcd\"\
    ));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"aabb\"));\n", " \
    \   return (s.length >= 3 && s.length % 3 === 0) && s.split('').every((x, i) =>\
    \ (i + 1) % 3 !== 0 || x !== s[i - 1] && x !== s[i - 2])\n}\nconsole.log(is_happy('abcd'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('bbeeaabb'));\n", "  return s.length >= 3 && Array.from(new\
    \ Set(s.match(/[a-z]{3}/g) || [])).length > 0;\n}\n", "    let happy_counter =\
    \ 0;\n    if (s.length > 2) {\n        for (let i = 0; i < s.length - 2; i++)\
    \ {\n            if (s[i] !== s[i + 1] && s[i] !== s[i + 2] && s[i + 1] !== s[i\
    \ + 2]) {\n                happy_counter++;\n            }\n        }\n      \
    \  if (happy_counter === s.length - 2) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "  const length: number = s.length;\n  const\
    \ arr = [];\n  for (let i = 0; i < length; i++) {\n    if (i + 2 <= length) {\n\
    \      arr.push(s.slice(i, i + 3));\n    }\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const set = new Set(arr[i]);\n    if (set.size === 2) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n", "    if (s.length\
    \ < 3) {\n        return false;\n    }\n    else {\n        let haps = [];\n \
    \       haps.push(s[0]);\n        for (let i = 1; i < s.length; i++) {\n     \
    \       if (s[i] === s[i - 1]) {\n                return false;\n            }\n\
    \            else {\n                haps.push(s[i]);\n            }\n       \
    \ }\n        return true;\n    }\n}\n", "    let flag = false;\n    if (s.length\
    \ > 2) {\n        for (let i = 2; i < s.length; i++) {\n            if (s[i] !==\
    \ s[i - 1] && s[i] !== s[i - 2] && s[i - 1] !== s[i - 2]) {\n                flag\
    \ = true;\n            } else {\n                flag = false;\n             \
    \   break;\n            }\n        }\n    }\n    return flag;\n}\n", "    let\
    \ r = false;\n    if (s.length >= 3) {\n        let a = [];\n        for (let\
    \ i = 0; i < s.length; i++) {\n            a.push(s[i]);\n        }\n        a.splice(0,\
    \ 3);\n        let s2 = a.join('');\n        if (s2.includes(s[0]) || s2.includes(s[1])\
    \ || s2.includes(s[2])) {\n            r = false;\n        } else {\n        \
    \    r = true;\n        }\n    }\n    return r;\n}\n\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n", "    return s.length\
    \ >= 3 && (\n        s.slice(0, 3).split('').every((e, i, a) => e !== a[(i + 1)\
    \ % 3])\n        || is_happy(s.slice(1))\n    );\n}\n", "    if (s.length < 3)\
    \ return false;\n    for (let i = 2; i < s.length; i++) {\n        if (s[i] ===\
    \ s[i - 1] && s[i] === s[i - 2]) return false;\n    }\n    return true;\n}\nconsole.log(is_happy('abcdef'));\n",
  "    if (s.length < 3) {\n        return false;\n    }\n\n    const uniques = new\
    \ Set();\n    let isHappy = true;\n    for (let i = 0; i < s.length; i++) {\n\
    \        if (i >= 3) {\n            uniques.delete(s[i - 3]);\n        }\n   \
    \     if (uniques.has(s[i])) {\n            isHappy = false;\n            break;\n\
    \        }\n        uniques.add(s[i]);\n    }\n    return isHappy;\n}\n", "  \
    \  if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i\
    \ < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] ||\
    \ s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n\n  \
    \  return true;\n}\n", "    const arr = s.split('');\n    if (arr.length < 3)\
    \ {\n        return false;\n    }\n    for (let i = 0; i < arr.length - 2; i++)\
    \ {\n        if (arr[i] === arr[i + 1] || arr[i] === arr[i + 2] || arr[i + 1]\
    \ === arr[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "  if (s.length < 3) {\n    return false;\n  }\n  let i = 0;\n  while (i\
    \ < s.length - 2) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1]\
    \ === s[i + 2]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n\
    }\n", "  return undefined;\n}\n\nexport { is_happy };", "  if (s.length < 3) {\n\
    \    return false;\n  }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i]\
    \ === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}", "    if (s.length < 3) {\n        return\
    \ false;\n    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i]\
    \ === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    let happy = true;\n \
    \   if (s.length < 3) {\n        happy = false;\n    } else {\n        for (let\
    \ i = 0; i < s.length - 2; i++) {\n            let first: string = s.charAt(i);\n\
    \            let second: string = s.charAt(i + 1);\n            let third: string\
    \ = s.charAt(i + 2);\n            if (first === second && second === third) {\n\
    \                happy = false;\n            }\n        }\n    }\n    return happy;\n\
    }\n", "    let set = new Set();\n    for (let i = 0; i < s.length; i++) {\n  \
    \      if (i + 3 > s.length) {\n            break;\n        }\n        let str\
    \ = s.substring(i, i + 3);\n        let unique = new Set(str);\n        if (unique.size\
    \ != 3) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    if (s.length < 3) return false;\n    let temp = s.split('');\n    for (let\
    \ i = 0; i < temp.length; i += 3) {\n        if (temp[i] === temp[i + 1] || temp[i]\
    \ === temp[i + 2] || temp[i + 1] === temp[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
