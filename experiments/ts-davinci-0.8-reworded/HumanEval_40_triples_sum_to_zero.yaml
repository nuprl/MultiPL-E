name: HumanEval_40_triples_sum_to_zero
language: ts
prompt: "//triples_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are three distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triples_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["  l.sort();\n  for (let i = 0; i < l.length - 2; i++) {\n    let j\
    \ = i + 1;\n    let k = l.length - 1;\n    while (j < k) {\n      let sum = l[i]\
    \ + l[j] + l[k];\n      if (sum === 0) {\n        return true;\n      } else if\
    \ (sum < 0) {\n        j++;\n      } else {\n        k--;\n      }\n    }\n  }\n\
    \  return false;\n}\n", "    if (l.length < 3) {\n        return false;\n    }\n\
    \    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length;\
    \ j++) {\n            for (let k = j + 1; k < l.length; k++) {\n             \
    \   if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n      \
    \          }\n            }\n        }\n    }\n    return false;\n}\n\nexport\
    \ {\n    nth_fibonacci,\n    str_repr,\n    str_repr_mult,\n    digit_sum,\n \
    \   common_prefix,\n    triples_sum_to_zero\n};", "    let res: boolean = false;\n\
    \    for (let i: number = 0; i < l.length; i++) {\n        for (let j: number\
    \ = i + 1; j < l.length; j++) {\n            for (let k: number = j + 1; k < l.length;\
    \ k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                  \
    \  res = true;\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\n", "  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n \
    \   for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length;\
    \ k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          triples.push([l[i],\
    \ l[j], l[k]]);\n        }\n      }\n    }\n  }\n  return triples.length > 0;\n\
    }\n", "  let result = false;\n  // Insert your code here!\n  // Sort the array\
    \ to make finding triples easier.\n  const sorted = l.sort((a, b) => a - b);\n\
    \  // Iterate through the array, looking for a zero sum triple.\n  for (let i\
    \ = 0; i < sorted.length - 2; i++) {\n    // Now, search for two values that sum\
    \ to the negative of l[i].\n    let j = i + 1;\n    let k = sorted.length - 1;\n\
    \    while (j < k) {\n      // If the sum of l[j] and l[k] is smaller than -l[i],\
    \ increase j.\n      if (sorted[j] + sorted[k] < -sorted[i]) {\n        j++;\n\
    \      }\n      // If the sum of l[j] and l[k] is larger than -l[i], decrease\
    \ k.\n      else if (sorted[j] + sorted[k] > -sorted[i]) {\n        k--;\n   \
    \   }\n      // If the sum of l[j] and l[k] is equal to -l[i], return true!\n\
    \      else {\n        result = true;\n        break;\n      }\n    }\n  }\n \
    \ return result;\n}\n", "    const len = l.length;\n    if (len < 3) {\n     \
    \   return false;\n    }\n    for (let i = 0; i < len - 2; i++) {\n        for\
    \ (let j = i + 1; j < len - 1; j++) {\n            for (let k = j + 1; k < len;\
    \ k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                  \
    \  return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\n", "    let a = 0;\n    while (a < l.length - 2) {\n        let b\
    \ = a + 1;\n        while (b < l.length - 1) {\n            let c = b + 1;\n \
    \           while (c < l.length) {\n                if (l[a] + l[b] + l[c] ===\
    \ 0) {\n                    return true;\n                }\n                c\
    \ += 1;\n            }\n            b += 1;\n        }\n        a += 1;\n    }\n\
    \    return false;\n}\n", "    for (let i = 0; i < l.length; i++) {\n        for\
    \ (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length;\
    \ k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                  \
    \  return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\n", "    for (let i of l) {\n        for (let j of l) {\n        \
    \    for (let k of l) {\n                if (i + j + k === 0) {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}", "  if (l.length < 3) {\n    return false;\n  }\n  for (let\
    \ i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++)\
    \ {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] +\
    \ l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return\
    \ false;\n}\n", "  for (let i = 0; i < l.length; i++) {\n    for (let j = i +\
    \ 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n  \
    \      if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n  \
    \    }\n    }\n  }\n  return false;\n}\n", "    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let\
    \ k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] ===\
    \ 0) {\n                    return true;\n                }\n            }\n \
    \       }\n    }\n    return false;\n}\n", "  // YOUR CODE HERE\n  throw new Error(\"\
    Not implemented\");\n}\n", "    // YOUR CODE HERE\n    return false;\n}\n", " \
    \   // check if there are two distinct elements that sum to -l[i]\n    for (let\
    \ i = 0; i < l.length; i++) {\n        const neg_i = -l[i];\n        let found_neg_i\
    \ = false;\n        for (let j = 0; j < l.length; j++) {\n            if (i !==\
    \ j) {\n                const neg_j = -l[j];\n                if (neg_i === neg_j)\
    \ {\n                    found_neg_i = true;\n                    break;\n   \
    \             }\n            }\n        }\n        if (found_neg_i) {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\n", "  for (let i\
    \ = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n  \
    \    for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k]\
    \ === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n\
    }\n", "    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j\
    \ < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n \
    \               if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n",
  "  return false;\n}\n", "    if (l.length < 3) return false;\n    const sorted_l\
    \ = l.sort();\n    for (let i = 0; i < sorted_l.length - 2; i++) {\n        let\
    \ j = i + 1;\n        let k = sorted_l.length - 1;\n        while (j < k) {\n\
    \            const sum = sorted_l[i] + sorted_l[j] + sorted_l[k];\n          \
    \  if (sum === 0) return true;\n            if (sum < 0) j++;\n            else\
    \ k--;\n        }\n    }\n    return false;\n}\n", "    let size = l.length;\n\
    \    if (size < 3) {\n        return false;\n    }\n    let left_idx = 0;\n  \
    \  let right_idx = size - 1;\n    while (left_idx < right_idx - 1) {\n       \
    \ let left = l[left_idx];\n        let right = l[right_idx];\n        let middle_idx\
    \ = left_idx + 1;\n        while (middle_idx < right_idx) {\n            let middle\
    \ = l[middle_idx];\n            if (left + middle + right === 0) {\n         \
    \       return true;\n            }\n            middle_idx++;\n        }\n  \
    \      if (left > 0) {\n            left_idx++;\n        } else {\n          \
    \  right_idx--;\n        }\n    }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
