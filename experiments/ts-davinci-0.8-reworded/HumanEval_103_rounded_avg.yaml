name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["    if (n > m) {\n        return -1;\n    }\n    let start: number\
    \ = n;\n    let end: number = m;\n    let sum: number = 0;\n    let count: number\
    \ = 0;\n    while (start <= end) {\n        sum += start;\n        start += 1;\n\
    \        count += 1;\n    }\n    let avg: number = Math.round(sum / count);\n\
    \    let binary: string = avg.toString(2);\n    return '0b' + binary;\n}\n", " \
    \   let avg: number = Math.round((n + m) / 2);\n    if (n > m) return -1;\n  \
    \  else return \"0b\" + avg.toString(2);\n}\n", "  let avg = Math.round((n + m)\
    \ / 2);\n  if (n > m) {\n    return -1;\n  }\n  return `0b${avg.toString(2)}`;\n\
    }\n", "    if (n > m) {\n        return -1;\n    }\n    return (Math.round((m\
    \ + n) / 2)).toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));",
  "  const avg = Math.round((n + m) / 2);\n  if (n > m) {\n    return -1;\n  }\n \
    \ return \"0b\" + avg.toString(2);\n}\n\n", "  let result: number;\n  let result_in_bin:\
    \ string;\n  let sum: number = 0;\n  for (let i = n; i <= m; i++) {\n    sum +=\
    \ i;\n  }\n  if (n > m) {\n    return -1;\n  }\n  result = Math.round(sum / (m\
    \ - n + 1));\n  result_in_bin = result.toString(2);\n  return '0b' + result_in_bin;\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));", "    if (n > m) return -1;\n    return\
    \ Math.round((n + m) / 2).toString(2);\n}\n", "    if (n > m) {\n        return\
    \ -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum\
    \ += i;\n    }\n    return parseInt(sum / (m - n + 1)).toString(2);\n}\n", " \
    \   if (n > m) return -1;\n    const average = (n + m) / 2;\n    const roundedAverage\
    \ = Math.round(average);\n    return `0b${roundedAverage.toString(2)}`;\n}\n",
  "    if (n > m) {\n        return -1;\n    }\n    return '0b' + Math.round((m +\
    \ n) / 2).toString(2);\n}\nconsole.log(rounded_avg(10, 20));\n\n", "    return\
    \ -1;\n}", "    if (n > m) return -1;\n    let a: number = (n + m) / 2;\n    let\
    \ a_rounded: number = Math.round(a);\n    let a_rounded_to_bin: string = a_rounded.toString(2);\n\
    \    return `0b${a_rounded_to_bin}`;\n}\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n", "    if (n > m) return -1;\n  \
    \  let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\
    \    let avg = Math.round(sum / (m - n + 1));\n    let result = avg.toString(2);\n\
    \    return \"0b\" + result;\n}\n", "    if (n > m) {\n        return -1;\n  \
    \  }\n    const avg = (n + m) / 2;\n    return `0b${avg.toString(2)}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n", "    if (n > m) return -1;\n    return Math.round((n + m) / 2).toString(2);\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n", "  if (n > m) {\n    return -1;\n\
    \  }\n  let avg = Math.round((n + m) / 2);\n  return `0b${avg.toString(2)}`;\n\
    }\n", "    let av = Math.round((n + m) / 2);\n    return av >= n && av <= m ?\
    \ av.toString(2) : -1;\n}\n", "  const avg = Math.round((n + m) / 2);\n  return\
    \ n < m ? `0b${avg.toString(2)}` : -1;\n}\nconsole.log(rounded_avg(20, 33));",
  "    // Write your code here\n}\n\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));",
  "    if (n < m) {\n        const sum: number = (n + m) / 2;\n        const rounded\
    \ = Math.round(sum);\n        return \"0b\" + rounded.toString(2);\n    } else\
    \ {\n        return -1;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
