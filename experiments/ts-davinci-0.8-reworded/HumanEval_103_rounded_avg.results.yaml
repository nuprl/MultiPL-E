language: ts
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let start:\
    \ number = n;\n    let end: number = m;\n    let sum: number = 0;\n    let count:\
    \ number = 0;\n    while (start <= end) {\n        sum += start;\n        start\
    \ += 1;\n        count += 1;\n    }\n    let avg: number = Math.round(sum / count);\n\
    \    let binary: string = avg.toString(2);\n    return '0b' + binary;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpto13ph28.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpto13ph28.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) return -1;\n    else return \"0b\" + avg.toString(2);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpm_lm64xw.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm_lm64xw.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  let avg = Math.round((n + m) / 2);\n  if (n > m) {\n   \
    \ return -1;\n  }\n  return `0b${avg.toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp1a2igahl.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1a2igahl.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return (Math.round((m\
    \ + n) / 2)).toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpm154fq8d.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm154fq8d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  const avg = Math.round((n + m) / 2);\n  if (n > m) {\n \
    \   return -1;\n  }\n  return \"0b\" + avg.toString(2);\n}\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpum3foci9.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpum3foci9.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  let result: number;\n  let result_in_bin: string;\n  let\
    \ sum: number = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  if\
    \ (n > m) {\n    return -1;\n  }\n  result = Math.round(sum / (m - n + 1));\n\
    \  result_in_bin = result.toString(2);\n  return '0b' + result_in_bin;\n}\n\n\
    console.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpyrpe1c4m.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyrpe1c4m.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    return Math.round((n + m) /\
    \ 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpf0sfn6tx.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf0sfn6tx.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ parseInt(sum / (m - n + 1)).toString(2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmporvu59gw.ts(22,21): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const average = (n + m) / 2;\n\
    \    const roundedAverage = Math.round(average);\n    return `0b${roundedAverage.toString(2)}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpa5m1c_lo.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa5m1c_lo.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return '0b'\
    \ + Math.round((m + n) / 2).toString(2);\n}\nconsole.log(rounded_avg(10, 20));\n\
    \n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpf1u8c_cg.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf1u8c_cg.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    return -1;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n'0b11'\n    at test (/tmp/tmpt_75o6yc.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt_75o6yc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let a: number = (n + m) / 2;\n\
    \    let a_rounded: number = Math.round(a);\n    let a_rounded_to_bin: string\
    \ = a_rounded.toString(2);\n    return `0b${a_rounded_to_bin}`;\n}\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpqnghha0e.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqnghha0e.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    0b1111

    0b11011

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum\
    \ / (m - n + 1));\n    let result = avg.toString(2);\n    return \"0b\" + result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpwmwyolg4.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwmwyolg4.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = (n + m) / 2;\n    return `0b${avg.toString(2)}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001010.1'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpxm8hfscg.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxm8hfscg.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001010.1',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11010.1

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    return Math.round((n + m) /\
    \ 2).toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp8pn48ujc.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8pn48ujc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let avg = Math.round((n\
    \ + m) / 2);\n  return `0b${avg.toString(2)}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp9pl674h3.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9pl674h3.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let av = Math.round((n + m) / 2);\n    return av >= n\
    \ && av <= m ? av.toString(2) : -1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp3iji3pwr.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3iji3pwr.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  const avg = Math.round((n + m) / 2);\n  return n < m ? `0b${avg.toString(2)}`\
    \ : -1;\n}\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpwd8ugva_.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwd8ugva_.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332788
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // Write your code here\n}\n\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp7ii3bs06.ts(14,45): error TS2355: A function whose declared
    type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n < m) {\n        const sum: number = (n + m) / 2;\n\
    \        const rounded = Math.round(sum);\n        return \"0b\" + rounded.toString(2);\n\
    \    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpsfdm0q_1.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsfdm0q_1.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    var result\
    \ = Math.round((n + m) / 2);\n    return result.toString(2);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp7bo7mvh4.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7bo7mvh4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return Number(\n\
    \        (n + m) / 2\n    ).toString(2);\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpot20eslk.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpot20eslk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const arr = [];\n    for (let\
    \ i = n; i <= m; i++) {\n        arr.push(i);\n    }\n    const sum = arr.reduce((a,\
    \ b) => a + b);\n    const average = Math.round(sum / arr.length);\n    const\
    \ binary = Number(average).toString(2);\n    return `0b${binary}`;\n}\nconsole.log(rounded_avg(10,\
    \ 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpqjtjzi_q.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqjtjzi_q.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    '
  timestamp: 1660332788
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (sum % 2 === 0)\
    \ ? \"0b\" + (sum / (m - n + 1)).toString(2) : \"0b\" + ((sum / (m - n + 1)) +\
    \ 1).toString(2);\n}\n\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b100'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpevy_xq2d.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpevy_xq2d.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b100',\n\
    \  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011.1

    '
  timestamp: 1660332791
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    return parseInt(sum / (m\
    \ - n + 1) + \"\").toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpa8p9jrbx.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa8p9jrbx.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11010

    '
  timestamp: 1660332791
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    var sum =\
    \ 0;\n    for (var i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp22bwjafh.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp22bwjafh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    let sum\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return (avg >>> 0).toString(2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpd17035gg.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd17035gg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    for (let i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    let\
    \ avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpqd1w4sz_.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqd1w4sz_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const avg = Math.round((n +\
    \ m) / 2);\n    return `0b${avg.toString(2)}`;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpk497g1v1.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk497g1v1.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    var avg = Math.round((n + m)\
    \ / 2);\n    return \"0b\" + avg.toString(2);\n}\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpcicvah24.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcicvah24.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Number(Number(sum\
    \ / (m - n + 1)).toFixed(0)).toString(2);\n}\nconsole.log(rounded_avg(7, 5));\n\
    console.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpswnz5kiv.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpswnz5kiv.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    11

    1111

    11011

    '
  timestamp: 1660332791
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    let count\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n        count++;\n\
    \    }\n    let avg = Math.round(sum / count);\n    return `0b${avg.toString(2)}`;\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpi1y4ncoo.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi1y4ncoo.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const average = Math.round((n\
    \ + m) / 2);\n    return average.toString(2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp0pft0w7q.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0pft0w7q.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    for (let i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ `0b${(Math.round(sum / (m - n + 1))).toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpv4pwt5ke.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv4pwt5ke.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    const average\
    \ = Math.round((n + m) / 2);\n    return `0b${average.toString(2)}`;\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmps1lamud_.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmps1lamud_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    else {\n\
    \        let ans = Math.round((n + m) / 2)\n        return ans.toString(2);\n\
    \    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpken9eb9w.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpken9eb9w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let avg = Math.round((n + m)\
    \ / 2);\n    return \"0b\" + avg.toString(2);\n}\n\ntest(rounded_avg(1, 5), \"\
    0b11\");\ntest(rounded_avg(7, 5), -1);\ntest(rounded_avg(10, 20), \"0b1111\");\n\
    test(rounded_avg(20, 33), \"0b11010\");\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpddp3frcf.ts(20,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../tmp/tmpddp3frcf.ts(21,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../tmp/tmpddp3frcf.ts(22,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../tmp/tmpddp3frcf.ts(23,6): error TS2554: Expected 0 arguments, but
    got 2.

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    let nums\
    \ = [];\n    let i = n;\n    while (i <= m) {\n        nums.push(i);\n       \
    \ i++;\n    }\n\n    let sum = nums.reduce((a, b) => a + b);\n    let avg = sum\
    \ / nums.length;\n    let roundedAvg = Math.round(avg);\n    let binaryAvg = roundedAvg.toString(2);\n\
    \    return `0b${binaryAvg}`;\n}\nconsole.log(rounded_avg(20, 33));\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp289110q9.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp289110q9.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        avg += i;\n    }\n    avg =\
    \ Math.round(avg / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpjna0wgbf.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjna0wgbf.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  let s = 0;\n  let count = 0;\n  if (n > m) {\n    return\
    \ -1;\n  }\n  while (n <= m) {\n    s += n;\n    n++;\n    count++;\n  }\n  return\
    \ '0b' + (Math.round(s / count)).toString(2);\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpvl5yib8b.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvl5yib8b.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let result: number = (n + m) / 2;\n    if (n < m) {\n\
    \        return result;\n    }\n    return -1;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n970.5\n\nshould\
    \ loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpwes6zu7q.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwes6zu7q.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 970.5,\n \
    \ expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '3

    -1

    15

    26.5

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    var total:\
    \ number = 0;\n    for (let i = n; i <= m; i++) {\n        total += i;\n    }\n\
    \    var answer: number = Math.round(total / (m - n + 1));\n    return \"0b\"\
    \ + answer.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpx6ydx809.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpx6ydx809.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n>m) {return -1;}\n  const avg: number = Math.round((n+m)/2);\n\
    \  const bin: string = avg.toString(2);\n  return `0b${bin}`;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp_bh3ab3b.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_bh3ab3b.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum /\
    \ (m - n + 1));\n  return `0b${avg.toString(2)}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpvm8kbstf.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvm8kbstf.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum: number = 0;\n    let count: number = 0;\n   \
    \ let avg: number = 0;\n    if (n < m) {\n        for (let i: number = n; i <=\
    \ m; i++) {\n            sum += i;\n            count++;\n        }\n        avg\
    \ = sum / count;\n        avg = Math.round(avg);\n        return (\"0b\" + avg.toString(2));\n\
    \    } else if (n > m) {\n        return -1;\n    }\n}\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpktxwy8s3.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpktxwy8s3.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    0b11011

    0b11

    -1

    '
  timestamp: 1660332792
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let result\
    \ = n + Math.round((m - n) / 2);\n    return convertToBinary(result);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmplk82789j.ts(19,12): error TS2304: Cannot find name ''convertToBinary''.

    '
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const average\
    \ = Math.round((n + m) / 2);\n    return average.toString(2);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmptivanoxn.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptivanoxn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // BEGIN SOLUTION\n    if (n > m) {\n        return -1;\n\
    \    }\n    const avg = Math.round((n + m) / 2);\n    return \"0b\" + avg.toString(2);\n\
    \    // END SOLUTION\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp26srenro.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp26srenro.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ \"0b\" + Math.round(sum / (m - n + 1)).toString(2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpcivqd93m.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcivqd93m.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332672
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    let num = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n\
    \        num++;\n    }\n    const average = Math.round(sum / num);\n    return\
    \ \"0b\" + average.toString(2);\n}\n\ndescribe(\"binary_average\", () => {\n \
    \   it(\"sum averages\", () => {\n        assert.equal(rounded_avg(1, 5), \"0b11\"\
    );\n        assert.equal(rounded_avg(7, 5), -1);\n        assert.equal(rounded_avg(10,\
    \ 20), \"0b1111\");\n        assert.equal(rounded_avg(20, 33), \"0b11010\");\n\
    \    });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpcagh_o0c.ts(29,1): error TS2582: Cannot find name ''describe''.
    Do you need to install type definitions for a test runner? Try `npm i --save-dev
    @types/jest` or `npm i --save-dev @types/mocha`.

    ../../../../tmp/tmpcagh_o0c.ts(30,5): error TS2582: Cannot find name ''it''. Do
    you need to install type definitions for a test runner? Try `npm i --save-dev
    @types/jest` or `npm i --save-dev @types/mocha`.

    '
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    return m > n ? ((n + m) / 2) | 0 : -1;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n705\n\nshould\
    \ loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmp_fbsfsr2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_fbsfsr2.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 705,\n  expected:\
    \ '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const avg = Math.round((n +\
    \ m) / 2);\n    return `0b${avg.toString(2)}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpkpjeu4sk.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkpjeu4sk.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332567
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const sum\
    \ = n + m;\n    const average = Math.round(sum / 2);\n    return `0b${average.toString(2)}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpxenh2tg1.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxenh2tg1.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum\
    \ / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp_whzdypz.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_whzdypz.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  const avg = Math.round((n + m) / 2);\n  return avg < n ?\
    \ -1 : `0b${avg.toString(2)}`;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpb_idadjf.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb_idadjf.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\
    console.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpegyx1xas.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpegyx1xas.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332671
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const roundUp\
    \ = Math.round((n + m) / 2);\n    const binary = roundUp.toString(2);\n    return\
    \ `0b${binary}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpddnpgh1d.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpddnpgh1d.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = 0;\n    let arr = [];\n    if (n > m) {\n  \
    \      return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        arr.push(i);\n\
    \    }\n    avg = Math.round(arr.reduce((a, b) => a + b) / arr.length);\n    return\
    \ Number(avg).toString(2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp4p4knnof.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4p4knnof.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = (n + m) / 2;\n    if (n > m) {\n        return\
    \ -1;\n    }\n    return `0b${avg.toString(2)}`;\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001010.1'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmplj9i9hzw.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmplj9i9hzw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001010.1',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11010.1

    '
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let average: number = Math.round((n\
    \ + m) / 2);\n    return (`0b${average.toString(2)}`);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpg76k62ye.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg76k62ye.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  return Math.round((n\
    \ + m) / 2).toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp5gluxcy7.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5gluxcy7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return n\
    \ + Math.round((m - n) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n971\n\nshould\
    \ loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmptq456nji.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmptq456nji.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 971,\n  expected:\
    \ '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let total = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        total += i;\n    }\n    const avg = Math.round(total\
    \ / (m - n + 1));\n    const binary = \"0b\" + avg.toString(2);\n    return binary;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpikev3ld5.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpikev3ld5.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    for (let i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9sobki2c.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9sobki2c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const result = Math.round((n\
    \ + m) / 2);\n    return \"0b\" + result.toString(2);\n}\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp9nej6669.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9nej6669.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = sum / (m - n + 1);\n    avg = Math.round(avg);\n    let binary = avg.toString(2);\n\
    \    return `0b${binary}`;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpsqxshsri.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsqxshsri.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332796
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n\tlet average = Math.round((n + m) / 2);\n\treturn n > m ?\
    \ -1 : `0b${average.toString(2)}`;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp0x8tztec.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0x8tztec.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let total:\
    \ number = 0;\n    for (let i: number = n; i <= m; i++) {\n        total += i;\n\
    \    }\n    const avg: number = Math.round(total / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmponl_koed.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmponl_koed.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332796
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const average = Math.round((m\
    \ + n) / 2);\n    return `0b${average.toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp3gjrj6vn.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3gjrj6vn.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332796
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = n;\n    for (let i = n + 1; i <= m; i++) {\n\
    \        sum += i;\n    }\n    if (n <= m) {\n        return \"0b\" + Math.round(sum\
    \ / (m - n + 1)).toString(2);\n    } else {\n        return -1;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmphez7b06h.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmphez7b06h.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332795
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n\tif (n > m) {\n\t\treturn -1;\n\t}\n\tlet result = Math.round((n\
    \ + m) / 2);\n\treturn '0b' + result.toString(2);\n}\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(20, 33));\n\
    console.log(rounded_avg(7, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpuq6w_7ue.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuq6w_7ue.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    0b11

    0b11011

    -1

    '
  timestamp: 1660332796
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum: number = 0;\n    let counter: number = 0;\n \
    \   let result: number = 0;\n    if (n > m) {\n        return -1;\n    }\n   \
    \ for (let i: number = n; i <= m; i++) {\n        sum += i;\n        counter++;\n\
    \    }\n    result = Math.round(sum / counter);\n    return \"0b\" + result.toString(2);\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmposiuubva.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmposiuubva.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332796
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) { return -1; }\n  let x = Math.floor((n + m)\
    \ / 2);\n  let y = x.toString(2);\n  return '0b' + y;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmp2j30q1zl.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2j30q1zl.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332796
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = (n + m) / 2;\n    if (n > m) {\n        return\
    \ -1;\n    }\n    return (Math.round(avg)).toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpnp1lrrzb.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnp1lrrzb.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332798
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const a =\
    \ Math.floor((n + m) / 2);\n    const b = a.toString(2);\n    return \"0b\" +\
    \ b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmpp0d_j9o4.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp0d_j9o4.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332798
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // console.log(`${n} <-- n`);\n    // console.log(`${m}\
    \ <-- m`);\n    let roundedAvrg = 0;\n    if (n > m) {\n        return -1;\n \
    \   }\n    if (n < m) {\n        let k = 0;\n        for (let i = n; i <= m; i++)\
    \ {\n            k = k + i;\n        }\n        roundedAvrg = Math.round(k / (m\
    \ - n + 1));\n        return `0b${roundedAvrg.toString(2)}`;\n    }\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmptguwzat4.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmptguwzat4.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let average:\
    \ number = Math.round((n + m) / 2);\n    return average.toString(2);\n};\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpga02ypjl.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpga02ypjl.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    1111

    11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const average:\
    \ number = Math.round((n + m) / 2);\n    return `0b${average.toString(2)}`;\n\
    }\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp68_2qu3b.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp68_2qu3b.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    let i = 0;\n\
    \    while (n <= m) {\n        sum += n;\n        n++;\n        i++;\n    }\n\
    \    let average = sum / i;\n    let roundedAvg = Math.round(average);\n    let\
    \ binary = \"0b\" + roundedAvg.toString(2);\n    return binary;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp50kjvkik.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp50kjvkik.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    result = Math.round(result\
    \ / (m - n + 1));\n    return (result).toString(2);\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9q2vlaob.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9q2vlaob.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const arr = [];\n    for (let\
    \ i = n; i <= m; i++) {\n        arr.push(i);\n    }\n    const avg = Math.round(arr.reduce((acc,\
    \ value) => acc + value, 0) / arr.length);\n    return `0b${avg.toString(2)}`;\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp2rihhfcz.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2rihhfcz.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n   if (n > m) {\n      return -1;\n   } else {\n      let\
    \ numbers = [];\n      for (let i = n; i <= m; i++) {\n         numbers.push(i);\n\
    \      }\n      let avr = Math.round(numbers.reduce((sum, x) => sum + x) / numbers.length);\n\
    \      return '0b' + Number(avr).toString(2);\n   }\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpcwwzz7v2.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcwwzz7v2.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) return\
    \ -1;\n    return \"0b\" + avg.toString(2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpokbub70y.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpokbub70y.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  const decimal = Math.round((n\
    \ + m) / 2);\n  return '0b' + Number(decimal).toString(2);\n}\n\nexport { rounded_avg\
    \ };\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:26358) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpss1dxaxv.js:21\nexport { rounded_avg\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  return n <= m ? `0b${((n + m) / 2) | 0}` : -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b3'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpte30ukcb.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpte30ukcb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b3',\n \
    \ expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n>m) {\n        return -1;\n    }\n    let result\
    \ = Math.floor((n+m)/2);\n    let resultString = \"0b\" + result.toString(2);\n\
    \    return resultString;\n}\nconsole.log(rounded_avg(10,20));\n\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmpg3ldf1ws.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpg3ldf1ws.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  return -1;\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n'0b11'\n    at test (/tmp/tmpt9_0yiyc.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9_0yiyc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const result\
    \ = Math.round((n + m) / 2);\n    return \"0b\" + result.toString(2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp4r1j3z1l.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4r1j3z1l.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum\
    \ / (m - n + 1));\n    return '0b' + avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpzyokk35i.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyokk35i.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    return (n < m) ? \"0b\" +  ((n + m) / 2).toString(2).match(/\\\
    d+/)[0] : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmptht315w2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmptht315w2.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg: number = Math.round((n + m) / 2);\n    if (n\
    \ > m) return -1;\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(20,\
    \ 33));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmprcptbmir.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprcptbmir.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11011

    11

    -1

    1111

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return `0b${avg.toString(2)}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp_mtakj0p.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_mtakj0p.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n>m) {\n        return -1;\n    }\n    let sum: number\
    \ = 0;\n    for (let i: number = n; i <= m; i++) {\n        sum += i;\n    }\n\
    \    let avg: number = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpbmsy2axo.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbmsy2axo.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // average of two numbers = (n + m) / 2\n    // but this\
    \ is not the case for this problem\n    // to get the average we have to loop\
    \ through numbers n to m\n    // m and n are inclusive, so we have to loop through\
    \ it\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    // get the average and\
    \ round the number\n    const average = Math.round(sum / (m - n + 1));\n    //\
    \ convert to binary\n    const binary = average.toString(2);\n    return `0b${binary}`;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp6vkqc1e4.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6vkqc1e4.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let mid =\
    \ n + m >> 1;\n    return `0b${Number(mid).toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmphwm4xdxz.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmphwm4xdxz.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    for (let i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ average = Math.round(sum / (m - n + 1));\n    return `0b${average.toString(2)}`;\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpakz4e5dm.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpakz4e5dm.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return (n\
    \ + m) / 2 | 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n705\n\nshould\
    \ loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmpfhylv87t.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfhylv87t.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 705,\n  expected:\
    \ '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332799
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let x = 0;\n    if (n > m) {\n        return -1;\n   \
    \ }\n    for (let i = n; i <= m; i++) {\n        x += i;\n    }\n    return x\
    \ === 0 ? 0 : Math.round(x / (m - n + 1)).toString(2);\n}\nconsole.log(rounded_avg(10,20));\n\
    console.log(rounded_avg(1,5));\nconsole.log(rounded_avg(7,5));\nconsole.log(rounded_avg(20,33));\n\
    \nexport { }\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:26629) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpwz4s72ir.js:45\nexport {};\n\
    ^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332801
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avrg\
    \ = Math.round((n + m) / 2);\n    const binary = avrg.toString(2);\n    return\
    \ `0b${binary}`;\n}\nconsole.log(rounded_avg(1, 5)); // \"0b11\"\nconsole.log(rounded_avg(7,\
    \ 5)); // -1\nconsole.log(rounded_avg(10, 20)); // \"0b1111\"\nconsole.log(rounded_avg(20,\
    \ 33)); // \"0b11010\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpr4_jic0m.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr4_jic0m.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332801
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  const average = Math.round((n + m) / 2);\n  if (n > m) {\n\
    \    return -1;\n  }\n  return average.toString(2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpsu5gc_q6.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsu5gc_q6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let x = Math.round((n + m)\
    \ / 2);\n    return `0b${x.toString(2)}`;\n}\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpekjykuo1.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpekjykuo1.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp_y9n3woy.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_y9n3woy.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  const average = Math.round(sum\
    \ / (m - n + 1));\n  return `0b${average.toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpj81z0_83.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj81z0_83.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = (n + m) / 2;\n    const roundedAvg = Math.round(avg);\n    const binaryAvg\
    \ = roundedAvg.toString(2);\n    return `0b${binaryAvg}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpdlga53r_.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdlga53r_.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n \
    \       return -1;\n    } else {\n        for (let i = n; i <= m; i++) {\n   \
    \         sum += i;\n            count += 1;\n        }\n        let avg = Math.round(sum\
    \ / count);\n        return `0b${avg.toString(2)}`;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpd1lv9zqm.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd1lv9zqm.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let total\
    \ = 0;\n    let count = 0;\n    while (n <= m) {\n        total += n;\n      \
    \  count++;\n        n++;\n    }\n    const avg = Math.round(total / count);\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpvtvsyq0q.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvtvsyq0q.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let total\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        total += i;\n    }\n    const\
    \ avg = Math.round(total / (m - n + 1));\n    const binary = (avg >>> 0).toString(2);\n\
    \    return `0b${binary}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmprwh7zj8k.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmprwh7zj8k.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let n1: number;\n    let n2: number;\n    let x: number;\n\
    \    if (n > m) {\n        return -1;\n    }\n    n1 = n;\n    n2 = m;\n    x\
    \ = ((n1 + n2) / 2);\n    if (x >= n1 && x <= n2) {\n        let y = Math.round(x);\n\
    \        let y1 = y.toString(2);\n        return \"0b\" + y1;\n    }\n}\nlet yy:\
    \ string = rounded_avg(1, 5);\nconsole.log(yy);\nlet xx: number = rounded_avg(7,\
    \ 5);\nconsole.log(xx);\nlet yyy: string = rounded_avg(10, 20);\nconsole.log(yyy);\n\
    let yyyy: string = rounded_avg(20, 33);\nconsole.log(yyyy);\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: "../../../../tmp/tmp2tvnqqb9.ts(30,5): error TS2322: Type 'string | number'\
    \ is not assignable to type 'string'.\n  Type 'number' is not assignable to type\
    \ 'string'.\n../../../../tmp/tmp2tvnqqb9.ts(32,5): error TS2322: Type 'string\
    \ | number' is not assignable to type 'number'.\n  Type 'string' is not assignable\
    \ to type 'number'.\n../../../../tmp/tmp2tvnqqb9.ts(34,5): error TS2322: Type\
    \ 'string | number' is not assignable to type 'string'.\n  Type 'number' is not\
    \ assignable to type 'string'.\n../../../../tmp/tmp2tvnqqb9.ts(36,5): error TS2322:\
    \ Type 'string | number' is not assignable to type 'string'.\n  Type 'number'\
    \ is not assignable to type 'string'.\n"
  timestamp: 1660332802
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    for (let i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    let\
    \ avg = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n\
    }\n\ntest(rounded_avg(1, 5), \"0b11\");\ntest(rounded_avg(7, 5), -1);\ntest(rounded_avg(10,\
    \ 20), \"0b1111\");\ntest(rounded_avg(20, 33), \"0b11010\");\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp76ch_uvj.ts(26,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../tmp/tmp76ch_uvj.ts(27,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../tmp/tmp76ch_uvj.ts(28,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../tmp/tmp76ch_uvj.ts(29,6): error TS2554: Expected 0 arguments, but
    got 2.

    '
  timestamp: 1660332803
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    if (n > m) {\n        return -1;\n \
    \   }\n    for (n; n <= m; n++) {\n        sum += n;\n    }\n    const result\
    \ = Math.round(sum / ((m - n) + 1));\n    return `0b${result.toString(2)}`;\n\
    }\n\nexport {\n    triangle,\n    fizz_buzz,\n    get_squares,\n    get_divisors,\n\
    \    rounded_avg\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp157euc55.ts(27,5): error TS2304: Cannot find name ''triangle''.

    ../../../../tmp/tmp157euc55.ts(28,5): error TS2304: Cannot find name ''fizz_buzz''.

    ../../../../tmp/tmp157euc55.ts(29,5): error TS2304: Cannot find name ''get_squares''.

    ../../../../tmp/tmp157euc55.ts(30,5): error TS2304: Cannot find name ''get_divisors''.

    '
  timestamp: 1660332802
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let result = Math.round((m\
    \ - n + 1) / 2 + n);\n  return `0b${result.toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b100'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmn026nb2.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmn026nb2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b100',\n\
    \  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmprpkl62kj.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmprpkl62kj.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum: number = 0;\n    let len: number = 0;\n    if\
    \ (n < m) {\n        for (let i: number = n; i <= m; i++) {\n            sum +=\
    \ i;\n            len++;\n        }\n        return Number(Math.round(sum / len)).toString(2);\n\
    \    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp042_vp6e.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp042_vp6e.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    const result = avg.toString(2);\n\
    \    return `0b${result}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmph7_fken9.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmph7_fken9.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let total: number = 0;\n    let count: number = 0;\n \
    \   for (let i: number = n; i <= m; i++) {\n        total += i;\n        count\
    \ += 1;\n    }\n    let avg: number = Math.round(total / count);\n    let bin:\
    \ string = (avg).toString(2);\n    return \"0b\" + bin;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpjf04_ubj.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjf04_ubj.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    result = Math.round(result\
    \ / (m - n + 1));\n    return \"0b\" + result.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp_eij74i8.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_eij74i8.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n>m) return -1;\n    let mySum: number = 0;\n    for\
    \ (let i: number = n; i <= m; i++) {\n        mySum += i;\n    }\n    let result\
    \ = `0b${Math.round(mySum / (m - n + 1)).toString(2)}`;\n    return result;\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpc161pr6s.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc161pr6s.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    return (Math.round((n\
    \ + m) / 2)).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmppvgm_jlz.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppvgm_jlz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    if (n > m) {\n \
    \       return -1;\n    }\n    for (let i = n; i <= m; i++) {\n        sum +=\
    \ i;\n        count++;\n    }\n    let roundedAvg = Math.round(sum / count);\n\
    \    return \"0b\" + roundedAvg.toString(2);\n}\n\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpge9_fh2t.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpge9_fh2t.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    let avg\
    \ = Math.round((n + m) / 2);\n    return \"0b\" + avg.toString(2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp3d1n2h9m.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3d1n2h9m.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum: number = n + m;\n    if (n >= m) {\n        return\
    \ -1;\n    }\n    if (sum % 2 === 0) {\n        let avg = sum / 2;\n        let\
    \ binary = Number(avg).toString(2);\n        return \"0b\" + binary;\n    } else\
    \ {\n        let avg = Math.round(sum / 2);\n        let binary = Number(avg).toString(2);\n\
    \        return \"0b\" + binary;\n    }\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmppzpk04oz.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmppzpk04oz.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332803
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  let sum: number = 0;\n  if (n > m) {\n    return -1;\n \
    \ }\n  for (let i: number = n; i <= m; i++) {\n    sum += i;\n  }\n  return (Math.round(sum\
    \ / (m - n + 1))).toString(2);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2mceixwq.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2mceixwq.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332805
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return \"0b\" + avg.toString(2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp7d3w9e8g.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7d3w9e8g.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332805
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let result = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        result += i;\n    }\n    result = Math.round(result\
    \ / (m - n + 1));\n    return \"0b\" + result.toString(2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmphthikt5g.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmphthikt5g.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332805
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    let sum\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n\n    const\
    \ average = Math.round(sum / (m - n + 1));\n    return `0b${average.toString(2)}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmptu27741f.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmptu27741f.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332805
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ \"0b\" + (Math.round(sum / (m - n + 1))).toString(2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpu6dp1w2n.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu6dp1w2n.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  const n_ave = n + Math.round((m\
    \ - n) / 2);\n  return n_ave.toString(2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpgy8fbhku.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgy8fbhku.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // Your code here\n    if (n > m) return -1;\n    return\
    \ Number(n + m).toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'110'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpiuqkxey2.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiuqkxey2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '110',\n \
    \ expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '110

    -1

    11110

    110101

    '
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = (n + m) / 2;\n  \
    \  return sum % 1 == 0 ?  `0b${sum.toString(2)}` : -1;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp0lpfd6qp.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0lpfd6qp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    -1

    '
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    let count = 1;\n    for (let i = n + 1; i <= m; i++) {\n        sum\
    \ += i;\n        count++;\n    }\n    let avg = sum / count;\n    let roundedAvg\
    \ = Math.round(avg);\n    return `0b${roundedAvg.toString(2)}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp9ppj3nwr.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9ppj3nwr.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp8c8ujl9g.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8c8ujl9g.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    return +(Math.round((n + m)\
    \ / 2)).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n'0b11'\n    at test (/tmp/tmp_jxvl7ha.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_jxvl7ha.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum /\
    \ (m - n + 1));\n  return (avg).toString(2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmptz95dc4t.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptz95dc4t.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  //Write your solution here\n  let result: number = n;\n\
    \  let is_reverse: boolean = false;\n  if (n > m) {\n    const temp: number =\
    \ n;\n    n = m;\n    m = temp;\n    is_reverse = true;\n  }\n  for (let i: number\
    \ = n; i < m; i++) {\n    result += i;\n  }\n  result = Math.round(result / (m\
    \ - n + 1));\n  if (is_reverse) {\n    return -1;\n  }\n  return `0b${result.toString(2)}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b10'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpri1n9744.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpri1n9744.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b10',\n\
    \  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const avg = Math.round((n +\
    \ m) / 2);\n    return `0b${avg.toString(2)}`;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpk497g1v1.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk497g1v1.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332792
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // add your code here\n    if (n > m) {\n        return\
    \ -1;\n    }\n    let num = (n + m) / 2;\n    return `0b${Math.round(num).toString(2)}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpi_wrci2d.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi_wrci2d.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332807
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for\
    \ (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum /\
    \ (m - n + 1));\n  return '0b' + avg.toString(2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpr_dh00uw.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr_dh00uw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let avg = Math.round((n + m)\
    \ / 2);\n    return \"0b\" + avg.toString(2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpbg3elycf.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbg3elycf.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n <= m) {\n        return ((n + m) / 2) | 0;\n   \
    \ } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n705\n\nshould\
    \ loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmpcy2jneg1.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcy2jneg1.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 705,\n  expected:\
    \ '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  return (Math.round((n\
    \ + m) / 2)).toString(2);\n}\n\nexport { rounded_avg };\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:27056) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpijr3zbx_.js:20\nexport { rounded_avg\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ n;\n    for (let i = n; i < m; i++) {\n        sum += i;\n    }\n    const avg\
    \ = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\n\
    console.log(rounded_avg(10, 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b10'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpfe8g21a1.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfe8g21a1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b10',\n\
    \  expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1110

    '
  timestamp: 1660332807
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const sum\
    \ = n + m;\n    const avg = Math.round(sum / 2);\n    return avg.toString(2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpbduesjvg.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbduesjvg.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332807
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n\tif (n > m) {\n\t\treturn -1;\n\t}\n\telse {\n\t\treturn\
    \ \"0b\" + Math.round((n + m) / 2).toString(2);\n\t}\n}\n\nexport { rounded_avg\
    \ }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:27085) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmp10p0ii5c.js:22\nexport { rounded_avg\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332806
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = n;\n    for (let\
    \ i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    return `0b${Math.round(sum\
    \ / (m - n + 1)).toString(2)}`;\n}\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp53g09k1n.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp53g09k1n.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    0b11

    0b1111

    0b11011

    '
  timestamp: 1660332807
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  const sum: number =\
    \ n + m;\n  const average: number = Math.round(sum / 2);\n  return `0b${average.toString(2)}`;\n\
    }\n\nexport { rounded_avg };\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "(node:27168) Warning: To load an ES module, set \"type\": \"module\" in\
    \ the package.json or use the .mjs extension.\n(Use `node --trace-warnings ...`\
    \ to show where the warning was created)\n/tmp/tmpfviagsvu.js:22\nexport { rounded_avg\
    \ };\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332807
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    let i = n;\n\
    \    while (i <= m) {\n        sum += i;\n        i++;\n    }\n    return Number.parseInt(sum\
    \ / (m - n + 1) + \"\").toString(2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp9sxe86nm.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9sxe86nm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332807
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    return \"0b\" + Math.round(sum\
    \ / (m - n + 1)).toString(2);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpo2hginbl.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo2hginbl.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = Math.round((n + m) / 2);\n    if (n > m) {\n\
    \        return -1;\n    }\n    return \"0b\" + avg.toString(2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpba3mvwg2.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpba3mvwg2.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332808
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg:\
    \ number = Math.round((n + m) / 2);\n    const bianry: string = avg.toString(2);\n\
    \    return `0b${bianry}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmplqhyqced.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmplqhyqced.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332809
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    if (n > m) {\n        return -1;\n \
    \   }\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ avg = Math.round(sum / (m - n + 1));\n    const result = avg.toString(2);\n\
    \    return `0b${result}`;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpxg3xqfrt.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxg3xqfrt.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332809
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n>m) return -1;\n    const roundedAvg = Math.round((n+m)/2);\n\
    \    return `0b${roundedAvg.toString(2)}`;\n}\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp9zp4y0mj.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9zp4y0mj.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332809
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let sum = 0;\n    let count = 0;\n    let n_num = n;\n\
    \    let m_num = m;\n    let n_bin = \"\";\n    let m_bin = \"\";\n    if (n >\
    \ m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n      \
    \  sum += i;\n        count++;\n    }\n    let avg = Math.round(sum / count);\n\
    \    n_bin = n_num.toString(2);\n    m_bin = m_num.toString(2);\n    return `0b${avg}`;\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b3'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp7gp3a24t.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gp3a24t.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b3',\n \
    \ expected: '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b3

    -1

    0b15

    0b27

    '
  timestamp: 1660332809
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let rounded_average = Math.round((n + m) / 2);\n    if\
    \ (n > m) {\n        return -1;\n    } else {\n        return \"0b\" + rounded_average.toString(2);\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp3ecxwtwv.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3ecxwtwv.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332809
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const half:\
    \ number = Math.round((n + m) / 2);\n    return half.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpzx64_3t0.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzx64_3t0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n>m) return -1;\n    const avg=Math.round((n+m)/2);\n\
    \    return '0b'+avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmppy7ycf3x.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmppy7ycf3x.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let rounded_sum\
    \ = Math.round((n + m) / 2);\n    return (rounded_sum.toString(2));\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp6u5u4qrr.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6u5u4qrr.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332810
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  const sum = n + m;\n\
    \  const avg = Math.round(sum / 2);\n  return `0b${avg.toString(2)}`;\n}\n\ndescribe('rounded_avg',\
    \ () => {\n  it('should return \"0b11\"', () => {\n    expect(rounded_avg(1, 5)).toEqual('0b11');\n\
    \  });\n  it('should return \"-1\"', () => {\n    expect(rounded_avg(7, 5)).toEqual(-1);\n\
    \  });\n  it('should return \"0b1111\"', () => {\n    expect(rounded_avg(10, 20)).toEqual('0b1111');\n\
    \  });\n  it('should return \"0b11010\"', () => {\n    expect(rounded_avg(20,\
    \ 33)).toEqual('0b11010');\n  });\n});\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmp9l0th9yc.ts(23,1): error TS2582: Cannot find name ''describe''.
    Do you need to install type definitions for a test runner? Try `npm i --save-dev
    @types/jest` or `npm i --save-dev @types/mocha`.

    ../../../../tmp/tmp9l0th9yc.ts(24,3): error TS2582: Cannot find name ''it''. Do
    you need to install type definitions for a test runner? Try `npm i --save-dev
    @types/jest` or `npm i --save-dev @types/mocha`.

    ../../../../tmp/tmp9l0th9yc.ts(25,5): error TS2304: Cannot find name ''expect''.

    ../../../../tmp/tmp9l0th9yc.ts(27,3): error TS2582: Cannot find name ''it''. Do
    you need to install type definitions for a test runner? Try `npm i --save-dev
    @types/jest` or `npm i --save-dev @types/mocha`.

    ../../../../tmp/tmp9l0th9yc.ts(28,5): error TS2304: Cannot find name ''expect''.

    ../../../../tmp/tmp9l0th9yc.ts(30,3): error TS2582: Cannot find name ''it''. Do
    you need to install type definitions for a test runner? Try `npm i --save-dev
    @types/jest` or `npm i --save-dev @types/mocha`.

    ../../../../tmp/tmp9l0th9yc.ts(31,5): er'
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  return '0b' + Math.round((n\
    \ + m) / 2).toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpciuap5si.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpciuap5si.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let average = Math.round((n + m) / 2);\n    return (average\
    \ === n || average === m) ? `0b${average.toString(2)}` : -1;\n}\n\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\nconsole.log(rounded_avg(20, 22));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n'0b11'\n    at test (/tmp/tmppwcvz2kz.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppwcvz2kz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    -1

    -1

    -1

    -1

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    return -1;\n}\nconsole.log(rounded_avg(1, 5)) //\"0b11\"\
    \nconsole.log(rounded_avg(7, 5)) //-1\nconsole.log(rounded_avg(10, 20)) //\"0b1111\"\
    \nconsole.log(rounded_avg(20, 33)) //\"0b11010\"\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n'0b11'\n    at test (/tmp/tmp_k7y4lji.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_k7y4lji.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    -1

    -1

    -1

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg\
    \ = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n}\n\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp0ictqpm3.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0ictqpm3.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    const average\
    \ = Math.round((n + m) / 2);\n    return average.toString(2);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmphmwnoet1.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphmwnoet1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let total\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        total += i;\n    }\n    const\
    \ result = Math.round(total / (m - n + 1));\n    return \"0b\" + result.toString(2);\n\
    }\n\nconsole.log(rounded_avg(10, 20)); // 0b1111\nconsole.log(rounded_avg(20,\
    \ 33)); // 0b11010\nconsole.log(rounded_avg(7, 5)); // -1\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp2k6xojdd.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2k6xojdd.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    0b11011

    -1

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let avg =\
    \ Math.round((n + m) / 2);\n    return avg.toString(2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp3ewu1cfy.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ewu1cfy.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const num\
    \ = Math.round((n + m) / 2);\n    return `0b${num.toString(2)}`;\n}\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\nconsole.log(rounded_avg(7, 5));\n\
    console.log(rounded_avg(1, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmps2v3wgrg.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmps2v3wgrg.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    0b11011

    -1

    0b11

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  let avg: number = Math.round((n\
    \ + m) / 2);\n  return \"0b\" + avg.toString(2);\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmptkqondkj.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmptkqondkj.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let avg = Math.round((n + m)\
    \ / 2);\n    let result = avg.toString(2);\n    return `0b${result}`;\n}\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpiyzmfzwi.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiyzmfzwi.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    0b11

    -1

    0b11011

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    //throw new Error(\"Method not implemented.\");\n    var\
    \ sum = 0;\n    var bin = \"\";\n    if (n < m) {\n        for (var i = n; i <=\
    \ m; i++) {\n            sum += i;\n        }\n        var avg = Math.round(sum\
    \ / (m - n + 1));\n        bin = avg.toString(2);\n        bin = \"0b\" + bin;\n\
    \        return bin;\n    }\n    else {\n        return -1;\n    }\n}\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp59328vli.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp59328vli.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    0b1111

    0b11011

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    const\
    \ average = Math.round(sum / (m - n + 1));\n    return average.toString(2);\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpexu3ws4p.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpexu3ws4p.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const avg\
    \ = Math.round((n + m) / 2);\n    return '0b' + avg.toString(2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp2voaq9b5.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2voaq9b5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332810
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let average:\
    \ number = Math.round((n + m) / 2);\n    return \"0b\" + average.toString(2);\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp767ah6dg.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp767ah6dg.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332812
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    if (n === m) return n.toString(2);\n\
    \    const average = Math.round((n + m) / 2);\n    return average.toString(2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpwgsj7s_h.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwgsj7s_h.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332812
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const average\
    \ = Math.round((m + n) / 2);\n    return `0b${average.toString(2)}`;\n}\nconsole.log(rounded_avg(10,\
    \ 20));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpfp73bwzj.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfp73bwzj.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    '
  timestamp: 1660332812
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let average = Math.round((n\
    \ + m) / 2);\n    return `0b${average.toString(2)}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpmz7l6lwh.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmz7l6lwh.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332812
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let avg = 0;\n    let cnt =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        avg += i;\n        cnt++;\n\
    \    }\n    avg = Math.round(avg / cnt);\n    return '0b' + avg.toString(2);\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp2443h08h.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2443h08h.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    0b11011

    '
  timestamp: 1660332812
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    const avg = Math.round((n + m) / 2);\n    return (n >\
    \ m) ? -1 : avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmm47knm4.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmm47knm4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332813
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let average: number = Math.round((n + m) / 2);\n    if\
    \ (n > m) {\n        return -1;\n    } else {\n        return (`0b${average.toString(2)}`);\n\
    \    }\n}\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\n\
    console.log(rounded_avg(20, 33));\nconsole.log(rounded_avg(30, 33));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp4j3frml1.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4j3frml1.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '-1

    0b1111

    0b11011

    0b100000

    '
  timestamp: 1660332813
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    const avg = Math.round((n + m) / 2);\n    return avg >=\
    \ n && avg <= m ? `0b${(avg).toString(2)}` : -1;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    console.log(rounded_avg(7, 5));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpcs4u0a01.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcs4u0a01.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    0b1111

    0b11011

    -1

    '
  timestamp: 1660332813
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n\n    let average\
    \ = 0;\n    for (let i = n; i <= m; i++) {\n        average += i;\n    }\n   \
    \ average = Math.round(average / (m - n + 1));\n    return `0b${average.toString(2)}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp6st3aq1z.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6st3aq1z.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332813
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    const avg = Math.round((n + m) / 2);\n    return n > m\
    \ ? -1 : `0b${avg.toString(2)}`;\n}\nconsole.log(rounded_avg(20, 33));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp1g2tvi1z.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1g2tvi1z.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n>m) return -1;\n    const avg = Math.round((n+m)/2);\n\
    \    const binary = Math.round(avg).toString(2);\n    return '0b' + binary;\n\
    }\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpnhq7d8qw.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnhq7d8qw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332813
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    return `0b${Math.round((n +\
    \ m) / 2).toString(2)}`;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmptj5t6cvg.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmptj5t6cvg.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const sum\
    \ = n + m;\n    const avg = sum / 2;\n    const rounded = Math.round(avg);\n \
    \   const binary = rounded.toString(2);\n    return `0b${binary}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp6jgwe4xw.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6jgwe4xw.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const sum = ((n + m) * (m -\
    \ n + 1)) / 2;\n    const avg = Math.round(sum / (m - n + 1));\n    return \"\
    0b\" + avg.toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp67wczqiz.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp67wczqiz.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let result = ((n + m) / 2);\n\
    \    let rounded_result = Math.round(result);\n    let binary_result = (rounded_result\
    \ >>> 0).toString(2);\n    return \"0b\" + binary_result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpjeaxdtym.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjeaxdtym.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  var arr: number[] =\
    \ [];\n  var avg: number = 0;\n  for (var i = n; i <= m; i++) {\n    arr.push(i);\n\
    \  }\n  console.log(arr);\n  var binarr: string[] = [];\n  for (var elem of arr)\
    \ {\n    binarr.push(elem.toString(2));\n  }\n  for (var elem of binarr) {\n \
    \   avg += parseInt(elem, 2);\n  }\n  avg = Math.round(avg / binarr.length);\n\
    \  return \"0b\" + avg.toString(2);\n}\nconsole.log(rounded_avg(10, 20));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpuam4kyn1.ts(28,12): error TS2403: Subsequent variable
    declarations must have the same type.  Variable ''elem'' must be of type ''number'',
    but here has type ''string''.

    ../../../../tmp/tmpuam4kyn1.ts(29,21): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    const floor = Math.floor((n\
    \ + m) / 2);\n    return `0b${floor.toString(2)}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmpyjapmljc.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyjapmljc.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let avg = Math.round((m + n)\
    \ / 2);\n    return \"0b\" + avg.toString(2);\n}\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpqltwjeq2.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqltwjeq2.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  const average = Math.round((n\
    \ + m) / 2);\n  return `0b${average.toString(2)}`;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp1mla7123.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1mla7123.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  return n < m ? (Math.round((n + m) / 2)).toString(2) : -1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2jcm0ury.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2jcm0ury.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let result = Math.round((n + m) / 2);\n    return result\
    \ == Infinity ? -1 : `0b${result.toString(2)}`;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpvron0cd_.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvron0cd_.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    // your code here\n    if (n > m) {\n        return -1;\n\
    \    }\n    let num = Math.floor((n + m) / 2);\n    return \"0b\" + num.toString(2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1011000001'\n\
    \nshould loosely deep-equal\n\n'0b1011000010'\n    at test (/tmp/tmpvo74x60p.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvo74x60p.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1011000001',\n\
    \  expected: '0b1011000010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332814
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let total: number = 0;\n    let avg: number = 0;\n   \
    \ let result: string;\n    if (n > m) {\n        return -1;\n    } else {\n  \
    \      for (let i: number = n; i <= m; i++) {\n            total += i;\n     \
    \   }\n        avg = Math.round(total / (m - n + 1));\n        result = avg.toString(2);\n\
    \        return \"0b\" + result;\n    }\n}\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpxtm49pzr.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxtm49pzr.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1660332814
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  if (n > m) {\n    return -1;\n  }\n  const a = (n + m) /\
    \ 2;\n  const a_r = Math.round(a);\n  return (a_r >>> 0).toString(2);\n}\ntest(rounded_avg,\
    \ [1, 5], \"0b11\");\ntest(rounded_avg, [7, 5], -1);\ntest(rounded_avg, [10, 20],\
    \ \"0b1111\");\ntest(rounded_avg, [20, 33], \"0b11010\");\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpcvu8rbvt.ts(22,6): error TS2554: Expected 0 arguments,
    but got 3.

    ../../../../tmp/tmpcvu8rbvt.ts(23,6): error TS2554: Expected 0 arguments, but
    got 3.

    ../../../../tmp/tmpcvu8rbvt.ts(24,6): error TS2554: Expected 0 arguments, but
    got 3.

    ../../../../tmp/tmpcvu8rbvt.ts(25,6): error TS2554: Expected 0 arguments, but
    got 3.

    '
  timestamp: 1660332814
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    return Number.parseInt(sum\
    \ / (m - n + 1), 10).toString(2);\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: SyntaxError
  stderr: ''
  stdout: '../../../../tmp/tmpmk4dpc7i.ts(20,28): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660332815
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n  const avg = Math.round((n + m) / 2);\n  if (n > m) {\n \
    \   return -1;\n  }\n  return avg.toString(2);\n}\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpduvgfono.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpduvgfono.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1111

    11011

    '
  timestamp: 1660332815
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    const average\
    \ = Math.round((n + m) / 2);\n    return Number(average).toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpjmhj88eo.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjmhj88eo.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332815
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) return -1;\n    let sum = 0;\n    for (let\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    const avg = Math.round(sum\
    \ / (m - n + 1));\n    return avg.toString(2);\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmp2c6ym98g.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2c6ym98g.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1660332815
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    if (n > m) {\n        return -1;\n    }\n    let sum =\
    \ 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return\
    \ (Math.round(sum / (m - n + 1))).toString(2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpezfuo_m9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpezfuo_m9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332565
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number):\
    \ string| number {\n    let avg = (n + m) / 2;\n    if (n > m) {\n        return\
    \ -1;\n    } else {\n        return \"0b\" + Math.round(avg).toString(2);\n  \
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp3ipkr8xh.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3ipkr8xh.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660332815
