name: HumanEval_133_sum_squares
language: ts
prompt: "//You are given an array of numbers.\n// You need to return the sum of squared\
  \ numbers in the given array,\n// round each element in the array to the upper int(Ceiling)\
  \ first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0,\
  \ 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n\
  // 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4,\
  \ 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n\
  \  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4,\
  \ 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n\
  \  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["    const add = (a: number, b: number) => a + b;\n    return lst.map(x\
    \ => Math.ceil(x)).map(x => x * x).reduce(add);\n}\n", "    let x: number = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        x += Math.ceil(lst[i]) *\
    \ Math.ceil(lst[i]);\n    }\n    return x;\n}\nconsole.log(sum_squares([1.0, 2.0,\
    \ 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n\
    \        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return sum;\n\
    }\n", "  let sum = 0;\n  for (let num of lst) {\n    sum += Math.ceil(num) **\
    \ 2;\n  }\n  return sum;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "  return lst.map(x\
    \ => Math.ceil(x)).map(x => x ** 2).reduce((a, b) => a + b);\n}", "  return lst.map(Math.ceil).map(e\
    \ => e * e).reduce((sum, cur) => sum + cur);\n}\n\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n",
  "  return lst.map(n => Math.ceil(n)).reduce((a, b) => a + b ** 2, 0);\n}\n", " \
    \   let dSum = 0;\n    for (let item of lst) {\n        dSum += Math.pow(Math.ceil(item),\
    \ 2);\n    }\n    return dSum;\n}\n", "    let result = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        let num = Math.ceil(lst[i]);\n        result\
    \ += Math.pow(num, 2);\n    }\n    return result;\n}\n", "    return lst.map(x\
    \ => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((a, b) => a + b);\n\
    }\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    return lst.map(Math.ceil).map(x\
    \ => x*x).reduce((x,y) => x+y, 0);\n}\n", "  let result = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    result += Math.ceil(lst[i]) ** 2;\n  }\n  return\
    \ result;\n}\n", "  return lst.map(Math.ceil).map(square).reduce(add);\n}\n",
  "    let result = 0;\n    lst.forEach(value => {\n        result += Math.pow(Math.ceil(value),\
    \ 2);\n    });\n    return result;\n}\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((x, y) => x + y, 0);\n}\n", "    const result = lst.map(x =>\
    \ Math.ceil(x))\n        .map(x => x * x)\n        .reduce((a, b) => a + b, 0);\n\
    \    return result;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    return lst.map(x\
    \ => Math.ceil(x)).map(x => x ** 2).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "  let sum = 0;\n  lst.forEach(function(element){\n      sum\
    \ += Math.ceil(element)**2;\n  });\n  return sum;\n}\n", "    return lst.map(el\
    \ => Math.ceil(el)).map(el => el * el).reduce((sum, el) => sum + el);\n}\n", " \
    \ // Your code here\n  return lst.map(Math.ceil).reduce((acc, x) => acc + x **\
    \ 2, 0);\n}\n", "    let result = 0;\n    let list = lst.map(Math.ceil);\n   \
    \ for (let i = 0; i < list.length; i++) {\n        result += list[i] ** 2;\n \
    \   }\n    return result;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));", " \
    \   return lst.map(function (n) {\n        return Math.ceil(n);\n    }).reduce(function\
    \ (a, b) {\n        return a + b * b;\n    }, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((acc, x) => acc\
    \ + x, 0);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    return lst.map(Math.ceil).map(e\
    \ => e * e).reduce((acc, cur) => acc + cur);\n}\n\n", "    let squaredArray =\
    \ lst.map(function (n) {\n        return Math.ceil(n);\n    });\n    let squared\
    \ = squaredArray.map(function (n) {\n        return n * n;\n    });\n    let sum\
    \ = squared.reduce(function (a, b) {\n        return a + b;\n    });\n    return\
    \ sum;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "    let newArr\
    \ = lst.map(Math.ceil);\n    return newArr.reduce((acc, elem) => acc + elem *\
    \ elem, 0);\n}", "    let ret: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        ret += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return ret;\n\
    }\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0,\
    \ 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "  let result =\
    \ 0;\n  for (let x of lst) {\n    result += Math.pow(Math.ceil(x), 2);\n  }\n\
    \  return result;\n}\n", "    return lst.map(n => Math.ceil(n)).map(n => n * n).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  let squared: number[] = lst.map(x => Math.ceil(x));\n\
    \  let sum: number = 0;\n  for (let i = 0; i < squared.length; i++) {\n    sum\
    \ += squared[i] * squared[i];\n  }\n  return sum;\n}\n", "  return lst.map(el\
    \ => Math.ceil(el)).reduce((acc, cur) => acc + cur ** 2, 0);\n}\n\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let output: number = 0;\n    for (let num of lst) {\n  \
    \      output += Math.ceil(num) ** 2;\n    }\n    return output;\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum: number = 0;\n    lst.forEach(function (value) {\n\
    \        sum += Math.ceil(value) ** 2;\n    });\n    return sum;\n}\n\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "    return lst.map(x => Math.ceil(x))\n        .map(x => x\
    \ * x)\n        .reduce((x, y) => x + y);\n}\n", "  return lst.map(n => Math.ceil(n)).reduce((a,\
    \ b) => a + b * b, 0);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "  return lst.map(Math.ceil).map(x\
    \ => x*x).reduce((a,b) => a+b, 0);\n}\n", "    let ceil: number[] = lst.map(x\
    \ => Math.ceil(x));\n    let square: number[] = ceil.map(x => x * x);\n    let\
    \ sum: number = square.reduce((a, b) => a + b);\n    return sum;\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "    return lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((x,\
    \ y) => x + y, 0);\n}\n", "    return lst.map(Math.ceil).map(x => x*x).reduce((prev,\
    \ curr) => prev + curr);\n}\n", "  return lst.map(e => Math.ceil(e)).map(e =>\
    \ e * e).reduce((a, b) => a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((x, y) => x + y);\n}\n", "  return lst.map(el => Math.ceil(el))\n\
    \    .map(el => el * el)\n    .reduce((acc, cur) => acc + cur, 0);\n}", "    return\
    \ lst.map(Math.ceil).map(square).reduce(add);\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i]) ** 2;\n\
    \    }\n    return sum;\n}\n", "  return lst.map(Math.ceil).map(e => e ** 2).reduce((sum,\
    \ e) => sum + e, 0);\n}\n", "  return Math.round(\n    lst.reduce((sum, el) =>\
    \ sum + Math.ceil(el) ** 2, 0)\n  );\n}\n\nconsole.log(sum_squares([1.0, 2.0,\
    \ 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum = 0;\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return\
    \ sum;\n}\n\ntest(sum_squares([1.0, 2.0, 3.0]), 14);\ntest(sum_squares([1.0, 4.0,\
    \ 9.0]), 98);\ntest(sum_squares([1.0, 3.0, 5.0, 7.0]), 84);\ntest(sum_squares([1.4,\
    \ 4.2, 0.0]), 29);\ntest(sum_squares([-2.4, 1.0, 1.0]), 6);", "    return lst.map(x\
    \ => Math.ceil(x)).map(x => x * x).reduce((a, b) => a + b);\n}\n\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\nconsole.log(sum_squares([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,\
    \ 9.0, 10.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0, -2.0, 2.0, 2.0, 2.0,\
    \ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,\
    \ 2.0, 2", "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result\
    \ += Math.ceil(lst[i]) ** 2;\n  }\n  return result;\n}\n", "    return lst.map(el\
    \ => Math.ceil(el)).map(el => el ** 2).reduce((a, b) => a + b);\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "  return lst.map(Math.ceil).map(n => n * n).reduce((a, b) =>\
    \ a + b, 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let element = lst[i];\n        let num = Math.ceil(element);\n  \
    \      let squared = num * num;\n        sum += squared;\n    }\n    return sum;\n\
    }\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0,\
    \ 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "  let result =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += Math.ceil(lst[i])\
    \ ** 2;\n  }\n  return result;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "  const nums = lst.map(num => Math.ceil(num));\n  return nums.reduce((sum,\
    \ num) => sum + Math.pow(num, 2), 0);\n}", "    let squaredArray = lst.map(Math.ceil);\n\
    \    return squaredArray.reduce((sum, current) => sum + Math.pow(current, 2),\
    \ 0);\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "    let a=0;\n\
    \    for(let i=0;i<lst.length;i++){\n        a+=Math.ceil(lst[i])**2;\n    }\n\
    \    return a;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));", "    return lst.map(Math.ceil).map(x\
    \ => x * x).reduce((a, b) => a + b, 0);\n}\n", "    let sum: number = 0;\n   \
    \ for (let i: number = 0; i < lst.length; i++) {\n        lst[i] = Math.ceil(lst[i]);\n\
    \        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    return lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((x,\
    \ y) => x + y);\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "  return lst.map(e\
    \ => Math.ceil(e)).map(e => e * e).reduce((a, b) => a + b);\n}\n", "  return lst.map(x\
    \ => Math.ceil(x))\n    .map(x => x * x)\n    .reduce((a, b) => a + b, 0);\n}\n\
    \nexport function f(lst: number[]): number {\n  return sum_squares(lst);\n}",
  "  return lst.map(v => Math.ceil(v)).reduce((a, b) => a + b * b, 0);\n}", "    return\
    \ lst.map(v => Math.ceil(v))\n        .map(v => v ** 2)\n        .reduce((a, b)\
    \ => a + b, 0);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    let res: number\
    \ = 0;\n    for (let elem of lst) {\n        res += Math.ceil(elem) ** 2;\n  \
    \  }\n    return res;\n}\n", "    let result = 0;\n    lst.forEach(function (element)\
    \ {\n        result += Math.pow(Math.ceil(element), 2);\n    });\n    return result;\n\
    }\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0,\
    \ 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    let arr = lst.map(x\
    \ => Math.ceil(x));\n    let total = 0;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        total += arr[i] * arr[i];\n    }\n    return total;\n}\n", "  return\
    \ lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((a, b) => a + b);\n}\n",
  "    let list: number[] = [];\n    let result: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        list.push(Math.ceil(lst[i]));\n    }\n\
    \    for (let i: number = 0; i < list.length; i++) {\n        result += Math.pow(list[i],\
    \ 2);\n    }\n    return result;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "    return lst.map(function (value) {\n        return Math.ceil(value);\n\
    \    }).reduce(function (prev, current) {\n        return prev + Math.pow(current,\
    \ 2);\n    }, 0);\n}", "  return 0;\n}\n\ndescribe(\"sum_squares\", () => {\n\
    \  it(\"should pass a few examples\", () => {\n    expect(sum_squares([1.0, 2.0,\
    \ 3.0])).toBe(14);\n    expect(sum_squares([1.0, 4.0, 9.0])).toBe(98);\n    expect(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0])).toBe(84);\n    expect(sum_squares([1.4, 4.2, 0.0])).toBe(29);\n\
    \    expect(sum_squares([-2.4, 1.0, 1.0])).toBe(6);\n  });\n});", "    return\
    \ lst.map(num => Math.ceil(num)).reduce((acc, curr) => acc + curr ** 2, 0);\n\
    }\n", "    return Math.round(lst.reduce((a, b) => a + b, 0) ** 2);\n}", "  let\
    \ lst_int = lst.map(num => Math.ceil(num));\n  let sum = 0;\n  for (let i = 0;\
    \ i < lst_int.length; i++) {\n    sum += lst_int[i] * lst_int[i];\n  }\n  return\
    \ sum;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n", "  return lst.map(num\
    \ => Math.ceil(num))\n            .map(num => num * num)\n            .reduce((a,\
    \ b) => a + b);\n}", "    return Math.round(lst.reduce((total, el) => total +\
    \ el**2, 0));\n}\n", "  return lst.map(n => Math.ceil(n)).reduce((a,b) => a +\
    \ b**2, 0);\n}\n", "  var res = 0;\n  for (var i = 0; i < lst.length; i++) {\n\
    \    res += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return res;\n}\n", "    //return\
    \ Math.pow(lst.map(Math.ceil), 2).reduce((x, y) => x + y);\n    return Math.pow(lst.map(i\
    \ => Math.ceil(i)), 2).reduce((x, y) => x + y);\n}\n", "  return lst.map(Math.ceil).map(x\
    \ => x*x).reduce((a,b) => a+b);\n}\n", "  return lst.map(i => Math.ceil(i)).reduce((acc,\
    \ v) => acc + v * v, 0);\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "    let x = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        x += Math.ceil(lst[i]) **\
    \ 2;\n    }\n    return x;\n}\n", "    let result = 0;\n    lst.forEach( (element)\
    \ => {\n        result += Math.ceil(element) ** 2;\n    });\n    return result;\n\
    }\nlet num_lst = [1.0, 2.0, 3.0];\nconsole.log(sum_squares(num_lst));\nlet num_lst1\
    \ = [1.0, 4.0, 9.0];\nconsole.log(sum_squares(num_lst1));\nlet num_lst2 = [1.0,\
    \ 3.0, 5.0, 7.0];\nconsole.log(sum_squares(num_lst2));\nlet num_lst3 = [1.4, 4.2,\
    \ 0.0];\nconsole.log(sum_squares(num_lst3));\nlet num_lst4 = [-2.4, 1.0, 1.0];\n\
    console.log(sum_squares(num_lst4));", "  let result = 0;\n  for (let index = 0;\
    \ index < lst.length; index++) {\n    result += Math.ceil(lst[index]) ** 2;\n\
    \  }\n  return result;\n}\n", "    return lst.map(function (num) {\n        return\
    \ Math.ceil(num);\n    }).reduce(function (sum, num) {\n        return sum + Math.pow(num,\
    \ 2);\n    }, 0);\n}\n", "  return lst.map(Math.ceil).map(x => x * x).reduce((x,\
    \ y) => x + y);\n}\n", "    return lst.map(Math.ceil).map(x => x * x).reduce((acc,\
    \ x) => acc + x, 0);\n}\n", "  let sum: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    sum += lst[i] ** 2;\n  }\n  return sum;\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).map(x => x * x).reduce((a, b) => a + b);\n}", "    return lst.map(x\
    \ => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((a, b) => a + b,\
    \ 0);\n}\n\n", "  return lst.map(Math.ceil).map(val => val ** 2).reduce((a, b)\
    \ => a + b);\n}\n", "  return lst.map(n => Math.ceil(n)).reduce((x, y) => x +\
    \ y * y, 0);\n}\n", "    let lst_map = lst.map(x => Math.ceil(x))\n    return\
    \ lst_map.reduce((acc, x) => acc + x * x, 0)\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    const x = Math.ceil(lst[i]);\n    sum +=\
    \ x * x;\n  }\n  return sum;\n}\n", "  return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((a, b) => a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((x, y) => x + y);\n}", "    return lst.map(Math.ceil).map(x\
    \ => x * x).reduce((x, y) => x + y, 0);\n}\n", "  return lst.map(Math.ceil).map(x\
    \ => x ** 2).reduce((a, b) => a + b);\n}\n\nexport { sum_squares };", "    return\
    \ lst.map(x => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((x, y)\
    \ => x + y, 0);\n}", "  return lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((acc,\
    \ x) => acc + x, 0);\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}\n", "    let\
    \ sum = 0;\n    for (let element of lst) {\n        sum += Math.ceil(element)\
    \ ** 2;\n    }\n    return sum;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\
    \ //14\nconsole.log(sum_squares([1.0, 4.0, 9.0])); //98\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0])); //84\nconsole.log(sum_squares([1.4, 4.2, 0.0])); //29\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0])); //6", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n", " \
    \ let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += Math.ceil(lst[i])\
    \ ** 2;\n  }\n  return result;\n}", "    let sum: number = 0;\n    lst.forEach(function\
    \ (el) {\n        sum += Math.ceil(el) ** 2;\n    });\n    return sum;\n}\n\n\
    console.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0,\
    \ 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    return lst.map(Math.ceil).map(Math.pow).reduce((x,\
    \ y) => x + y, 0);\n}\n", "  let sum: number = 0;\n  let isCorrect: boolean =\
    \ true;\n  if (!lst) {\n    isCorrect = false;\n  } else {\n    lst.forEach((el)\
    \ => {\n      if (typeof el !== \"number\") {\n        isCorrect = false;\n  \
    \    }\n    });\n  }\n  if (isCorrect) {\n    lst.forEach((el) => {\n      sum\
    \ += Math.ceil(el) ** 2;\n    });\n  }\n  return sum;\n}\n", "    let result =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return result;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    result += Math.ceil(lst[i]) **\
    \ 2;\n  }\n  return result;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum: number = 0;\n    lst.forEach(function (n: number)\
    \ {\n        n = Math.ceil(n);\n        sum += n * n;\n    });\n    return sum;\n\
    }\n", "    return lst.map(x => Math.ceil(x)).map(x => x * x).reduce((x, y) =>\
    \ x + y, 0);\n}\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    result += Math.ceil(lst[i]) ** 2;\n  }\n  return result;\n}\n", "   \
    \ return lst.map(Math.ceil).map(num => num ** 2).reduce((acc, num) => acc + num);\n\
    }\n", "    let res: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        res += Math.ceil(lst[i]) ** 2;\n    }\n    return res;\n}\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return sum;\n}\n", "  return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((a, b) => a + b);\n}\n", "    let a = lst.map(e => Math.ceil(e));\n\
    \    let b = a.map(e => e * e);\n    let c = b.reduce((a, b) => a + b);\n    return\
    \ c;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "  //List comprehension\n\
    \  let res: number[] = lst.map(v => Math.ceil(v));\n  let total: number = 0;\n\
    \  res.forEach(v => (total += v * v));\n  return total;\n}", "  let result = 0;\n\
    \  lst.forEach(num => {\n    result += Math.pow(Math.ceil(num), 2);\n  });\n \
    \ return result;\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "  return lst.map(Math.ceil).map(x\
    \ => x * x).reduce((a, b) => a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((a, b) => a + b);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x*x).reduce((x,y) => x+y, 0);\n}", "    return lst.map(x => Math.ceil(x))\n\
    \        .map(x => x * x)\n        .reduce((total, current) => total + current,\
    \ 0);\n}\n", "  return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a +\
    \ b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x => x * x).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  return lst.map(Math.ceil).map(x => x * x).reduce((a,\
    \ b) => a + b);\n}", "    return Math.round(lst.reduce((acc, x) => acc + x**2,\
    \ 0));\n}\n", "    return lst.map(x => Math.ceil(x)).map(x => x ** 2).reduce((sum,\
    \ x) => sum + x, 0);\n}\n", "    let sum: number = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return\
    \ sum;\n}\n", "    return lst.map(elem => Math.ceil(elem)).map(elem => elem *\
    \ elem).reduce((a, b) => a + b);\n}\n", "  return lst.map(x => Math.ceil(x)).map(x\
    \ => x * x).reduce((acc, cur) => acc + cur, 0);\n}\n", "    return lst.map(Number.parseFloat).map(Math.ceil).map(x\
    \ => x * x).reduce((a, b) => a + b);\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n",
  "  // let newArr = [];\n  // for (let i = 0; i < lst.length; i++) {\n  //   newArr.push(Math.ceil(lst[i]));\n\
    \  // }\n  let newArr = lst.map(el => Math.ceil(el));\n  return newArr.reduce((acc,\
    \ curr) => acc + Math.pow(curr, 2), 0);\n}\n", "  return lst.map(Math.ceil).map(n\
    \ => n * n).reduce((a, b) => a + b);\n}\n", "  let newArray = lst.map(x => Math.ceil(x));\n\
    \  let sum = 0;\n  for (let number of newArray) {\n    sum += number * number;\n\
    \  }\n  return sum;\n}\n", "    // Using .map() function transform input array\n\
    \    // ...\n    return 0;\n}\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x*x).reduce((acc, x) => acc + x, 0);\n}\nconsole.log(sum_squares([1.0, 2.0,\
    \ 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    return lst.map(Math.ceil).map(x => x * x).reduce((a, b)\
    \ => a + b, 0);\n}\n", "  let result = 0;\n  lst.forEach(el => {\n    let temp\
    \ = Math.ceil(el);\n    result += temp * temp;\n  });\n  return result;\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\n", "  const result = lst.map(Math.ceil).map(value => value * value);\n\
    \  return result.reduce((acc, value) => acc + value, 0);\n}\n", "    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.ceil(lst[i])\
    \ ** 2;\n    }\n    return result;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\nconsole.log('**********************************************************************************');\n",
  "  return lst.map(x => Math.ceil(x))\n    .map(x => x * x)\n    .reduce((acc, x)\
    \ => acc + x);\n}\n", "    return lst.map(n => Math.ceil(n)).map(n => n*n).reduce((a,\
    \ b) => a + b);\n}\n", "  return lst.map(Math.ceil).map(x => x * x).reduce((x,\
    \ y) => x + y);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    let result\
    \ = 0;\n    lst.forEach(l => {\n        result += Math.ceil(l) * Math.ceil(l);\n\
    \    });\n    return result;\n}", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n\
    }\n", "    return lst.map(x => Math.ceil(x)).map(x => x * x).reduce((x, y) =>\
    \ x + y, 0);\n}\n", "    return lst.map(el => Math.ceil(el)).map(el => el * el).reduce((acc,\
    \ el) => acc + el, 0);\n}\n\nlet test1 = [1.0, 2.0, 3.0];\nlet test2 = [1.0, 4.0,\
    \ 9.0];\nlet test3 = [1.0, 3.0, 5.0, 7.0];\nlet test4 = [1.4, 4.2, 0.0];\nlet\
    \ test5 = [-2.4, 1.0, 1.0];\n\nconsole.log(sum_squares(test1));\nconsole.log(sum_squares(test2));\n\
    console.log(sum_squares(test3));\nconsole.log(sum_squares(test4));\nconsole.log(sum_squares(test5));\n",
  "  return lst.map(x => Math.ceil(x))\n    .map(x => x * x)\n    .reduce((x, y) =>\
    \ x + y, 0);\n}\n", "    return lst.map(Math.ceil).map(x => x * x).reduce((acc,\
    \ x) => acc + x, 0);\n}\n", "  let sum = 0;\n  for (let element of lst) {\n  \
    \  sum += Math.ceil(element) ** 2;\n  }\n  return sum;\n}\n", "    return lst.map(x\
    \ => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((x, y) => x + y);\n\
    }\nconsole.log(sum_squares([1.0, 2.0, 3.0]));", "    return lst.map(Math.ceil).map(n\
    \ => n ** 2).reduce((a, b) => a + b);\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "    let result = 0;\n    let exp = 2;\n    let sum = 0;\n\
    \    let ceil = Math.ceil(lst[0]);\n    let floor = Math.floor(lst[0]);\n    if\
    \ (ceil - lst[0] >= 0.5) {\n        sum = Math.pow(floor, exp);\n    } else {\n\
    \        sum = Math.pow(ceil, exp);\n    }\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        let ceil = Math.ceil(lst[i]);\n        let floor = Math.floor(lst[i]);\n\
    \        if (ceil - lst[i] >= 0.5) {\n            sum += Math.pow(floor, exp);\n\
    \        } else {\n            sum += Math.pow(ceil, exp);\n        }\n    }\n\
    \    return sum;\n}\n", "    let sum = 0;\n    for (let num of lst) {\n      \
    \  let upper = Math.ceil(num);\n        sum += upper * upper;\n    }\n    return\
    \ sum;\n}\n", "  return lst.map(Math.ceil).map(x => x ** 2).reduce((x, y) => x\
    \ + y, 0);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "  return lst.map(x\
    \ => Math.ceil(x)).map(x => x * x).reduce((a, b) => a + b, 0);\n}\n", "    let\
    \ result = 0;\n    for (let x of lst) {\n        result += Math.pow(Math.ceil(x),\
    \ 2);\n    }\n    return result;\n}\n", "  return Math.round(lst.reduce((total,\
    \ curr) => total + curr ** 2, 0));\n}", "    let res: number = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        res += Math.pow(Math.ceil(lst[i]), 2);\n\
    \    }\n    return res;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    let result\
    \ = 0;\n    lst.forEach(function (item) {\n        result += Math.ceil(item) *\
    \ Math.ceil(item);\n    });\n    return result;\n}\n", "    return lst.map(Math.ceil).map(x\
    \ => x * x).reduce((x, y) => x + y, 0);\n}\n", "  return lst.map(Math.ceil).map(x\
    \ => x * x).reduce((x, y) => x + y);\n}\n", "    return lst.map(Math.ceil).map(n\
    \ => n*n).reduce((a, b) => a + b, 0);\n}\n\n", "    return lst.map(x => Math.ceil(x)).map(x\
    \ => x ** 2).reduce((x, y) => x + y, 0);\n}\n\nconsole.log(sum_squares([1.0, 2.0,\
    \ 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "    let squared_list = lst.map(n => Math.ceil(n))\n      \
    \                    .map(n => n * n);\n    return squared_list.reduce((x, y)\
    \ => x + y);\n}\n\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const currentNumber = lst[i];\n    const intVal = Math.ceil(currentNumber);\n\
    \    sum += intVal * intVal;\n  }\n  return sum;\n}\n", "  return lst.map(x =>\
    \ Math.ceil(x)).map(x => x * x).reduce((a, b) => a + b, 0);\n}\n", "    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.pow(Math.ceil(lst[i]),\
    \ 2);\n    }\n    return result;\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n\
    console.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0,\
    \ 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));\n", "    return lst.map(e => Math.ceil(e)).map(e => e * e).reduce((a,\
    \ b) => a + b);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x => x * x).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).map(x => x*x).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  return lst.map(Math.ceil).map(x => x ** 2).reduce((x,\
    \ y) => x + y, 0);\n}\n", "    return lst.map(Math.ceil).map(n => n*n).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));", "    const squares\
    \ = lst.map(function (element) {\n        return Math.ceil(element);\n    }).map(function\
    \ (element) {\n        return element * element;\n    });\n    return squares.reduce(function\
    \ (accumulator, element) {\n        return accumulator + element;\n    });\n}\n\
    \n\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ const x = Math.ceil(lst[i]);\n        sum += x * x;\n    }\n    return sum;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum\
    \ += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n", "    return lst.map(Math.ceil).map(x\
    \ => x * x).reduce((x, y) => x + y, 0);\n}\nconsole.log(sum_squares([1.0, 2.0,\
    \ 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum: number = 0;\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            sum += Math.ceil(lst[i]) ** 2;\n\
    \        } else {\n            sum += Math.floor(lst[i]) ** 2;\n        }\n  \
    \  }\n    return sum;\n}\n", "    let sum: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        lst[i] = Math.ceil(lst[i]);\n        sum += lst[i]\
    \ ** 2;\n    }\n    return sum;\n}\n", "    return 0;\n}\n", "    const map =\
    \ lst.map(num => Math.ceil(num))\n    const squared = map.map(num => num ** 2)\n\
    \    return squared.reduce((accum, num) => accum + num)\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0])) // 14\nconsole.log(sum_squares([1.0, 4.0, 9.0])) // 98\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0])) // 84\nconsole.log(sum_squares([1.4, 4.2, 0.0])) // 29\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0])) // 6", "    return lst.map(Math.ceil).map(x => x * x).reduce((x,\
    \ y) => x + y, 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n\
    }\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0,\
    \ 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "    let res:\
    \ number = 0;\n    for (let num of lst) {\n        res += Math.ceil(num) ** 2;\n\
    \    }\n    return res;\n}\n", "    return lst.map(function (n) {\n        return\
    \ Math.ceil(n);\n    }).reduce(function (sum, n) {\n        return sum + n * n;\n\
    \    }, 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    return lst.map(x => Math.ceil(x)).map(x => x * x).reduce((a,\
    \ b) => a + b);\n}\n", "    return lst.map(e => Math.ceil(e)).map(e => e * e).reduce((e1,\
    \ e2) => e1 + e2);\n}\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\n", "    return\
    \ lst.map(x => Math.ceil(x)).map(x => x * x).reduce((x, y) => x + y);\n}\n", " \
    \   return lst.map(x => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((acc,\
    \ cur) => acc + cur);\n}\n", "    return lst.map(v => Math.ceil(v))\n        .map(v\
    \ => v * v)\n        .reduce((a, b) => a + b);\n}\n\nconsole.log(sum_squares([1.0,\
    \ 2.0, 3.0]));\nconsole.log(sum_squares([1.0, 4.0, 9.0]));\nconsole.log(sum_squares([1.0,\
    \ 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4, 4.2, 0.0]));\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0]));", "    let sum: number = 0;\n    lst.forEach(element => {\n   \
    \     sum += Math.ceil(element * element);\n    });\n    return sum;\n}\n", " \
    \   return lst.map(e => Math.ceil(e)).map(e => e * e).reduce((a, b) => a + b);\n\
    }\n\nconsole.log(sum_squares([1.0, 2.0, 3.0]));\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0]));\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0.0]));\nconsole.log(sum_squares([-2.4, 1.0, 1.0]));\n", "    let sum:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let squared:\
    \ number = Math.ceil(lst[i]);\n        squared = squared * squared;\n        sum\
    \ += squared;\n    }\n    return sum;\n}\n", "  let sum: number = 0;\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]) ** 2;\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  lst.forEach(number => sum += Math.pow(Math.ceil(number),\
    \ 2));\n  return sum;\n}\n", "  return lst.map(Math.ceil).map(num => num * num).reduce((a,\
    \ b) => a + b);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0])); //=> 14\nconsole.log(sum_squares([1.0,\
    \ 4.0, 9.0])); //=> 98\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0])); //=> 84\n\
    console.log(sum_squares([1.4, 4.2, 0.0])); //=> 29\nconsole.log(sum_squares([-2.4,\
    \ 1.0, 1.0])); //=> 6", "  const res = lst.map(num => Math.ceil(num) ** 2).reduce((acc,\
    \ cur) => acc + cur);\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
