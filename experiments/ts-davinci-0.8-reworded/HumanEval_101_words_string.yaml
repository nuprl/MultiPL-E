name: HumanEval_101_words_string
language: ts
prompt: "//You will be given a string of words separated by commas or spaces. Your\
  \ task is\n// to split the string into words and return an array of the words.\n\
  // For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\"\
  , \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five,\
  \ six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction\
  \ words_string(s: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi,\
  \ my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"\
  One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\"\
  , \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"\
  name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\
  \"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"\
  ]);\n}\n\ntest();"
completions: ["  return s.split(/[ ,]+/);\n}\n", "  return s.split(\" \");\n}\n",
  "    return s.split(\" \");\n}\n", "    return s.split(/[\\s,]+/);\n}\nconsole.log(words_string(\"\
    Hi, my name is John\"));\nconsole.log(words_string(\"One, two, three, four, five,\
    \ six\"));\n", "    return s.split(/[\\s,]+/);\n}\n\ntest(words_string, [\"Hi,\
    \ my name is John\"], [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\ntest(words_string,\
    \ [\"One, two, three, four, five, six\"], [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]);\n\n", "    return s.split(\",\").map(w => w.trim());\n\
    }\n", "  return s.split(\" \");\n}", "    let wordList: string[] = s.split(\"\
    \ \");\n    wordList = wordList.join(\" \").split(\",\");\n    return wordList;\n\
    }\n\nconsole.log(words_string(\"Hi, my name is John\"));\nconsole.log(words_string(\"\
    One, two, three, four, five, six\"));\n", "  const splitArray = s.split(/[,\\\
    s]+/);\n  const wordsArray = [];\n  for (let i = 0; i < splitArray.length; i++)\
    \ {\n    wordsArray.push(splitArray[i]);\n  }\n  return wordsArray;\n}\n", " \
    \ return s.split(/[ ,]+/);\n}\n", "  return s.split(/[\\s,]+/);\n}\n", "    return\
    \ s.split(/[\\s,]+/);\n}\n", "    return s.split(\" \");\n}\n", "  return s.split(\"\
    \ \");\n}\n", "    let res: string[] = [];\n    let i: number = 0;\n    let word:\
    \ string = \"\";\n    while (i < s.length) {\n        if (s[i] != \" \" && s[i]\
    \ != \",\") {\n            word += s[i];\n        } else {\n            res.push(word);\n\
    \            word = \"\";\n        }\n        i++;\n    }\n    res.push(word);\n\
    \    return res;\n}", "    return s.split(/[ ,]+/);\n}\n", "    return s.split(/[\
    \ ,]+/);\n}\n", "    return s.split(/[ ,]+/);\n}\nconsole.log(words_string(\"\
    Hi, my name is John\"));\nconsole.log(words_string(\"One, two, three, four, five,\
    \ six\"));", "    return s.split(/[ ,]+/);\n}\n", "    let re = /,\\s|\\s/;\n\
    \    return s.split(re);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
