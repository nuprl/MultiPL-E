name: HumanEval_158_find_max
language: ts
prompt: "//Write a function that accepts an array of strings.\n// The array contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
  , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
  enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
  , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
  );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
  ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
  rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\"\
  , \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"\
  a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"\
  play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"
completions: ["    let max_num = 0;\n    let max_word = \"\";\n    for (let word of\
    \ words) {\n        let num = new Set(word).size;\n        if (num > max_num)\
    \ {\n            max_num = num;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n", "  let max: string = \"\";\n  for (let i = 0;\
    \ i < words.length; i++) {\n    if (word_unique_chars(words[i]) > word_unique_chars(max))\
    \ {\n      max = words[i];\n    }\n  }\n  return max;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    const hist:\
    \ { [key: string]: number } = {};\n    const result: number[] = [];\n    let max\
    \ = 0;\n    let max_word = words[0];\n    let max_count = 0;\n    for (let i =\
    \ 0; i < words.length; i++) {\n        const word = words[i];\n        let count\
    \ = 0;\n        const seen: { [key: string]: number } = {};\n        for (let\
    \ j = 0; j < word.length; j++) {\n            const letter = word[j];\n      \
    \      if (!seen[letter]) {\n                seen[letter] = 1;\n             \
    \   count++;\n            }\n        }\n        if (count > max_count) {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    let maxChar: string = \"\";\n    let maxCharValue:\
    \ number = 0;\n    let currCharValue: number = 0;\n    let currChar: string =\
    \ \"\";\n    for (let i = 0; i < words.length; i++) {\n        currChar = words[i];\n\
    \        currCharValue = countChars(currChar);\n        if (currCharValue > maxCharValue)\
    \ {\n            maxCharValue = currCharValue;\n            maxChar = currChar;\n\
    \        }\n    }\n    return maxChar;\n}\n", "  let max = 0;\n  let maxWord =\
    \ \"\";\n  for (let word of words) {\n    let wordSet = new Set();\n    for (let\
    \ letter of word) {\n      wordSet.add(letter);\n    }\n    if (wordSet.size >\
    \ max) {\n      max = wordSet.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n", "  const num_unique_chars: number[] = [];\n  for (let word of\
    \ words) {\n    const chars: string[] = [];\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (!chars.includes(word[i])) {\n        chars.push(word[i]);\n\
    \      }\n    }\n    num_unique_chars.push(chars.length);\n  }\n  let max: number\
    \ = num_unique_chars[0];\n  let max_index: number = 0;\n  for (let i = 1; i <\
    \ num_unique_chars.length; i++) {\n    if (num_unique_chars[i] > max) {\n    \
    \  max = num_unique_chars[i];\n      max_index = i;\n    }\n  }\n  return words[max_index];\n\
    }\n", "  let max_word = '';\n  let max_len = 0;\n  for (let word of words) {\n\
    \    if (unique_chars(word).length > max_len) {\n      max_len = unique_chars(word).length;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "    const dict\
    \ = {}\n    for (const i of words) {\n        dict[i] = 1\n        for (const\
    \ k of i) {\n            if (dict[i][k]) {\n                dict[i][k]++\n   \
    \         } else {\n                dict[i][k] = 1\n            }\n        }\n\
    \    }\n    return Object.keys(dict).sort((a, b) => {\n        let maxA = 0\n\
    \        let maxB = 0\n        for (const i in dict[a]) {\n            if (dict[a][i]\
    \ > maxA) {\n                maxA = dict[a][i]\n            }\n        }\n   \
    \     for (const i in dict[b]) {\n            if (dict[b][i] > maxB) {\n     \
    \           maxB = dict[b][i]\n            }\n        }\n        if (maxA ===\
    \ maxB) {\n            return 0\n        } else if (maxA > maxB) {\n         \
    \   return -1\n        } else {\n            return 1\n        }\n    })[0]\n\
    }\n", "    let max: string = \"\";\n    for (let word of words) {\n        if\
    \ (word.length > max.length) {\n            max = word;\n        }\n    }\n  \
    \  return max;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "  let result: string = \"\";\n  let max: number = 0;\n  words.forEach((word:\
    \ string) => {\n    const uniqueCharCount: number = new Set(word.split(\"\")).size;\n\
    \    if (uniqueCharCount > max) {\n      max = uniqueCharCount;\n      result\
    \ = word;\n    }\n  });\n  return result;\n}\n\nconsole.log(find_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"]));\n", "  let maxLen: number = 0;\n  let maxStr: string = \"\
    \";\n  for (let word of words) {\n    let len: number = unique_chars(word);\n\
    \    if (len > maxLen) {\n      maxLen = len;\n      maxStr = word;\n    }\n \
    \ }\n  return maxStr;\n}", "  // create an array of unique characters of each\
    \ word\n  const uniqueCharCount = words.map(word => {\n    const wordCharCount\
    \ = word.split('').reduce((acc, ch) => {\n      return acc + (acc.includes(ch)\
    \ ? '' : ch);\n    }, '');\n    return wordCharCount;\n  });\n  // get the max\
    \ count\n  const maxCount = Math.max(...uniqueCharCount.map(word => word.length));\n\
    \  // find the word with max count\n  const maxCountWords = uniqueCharCount.filter(word\
    \ => word.length === maxCount);\n  // find the first string that appears in lexicographical\
    \ order\n  const lexicographicalOrderWords = maxCountWords.sort();\n  return lexicographicalOrderWords[0];\n\
    }\n", "    let max_chars = \"\";\n    let max_count = 0;\n    for (let word of\
    \ words) {\n        let unique_chars = \"\";\n        for (let char of word) {\n\
    \            if (unique_chars.indexOf(char) === -1) {\n                unique_chars\
    \ += char;\n            }\n        }\n        if (unique_chars.length > max_count)\
    \ {\n            max_count = unique_chars.length;\n            max_chars = word;\n\
    \        }\n    }\n    return max_chars;\n}\nconsole.log(find_max([\"name\", \"\
    of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\n\
    console.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "  let max_so_far = \"\
    \";\n  for (let word of words) {\n    if (unique_chars(word) > unique_chars(max_so_far))\
    \ {\n      max_so_far = word;\n    }\n  }\n  return max_so_far;\n}\n\nlet words\
    \ = [\"name\", \"of\", \"string\"];\nconsole.log(find_max(words));\nwords = [\"\
    name\", \"enam\", \"game\"];\nconsole.log(find_max(words));\nwords = [\"aaaaaaa\"\
    , \"bb\", \"cc\"];\nconsole.log(find_max(words));\n", "    let result: string;\n\
    \    if (words.length > 0) {\n        result = words[0];\n        let max_unique_characters:\
    \ number = 0;\n        for (let word of words) {\n            let word_unique_characters:\
    \ number = 0;\n            let seen_characters: Set<string> = new Set();\n   \
    \         for (let letter of word) {\n                if (!seen_characters.has(letter))\
    \ {\n                    word_unique_characters++;\n                    seen_characters.add(letter);\n\
    \                }\n            }\n            if (word_unique_characters > max_unique_characters)\
    \ {\n                max_unique_characters = word_unique_characters;\n       \
    \         result = word;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var output: string = words[0];\n    var output_count: number = find_count(output);\n\
    \    for (var i = 1; i < words.length; i++) {\n        var i_count: number = find_count(words[i]);\n\
    \        if (i_count > output_count) {\n            output = words[i];\n     \
    \       output_count = i_count;\n        }\n    }\n    return output;\n}\n", " \
    \   let max = 0;\n    let maxWord = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        const unique = get_unique(word);\n\
    \        if (unique.length > max) {\n            max = unique.length;\n      \
    \      maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", "    let\
    \ max_count = 0;\n    let max_word = '';\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let curr_word = words[i];\n        let curr_count = 0;\n   \
    \     for (let j = 0; j < curr_word.length; j++) {\n            let temp = curr_word.substring(0,\
    \ j) + curr_word.substring(j + 1);\n            if (temp.indexOf(curr_word[j])\
    \ === -1) {\n                curr_count++;\n            }\n        }\n       \
    \ if (curr_count > max_count) {\n            max_count = curr_count;\n       \
    \     max_word = curr_word;\n        }\n    }\n    return max_word;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    return words.reduce((acc:\
    \ string, next: string) => {\n        return count_unique(acc) > count_unique(next)\
    \ ? acc : next;\n    });\n}\n", "    let maxCount: number = 0;\n    let maxWords:\
    \ string[] = [];\n    for (let word of words) {\n        let count: number = 0;\n\
    \        let set = new Set();\n        for (let i = 0; i < word.length; i++) {\n\
    \            set.add(word[i]);\n        }\n        count = set.size;\n       \
    \ if (count > maxCount) {\n            maxCount = count;\n            maxWords\
    \ = [];\n            maxWords.push(word);\n        } else if (count === maxCount)\
    \ {\n            maxWords.push(word);\n        }\n    }\n    return findLexo(maxWords);\n\
    }\n", "    const letters_hash: object = {};\n    let max_word: string = words[0];\n\
    \    let letter_count: number = 0;\n    for (let i: number = 0; i < words.length;\
    \ i++) {\n        letter_count = get_unique_letters(words[i]);\n        letters_hash[words[i]]\
    \ = letter_count;\n        if (letter_count > get_unique_letters(max_word)) {\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}",
  "    let max = \"\";\n    for (let i = 0; i < words.length; i++) {\n        if (unique_chars(words[i])\
    \ > unique_chars(max)) {\n            max = words[i];\n        }\n    }\n    return\
    \ max;\n}", "  const wordMap = new Map<string, number>();\n  for (const word of\
    \ words) {\n    let wordSet = new Set<string>();\n    for (const character of\
    \ word) {\n      wordSet.add(character);\n    }\n    wordMap.set(word, wordSet.size);\n\
    \  }\n  return sortLexicographically(wordMap);\n}\n", "  let word = '';\n  let\
    \ max_char = 0;\n  for (let i = 0; i < words.length; i++) {\n    let unique_char\
    \ = unique_characters(words[i]);\n    if (unique_char > max_char) {\n      max_char\
    \ = unique_char;\n      word = words[i];\n    }\n  }\n  return word;\n}\n", " \
    \   let max_word: string = \"\";\n    let max_unique: number = 0;\n    for (let\
    \ word of words) {\n        let unique: string[] = Array.from(new Set(word));\n\
    \        if (unique.length > max_unique) {\n            max_unique = unique.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \   return \"\";\n}\n", "    let number_of_uniques: number[] = [];\n    words.forEach(function\
    \ (s: string) {\n        number_of_uniques.push(s.split(\"\").filter(function\
    \ (x: string, i: number, a: string[]) {\n            return a.indexOf(x) === i;\n\
    \        }).length);\n    });\n    let max_number_of_uniques: number = Math.max(...number_of_uniques);\n\
    \    let index_of_max_number_of_uniques: number = number_of_uniques.indexOf(max_number_of_uniques);\n\
    \    return words[index_of_max_number_of_uniques];\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "  let max_word:\
    \ string = \"\";\n  let max_count: number = 0;\n  for (let word of words) {\n\
    \    let count: number = 0;\n    let chars: string[] = word.split(\"\");\n   \
    \ let chars_copy: string[] = [...chars];\n    for (let char of chars) {\n    \
    \  let index: number = chars_copy.indexOf(char);\n      chars_copy.splice(index,\
    \ 1);\n      count++;\n    }\n    if (count > max_count) {\n      max_count =\
    \ count;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "  let\
    \ word = '';\n  let max = 0;\n  for (let i = 0; i < words.length; i++) {\n   \
    \ let char: string[] = [];\n    for (let j = 0; j < words[i].length; j++) {\n\
    \      if (char.indexOf(words[i][j]) === -1) {\n        char.push(words[i][j]);\n\
    \      }\n    }\n    if (char.length > max) {\n      max = char.length;\n    \
    \  word = words[i];\n    }\n  }\n  return word;\n}\nconsole.log(find_max(['name',\
    \ 'of', 'string']));\nconsole.log(find_max(['name', 'enam', 'game']));\nconsole.log(find_max(['aaaaaaa',\
    \ 'bb', 'cc']));\n", "  let max = 0;\n  let letter: { [k: string]: boolean } =\
    \ {};\n  let result = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let\
    \ nb_char = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (!letter[words[i][j]])\
    \ {\n        nb_char++;\n        letter[words[i][j]] = true;\n      }\n    }\n\
    \    if (nb_char >= max) {\n      max = nb_char;\n      result = words[i];\n \
    \   }\n    letter = {};\n  }\n  return result;\n}\n", "    let maxCount: number\
    \ = 0;\n    let maxWord: string = \"\";\n    for (let word of words) {\n     \
    \   let wordSet: Set<string> = new Set(word);\n        if (wordSet.size > maxCount)\
    \ {\n            maxCount = wordSet.size;\n            maxWord = word;\n     \
    \   }\n    }\n    return maxWord;\n}\n\nlet words: string[] = [\"name\", \"of\"\
    , \"string\"];\nconsole.log(find_max(words));\n", "    let sortedWords = words.sort((w1,\
    \ w2) => count_unique(w1) - count_unique(w2));\n    let mostUniques = count_unique(sortedWords[sortedWords.length\
    \ - 1]);\n    let winners = sortedWords.filter(word => count_unique(word) ===\
    \ mostUniques);\n    return winners[0];\n}\n", "  // iterate through the array\n\
    \  // count the number of unique characters in each word\n  // store the word\
    \ with the highest count\n  // return the word with the highest count\n  let uniqueCharsWord:\
    \ string = \"\";\n  let uniqueCharsCount: number = 0;\n  let uniqueChars: string[]\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length;\
    \ j++) {\n      if (!uniqueChars.includes(words[i][j])) {\n        uniqueChars.push(words[i][j]);\n\
    \      }\n    }\n    if (uniqueChars.length > uniqueCharsCount) {\n      uniqueCharsCount\
    \ = uniqueChars.length;\n      uniqueCharsWord = words[i];\n    }\n    uniqueChars\
    \ = [];\n  }\n  return uniqueCharsWord;\n}\n", "    const word_scores = words.map(word\
    \ => {\n        return {\n            word: word,\n            score: word_score(word)\n\
    \        }\n    })\n    return word_scores.reduce((acc, curr) => {\n        if\
    \ (curr.score > acc.score) {\n            return curr\n        } else {\n    \
    \        return acc\n        }\n    }).word\n}\n", "  if (!words.length) return\
    \ null;\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const uniqueChars = new Set(words[i]);\n    if (uniqueChars.size\
    \ > max) {\n      max = uniqueChars.size;\n      index = i;\n    }\n  }\n  return\
    \ words[index];\n}\n", "    // todo\n    return '';\n}", "    let max: number\
    \ = 0;\n    let max_index: number = 0;\n    for (let i: number = 0; i < words.length;\
    \ i++) {\n        if (unique_count(words[i]) > max) {\n            max = unique_count(words[i]);\n\
    \            max_index = i;\n        }\n    }\n    return words[max_index];\n\
    }\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "    let max = 0;\n    let maxWords: string[] = [];\n    for (let\
    \ word of words) {\n        let tempMax = 0;\n        let uniqueChars: string[]\
    \ = [];\n        for (let char of word) {\n            if (uniqueChars.indexOf(char)\
    \ === -1) {\n                uniqueChars.push(char);\n                tempMax++;\n\
    \            }\n        }\n        if (tempMax > max) {\n            max = tempMax;\n\
    \            maxWords = [word];\n        } else if (tempMax === max) {\n     \
    \       maxWords.push(word);\n        }\n    }\n    return maxWords.sort()[0];\n\
    }\n", "    const originalSet = new Set<string>();\n    const map: {[key: string]:\
    \ string} = {};\n    for (const word of words) {\n        const chars = new Set<string>();\n\
    \        for (const char of word) {\n            chars.add(char);\n        }\n\
    \        map[word] = chars.size;\n        originalSet.add(word);\n    }\n    const\
    \ values = Object.values(map);\n    const max = Math.max(...values);\n    const\
    \ index = values.indexOf(max);\n    const result = words[index];\n    return result;\n\
    }\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));", "    let max: number = 0;\n    let word: string = \"\";\n    for (let\
    \ item of words) {\n        let count: number = 0;\n        let letter: string\
    \ = \"\";\n        for (let i = 0; i < item.length; i++) {\n            if (letter.indexOf(item[i])\
    \ === -1) {\n                count++;\n                letter += item[i];\n  \
    \          }\n        }\n        if (count > max) {\n            max = count;\n\
    \            word = item;\n        }\n    }\n    return word;\n}\n", "  let mx_len\
    \ = 0;\n  let mx_word = \"\";\n  for (let word of words) {\n    let map = {};\n\
    \    for (let c of word) {\n      map[c] = true;\n    }\n    if (Object.keys(map).length\
    \ > mx_len) {\n      mx_len = Object.keys(map).length;\n      mx_word = word;\n\
    \    }\n  }\n  return mx_word;\n}\n", "  let max_word = \"\";\n  let max_len =\
    \ 0;\n  words.forEach(function(word){\n    if (max_len < word.length){\n     \
    \ max_len = word.length;\n      max_word = word;\n    }\n  });\n  return max_word;\n\
    }\n", "    let max: string = '';\n    let max_unique: number = 0;\n    for (let\
    \ word of words) {\n        let unique_count: number = 0;\n        for (let i\
    \ = 0; i < word.length; i++) {\n            if (word.indexOf(word[i]) === i) {\n\
    \                unique_count++;\n            }\n        }\n        if (unique_count\
    \ > max_unique) {\n            max = word;\n            max_unique = unique_count;\n\
    \        }\n    }\n    return max;\n}\n", "    return words.reduce((prev, current)\
    \ => {\n        if (prev === null) {\n            return current;\n        }\n\
    \        const uniqueCharCount = countUniqueChars(current);\n        if (uniqueCharCount\
    \ > countUniqueChars(prev)) {\n            return current;\n        }\n      \
    \  return prev;\n    }, null);\n}\n", "  let max_word = words[0];\n  for (let\
    \ word of words) {\n    if (get_unique_chars(word).length > get_unique_chars(max_word).length)\
    \ {\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "    let maxCount\
    \ = 0;\n    let maxWord: string = \"\";\n    words.forEach(word => {\n       \
    \ let count = {};\n        let isUnique = true;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            if (count[word[i]]) {\n                isUnique = false;\n\
    \                break;\n            } else {\n                count[word[i]]\
    \ = 1;\n            }\n        }\n        if (isUnique) {\n            if (word.length\
    \ > maxCount) {\n                maxCount = word.length;\n                maxWord\
    \ = word;\n            }\n        }\n    });\n    return maxWord;\n}\n", "  let\
    \ maxString = '';\n  let maxValue = 0;\n  let maxIndex = 0;\n  let currentIndex\
    \ = 0;\n  words.forEach(function(word) {\n    currentIndex += 1;\n    let uniqLength\
    \ = word.split('').filter(function(item, i, ar) {\n      return ar.indexOf(item)\
    \ === i;\n    }).length;\n    if (uniqLength > maxValue) {\n      maxValue = uniqLength;\n\
    \      maxString = word;\n      maxIndex = currentIndex;\n    } else if (uniqLength\
    \ === maxValue) {\n      if (currentIndex < maxIndex) {\n        maxString = word;\n\
    \        maxIndex = currentIndex;\n      }\n    }\n  });\n  return maxString;\n\
    }", "  let charFreq = words.map(word => {\n    let uniqueChar = {}\n    word.split('').forEach(char\
    \ => {\n      uniqueChar[char] = (uniqueChar[char] || 0) + 1\n    })\n    return\
    \ uniqueChar\n  })\n  let maxCharFreq = charFreq.map(obj => Object.keys(obj).length)\n\
    \  let maxFreqWord = maxCharFreq.indexOf(Math.max(...maxCharFreq))\n  return words[maxFreqWord]\n\
    }\n", "    // your code here\n    return \"\";\n}\n", "  let maxLength = 0;\n\
    \  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const\
    \ currentWord = words[i];\n    const letterCount = {};\n    for (let j = 0; j\
    \ < currentWord.length; j++) {\n      letterCount[currentWord[j]] = true;\n  \
    \  }\n    if (Object.keys(letterCount).length > maxLength) {\n      maxLength\
    \ = Object.keys(letterCount).length;\n      maxWord = currentWord;\n    }\n  }\n\
    \  return maxWord;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "  const words_dict: { [index: string]: number\
    \ } = {};\n  for (const word of words) {\n    const word_dict: { [index: string]:\
    \ number } = {};\n    for (const letter of word) {\n      word_dict[letter] =\
    \ 1;\n    }\n    words_dict[word] = Object.keys(word_dict).length;\n  }\n  const\
    \ unique_char_counts = Object.values(words_dict);\n  const max_count = Math.max(...unique_char_counts);\n\
    \  let max_word = words[0];\n  for (const word of words) {\n    if (words_dict[word]\
    \ === max_count) {\n      max_word = word;\n      break;\n    }\n  }\n  return\
    \ max_word;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "  let max = 0;\n  let max_word = '';\n  for (let word of words)\
    \ {\n    let current = new Set(word);\n    if (current.size > max) {\n      max\
    \ = current.size;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n",
  "    let max_unique_chars: number = 0;\n    let result: string = \"\";\n    words.forEach(element\
    \ => {\n        let unique_chars = element.split(\"\").filter((v, i, a) => a.indexOf(v)\
    \ === i).length;\n        if (unique_chars > max_unique_chars) {\n           \
    \ max_unique_chars = unique_chars;\n            result = element;\n        }\n\
    \    });\n    return result;\n}\n", "  let word = words[0];\n  let max = count_unique(word);\n\
    \  for (let i = 1; i < words.length; i++) {\n    const word = words[i];\n    const\
    \ count = count_unique(word);\n    if (count > max) {\n      max = count;\n  \
    \    word = word;\n    }\n  }\n  return word;\n}\n", "    // check to see if the\
    \ word has max unique character\n    // if it does\n    // set the word to max\n\
    \    // if no words have max unique character\n    // return the word that comes\
    \ first in lexicographical order\n    let max: string = words[0];\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let uniqueChar = 0;\n        let word\
    \ = words[i];\n        for (let j = 0; j < word.length; j++) {\n            let\
    \ char = word[j];\n            if (word.indexOf(char) === word.lastIndexOf(char))\
    \ {\n                uniqueChar++;\n            }\n        }\n        if (uniqueChar\
    \ > max.length) {\n            max = word;\n        }\n    }\n    return max;\n\
    }\n", "    let maxWord: string = words[0];\n    let maxCount: number = 0;\n  \
    \  for (let i = 0; i < words.length; i++) {\n        const currWord: string =\
    \ words[i];\n        const arr: string[] = currWord.split('');\n        const\
    \ uniqueArray: string[] = get_unique(arr);\n        if (uniqueArray.length > maxCount)\
    \ {\n            maxCount = uniqueArray.length;\n            maxWord = currWord;\n\
    \        }\n    }\n    return maxWord;\n}\n", "  let highest_char_count = 0;\n\
    \  let result = \"\";\n  words.forEach((word) => {\n    if (char_count(word) >\
    \ highest_char_count) {\n      highest_char_count = char_count(word);\n      result\
    \ = word;\n    }\n  });\n  return result;\n}\n", "    let maxWord: string = \"\
    \";\n    let maxWordCnt: number = 0;\n    for (let word of words) {\n        const\
    \ unique_chars = [];\n        for (let c of word) {\n            if (unique_chars.indexOf(c)\
    \ === -1) {\n                unique_chars.push(c);\n            }\n        }\n\
    \        if (unique_chars.length > maxWordCnt) {\n            maxWordCnt = unique_chars.length;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", " \
    \   let max: number = 0;\n    let max_str: string = words[0];\n    for (let i:\
    \ number = 0; i < words.length; i++) {\n        let curr: string = words[i];\n\
    \        let curr_letters: string[] = [];\n        for (let j: number = 0; j <\
    \ curr.length; j++) {\n            if (curr_letters.indexOf(curr[j]) === -1) {\n\
    \                curr_letters.push(curr[j]);\n            }\n        }\n     \
    \   if (curr_letters.length > max) {\n            max = curr_letters.length;\n\
    \            max_str = curr;\n        }\n    }\n    return max_str;\n}\n", " \
    \ let max_chars = 0;\n  let max_word = words[0];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const chars = [];\n    for (let j = 0; j < words[i].length; j++)\
    \ {\n      const char = words[i][j];\n      if (!chars.includes(char)) {\n   \
    \     chars.push(char);\n      }\n    }\n    if (chars.length > max_chars) {\n\
    \      max_chars = chars.length;\n      max_word = words[i];\n    }\n  }\n  return\
    \ max_word;\n}\n", "    let maxLength = 0;\n    let result = \"\";\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let unique = uniqueLetters(words[i]);\n\
    \        if (unique.length > maxLength) {\n            maxLength = unique.length;\n\
    \            result = words[i];\n        }\n    }\n    return result;\n}\n\nfind_max([\"\
    name\", \"of\", \"string\"]);\nfind_max([\"name\", \"enam\", \"game\"]);\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]);", "  let max: string = words[0];\n  let max_len:\
    \ number = words[0].length;\n  let set: Set<string> = new Set(max);\n  let max_set:\
    \ Set<string> = new Set(max);\n  for (let i = 1; i < words.length; i++) {\n  \
    \  set = new Set(words[i]);\n    if (set.size > max_set.size) {\n      max = words[i];\n\
    \      max_set = set;\n    } else if (set.size === max_set.size) {\n      if (words[i]\
    \ < max) {\n        max = words[i];\n        max_set = set;\n      }\n    }\n\
    \  }\n  return max;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    return words\n        .map(word => {\n\
    \            return {\n                word,\n                unique: word.split('').filter((v,\
    \ i, a) => a.indexOf(v) === i).length\n            }\n        })\n        .sort((a,\
    \ b) => {\n            if (a.unique > b.unique) {\n                return -1;\n\
    \            } else if (a.unique < b.unique) {\n                return 1;\n  \
    \          } else {\n                if (a.word > b.word) {\n                \
    \    return 1;\n                } else if (a.word < b.word) {\n              \
    \      return -1;\n                } else {\n                    return 0;\n \
    \               }\n            }\n        })[0].word;\n}\n\n", "  let lengths:\
    \ number[] = [];\n  let max_length: number = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let word = words[i];\n    let word_len = word.length;\n    let uniq_len\
    \ = word.split(\"\").filter((v, i, a) => a.indexOf(v) === i).length;\n    lengths.push(uniq_len);\n\
    \    if (uniq_len > max_length) {\n      max_length = uniq_len;\n    }\n  }\n\
    \  let max_word_idx = 0;\n  for (let i = 0; i < lengths.length; i++) {\n    if\
    \ (lengths[i] === max_length) {\n      max_word_idx = i;\n      break;\n    }\n\
    \  }\n  return words[max_word_idx];\n}\n", "  let maxUnique = 0;\n  let result\
    \ = \"\";\n  for (let word of words) {\n    if (word.length > maxUnique) {\n \
    \     result = word;\n      maxUnique = word.length;\n    }\n  }\n  return result;\n\
    }\n", "    let dict = new Map<string, string>();\n    let index = 0;\n    for\
    \ (let i = 0; i < words.length; i++) {\n        let set = new Set<string>();\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            set.add(words[i][j]);\n\
    \        }\n        dict.set(words[i], set.size);\n    }\n    // find the max\n\
    \    let max = -1;\n    for (let i = 0; i < words.length; i++) {\n        if (dict.get(words[i])\
    \ > max) {\n            max = dict.get(words[i]);\n            index = i;\n  \
    \      }\n    }\n    return words[index];\n}\n", "    let obj_of_uniques: {[key:\
    \ string]: number} = {};\n    for (let i = 0; i < words.length; i++) {\n     \
    \   let word = words[i];\n        let uniques = 0;\n        let obj_word: {[key:\
    \ string]: number} = {};\n        for (let j = 0; j < word.length; j++) {\n  \
    \          let char = word[j];\n            if (!obj_word[char]) {\n         \
    \       obj_word[char] = char;\n                uniques += 1;\n            }\n\
    \        }\n        obj_of_uniques[word] = uniques;\n    }\n    let max_unique_word\
    \ = words[0];\n    let max_unique_count = obj_of_uniques[words[0]];\n    for (let\
    \ word in obj_of_uniques) {\n        if (obj_of_uniques[word] > max_unique_count)\
    \ {\n            max_unique_word = word;\n            max_unique_count = obj_of_uniques[word];\n\
    \        }\n    }\n    return max_unique_word;\n}\n", "  let unique_characters\
    \ = 0;\n  let word_with_max_unique_characters = \"\";\n  for (let word of words)\
    \ {\n    if (count_unique_characters(word) > unique_characters) {\n      unique_characters\
    \ = count_unique_characters(word);\n      word_with_max_unique_characters = word;\n\
    \    }\n  }\n  return word_with_max_unique_characters;\n}", "    let max_length\
    \ = 0;\n    let best_word = '';\n    for (let word of words) {\n        const\
    \ set = new Set(word);\n        if (set.size > max_length) {\n            max_length\
    \ = set.size;\n            best_word = word;\n        }\n    }\n    return best_word;\n\
    }\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "    let result: string = '';\n    let maxUniqueCharacters: number\
    \ = 0;\n    for (let word of words) {\n        let uniqueChars: string[] = [];\n\
    \        for (let letter of word) {\n            if (uniqueChars.indexOf(letter)\
    \ === -1) {\n                uniqueChars.push(letter);\n            }\n      \
    \  }\n        if (uniqueChars.length > maxUniqueCharacters) {\n            maxUniqueCharacters\
    \ = uniqueChars.length;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\n", "  let max = 0;\n  let maxStr = \"\";\n  for (let word of words)\
    \ {\n    let current = find_uniq(word);\n    if (current.length > max) {\n   \
    \   max = current.length;\n      maxStr = word;\n    }\n  }\n  return maxStr;\n\
    }\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "  let max_unique = 0;\n  let max_word = \"\";\n  for (let i = 0;\
    \ i < words.length; i++) {\n    let current_unique = 0;\n    for (let j = 0; j\
    \ < words[i].length; j++) {\n      if (words[i].indexOf(words[i][j]) === j) {\n\
    \        current_unique++;\n      }\n    }\n    if (current_unique > max_unique)\
    \ {\n      max_unique = current_unique;\n      max_word = words[i];\n    }\n \
    \ }\n  return max_word;\n}\n", "    let max = words[0];\n    for (let i = 1; i\
    \ < words.length; i++) {\n        if (words[i].length > max.length) {\n      \
    \      max = words[i];\n        }\n    }\n    return max;\n}\n\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "    let max = \"\
    \";\n    for (let word of words) {\n        if (count_unique(word) > count_unique(max))\
    \ {\n            max = word;\n        }\n    }\n    return max;\n}\n", "    let\
    \ max_word: string = words[0];\n    let max_length: number = 0;\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let unique_chars: string[] = unique_chars_in_word(words[i]);\n\
    \        if (unique_chars.length > max_length) {\n            max_length = unique_chars.length;\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n",
  "  let maxChar = 0;\n  let max: string;\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let unique = 0;\n    for (let j = 0; j < words[i].length; j++) {\n  \
    \    if (words[i].lastIndexOf(words[i][j]) === j) {\n        unique++;\n     \
    \ }\n    }\n    if (unique > maxChar) {\n      maxChar = unique;\n      max =\
    \ words[i];\n    }\n  }\n  return max;\n}\n", "    const maxNumber = (words.reduce((a,\
    \ b) => a.length > b.length ? a : b)).length;\n    const max = [];\n    words.forEach(word\
    \ => {\n        if (word.length === maxNumber) {\n            max.push(word);\n\
    \        }\n    });\n    return max.reduce((a, b) => a < b ? a : b);\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "  let max = 0;\n\
    \  let maxWord = '';\n  for (let word of words) {\n    let unique = 0;\n    for\
    \ (let letter of word) {\n      if (word.indexOf(letter) === word.lastIndexOf(letter))\
    \ {\n        unique++;\n      }\n    }\n    if (unique > max) {\n      max = unique;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n", "  let max: string\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length\
    \ > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n}", "   \
    \ let max = \"\";\n    let max_len = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        if (word.length > max_len) {\n\
    \            max = word;\n            max_len = word.length;\n        }\n    }\n\
    \    return max;\n}", "  let res = \"\";\n  let max = 0;\n  for (let i = 0; i\
    \ < words.length; i++) {\n    const current = words[i];\n    const unique = new\
    \ Set(current);\n    if (unique.size > max) {\n      max = unique.size;\n    \
    \  res = current;\n    }\n  }\n  return res;\n}\n", "  let max_word: string =\
    \ words[0];\n  let max_value: number = 0;\n  words.forEach(word => {\n    if (word.length\
    \ > max_value) {\n      max_value = word.length;\n      max_word = word;\n   \
    \ }\n  });\n  return max_word;\n}\nconsole.log(find_max([\"name\", \"of\", \"\
    string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));", "    let max_word: string = \"\";\n    let max_uniq_chars:\
    \ number = 0;\n    for (let word of words) {\n        if (max_uniq_chars < uniq_chars(word))\
    \ {\n            max_uniq_chars = uniq_chars(word);\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "    let result: string = \"\"\
    ;\n    let max: number = 0;\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        if (words[i].length > max) {\n            max = words[i].length;\n\
    \            result = words[i];\n        }\n    }\n    return result;\n}\n", " \
    \   return words.reduce((p, c) => {\n        let pu = new Set(p.split('')).size;\n\
    \        let cu = new Set(c.split('')).size;\n        if (pu === cu) {\n     \
    \       return p < c ? p : c;\n        }\n        return pu > cu ? p : c;\n  \
    \  });\n}\n", "  let current_max = 0;\n  let max_index = 0;\n  for (let i = 0;\
    \ i < words.length; i++) {\n    const unique_characters = get_unique_chars(words[i]);\n\
    \    if (unique_characters.length > current_max) {\n      current_max = unique_characters.length;\n\
    \      max_index = i;\n    }\n  }\n  return words[max_index];\n}\n", "  const\
    \ charFreq = words.map(word => {\n    return {\n      word,\n      count: new\
    \ Set(word.split(\"\")).size\n    };\n  });\n  charFreq.sort((first, second) =>\
    \ {\n    if (first.count !== second.count) {\n      return second.count - first.count;\n\
    \    }\n    return first.word > second.word ? 1 : -1;\n  });\n  return charFreq[0].word;\n\
    }\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "    let max_word: string = \"\";\n    let max_word_char_count: number\
    \ = 0;\n    words.forEach(function (word) {\n        let new_word_char_count:\
    \ number = find_max_helper(word);\n        if (new_word_char_count > max_word_char_count)\
    \ {\n            max_word = word;\n            max_word_char_count = new_word_char_count;\n\
    \        }\n    });\n    return max_word;\n}", "    let maxWord: string = words[0];\n\
    \    for (let i = 1; i < words.length; i++) {\n        if (howManyUniqueChars(words[i])\
    \ > howManyUniqueChars(maxWord)) {\n            maxWord = words[i];\n        }\n\
    \    }\n    return maxWord;\n}\n", "  const uniqueChars = words.map(item => getUniqueChars(item).length);\n\
    \  let maxUniqueChars = Math.max(...uniqueChars);\n  let maxUniqueCharsIndex =\
    \ uniqueChars.indexOf(maxUniqueChars);\n  return words[maxUniqueCharsIndex];\n\
    }\n", "  let maxLength = 0;\n  let resWord = \"\";\n  words.forEach((word: string)\
    \ => {\n    const uniqueWord = word.split(\"\").filter((v, i, a) => a.indexOf(v)\
    \ === i);\n    if (uniqueWord.length > maxLength) {\n      maxLength = uniqueWord.length;\n\
    \      resWord = word;\n    }\n  });\n  return resWord;\n}\n", "    let result:\
    \ string = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word:\
    \ string = words[i];\n        let wordUnique: string = getUniqueString(word);\n\
    \        let resultUnique: string = getUniqueString(result);\n        if (wordUnique.length\
    \ > resultUnique.length) {\n            result = word;\n        } else if (wordUnique.length\
    \ === resultUnique.length && wordUnique < resultUnique) {\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\n", "    let max: number =\
    \ words[0].length;\n    let result: string = words[0];\n    for (let i: number\
    \ = 1; i < words.length; i++) {\n        if (words[i].length > max) {\n      \
    \      max = words[i].length;\n            result = words[i];\n        }\n   \
    \ }\n    return result;\n}", "    let longestWord = words[0];\n    for (let word\
    \ of words) {\n        if (word.length > longestWord.length) {\n            longestWord\
    \ = word;\n        }\n    }\n    return longestWord;\n}\n", "  let maxUniqueCharWord\
    \ = \"\";\n  let maxUniqueChars = 0;\n  for (let word of words) {\n    let uniqueCharCount\
    \ = countUniqueChars(word);\n    if (uniqueCharCount > maxUniqueChars) {\n   \
    \   maxUniqueChars = uniqueCharCount;\n      maxUniqueCharWord = word;\n    }\n\
    \  }\n  return maxUniqueCharWord;\n}\n", "  // TODO: Implement me!\n  return \"\
    \";\n}\n", "    let max: string = \"\";\n    for (let word of words) {\n     \
    \   if (is_lexicographical_bigger(word, max) && has_most_unique_chars(word, max))\
    \ {\n            max = word;\n        }\n    }\n    return max;\n}\n", "    let\
    \ max = \"\";\n    for (let i = 0; i < words.length; i++) {\n        if (word_unique_chars(words[i]).length\
    \ > word_unique_chars(max).length) {\n            max = words[i];\n        }\n\
    \    }\n    return max;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"\
    ]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "  let unique: number[] = [];\n  let max: number\
    \ = 0;\n  let max_string: string = \"\";\n  words.forEach(word => {\n    unique.push(get_unique_chars(word));\n\
    \  });\n  max = Math.max(...unique);\n  max_string = words[unique.indexOf(max)];\n\
    \  return max_string;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "  let length = 0;\n  let maxLength = 0;\n \
    \ let word;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j\
    \ < words[i].length; j++) {\n      for (let k = 0; k < words[i].length; k++) {\n\
    \        if (words[i][j] !== words[i][k]) {\n          length++;\n        }\n\
    \      }\n    }\n    if (length > maxLength) {\n      maxLength = length;\n  \
    \    word = words[i];\n    }\n    length = 0;\n  }\n  return word;\n}\n", "  \
    \  let max_num = 0;\n    let max_idx = 0;\n    let len = words.length;\n    for\
    \ (let i = 0; i < len; i++) {\n        let cur_word = words[i];\n        let cur_num\
    \ = unique_chars(cur_word);\n        if (cur_num > max_num) {\n            max_num\
    \ = cur_num;\n            max_idx = i;\n        }\n    }\n    return words[max_idx];\n\
    }\n", "    let max_char: string = '';\n    let max_count: number = 0;\n    for\
    \ (let word of words) {\n        let unique_chars: Set<string> = new Set();\n\
    \        for (let c of word) {\n            unique_chars.add(c);\n        }\n\
    \        if (unique_chars.size > max_count) {\n            max_count = unique_chars.size;\n\
    \            max_char = word;\n        }\n    }\n    return max_char;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "  // return words.sort((a,\
    \ b) => {\n  //   let x = a.split(\"\").filter((e, i, x) => x.indexOf(e) === i).length;\n\
    \  //   let y = b.split(\"\").filter((e, i, x) => x.indexOf(e) === i).length;\n\
    \  //   if (x === y) {\n  //     return a < b ? -1 : 1;\n  //   }\n  //   return\
    \ x < y ? 1 : -1;\n  // })[0];\n  let uniqueWords = words.map(word => {\n    return\
    \ {\n      string: word,\n      unique: word\n        .split(\"\")\n        .filter((e,\
    \ i, x) => x.indexOf(e) === i)\n        .length\n    };\n  });\n  let max = Math.max(...uniqueWords.map(word\
    \ => word.unique));\n  return uniqueWords\n    .filter(word => word.unique ===\
    \ max)\n    .sort((a, b) => (a.string < b.string ? -1 : 1))[0].string;\n}\n",
  "  let max_word: string = words[0];\n  let max_count: number = unique_count(words[0]);\n\
    \  for (let i = 1; i < words.length; i++) {\n    let unique_count_curr = unique_count(words[i]);\n\
    \    if (unique_count_curr > max_count) {\n      max_count = unique_count_curr;\n\
    \      max_word = words[i];\n    }\n  }\n  return max_word;\n}\n", "  let max\
    \ = \"\";\n  let max_unique = 0;\n  for (let word of words) {\n    let unique\
    \ = 0;\n    let chars = \"\";\n    for (let char of word) {\n      if (chars.indexOf(char)\
    \ == -1) {\n        unique++;\n        chars += char;\n      }\n    }\n    if\
    \ (unique > max_unique) {\n      max = word;\n      max_unique = unique;\n   \
    \ }\n  }\n  return max;\n}\n", "  let max_word: string = words[0];\n  for (let\
    \ word of words) {\n    if (word.length > max_word.length) {\n      max_word =\
    \ word;\n    }\n  }\n  return max_word;\n}\n", "    var max = words[0];\n    var\
    \ max_len = words[0].length;\n    for (var i = 1; i < words.length; i++) {\n \
    \       if (words[i].length > max_len) {\n            max = words[i];\n      \
    \      max_len = words[i].length;\n        }\n    }\n    return max;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    let wordSet\
    \ = new Set();\n    let maxWord = \"\";\n    for (let word of words) {\n     \
    \   wordSet.clear();\n        for (let c of word) {\n            wordSet.add(c);\n\
    \        }\n        if (wordSet.size > maxWord.length) {\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;\n}\n", "  const letters: Set<string>\
    \ = new Set();\n  let max_letter_string: string = words[0];\n  let max_letter_string_length:\
    \ number = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0;\
    \ j < words[i].length; j++) {\n      if (!letters.has(words[i][j])) {\n      \
    \  letters.add(words[i][j]);\n      }\n    }\n    if (letters.size > max_letter_string_length)\
    \ {\n      max_letter_string_length = letters.size;\n      max_letter_string =\
    \ words[i];\n    }\n    letters.clear();\n  }\n  return max_letter_string;\n}\n",
  "    return words.reduce((a, b) => {\n        return num_of_unique_chars(a) > num_of_unique_chars(b)\
    \ ? a : b;\n    });\n}\n", "  let max: string = \"\";\n  for (let word of words)\
    \ {\n    const set = new Set(word);\n    if (set.size > max.length) {\n      max\
    \ = word;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_max([\"name\", \"\
    of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\n\
    console.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "  if (words.length\
    \ === 0) {\n    return null;\n  }\n  var currentMax = 1;\n  var maxWord = words[0];\n\
    \  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    var\
    \ uniqueChars = getUniqueCharacters(word);\n    if (uniqueChars.length > currentMax)\
    \ {\n      currentMax = uniqueChars.length;\n      maxWord = word;\n    }\n  }\n\
    \  return maxWord;\n}\n", "    let max = { word: \"\", uniqueChars: 0 };\n   \
    \ for (let i = 0; i < words.length; i++) {\n        let unique = {};\n       \
    \ for (let j = 0; j < words[i].length; j++) {\n            unique[words[i][j]]\
    \ = true;\n        }\n        let numOfChars = Object.keys(unique).length;\n \
    \       if (numOfChars > max.uniqueChars) {\n            max.word = words[i];\n\
    \            max.uniqueChars = numOfChars;\n        }\n    }\n    return max.word;\n\
    }\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));", "    const sortedWords = words.sort((wordA, wordB) => {\n        let\
    \ result = 0;\n        if (wordA.length > wordB.length) {\n            result\
    \ = -1;\n        } else if (wordA.length < wordB.length) {\n            result\
    \ = 1;\n        }\n        return result;\n    });\n    const unique = new Set(sortedWords[0]);\n\
    \    return sortedWords.find(word => word.length === unique.size) || '';\n}\n\n\
    test('find_max', () => {\n    expect(find_max(['name', 'of', 'string'])).toBe('string');\n\
    \    expect(find_max(['name', 'enam', 'game'])).toBe('enam');\n    expect(find_max(['aaaaaaa',\
    \ 'bb', 'cc'])).toBe('aaaaaaa');\n});\n", "    let max_len = 0;\n    let max_word\
    \ = \"\";\n    for (let word of words) {\n        let unique_chars = find_unique_chars(word);\n\
    \        if (unique_chars.length > max_len) {\n            max_len = unique_chars.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", " \
    \   let max: number = 0;\n    let maxString: string = \"\";\n    for (let word\
    \ of words) {\n        if (find_unique(word).length > max) {\n            max\
    \ = find_unique(word).length;\n            maxString = word;\n        }\n    }\n\
    \    return maxString;\n}\n", "  // we return the first word which has maximum\
    \ number of unique characters\n\n  // count number of unique characters\n  let\
    \ maxCount = 0;\n  let ret = \"\";\n  words.forEach((s: string) => {\n    const\
    \ charSet = new Set(s);\n    const count = charSet.size;\n    if (count > maxCount)\
    \ {\n      maxCount = count;\n      ret = s;\n    }\n  });\n  return ret;\n}\n\
    \nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "    let res = words[0];\n    for (let word of words) {\n       \
    \ if (count_unique(word) > count_unique(res)) {\n            res = word;\n   \
    \     }\n    }\n    return res;\n}\n", "  let max_word = words[0];\n  let max_count\
    \ = count_characters(words[0]);\n  for (let i = 1; i < words.length; i++) {\n\
    \    const count = count_characters(words[i]);\n    if (count > max_count) {\n\
    \      max_count = count;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n\
    }\n", "  // TODO: implement function\n  return \"\";\n}\n", "    // your code\
    \ goes here\n    const word_characters: string[][] = [];\n    words.forEach(word\
    \ => {\n        word_characters.push(word.split(''));\n    });\n    const unique_characters:\
    \ string[][] = [];\n    word_characters.forEach(word => {\n        unique_characters.push(word.filter((v,\
    \ i, a) => a.indexOf(v) === i));\n    });\n    const num_unique_characters: number[]\
    \ = [];\n    unique_characters.forEach(word => {\n        num_unique_characters.push(word.length);\n\
    \    });\n    let max_index: number = num_unique_characters.indexOf(Math.max(...num_unique_characters));\n\
    \    return words[max_index];\n}\n", "    let word = words[0];\n    for (let i\
    \ = 1; i < words.length; i++) {\n        const word_c = word.split('');\n    \
    \    const word_n = words[i].split('');\n        const _word_c = new Set(word_c);\n\
    \        const _word_n = new Set(word_n);\n        if (_word_c.size < _word_n.size)\
    \ {\n            word = words[i];\n        }\n    }\n    return word;\n}\n", " \
    \ let maxLength = 0;\n  let maxString = \"\";\n  words.forEach(word => {\n   \
    \ const uniqueWord = [...new Set(word)];\n    if (uniqueWord.length > maxLength)\
    \ {\n      maxLength = uniqueWord.length;\n      maxString = word;\n    }\n  });\n\
    \  return maxString;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    let max_freq = 0;\n    let max_word = '';\n\
    \    for (let word of words) {\n        const freq = freq_char(word);\n      \
    \  if (Object.keys(freq).length > max_freq) {\n            max_freq = Object.keys(freq).length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \ let word_with_max_unique_chars = words[0];\n  let max_unique_chars = 0;\n  for\
    \ (let word of words) {\n    let unique_chars = new Set(word);\n    if (unique_chars.size\
    \ > max_unique_chars) {\n      max_unique_chars = unique_chars.size;\n      word_with_max_unique_chars\
    \ = word;\n    }\n  }\n  return word_with_max_unique_chars;\n}\n", "  let max\
    \ = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let set = new\
    \ Set();\n    for (let char of word) {\n      set.add(char);\n    }\n    if (set.size\
    \ > max) {\n      max = set.size;\n      max_word = word;\n    }\n  }\n  return\
    \ max_word;\n}\n", "    let max_num_unique = 0;\n    let max_word = \"\";\n  \
    \  for (let i = 0; i < words.length; i++) {\n        let num_unique = 0;\n   \
    \     for (let j = 0; j < words[i].length; j++) {\n            let current_char\
    \ = words[i][j];\n            if (words[i].indexOf(current_char) === j) {\n  \
    \              num_unique++;\n            }\n        }\n        if (num_unique\
    \ > max_num_unique) {\n            max_num_unique = num_unique;\n            max_word\
    \ = words[i];\n        }\n    }\n    return max_word;\n}\n", "  if (words.length\
    \ == 0) {\n    return \"\";\n  }\n  let max = words[0];\n  let maxUnique = uniqueChars(max);\n\
    \  for (let i = 1; i < words.length; i++) {\n    let next = words[i];\n    let\
    \ nextUnique = uniqueChars(next);\n    if (nextUnique.length > maxUnique.length)\
    \ {\n      max = next;\n      maxUnique = nextUnique;\n    } else if (nextUnique.length\
    \ == maxUnique.length) {\n      if (next < max) {\n        max = next;\n     \
    \   maxUnique = nextUnique;\n      }\n    }\n  }\n  return max;\n}\n", "  let\
    \ maxUnique = \"\";\n  words.forEach(word => {\n    if (uniqueChars(word) > uniqueChars(maxUnique))\
    \ {\n      maxUnique = word;\n    }\n  });\n  return maxUnique;\n}\n", "    let\
    \ max_word = '';\n    let max_count = 0;\n    for (let word of words) {\n    \
    \    let count = 0;\n        for (let char of word) {\n            if (word.indexOf(char)\
    \ === word.lastIndexOf(char)) {\n                count += 1;\n            }\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\n", " \
    \   let maxCharNum = 0;\n    let maxWords = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let currentWord = words[i];\n        let charNum = getUniqueCharNum(currentWord);\n\
    \        if (charNum > maxCharNum) {\n            maxCharNum = charNum;\n    \
    \        maxWords = [currentWord];\n        } else if (charNum === maxCharNum)\
    \ {\n            maxWords.push(currentWord);\n        }\n    }\n    let minWord\
    \ = maxWords[0];\n    for (let i = 1; i < maxWords.length; i++) {\n        if\
    \ (maxWords[i] < minWord) {\n            minWord = maxWords[i];\n        }\n \
    \   }\n    return minWord;\n}", "    let hash: any = {};\n    let maxUniqueChars:\
    \ string;\n    let maxUniqueCharsCount: number = 0;\n    for (let i: number =\
    \ 0; i < words.length; i++) {\n        maxUniqueChars = words[i];\n        for\
    \ (let j: number = 0; j < words[i].length; j++) {\n            if (hash[words[i][j]])\
    \ {\n                hash[words[i][j]] += 1;\n            } else {\n         \
    \       hash[words[i][j]] = 1;\n            }\n        }\n        let uniqueCharCount:\
    \ number = 0;\n        for (let key in hash) {\n            if (hash[key] ===\
    \ 1) {\n                uniqueCharCount += 1;\n            }\n        }\n    \
    \    if (uniqueCharCount > maxUniqueCharsCount) {\n            maxUniqueCharsCount\
    \ = uniqueCharCount;\n        }\n        hash = {};\n    }\n    if (maxUniqueCharsCount\
    \ === 0) {\n        return 'there are no unique characters';\n    }\n    return\
    \ maxUniqueChars;\n}\n", "    let max = 0;\n    let retStr = \"\";\n    for (let\
    \ word of words) {\n        let unique: boolean[] = [];\n        for (let i =\
    \ 0; i < word.length; i++) {\n            if (unique[word.charCodeAt(i)]) {\n\
    \                continue;\n            }\n            unique[word.charCodeAt(i)]\
    \ = true;\n        }\n        let cnt = 0;\n        for (let i = 0; i < 256; i++)\
    \ {\n            if (unique[i]) {\n                cnt++;\n            }\n   \
    \     }\n        if (cnt > max) {\n            max = cnt;\n            retStr\
    \ = word;\n        }\n    }\n    return retStr;\n}\nconsole.log(find_max([\"name\"\
    , \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\n\
    console.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    let max: number\
    \ = 0;\n    let max_word: string = \"\";\n    words.forEach(word => {\n      \
    \  let word_set: Set<string> = new Set(word.split(\"\"));\n        if (word_set.size\
    \ > max) {\n            max = word_set.size;\n            max_word = word;\n \
    \       }\n    });\n    return max_word;\n}\nconsole.log(find_max([\"name\", \"\
    of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\n\
    console.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "    let result: string;\n\
    \    let max_unique_characters: number = 0;\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word: string = words[i];\n        const char_obj: {} =\
    \ {};\n        for (let j = 0; j < word.length; j++) {\n            const character:\
    \ string = word[j];\n            if (!char_obj[character]) {\n               \
    \ char_obj[character] = true;\n            }\n        }\n        const unique_characters_count:\
    \ number = Object.keys(char_obj).length;\n        if (unique_characters_count\
    \ > max_unique_characters) {\n            max_unique_characters = unique_characters_count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\n", "  let\
    \ longest = words[0];\n  words.forEach(word => {\n    if (unique(word).length\
    \ > unique(longest).length) {\n      longest = word;\n    }\n  });\n  return longest;\n\
    }\n", "    let max_word = \"\";\n    let max_count = 0;\n    for (let i = 0; i\
    \ < words.length; i++) {\n        let set = new Set(words[i]);\n        if (set.size\
    \ > max_count) {\n            max_count = set.size;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;\n}\n", "    let max_word: string = words[0];\n\
    \    for (let word of words) {\n        if (find_unique_chars(word).length > find_unique_chars(max_word).length)\
    \ {\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n",
  "  // TODO: Write your code here\n  const map = new Map();\n  for (const word of\
    \ words) {\n    let set = new Set();\n    for (const char of word) {\n      set.add(char);\n\
    \    }\n    map.set(word, set.size);\n  }\n  let max = 0;\n  let maxWord = words[0];\n\
    \  for (const [key, value] of map) {\n    if (value > max) {\n      max = value;\n\
    \      maxWord = key;\n    }\n  }\n  return maxWord;\n}\n", "  let max_word: string\
    \ = \"\";\n  let max_len: number = 0;\n  for (let i: number = 0; i < words.length;\
    \ i++) {\n    const set = new Set(words[i]);\n    if (set.size > max_len) {\n\
    \      max_len = set.size;\n      max_word = words[i];\n    }\n  }\n  return max_word;\n\
    }\n", "  if (words.length === 0) {\n    return '';\n  }\n  let max_word = words[0];\n\
    \  for (let word of words) {\n    if (max_word.length === word.length) {\n   \
    \   if (lexicographical(max_word, word) > 0) {\n        max_word = word;\n   \
    \   }\n    } else if (max_word.length < word.length) {\n      max_word = word;\n\
    \    }\n  }\n  return max_word;\n}\n", "  let maxCount = 0;\n  let maxStr = \"\
    \";\n  for (let word of words) {\n    const len = _unique_char_count(word);\n\
    \    if (len > maxCount) {\n      maxCount = len;\n      maxStr = word;\n    }\n\
    \  }\n  return maxStr;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"\
    ]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    let maxWord: string = words[0];\n    let\
    \ maxUniqueChars: number = uniqueChars(words[0]);\n    for (let word of words)\
    \ {\n        if (uniqueChars(word) > maxUniqueChars) {\n            maxUniqueChars\
    \ = uniqueChars(word);\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));", "  let max = null;\n  let maxCount = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const unique = new Set(word.split(\"\
    \"));\n    if (unique.size > maxCount) {\n      max = word;\n      maxCount =\
    \ unique.size;\n    }\n  }\n  return max;\n}\n", "    let lu: number = 0;\n  \
    \  let index: number = 0;\n    for (let i: number = 0; i < words.length; i++)\
    \ {\n        if (unique_letters(words[i]) > lu) {\n            lu = unique_letters(words[i]);\n\
    \            index = i;\n        }\n    }\n    return words[index];\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "    let uniqueCharacters\
    \ = new Map<string, number>();\n    words.forEach(word => {\n        let wordSet\
    \ = new Set<string>();\n        word.split('').forEach(character => {\n      \
    \      wordSet.add(character);\n        });\n        uniqueCharacters.set(word,\
    \ wordSet.size);\n    });\n    let max = 0;\n    let maxKey = '';\n    uniqueCharacters.forEach((value,\
    \ key) => {\n        if (value > max) {\n            max = value;\n          \
    \  maxKey = key;\n        }\n    });\n    return maxKey;\n}", "  let max_index\
    \ = 0;\n  let max_uniques = unique_characters(words[0]);\n  for (let i = 1; i\
    \ < words.length; i++) {\n    const word = words[i];\n    const uniques = unique_characters(word);\n\
    \    if (uniques > max_uniques) {\n      max_index = i;\n      max_uniques = uniques;\n\
    \    }\n  }\n  return words[max_index];\n}\n", "  let maxLength: number = 0;\n\
    \  let wordWithMostUnique: string = \"\";\n  for (let word of words) {\n    let\
    \ unique: number = 0;\n    for (let letter of word) {\n      if (word.indexOf(letter)\
    \ === word.lastIndexOf(letter)) {\n        unique++;\n      }\n    }\n    if (unique\
    \ > maxLength) {\n      maxLength = unique;\n      wordWithMostUnique = word;\n\
    \    }\n  }\n  return wordWithMostUnique;\n}\nconsole.log(find_max([\"name\",\
    \ \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\n\
    console.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    let max_len = 0;\n\
    \    let max_word = \"\";\n    for (let word of words) {\n        if (word.length\
    \ > max_len) {\n            max_len = word.length;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\n", "  if (words.length < 1) {\n  \
    \  return \"\";\n  }\n  let maxWord = words[0];\n  for (let word of words) {\n\
    \    if (uniqueChars(word) > uniqueChars(maxWord)) {\n      maxWord = word;\n\
    \    }\n  }\n  return maxWord;\n}\n\nexport function uniqueChars(word: string):\
    \ number {\n  let u_chars = new Set();\n  for (let char of word) {\n    u_chars.add(char);\n\
    \  }\n  return u_chars.size;\n}\n", "  let max_num_unique_characters = 0;\n  let\
    \ max_string: string = \"\";\n  for (let i = 0; i < words.length; i++) {\n   \
    \ let num_unique_characters = 0;\n    let character_exist: boolean[] = [];\n \
    \   for (let j = 0; j < words[i].length; j++) {\n      if (character_exist[words[i][j]]\
    \ === undefined) {\n        character_exist[words[i][j]] = true;\n        num_unique_characters++;\n\
    \      }\n    }\n    if (num_unique_characters > max_num_unique_characters) {\n\
    \      max_num_unique_characters = num_unique_characters;\n      max_string =\
    \ words[i];\n    }\n  }\n  return max_string;\n}\n", "  let sorted = words.sort();\n\
    \  let length = words.length;\n  let longest = 0;\n  let string = \"\";\n  for\
    \ (let i = 0; i < length; i++) {\n    let word = words[i];\n    let chars = word.split(\"\
    \");\n    if (chars.length > longest) {\n      longest = chars.length;\n     \
    \ string = word;\n    }\n  }\n  return string;\n}\n", "  if (!words.length) {\n\
    \    return \"\";\n  }\n  const counts = words.map(w => get_unique_chars(w));\n\
    \  const max_unique = Math.max(...counts);\n  const index = counts.indexOf(max_unique);\n\
    \  return words[index];\n}\n", "  let maxWord: string = words[0];\n  let maxCount:\
    \ number = words[0].length;\n  for (let i = 1; i < words.length; i++) {\n    if\
    \ (getUniqueCharCount(words[i]) > maxCount) {\n      maxWord = words[i];\n   \
    \   maxCount = words[i].length;\n    }\n  }\n  return maxWord;\n}\n", "  let maxWord\
    \ = \"\";\n  let maxCount = 0;\n  for (let word of words) {\n    const wordSet\
    \ = new Set(word);\n    if (wordSet.size > maxCount) {\n      maxCount = wordSet.size;\n\
    \      maxWord = word;\n    }\n  }\n  return maxWord;\n}\n\ndescribe(\"find_max\"\
    , () => {\n  it(\"can find max\", () => {\n    assert.equal(find_max([\"name\"\
    , \"of\", \"string\"]), \"string\");\n    assert.equal(find_max([\"name\", \"\
    enam\", \"game\"]), \"enam\");\n    assert.equal(find_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"]), \"aaaaaaa\");\n  });\n});\n", "  if (!words || words.length === 0)\
    \ {\n    return null;\n  }\n  let max_word = words[0];\n  let max_unique_char\
    \ = find_unique_char(words[0]);\n  for (let i = 1; i < words.length; i++) {\n\
    \    let unique_char = find_unique_char(words[i]);\n    if (unique_char.length\
    \ > max_unique_char.length) {\n      max_unique_char = unique_char;\n      max_word\
    \ = words[i];\n    } else if (unique_char.length === max_unique_char.length) {\n\
    \      if (words[i] < max_word) {\n        max_word = words[i];\n      }\n   \
    \ }\n  }\n  return max_word;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"\
    string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    let word = \"\";\n    let max = 0;\n  \
    \  for (let i = 0; i < words.length; i++) {\n        let currMax = getMax(words[i]);\n\
    \        if (currMax > max) {\n            max = currMax;\n            word =\
    \ words[i];\n        }\n    }\n    return word;\n}", "  let maxValue = 0;\n  let\
    \ maxWord = '';\n  words.forEach(function(currentWord) {\n    const alphabet =\
    \ new Set();\n    currentWord.split('').forEach(function(letter) {\n      alphabet.add(letter);\n\
    \    });\n    if (alphabet.size > maxValue) {\n      maxValue = alphabet.size;\n\
    \      maxWord = currentWord;\n    }\n  });\n  return maxWord;\n}\n", "  let max_char_word\
    \ = words[0];\n  let max_char_num = 0;\n  for (let word of words) {\n    const\
    \ word_chars = new Set(word);\n    if (word_chars.size > max_char_num) {\n   \
    \   max_char_num = word_chars.size;\n      max_char_word = word;\n    }\n  }\n\
    \  return max_char_word;\n}\n", "  let max_length = 0;\n  let max_word = \"\"\
    ;\n  for (let w of words) {\n    let unique_chars = [];\n    for (let c of w)\
    \ {\n      if (unique_chars.indexOf(c) == -1) {\n        unique_chars.push(c);\n\
    \      }\n    }\n    if (unique_chars.length > max_length) {\n      max_length\
    \ = unique_chars.length;\n      max_word = w;\n    }\n  }\n  return max_word;\n\
    }\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "  let max = 0;\n  let index = 0;\n  for (let i = 0; i < words.length;\
    \ i++) {\n    if (number_of_unique_chars(words[i]) > max) {\n      max = number_of_unique_chars(words[i]);\n\
    \      index = i;\n    }\n  }\n  return words[index];\n}\n", "    let max: string\
    \ = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let current =\
    \ words[i];\n        let currentChar = current.split(\"\");\n        if (currentChar.length\
    \ > max.length) {\n            max = current;\n        }\n    }\n    return max;\n\
    }\n\nfind_max([\"name\", \"of\", \"string\"]);\n\n", "  let max = words[0];\n\
    \  let maxUnique = find_unique(max);\n  words.forEach(word => {\n    let currentUnique\
    \ = find_unique(word);\n    if (currentUnique > maxUnique) {\n      max = word;\n\
    \      maxUnique = currentUnique;\n    }\n  });\n  return max;\n}\n\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "  const wordsWithUniqueChars\
    \ = words.map(word => {\n    return { word, uniqueChars: getUniqueChars(word)\
    \ };\n  });\n  const sorted = wordsWithUniqueChars.sort((a, b) => {\n    return\
    \ a.uniqueChars.length - b.uniqueChars.length;\n  });\n  return sorted[sorted.length\
    \ - 1].word;\n}\n", "    let max = \"\";\n    let length = 0;\n    words.forEach(element\
    \ => {\n        let newLength = element.split(\"\").filter((element, pos, arr)\
    \ => {\n            return arr.indexOf(element) == pos;\n        }).length;\n\
    \        if (newLength > length) {\n            max = element;\n            length\
    \ = newLength;\n        }\n    });\n    return max;\n}\n\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "    return undefined;\n\
    }\n", "  let maxValue = 0;\n  let maxWord = '';\n  for (let word of words) {\n\
    \    let wordChars = word.split('');\n    let uniqueChars = new Set(wordChars);\n\
    \    let uniqueCharsCount = uniqueChars.size;\n    if (uniqueCharsCount > maxValue)\
    \ {\n      maxValue = uniqueCharsCount;\n      maxWord = word;\n    }\n  }\n \
    \ return maxWord;\n}\n", "    let word_unique_char_counts: Array<[string, number]>\
    \ = [];\n    for (let word of words) {\n        let word_unique_char_count = word.split('').filter((elem,\
    \ index, arr) => {\n            return arr.indexOf(elem) === index;\n        }).length;\n\
    \        word_unique_char_counts.push([word, word_unique_char_count]);\n    }\n\
    \    word_unique_char_counts.sort((a, b) => {\n        if (a[1] !== b[1]) {\n\
    \            return b[1] - a[1];\n        } else {\n            return a[0].localeCompare(b[0]);\n\
    \        }\n    });\n    return word_unique_char_counts[0][0];\n}\n", "  //  Base\
    \ case\n  if (words.length === 1) {\n    return words[0];\n  }\n  let maxChar:\
    \ string = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (\n \
    \     words[i].length > maxChar.length ||\n      (words[i].length === maxChar.length\
    \ && words[i] < maxChar)\n    ) {\n      maxChar = words[i];\n    }\n  }\n  return\
    \ maxChar;\n}", "  // Your code goes here.\n  return '';\n}", "    let result:\
    \ string = \"\";\n    let max: number = 0;\n    for (let word of words) {\n  \
    \      let unique_letters: string[] = word.split(\"\");\n        unique_letters\
    \ = unique_letters.filter(function (value, index, self) {\n            return\
    \ self.indexOf(value) === index;\n        });\n        if (unique_letters.length\
    \ > max) {\n            max = unique_letters.length;\n            result = word;\n\
    \        }\n    }\n    return result;\n}\n", "    let maxLength = 0;\n    let\
    \ maxWord = words[0];\n    for (let word of words) {\n        let uniqueChars\
    \ = [];\n        for (let char of word) {\n            if (uniqueChars.indexOf(char)\
    \ == -1) {\n                uniqueChars.push(char);\n            }\n        }\n\
    \        if (uniqueChars.length > maxLength) {\n            maxLength = uniqueChars.length;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", " \
    \ let wordsUniqueChars: number[] = [];\n  words.forEach(word => {\n    let wordUniqueChars:\
    \ string[] = [];\n    for (let char of word) {\n      if (!wordUniqueChars.includes(char))\
    \ {\n        wordUniqueChars.push(char);\n      }\n    }\n    wordsUniqueChars.push(wordUniqueChars.length);\n\
    \  });\n  let max: number = Math.max(...wordsUniqueChars);\n  let wordWithMaxUniqueChars:\
    \ string = words[wordsUniqueChars.indexOf(max)];\n  return wordWithMaxUniqueChars;\n\
    }\n", "    let max_word: string = words[0];\n    let max_word_num: number = count_unique_chars(words[0]);\n\
    \    for (let i = 1; i < words.length; i++) {\n        let count: number = count_unique_chars(words[i]);\n\
    \        if (count > max_word_num) {\n            max_word = words[i];\n     \
    \       max_word_num = count;\n        }\n    }\n    return max_word;\n}\n", " \
    \ let max_char = 0;\n  let word_char: string[] = [];\n  let return_word: string\
    \ = \"\";\n  for (let word of words) {\n    let set_word = new Set(word);\n  \
    \  if (max_char < set_word.size) {\n      max_char = set_word.size;\n      word_char\
    \ = [word];\n    } else if (max_char === set_word.size) {\n      word_char.push(word);\n\
    \    }\n  }\n  return_word = word_char[0];\n  if (word_char.length > 1) {\n  \
    \  for (let i = 1; i < word_char.length; i++) {\n      if (return_word > word_char[i])\
    \ {\n        return_word = word_char[i];\n      }\n    }\n  }\n  return return_word;\n\
    }\n", "  let index = 0;\n  let max = words[0];\n  let char = max[0];\n  let maxLength\
    \ = 0;\n  let newMax = 0;\n  while (index < words.length) {\n    max = words[index];\n\
    \    char = max[0];\n    maxLength = 0;\n    for (let i = 0; i < max.length; i++)\
    \ {\n      if (max.indexOf(max[i]) === i) {\n        maxLength++;\n      }\n \
    \   }\n    if (newMax < maxLength) {\n      newMax = maxLength;\n      char =\
    \ max;\n    }\n    index++;\n  }\n  return char;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "  let maxWord =\
    \ words[0];\n  let maxNum = unique_count(maxWord);\n  for (let i = 1; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const num = unique_count(word);\n  \
    \  if (num > maxNum) {\n      maxWord = word;\n      maxNum = num;\n    }\n  }\n\
    \  return maxWord;\n}\n", "  // TODO: implement me\n  return \"Not yet implemented\"\
    ;\n}\n\nexport { leap_year, find_max };", "  let max_unique = 0;\n  let max_unique_word\
    \ = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const unique_chars\
    \ = new Set(words[i]).size;\n    if (unique_chars > max_unique) {\n      max_unique\
    \ = unique_chars;\n      max_unique_word = words[i];\n    }\n  }\n  return max_unique_word;\n\
    }", "    const count_map = new Map<string, number>();\n    for (const word of\
    \ words) {\n        const set = new Set<string>();\n        for (const char of\
    \ word) {\n            set.add(char);\n        }\n        count_map.set(word,\
    \ set.size);\n    }\n    let max_word = \"\";\n    let max_count = 0;\n    for\
    \ (const [word, count] of count_map) {\n        if (count > max_count) {\n   \
    \         max_word = word;\n            max_count = count;\n        }\n    }\n\
    \    return max_word;\n}", "  let max_word = words[0];\n  let max_len = 0;\n \
    \ words.forEach(word => {\n    let len = unique_char_count(word);\n    if (len\
    \ > max_len) {\n      max_len = len;\n      max_word = word;\n    }\n  });\n \
    \ return max_word;\n}\n", "  let max = 0;\n  let res = words[0];\n  for (let i\
    \ = 0; i < words.length; i++) {\n    let temp = words[i];\n    let count = 0;\n\
    \    for (let j = 0; j < temp.length; j++) {\n      if (temp.indexOf(temp[j])\
    \ === j) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max\
    \ = count;\n      res = temp;\n    }\n  }\n  return res;\n}\n", "  // Your code\
    \ here\n  var max = 0;\n  var maxWord = \"\";\n  for (var i = 0; i < words.length;\
    \ i++) {\n    var count = 0;\n    var dict = {};\n    for (var j = 0; j < words[i].length;\
    \ j++) {\n      if (!dict[words[i][j]]) {\n        dict[words[i][j]] = 1;\n  \
    \      count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n\
    \      maxWord = words[i];\n    }\n  }\n  return maxWord;\n}\n", "    let chars:\
    \ string[] = []\n    let max: number = 0\n    let result: string = \"\"\n    for\
    \ (let i: number = 0; i < words.length; i++) {\n        chars = words[i].split(\"\
    \")\n        let count: number = 0\n        for (let j: number = 0; j < chars.length;\
    \ j++) {\n            if (chars.indexOf(chars[j]) === j) {\n                count++\n\
    \            }\n        }\n        if (count > max) {\n            max = count\n\
    \            result = words[i]\n        }\n    }\n    return result\n}\n", " \
    \   let max = 0;\n    let unique_word: string = \"\";\n    for (let word of words)\
    \ {\n        let set = new Set(word);\n        if (set.size > max) {\n       \
    \     max = set.size;\n            unique_word = word;\n        }\n    }\n   \
    \ return unique_word;\n}", "    let max_word = words[0];\n    let max_chars =\
    \ chars(max_word);\n    let max_chars_length = max_chars.length;\n    for (let\
    \ i = 1; i < words.length; i++) {\n        let word = words[i];\n        let chars_\
    \ = chars(word);\n        if (chars_.length > max_chars_length) {\n          \
    \  max_word = word;\n            max_chars = chars_;\n            max_chars_length\
    \ = max_chars.length;\n        }\n    }\n    return max_word;\n}\n", "  return\
    \ words.reduce((acc, curr): string => {\n    if (acc.length === curr.length) {\n\
    \      return acc < curr ? acc : curr;\n    }\n    return acc.length > curr.length\
    \ ? acc : curr;\n  });\n}\n", "  let max = \"\";\n  words.forEach(word => {\n\
    \    if (count_unique(word) > count_unique(max)) {\n      max = word;\n    }\n\
    \  });\n  return max;\n}\n", "  let max_index = 0;\n  let max_uniq_chars = 0;\n\
    \  for (let i = 0; i < words.length; i++) {\n    const char_set = new Set(words[i]);\n\
    \    if (char_set.size > max_uniq_chars) {\n      max_uniq_chars = char_set.size;\n\
    \      max_index = i;\n    }\n  }\n  return words[max_index];\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    let res =\
    \ words[0];\n    let length = words.length;\n    for (let i = 1; i < length; i++)\
    \ {\n        let c1 = unique_chars(words[i]);\n        let c2 = unique_chars(res);\n\
    \        if (c1 > c2) {\n            res = words[i];\n        } else if (c1 ===\
    \ c2) {\n            res = res < words[i] ? res : words[i];\n        }\n    }\n\
    \    return res;\n}\n", "  let max = {str: '', count: 0};\n  for (let word of\
    \ words) {\n    const chars = word.split('');\n    const uniq = new Set(chars);\n\
    \    if (uniq.size > max.count) {\n      max.str = word;\n      max.count = uniq.size;\n\
    \    }\n  }\n  return max.str;\n}\n", "  let i: number;\n  let j: number;\n  let\
    \ maxWord: string = words[0];\n  let longestWord: number = words[0].length;\n\
    \  for (i = 0; i < words.length; i++) {\n    let unique: string[] = [];\n    for\
    \ (j = 0; j < words[i].length; j++) {\n      if (unique.indexOf(words[i][j]) ===\
    \ -1) {\n        unique.push(words[i][j]);\n      }\n    }\n    if (unique.length\
    \ > longestWord) {\n      longestWord = unique.length;\n      maxWord = words[i];\n\
    \    }\n  }\n  return maxWord;\n}\nconsole.log(find_max([\"name\", \"of\", \"\
    string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    // TODO: Finish function\n    return '';\n\
    }\n", "    let stringToReturn: string = \"\";\n    let maxUnique: number = 0;\n\
    \    for (let i: number = 0; i < words.length; i++) {\n        let current: string\
    \ = words[i];\n        let uniqueChar: string[] = [];\n        for (let i: number\
    \ = 0; i < current.length; i++) {\n            if (uniqueChar.indexOf(current[i])\
    \ === -1) {\n                uniqueChar.push(current[i]);\n            }\n   \
    \     }\n        if (uniqueChar.length > maxUnique) {\n            maxUnique =\
    \ uniqueChar.length;\n            stringToReturn = current;\n        }\n    }\n\
    \    return stringToReturn;\n}\n", "  let max = 0;\n  let max_word = \"\";\n \
    \ for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const\
    \ cnt = word.split(\"\").reduce((acc: Record<string, number>, x) => {\n      acc[x]\
    \ = acc[x] ? acc[x] + 1 : 1;\n      return acc;\n    }, {});\n    if (Object.keys(cnt).length\
    \ > max) {\n      max = Object.keys(cnt).length;\n      max_word = word;\n   \
    \ }\n  }\n  return max_word;\n}\n", "    let max: string = \"\";\n    let max_set:\
    \ Set<string> = new Set();\n    for (let i = 0; i < words.length; i++) {\n   \
    \     let word = words[i];\n        let set: Set<string> = new Set();\n      \
    \  for (let j = 0; j < word.length; j++) {\n            set.add(word[j]);\n  \
    \      }\n        if (set.size > max_set.size) {\n            max = word;\n  \
    \          max_set = set;\n        } else if (set.size === max_set.size) {\n \
    \           if (word < max) {\n                max = word;\n                max_set\
    \ = set;\n            }\n        }\n    }\n    return max;\n}\n", "  return words.reduce((max,\
    \ next) => {\n    const maxUnique = max.split('').filter((item, index, array)\
    \ => {\n      return array.indexOf(item) === index;\n    }).length;\n    const\
    \ nextUnique = next.split('').filter((item, index, array) => {\n      return array.indexOf(item)\
    \ === index;\n    }).length;\n    if (maxUnique < nextUnique) {\n      return\
    \ next;\n    } else if (maxUnique === nextUnique) {\n      return max > next ?\
    \ next : max;\n    } else {\n      return max;\n    }\n  }, '');\n}\n", "  let\
    \ maxword = \"\";\n  let max_chars = 0;\n  words.forEach(word => {\n    if (max_chars\
    \ < unique_characters(word)) {\n      max_chars = unique_characters(word);\n \
    \     maxword = word;\n    }\n  });\n  return maxword;\n}\n", "    let maxUniqChars:\
    \ number = 0;\n    let result: string = \"\";\n    words.forEach(word => {\n \
    \       let uniqChars: number = 0;\n        word.split(\"\").forEach(letter =>\
    \ {\n            if (word.split(letter).length - 1 === 1) {\n                uniqChars++;\n\
    \            }\n        });\n        if (uniqChars > maxUniqChars) {\n       \
    \     maxUniqChars = uniqChars;\n            result = word;\n        }\n    });\n\
    \    return result;\n}\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    let maxLength = 0;\n    let maxWord = '';\n\
    \    for (let i = 0; i < words.length; i++) {\n        const currWord = words[i];\n\
    \        const length = getUniqueCharLength(currWord);\n        if (length > maxLength)\
    \ {\n            maxLength = length;\n            maxWord = currWord;\n      \
    \  }\n    }\n    return maxWord;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
