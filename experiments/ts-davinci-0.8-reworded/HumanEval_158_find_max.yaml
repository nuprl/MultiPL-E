name: HumanEval_158_find_max
language: ts
prompt: "//Write a function that accepts an array of strings.\n// The array contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
  , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
  enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
  , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
  );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
  ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
  rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"mad\"\
  , \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\", \"\
  a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n  assert.deepEqual(candidate([\"\
  play\", \"play\", \"play\"]),\"play\");\n}\n\ntest();"
completions: ["    let max_num = 0;\n    let max_word = \"\";\n    for (let word of\
    \ words) {\n        let num = new Set(word).size;\n        if (num > max_num)\
    \ {\n            max_num = num;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\n", "  let max: string = \"\";\n  for (let i = 0;\
    \ i < words.length; i++) {\n    if (word_unique_chars(words[i]) > word_unique_chars(max))\
    \ {\n      max = words[i];\n    }\n  }\n  return max;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    const hist:\
    \ { [key: string]: number } = {};\n    const result: number[] = [];\n    let max\
    \ = 0;\n    let max_word = words[0];\n    let max_count = 0;\n    for (let i =\
    \ 0; i < words.length; i++) {\n        const word = words[i];\n        let count\
    \ = 0;\n        const seen: { [key: string]: number } = {};\n        for (let\
    \ j = 0; j < word.length; j++) {\n            const letter = word[j];\n      \
    \      if (!seen[letter]) {\n                seen[letter] = 1;\n             \
    \   count++;\n            }\n        }\n        if (count > max_count) {\n   \
    \         max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\n\
    console.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"\
    aaaaaaa\", \"bb\", \"cc\"]));\n", "    let maxChar: string = \"\";\n    let maxCharValue:\
    \ number = 0;\n    let currCharValue: number = 0;\n    let currChar: string =\
    \ \"\";\n    for (let i = 0; i < words.length; i++) {\n        currChar = words[i];\n\
    \        currCharValue = countChars(currChar);\n        if (currCharValue > maxCharValue)\
    \ {\n            maxCharValue = currCharValue;\n            maxChar = currChar;\n\
    \        }\n    }\n    return maxChar;\n}\n", "  let max = 0;\n  let maxWord =\
    \ \"\";\n  for (let word of words) {\n    let wordSet = new Set();\n    for (let\
    \ letter of word) {\n      wordSet.add(letter);\n    }\n    if (wordSet.size >\
    \ max) {\n      max = wordSet.size;\n      maxWord = word;\n    }\n  }\n  return\
    \ maxWord;\n}\n", "  const num_unique_chars: number[] = [];\n  for (let word of\
    \ words) {\n    const chars: string[] = [];\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (!chars.includes(word[i])) {\n        chars.push(word[i]);\n\
    \      }\n    }\n    num_unique_chars.push(chars.length);\n  }\n  let max: number\
    \ = num_unique_chars[0];\n  let max_index: number = 0;\n  for (let i = 1; i <\
    \ num_unique_chars.length; i++) {\n    if (num_unique_chars[i] > max) {\n    \
    \  max = num_unique_chars[i];\n      max_index = i;\n    }\n  }\n  return words[max_index];\n\
    }\n", "  let max_word = '';\n  let max_len = 0;\n  for (let word of words) {\n\
    \    if (unique_chars(word).length > max_len) {\n      max_len = unique_chars(word).length;\n\
    \      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "    const dict\
    \ = {}\n    for (const i of words) {\n        dict[i] = 1\n        for (const\
    \ k of i) {\n            if (dict[i][k]) {\n                dict[i][k]++\n   \
    \         } else {\n                dict[i][k] = 1\n            }\n        }\n\
    \    }\n    return Object.keys(dict).sort((a, b) => {\n        let maxA = 0\n\
    \        let maxB = 0\n        for (const i in dict[a]) {\n            if (dict[a][i]\
    \ > maxA) {\n                maxA = dict[a][i]\n            }\n        }\n   \
    \     for (const i in dict[b]) {\n            if (dict[b][i] > maxB) {\n     \
    \           maxB = dict[b][i]\n            }\n        }\n        if (maxA ===\
    \ maxB) {\n            return 0\n        } else if (maxA > maxB) {\n         \
    \   return -1\n        } else {\n            return 1\n        }\n    })[0]\n\
    }\n", "    let max: string = \"\";\n    for (let word of words) {\n        if\
    \ (word.length > max.length) {\n            max = word;\n        }\n    }\n  \
    \  return max;\n}\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"\
    name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"\
    cc\"]));\n", "  let result: string = \"\";\n  let max: number = 0;\n  words.forEach((word:\
    \ string) => {\n    const uniqueCharCount: number = new Set(word.split(\"\")).size;\n\
    \    if (uniqueCharCount > max) {\n      max = uniqueCharCount;\n      result\
    \ = word;\n    }\n  });\n  return result;\n}\n\nconsole.log(find_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"]));\n", "  let maxLen: number = 0;\n  let maxStr: string = \"\
    \";\n  for (let word of words) {\n    let len: number = unique_chars(word);\n\
    \    if (len > maxLen) {\n      maxLen = len;\n      maxStr = word;\n    }\n \
    \ }\n  return maxStr;\n}", "  // create an array of unique characters of each\
    \ word\n  const uniqueCharCount = words.map(word => {\n    const wordCharCount\
    \ = word.split('').reduce((acc, ch) => {\n      return acc + (acc.includes(ch)\
    \ ? '' : ch);\n    }, '');\n    return wordCharCount;\n  });\n  // get the max\
    \ count\n  const maxCount = Math.max(...uniqueCharCount.map(word => word.length));\n\
    \  // find the word with max count\n  const maxCountWords = uniqueCharCount.filter(word\
    \ => word.length === maxCount);\n  // find the first string that appears in lexicographical\
    \ order\n  const lexicographicalOrderWords = maxCountWords.sort();\n  return lexicographicalOrderWords[0];\n\
    }\n", "    let max_chars = \"\";\n    let max_count = 0;\n    for (let word of\
    \ words) {\n        let unique_chars = \"\";\n        for (let char of word) {\n\
    \            if (unique_chars.indexOf(char) === -1) {\n                unique_chars\
    \ += char;\n            }\n        }\n        if (unique_chars.length > max_count)\
    \ {\n            max_count = unique_chars.length;\n            max_chars = word;\n\
    \        }\n    }\n    return max_chars;\n}\nconsole.log(find_max([\"name\", \"\
    of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\n\
    console.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));", "  let max_so_far = \"\
    \";\n  for (let word of words) {\n    if (unique_chars(word) > unique_chars(max_so_far))\
    \ {\n      max_so_far = word;\n    }\n  }\n  return max_so_far;\n}\n\nlet words\
    \ = [\"name\", \"of\", \"string\"];\nconsole.log(find_max(words));\nwords = [\"\
    name\", \"enam\", \"game\"];\nconsole.log(find_max(words));\nwords = [\"aaaaaaa\"\
    , \"bb\", \"cc\"];\nconsole.log(find_max(words));\n", "    let result: string;\n\
    \    if (words.length > 0) {\n        result = words[0];\n        let max_unique_characters:\
    \ number = 0;\n        for (let word of words) {\n            let word_unique_characters:\
    \ number = 0;\n            let seen_characters: Set<string> = new Set();\n   \
    \         for (let letter of word) {\n                if (!seen_characters.has(letter))\
    \ {\n                    word_unique_characters++;\n                    seen_characters.add(letter);\n\
    \                }\n            }\n            if (word_unique_characters > max_unique_characters)\
    \ {\n                max_unique_characters = word_unique_characters;\n       \
    \         result = word;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var output: string = words[0];\n    var output_count: number = find_count(output);\n\
    \    for (var i = 1; i < words.length; i++) {\n        var i_count: number = find_count(words[i]);\n\
    \        if (i_count > output_count) {\n            output = words[i];\n     \
    \       output_count = i_count;\n        }\n    }\n    return output;\n}\n", " \
    \   let max = 0;\n    let maxWord = \"\";\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        const unique = get_unique(word);\n\
    \        if (unique.length > max) {\n            max = unique.length;\n      \
    \      maxWord = word;\n        }\n    }\n    return maxWord;\n}\n", "    let\
    \ max_count = 0;\n    let max_word = '';\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let curr_word = words[i];\n        let curr_count = 0;\n   \
    \     for (let j = 0; j < curr_word.length; j++) {\n            let temp = curr_word.substring(0,\
    \ j) + curr_word.substring(j + 1);\n            if (temp.indexOf(curr_word[j])\
    \ === -1) {\n                curr_count++;\n            }\n        }\n       \
    \ if (curr_count > max_count) {\n            max_count = curr_count;\n       \
    \     max_word = curr_word;\n        }\n    }\n    return max_word;\n}\nconsole.log(find_max([\"\
    name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"\
    ]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\", \"cc\"]));\n", "    return words.reduce((acc:\
    \ string, next: string) => {\n        return count_unique(acc) > count_unique(next)\
    \ ? acc : next;\n    });\n}\n", "    let maxCount: number = 0;\n    let maxWords:\
    \ string[] = [];\n    for (let word of words) {\n        let count: number = 0;\n\
    \        let set = new Set();\n        for (let i = 0; i < word.length; i++) {\n\
    \            set.add(word[i]);\n        }\n        count = set.size;\n       \
    \ if (count > maxCount) {\n            maxCount = count;\n            maxWords\
    \ = [];\n            maxWords.push(word);\n        } else if (count === maxCount)\
    \ {\n            maxWords.push(word);\n        }\n    }\n    return findLexo(maxWords);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
