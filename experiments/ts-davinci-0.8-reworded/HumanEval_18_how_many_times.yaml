name: HumanEval_18_how_many_times
language: ts
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string:\
  \ string, substring: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\"\
  , \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
  cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n\
  }\n\ntest();"
completions: ["  return string.split(substring).length - 1;\n}\n", "  let counter\
    \ = 0;\n  let currentIndex = 0;\n  while (currentIndex !== -1) {\n    currentIndex\
    \ = string.indexOf(substring, currentIndex);\n    if (currentIndex !== -1) {\n\
    \      counter++;\n      currentIndex += substring.length;\n    }\n  }\n  return\
    \ counter;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    let j:\
    \ number = 0;\n    let counter: number = 0;\n    if (substring == \"\") {\n  \
    \      return 0;\n    } else {\n        for (let i: number = 0; i < string.length;\
    \ i++) {\n            if (string[i] == substring[j]) {\n                j++;\n\
    \                if (j == substring.length) {\n                    counter++;\n\
    \                    j = 0;\n                }\n            } else {\n       \
    \         j = 0;\n            }\n        }\n        return counter;\n    }\n}\n",
  "    let result = 0;\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string.substr(i, substring.length) === substring) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(how_many_times(\"\", \"\
    a\"));\nconsole.log(how_many_times(\"aaa\", \"a\"));\nconsole.log(how_many_times(\"\
    aaaa\", \"aa\"));", "  return 0;\n}\n", "    return 0;\n}\n", "    let count =\
    \ 0;\n    let i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) === substring) {\n            count += 1;\n          \
    \  i += substring.length;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    return count;\n}\n", "  let match = string.match(new RegExp(substring,\
    \ \"g\"));\n  return match ? match.length : 0;\n}\n", "    if (substring === '')\
    \ {\n        return 0;\n    }\n\n    let count = 0;\n    let index = 0;\n    while\
    \ (index <= string.length - substring.length) {\n        if (string.charAt(index)\
    \ === substring.charAt(0)) {\n            const subIndex = index + 1;\n      \
    \      const subCount = 1;\n            let copyIndex = subIndex;\n          \
    \  let copyCount = subCount;\n            while (string.charAt(copyIndex) ===\
    \ substring.charAt(copyCount)) {\n                copyIndex++;\n             \
    \   copyCount++;\n                if (copyCount === substring.length) {\n    \
    \                count++;\n                    index = copyIndex;\n          \
    \          break;\n                }\n            }\n        }\n        index++;\n\
    \    }\n    return count;\n}\n", "    if (substring.length == 0) {\n        return\
    \ 0;\n    }\n\n    let substring_index = 0;\n    let count = 0;\n\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] == substring[substring_index])\
    \ {\n            substring_index++;\n            if (substring_index == substring.length)\
    \ {\n                count++;\n                substring_index = 0;\n        \
    \    }\n        } else {\n            substring_index = 0;\n        }\n    }\n\
    \n    return count;\n}\n\n", "  //TODO: implement!\n  return -1;\n}\n", "    let\
    \ count = 0;\n    let i = string.indexOf(substring);\n    while (i >= 0) {\n \
    \       count++;\n        i = string.indexOf(substring, i + 1);\n    }\n    return\
    \ count;\n}\n", "  let count = 0;\n  let startIndex = 0;\n  while (true) {\n \
    \   let matchIndex = string.indexOf(substring, startIndex);\n    if (matchIndex\
    \ == -1) {\n      break;\n    }\n    count += 1;\n    startIndex = matchIndex\
    \ + 1;\n  }\n  return count;\n}\n", "  // TODO\n  return 0;\n}\n", "    let count\
    \ = 0;\n    let j = 0;\n    for (let i = 0; i < string.length; i++) {\n      \
    \  if (string[i] === substring[j]) {\n            j++;\n            if (j ===\
    \ substring.length) {\n                count++;\n                j = 0;\n    \
    \        }\n        } else {\n            j = 0;\n        }\n    }\n    return\
    \ count;\n}", "  let number_of_times = 0;\n  let start = 0;\n  while (true) {\n\
    \    let found = string.indexOf(substring, start);\n    if (found === -1) break;\n\
    \    number_of_times++;\n    start = found + 1;\n  }\n  return number_of_times;\n\
    }\n", "    return string.split(substring).length - 1;\n}", "    if (substring.length\
    \ == 0) {\n        return 0;\n    }\n    var s = string.split(substring);\n  \
    \  return s.length - 1;\n}\n", "    if (substring === \"\") return 0;\n    let\
    \ counter = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === substring[0]) {\n            let j = 0;\n            while (string[i + j]\
    \ === substring[j]) {\n                j++;\n                if (j === substring.length)\
    \ {\n                    counter++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return counter;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
