name: HumanEval_18_how_many_times
language: ts
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string:\
  \ string, substring: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\"\
  , \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
  cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n\
  }\n\ntest();"
completions: ["  return string.split(substring).length - 1;\n}\n", "  let counter\
    \ = 0;\n  let currentIndex = 0;\n  while (currentIndex !== -1) {\n    currentIndex\
    \ = string.indexOf(substring, currentIndex);\n    if (currentIndex !== -1) {\n\
    \      counter++;\n      currentIndex += substring.length;\n    }\n  }\n  return\
    \ counter;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n", "    let j:\
    \ number = 0;\n    let counter: number = 0;\n    if (substring == \"\") {\n  \
    \      return 0;\n    } else {\n        for (let i: number = 0; i < string.length;\
    \ i++) {\n            if (string[i] == substring[j]) {\n                j++;\n\
    \                if (j == substring.length) {\n                    counter++;\n\
    \                    j = 0;\n                }\n            } else {\n       \
    \         j = 0;\n            }\n        }\n        return counter;\n    }\n}\n",
  "    let result = 0;\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string.substr(i, substring.length) === substring) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(how_many_times(\"\", \"\
    a\"));\nconsole.log(how_many_times(\"aaa\", \"a\"));\nconsole.log(how_many_times(\"\
    aaaa\", \"aa\"));", "  return 0;\n}\n", "    return 0;\n}\n", "    let count =\
    \ 0;\n    let i = 0;\n    while (i < string.length) {\n        if (string.substring(i,\
    \ i + substring.length) === substring) {\n            count += 1;\n          \
    \  i += substring.length;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    return count;\n}\n", "  let match = string.match(new RegExp(substring,\
    \ \"g\"));\n  return match ? match.length : 0;\n}\n", "    if (substring === '')\
    \ {\n        return 0;\n    }\n\n    let count = 0;\n    let index = 0;\n    while\
    \ (index <= string.length - substring.length) {\n        if (string.charAt(index)\
    \ === substring.charAt(0)) {\n            const subIndex = index + 1;\n      \
    \      const subCount = 1;\n            let copyIndex = subIndex;\n          \
    \  let copyCount = subCount;\n            while (string.charAt(copyIndex) ===\
    \ substring.charAt(copyCount)) {\n                copyIndex++;\n             \
    \   copyCount++;\n                if (copyCount === substring.length) {\n    \
    \                count++;\n                    index = copyIndex;\n          \
    \          break;\n                }\n            }\n        }\n        index++;\n\
    \    }\n    return count;\n}\n", "    if (substring.length == 0) {\n        return\
    \ 0;\n    }\n\n    let substring_index = 0;\n    let count = 0;\n\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] == substring[substring_index])\
    \ {\n            substring_index++;\n            if (substring_index == substring.length)\
    \ {\n                count++;\n                substring_index = 0;\n        \
    \    }\n        } else {\n            substring_index = 0;\n        }\n    }\n\
    \n    return count;\n}\n\n", "  //TODO: implement!\n  return -1;\n}\n", "    let\
    \ count = 0;\n    let i = string.indexOf(substring);\n    while (i >= 0) {\n \
    \       count++;\n        i = string.indexOf(substring, i + 1);\n    }\n    return\
    \ count;\n}\n", "  let count = 0;\n  let startIndex = 0;\n  while (true) {\n \
    \   let matchIndex = string.indexOf(substring, startIndex);\n    if (matchIndex\
    \ == -1) {\n      break;\n    }\n    count += 1;\n    startIndex = matchIndex\
    \ + 1;\n  }\n  return count;\n}\n", "  // TODO\n  return 0;\n}\n", "    let count\
    \ = 0;\n    let j = 0;\n    for (let i = 0; i < string.length; i++) {\n      \
    \  if (string[i] === substring[j]) {\n            j++;\n            if (j ===\
    \ substring.length) {\n                count++;\n                j = 0;\n    \
    \        }\n        } else {\n            j = 0;\n        }\n    }\n    return\
    \ count;\n}", "  let number_of_times = 0;\n  let start = 0;\n  while (true) {\n\
    \    let found = string.indexOf(substring, start);\n    if (found === -1) break;\n\
    \    number_of_times++;\n    start = found + 1;\n  }\n  return number_of_times;\n\
    }\n", "    return string.split(substring).length - 1;\n}", "    if (substring.length\
    \ == 0) {\n        return 0;\n    }\n    var s = string.split(substring);\n  \
    \  return s.length - 1;\n}\n", "    if (substring === \"\") return 0;\n    let\
    \ counter = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === substring[0]) {\n            let j = 0;\n            while (string[i + j]\
    \ === substring[j]) {\n                j++;\n                if (j === substring.length)\
    \ {\n                    counter++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return counter;\n}\n", "    if (substring.length\
    \ === 0) return 0;\n    let count = 0;\n    let sub_str_pos = 0;\n    let prev_str_pos\
    \ = 0;\n    while (true) {\n        sub_str_pos = string.indexOf(substring, prev_str_pos);\n\
    \        if (sub_str_pos === -1) {\n            break;\n        }\n        count++;\n\
    \        prev_str_pos = sub_str_pos + 1;\n    }\n    return count;\n}\n", "  let\
    \ i = 0;\n  let count = 0;\n  let len = substring.length;\n  while (i <= string.length\
    \ - len) {\n    let str = string.substring(i, i + len);\n    if (str === substring)\
    \ {\n      count++;\n    }\n    i++;\n  }\n  return count;\n}\n", "    return\
    \ string.split(substring).length - 1;\n}\n", "    let times: number = 0;\n   \
    \ let remaining: string = string;\n    let index: number = remaining.indexOf(substring);\n\
    \    while (index >= 0) {\n        times++;\n        remaining = remaining.substring(index\
    \ + 1);\n        index = remaining.indexOf(substring);\n    }\n    return times;\n\
    }\n", "  let count = 0;\n  let index = string.indexOf(substring);\n  while (index\
    \ !== -1) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n\
    \  }\n  return count;\n}\n", "    let counter = 0;\n    let j = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === substring[j]) {\n\
    \            j++;\n            if (j === substring.length) {\n               \
    \ counter++;\n                j = 0;\n            }\n        } else {\n      \
    \      j = 0;\n        }\n    }\n    return counter;\n}\n", "    var count = 0,\
    \ pos = 0;\n    while (true) {\n        pos = string.indexOf(substring, pos);\n\
    \        if (pos > -1) {\n            count++;\n            pos++;\n        }\
    \ else {\n            break;\n        }\n    }\n    return count;\n}", "    return\
    \ count_substrings(string, substring);\n}\n", "    let searchResult = string.match(new\
    \ RegExp(substring, \"g\"));\n    return searchResult === null ? 0 : searchResult.length;\n\
    }\n", "    let count = 0;\n    let pos = 0;\n    while (true) {\n        pos =\
    \ string.indexOf(substring, pos);\n        if (pos == -1) break;\n        pos++;\n\
    \        count++;\n    }\n    return count;\n}\n", "    if (substring.length ===\
    \ 0) {\n        return 0;\n    }\n    const regex = new RegExp(substring, \"g\"\
    );\n    return (string.match(regex) || []).length;\n}\n", "    let i = 0;\n  \
    \  let count = 0;\n    if (substring.length === 0) {\n        return 0;\n    }\n\
    \    else {\n        while (i < string.length) {\n            if (string.indexOf(substring,\
    \ i) === i) {\n                count++;\n                i = i + substring.length;\n\
    \            }\n            else {\n                i++;\n            }\n    \
    \    }\n        return count;\n    }\n}\n", "    let times: number = 0;\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string.slice(i, i + substring.length)\
    \ === substring) {\n            times++;\n        }\n    }\n    return times;\n\
    }\n", "    let lastIndex = 0;\n    let count = 0;\n    while (lastIndex != -1)\
    \ {\n        lastIndex = string.indexOf(substring, lastIndex);\n        if (lastIndex\
    \ != -1) {\n            count++;\n            lastIndex += substring.length;\n\
    \        }\n    }\n    return count;\n}\n", "  return (string.match(new RegExp(substring,\
    \ \"g\")) || []).length;\n}\n", "    return 0;\n}\n", "    let regExp = new RegExp(substring,\
    \ \"g\");\n    let match = string.match(regExp);\n    if (match) {\n        return\
    \ match.length;\n    } else {\n        return 0;\n    }\n}\n", "    let counter\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) === substring) {\n            counter++;\n        }\n    }\n\
    \    return counter;\n}\n", "  let count = 0;\n  if (substring === \"\") {\n \
    \   return 0;\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]\
    \ === substring[0]) {\n      for (let j = 0; j < substring.length; j++) {\n  \
    \      if (string[i + j] !== substring[j]) {\n          break;\n        }\n  \
    \      if (j === substring.length - 1) {\n          count++;\n        }\n    \
    \  }\n    }\n  }\n  return count;\n}\n", "    let r = 0;\n    if (substring.length\
    \ == 0) return 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)\
    \ == substring.charAt(0)) {\n            let found = true;\n            for (let\
    \ j = 1; j < substring.length; j++) {\n                if (i + j >= string.length\
    \ || string.charAt(i + j) != substring.charAt(j)) {\n                    found\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (found) {\n                r++;\n                i += substring.length\
    \ - 1;\n            }\n        }\n    }\n    return r;\n}\n", "    let result\
    \ = 0;\n    let i = 0;\n    while (i < string.length) {\n        const current\
    \ = string.indexOf(substring, i);\n        if (current === -1) {\n           \
    \ break;\n        }\n        result++;\n        i = current + 1;\n    }\n    return\
    \ result;\n}\n\nconsole.log(how_many_times(\"\", \"a\"));\nconsole.log(how_many_times(\"\
    aaa\", \"a\"));\nconsole.log(how_many_times(\"aaaa\", \"aa\"));\nconsole.log(how_many_times(\"\
    aaaa\", \"aaa\"));\nconsole.log(how_many_times(\"aaba\", \"aa\"));\nconsole.log(how_many_times(\"\
    azqrsaaqpa\", \"aa\"));\nconsole.log(how_many_times(\"azqrsaaqpaa\", \"aa\"));\n\
    console.log(how_many_times(\"azqrsaaqpa\", \"aaa\"));\nconsole.log(how_many_times(\"\
    azqrsaaqpaaa\", \"aaa\"));\nconsole.log(how_many_times(\"azqrsaaqpa\", \"aaaa\"\
    ));\nconsole.log(how_many_times(\"azqrsaaqpaaaa\", \"aaaa\"));\nconsole.log(how_many_times(\"\
    azqrsaaqpa\", \"ba\"));\nconsole.log(how_many_times(\"azqrsaaqpaba\", \"ba\"));\n\
    console.log(how_many_times(\"azqrsaaqpa\", \"aba\"));\nconsole.log(how_many_times(\"\
    azqrsaaqpaba\", \"aba\"));\nconsole.log(how_many_times(\"azqrsaaqpa\", \"aaaaaa\"\
    ));\nconsole.log(how_many_times(\"azqrsaaqpaaaaaa\", \"aaaaaa\"));\nconsole.log(how_many_times(\"\
    azqrsaaqpa\", \"aaba\"));\nconsole.log(how_many_times(\"azqrsaaqpaaaaaa\", \"\
    aaba\"));\nconsole.log(how_many_times(\"azqrsaaqpa\", \"aabaaba\"));\nconsole",
  "    let count = 0;\n    let start = 0;\n    while (true) {\n        const index\
    \ = string.indexOf(substring, start);\n        if (index === -1) {\n         \
    \   break;\n        }\n        count++;\n        start = index + 1;\n    }\n \
    \   return count;\n}\n", "    if (substring.length === 0) {\n        return 0;\n\
    \    }\n    const times = string.match(new RegExp(substring, \"g\"));\n    return\
    \ times ? times.length : 0;\n}\n", "    let result = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        const slice = string.slice(i, i + substring.length);\n\
    \        if (slice === substring) {\n            result++;\n        }\n    }\n\
    \    return result;\n}\n", "  if (substring.length > string.length) {\n    return\
    \ 0;\n  }\n  return string.split(substring).length - 1;\n}\n", "    var count\
    \ = 0;\n    for (var i = 0; i < string.length; i++) {\n        var subIndex =\
    \ i;\n        var index = 0;\n        while (subIndex < string.length && index\
    \ < substring.length && string[subIndex] == substring[index]) {\n            subIndex++;\n\
    \            index++;\n        }\n        if (index == substring.length) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\n", "    var count\
    \ = 0, n = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ == substring[n]) {\n            n++;\n            if (n == substring.length)\
    \ {\n                count++;\n                n = 0;\n            }\n       \
    \ } else {\n            n = 0;\n        }\n    }\n    return count;\n}\n", " \
    \   return string.split(substring).length - 1;\n}\n", "    if (substring === \"\
    \") return 0;\n    let count = 0;\n    let start = 0;\n    while (start < string.length)\
    \ {\n        let idx = string.indexOf(substring, start);\n        if (idx < 0)\
    \ break;\n        count++;\n        start = idx + 1;\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  let index = string.indexOf(substring);\n  while (index\
    \ != -1) {\n    count++;\n    index = string.indexOf(substring, index + 1);\n\
    \  }\n  return count;\n}\n", "    if (substring === \"\") {\n        return 0;\n\
    \    }\n    return string.split(substring).length - 1;\n}\n", "    let result\
    \ = 0;\n    let i = string.indexOf(substring);\n    while (i !== -1) {\n     \
    \   result += 1;\n        i = string.indexOf(substring, i + 1);\n    }\n    return\
    \ result;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) === substring) {\n       \
    \     count += 1;\n        }\n    }\n    return count;\n}\n", "    return 0;\n\
    }\n\n", "    if (substring.length == 0) {\n        return 0;\n    }\n    let index\
    \ = string.indexOf(substring);\n    if (index == -1) {\n        return 0;\n  \
    \  } else {\n        return 1 + how_many_times(string.slice(index + 1), substring);\n\
    \    }\n}\n", "    let answer: number = 0;\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n\
    \            answer++;\n        }\n    }\n    return answer;\n}\n", "    let found\
    \ = 0;\n    let pos = 0;\n    while (true) {\n        pos = string.indexOf(substring,\
    \ pos);\n        if (pos >= 0) {\n            found++;\n            pos += substring.length;\n\
    \        } else {\n            break;\n        }\n    }\n    return found;\n}\n",
  "    // if (substring.length > string.length) return 0;\n    if (substring === \"\
    \") return 0;\n    let count = 0;\n    let i = string.indexOf(substring);\n  \
    \  while (i !== -1) {\n        count++;\n        i = string.indexOf(substring,\
    \ i + 1);\n    }\n    return count;\n}\n", "    if (substring.length === 0) {\n\
    \        return 0;\n    }\n\n    let count = 0;\n    let index = string.indexOf(substring);\n\
    \    while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n", "  if (substring === \"\") {\n\
    \    return 0;\n  }\n\n  const regex = new RegExp(substring, \"g\");\n  return\
    \ string.match(regex).length;\n}\n", "    let count = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string.substr(i, substring.length) ===\
    \ substring) {\n            count++;\n        }\n    }\n    return count;\n}\n\
    \n", "  let matches = 0;\n  let offset = 0;\n  while(offset < string.length){\n\
    \    let index = string.indexOf(substring, offset);\n    if(index === -1){\n \
    \     break;\n    } else {\n      matches += 1;\n      offset = index + 1;\n \
    \   }\n  }\n  return matches;\n}\n", "    if (!string || !substring) {\n     \
    \   return 0;\n    }\n    const regex = new RegExp(substring, \"g\");\n    return\
    \ (string.match(regex) || []).length;\n}\n", "    if (substring.length == 0) {\n\
    \        return 0;\n    }\n    if (string.length == 0) {\n        return 0;\n\
    \    }\n    let i = 0;\n    let count = 0;\n    while (true) {\n        i = string.indexOf(substring,\
    \ i);\n        if (i == -1) {\n            break;\n        }\n        count++;\n\
    \        i += substring.length;\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let pos = string.indexOf(substring);\n    while (pos >= 0) {\n   \
    \     count++;\n        pos = string.indexOf(substring, pos + 1);\n    }\n   \
    \ return count;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.substr(i, substring.length) === substring) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n", "    // TODO:\
    \ implement!\n    return 0;\n}\n", "    let count = 0;\n    let index = string.indexOf(substring);\n\
    \    while (index >= 0) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n", "    let count = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  let index = 0;\n  while (index != -1) {\n    index\
    \ = string.indexOf(substring, index);\n    if (index != -1) {\n      count++;\n\
    \      index += substring.length;\n    }\n  }\n  return count;\n}\n", "    let\
    \ counter = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.slice(i,\
    \ i + substring.length) === substring) {\n            counter++;\n        }\n\
    \    }\n    return counter;\n}\n", "  if (substring === \"\") {\n    return 0;\n\
    \  }\n  let count = 0;\n  let pos = 0;\n  while (pos >= 0) {\n    pos = string.indexOf(substring,\
    \ pos);\n    if (pos >= 0) {\n      count++;\n      pos++;\n    }\n  }\n  return\
    \ count;\n}", "  if (substring === '') {\n    return 0;\n  }\n  let count = 0;\n\
    \  let pos = string.indexOf(substring);\n  while (pos >= 0) {\n    count++;\n\
    \    pos = string.indexOf(substring, pos + 1);\n  }\n  return count;\n}\n", " \
    \   return 0;\n}\n", "    let count = 0;\n    let index = 0;\n    while (true)\
    \ {\n        let i = string.indexOf(substring, index);\n        if (i === -1)\
    \ {\n            break;\n        }\n        index = i + 1;\n        count++;\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for (let i = 0; i <\
    \ string.length; i++) {\n        if (string.slice(i, i + substring.length) ===\
    \ substring) {\n            count++;\n        }\n    }\n    return count;\n}\n\
    \n", "    let counter = 0;\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string.slice(i, i + substring.length) === substring) {\n          \
    \  counter++;\n        }\n    }\n    return counter;\n}", "    let count = 0;\n\
    \    let pos = string.indexOf(substring);\n    while (pos !== -1) {\n        count++;\n\
    \        pos = string.indexOf(substring, pos + 1);\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (string.charAt(i) === substring.charAt(0)) {\n            if (string.substring(i,\
    \ i + substring.length) === substring) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\n", "  return (string.match(new\
    \ RegExp(substring, \"g\")) || []).length;\n}\n", "  let count = 0;\n  let pos\
    \ = string.indexOf(substring);\n  while (pos !== -1) {\n    count++;\n    pos\
    \ = string.indexOf(substring, pos + 1);\n  }\n  return count;\n}\n", "    var\
    \ count = 0;\n    var last_index = 0;\n    while(last_index !== -1) {\n      \
    \  last_index = string.indexOf(substring, last_index);\n        if(last_index\
    \ !== -1) {\n            count++;\n            last_index++;\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let currentIndex = 0;\n   \
    \ while (currentIndex < string.length) {\n        currentIndex = string.indexOf(substring,\
    \ currentIndex);\n        if (currentIndex > -1) {\n            count++;\n   \
    \         currentIndex++;\n        } else {\n            break;\n        }\n \
    \   }\n    return count;\n}\n", "  return string.split(substring).length - 1;\n\
    }\n", "    let new_string = string;\n    let counter = 0;\n    while (new_string.includes(substring))\
    \ {\n        new_string = new_string.replace(substring, \"\");\n        counter++;\n\
    \    }\n    return counter;\n}\n\n", "  let count = 0;\n  for (let index = 0;\
    \ index < string.length; index++) {\n    if (string.substr(index, substring.length)\
    \ === substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let\
    \ count = 0;\n  let tempIndex = 0;\n  let prevIndex = 0;\n  let subLen = substring.length;\n\
    \  let indexOf = string.indexOf(substring);\n  if (subLen == 0) {\n    return\
    \ 0;\n  }\n  if (subLen == 1) {\n    return string.length;\n  }\n  while (prevIndex\
    \ != -1) {\n    tempIndex = indexOf;\n    count++;\n    prevIndex = indexOf;\n\
    \    indexOf = string.indexOf(substring, tempIndex + 1);\n  }\n  return count;\n\
    }\n", "    // let counter = 0;\n    // let substring = 'a';\n    // let string\
    \ = 'aaaa';\n    // let index = string.indexOf(substring);\n    // while (index\
    \ >= 0) {\n    //     counter++;\n    //     index = string.indexOf(substring,\
    \ index + 1);\n    // }\n    // return counter;\n    let count = 0;\n    let index\
    \ = string.indexOf(substring);\n    while (index !== -1) {\n        count++;\n\
    \        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n\
    }\nlet a = how_many_times(\"\", \"a\");\nlet b = how_many_times(\"aaa\", \"a\"\
    );\nlet c = how_many_times(\"aaaa\", \"aa\");\nconsole.log(a, b, c);", "    let\
    \ count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)\
    \ === substring.charAt(0)) {\n            for (let j = 0; j < substring.length;\
    \ j++) {\n                if (string.charAt(i + j) !== substring.charAt(j)) {\n\
    \                    break;\n                }\n                if (j === substring.length\
    \ - 1) {\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;\n}\n", "    var count = 0;\n    for (var i =\
    \ 0; i < string.length; i++) {\n        if (string.charAt(i) == substring.charAt(0))\
    \ {\n            var buffer = \"\";\n            for (var j = 0; j < substring.length;\
    \ j++) {\n                buffer += string.charAt(i + j);\n            }\n   \
    \         if (buffer == substring) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}", "  var count = 0;\n  for (var i = 0;\
    \ i < string.length; i++) {\n    if (string.substr(i, substring.length) == substring)\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nconsole.log(how_many_times(\"\
    aaaa\", \"aa\"));\n", "    return (string.match(new RegExp(substring, \"g\"))\
    \ || []).length;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.substr(i, substring.length) === substring) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(how_many_times(\"\
    \", \"a\"));\nconsole.log(how_many_times(\"aaa\", \"a\"));\nconsole.log(how_many_times(\"\
    aaaa\", \"aa\"));\n", "    let count = 0;\n    let index = 0;\n    while (true)\
    \ {\n        index = string.indexOf(substring, index) + 1;\n        if (index\
    \ > 0) {\n            count++;\n        } else {\n            break;\n       \
    \ }\n    }\n    return count;\n}\n\n\ndescribe(\"how_many_times\", function ()\
    \ {\n    it(\"how_many_times('', 'a') should return 0\", function () {\n     \
    \   assert.equal(how_many_times('', 'a'), 0);\n    });\n    it(\"how_many_times('aaa',\
    \ 'a') should return 3\", function () {\n        assert.equal(how_many_times('aaa',\
    \ 'a'), 3);\n    });\n    it(\"how_many_times('aaaa', 'aa') should return 3\"\
    , function () {\n        assert.equal(how_many_times('aaaa', 'aa'), 3);\n    });\n\
    });\n\n", "  if (substring === \"\") {\n    return 0;\n  }\n  let total = 0;\n\
    \  let i = 0;\n  while (i < string.length) {\n    if (string.slice(i, i + substring.length)\
    \ === substring) {\n      total += 1;\n      i += substring.length;\n    } else\
    \ {\n      i += 1;\n    }\n  }\n  return total;\n}\n", "    let count = 0;\n \
    \   let pos = string.indexOf(substring);\n    while (pos >= 0) {\n        count++;\n\
    \        pos = string.indexOf(substring, pos + 1);\n    }\n    return count;\n\
    }\n", "  let substring_length = substring.length;\n  let string_length = string.length;\n\
    \  let count = 0;\n  for (let i = 0; i < string_length; i++) {\n    if (string.substring(i,\
    \ i + substring_length) === substring) {\n      count += 1;\n    }\n  }\n  return\
    \ count;\n}\n", "  let pos: number = string.indexOf(substring);\n  let times:\
    \ number = 0;\n  while (pos !== -1) {\n    pos = string.indexOf(substring, pos\
    \ + 1);\n    times++;\n  }\n  return times;\n}\n", "    if (substring === '')\
    \ {\n        return 0;\n    }\n    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === substring[0]) {\n            if (string.substring(i,\
    \ i + substring.length) === substring) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\n", "    let counter = 0;\n    if\
    \ (substring === \"\") {\n        return 0;\n    }\n    else {\n        for (let\
    \ i = 0; i < string.length; i++) {\n            if (string[i] === substring[0])\
    \ {\n                let s = string.slice(i, i + substring.length);\n        \
    \        if (s === substring) {\n                    counter++;\n            \
    \    }\n            }\n        }\n    }\n    return counter;\n}\n", "  var count\
    \ = (string.match(new RegExp(substring, \"g\")) || []).length;\n  return count;\n\
    }\n", "    //TODO\n    return 0;\n}\n", "    let length: number = substring.length;\n\
    \    let times: number = 0;\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, length) == substring) {\n            times++;\n\
    \        }\n    }\n    return times;\n}\n", "    let total = 0;\n    let i = 0;\n\
    \    while(i < string.length){\n        if(string.slice(i, i + substring.length)\
    \ === substring){\n            total += 1;\n            i += substring.length\
    \ - 1;\n        }\n        i++;\n    }\n    return total;\n}\nconsole.log(how_many_times(\"\
    \", \"a\"));\nconsole.log(how_many_times(\"aaa\", \"a\"));\nconsole.log(how_many_times(\"\
    aaaa\", \"aa\"));\n", "    if (substring.length === 0) return 0;\n    const indexes\
    \ = (function () {\n        const idxs = [];\n        let i = -1;\n        do\
    \ {\n            i = string.indexOf(substring, i + 1);\n            if (i > -1)\
    \ idxs.push(i);\n        } while (i > -1);\n        return idxs;\n    })();\n\
    \    return indexes.length;\n}\n", "  let count = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.slice(i, i + substring.length) === substring) {\n   \
    \   count++;\n    }\n  }\n  return count;\n}\n", "    if (!string || !substring)\
    \ {\n        return 0;\n    }\n    return string.split(substring).length - 1;\n\
    }\n", "  if (!string || !substring) return 0;\n  let i = 0;\n  let count = 0;\n\
    \  while (true) {\n    const index = string.indexOf(substring, i);\n    if (index\
    \ === -1) break;\n    count++;\n    i = index + 1;\n  }\n  return count;\n}\n",
  "  let count = 0;\n  if (substring === '') {\n    return count;\n  }\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n  \
    \    let index = i;\n      let j = 0;\n      while (index < string.length && j\
    \ < substring.length && string[index] === substring[j]) {\n        index++;\n\
    \        j++;\n      }\n      if (j === substring.length) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\n", "    let result = 0;\n    let len\
    \ = substring.length;\n    if (len == 0) return result;\n    let count = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] == substring[count])\
    \ {\n            count++;\n            if (count == len) {\n                result++;\n\
    \                count = 0;\n            }\n        } else {\n            count\
    \ = 0;\n        }\n    }\n    return result;\n}\n", "  let times = 0;\n  if (substring.length\
    \ === 0) {\n    return times;\n  }\n\n  for (let i = 0; i < string.length; i++)\
    \ {\n    if (string[i] === substring[0]) {\n      times++;\n    }\n  }\n\n  return\
    \ times;\n}\n\ndescribe(\"how_many_times\", () => {\n  it(\"should find how many\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\", () => {\n    expect(how_many_times(\"\", \"a\")).toBe(0);\n    expect(how_many_times(\"\
    aaa\", \"a\")).toBe(3);\n    expect(how_many_times(\"aaaa\", \"aa\")).toBe(3);\n\
    \  });\n});\n", "  // your code here\n  let count = 0;\n  for (let i = 0; i <\
    \ string.length; i++) {\n    if (string.substring(i, i + substring.length) ===\
    \ substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let counter\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        for (let j = 0;\
    \ j < substring.length; j++) {\n            if (string[i + j] !== substring[j])\
    \ break;\n            if (j == substring.length - 1) counter++;\n        }\n \
    \   }\n    return counter;\n}\n", "    let count = 0;\n    let i = 0;\n    while(i\
    \ < string.length){\n        if(substring == string.substring(i, i + substring.length)){\n\
    \            count++;\n            i = i + substring.length - 1;\n        }\n\
    \        i++;\n    }\n    return count;\n}\n", "  let count = 0;\n  for (let i\
    \ = 0; i < string.length; i++) {\n    if (string.substring(i, i + substring.length)\
    \ === substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    if\
    \ (!string) {\n        return 0;\n    }\n\n    return string.split(substring).length\
    \ - 1;\n}\n", "    if (substring.length === 0) return 0;\n    let count = 0;\n\
    \    let str = string;\n    while (str.length > 0) {\n        let index = str.indexOf(substring);\n\
    \        if (index < 0) break;\n        str = str.substring(index + 1);\n    \
    \    count++;\n    }\n    return count;\n}\n", "  if (substring === '') {\n  \
    \  return 0;\n  }\n  if (string === '') {\n    return 0;\n  }\n  let count = 0;\n\
    \  let index = 0;\n  while (index < string.length) {\n    index = string.indexOf(substring,\
    \ index);\n    if (index !== -1) {\n      count++;\n      index++;\n    } else\
    \ {\n      break;\n    }\n  }\n  return count;\n}\n", "    let count = 0;\n  \
    \  for (let i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  let count = 0;\n  let position = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (substring[position] == string[i]) {\n      position++;\n   \
    \   if (position == substring.length) {\n        count++;\n        position =\
    \ 0;\n      }\n    } else {\n      position = 0;\n    }\n  }\n  return count;\n\
    }\n", "    return string.split(substring).length - 1;\n}\n", "    let num = 0;\n\
    \    let startIndex = 0;\n    while (true) {\n        let index = string.indexOf(substring,\
    \ startIndex);\n        if (index !== -1) {\n            num++;\n            startIndex\
    \ = index + 1;\n        } else {\n            break;\n        }\n    }\n    return\
    \ num;\n}\n", "    if (substring.length === 0) {\n        return 0;\n    }\n \
    \   return string.split(substring).length - 1;\n}\n", "    return string.split(substring).length\
    \ - 1;\n}\n", "    let count = 0;\n    let start_index = 0;\n    while (true)\
    \ {\n        let found_index = string.indexOf(substring, start_index);\n     \
    \   if (found_index == -1) {\n            break;\n        }\n        count +=\
    \ 1;\n        start_index = found_index + 1;\n    }\n    return count;\n}\n",
  "    if (!string) {\n        return 0;\n    }\n    let count = 0;\n    let l = substring.length;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string.substr(i, l)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    var match = string.match(new RegExp(substring, \"g\"));\n    return\
    \ match ? match.length : 0;\n}\n", "  let times = 0;\n  for (let i = 0; i < string.length;\
    \ i++) {\n    if (string.slice(i, i + substring.length) === substring) {\n   \
    \   times++;\n    }\n  }\n  return times;\n}\n\nexport {\n  dictionary_sort,\n\
    \  shout_sentence,\n  how_many_times\n}", "    let result = 0;\n    let stringLength\
    \ = string.length;\n    let substringLength = substring.length;\n    let subStringEnd\
    \ = substringLength - 1;\n    let count = 0;\n    let position = 0;\n    let nextCheck\
    \ = 0;\n    let checkPosition = 0;\n    let checkChar = '';\n    let stringChar\
    \ = '';\n    let checkLength = 0;\n    let checkLengthCount = 0;\n    let pass\
    \ = true;\n    for (position = 0; position < stringLength; position++) {\n   \
    \     stringChar = string.charAt(position);\n        if (stringChar === substring.charAt(0))\
    \ {\n            count = 1;\n            nextCheck = position + 1;\n         \
    \   for (checkPosition = 1; checkPosition < substringLength; checkPosition++)\
    \ {\n                checkChar = substring.charAt(checkPosition);\n          \
    \      if (string.charAt(nextCheck) === checkChar) {\n                    count++;\n\
    \                    nextCheck++;\n                }\n            }\n        \
    \    if (count === substringLength) {\n                result++;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "  var text=string.toUpperCase();\n\
    \  var sub=substring.toUpperCase();\n  var count=0;\n  if(sub==\"\"||string==\"\
    \"){\n    return 0;\n  }\n  else{\n  var ind=text.indexOf(sub);\n  while(ind!=-1){\n\
    \    count++;\n    text=text.substring(ind+1);\n    ind=text.indexOf(sub);\n \
    \ }\n  return count;\n}\n}\n", "    return string.split(substring).length - 1;\n\
    }\n", "    var m: number = string.length;\n    var n: number = substring.length;\n\
    \    var count: number = 0;\n    for (var i = 0; i <= m - n; i++) {\n        var\
    \ j: number;\n        for (j = 0; j < n; j++) {\n            if (string[i + j]\
    \ != substring[j]) {\n                break;\n            }\n        }\n     \
    \   if (j == n) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    let number = 0;\n    let start = 0;\n    if(string.length == 0) {\n\
    \        return 0;\n    }\n    while(start + substring.length <= string.length)\
    \ {\n        if(string.substring(start, start + substring.length) == substring)\
    \ {\n            number += 1;\n            start += substring.length;\n      \
    \  } else {\n            start += 1;\n        }\n    }\n    return number;\n}\n",
  "    let times: number = 0;\n    if (substring == \"\") {\n        return times;\n\
    \    }\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ==\
    \ substring[0]) {\n            if (string.slice(i, i + substring.length) == substring)\
    \ {\n                times += 1;\n            }\n        }\n    }\n    return\
    \ times;\n}\n", "  return string.split(substring).length - 1;\n}\n\nconsole.log(how_many_times(\"\
    \", \"a\"));\nconsole.log(how_many_times(\"aaa\", \"a\"));\nconsole.log(how_many_times(\"\
    aaaa\", \"aa\"));\n", "    let result = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substr(i, substring.length) === substring) {\n       \
    \     result++;\n            i += substring.length;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return result;\n}\n", "    return (string.match(new\
    \ RegExp(substring, \"g\")) || []).length;\n}\n\n", "    let index = string.indexOf(substring)\n\
    \    let count = 0\n    while (index >= 0) {\n        count++\n        index =\
    \ string.indexOf(substring, index + 1)\n    }\n    return count\n}", "    // TODO\n\
    \    throw new Error(\"not implemented\");\n}\n", "    if (substring.length >\
    \ string.length) {\n        return 0;\n    }\n    let lastStartPosition = string.length\
    \ - substring.length;\n    let count = 0;\n    for (let i = 0; i <= lastStartPosition;\
    \ i++) {\n        if (string.substr(i, substring.length) === substring) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\n", "    let _is_empty\
    \ = (str: string): boolean => {\n        return !str || 0 === str.length;\n  \
    \  };\n\n    if (_is_empty(string) || _is_empty(substring)) {\n        return\
    \ 0;\n    }\n\n    let regexp = new RegExp(substring, \"g\");\n    let result:\
    \ RegExpExecArray | null;\n    let counter = 0;\n\n    do {\n        result =\
    \ regexp.exec(string);\n        if (result) {\n            counter++;\n      \
    \  }\n    } while (result);\n\n    return counter;\n}\n", "  if (substring.length\
    \ > string.length) {\n    return 0;\n  }\n  if (substring.length === 0) {\n  \
    \  return 0;\n  }\n  let index = 0;\n  let count = 0;\n  while (index < string.length)\
    \ {\n    if (string.substring(index, index + substring.length) === substring)\
    \ {\n      count++;\n      index += substring.length;\n    } else {\n      index++;\n\
    \    }\n  }\n  return count;\n}\n\nconsole.log(how_many_times(\"\", \"a\"));\n\
    console.log(how_many_times(\"aaa\", \"a\"));\nconsole.log(how_many_times(\"aaaa\"\
    , \"aa\"));\n", "  let count = 0;\n  let offset = 0;\n  while (string.indexOf(substring,\
    \ offset) !== -1) {\n    count++;\n    offset = string.indexOf(substring, offset)\
    \ + 1;\n  }\n  return count;\n}\n", "    if (substring.length == 0) return 0;\n\
    \    if (string.length == 0) return 0;\n    let times = 0;\n    for (let i = 0;\
    \ i < string.length; i++) {\n        const substring_in_string = string.substring(i,\
    \ i + substring.length);\n        if (substring_in_string == substring) {\n  \
    \          times++;\n        }\n    }\n    return times;\n}\n", "    if (substring\
    \ === \"\") return 0;\n    let counter = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === substring[0]) {\n            let substringIndex\
    \ = 0;\n            let substringCounter = 0;\n            while (string[i + substringIndex]\
    \ === substring[substringIndex]) {\n                substringCounter++;\n    \
    \            substringIndex++;\n                if (substringCounter === substring.length)\
    \ {\n                    counter++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return counter;\n}\n", "    return\
    \ string.split(substring).length - 1;\n}\n", "    let count = 0;\n    let i =\
    \ 0;\n    while (i !== -1) {\n        i = string.indexOf(substring, i);\n    \
    \    if (i !== -1) {\n            i += 1;\n            count++;\n        }\n \
    \   }\n    return count;\n}\n", "    var count = 0;\n    var index = 0;\n    while\
    \ (index !== -1) {\n        index = string.indexOf(substring, index);\n      \
    \  if (index !== -1) {\n            count++;\n            index += substring.length;\n\
    \        }\n    }\n    return count;\n}\n", "    return string.split(substring).length\
    \ - 1;\n}\n", "    let counter = 0;\n    const firstSymbol = substring[0];\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string[i] === firstSymbol)\
    \ {\n            if (string.substring(i, i + substring.length) === substring)\
    \ {\n                counter++;\n            }\n        }\n    }\n    return counter;\n\
    }\n\nconsole.log(how_many_times(\"\", \"a\"));\nconsole.log(how_many_times(\"\
    aaa\", \"a\"));\nconsole.log(how_many_times(\"aaaa\", \"aa\"));", "    let index\
    \ = string.indexOf(substring)\n    let counter = 0\n    while (index != -1) {\n\
    \        counter++\n        index = string.indexOf(substring, index + 1)\n   \
    \ }\n    return counter\n}\n", "    return 0;\n}\n", "    let count = 0;\n   \
    \ let string_start = 0;\n    while (string_start < string.length) {\n        let\
    \ substr_start = string.indexOf(substring, string_start);\n        if (substr_start\
    \ >= 0) {\n            count++;\n            string_start = substr_start + 1;\n\
    \        } else {\n            string_start = string.length;\n        }\n    }\n\
    \    return count;\n}\n", "  let i: number = string.length;\n  let j: number =\
    \ substring.length;\n  let count: number = 0;\n  let flag: boolean = false;\n\
    \  for (let k: number = 0; k < i; k++) {\n    for (let l: number = 0; l < j; l++)\
    \ {\n      if (string[k + l] !== substring[l]) {\n        flag = false;\n    \
    \    break;\n      } else {\n        flag = true;\n      }\n    }\n    if (flag)\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "    return (string.match(new\
    \ RegExp(substring, \"g\")) || []).length;\n}", "    if (!string) return 0;\n\
    \    let sum = 0;\n    let index = string.indexOf(substring);\n    while (index\
    \ != -1) {\n        sum++;\n        index = string.indexOf(substring, index +\
    \ 1);\n    }\n    return sum;\n}\n", "  return string.split(substring).length\
    \ - 1;\n}\n", "    let count = 0;\n    let i = 0;\n    let start = 0;\n    while\
    \ (i < string.length) {\n        if (string[i] == substring[start]) {\n      \
    \      start++;\n            if (start == substring.length) {\n              \
    \  count++;\n                start = 0;\n            }\n        } else {\n   \
    \         start = 0;\n        }\n        i++;\n    }\n    return count;\n}\n",
  "    if (substring === \"\") {\n        return 0;\n    }\n    return (string.match(new\
    \ RegExp(substring, \"g\")) || []).length;\n}\n", "    var count = 0;\n    var\
    \ i = 0;\n    var start_index = string.indexOf(substring, 0);\n    while (start_index\
    \ >= 0) {\n        count++;\n        i = start_index + 1;\n        start_index\
    \ = string.indexOf(substring, i);\n    }\n    return count;\n}\n", "  let count\
    \ = 0;\n  let i = 0;\n  while (i <= string.length - substring.length) {\n    if\
    \ (string.substring(i, i + substring.length) === substring) {\n      count++;\n\
    \      i = i + substring.length;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ count;\n}\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string.slice(i, i + substring.length) === substring) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n", "  let count = 0;\n\
    \  let i = string.indexOf(substring);\n  while (i != -1) {\n    count++;\n   \
    \ i = string.indexOf(substring, i + 1);\n  }\n  return count;\n}\n", "  let count\
    \ = 0;\n  let i = 0;\n  while (string.indexOf(substring, i) != -1) {\n    count++;\n\
    \    i = string.indexOf(substring, i) + 1;\n  }\n  return count;\n}\n", "    //\
    \ Write your code here\n    let count = 0;\n    if (string == '' || substring\
    \ == '') {\n        return count;\n    }\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] == substring[0]) {\n            if (string.slice(i,\
    \ i + substring.length) == substring) {\n                count++;\n          \
    \  }\n        }\n    }\n    return count;\n}", "    let startPos = 0;\n    let\
    \ counter = 0;\n    while (startPos < string.length && string.indexOf(substring,\
    \ startPos) !== -1) {\n        startPos = string.indexOf(substring, startPos)\
    \ + 1;\n        counter++;\n    }\n    return counter;\n}\n", "    return 0;\n\
    }\n", "    if (substring.length === 0) {\n        return 0;\n    }\n    let count\
    \ = 0;\n    let str = string;\n    while (str.length > 0) {\n        const pos\
    \ = str.indexOf(substring);\n        if (pos < 0) {\n            break;\n    \
    \    }\n        count += 1;\n        str = str.substring(pos + 1);\n    }\n  \
    \  return count;\n}\n", "    let total = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n\
    \            total++;\n        }\n    }\n    return total;\n}\n", "    let amount\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)\
    \ === substring.charAt(0)) {\n            if (string.substring(i, i + substring.length)\
    \ === substring) {\n                amount++;\n            }\n        }\n    }\n\
    \    return amount;\n}\n", "  let count = 0;\n  let index = 0;\n  while (index\
    \ !== -1) {\n    index = string.indexOf(substring, index);\n    if (index !==\
    \ -1) {\n      index += substring.length;\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  return string.split(substring).length - 1;\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.slice(i,\
    \ i + substring.length) === substring) {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\n", "    let count = 0;\n    let index = string.indexOf(substring);\n\
    \    while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\ntest(\"test how_many_times\", ()\
    \ => {\n    expect(how_many_times(\"\", \"a\")).toBe(0);\n    expect(how_many_times(\"\
    aaa\", \"a\")).toBe(3);\n    expect(how_many_times(\"aaaa\", \"aa\")).toBe(3);\n\
    });\n", "    if (substring.length > string.length) {\n        return 0;\n    }\n\
    \    const stringLength = string.length;\n    const subStringLength = substring.length;\n\
    \    let count = 0;\n    for (let i = 0; i < stringLength; i++) {\n        let\
    \ compareString = string.substring(i, i + subStringLength);\n        if (compareString\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    // your code here\n    return string.split(substring).length - 1;\n\
    }", "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n     \
    \   if (string.slice(i, i + substring.length) === substring) {\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\n\n", "  // your code goes here\n\
    \  return -1;\n}\n", "    let counter = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n\
    \            counter++;\n        }\n    }\n    return counter;\n}", "    let count\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) === substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "    let counter = 0;\n    if (substring.length == 0)\
    \ {\n        return counter;\n    }\n    let startAt = 0;\n    while (true) {\n\
    \        let index = string.indexOf(substring, startAt);\n        if (index ==\
    \ -1) {\n            break;\n        }\n        counter++;\n        startAt =\
    \ index + 1;\n    }\n    return counter;\n}\n", "  return 0;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < string.length; i++) {\n        let substr = string.substr(i,\
    \ substring.length);\n        if (substr === substring) count++;\n    }\n    return\
    \ count;\n}\n\n", "  if (substring === \"\") {\n    return 0;\n  }\n  let matches\
    \ = 0;\n  for (let i = 0; i < string.length; i++) {\n    let end = i + substring.length;\n\
    \    if (end > string.length) {\n      break;\n    }\n    if (string.slice(i,\
    \ end) === substring) {\n      matches++;\n    }\n  }\n  return matches;\n}",
  "    let count = 0;\n    let targetIdx = 0;\n    let i = 0;\n    while (i < string.length)\
    \ {\n        if (string[i] === substring[targetIdx]) {\n            targetIdx++;\n\
    \            if (targetIdx === substring.length) {\n                count++;\n\
    \                targetIdx = 0;\n            }\n        } else {\n           \
    \ targetIdx = 0;\n        }\n        i++;\n    }\n    return count;\n}\n", " \
    \   let times = 0;\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string.slice(i, i + substring.length) === substring) {\n            times +=\
    \ 1;\n        }\n    }\n    return times;\n}\n", "  let count = 0;\n  let fromIndex\
    \ = 0;\n  while (string.indexOf(substring, fromIndex) !== -1) {\n    count++;\n\
    \    fromIndex = string.indexOf(substring, fromIndex) + 1;\n  }\n  return count;\n\
    }\n", "    return string.split(substring).length - 1;\n}\n", "    return -1;\n\
    }\n", "  if (substring.length === 0) {\n    return 0;\n  }\n  let count = 0;\n\
    \  for (let i = 0; i < string.length; i++) {\n    if (string.slice(i, i + substring.length)\
    \ === substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  return\
    \ string.split(substring).length - 1;\n}\n", "    return (string.match(new RegExp(substring,\
    \ \"g\")) || []).length;\n}\n", "    let result = 0;\n    for (let i = 0; i <\
    \ string.length; i++) {\n        let start = i;\n        for (let j = 0; j < substring.length;\
    \ j++) {\n            if (string[start] === substring[j]) {\n                start++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if (start - i === substring.length) {\n            result++;\n        }\n\
    \    }\n    return result;\n}\n", "    return string.split(substring).length -\
    \ 1;\n}\n\nconsole.log(how_many_times(\"\", \"a\"));\nconsole.log(how_many_times(\"\
    aaa\", \"a\"));\nconsole.log(how_many_times(\"aaaa\", \"aa\"));\n", "    if (substring\
    \ === \"\") {\n        return 0;\n    }\n    const slice_length = substring.length;\n\
    \    const regexp = new RegExp(substring, \"g\");\n    return (string.match(regexp)\
    \ || []).length;\n}\n", "    let count = 0;\n    let init = 0;\n    while (true)\
    \ {\n        const index = string.indexOf(substring, init);\n        if (index\
    \ >= 0) {\n            count++;\n            init = index + 1;\n        } else\
    \ {\n            break;\n        }\n    }\n    return count;\n}\n", "    var count\
    \ = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i,\
    \ substring.length) == substring) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconsole.log(how_many_times(\"\", \"a\"));\nconsole.log(how_many_times(\"\
    aaa\", \"a\"));\nconsole.log(how_many_times(\"aaaa\", \"aa\"));", "  if (substring.length\
    \ === 0) {\n    return 0;\n  }\n  let counter = 0;\n  let found = true;\n  while\
    \ (found) {\n    const temp = string.indexOf(substring);\n    if (temp === -1)\
    \ {\n      found = false;\n    } else {\n      counter++;\n      string = string.slice(temp\
    \ + 1);\n    }\n  }\n  return counter;\n}\n", "    let count = 0;\n    let index\
    \ = 0;\n    while (true) {\n        index = string.indexOf(substring, index);\n\
    \        if (index === -1) {\n            break;\n        }\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\n", "  if (substring.length > string.length)\
    \ {\n    return 0;\n  }\n  let regex = new RegExp(substring, \"g\");\n  let result:\
    \ string[] = string.match(regex);\n  return result ? result.length : 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
