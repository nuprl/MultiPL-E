name: HumanEval_131_digits
language: ts
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["    let sum = 1;\n    while (n > 0) {\n        let digit = n % 10;\n\
    \        if (digit % 2 === 1) {\n            sum *= digit;\n        }\n      \
    \  n = Math.floor(n / 10);\n    }\n    return sum;\n}\n\n", "    if (n < 0) {\n\
    \        return 0;\n    }\n\n    let result = 1;\n    while (n > 0) {\n      \
    \  let lastDigit = n % 10;\n        if (lastDigit % 2 === 1) {\n            result\
    \ *= lastDigit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return\
    \ result;\n}\n\nassert(digits(1) === 1);\nassert(digits(4) === 0);\nassert(digits(235)\
    \ === 15);\n", "    let result = 0;\n    for (let d of n.toString()) {\n     \
    \   if ((parseInt(d) % 2) == 1) {\n            result = (result == 0) ? parseInt(d)\
    \ : result * parseInt(d);\n        }\n    }\n    return result;\n}\nconsole.log(digits(1234));\n\
    console.log(digits(4));\nconsole.log(digits(0));\nconsole.log(digits(235));\n",
  "  let result = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit\
    \ % 2 != 0) {\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n\
    \  return result;\n}\n", "    let total = 1;\n    let temp = n;\n    while (temp\
    \ > 0) {\n        let next = temp % 10;\n        if (next % 2 !== 0) {\n     \
    \       total *= next;\n        }\n        temp = Math.floor(temp / 10);\n   \
    \ }\n    return total;\n}\n", "  const num = n.toString().split('').map(x => parseInt(x));\n\
    \  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] %\
    \ 2 === 1) {\n      result = result * num[i];\n    }\n  }\n  return result;\n\
    }\nconsole.log(digits(235));", "    let oddDigits: number = 1;\n    while (n >\
    \ 0) {\n        let digit: number = n % 10;\n        if (digit % 2 !== 0) {\n\
    \            oddDigits *= digit;\n        }\n        n = Math.floor(n / 10);\n\
    \    }\n    return oddDigits;\n}\n\ntest(digits, [1], 1);\ntest(digits, [4], 0);\n\
    test(digits, [235], 15);\n", "    if (n === 0) {\n        return 0;\n    }\n \
    \   let currDigit = n % 10;\n    if (currDigit % 2 === 1) {\n        return digits(Math.floor(n\
    \ / 10)) * currDigit;\n    } else {\n        return digits(Math.floor(n / 10));\n\
    \    }\n}\n", "  if (n < 10) {\n    return n % 2 === 0 ? 0 : n;\n  }\n  const\
    \ digit = n % 10;\n  return digit % 2 === 0 ? digits(Math.floor(n / 10)) : digit\
    \ * digits(Math.floor(n / 10));\n}\n", "  let result = 1;\n  n = n.toString();\n\
    \  for (let i = 0; i < n.length; i++) {\n    if (parseInt(n[i]) % 2 !== 0) {\n\
    \      result *= parseInt(n[i]);\n    }\n  }\n  return result;\n}\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));\n", "  const stringNumber =\
    \ n.toString();\n  const digitArray = stringNumber.split('');\n  let result =\
    \ 1;\n  for (let i = 0; i < digitArray.length; i++) {\n    const digit = parseInt(digitArray[i]);\n\
    \    if (digit % 2 === 1) {\n      result *= digit;\n    }\n  }\n  return result;\n\
    }\n", "    let product = 1;\n    let number = n;\n    let digit = 0;\n    while\
    \ (number > 0) {\n        digit = number % 10;\n        if (digit % 2 !== 0) {\n\
    \            product *= digit;\n        }\n        number = Math.floor(number\
    \ / 10);\n    }\n    return product;\n}\n\ndigits(4);\ndigits(235);", "  if (n\
    \ < 10) {\n    return n % 2 === 0 ? 0 : n;\n  }\n  return n % 2 === 0 ? digits(Math.floor(n\
    \ / 10)) : n % 10 * digits(Math.floor(n / 10));\n}\n", "    if (n == 0) return\
    \ 0;\n    let lastDigit = n % 10;\n    if (lastDigit % 2 != 0) {\n        return\
    \ lastDigit * digits(Math.floor(n / 10));\n    } else {\n        return digits(Math.floor(n\
    \ / 10));\n    }\n}\n", "    const nums = n.toString().split('');\n    let res\
    \ = 1;\n    nums.forEach(e => {\n        if (e % 2 !== 0) {\n            res *=\
    \ Number(e);\n        }\n    });\n    return res === 1 ? 0 : res;\n}\n", "   \
    \ let str = n.toString();\n    let sum = 1;\n    let number;\n    for (let i =\
    \ 0; i < str.length; i++) {\n        number = parseInt(str[i]);\n        if (number\
    \ % 2 === 1) {\n            sum *= number;\n        }\n    }\n    return sum;\n\
    }\n", "  if (n == 0) {\n    return 0;\n  } else {\n    return n % 10 % 2 == 0\
    \ ? digits(Math.floor(n / 10)) : n % 10 * digits(Math.floor(n / 10));\n  }\n}\n",
  "    if (n === 0) {\n        return 0;\n    }\n\n    let result = 1;\n    if (n\
    \ % 2 !== 0) {\n        result *= n % 10;\n    }\n\n    return result * digits(Math.floor(n\
    \ / 10));\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));",
  "  if (n === 0) {\n    return 0;\n  }\n  let singleNum = n % 10;\n  let product\
    \ = 0;\n  if (singleNum % 2 === 1) {\n    product = product + singleNum;\n  }\n\
    \  product = product * digits(Math.floor(n / 10));\n  return product;\n}\nconsole.log(digits(235));",
  "    let product = 1;\n    while (n > 0) {\n        const currDigit = n % 10;\n\
    \        if (currDigit % 2 !== 0) {\n            product *= currDigit;\n     \
    \   }\n        n = Math.floor(n / 10);\n    }\n    return product;\n}\n", "  if\
    \ (n < 10) {\n    return n % 2 === 0 ? 0 : n;\n  }\n\n  const digit = n % 10;\n\
    \  return digit % 2 === 0 ? digits(Math.floor(n / 10)) : digit * digits(Math.floor(n\
    \ / 10));\n}\nconsole.log(digits(235));", "    let s: string = n.toString();\n\
    \    let arr = s.split('');\n    let sum = 1;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let num = parseInt(arr[i]);\n        if (num % 2 != 0) {\n \
    \           sum *= num;\n        }\n    }\n    return sum;\n}", "    let digits:\
    \ number[] = n.toString().split('').map(x => Number(x));\n    let odds: number[]\
    \ = digits.filter(x => x % 2 == 1);\n    if (odds.length == 0) {\n        return\
    \ 0;\n    }\n    let result: number = odds.reduce((a, b) => a * b);\n    return\
    \ result;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "  let sum = 1;\n  let i = 0;\n  while (n >= Math.pow(10, i)) {\n    if ((n % Math.pow(10,\
    \ i + 1) - n % Math.pow(10, i)) / Math.pow(10, i) % 2 === 1) {\n      sum *= (n\
    \ % Math.pow(10, i + 1) - n % Math.pow(10, i)) / Math.pow(10, i);\n    }\n   \
    \ i++;\n  }\n  return sum;\n}\n", "    return n.toString().split('').map(digit\
    \ => parseInt(digit)).filter(digit => digit % 2 !== 0).reduce((acc, curr) => acc\
    \ * curr, 1);\n}\n", "    let sum = 1;\n    while (n > 0) {\n        let digit\
    \ = n % 10;\n        if (digit % 2 !== 0) {\n            sum *= digit;\n     \
    \   }\n        n = Math.floor(n / 10);\n    }\n    return sum;\n}\n", "  const\
    \ str = n.toString();\n  let total = 1;\n  for (let i = 0; i < str.length; i++)\
    \ {\n    if (parseInt(str[i]) % 2 !== 0) {\n      total *= parseInt(str[i]);\n\
    \    }\n  }\n  return total;\n}\nconsole.log(digits(4));\nconsole.log(digits(235));\n\
    console.log(digits(1));\n", "    const array: number[] = n.toString().split('').map(Number)\n\
    \    if (array.length === 1) {\n        return array[0] % 2 === 0 ? 0 : array[0]\n\
    \    } else {\n        let result: number = 1\n        for (let i: number = 0;\
    \ i < array.length; i++) {\n            if (array[i] % 2 !== 0) {\n          \
    \      result *= array[i]\n            }\n        }\n        return result\n \
    \   }\n}", "  if (n < 0) throw new Error(\"Negative number\");\n  if (n === 0)\
    \ return 0;\n  let digit = n % 10;\n  let remainder = Math.floor(n / 10);\n  return\
    \ (digit % 2 !== 0 ? digit : 1) * digits(remainder);\n}\n", "  let product = 1;\n\
    \  const stringRep = n.toString();\n  for (let i = 0; i < stringRep.length; i++)\
    \ {\n    if (Number(stringRep[i]) % 2 === 1) {\n      product *= Number(stringRep[i]);\n\
    \    }\n  }\n  return product;\n}\n", "  let res = 1;\n  n = Math.abs(n);\n  while\
    \ (n > 0) {\n    const i = n % 10;\n    if (i % 2 !== 0) {\n      res *= i;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return res;\n}\n", "  // check if\
    \ n is an even number\n  if (n % 2 === 0) {\n    return 0;\n  } else {\n    //\
    \ if n is not an even number split the number\n    const numArray = n.toString().split(\"\
    \");\n    // return the odd numbers in array\n    const oddNums = numArray.filter(num\
    \ => num % 2 !== 0);\n    // turn array back into a number\n    const oddNumsNum\
    \ = oddNums.join(\"\");\n    // turn oddNumsNum into a number\n    const oddNumsNumber\
    \ = parseInt(oddNumsNum);\n    // return evenNumsNumber\n    return oddNumsNumber;\n\
    \  }\n}\n", "    if (n < 10) {\n        return n % 2 === 0 ? 0 : n;\n    }\n \
    \   const nString = n.toString();\n    const lastDigit = +nString[nString.length\
    \ - 1];\n    return lastDigit % 2 === 0 ? digits(+nString.slice(0, -1)) : lastDigit\
    \ * digits(+nString.slice(0, -1));\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));\n", "  let product = 1;\n  let stringN = n.toString();\n\
    \  for (let i = 0; i < stringN.length; i++) {\n    let digit = Number(stringN[i]);\n\
    \    if (digit % 2 != 0) {\n      product *= digit;\n    }\n  }\n  return product;\n\
    }", "  const arr = n.toString().split('');\n  const product = arr.reduce((acc,\
    \ curr) => {\n    if (Number(curr) % 2 !== 0) {\n      return Number(acc) * Number(curr);\n\
    \    }\n    return Number(acc);\n  }, 1);\n  return product;\n}\n", "    if (n\
    \ < 0) return 0;\n    let result = 1;\n    while (n > 0) {\n        const digit\
    \ = n % 10;\n        if (digit % 2) result *= digit;\n        n = Math.floor(n\
    \ / 10);\n    }\n    return result;\n}", "  let num = n.toString();\n  let newNum\
    \ = num.split(\"\");\n  let newArray = [];\n  for (let i = 0; i < newNum.length;\
    \ i++) {\n    if (parseInt(newNum[i]) % 2 === 1) {\n      newArray.push(parseInt(newNum[i]));\n\
    \    }\n  }\n  if (newArray.length === 0) {\n    return 0;\n  } else {\n    return\
    \ newArray.reduce((acc, curr) => acc * curr);\n  }\n}\n", "  let rem = 0;\n  let\
    \ product = 1;\n  while (n > 0) {\n    rem = n % 10;\n    if (rem % 2 !== 0) {\n\
    \      product *= rem;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n\
    }\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));",
  "  // your solution goes here\n  let odd = 0;\n  let even = 0;\n  let str = n.toString();\n\
    \  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 !== 0) {\n     \
    \ odd += str[i];\n    } else {\n      even += str[i];\n    }\n  }\n  if (even\
    \ > 0) {\n    return 0;\n  } else {\n    return parseInt(odd);\n  }\n}\n\ndigits(1);\n\
    digits(4);\ndigits(235);\ndigits(2358);\n", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n % 2) {\n    return digits(Math.floor(n / 10)) + (n % 10);\n  }\n\
    \  return digits(Math.floor(n / 10));\n}\n", "  let str = n.toString();\n  let\
    \ res = 1;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 1)\
    \ {\n      res *= parseInt(str[i]);\n    }\n  }\n  return res;\n}\n\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));", "  if (n < 10) {\n    return\
    \ n;\n  }\n  const digit = n % 10;\n  const nextNumber = (n - digit) / 10;\n \
    \ if (digit % 2 === 0) {\n    return digits(nextNumber);\n  }\n  return digit\
    \ * digits(nextNumber);\n}\n", "    let x = n;\n    let arr: Array<number> = [];\n\
    \    while (x > 0) {\n        let digit = x % 10;\n        if (digit % 2 !== 0)\
    \ {\n            arr.push(digit);\n        }\n        x = (x - digit) / 10;\n\
    \    }\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     product *= arr[i];\n    }\n    return product;\n}\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));\n", "  let nArr = n.toString().split('');\n\
    \  let result = 1;\n  for (let i = 0; i < nArr.length; i++) {\n    let num = parseInt(nArr[i]);\n\
    \    if (num % 2 == 1) {\n      result *= num;\n    }\n  }\n  return result;\n\
    }\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));",
  "  let product = 1;\n  let str = String(n);\n  for (let i = 0; i < str.length; i++)\
    \ {\n    if (Number(str[i]) % 2 !== 0) {\n      product *= Number(str[i]);\n \
    \   }\n  }\n  return product;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));", "    let digits: string = String(n);\n    let product:\
    \ number = 1;\n    for (let i: number = 0; i < digits.length; i++) {\n       \
    \ if (digits[i] % 2 != 0) {\n            product *= Number(digits[i]);\n     \
    \   }\n    }\n    return product;\n}\nconsole.log(digits(4));\nconsole.log(digits(235));\n\
    console.log(digits(1));", "  let prod = 1;\n  while (n > 0) {\n    const digit\
    \ = n % 10;\n    if (digit % 2) {\n      prod *= digit;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return prod;\n}\n", "  let result = 1;\n  while (n > 0) {\n \
    \   const digit = n % 10;\n    if (digit % 2 === 1) {\n      result *= digit;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n}\n", "  // your code\
    \ here\n  return 0;\n}\n\n", "    let oddNums: number[] = [];\n    let product:\
    \ number = 1;\n    let numString: string = n.toString();\n    for (let i: number\
    \ = 0; i < numString.length; i++) {\n        let index: number = parseInt(numString[i]);\n\
    \        if (index % 2 !== 0) {\n            oddNums.push(index);\n        }\n\
    \    }\n    if (oddNums.length === 0) {\n        return 0;\n    } else {\n   \
    \     for (let num of oddNums) {\n            product *= num;\n        }\n   \
    \     return product;\n    }\n}\n", "  return 0;\n}\n", "  let total = 1;\n  for\
    \ (let i = 1; i <= n; i++) {\n    let digit = (n % 10) / i;\n    if (digit % 2\
    \ !== 0) {\n      total *= digit;\n    }\n  }\n  return total;\n}\n", "    let\
    \ prod = 1;\n    let num = n;\n    while (num > 0) {\n        const digit = num\
    \ % 10;\n        if (digit % 2 !== 0) {\n            prod *= digit;\n        }\n\
    \        num = Math.floor(num / 10);\n    }\n    return prod;\n}\n", "  // wirte\
    \ your code here\n  return 0;\n}\n\nexport { digits };", "  if (n === 0) {\n \
    \   return 0;\n  }\n  let product = 1;\n  for (let i = n; i > 0; i = Math.floor(i\
    \ / 10)) {\n    if (i % 2 === 1) {\n      product *= i % 10;\n    }\n  }\n  return\
    \ product;\n}\n", "    let arr = n.toString().split('');\n    let result = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 !== 0) {\n\
    \            result *= arr[i];\n        }\n    }\n    return result === 1 ? 0\
    \ : result;\n}\nconsole.log(digits(55));\nconsole.log(digits(54));\nconsole.log(digits(235));\n\
    console.log(digits(4));\nconsole.log(digits(1));", "    let prod = 1;\n    n =\
    \ n.toString().split('').map(Number).filter(num => num % 2 !== 0);\n    return\
    \ n.length === 0 ? 0 : n.reduce((a, b) => a * b);\n}\n", "    let _sum = 1;\n\
    \    let _num = n;\n    let _remainder = 0;\n    while (_num > 0) {\n        _remainder\
    \ = _num % 10;\n        if (_remainder % 2 !== 0) {\n            _sum *= _remainder;\n\
    \        }\n        _num = Math.floor(_num / 10);\n    }\n    return _sum;\n}\n",
  "  if (n == 0) {\n    return 0;\n  }\n  const lastDigit = n % 10;\n  const remainingDigits\
    \ = Math.floor(n / 10);\n  if (lastDigit % 2 === 0) {\n    return digits(remainingDigits);\n\
    \  } else {\n    return lastDigit * digits(remainingDigits);\n  }\n}\nconsole.log(digits(235));",
  "    //TODO\n    if (n < 0) {\n        return 0;\n    }\n    const digits: number[]\
    \ = [];\n    while (n > 0) {\n        digits.push(n % 10);\n        n = Math.floor(n\
    \ / 10);\n    }\n    return digits.reduce((prev: number, curr: number) => {\n\
    \        if (curr % 2 === 1) {\n            return prev * curr;\n        }\n \
    \       return prev;\n    }, 1);\n}\n", "  const array = n.toString().split('');\n\
    \  const res = array.reduce((acc, cur) => {\n    if (cur % 2 === 1) {\n      return\
    \ acc * +cur;\n    }\n    return acc;\n  }, 1);\n  return res;\n}\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));", "    let digits = n.toString().split('');\n\
    \    let digit_val = 0;\n    let digits_prod = 1;\n    for (let i = 0; i < digits.length;\
    \ i++) {\n        digit_val = parseInt(digits[i]);\n        if (digit_val % 2\
    \ == 1) {\n            digits_prod *= digit_val;\n        }\n    }\n    return\
    \ digits_prod;\n}\n", "  let total = 1;\n  while (n !== 0) {\n    let d = n %\
    \ 10;\n    if (d % 2 !== 0) {\n      total *= d;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return total;\n}\n", "  let number = String(n);\n  let oddNumbers:\
    \ number[] = [];\n  for (let i = 0; i < number.length; i++) {\n    if (number[i]\
    \ % 2 !== 0) {\n      oddNumbers.push(Number(number[i]));\n    }\n  }\n  if (oddNumbers.length\
    \ !== 0) {\n    return oddNumbers.reduce((a, b) => a * b);\n  } else {\n    return\
    \ 0;\n  }\n}\n", "  let nCopy = n;\n  let product = 1;\n  let units;\n  let tens;\n\
    \  let hundreds;\n  let thousands;\n  let tensOfThousands;\n  let hundredsOfThousands;\n\
    \  let millions;\n  let tensOfMillions;\n  let hundredsOfMillions;\n  let billions;\n\
    \  let tensOfBillions;\n  let hundredsOfBillions;\n  let trillions;\n  let tensOfTrillions;\n\
    \  let hundredsOfTrillions;\n  let quadrillions;\n  let tensOfQuadrillions;\n\
    \  let hundredsOfQuadrillions;\n  let quintillions;\n  let tensOfQuintillions;\n\
    \  let hundredsOfQuintillions;\n  let sextillions;\n  let tensOfSextillions;\n\
    \  let hundredsOfSextillions;\n  let septillions;\n  let tensOfSeptillions;\n\
    \  let hundredsOfSeptillions;\n  let octillions;\n  let tensOfOctillions;\n  let\
    \ hundredsOfOctillions;\n  let nonillions;\n  let tensOfNonillions;\n  let hundredsOfNonillions;\n\
    \  let decillions;\n  let tensOfDecillions;\n  let hundredsOfDecillions;\n  let\
    \ undecillions;\n  let tensOfUndecillions;\n  let hundredsOfUndecillions;\n  let\
    \ duodecillions;\n  let tensOfDuodecillions;\n  let hundredsOfDuodecillions;\n\
    \  let tredecillions;\n  let tensOfTredecillions;\n  let hundredsOfTredecillions;\n\
    \  let quattuordecillions;\n  let tensOfQuattuordecillions;\n  let hundredsOfQuattuordecillions;\n\
    \  let quindecillions;\n  let tensOfQuindecillions;\n  let hundredsOfQuindecillions;\n\
    \  let sexdecillions;\n  let tensOfSexdecillions;\n  let hundredsOfSexdecillions;\n\
    \  let septendecillions;\n  let tensOfSeptendecillions;\n  let hundredsOfSeptendecillions;\n\
    \  let octodecillions;\n  let tensOfOctodecillions;\n  let hundredsOfOctodecillions;\n\
    \  let novemdecillions;\n", "    let result = 1;\n    while (n > 0) {\n      \
    \  let r = n % 10;\n        if (r % 2 == 1) {\n            result *= r;\n    \
    \    }\n        n = Math.floor(n / 10);\n    }\n    return result;\n}\n", "  \
    \  let result = 1;\n    while (n !== 0) {\n        const digit = n % 10;\n   \
    \     if (digit % 2 !== 0) {\n            result *= digit;\n        }\n      \
    \  n = Math.floor(n / 10);\n    }\n    return result;\n}\n\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));", "    let product: number\
    \ = 1;\n    while (n > 0) {\n        let digit: number = n % 10;\n        if (digit\
    \ % 2 !== 0) {\n            product *= digit;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return product;\n}\n", "  if (n === 0) {\n    return 0;\n\
    \  }\n  let product = 1;\n  let remainder = n % 10;\n  n = Math.floor(n / 10);\n\
    \  if (remainder % 2 !== 0) {\n    product *= remainder;\n  }\n  return product\
    \ * digits(n);\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "  const str = n.toString().split('');\n  let res = 1;\n  str.forEach(el => {\n\
    \    if (el % 2 === 1) {\n      res *= parseInt(el);\n    }\n  });\n  return res\
    \ === 1 ? 0 : res;\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));",
  "    let d: number = 0;\n    let out: number = 1;\n    while (n > 0) {\n       \
    \ d = n % 10;\n        if (d % 2 !== 0) {\n            out *= d;\n        }\n\
    \        n = Math.floor(n / 10);\n    }\n    return out;\n}\n", "  let product\
    \ = 1;\n  let nums = n.toString().split(\"\");\n  let numsLength = nums.length;\n\
    \  for (let i = 0; i < numsLength; i++) {\n    let currentNumber = Number(nums[i]);\n\
    \    if (currentNumber % 2 !== 0) {\n      product *= currentNumber;\n    }\n\
    \  }\n  return product;\n}\n", "    const str = n.toString();\n    let odd = 0;\n\
    \    for (let i = 0; i < str.length; i++) {\n        const num = parseInt(str[i]);\n\
    \        if (num % 2) {\n            odd += num;\n        }\n    }\n    return\
    \ odd;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "    let product: number = 1;\n    let digit: number;\n    while (n > 0) {\n   \
    \     digit = n % 10;\n        if (digit % 2 !== 0) {\n            product *=\
    \ digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return product;\n\
    }", "    let nCopy = n\n    let numList = []\n    let oddList = []\n    let finalProduct\
    \ = 1\n    while (nCopy !== 0) {\n        numList.push(nCopy % 10)\n        nCopy\
    \ = Math.floor(nCopy / 10)\n    }\n    for (let i = 0; i < numList.length; i++)\
    \ {\n        if (numList[i] % 2 !== 0) {\n            oddList.push(numList[i])\n\
    \        }\n    }\n    if (oddList.length === 0) {\n        return 0\n    }\n\
    \    for (let i = 0; i < oddList.length; i++) {\n        finalProduct *= oddList[i]\n\
    \    }\n    return finalProduct\n}\n", "  let result = 1;\n  let num = n;\n  while\
    \ (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 !== 0) {\n      result\
    \ *= digit;\n    }\n    num = Math.floor(num / 10);\n  }\n  return result;\n}\n\
    console.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n\
    console.log(digits(12));\nconsole.log(digits(22));\n", "    let allDigits: number[]\
    \ = n.toString().split('').map(Number);\n    let oddDigits: number[] = allDigits.filter(x\
    \ => x % 2 == 1);\n    let result: number = oddDigits.reduce((a, b) => a * b,\
    \ 1);\n    return result ? result : 0;\n}\n", "  let strN: string = n.toString();\n\
    \  let result: number = 1;\n  for (let i: number = 0; i < strN.length; i++) {\n\
    \    if (parseInt(strN[i]) % 2 === 1) {\n      result *= parseInt(strN[i]);\n\
    \    }\n  }\n  return result;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));\nconsole.log(digits(23456789));\nconsole.log(digits(10000000000));",
  "    let str: string = n.toString();\n    let result: number = 1;\n    for (let\
    \ i: number = 0; i < str.length; i++) {\n        if (Number(str[i]) % 2 === 1)\
    \ {\n            result *= Number(str[i]);\n        }\n    }\n    return result;\n\
    }\n", "  let n_str = n.toString();\n  let n_arr = n_str.split(\"\");\n  let n_odd\
    \ = n_arr.filter(function(num) {\n    return num % 2 === 1;\n  });\n  if (n_odd.length\
    \ === 0) {\n    return 0;\n  } else {\n    return n_odd.reduce(function(a, b)\
    \ {\n      return parseInt(a) * parseInt(b);\n    });\n  }\n}\n\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));\n", "    let result = 1;\n\
    \    for (let number of n.toString()) {\n        if (parseInt(number) % 2 !==\
    \ 0) {\n            result *= parseInt(number);\n        }\n    }\n    return\
    \ result === 1 ? 0 : result;\n}\n", "    let product = 1;\n    for (let i = 0;\
    \ i < n.toString().length; i++) {\n        if (n.toString()[i] % 2 !== 0) {\n\
    \            product *= parseInt(n.toString()[i]);\n        }\n    }\n    return\
    \ product;\n}\n", "  const nums = n.toString().split('');\n  let result = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n   \
    \   result += +nums[i];\n    }\n  }\n  return result;\n}\n", "    let tmp = n;\n\
    \    let res = 1;\n    while (tmp > 0) {\n        let tmpMod = tmp % 10;\n   \
    \     if (tmpMod % 2 !== 0) {\n            res *= tmpMod;\n        }\n       \
    \ tmp = Math.floor(tmp / 10);\n    }\n    return res;\n}\n", "  let str = n.toString();\n\
    \  let sum = 1;\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i])\
    \ % 2 !== 0) {\n      sum *= parseInt(str[i]);\n    }\n  }\n  return sum === 1\
    \ ? 0 : sum;\n}\n", "    let sum: number = 1;\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    while (n !== 0) {\n        let a: number = n % 10;\n        if\
    \ (a % 2 !== 0) {\n            sum *= a;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return sum;\n}\nconsole.log(digits(135));", "  let result\
    \ = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0)\
    \ {\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ result;\n}", "  // TODO\n  let prod = 1;\n  let odd = 0;\n  let num = n;\n \
    \ while (num > 0) {\n    let digit = num % 10;\n    if (digit % 2 === 1) {\n \
    \     prod *= digit;\n      odd += 1;\n    }\n    num = Math.floor(num / 10);\n\
    \  }\n  if (odd === 0) {\n    return 0;\n  }\n  return prod;\n}\n\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));\n", "  const digits = n.toString().split('');\n\
    \  let res = 1;\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i]\
    \ % 2 !== 0) {\n      res *= parseInt(digits[i]);\n    }\n  }\n  return res ===\
    \ 1 ? 0 : res;\n}\n", "    let res = 0;\n    while (n > 0) {\n        let last\
    \ = n % 10;\n        if (last % 2 !== 0) {\n            res += last;\n       \
    \ }\n        n = (n - last) / 10;\n    }\n    return res;\n}\n", "  if (n <= 0)\
    \ {\n    return 0;\n  }\n  if (n < 10) {\n    return n % 2 === 0 ? 0 : n;\n  }\n\
    \  const [last, ...rest] = String(n);\n  return Number(last) % 2 === 0 ? digits(Number(rest.join(\"\
    \"))) : Number(last) * digits(Number(rest.join(\"\")));\n}\n", "  if (n < 0) return\
    \ digits(-n);\n  let sum = 1;\n  while (n) {\n    const digit = n % 10;\n    if\
    \ (digit % 2 === 1) sum *= digit;\n    n = Math.floor(n / 10);\n  }\n  return\
    \ sum;\n}\n", "    let result = 1;\n    let numString = n.toString();\n    for\
    \ (let i = 0; i < numString.length; i++) {\n        if (numString[i] % 2 === 1)\
    \ {\n            result *= numString[i];\n        }\n    }\n    return result;\n\
    }\n\nexport default digits;", "  let result = 1;\n  for (let i = 0; i < n.toString().length;\
    \ i++) {\n    if (n.toString()[i] % 2 !== 0) {\n      result *= n.toString()[i];\n\
    \    }\n  }\n  return result;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));\n", "    let arr = n.toString().split('');\n    let\
    \ result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (parseInt(arr[i])\
    \ % 2 !== 0) {\n            result += parseInt(arr[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "  let str = n.toString();\n  let arr = str.split(\"\"\
    );\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 != 0) {\n      product *= Number(arr[i]);\n    }\n  }\n  return product;\n\
    }\n", "    let result = 0;\n    const digits = n.toString().split('');\n    for\
    \ (let i = 0; i < digits.length; i++) {\n        if (digits[i] % 2 !== 0) {\n\
    \            result += parseInt(digits[i]);\n        }\n    }\n    return result;\n\
    }\n", "  //your code here\n  return 0;\n}\n", "    if (n < 10) {\n        return\
    \ n % 2 === 0 ? 0 : n;\n    }\n    let lastDigit = n % 10;\n    return lastDigit\
    \ % 2 === 0 ? digits(Math.floor(n / 10)) : lastDigit * digits(Math.floor(n / 10));\n\
    }\n", "  if (n < 10) {\n    return n % 2 ? n : 0;\n  }\n\n  return (n % 10 % 2\
    \ ? n % 10 : 0) * digits(Math.floor(n / 10));\n}\n\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));", "    return n ? n % 10 *\
    \ digits(Math.floor(n / 10)) : 1;\n}\n", "  if (n === 0) {\n    return 0;\n  }\n\
    \  let odd = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit %\
    \ 2 === 1) {\n      odd *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n \
    \ return odd;\n}\n", "    let product = 1;\n    while (n > 0) {\n        let digit\
    \ = n % 10;\n        if (digit % 2 !== 0) {\n            product *= digit;\n \
    \       }\n        n = Math.floor(n / 10);\n    }\n    return product;\n}\n",
  "  let product = 1;\n  let sum = 0;\n  while (n > 0) {\n    const digit = n % 10;\n\
    \    if (digit % 2 === 1) {\n      product *= digit;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return product;\n}\n", "    let product = 1;\n    while (n >\
    \ 0) {\n        const lastDigit = n % 10;\n        if (lastDigit % 2 === 1) {\n\
    \            product *= lastDigit;\n        }\n        n = Math.floor(n / 10);\n\
    \    }\n    return product;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));", "    let p = 1;\n    while (n) {\n        const d\
    \ = n % 10;\n        if (d % 2) p *= d;\n        n = Math.floor(n / 10);\n   \
    \ }\n    return p;\n}\n", "    let result = 1;\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit\
    \ % 2 !== 0) {\n            result *= digit;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return result;\n}\n", "  let digit: number = 0;\n  let result:\
    \ number = 1;\n  while (n > 0) {\n    digit = n % 10;\n    if (digit % 2 !== 0)\
    \ {\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ result;\n}\n", "  let product = 1;\n  while (n > 0) {\n    const lastDigit =\
    \ n % 10;\n    if (lastDigit % 2 === 1) {\n      product *= lastDigit;\n    }\n\
    \    n = Math.floor(n / 10);\n  }\n  return product;\n}\n", "    let product =\
    \ 1;\n    for (let i = 0; i < String(n).length; i++) {\n        if (Number(String(n)[i])\
    \ % 2 === 1) {\n            product *= Number(String(n)[i]);\n        }\n    }\n\
    \    return product;\n}\n", "    let total = 1;\n    while (n > 0) {\n       \
    \ const digit = n % 10;\n        if (digit % 2 !== 0) {\n            total *=\
    \ digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return total;\n\
    }\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n % 2 !== 0) {\n    return\
    \ n % 10 * digits(Math.floor(n / 10));\n  }\n  return digits(Math.floor(n / 10));\n\
    }\n", "    return n\n        .toString()\n        .split('')\n        .map(n =>\
    \ parseInt(n))\n        .filter(n => n % 2 !== 0)\n        .reduce((acc, n) =>\
    \ acc * n, 1);\n}\n", "    let digits = n.toString().split('');\n    let product\
    \ = 1;\n    for (let i = 0; i < digits.length; i++) {\n        if (parseInt(digits[i])\
    \ % 2 !== 0) {\n            product *= parseInt(digits[i]);\n        }\n    }\n\
    \    return product;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "  let prod = 1;\n  let rem;\n  while (n > 0) {\n    rem = n % 10;\n    if (rem\
    \ % 2 !== 0) {\n      prod *= rem;\n    }\n    n = Math.floor(n / 10);\n  }\n\
    \  return prod;\n}\n", "  let res = 1;\n  while (n > 0) {\n    const d = n % 10;\n\
    \    if (d % 2 != 0) {\n      res *= d;\n    }\n    n = Math.floor(n / 10);\n\
    \  }\n  return res;\n}\n", "  let res = 1;\n  while (n > 0) {\n    const d = n\
    \ % 10;\n    if (d % 2 !== 0) {\n      res *= d;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return res;\n}\n\nexport default digits;", "  let product = 1;\n\
    \  for (const digit of n.toString()) {\n    if (digit === \"0\") continue;\n \
    \   if (digit % 2 === 1) product *= Number(digit);\n  }\n  return product;\n}\n",
  "    let result = 1;\n    while (n > 0) {\n        const digit = n % 10;\n     \
    \   if (digit % 2 === 1) {\n            result *= digit;\n        }\n        n\
    \ = Math.floor(n / 10);\n    }\n    return result;\n}", "    let result = 1;\n\
    \    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 ===\
    \ 1) {\n            result *= digit;\n        }\n        n = Math.floor(n / 10);\n\
    \    }\n    return result;\n}\n", "    let odd_product = 1;\n    while (n) {\n\
    \        const digit = n % 10;\n        if (digit % 2 === 1) {\n            odd_product\
    \ *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return odd_product;\n\
    }\nconsole.log(digits(234));", "    return n\n        .toString()\n        .split('')\n\
    \        .map(Number)\n        .filter(isOdd)\n        .reduce(multiply, 1);\n\
    }\n", "  if(n < 10) {\n    return n;\n  }\n\n  let remainder = n % 10;\n  if(remainder\
    \ % 2 === 0) {\n    remainder = 0;\n  }\n\n  return remainder * digits(Math.floor(n\
    \ / 10));\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "  let num: number = n;\n  let sum: number = 1;\n  while (num > 0) {\n    let lastDigit:\
    \ number = num % 10;\n    if (lastDigit % 2 === 1) {\n      sum *= lastDigit;\n\
    \    }\n    num = (num - lastDigit) / 10;\n  }\n  return sum;\n}\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));\n", "  let a = n.toString().split('');\n\
    \  let product = 1;\n  for (let i of a) {\n    if (parseInt(i) % 2 === 1) {\n\
    \      product *= parseInt(i);\n    }\n  }\n  return product === 1 ? 0 : product;\n\
    }\n", "  const string = n.toString();\n  const array = string.split('');\n  const\
    \ filtered = array.filter(ele => ele % 2 === 1);\n  const parsed = filtered.map(ele\
    \ => parseInt(ele));\n  const result = parsed.reduce((acc, val) => acc * val,\
    \ 1);\n  return result;\n}", "    let product: number = 1;\n    let str: string\
    \ = n.toString();\n    for (let i: number = 0; i < str.length; i++) {\n      \
    \  if (parseInt(str[i]) % 2 === 1) {\n            product *= parseInt(str[i]);\n\
    \        }\n    }\n    return product;\n}\n\nexport default digits;", "    const\
    \ arr = String(n).split('');\n    const reducer = (acc: number, num: string) =>\
    \ Number(num) % 2 === 1 ? acc * Number(num) : acc;\n    return arr.reduce(reducer,\
    \ 1);\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "    return n.toString().split('').reduce((total, currentValue) => {\n        const\
    \ digit = parseInt(currentValue);\n        if (digit % 2 !== 0) {\n          \
    \  return total * digit;\n        }\n        return total;\n    }, 1);\n}\n",
  "  let copy: number = n;\n  let result: number = 1;\n  while (copy >= 1) {\n   \
    \ let last: number = copy % 10;\n    if (last % 2 === 1) {\n      result *= last;\n\
    \    }\n    copy = Math.floor(copy / 10);\n  }\n  return result;\n}\n", "    let\
    \ nums: number[] = n.toString().split('').map(Number);\n    let product: number\
    \ = 1;\n    nums.forEach(function (item) {\n        if (item % 2 !== 0) {\n  \
    \          product *= item;\n        }\n    });\n    return product || 0;\n}\n\
    console.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "    return String(n).split('').reduce((acc: number, val: string) => {\n       \
    \ const num = parseInt(val);\n        return num % 2 !== 0 ? acc * num : acc;\n\
    \    }, 1);\n}\n", "    let nums = n.toString().split('').map(Number);\n    let\
    \ prod = 1;\n    for (let num of nums) {\n        if (num % 2 != 0) {\n      \
    \      prod *= num;\n        }\n    }\n    return prod;\n}\n", "  if (n == 0)\
    \ {\n    return 0;\n  }\n  if (n % 2 != 0) {\n    return n % 10 * digits(Math.floor(n\
    \ / 10));\n  }\n  return digits(Math.floor(n / 10));\n}\n\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));", "  return n\n    .toString()\n\
    \    .split(\"\")\n    .map(n => parseInt(n))\n    .filter(n => n % 2 !== 0)\n\
    \    .reduce((a, b) => a * b, 1);\n}\n\nconsole.log(digits(235));", "  let result\
    \ = 1;\n  n = n.toString();\n  for (let i = 0; i < n.length; i++) {\n    const\
    \ element = parseInt(n[i]);\n    if (element % 2 === 1) {\n      result *= element;\n\
    \    }\n  }\n  return result;\n}\nconsole.log(digits(99));\nconsole.log(digits(123));\n",
  "  let result = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit\
    \ % 2 === 1) {\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n \
    \ }\n  return result;\n}\n", "    let product = 1;\n    let numberAsString = n.toString();\n\
    \    for (let i = 0; i < numberAsString.length; i++) {\n        if (numberAsString[i]\
    \ % 2 !== 0) {\n            product *= parseInt(numberAsString[i]);\n        }\n\
    \    }\n    return product;\n}\n", "  let digitProduct = 1;\n  const digitArr\
    \ = String(n).split(\"\");\n  for (let i = 0; i < digitArr.length; i++) {\n  \
    \  if (Number(digitArr[i]) % 2 !== 0) {\n      digitProduct *= Number(digitArr[i]);\n\
    \    }\n  }\n  return digitProduct;\n}\n", "    let sum = 1;\n    let num: number\
    \ = n;\n    while (num > 0) {\n        let digit = num % 10;\n        if (digit\
    \ % 2 === 1) {\n            sum *= digit;\n        }\n        num = Math.floor(num\
    \ / 10);\n    }\n    return sum;\n}", "    return 0;\n}\n\n\ndescribe(\"digits\"\
    , () => {\n    it(\"returns the product of the odd digits\", () => {\n       \
    \ // Arrange\n        const expected = 15;\n\n        // Act\n        const actual\
    \ = digits(235);\n\n        // Assert\n        expect(actual).toBe(expected);\n\
    \    });\n\n    it(\"returns 0 if all digits are even\", () => {\n        // Arrange\n\
    \        const expected = 0;\n\n        // Act\n        const actual = digits(4);\n\
    \n        // Assert\n        expect(actual).toBe(expected);\n    });\n});", " \
    \ let odd: number = 1;\n  while (n > 0) {\n    const digit: number = n % 10;\n\
    \    if (digit % 2 !== 0) {\n      odd *= digit;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return odd;\n}\n", "    let prod = 1;\n    while (n > 0) {\n\
    \        const digit = n % 10;\n        if (digit % 2 === 1) {\n            prod\
    \ *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return prod;\n\
    }\n", "    let result = 1;\n    if (n === 0) {\n        return 0;\n    }\n   \
    \ while (n > 0) {\n        let lastDigit = n % 10;\n        if (lastDigit % 2\
    \ === 1) {\n            result *= lastDigit;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return result;\n}\n", "  // if the number is less than 10\
    \ and the number is odd, return the number\n  if (n < 10 && n % 2 != 0) {\n  \
    \  return n;\n  }\n  // if the number is less than 10 and the number is even,\
    \ return 0\n  if (n < 10 && n % 2 == 0) {\n    return 0;\n  }\n  // get the last\
    \ digit by finding the remainder of the number divided by 10\n  let lastDigit\
    \ = n % 10;\n  // if the last digit is even, set it to 0\n  if (lastDigit % 2\
    \ == 0) {\n    lastDigit = 0;\n  }\n  // call digits on the integer without the\
    \ last digit and multiply the result\n  // by the last digit\n  return digits(Math.floor(n\
    \ / 10)) * lastDigit;\n}\n", "  let accumulator = 1;\n  while (n > 0) {\n    const\
    \ number = n % 10;\n    if (number % 2 !== 0) {\n      accumulator *= number;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return accumulator;\n}\n", "    let\
    \ p: number = 1;\n    while (n > 0) {\n        let d: number = n % 10;\n     \
    \   if (d % 2 === 1) {\n            p *= d;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return p;\n}\nconsole.log(digits(4));", "    const a = n.toString();\n\
    \    let result = 1;\n    for (let i = 0; i < a.length; i++) {\n        const\
    \ num = parseInt(a[i]);\n        if (num % 2 !== 0) {\n            result *= num;\n\
    \        }\n    }\n    return result;\n}\n", "  let res = 1;\n  let m = n;\n \
    \ while (m > 0) {\n    const digit = m % 10;\n    if (digit % 2 === 1) {\n   \
    \   res *= digit;\n    }\n    m = Math.floor(m / 10);\n  }\n  return res;\n}",
  "    let res = 1;\n    while (n > 0) {\n        let digit = n % 10;\n        if\
    \ (digit % 2 !== 0) {\n            res *= digit;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return res;\n}\n", "    const numbers = n.toString().split('');\n\
    \    return numbers.reduce((acc, number) => {\n        if (parseInt(number) %\
    \ 2 !== 0) {\n            return acc * parseInt(number);\n        } else {\n \
    \           return acc;\n        }\n    }, 1);\n}\n", "    // code here\n    let\
    \ result = 1;\n    let array = n.toString().split('');\n    let nums = [];\n \
    \   for (let i = 0; i < array.length; i++) {\n        nums.push(Number(array[i]));\n\
    \    }\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !==\
    \ 0) {\n            result *= nums[i];\n        }\n    }\n    return result ===\
    \ 1 ? 0 : result;\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "    let product: number = 1;\n    while (n > 0) {\n        let digit: number =\
    \ n % 10;\n        if (digit % 2 === 1) {\n            product *= digit;\n   \
    \     }\n        n = Math.floor(n / 10);\n    }\n    return product;\n}\n", " \
    \   let oddDigits = 1;\n    for (let i = 10; n > 0; i *= 10) {\n        let digit\
    \ = n % i;\n        n -= digit;\n        if (digit % 2 === 1) {\n            oddDigits\
    \ *= digit;\n        }\n    }\n    return oddDigits;\n}\nconsole.log(digits(123));\n\
    \n", "  let product = 1;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit\
    \ % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n\
    \  }\n  return product;\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));", "  const array = n.toString().split('');\n  const\
    \ product = array.reduce((result, number) => {\n    const num = parseInt(number);\n\
    \    if (num % 2 === 1) {\n      return result * num;\n    }\n    return result;\n\
    \  }, 1);\n  return product;\n}\n\nconst num1 = 1;\nconst expected1 = 1;\nconst\
    \ actual1 = digits(num1);\nconsole.log(actual1 === expected1);\n\nconst num2 =\
    \ 4;\nconst expected2 = 0;\nconst actual2 = digits(num2);\nconsole.log(actual2\
    \ === expected2);\n\nconst num3 = 235;\nconst expected3 = 15;\nconst actual3 =\
    \ digits(num3);\nconsole.log(actual3 === expected3);", "  let str: string = n.toString();\n\
    \  let counter: number = 1;\n  for (let i: number = 0; i < str.length; i++) {\n\
    \    if (str[i] % 2 === 1) {\n      counter *= parseInt(str[i]);\n    }\n  }\n\
    \  return counter;\n}\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));",
  "  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit\
    \ % 2) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n \
    \ return product;\n}\n\nexport { digits };", "  let arr = n.toString().split('');\n\
    \  let result = 1;\n  arr.forEach(e => {\n    if(e === '-') {\n      return;\n\
    \    }\n    if(parseInt(e) % 2 === 1) {\n      result *= parseInt(e);\n    }\n\
    \  });\n  return result;\n}\n\ndescribe('digits', () => {\n  it('can find the\
    \ product of the odd digits', () => {\n    let result = digits(1);\n    expect(result).toBe(1);\n\
    \  });\n  it('can return 0 if all digits are even', () => {\n    let result =\
    \ digits(4);\n    expect(result).toBe(0);\n  });\n  it('can find the product of\
    \ the odd digits', () => {\n    let result = digits(235);\n    expect(result).toBe(15);\n\
    \  });\n});", "    return Array.from(String(n), Number)\n        .filter(x =>\
    \ x % 2 === 1)\n        .reduce((x, y) => x * y, 1);\n}\n", "    let nStr = n.toString();\n\
    \    let retVal = 1;\n    for (let i = 0; i < nStr.length; i++) {\n        if\
    \ (nStr[i] % 2 === 1) {\n            retVal *= Number(nStr[i]);\n        }\n \
    \   }\n    return retVal;\n}", "  let newNum = n.toString();\n  let newStr: string\
    \ = \"\";\n  let finalStr: string = \"\";\n  let finalNum: number = 0;\n  let\
    \ product = 1;\n  for (let i = 0; i < newNum.length; i++) {\n    newStr = newNum[i];\n\
    \    if (parseInt(newStr) % 2 !== 0) {\n      finalStr += newStr;\n    }\n  }\n\
    \  finalNum = parseInt(finalStr);\n  if (finalNum === 0) {\n    return 0;\n  }\
    \ else {\n    finalStr = finalNum.toString();\n    for (let i = 0; i < finalStr.length;\
    \ i++) {\n      product *= parseInt(finalStr[i]);\n    }\n    return product;\n\
    \  }\n}\n\nconsole.log(digits(235));\nconsole.log(digits(4));\nconsole.log(digits(1));\n",
  "  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit\
    \ % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n\
    \  }\n  return product;\n}\n\ndigits(235);", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n % 2 !== 0) {\n    return (n % 10) * digits(Math.floor(n / 10));\n\
    \  }\n  return digits(Math.floor(n / 10));\n}\nconsole.log(digits(235));\n", " \
    \   if (n < 0) {\n        n = n * -1;\n    }\n    let oddProduct = 1;\n    let\
    \ currentDigit: number;\n    let nCopy = n;\n    while (nCopy > 0) {\n       \
    \ currentDigit = nCopy % 10;\n        if (currentDigit % 2 !== 0) {\n        \
    \    oddProduct = oddProduct * currentDigit;\n        }\n        nCopy = Math.floor(nCopy\
    \ / 10);\n    }\n    return oddProduct;\n}\n", "    let res = 1;\n    while (n\
    \ > 0) {\n        let lastDigit = n % 10;\n        if (lastDigit % 2 === 1) {\n\
    \            res *= lastDigit;\n        }\n        n = Math.floor(n / 10);\n \
    \   }\n    return res;\n}", "  const digits = n.toString().split('');\n  const\
    \ arrOfNum = digits.map(val => parseInt(val));\n  const oddNums = arrOfNum.filter(num\
    \ => num % 2 !== 0);\n  return oddNums.reduce((acc, num) => acc * num, 1);\n}\n",
  "  let ans = 1;\n  for (const digit of n.toString()) {\n    const num = Number(digit);\n\
    \    if (num % 2 !== 0) {\n      ans *= num;\n    }\n  }\n  return ans;\n}\n",
  "    // create array of digits\n    const digitsArr = n.toString().split('');\n\
    \    // declare variable to hold the sum\n    let product = 1;\n    // loop through\
    \ the array\n    for (let i = 0; i < digitsArr.length; i++) {\n        // if digit\
    \ is odd, multiply it with the product\n        if (parseInt(digitsArr[i]) % 2\
    \ !== 0) {\n            product *= parseInt(digitsArr[i]);\n        }\n    }\n\
    \    // return the product\n    return product;\n}\n", "    const digitsArray\
    \ = n.toString().split('');\n    let product = 1;\n    digitsArray.forEach(num\
    \ => {\n        if (num % 2 !== 0) {\n            product *= parseInt(num);\n\
    \        }\n    });\n    return product;\n}\n", "    if (n < 10) {\n        return\
    \ n % 2 === 0 ? 0 : n;\n    }\n    return (n % 10 % 2 === 0 ? 0 : n % 10) * digits(Math.floor(n\
    \ / 10));\n}\n", "    return n\n      .toString()\n      .split('')\n      .map(Number)\n\
    \      .filter(e => e % 2 !== 0)\n      .reduce((acc, curr) => acc * curr, 1);\n\
    }\n\nexport default digits;", "  return 0;\n}\n", "    let result = 1;\n    while\
    \ (n) {\n        const digit = n % 10;\n        if (digit % 2) {\n           \
    \ result *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return\
    \ result;\n}\n", "  let prod = 1;\n  for (let i = 0; i < n.toString().length;\
    \ i++) {\n    if (n.toString()[i] % 2 !== 0) {\n      prod *= Number(n.toString()[i]);\n\
    \    }\n  }\n  return prod;\n}\nconsole.log(digits(12000));\n", "  let output\
    \ = 1;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 !== 0) {\n\
    \      output *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return output;\n\
    }\n", "  let result = 1;\n  while (n) {\n    const lastDigit = n % 10;\n    if\
    \ (lastDigit % 2 !== 0) {\n      result *= lastDigit;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return result;\n}\n", "  // Enter your code here.\n  let product\
    \ = 1;\n  let current = n;\n  let remainder = 0;\n  if (n === 0) {\n    return\
    \ 0;\n  }\n  while (current > 0) {\n    remainder = current % 10;\n    if (remainder\
    \ % 2 === 1) {\n      product *= remainder;\n    }\n    current = Math.floor(current\
    \ / 10);\n  }\n  return product;\n}\n", "  const digitsArray = n.toString().split('');\n\
    \  let oddDigits = digitsArray.filter(el => el % 2 !== 0);\n  if (oddDigits.length\
    \ === 0) {\n    return 0;\n  }\n  let product = 1;\n  for (let num of oddDigits)\
    \ {\n    product *= Number(num);\n  }\n  return product;\n}\n", "    let product\
    \ = 1;\n    while (n) {\n        const digit = n % 10;\n        if (digit % 2\
    \ === 1) {\n            product *= digit;\n        }\n        n = Math.floor(n\
    \ / 10);\n    }\n    return product;\n}\n", "    let product = 1;\n    while (n\
    \ > 0) {\n        let digit = n % 10;\n        if (digit % 2 != 0) {\n       \
    \     product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n \
    \   return product;\n}\n", "  const nums = n.toString().split('').map(char =>\
    \ parseInt(char, 10));\n  return nums.reduce((acc, num) => {\n    if (num % 2\
    \ !== 0) {\n      return acc * num;\n    }\n    return acc;\n  }, 1);\n}\n", " \
    \   let num = n;\n    let prod = 1;\n    while (num) {\n        let digit = num\
    \ % 10;\n        if (digit % 2) {\n            prod *= digit;\n        }\n   \
    \     num = Math.floor(num / 10);\n    }\n    return prod;\n}\nconsole.log(digits(123));\n\
    console.log(digits(234));\n", "    const oddDigits = n.toString().split('').map(char\
    \ => +char).filter(digit => digit % 2 !== 0)\n    if (oddDigits.length === 0)\
    \ {\n        return 0\n    }\n    let result = 1\n    for (let i = 0; i < oddDigits.length;\
    \ i++) {\n        result *= oddDigits[i]\n    }\n    return result\n}\n\nconsole.log(digits(235))\n\
    \n", "  if (n === 0) {\n    return 0;\n  }\n  return (n % 10) % 2 === 1 ? (n %\
    \ 10) * digits(Math.floor(n / 10)) : digits(Math.floor(n / 10));\n}\n\nexport\
    \ default digits;", "    return n\n        .toString()\n        .split('')\n \
    \       .map(c => parseInt(c))\n        .filter(x => x % 2 !== 0)\n        .reduce((a,\
    \ b) => a * b, 1);\n}\n", "    const s = n.toString();\n    let result = 1;\n\
    \    for (let i = 0; i < s.length; i++) {\n        const p = Number(s[i]);\n \
    \       if (p % 2 === 1) {\n            result *= p;\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(digits(1234));\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));", "  if (n < 0) throw new Error('N must be positive');\n\
    \  if (n < 10) return n % 2 == 1 ? n : 0;\n  return (n % 10 % 2 == 1 ? n % 10\
    \ : 0) * digits(Math.floor(n / 10));\n}\n", "    let product = 1;\n    while (n\
    \ > 0) {\n        const digit = n % 10;\n        if (digit % 2 === 1) {\n    \
    \        product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n\
    \    return product;\n}\n", "  let product = 1;\n  const digits = Math.floor(Math.log10(n))\
    \ + 1;\n  for (let i = 0; i < digits; i++) {\n    const digit = n % 10;\n    if\
    \ (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n /\
    \ 10);\n  }\n  return product;\n}\n", "    let num = n;\n    let product = 1;\n\
    \    while (num > 0) {\n        let digit = num % 10;\n        if (digit % 2 ===\
    \ 1) {\n            product *= digit;\n        }\n        num = Math.floor(num\
    \ / 10);\n    }\n    return product;\n}\n", "  let str: string = n.toString();\n\
    \  let prod: number = 1;\n  for (let i: number = 0; i < str.length; i++) {\n \
    \   if (Number(str[i]) % 2 !== 0) {\n      prod *= Number(str[i]);\n    }\n  }\n\
    \  return prod;\n}\n", "    let product = 1;\n    for (let i = 0; i < String(n).length;\
    \ i++) {\n        if (String(n)[i] % 2 === 1) {\n            product *= String(n)[i];\n\
    \        }\n    }\n    return product;\n}\n", "  const nums = n.toString().split('');\n\
    \  let prod = 1;\n  nums.forEach(e => {\n    if (e % 2 === 1) {\n      prod *=\
    \ +e;\n    }\n  });\n  return prod || 0;\n}\n", "  const digits = n.toString().split('');\n\
    \  let num = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit\
    \ = Number(digits[i]);\n    if (digit % 2 !== 0) {\n      num = num * digit;\n\
    \    }\n  }\n  return num;\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\n\
    console.log(digits(235));", "  let product = 1;\n  while (n > 0) {\n    let digit\
    \ = n % 10;\n    if (digit % 2 !== 0) {\n      product *= digit;\n    }\n    n\
    \ = Math.floor(n / 10);\n  }\n  return product;\n}\n", "  let result = 0;\n  while\
    \ (n > 0) {\n    const lastDigit = n % 10;\n    if (lastDigit % 2 !== 0) {\n \
    \     result += lastDigit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return\
    \ result;\n}\n", "    let product = 1;\n    for (let digit of n.toString()) {\n\
    \        if (parseInt(digit) % 2 === 1) {\n            product *= parseInt(digit);\n\
    \        }\n    }\n    return product;\n}\n", "  let result = 1;\n  while (n >\
    \ 0) {\n    const digit = n % 10;\n    if (digit % 2 !== 0) {\n      result *=\
    \ digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return result;\n}\n", " \
    \ let result = 0;\n  let nstr = n.toString();\n  let isFirst = true;\n  for (let\
    \ i = 0; i < nstr.length; i++) {\n    if (parseInt(nstr[i]) % 2 !== 0) {\n   \
    \   if (isFirst) {\n        result = parseInt(nstr[i]);\n        isFirst = false;\n\
    \      } else {\n        result *= parseInt(nstr[i]);\n      }\n    }\n  }\n \
    \ return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
