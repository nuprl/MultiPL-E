name: HumanEval_131_digits
language: ts
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["    let sum = 1;\n    while (n > 0) {\n        let digit = n % 10;\n\
    \        if (digit % 2 === 1) {\n            sum *= digit;\n        }\n      \
    \  n = Math.floor(n / 10);\n    }\n    return sum;\n}\n\n", "    if (n < 0) {\n\
    \        return 0;\n    }\n\n    let result = 1;\n    while (n > 0) {\n      \
    \  let lastDigit = n % 10;\n        if (lastDigit % 2 === 1) {\n            result\
    \ *= lastDigit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return\
    \ result;\n}\n\nassert(digits(1) === 1);\nassert(digits(4) === 0);\nassert(digits(235)\
    \ === 15);\n", "    let result = 0;\n    for (let d of n.toString()) {\n     \
    \   if ((parseInt(d) % 2) == 1) {\n            result = (result == 0) ? parseInt(d)\
    \ : result * parseInt(d);\n        }\n    }\n    return result;\n}\nconsole.log(digits(1234));\n\
    console.log(digits(4));\nconsole.log(digits(0));\nconsole.log(digits(235));\n",
  "  let result = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit\
    \ % 2 != 0) {\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n\
    \  return result;\n}\n", "    let total = 1;\n    let temp = n;\n    while (temp\
    \ > 0) {\n        let next = temp % 10;\n        if (next % 2 !== 0) {\n     \
    \       total *= next;\n        }\n        temp = Math.floor(temp / 10);\n   \
    \ }\n    return total;\n}\n", "  const num = n.toString().split('').map(x => parseInt(x));\n\
    \  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] %\
    \ 2 === 1) {\n      result = result * num[i];\n    }\n  }\n  return result;\n\
    }\nconsole.log(digits(235));", "    let oddDigits: number = 1;\n    while (n >\
    \ 0) {\n        let digit: number = n % 10;\n        if (digit % 2 !== 0) {\n\
    \            oddDigits *= digit;\n        }\n        n = Math.floor(n / 10);\n\
    \    }\n    return oddDigits;\n}\n\ntest(digits, [1], 1);\ntest(digits, [4], 0);\n\
    test(digits, [235], 15);\n", "    if (n === 0) {\n        return 0;\n    }\n \
    \   let currDigit = n % 10;\n    if (currDigit % 2 === 1) {\n        return digits(Math.floor(n\
    \ / 10)) * currDigit;\n    } else {\n        return digits(Math.floor(n / 10));\n\
    \    }\n}\n", "  if (n < 10) {\n    return n % 2 === 0 ? 0 : n;\n  }\n  const\
    \ digit = n % 10;\n  return digit % 2 === 0 ? digits(Math.floor(n / 10)) : digit\
    \ * digits(Math.floor(n / 10));\n}\n", "  let result = 1;\n  n = n.toString();\n\
    \  for (let i = 0; i < n.length; i++) {\n    if (parseInt(n[i]) % 2 !== 0) {\n\
    \      result *= parseInt(n[i]);\n    }\n  }\n  return result;\n}\nconsole.log(digits(1));\n\
    console.log(digits(4));\nconsole.log(digits(235));\n", "  const stringNumber =\
    \ n.toString();\n  const digitArray = stringNumber.split('');\n  let result =\
    \ 1;\n  for (let i = 0; i < digitArray.length; i++) {\n    const digit = parseInt(digitArray[i]);\n\
    \    if (digit % 2 === 1) {\n      result *= digit;\n    }\n  }\n  return result;\n\
    }\n", "    let product = 1;\n    let number = n;\n    let digit = 0;\n    while\
    \ (number > 0) {\n        digit = number % 10;\n        if (digit % 2 !== 0) {\n\
    \            product *= digit;\n        }\n        number = Math.floor(number\
    \ / 10);\n    }\n    return product;\n}\n\ndigits(4);\ndigits(235);", "  if (n\
    \ < 10) {\n    return n % 2 === 0 ? 0 : n;\n  }\n  return n % 2 === 0 ? digits(Math.floor(n\
    \ / 10)) : n % 10 * digits(Math.floor(n / 10));\n}\n", "    if (n == 0) return\
    \ 0;\n    let lastDigit = n % 10;\n    if (lastDigit % 2 != 0) {\n        return\
    \ lastDigit * digits(Math.floor(n / 10));\n    } else {\n        return digits(Math.floor(n\
    \ / 10));\n    }\n}\n", "    const nums = n.toString().split('');\n    let res\
    \ = 1;\n    nums.forEach(e => {\n        if (e % 2 !== 0) {\n            res *=\
    \ Number(e);\n        }\n    });\n    return res === 1 ? 0 : res;\n}\n", "   \
    \ let str = n.toString();\n    let sum = 1;\n    let number;\n    for (let i =\
    \ 0; i < str.length; i++) {\n        number = parseInt(str[i]);\n        if (number\
    \ % 2 === 1) {\n            sum *= number;\n        }\n    }\n    return sum;\n\
    }\n", "  if (n == 0) {\n    return 0;\n  } else {\n    return n % 10 % 2 == 0\
    \ ? digits(Math.floor(n / 10)) : n % 10 * digits(Math.floor(n / 10));\n  }\n}\n",
  "    if (n === 0) {\n        return 0;\n    }\n\n    let result = 1;\n    if (n\
    \ % 2 !== 0) {\n        result *= n % 10;\n    }\n\n    return result * digits(Math.floor(n\
    \ / 10));\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));",
  "  if (n === 0) {\n    return 0;\n  }\n  let singleNum = n % 10;\n  let product\
    \ = 0;\n  if (singleNum % 2 === 1) {\n    product = product + singleNum;\n  }\n\
    \  product = product * digits(Math.floor(n / 10));\n  return product;\n}\nconsole.log(digits(235));",
  "    let product = 1;\n    while (n > 0) {\n        const currDigit = n % 10;\n\
    \        if (currDigit % 2 !== 0) {\n            product *= currDigit;\n     \
    \   }\n        n = Math.floor(n / 10);\n    }\n    return product;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
