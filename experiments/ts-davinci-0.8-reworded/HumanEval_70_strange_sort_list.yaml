name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    return [];\n}\n\ntest(\"test_sort_list\", () => {\n    expect(strange_sort_list([1,\
    \ 2, 3, 4])).toEqual([1, 4, 2, 3]);\n    expect(strange_sort_list([5, 5, 5, 5])).toEqual([5,\
    \ 5, 5, 5]);\n    expect(strange_sort_list([])).toEqual([]);\n});\n", "  if (!lst.length)\
    \ return [];\n  return lst.sort((a, b) => a - b).reduce((acc, v, i) => {\n   \
    \ if (i % 2 === 0) {\n      acc.push(v);\n    } else {\n      acc.unshift(v);\n\
    \    }\n    return acc;\n  }, []);\n}\n", "    return lst;\n}", "  if (lst.length\
    \ < 2) {\n    return lst;\n  }\n\n  const sort_lst = [lst[0]];\n  const tmp_lst\
    \ = lst.slice(1);\n\n  while (tmp_lst.length > 0) {\n    sort_lst.push(tmp_lst.pop());\n\
    \    if (tmp_lst.length > 0) {\n      sort_lst.push(tmp_lst.shift());\n    }\n\
    \  }\n\n  return sort_lst;\n}\n", "    lst.sort((a, b) => a - b);\n    const newList:\
    \ number[] = [];\n    let index = 0;\n    let length = lst.length;\n    while\
    \ (length > 0) {\n        newList.push(lst[index]);\n        newList.push(lst[length\
    \ - 1]);\n        index++;\n        length--;\n    }\n    return newList;\n}\n\
    console.log(strange_sort_list([1, 2, 3, 4]));\nconsole.log(strange_sort_list([5,\
    \ 5, 5, 5]));\nconsole.log(strange_sort_list([]));\n", "    let copy: number[]\
    \ = lst.slice();\n    copy.sort((a, b) => a - b);\n    let result: number[] =\
    \ [];\n    let i: number = 0;\n    let j: number = copy.length - 1;\n    while\
    \ (i <= j) {\n        result.push(copy[i]);\n        i++;\n        if (i <= j)\
    \ {\n            result.push(copy[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\n\n\nconsole.log(strange_sort_list([]));\nconsole.log(strange_sort_list([5,\
    \ 5, 5, 5]));\nconsole.log(strange_sort_list([1, 2, 3, 4]));", "    if (lst.length\
    \ < 2) {\n        return lst;\n    }\n    var is_even = true;\n    var i = 0;\n\
    \    var j = lst.length - 1;\n    var result = [];\n    while (i <= j) {\n   \
    \     if (is_even) {\n            result.push(lst[i]);\n            i++;\n   \
    \     } else {\n            result.push(lst[j]);\n            j--;\n        }\n\
    \        is_even = !is_even;\n    }\n    return result;\n}\n", "  return lst.sort((a,\
    \ b) => a - b)\n            .reduce((acc, e, i) => {\n              if (i % 2\
    \ === 0) {\n                acc.push(e);\n              } else {\n           \
    \     acc.unshift(e);\n              }\n              return acc;\n          \
    \  }, []);\n}", "    if (lst.length === 0) {\n        return lst;\n    }\n\n \
    \   const sorted = lst.sort((a, b) => a - b);\n    const res = [];\n    let direction\
    \ = 0;\n    while (sorted.length > 0) {\n        if (direction === 0) {\n    \
    \        res.push(sorted.shift());\n            direction = 1;\n        } else\
    \ {\n            res.push(sorted.pop());\n            direction = 0;\n       \
    \ }\n    }\n    return res;\n}", "    if (lst.length == 0) {\n        return [];\n\
    \    }\n    else if (lst.length % 2 == 0) {\n        var lst_rev = lst.slice().reverse();\n\
    \        var result = [];\n        var i = 0;\n        while (lst.length > 0)\
    \ {\n            result.push(lst[i]);\n            result.push(lst_rev[i]);\n\
    \            lst.splice(i, 1);\n            lst_rev.splice(i, 1);\n        }\n\
    \        return result;\n    }\n    else {\n        var lst_rev = lst.slice().reverse();\n\
    \        var result = [];\n        var i = 0;\n        while (lst.length > 1)\
    \ {\n            result.push(lst[i]);\n            result.push(lst_rev[i]);\n\
    \            lst.splice(i, 1);\n            lst_rev.splice(i, 1);\n        }\n\
    \        result.push(lst[0]);\n        return result;\n    }\n}\n\n", "    lst.sort((a,\
    \ b) => a - b);\n    let result: number[] = [];\n    let index = 0;\n    let maxIndex\
    \ = lst.length;\n    let left = 0;\n    let right = lst.length - 1;\n    while\
    \ (left <= right) {\n        result[index] = lst[left];\n        left++;\n   \
    \     index++;\n        if (index === maxIndex) {\n            break;\n      \
    \  }\n        result[index] = lst[right];\n        right--;\n        index++;\n\
    \    }\n    return result;\n}\n", "    return [];\n}\n", "    let sorted_lst =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    for (let i = 0; i < sorted_lst.length;\
    \ i++) {\n        result.push(sorted_lst[i]);\n        result.push(sorted_lst[sorted_lst.length\
    \ - i - 1]);\n    }\n    return result;\n}\n", "  if (!lst.length) return [];\n\
    \  let sorted = lst.sort((a, b) => a - b);\n  let result = [];\n  while (sorted.length)\
    \ {\n    result.push(sorted.shift());\n    result.push(sorted.pop());\n  }\n \
    \ return result;\n}\n", "    lst.sort(function (a, b) { return a - b; });\n  \
    \  let i = 0;\n    let j = lst.length - 1;\n    let res = [];\n    let n = Math.ceil(lst.length\
    \ / 2);\n    for (let k = 0; k < n; k++) {\n        res.push(lst[i]);\n      \
    \  if (i != j) {\n            res.push(lst[j]);\n        }\n        i++;\n   \
    \     j--;\n    }\n    return res;\n}\n", "    let isFirstMin = true;\n    const\
    \ length = lst.length;\n    let temp: number;\n    let count: number = 0;\n  \
    \  let flag: boolean = true;\n    let newArr: number[] = [];\n    if (length <=\
    \ 1) {\n        return lst;\n    }\n    for (let i = 0; i < length; i++) {\n \
    \       newArr.push(lst[i]);\n    }\n    for (let i = 0; i < length; i++) {\n\
    \        for (let j = 0; j < length - 1; j++) {\n            if (newArr[j] > newArr[j\
    \ + 1]) {\n                temp = newArr[j];\n                newArr[j] = newArr[j\
    \ + 1];\n                newArr[j + 1] = temp;\n            }\n        }\n   \
    \ }\n    while (flag) {\n        if (isFirstMin) {\n            if (count < length)\
    \ {\n                lst[count] = newArr[count];\n                count++;\n \
    \               isFirstMin = false;\n            } else {\n                flag\
    \ = false;\n            }\n        } else {\n            if (count < length) {\n\
    \                lst[count] = newArr[length - count - 1];\n                count++;\n\
    \                isFirstMin = true;\n            } else {\n                flag\
    \ = false;\n            }\n        }\n    }\n    return lst;\n}\n", "  const lst_:\
    \ number[] = lst.slice(0);\n  lst_.sort((a, b) => a - b);\n  const res: number[]\
    \ = [];\n  for (let i = 0; i < lst_.length; i++) {\n    i % 2 === 0 ? res.push(lst_.shift())\
    \ : res.push(lst_.pop());\n  }\n  return res;\n}\nconsole.log(strange_sort_list([5,\
    \ 5, 5, 5]));\n", "  const sorted: number[] = [...lst].sort((a, b) => a - b);\n\
    \  const res: number[] = [];\n  while (sorted.length) {\n    res.push(sorted.shift());\n\
    \    res.push(sorted.pop());\n  }\n  return res;\n}\n", "    lst.sort((a, b) =>\
    \ a - b);\n    let c = 0;\n    let res = [];\n    while (lst.length > 0) {\n \
    \       if (c == 0) {\n            res.push(lst.shift());\n            c = 1;\n\
    \        } else {\n            res.push(lst.pop());\n            c = 0;\n    \
    \    }\n    }\n    return res;\n}\n", "    if (lst.length == 0) {\n        return\
    \ lst;\n    }\n    else {\n        let lst_ = lst.slice();\n        let lst_ordered:\
    \ number[] = [];\n        let lst_filtered: number[] = [];\n        while (lst_.length\
    \ != 0) {\n            let min_val = Math.min(...lst_);\n            let max_val\
    \ = Math.max(...lst_);\n            lst_ordered.push(min_val);\n            lst_ordered.push(max_val);\n\
    \            lst_filtered = lst_.filter(function (el) {\n                return\
    \ el != min_val && el != max_val;\n            });\n            lst_ = lst_filtered;\n\
    \        }\n        return lst_ordered;\n    }\n}\nconsole.log(strange_sort_list([1,\
    \ 2, 3, 4]));\nconsole.log(strange_sort_list([5, 5, 5, 5]));\nconsole.log(strange_sort_list([]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
