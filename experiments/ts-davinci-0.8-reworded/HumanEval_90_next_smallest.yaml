name: HumanEval_90_next_smallest
language: ts
prompt: "//You are given an array of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n// Return undefined if there\
  \ is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5,\
  \ 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1,\
  \ 1])\n// undefined\nfunction next_smallest(lst: number[]): number | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2,\
  \ 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35,\
  \ 34, 12, -45]),-35);\n}\n\ntest();"
completions: ["  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] != lst[i + 1]) {\n      return lst[i + 1];\n    }\n  }\n \
    \ return undefined;\n}\n", "  lst.sort((a, b) => a - b);\n  let i = 0;\n  let\
    \ j = 0;\n  while (i < lst.length) {\n    while (lst[i] === lst[j]) {\n      j++;\n\
    \    }\n    if (i + 1 === j) {\n      return lst[j];\n    }\n    i = j;\n  }\n\
    \  return undefined;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    var first = lst[0];\n    var second = lst[1];\n    if (first < second)\
    \ {\n        first = second;\n        second = lst[0];\n    }\n    for (var i\
    \ = 2; i < lst.length; i++) {\n        if (lst[i] < first) {\n            second\
    \ = first;\n            first = lst[i];\n        } else if (lst[i] < second) {\n\
    \            second = lst[i];\n        }\n    }\n    return second;\n}\n", " \
    \ lst.sort((a, b) => a - b);\n  return lst[1];\n}\n", "    // your code here\n\
    \    if(lst.length === 0) return undefined;\n    let small1 = lst[0];\n    let\
    \ small2 = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < small1){\n            small2 = small1;\n            small1 = lst[i];\n   \
    \     }\n        else if(lst[i] < small2 && lst[i] !== small1){\n            small2\
    \ = lst[i];\n        }\n    }\n    if(small1 === small2) return undefined;\n \
    \   return small2;\n}\n", "  if (lst.length < 2) {\n    return undefined;\n  }\n\
    \  return sort_int_asc(lst)[1];\n}\n", "    if (lst.length < 2) {\n        return\
    \ undefined;\n    }\n\n    let res: number | undefined = lst[0];\n    let m: number\
    \ = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ m) {\n            m = lst[i];\n        } else if (lst[i] > m && (res === undefined\
    \ || lst[i] < res)) {\n            res = lst[i];\n        }\n    }\n\n    return\
    \ res;\n}\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1,\
    \ 1]));\n", "  const min: number = Math.min(...lst);\n  const min_indices: number[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n\
    \      min_indices.push(i);\n    }\n  }\n  if (min_indices.length >= 2) {\n  \
    \  return undefined;\n  }\n  const min_index: number = min_indices[0];\n  const\
    \ min_lst: number[] = lst.slice(0, min_index);\n  const max_lst: number[] = lst.slice(min_index\
    \ + 1);\n  const max_min: number = Math.min(...max_lst);\n  const max_min_index:\
    \ number = max_lst.indexOf(max_min);\n  const min_max: number = Math.max(...min_lst);\n\
    \  const min_max_index: number = min_lst.indexOf(min_max);\n  const min_max_min:\
    \ number = Math.min(min_max, max_min);\n  if (min_max === max_min) {\n    return\
    \ undefined;\n  }\n  if (min_max_min === min_max) {\n    return lst[min_max_index];\n\
    \  }\n  if (min_max_min === max_min) {\n    return lst[max_min_index + min_index\
    \ + 1];\n  }\n}\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1,\
    \ 1]));\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n\n \
    \   let smallest: number | undefined = undefined;\n    let second_smallest: number\
    \ | undefined = undefined;\n\n    for (let item of lst) {\n        if (smallest\
    \ === undefined) {\n            smallest = item;\n        } else if (item < smallest)\
    \ {\n            second_smallest = smallest;\n            smallest = item;\n \
    \       } else if (second_smallest === undefined || item < second_smallest) {\n\
    \            second_smallest = item;\n        }\n    }\n\n    return second_smallest;\n\
    }\n\n", "    const set = new Set(lst);\n    return [...set].sort((a, b) => a -\
    \ b)[1];\n}\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1,\
    \ 1]));\n", "  const unique = lst.filter((v, i, self) => self.indexOf(v) === i);\n\
    \  if (unique.length > 1) {\n    unique.sort((a, b) => a - b);\n    return unique[1];\n\
    \  }\n  return undefined;\n}\n\nconst lst = [1, 2, 3, 4, 5];\nconst lst2 = [5,\
    \ 1, 4, 3, 2];\nconst lst3 = [];\nconst lst4 = [1, 1];\n\nconsole.log(next_smallest(lst));\n\
    console.log(next_smallest(lst2));\nconsole.log(next_smallest(lst3));\nconsole.log(next_smallest(lst4));",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    const maxNum =\
    \ Math.max(...lst);\n    const minNum = Math.min(...lst);\n    const minCount\
    \ = lst.filter(a => a === minNum).length;\n    if (minCount > 1) {\n        return\
    \ undefined;\n    }\n    const lstFiltered = lst.filter(a => a !== maxNum);\n\
    \    return Math.min(...lstFiltered);\n}\n", "    if (lst.length < 2) {\n    \
    \    return undefined;\n    }\n    let sortedLst = [...lst].sort((x, y) => x -\
    \ y);\n    return sortedLst[1];\n}\n", "  let ordered = lst.sort((a, b) => a -\
    \ b);\n  console.log(ordered);\n  let previous = ordered[0];\n  for (let i = 1;\
    \ i < ordered.length; i++) {\n    if (ordered[i] != previous) {\n      return\
    \ ordered[i];\n    }\n  }\n  return undefined;\n}\n", "  if (lst.length < 2) {\n\
    \    return undefined;\n  }\n  const sorted = lst.sort((a, b) => a - b);\n  return\
    \ sorted[1];\n}\n", "  let minimum = Math.min(...lst);\n  let second_smallest\
    \ = minimum;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < second_smallest\
    \ && lst[i] > minimum) {\n      second_smallest = lst[i];\n    }\n  }\n  if (second_smallest\
    \ === minimum) {\n    return undefined;\n  }\n  return second_smallest;\n}\n",
  "  let i = 0;\n  let min = lst[0];\n  let second_min = Number.MAX_VALUE;\n  for\
    \ (i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      second_min =\
    \ min;\n      min = lst[i];\n    } else if (lst[i] < second_min && lst[i] > min)\
    \ {\n      second_min = lst[i];\n    }\n  }\n  if (second_min !== Number.MAX_VALUE)\
    \ {\n    return second_min;\n  } else {\n    return undefined;\n  }\n}\n", " \
    \   const sorted = lst.sort((a, b) => a - b);\n    let smallest: number | undefined;\n\
    \    for (let i = 0; i < sorted.length; i++) {\n        if (smallest === undefined)\
    \ {\n            smallest = sorted[i];\n        } else if (sorted[i] === smallest)\
    \ {\n            continue;\n        } else {\n            return sorted[i];\n\
    \        }\n    }\n    return undefined;\n}", "    if (lst.length === 0) {\n \
    \       return undefined;\n    }\n    const sorted = lst.sort((a, b) => a - b);\n\
    \    const filtered = sorted.filter((x, idx) => idx > 0 && x !== sorted[idx -\
    \ 1]);\n    return filtered[0];\n}\n", "  if (lst.length < 2) {\n    return undefined;\n\
    \  }\n  let min = lst[0];\n  let res = undefined;\n  for (let i = 1; i < lst.length;\
    \ i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    } else if (res ==\
    \ undefined || lst[i] < res) {\n      res = lst[i];\n    }\n  }\n  return res;\n\
    }\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1,\
    \ 1]));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
