name: HumanEval_56_correct_bracketing
language: ts
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
completions: ["  return false;\n}\n", "    const stack: string[] = [];\n    for (const\
    \ bracket of brackets) {\n        if (bracket === '<') {\n            stack.push(bracket);\n\
    \        } else if (bracket === '>') {\n            if (stack.length === 0) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return stack.length === 0;\n}\nconsole.log(correct_bracketing(\"\
    <>\"));\nconsole.log(correct_bracketing(\"<<><>>\"));\nconsole.log(correct_bracketing(\"\
    ><<>\"));\nconsole.log(correct_bracketing(\"<\"));\n", "  let bracket_stack: string[]\
    \ = [];\n  let matching_bracket: string = \"\";\n  for (let i: number = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      bracket_stack.push(brackets[i]);\n\
    \    } else if (brackets[i] === \">\") {\n      matching_bracket = bracket_stack.pop();\n\
    \      if (matching_bracket === undefined) {\n        return false;\n      }\n\
    \    }\n  }\n  if (bracket_stack.length > 0) {\n    return false;\n  }\n  return\
    \ true;\n}\n", "  let stack: string[] = [];\n  for (let i: number = 0; i < brackets.length;\
    \ i++) {\n    let bracket: string = brackets[i];\n    if (bracket === \"<\") {\n\
    \      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length\
    \ === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n \
    \ return stack.length === 0;\n}\n", "    // check that there are an even number\
    \ of brackets\n    if (brackets.length % 2 != 0) {\n        return false;\n  \
    \  }\n\n    let counter = 0;\n    for (let i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] == \"<\") {\n            counter++;\n        } else {\n\
    \            counter--;\n        }\n        if (counter < 0) {\n            return\
    \ false;\n        }\n    }\n    return counter == 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            count++;\n        } else {\n            count--;\n   \
    \     }\n        if (count < 0) {\n            return false;\n        }\n    }\n\
    \    return count === 0;\n}\n", "    if (brackets.length % 2 !== 0) {\n      \
    \  return false;\n    }\n\n    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '<') {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count === 0;\n}\n", "  let open_count\
    \ = 0;\n  for (let bracket of brackets) {\n    if (bracket === \"<\") {\n    \
    \  open_count += 1;\n    } else if (bracket === \">\") {\n      open_count -=\
    \ 1;\n    }\n    if (open_count < 0) {\n      return false;\n    }\n  }\n  return\
    \ open_count === 0;\n}\n", "    return true;\n}\n", "    let count = 0;\n    for\
    \ (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\")\
    \ {\n            count++;\n        } else {\n            count--;\n        }\n\
    \        if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    var stack: string[] = [];\n    for (var i: number =\
    \ 0; i < brackets.length; i++) {\n        var c: string = brackets[i];\n     \
    \   if (c == \"<\") {\n            stack.push(c);\n        } else if (c == \"\
    >\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    // 1. iterate\
    \ through brackets\n    // 2. if we find \"<\", push onto stack\n    // 3. if\
    \ we find \">\", pop off stack\n    // 4. keep track of how many brackets we've\
    \ seen\n    // 5. if pop stack, and get null, return false\n    // 6. if nothing\
    \ on stack and no brackets left, return true\n    // 7. if nothing on stack and\
    \ brackets left, return false\n    // 8. if something on stack and no brackets\
    \ left, return false\n    // 9. if something on stack and brackets left, return\
    \ false\n    let bracket_stack: string[] = [];\n    for (let i: number = 0; i\
    \ < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n          \
    \  bracket_stack.push(\"<\");\n        } else if (brackets[i] === \">\") {\n \
    \           bracket_stack.pop();\n        }\n    }\n    if (bracket_stack.length\
    \ === 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\ntest(correct_bracketing, [\"<\"], false);\ntest(correct_bracketing, [\"<>\"\
    , true]);\ntest(correct_bracketing, [\"<<><>>\", true]);\ntest(correct_bracketing,\
    \ [\"><<>\", false]);\ntest(correct_bracketing, [\"\", true]);\ntest(correct_bracketing,\
    \ [\"<><><>\", true]);\ntest(correct_bracketing, [\">><<\", false]);\ntest(correct_bracketing,\
    \ [\"<>>\", false]);\ntest(correct_bracketing, [\"<<>\", false]);\ntest(correct_bracketing,\
    \ [\"<><><<>>\", true]);\ntest(correct_bracketing, [\">><><<><>><><\", true]);\n\
    test(correct_bracketing, [\"<<<><>\", false]);\ntest(correct_bracketing, [\"<>\"\
    , true]);\ntest(correct_bracketing, [\"<<<><>\", false]);\ntest(correct_bracketing,\
    \ [\"<><><<>>\", true]);\ntest(correct_bracketing, [\"<>><><><<>\", false]);\n\
    test(correct", "    return brackets.length === 0;\n}\n", "    if(brackets[0] ===\
    \ \">\") return false;\n    if(brackets[brackets.length - 1] === \"<\") return\
    \ false;\n    let arr = brackets.split(\"\");\n    let left: number = 0;\n   \
    \ let right: number = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === \"<\") left++;\n        if(arr[i] === \">\") right++;\n        if(left <\
    \ right) return false;\n    }\n    return true;\n}\n", "    if (brackets.length\
    \ % 2 === 1) {\n        return false;\n    }\n    for (let i = 0; i < brackets.length\
    \ / 2; i++) {\n        if (brackets[i] !== \"<\" || brackets[brackets.length -\
    \ 1 - i] !== \">\") {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "    let count : number = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return (count == 0);\n}\n", "    let\
    \ open = 0;\n    for (let char of brackets) {\n        if (char === \"<\") {\n\
    \            open += 1;\n        } else if (char === \">\") {\n            open\
    \ -= 1;\n        }\n        if (open < 0) {\n            return false;\n     \
    \   }\n    }\n    return open === 0;\n}\n", "    let open: number = 0;\n    for\
    \ (let i: number = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            open++;\n        } else {\n            open--;\n     \
    \   }\n        if (open < 0) {\n            return false;\n        }\n    }\n\
    \    return open === 0;\n}\n", "  let open = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      open++;\n    } else {\n    \
    \  open--;\n    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return\
    \ open === 0;\n}\n\ndescribe(\"bracket checker\", () => {\n  it(\"should return\
    \ true if every opening bracket has a corresponding closing bracket\", () => {\n\
    \    expect(correct_bracketing(\"<>\")).toBe(true);\n    expect(correct_bracketing(\"\
    <<><>>\")).toBe(true);\n  });\n  it(\"should return false if there is not a corresponding\
    \ closing bracket\", () => {\n    expect(correct_bracketing(\"<\")).toBe(false);\n\
    \    expect(correct_bracketing(\"><<>\")).toBe(false);\n  });\n});"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
