name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are two distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    if (l.length == 0) {\n        return false;\n    }\n    let s =\
    \ new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (s.has(l[i]))\
    \ {\n            return true;\n        }\n        s.add(-l[i]);\n    }\n    return\
    \ false;\n}", "    const nums: number[] = [];\n    let i = 0;\n    let j = 0;\n\
    \    let pos = 0;\n    while (i < l.length) {\n        j = i + 1;\n        while\
    \ (j < l.length) {\n            if (l[i] + l[j] === 0) {\n                return\
    \ true;\n            }\n            j = j + 1;\n        }\n        i = i + 1;\n\
    \    }\n    return false;\n}\n", "  // TODO\n  if (l.length <= 1) {\n    return\
    \ false;\n  }\n  else {\n    var yes: boolean = false;\n    for (var i = 0; i\
    \ < l.length; i++) {\n      for (var j = 0; j < l.length; j++) {\n        if (l[i]\
    \ + l[j] == 0 && l[i] != l[j]) {\n          yes = true;\n        }\n      }\n\
    \    }\n    return yes;\n  }\n}\n", "  for (let i = 0; i < l.length; i++) {\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}", "    if (l.length\
    \ < 2) {\n        return false;\n    }\n    else {\n        for (let i = 0; i\
    \ < l.length; i++) {\n            for (let j = 0; j < l.length; j++) {\n     \
    \           if (i !== j && l[i] + l[j] === 0) {\n                    return true;\n\
    \                }\n            }\n        }\n        return false;\n    }\n}\n",
  "  //your code here\n  return false;\n}\n\nexport { pairs_sum_to_zero };", "  //\
    \ FILL IN HERE\n  return false;\n}\n", "    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}", "    // check if array has at least 2 elements\n    if\
    \ (l.length < 2) {\n        return false;\n    }\n    // keep track of numbers\
    \ that have been seen\n    const seen: number[] = [];\n    // iterate through\
    \ each element\n    for (const elem of l) {\n        // check if the element's\
    \ negative has been seen\n        if (seen.includes(-elem)) {\n            return\
    \ true;\n        }\n        // add current element to list of elements that have\
    \ been seen\n        seen.push(elem);\n    }\n    // return false if we don't\
    \ find any pair that sums to zero\n    return false;\n}\n", "    return false;\n\
    }\n\n", "  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n", "    let seen: { [k: number]: number } = {};\n  \
    \  for (let i = 0; i < l.length; i++) {\n        if (seen[-l[i]]) {\n        \
    \    return true;\n        }\n        seen[l[i]] = 1;\n    }\n    return false;\n\
    }\n", "  // Iterate through list until we reach halfway point\n  // check if the\
    \ opposite of each element is in the list\n  // if it is, return true\n  // if\
    \ we have iterated through the list and not returned true, return false\n  const\
    \ length = l.length;\n  const halfway = Math.ceil(length / 2);\n  for (let i =\
    \ 0; i < halfway; i++) {\n    const value = -l[i];\n    for (let x = i + 1; x\
    \ < length; x++) {\n      if (l[x] === value) {\n        return true;\n      }\n\
    \    }\n  }\n  return false;\n}\n", "    let zero_dict: Dictionary<number> = {};\n\
    \    let l_length: number = l.length;\n    let result: boolean = false;\n    if\
    \ (l_length === 1) {\n        return result;\n    }\n    for (let i: number =\
    \ 0; i < l_length; i++) {\n        if (l[i] !== 0) {\n            zero_dict[l[i]]\
    \ = l[i];\n        }\n    }\n    for (let j: number = 0; j < l_length; j++) {\n\
    \        if (l[j] === 0) {\n            if (zero_dict[0] === 0) {\n          \
    \      result = true;\n            }\n        } else {\n            if (zero_dict[-l[j]])\
    \ {\n                result = true;\n            }\n        }\n    }\n    return\
    \ result;\n}\n\n", "    const sum = 0;\n    for (let i = 0; i < l.length; i++)\
    \ {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] +\
    \ l[j] === sum) {\n                return true;\n            }\n        }\n  \
    \  }\n    return false;\n}\n", "    let i = 0;\n    let j = 1;\n    while (i <\
    \ l.length) {\n        while (j < l.length) {\n            if (l[i] + l[j] ===\
    \ 0) {\n                return true;\n            }\n            j += 1;\n   \
    \     }\n        i += 1;\n        j = i + 1;\n    }\n    return false;\n}\n",
  "  // loop over each element of the array\n  for (let i = 0; i < l.length; i++)\
    \ {\n    // loop over each other element of the array\n    for (let j = 0; j <\
    \ l.length; j++) {\n      // if i and j are distinct indices, and l[i] + l[j]\
    \ = 0, return true\n      if (i !== j && l[i] + l[j] === 0) {\n        return\
    \ true;\n      }\n    }\n  }\n  // no two distinct elements sum to zero, return\
    \ false\n  return false;\n}\n", "  if (l.length < 2) {\n    return false;\n  }\n\
    \n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length;\
    \ j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n\
    \  }\n\n  return false;\n}\n", "  let pairs = new Set<number>();\n  for (let i\
    \ = 0; i < l.length; i++) {\n    pairs.add(l[i]);\n  }\n  return l.some(i => pairs.has(-i));\n\
    }\n", "  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
