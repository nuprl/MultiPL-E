name: HumanEval_8_sum_product
language: ts
prompt: "//For a given array of integers, return an array consisting of a sum and\
  \ a product of all the integers in an array.\n// Empty sum should be equal to 0\
  \ and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n//\
  \ >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers: number[]):\
  \ [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
  \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
  \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
  \ 10]);\n}\n\ntest();"
completions: ["    let sum = 0;\n    let product = 1;\n    for (let number of numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return [sum,\
    \ product];\n}\n", "    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\n", "    let sum = 0;\n    let product = 1;\n    numbers.forEach(number\
    \ => {\n        sum += number;\n        product *= number;\n    });\n    return\
    \ [sum, product];\n}\n", "  return [numbers.reduce((sum, current) => sum + current,\
    \ 0), numbers.reduce((product, current) => product * current, 1)];\n}\n", "  return\
    \ [\n    numbers.reduce((result, num) => result + num, 0),\n    numbers.reduce((result,\
    \ num) => result * num, 1),\n  ];\n}\n", "    return [numbers.reduce((a, b) =>\
    \ a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n}\n", "    let sum = 0;\n \
    \   let product = 1;\n    for (let number of numbers) {\n        sum += number;\n\
    \        product *= number;\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "  let sum: number = 0;\n  let product: number = 1;\n  numbers.forEach(element\
    \ => {\n    sum += element;\n    product *= element;\n  });\n  return [sum, product];\n\
    }\n", "    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "  let sum: number = 0;\n  let product: number\
    \ = 1;\n  numbers.forEach(function (n) {\n    sum += n;\n    product *= n;\n \
    \ });\n  return [sum, product];\n}\n", "    let res: [number, number] = [0, 1];\n\
    \    numbers.forEach(element => {\n        res[0] += element;\n        res[1]\
    \ *= element;\n    });\n    return res;\n}\n", "    let [sum, product] = [0, 1];\n\
    \    numbers.forEach(num => {\n        sum += num;\n        product *= num;\n\
    \    });\n    return [sum, product];\n}\n", "  return [numbers.reduce((a, b) =>\
    \ a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n}\n", "    let s = 0, p = 1;\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        s += numbers[i];\n  \
    \      p *= numbers[i];\n    }\n    return [s, p];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));\n", "    let sum: number = 0;\n    let\
    \ product: number = 1;\n    for (let index = 0; index < numbers.length; index++)\
    \ {\n        sum += numbers[index];\n        product *= numbers[index];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n \
    \       product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "  return\
    \ [numbers.reduce((x, y) => x + y, 0), numbers.reduce((x, y) => x * y, 1)];\n\
    }\n", "  let sum = 0;\n  let product = 1;\n  numbers.forEach(n => {\n    sum +=\
    \ n;\n    product *= n;\n  });\n  return [sum, product];\n}\n", "    let sum =\
    \ 0;\n    let product = 1;\n    for (let number of numbers) {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    return [sum, product];\n}\n\n\
    export { sum_product };", "    let sum = 0;\n    let product = 1;\n    for (let\
    \ number of numbers) {\n        sum += number;\n        product *= number;\n \
    \   }\n    return [sum, product];\n}\n", "  let sum = 0;\n  let product = 1;\n\
    \  for (let number of numbers) {\n    sum += number;\n    product *= number;\n\
    \  }\n  return [sum, product];\n}\n", "  let result: [number, number] = [0, 1];\n\
    \  numbers.forEach(number => {\n    result[0] += number;\n    result[1] *= number;\n\
    \  });\n  return result;\n}\n", "    return [numbers.reduce((t, n) => t + n, 0),\
    \ numbers.reduce((t, n) => t * n, 1)];\n}\n", "    const sum = numbers.reduce((accumulator,\
    \ currentValue) => accumulator + currentValue, 0);\n    const product = numbers.reduce((accumulator,\
    \ currentValue) => accumulator * currentValue, 1);\n    return [sum, product];\n\
    }\n", "    let [sum, product] = [0, 1];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "  let sum = 0,\n    product = 1;\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n\
    \  }\n  return [sum, product];\n}\n", "  let sum = 0;\n  let product = 1;\n  for\
    \ (let n of numbers) {\n    sum += n;\n    product *= n;\n  }\n  return [sum,\
    \ product];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let x of\
    \ numbers) {\n        sum += x;\n        product *= x;\n    }\n    return [sum,\
    \ product];\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));\n", "  let result: [number,\
    \ number] = [0, 1];\n  for (let number of numbers) {\n    result[0] += number;\n\
    \    result[1] *= number;\n  }\n  return result;\n}\n", "    let sum = 0;\n  \
    \  let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n", "  let sum = 0;\n  let product = 1;\n  for (let num of numbers) {\n    sum\
    \ += num;\n    product *= num;\n  }\n  return [sum, product];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "  if (numbers.length > 0) {\n    return [numbers.reduce((a,\
    \ b) => a + b), numbers.reduce((a, b) => a * b)];\n  } else {\n    return [0,\
    \ 1];\n  }\n}\n", "    const [sum, product] = [numbers.reduce((x, y) => x + y,\
    \ 0), numbers.reduce((x, y) => x * y, 1)];\n    return [sum, product];\n}\n",
  "    var sum = 0;\n    var product = 1;\n    for (var _i = 0, numbers_1 = numbers;\
    \ _i < numbers_1.length; _i++) {\n        var number = numbers_1[_i];\n      \
    \  sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2, 3, 4]));", " \
    \   return [numbers.reduce((p, c) => p + c, 0), numbers.reduce((p, c) => p * c,\
    \ 1)];\n}\nconsole.log(sum_product([1, 2, 3, 4]))", "    const add = (a: number,\
    \ b: number) => a + b;\n    const mult = (a: number, b: number) => a * b;\n  \
    \  return [numbers.reduce(add, 0), numbers.reduce(mult, 1)];\n}", "    let sum:\
    \ number = 0;\n    let product: number = 1;\n    numbers.forEach(number => {\n\
    \        sum += number;\n        product *= number;\n    });\n    return [sum,\
    \ product];\n}\n", "    return [\n        numbers.reduce((a, b) => a + b, 0),\n\
    \        numbers.reduce((a, b) => a * b, 1)\n    ];\n}\n\ndescribe(\"sum_product\"\
    , () => {\n    it(\"should return [0, 1] for []\", () => {\n        expect(sum_product([])).toEqual([0,\
    \ 1]);\n    });\n    it(\"should return [10, 24] for [1, 2, 3, 4]\", () => {\n\
    \        expect(sum_product([1, 2, 3, 4])).toEqual([10, 24]);\n    });\n});\n",
  "    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    let sum = 0;\n    let product = 1;\n    for (let number\
    \ of numbers) {\n        sum += number;\n        product *= number;\n    }\n \
    \   return [sum, product];\n}\n", "    let sum: number = 0;\n    let product:\
    \ number = 1;\n    for (let i: number = 0; i < numbers.length; i++) {\n      \
    \  sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\n\ntest(\"Sum and product of all the integers in an array\", ()\
    \ => {\n    expect(sum_product([])).toEqual([0, 1]);\n    expect(sum_product([1,\
    \ 2, 3, 4])).toEqual([10, 24]);\n});\n", "    return [numbers.reduce((sum, x)\
    \ => sum + x, 0), numbers.reduce((sum, x) => sum * x, 1)];\n}\n", "    let sum:\
    \ number = 0,\n        product: number = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum: number = 0;\n    let prod: number\
    \ = 1;\n    for (let number of numbers) {\n        sum += number;\n        prod\
    \ *= number;\n    }\n    return [sum, prod];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));\n", "    let sum: number = 0;\n    let\
    \ product: number = 1;\n    numbers.forEach(function (number) {\n        sum +=\
    \ number;\n        product *= number;\n    });\n    return [sum, product];\n}\n",
  "    const sum = numbers.reduce((a, b) => a + b, 0);\n    const product = numbers.reduce((a,\
    \ b) => a * b, 1);\n    return [sum, product];\n}\n", "    var sum: number = 0;\n\
    \    var product: number = 1;\n    for (var i = 0; i < numbers.length; i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    let sum = 0;\n    let product = 1;\n    for (let number\
    \ of numbers) {\n        sum += number;\n        product *= number;\n    }\n \
    \   return [sum, product];\n}\n", "  let sum = 0;\n  let product = 1;\n  for (let\
    \ i of numbers) {\n    sum += i;\n    product *= i;\n  }\n  return [sum, product];\n\
    }\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2, 3, 4]));\n",
  "    let sum = 0, product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n    numbers.forEach(n\
    \ => {\n        sum += n;\n        product *= n;\n    });\n    return [sum, product];\n\
    }\n\nconsole.log(sum_product([1, 2, 3, 4]));\n", "  let sum = 0;\n  let product\
    \ = 1;\n  numbers.forEach(num => {\n    sum += num;\n    product *= num;\n  });\n\
    \  return [sum, product];\n}\n", "  if (numbers.length === 0) {\n    return [0,\
    \ 1];\n  } else {\n    let sum = 0;\n    let product = 1;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n      sum += numbers[i];\n      product *= numbers[i];\n\
    \    }\n    return [sum, product];\n  }\n}\n", "    let sum = 0;\n    let product\
    \ = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));\n", "    const sum = numbers.reduce((total,\
    \ current) => total + current, 0);\n    const product = numbers.reduce((total,\
    \ current) => total * current, 1);\n    return [sum, product];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));", "  return [\n    numbers.reduce((sum,\
    \ val) => sum + val, 0),\n    numbers.reduce((product, val) => product * val,\
    \ 1)\n  ];\n}\n", "  return [\n    numbers.reduce((acc, current) => acc + current,\
    \ 0),\n    numbers.reduce((acc, current) => acc * current, 1),\n  ];\n}\n", " \
    \   let sum: number = 0;\n    let product: number = 1;\n    numbers.forEach(function\
    \ (n: number) {\n        sum += n;\n        product *= n;\n    });\n    return\
    \ [sum, product];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "  return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return [sum, product];\n}\n", "    let sum: number\
    \ = 0;\n    let product: number = 1;\n    for (let number of numbers) {\n    \
    \    sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\n", "    var sum = 0;\n    var product = 1;\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n \
    \       product *= numbers[i];\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));\n\n", "    return [numbers.reduce((a,\
    \ b) => a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n}\n", "    let sum =\
    \ 0;\n    let product = 1;\n    for (let n of numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return [sum, product];\n}\n", "    let sum\
    \ = 0, product = 1;\n    for (let number of numbers) {\n        sum += number;\n\
    \        product *= number;\n    }\n    return [sum, product];\n}\n", "  let sum:\
    \ number = 0;\n  let product: number = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\n", "  return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));", "    let sum: number = 0;\n    let product: number = 1;\n    for\
    \ (let number of numbers) {\n        sum += number;\n        product *= number;\n\
    \    }\n    return [sum, product];\n}\n", "  if (numbers.length === 0) {\n   \
    \ return [0, 1];\n  }\n  const sum = numbers.reduce((a, b) => a + b);\n  const\
    \ product = numbers.reduce((a, b) => a * b);\n  return [sum, product];\n}\n",
  "    let sum = 0;\n    let product = 1;\n    for (let n of numbers) {\n        sum\
    \ += n;\n        product *= n;\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    let sum = 0;\n    let product = 1;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return [sum, product];\n}\n", "    let sum: number = 0;\n    let product:\
    \ number = 1;\n    for (let num of numbers) {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([1, 2,\
    \ 3, 4]));\n", "  let sum: number = 0;\n  let product: number = 1;\n  for (let\
    \ i: number = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum, product];\n}\n", "  let sum = 0;\n  let\
    \ product = 1;\n  numbers.forEach(function (value) {\n    sum += value;\n    product\
    \ *= value;\n  });\n  return [sum, product];\n}\n", "  let sum: number = 0;\n\
    \  let product: number = 1;\n  numbers.forEach(function (number) {\n    sum +=\
    \ number;\n    product *= number;\n  });\n  return [sum, product];\n}\n", "  \
    \  let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum: number = 0;\n    let product:\
    \ number = 1;\n    for (let number of numbers) {\n        sum += number;\n   \
    \     product *= number;\n    }\n    return [sum, product];\n}\n", "  let sum\
    \ = 0;\n  let product = 1;\n  for (let n of numbers) {\n    sum += n;\n    product\
    \ *= n;\n  }\n  return [sum, product];\n}\nconsole.log(sum_product([1, 2, 3, 4]));\n",
  "    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n \
    \       product *= numbers[i];\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\nconsole.log(sum_product([]));\n", "    let sum = 0;\n    let product\
    \ = 1;\n    numbers.forEach(function (number) {\n        sum += number;\n    \
    \    product *= number;\n    });\n    return [sum, product];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));", "    let sum = 0,\n        product = 1;\n    for (let i of numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return [sum, product];\n\
    }\n", "  const result: [number, number] = [0, 1];\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    result[0] += numbers[i];\n    result[1] *= numbers[i];\n  }\n  return\
    \ result;\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));\nconsole.log(sum_product([]));\n",
  "  let sum: number = 0;\n  let product: number = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\n", "    let sum: number = 0;\n    let product: number = 1;\n \
    \   numbers.forEach(element => {\n        sum += element;\n        product *=\
    \ element;\n    });\n    return [sum, product];\n}\nlet sum_product_result: [number,\
    \ number] = sum_product([1, 2, 3, 4]);\nconsole.log(sum_product_result);\n", " \
    \   return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a, b) => a * b,\
    \ 1)];\n}", "    let sum = 0;\n    let product = 1;\n    for (let number of numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return [sum,\
    \ product];\n}\n", "    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return [sum, product];\n}\n", "  const sum = numbers.reduce((accumulator,\
    \ currentValue) => accumulator + currentValue, 0);\n  const product = numbers.reduce((accumulator,\
    \ currentValue) => accumulator * currentValue, 1);\n  return [sum, product];\n\
    }\nconsole.log(\"Sum and product of numbers in array\", sum_product([1, 2, 3,\
    \ 4]));\n\n", "    var sum = 0;\n    var product = 1;\n    for (var n in numbers)\
    \ {\n        sum += n;\n        product *= n;\n    }\n    return [sum, product];\n\
    }", "    let sum = 0,\n        product = 1;\n    numbers.forEach(element => {\n\
    \        sum += element;\n        product *= element;\n    });\n    return [sum,\
    \ product];\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    let sum = 0;\n\
    \    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    let sum = 0;\n\
    \    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return [sum, product];\n}\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n\n", "    return [numbers.reduce((x, y) => x + y, 0), numbers.reduce((x,\
    \ y) => x * y, 1)];\n}\n", "    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\n", "    let sum = 0;\n    let product = 1;\n    numbers.forEach(item\
    \ => {\n        sum += item;\n        product *= item;\n    });\n    return [sum,\
    \ product];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2,\
    \ 3, 4]));\n\n", "    let sum: number = 0;\n    let product: number = 1;\n   \
    \ numbers.forEach(element => {\n        sum += element;\n        product *= element;\n\
    \    });\n    return [sum, product];\n}\n", "    return [numbers.reduce((p, c)\
    \ => p + c, 0), numbers.reduce((p, c) => p * c, 1)];\n}\n", "    let sum = 0,\
    \ product = 1;\n    for (let num of numbers) {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return [sum, product];\n}\n", "    let sum = 0;\n    let\
    \ product = 1;\n    for (let index = 0; index < numbers.length; index++) {\n \
    \       sum += numbers[index];\n        product *= numbers[index];\n    }\n  \
    \  return [sum, product];\n}\n", "  return [numbers.reduce((a, c) => a + c, 0),\
    \ numbers.reduce((a, c) => a * c, 1)];\n}\n", "  let sum = 0;\n  let product =\
    \ 1;\n  numbers.forEach(function (number) {\n    sum += number;\n    product *=\
    \ number;\n  });\n  return [sum, product];\n}\n", "    return [numbers.reduce((x,\
    \ y) => x + y, 0), numbers.reduce((x, y) => x * y, 1)];\n}\n", "    let sum =\
    \ 0;\n    let prod = 1;\n    for (let number of numbers) {\n        sum += number;\n\
    \        prod *= number;\n    }\n    return [sum, prod];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    return [numbers.reduce((sum, current) => sum + current,\
    \ 0), numbers.reduce((product, current) => product * current, 1)];\n}\n\nsum_product([1,\
    \ 2, 3, 4]);\n", "  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  let\
    \ sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n", "    return [numbers.reduce((acc, value) => acc + value, 0), numbers.reduce((acc,\
    \ value) => acc * value, 1)];\n}\n", "    let sum: number = 0;\n    let product:\
    \ number = 1;\n    for (let num of numbers) {\n        sum += num;\n        product\
    \ *= num;\n    }\n    return [sum, product];\n}\n", "  return [numbers.reduce((a,\
    \ b) => a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n}\n", "    let sum: number\
    \ = 0, product: number = 1;\n    for (let index = 0; index < numbers.length; index++)\
    \ {\n        sum += numbers[index];\n        product *= numbers[index];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n \
    \   for (let number of numbers) {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([1, 2,\
    \ 3, 4]));\n", "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2,\
    \ 3, 4]));\n", "  let result = [];\n  let sum = 0;\n  let product = 1;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  result[0] = sum;\n  result[1] = product;\n  return result;\n\
    }\n", "    let sum: number = 0;\n    let product: number = 1;\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return [sum, product];\n}\n", "    let sum: number\
    \ = 0;\n    let product: number = 1;\n    for (let num of numbers) {\n       \
    \ sum += num;\n        product *= num;\n    }\n    return [sum, product];\n}\n",
  "    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a, b) => a * b,\
    \ 1)];\n}\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2, 3,\
    \ 4]));\n", "  let sum: number = 0;\n  let product: number = 1;\n  for (let i:\
    \ number = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum, product];\n}\n", "    let sum = 0;\n   \
    \ let product = 1;\n    numbers.forEach(num => {\n        sum += num;\n      \
    \  product *= num;\n    });\n    return [sum, product];\n}\n", "    let sum: number\
    \ = 0;\n    let product: number = 1;\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n \
    \       product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "   \
    \ return [numbers.reduce((acc, value) => acc + value, 0), numbers.reduce((acc,\
    \ value) => acc * value, 1)];\n}\n", "    let [sum, product] = [0, 1];\n    numbers.forEach(num\
    \ => {\n        sum += num;\n        product *= num;\n    });\n    return [sum,\
    \ product];\n}\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    return [numbers.reduce((a,\
    \ b) => a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n}\n", "  let sum = 0;\n\
    \  let product = 1;\n  numbers.forEach(number => {\n    sum += number;\n    product\
    \ *= number;\n  });\n  return [sum, product];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    let [sum, product] = [0, 1];\n    for (let number of numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return [sum,\
    \ product];\n}", "  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  let\
    \ sum = 0;\n  let product = 1;\n  for (let number of numbers) {\n    sum += number;\n\
    \    product *= number;\n  }\n  return [sum, product];\n}\n", "    let sum: number\
    \ = 0,\n        product: number = 1;\n    for (let number of numbers) {\n    \
    \    sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    const sum = numbers.reduce((a,\
    \ b) => a + b, 0);\n    const product = numbers.reduce((a, b) => a * b, 1);\n\
    \    return [sum, product];\n}\n\nassert(sum_product([1, 2, 3, 4]).toString()\
    \ === [10, 24].toString());\nassert(sum_product([]).toString() === [0, 1].toString());\n",
  "    let sum = 0;\n    let product = 1;\n    numbers.forEach(element => {\n    \
    \    sum += element;\n        product *= element;\n    });\n    return [sum, product];\n\
    }\n\ntest(\"task-2\", () => {\n    let result = sum_product([1, 2, 3, 4]);\n \
    \   expect(result).toEqual([10, 24]);\n});\n", "  let sum: number = 0;\n  let\
    \ product: number = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconsole.log(sum_product([1, 2, 3, 4]));\nconsole.log(sum_product([]));\n",
  "    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));\n\n",
  "    if (numbers.length === 0) {\n        return [0, 1];\n    }\n    let sum = 0;\n\
    \    let product = 1;\n    for (let n of numbers) {\n        sum += n;\n     \
    \   product *= n;\n    }\n    return [sum, product];\n}\n", "  let sum = 0;\n\
    \  let product = 1;\n  for (let number of numbers) {\n    sum += number;\n   \
    \ product *= number;\n  }\n  return [sum, product];\n}\n", "  let sum = 0;\n \
    \ let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    var sum: number = 0;\n    var product: number = 1;\n  \
    \  for (var i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n  \
    \      product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "    let\
    \ sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let\
    \ n of numbers) {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ [sum, product];\n}\n", "  if (numbers.length === 0) {\n    return [0, 1];\n\
    \  } else {\n    let sum: number = 0;\n    let product: number = 1;\n    for (let\
    \ x of numbers) {\n      sum += x;\n      product *= x;\n    }\n    return [sum,\
    \ product];\n  }\n}\n", "    return [numbers.reduce((acc, x) => acc + x, 0), numbers.reduce((acc,\
    \ x) => acc * x, 1)];\n}\n", "    let sum = 0;\n    let product = 1;\n    for\
    \ (let x of numbers) {\n        sum += x;\n        product *= x;\n    }\n    return\
    \ [sum, product];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));", "    var sum = 0;\n    var product = 1;\n    for (var i = 0; i\
    \ < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return [sum, product];\n}\n", "    return [numbers.reduce((sum, x)\
    \ => sum + x, 0), numbers.reduce((sum, x) => sum * x, 1)];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));\n", "    let sum = 0;\n    let product\
    \ = 1;\n    numbers.forEach(function (n){\n        sum += n;\n        product\
    \ *= n;\n    });\n    return [sum, product];\n}\nlet res = sum_product([1, 2,\
    \ 3, 4]);\nconsole.log(res);\n", "    return [numbers.reduce((a, b) => a + b,\
    \ 0), numbers.reduce((a, b) => a * b, 1)];\n}\nconsole.log(sum_product([1, 2,\
    \ 3, 4]));", "  return [\n    numbers.reduce((accumulator, currentValue) => accumulator\
    \ + currentValue, 0),\n    numbers.reduce((accumulator, currentValue) => accumulator\
    \ * currentValue, 1)\n  ];\n}\n", "    return [numbers.reduce((a, b) => a + b,\
    \ 0), numbers.reduce((a, b) => a * b, 1)];\n}", "    let total = 0;\n    let product\
    \ = 1;\n    numbers.forEach(number => {\n        total += number;\n        product\
    \ *= number;\n    });\n    return [total, product];\n}\n", "  let sum = 0;\n \
    \ let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "    if (numbers.length\
    \ == 0) {\n        return [0, 1];\n    }\n    else {\n        let sum: number\
    \ = 0;\n        let product: number = 1;\n        for (let i = 0; i < numbers.length;\
    \ i++) {\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return [sum, product];\n    }\n}\n", "    let sum = 0;\n \
    \   let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n       \
    \ sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    let sum = 0;\n\
    \    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nlet sum = sum_product([1, 2, 3, 4])[0];\nlet product = sum_product([1,\
    \ 2, 3, 4])[1];\nconsole.log(sum, product);\n", "    let sum: number = 0;\n  \
    \  let product: number = 1;\n    for (let number of numbers) {\n        sum +=\
    \ number;\n        product *= number;\n    }\n    return [sum, product];\n}\n\n\
    testSumProduct();\n", "    let sum: number = 0;\n    let product: number = 1;\n\
    \    for (let number of numbers) {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return [sum, product];\n}\n", "    let sum = 0;\n    let\
    \ product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }", "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\n", "    return [numbers.reduce((acc, curr) => acc + curr, 0),\
    \ numbers.reduce((acc, curr) => acc * curr, 1)];\n}\n", "  let sum = 0;\n  let\
    \ product = 1;\n  for (let number of numbers) {\n    sum += number;\n    product\
    \ *= number;\n  }\n  return [sum, product];\n}\n", "    return [\n        numbers.reduce((a,\
    \ b) => a + b, 0),\n        numbers.reduce((a, b) => a * b, 1)\n    ];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));", "  if (!numbers.length) {\n    return [0, 1];\n  }\n\n  return\
    \ [\n    numbers.reduce((sum, n) => sum + n),\n    numbers.reduce((product, n)\
    \ => product * n),\n  ];\n}\n", "  const sum = numbers.reduce((a, b) => a + b,\
    \ 0);\n  const product = numbers.reduce((a, b) => a * b, 1);\n  return [sum, product];\n\
    }\n", "  let sum = 0;\n  let product = 1;\n  for (let num of numbers) {\n    sum\
    \ += num;\n    product *= num;\n  }\n  return [sum, product];\n}\n", "    let\
    \ sum: number = 0;\n    let product: number = 1;\n    numbers.forEach(num => {\n\
    \        sum += num;\n        product *= num;\n    });\n    return [sum, product];\n\
    }\n", "    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));\n\n",
  "  return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n\
    }\n", "    let sum = 0;\n    let product = 1;\n    for (let i: number = 0; i <\
    \ numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return [sum, product];\n}\n\ndescribe(\"Sum product\", () => {\n \
    \   it(\"Should return the sum and product of all numbers\", () => {\n       \
    \ assert.deepEqual(sum_product([1, 2, 3, 4]), [10, 24]);\n    });\n});\n", " \
    \   let sum = 0;\n    let product = 1;\n    numbers.forEach(function (n) {\n \
    \       sum += n;\n        product *= n;\n    });\n    return [sum, product];\n\
    }\n", "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let number\
    \ of numbers) {\n        sum += number;\n        product *= number;\n    }\n \
    \   return [sum, product];\n}\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n\n", "  let sum = 0;\n  let product = 1;\n  for (let i of numbers)\
    \ {\n    sum += i;\n    product *= i;\n  }\n  return [sum, product];\n}\n", " \
    \   let sum = 0;\n    let product = 1;\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n", "  if (numbers.length === 0) {\n    return\
    \ [0, 1];\n  }\n  let sum = 0;\n  let product = 1;\n  for (let num of numbers)\
    \ {\n    sum += num;\n    product *= num;\n  }\n  return [sum, product];\n}\n",
  "    const sum = numbers.reduce((total, num) => total + num, 0);\n    const product\
    \ = numbers.reduce((total, num) => total * num, 1);\n    return [sum, product];\n\
    }\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2, 3, 4]));\n",
  "  let sum: number = 0;\n  let product: number = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    let result\
    \ = [0, 1];\n    for (let i = 0; i < numbers.length; i++) {\n        result[0]\
    \ += numbers[i];\n        result[1] *= numbers[i];\n    }\n    return result;\n\
    }\nconsole.log(sum_product([1, 2, 3, 4]));\n\n", "    let sum = 0;\n    let prod\
    \ = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        prod *= numbers[i];\n    }\n    return [sum, prod];\n}\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    var sum = 0, product = 1;\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\n\nconsole.log(sum_product([1, 2, 3, 4]));", " \
    \   let sum = 0;\n    let product = 1;\n    for (let i of numbers) {\n       \
    \ sum += i;\n        product *= i;\n    }\n    return [sum, product];\n}\nconsole.log(sum_product([]));\n\
    console.log(sum_product([1, 2, 3, 4]));\n\n", "    let sum: number = 0;\n    let\
    \ product: number = 1;\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\n", "    let sum: number = 0;\n    let product: number = 1;\n \
    \   for (let i of numbers) {\n        sum += i;\n        product *= i;\n    }\n\
    \    return [sum, product];\n}\n", "    return [0, 1];\n}\n", "  return [numbers.reduce((a,\
    \ b) => a + b, 0), numbers.reduce((a, b) => a * b, 1)];\n}\n", "    return [numbers.reduce((sum,\
    \ x) => sum + x, 0), numbers.reduce((sum, x) => sum * x, 1)];\n}\n", "    const\
    \ sum = (a: number, b: number) => a + b;\n    const product = (a: number, b: number)\
    \ => a * b;\n    return [numbers.reduce(sum, 0), numbers.reduce(product, 1)];\n\
    }\n", "    return [numbers.reduce((acc, num) => acc + num, 0), numbers.reduce((acc,\
    \ num) => acc * num, 1)];\n}\n", "    return [\n        numbers.reduce((acc, num)\
    \ => acc + num, 0),\n        numbers.reduce((acc, num) => acc * num, 1)\n    ];\n\
    }\n", "  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum,\
    \ product];\n}\n", "  let sum: number = 0;\n  let product: number = 1;\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product\
    \ *= numbers[i];\n  }\n  return [sum, product];\n}\n", "    let sum = 0;\n   \
    \ let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n", "  if (numbers.length < 1) {\n    return [0, 1];\n  } else {\n    let sum:\
    \ number = 0;\n    let product: number = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n  }\n}\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1,\
    \ 2, 3, 4]));\n", "    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a,\
    \ b) => a * b, 1)];\n}\n", "    let sum = 0;\n    let product = 1;\n    numbers.forEach(function\
    \ (num) {\n        sum += num;\n        product *= num;\n    });\n    return [sum,\
    \ product];\n}\n\nconsole.log(sum_product([]));\nconsole.log(sum_product([1, 2,\
    \ 3, 4]));\n", "    let sum = 0;\n    let product = 1;\n    numbers.forEach(function\
    \ (value) {\n        sum += value;\n        product *= value;\n    });\n    return\
    \ [sum, product];\n}\n", "    let sum = 0, product = 1;\n    numbers.forEach(number\
    \ => {\n        sum += number;\n        product *= number;\n    });\n    return\
    \ [sum, product];\n}\n", "    let sum = 0;\n    let product = 1;\n    for (let\
    \ n of numbers) {\n        sum += n;\n        product *= n;\n    }\n    return\
    \ [sum, product];\n}\nconsole.log(sum_product([1, 2, 3, 4]));\n", "    var sum:\
    \ number = 0;\n    var product: number = 1;\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [sum, product];\n}\nconsole.log(sum_product([1, 2, 3, 4]));\n", " \
    \ let sum = 0;\n  let product = 1;\n  numbers.forEach(function (num) {\n    sum\
    \ += num;\n    product *= num;\n  });\n  return [sum, product];\n}\nlet results\
    \ = sum_product([1, 2, 3, 4]);\nconsole.log(results);\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
