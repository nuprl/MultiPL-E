language: ts
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    let sum = 0;\n\
    \    for (let i: number = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2\
    \ !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    \nexport function runTests(): void {\n    const inputs: [number[], number][] =\
    \ [\n        [[5, 8, 7, 1], 12],\n        [[3, 3, 3, 3, 3], 9],\n        [[30,\
    \ 13, 24, 321], 0],\n    ];\n    inputs.forEach(input => {\n        const answer\
    \ = solution(input[0]);\n        console.log(answer === input[1], answer, input[1]);\n\
    \    });\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  return lst.filter((v,\
    \ i) => v % 2 && i % 2 === 0).reduce((p, c) => p + c, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822034
- exit_code: 1
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  return lst.filter((_,\
    \ i) => i % 2 !== 0).reduce((acc, curr) => (curr % 2 !== 0 ? acc + curr : acc),\
    \ 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmprgxj2eaf.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprgxj2eaf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  return lst.filter((v,\
    \ i) => i % 2 == 0 && v % 2 == 1).reduce((a, v) => a + v, 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822034
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    return lst.filter((_,\
    \ idx) => idx % 2 === 0).filter(num => num % 2 !== 0).reduce((a, b) => a + b,\
    \ 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 &&\
    \ lst[i] % 2 == 1) {\n            result += lst[i];\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3,\
    \ 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    return lst.filter((num,\
    \ i) => i % 2 === 0 && num % 2 === 1).reduce((acc, curr) => acc + curr, 0);\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    let sum: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2\
    \ === 1) sum += lst[i];\n    }\n    return sum;\n}\nconsole.log(solution([5, 8,\
    \ 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822034
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  return lst.filter((v,\
    \ i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  return lst.filter((num,\
    \ index) => num % 2 && index % 2 === 0).reduce((acc, num) => acc + num, 0);\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    //return lst.filter((x,\
    \ i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) => a + b, 0);\n    let sum =\
    \ 0;\n    lst.forEach((x, i) => {\n        if (i % 2 === 0 && x % 2 === 1) {\n\
    \            sum += x;\n        }\n    });\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  const result\
    \ = lst.filter((element, index) => {\n    return element % 2 !== 0 && index %\
    \ 2 === 0;\n  });\n  return result.reduce((acc, current) => acc + current, 0);\n\
    }\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    return lst.filter((val,\
    \ idx) => val % 2 !== 0 && idx % 2 === 0).reduce((x, y) => x + y, 0);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822034
- exit_code: 1
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    return lst.filter((num,\
    \ index) => num % 2 !== 0 && index % 2 === 0).reduce((sum, num) => sum + num);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn1ex4zzf.js:10\n    return lst.filter(function (num, index) { return\
    \ num % 2 !== 0 && index % 2 === 0; }).reduce(function (sum, num) { return sum\
    \ + num; });\n                                                               \
    \                           ^\n\nTypeError: Reduce of empty array with no initial\
    \ value\n    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmpn1ex4zzf.js:10:91)\n\
    \    at test (/tmp/tmpn1ex4zzf.js:17:22)\n    at Object.<anonymous> (/tmp/tmpn1ex4zzf.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822034
- exit_code: 1
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  return lst.filter((num,\
    \ index) => index % 2 !== 0 && num % 2 !== 0).reduce((num, acc) => acc + num,\
    \ 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp11563iuv.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp11563iuv.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822034
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    return lst.filter((el,\
    \ i) => el % 2 === 1 && i % 2 === 0).reduce((acc, cur) => acc + cur, 0);\n}\n\n\
    console.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    let lst_even:\
    \ number[] = lst.filter((x, i) => i % 2 === 0);\n    let lst_odd: number[] = lst_even.filter(x\
    \ => x % 2 !== 0);\n    return lst_odd.reduce((x, y) => x + y, 0);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822034
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 ===\
    \ 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Given a non-empty array of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13,\
    \ 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  let oddSum =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
