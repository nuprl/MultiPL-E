language: ts
name: HumanEval_85_add
results:
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => i % 2 === 1).reduce((x,\
    \ y) => x + y);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpi4igc6i0.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi4igc6i0.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\nconsole.log(add([4, 2, 6,\
    \ 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++){\n        if (i % 2 == 1){\n            sum += lst[i];\n        }\n   \
    \ }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpq2lslgt3.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq2lslgt3.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  // Write your code here\n  return lst.filter((v,\
    \ i) => v % 2 === 0 && i % 2 !== 0).reduce((a, v) => a + v);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => i % 2 !== 0 && x\
    \ % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    lst.forEach((item, index)\
    \ => {\n        if (index % 2 !== 0 && item % 2 === 0) {\n            result +=\
    \ item;\n        }\n    });\n    return result;\n}\nconsole.log(add([4, 2, 6,\
    \ 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((e, i) => i % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmp2r84qt9y.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2r84qt9y.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((num, i) => i % 2 === 1\
    \ && num % 2 === 0).reduce((sum, num) => sum + num, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp1tugw0ua.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1tugw0ua.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    //throw \"Not Implemented\";\n    let result:\
    \ number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 ==\
    \ 1 && lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\treturn lst.filter((number, index) => index %\
    \ 2 === 1 && number % 2 === 0).reduce((acc, curr) => acc + curr);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let res = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            res += lst[i];\n\
    \        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let evenNumbers = lst.filter(n => n % 2 ===\
    \ 0)\n    let oddIndexs = lst.filter((_, index) => index % 2 != 0)\n    let x\
    \ = evenNumbers.filter(e => oddIndexs.indexOf(e) != -1)\n    return x.reduce((a,\
    \ b) => a + b, 0)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmps2z4nfd1.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps2z4nfd1.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return undefined;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmpdwad3ov0.js:11:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpdwad3ov0.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp1tugw0ua.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1tugw0ua.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  lst.forEach((e, i) => {\n\
    \    if (i % 2 === 1 && e % 2 === 0) {\n      result += e;\n    }\n  });\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let total = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            total +=\
    \ lst[i];\n        }\n    }\n    return total;\n}\nconsole.log(add([4, 2, 6, 7]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015353
- exit_code: 2
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndescribe(\"add(lst)\", function\
    \ () {\n    it(\"add([4, 2, 6, 7])\", function () {\n        assert.equal(add([4,\
    \ 2, 6, 7]), 2);\n    });\n    it(\"add([-5, 0, 5, 10])\", function () {\n   \
    \     assert.equal(add([-5, 0, 5, 10]), 10);\n    });\n    it(\"add([1, 2, 3,\
    \ 4])\", function () {\n        assert.equal(add([1, 2, 3, 4]), 0);\n    });\n\
    \    it(\"add([2, 3, 4, 5])\", function () {\n        assert.equal(add([2, 3,\
    \ 4, 5]), 2);\n    });\n    it(\"add([1, 3, 5, 7])\", function () {\n        assert.equal(add([1,\
    \ 3, 5, 7]), 0);\n    });\n    it(\"add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\", function\
    \ () {\n        assert.equal(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 12);\n    });\n\
    \    it(\"add([-3, -2, -1, 1, 2, 3])\", function () {\n        assert.equal(add([-3,\
    \ -2, -1, 1, 2, 3]), -2);\n    });\n    it(\"add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])\", function () {\n        assert.equal(add([0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]), 20);\n    });\n    it(\"add([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\", function\
    \ () {\n        assert.equal(add([0, 0, 0, 0,\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp56o9zxs_.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp56o9zxs_.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\treturn lst.filter((num, index) => num % 2 ===\
    \ 0 && index % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015352
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tif (i % 2 !== 0 && lst[i] % 2 === 0) {\n\t\t\tsum += lst[i];\n\t\
    \t}\n\t}\n\treturn sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015352
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((_, i) => i % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmp2q8z1c9t.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2q8z1c9t.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i = i + 2) {\n    if (lst[i] % 2 == 0) {\n      sum = sum + lst[i];\n    }\n\
    \  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmplxn2n0ln.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplxn2n0ln.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => i % 2 == 1).reduce((x,\
    \ y) => x + y, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmp65rbe8ii.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp65rbe8ii.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((_, index) => index % 2\
    \ == 1).reduce((acc, curr) => acc + curr, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpvlgzp76t.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvlgzp76t.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let evens = lst.filter((v, i) => v % 2 ===\
    \ 0 && i % 2 !== 0);\n    let sum = evens.reduce((total, value) => total + value);\n\
    \    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, index) => index % 2\
    \ !== 0 && num % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015352
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((e,i) => e % 2 === 0 &&\
    \ i % 2 !== 0).reduce((a,e) => a + e, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015352
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpxsye4d_r.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxsye4d_r.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, index) => num % 2 ===\
    \ 0 && index % 2 !== 0).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([1,2,3,4,5,6,7,8,9,10]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((_, i) => i % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpin_5sna6.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpin_5sna6.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var sum: number = 0;\n  for (var i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return undefined;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n88\n    at test (/tmp/tmpldotcgm7.js:11:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpldotcgm7.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015355
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpju_fx18o.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpju_fx18o.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 2
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  const oddIndices = [];\n  const even = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const element = lst[i];\n    if\
    \ (i % 2 === 0) {\n      oddIndices.push(element);\n    }\n    if (element % 2\
    \ === 0) {\n      even.push(element);\n    }\n  }\n  return oddIndices.filter(x\
    \ => even.includes(x)).reduce((a, b) => a + b, 0);\n}\n\ndescribe(\"add\", ()\
    \ => {\n  it(\"should work\", () => {\n    expect(add([4, 2, 6, 7])).toEqual(2);\n\
    \    expect(add([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])).toEqual(8);\n\
    \    expect(add([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmped8hxx95.ts(25,1): error TS1005: '','' expected.

    ../../../../../tmp/tmped8hxx95.ts(25,9): error TS1005: '','' expected.

    ../../../../../tmp/tmped8hxx95.ts(37,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => x % 2 === 0 && i\
    \ % 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let total = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            total +=\
    \ lst[i];\n        }\n    }\n    return total;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((el, i) => el % 2 === 0 &&\
    \ i % 2 !== 0).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((x,i) => (x % 2 == 0 &&\
    \ i % 2 != 0)).reduce((a,b) => a + b);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let count = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      count += lst[i];\n\
    \    }\n  }\n  return count;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpxmlm_2wm.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxmlm_2wm.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var result = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let res = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      res += lst[i];\n \
    \   }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let evenNumbers = lst.filter(x => (x % 2 ==\
    \ 0));\n    return evenNumbers.reduce((a, b) => (a + b), 0);\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n92\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp53hq274c.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp53hq274c.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 92,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tif (i % 2 != 0 && lst[i] % 2 == 0) {\n\t\t\tsum += lst[i];\n\t\t\
    }\n\t}\n\treturn sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  // write your solution here\n  let sum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((v, i) => v % 2 === 0 && i\
    \ % 2 === 1).reduce((p, c) => p + c, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let a: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n     \
    \       a += lst[i];\n        }\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015357
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let evenOddIndexSum = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n\
    \            evenOddIndexSum += lst[i];\n        }\n    }\n    return evenOddIndexSum;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\nconsole.log(add([3, 2, 5, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    2

    '
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((num, idx) => idx % 2 ==\
    \ 1).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpaw87prbi.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaw87prbi.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015358
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpeeyc_i53.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeeyc_i53.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let i = 1;\n    let sum = 0;\n    for (; i\
    \ < lst.length; i+=2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015357
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, i) => i % 2 === 1 &&\
    \ num % 2 === 0).reduce((sum, num) => sum + num);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  // TODO\n  let x = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      x += lst[i];\n\
    \    }\n  }\n  return x;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((e, i) => i % 2 === 1 &&\
    \ e % 2 === 0).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([4, 2, 6, 7]));\n\
    console.log(add([1, 1, 1, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    0

    '
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((v, i) => v % 2 === 0 &&\
    \ i % 2 === 1).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++){\n        if (i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((ele, i) => ele % 2 ===\
    \ 0 && i % 2 !== 0).reduce((sum, ele) => sum + ele, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((e, i) => i % 2 !== 0 &&\
    \ e % 2 === 0).reduce((x, y) => x + y);\n}\n\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, idx) => idx % 2 !==\
    \ 0 && num % 2 === 0).reduce((acc, item) => acc + item, 0);\n}\n\nadd([4, 2, 6,\
    \ 7]);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((e, i) => e % 2 === 0 && i\
    \ % 2 != 0).reduce((a, c) => a + c);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  lst.forEach((el, i) => {\n \
    \   if (i % 2 === 1 && el % 2 === 0) {\n      sum += el;\n    }\n  });\n  return\
    \ sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  // write code here\n  return lst.filter((x,\
    \ i) => i % 2 === 1 && x % 2 === 0).reduce((x, i) => x + i);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var result = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => x % 2 === 0 && i\
    \ % 2 !== 0).reduce((a, b) => a + b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => i % 2 === 1 && x\
    \ % 2 === 0).reduce((x, y) => x + y, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  // write your code here\n  let total = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n      total += lst[i];\n    }\n  }\n  return total;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let evenNum = 0;\n    let index = 0;\n   \
    \ while (index < lst.length) {\n        if (lst[index] % 2 === 0) {\n        \
    \    evenNum += lst[index];\n        }\n        index += 2;\n    }\n    return\
    \ evenNum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpb3yny911.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb3yny911.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, index) => num % 2 ===\
    \ 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([4, 2,\
    \ 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\nlet lst = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(add(lst));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '30

    '
  timestamp: 1660015360
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((item, index) => index % 2\
    \ == 1).reduce((a, b) => a + b);\n}\nconsole.log(add([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmph_5k49l3.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph_5k49l3.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '30

    '
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  lst.forEach((number, index)\
    \ => {\n    if (number % 2 === 0 && index % 2 !== 0) {\n      sum += number;\n\
    \    }\n  });\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    var result = 0;\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let res = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      res += lst[i];\n \
    \   }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => i % 2 !== 0 && x\
    \ % 2 === 0).reduce((x, y) => x + y, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    var sum: number = 0;\n    for (var i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let evens = lst.filter((item, idx) => item %\
    \ 2 === 0 && idx % 2 !== 0);\n  return evens.reduce((acc, curr) => acc + curr,\
    \ 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015360
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpeeyc_i53.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeeyc_i53.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015357
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let ans = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      ans += lst[i];\n    }\n  }\n \
    \ return ans;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp61wu9t95.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp61wu9t95.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, index) => x % 2 === 0\
    \ && index % 2 === 1).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015361
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\tlet oddSum = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tif (i % 2 === 1 && lst[i] % 2 === 0) {\n\t\t\toddSum += lst[i];\n\
    \t\t}\n\t}\n\treturn oddSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015361
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  lst.forEach((el, index) => {\n\
    \    if (el % 2 === 0 && index % 2 !== 0) {\n      sum += el;\n    }\n  });\n\
    \  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015361
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015361
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0;\
    \ i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6,\
    \ 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpwzhpfs0s.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwzhpfs0s.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015361
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  // Your code goes here.\n  return 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmppav3bvfg.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppav3bvfg.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015361
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((e, i) => i % 2 === 1 && e\
    \ % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015361
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nlet testA = [4, 2, 6, 7];\nconsole.log(add(testA));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015361
- exit_code: 2
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    //SOLUTION: 1\n    // return lst.filter((num,\
    \ idx) => idx % 2 != 0 && num % 2 == 0).reduce((a, b) => a + b, 0);\n\n    //SOLUTION:\
    \ 2\n    // return lst.filter((num, idx) => num % 2 == 0 && idx % 2 != 0).reduce((a,\
    \ b) => a + b, 0);\n\n    //SOLUTION: 3\n    // return lst.filter((num, idx) =>\
    \ idx % 2 != 0).filter(num => num % 2 == 0).reduce((a, b) => a + b, 0);\n\n  \
    \  //SOLUTION: 4\n    // return lst.filter((num, idx) => idx % 2 != 0).reduce((a,\
    \ b) => a + (b % 2 == 0 ? b : 0), 0);\n\n    //SOLUTION: 5\n    // let sum = 0;\n\
    \    // for (let i = 1; i < lst.length; i += 2) {\n    //     if (lst[i] % 2 ==\
    \ 0) {\n    //         sum += lst[i];\n    //     }\n    // }\n    // return sum;\n\
    \n    //SOLUTION: 6\n    // let sum = 0;\n    // for (let i = 0; i < lst.length;\
    \ i++) {\n    //     if (i % 2 != 0 && lst[i] % 2 == 0) {\n    //         sum\
    \ += lst[i];\n    //     }\n    // }\n    // return sum;\n\n    //SOLUTION: 7\n\
    \    // let sum = 0;\n    // for (let i = 0; i < lst.length; i++) {\n    //  \
    \   if (lst[i] % 2 == 0 && i % 2 != 0) {\n    //         sum += lst[i];\n    //\
    \     }\n    // }\n    // return sum;\n\n    //SOLUTION: 8\n    // return lst.reduce((sum,\
    \ num, idx) => sum + (idx % 2 != 0 && num % 2 == 0 ? num : 0), 0);\n\n    //SOLUTION\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpesm4fau0.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015360
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015362
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((item, index) => index %\
    \ 2 !== 0 && item % 2 === 0).reduce((acc, item) => acc + item, 0);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015362
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015362
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\tlet sum = 0;\n\tfor (let i = 0; i < lst.length;\
    \ i++) {\n\t\tif (i % 2 === 1 && lst[i] % 2 === 0) {\n\t\t\tsum += lst[i];\n\t\
    \t}\n\t}\n\treturn sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmph_a52toq.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph_a52toq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '110

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, i) => i % 2 !== 0 &&\
    \ num % 2 === 0).reduce((acc, num) => acc + num, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    // add your code here\n    let res = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i]\
    \ % 2 === 0) {\n            res += lst[i];\n        }\n    }\n    return res;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, i) => i % 2 !== 0 &&\
    \ num % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  //your code\n  let res = 0;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      res\
    \ += lst[i];\n    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmph_a52toq.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph_a52toq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((e, i) => e % 2 === 0 &&\
    \ i % 2 === 1).reduce((a, b) => a + b, 0);\n}\nconsole.log(add([4, 2, 6, 7]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let x: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n     \
    \       x += lst[i];\n        }\n    }\n    return x;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    lst.forEach((element,\
    \ index) => {\n        if (element % 2 === 0 && index % 2 === 1) {\n         \
    \   sum += element;\n        }\n    });\n    return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let total = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, index) => num % 2 ===\
    \ 0 && index % 2 !== 0).reduce((prev, curr) => prev + curr);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\nconsole.log(add([4, 2, 6,\
    \ 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015362
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015361
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpuqrvh7kd.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuqrvh7kd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    // let result: number = 0;\n    // for (let\
    \ i = 0; i < lst.length; i++) {\n    //     if (i % 2 == 1 && lst[i] % 2 == 0)\
    \ {\n    //         result += lst[i];\n    //     }\n    // }\n    // return result;\n\
    \    return lst.reduce((acc, curr, index) => (index % 2 == 1 && curr % 2 == 0)\
    \ ? acc + curr : acc, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((n, i) => i % 2 !== 0 &&\
    \ n % 2 === 0).reduce((acc, curr) => acc + curr, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((n, i) => i % 2 != 0 &&\
    \ n % 2 == 0).reduce((a, b) => a + b);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\tlet sum: number = 0;\n\tlst.forEach((num, i)\
    \ => {\n\t\tif (i % 2 !== 0 && num % 2 === 0) {\n\t\t\tsum += num;\n\t\t}\n\t\
    });\n\treturn sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015365
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 === 1 && lst[i] % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015365
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((num, i) => i % 2 == 1).reduce((a,\
    \ b) => a + b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpp5yujhhq.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp5yujhhq.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015365
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015365
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    lst.forEach((element, index)\
    \ => {\n        if (index % 2 === 1 && element % 2 === 0) {\n            sum +=\
    \ element;\n        }\n    });\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015365
- exit_code: 2
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ntest(add([2, 3, 4, 6, 7, 8, 9, 10]),\
    \ 12);\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp06ucxoww.ts(15,6): error TS2554: Expected 0 arguments,
    but got 2.

    '
  timestamp: 1660015365
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015353
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((value, index) => value %\
    \ 2 === 0 && index % 2 === 1).reduce((prev, curr) => prev + curr, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015365
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpvst0r07v.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvst0r07v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 1 && lst[i] % 2 === 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015363
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let count = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      count += lst[i];\n\
    \    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015365
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n\treturn lst.filter((x, i) => i % 2 === 1).reduce((x,\
    \ y) => x + y, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpw5k_jyxw.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw5k_jyxw.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015365
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp1tugw0ua.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1tugw0ua.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp0m3xbcg8.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0m3xbcg8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let even: number = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      even +=\
    \ lst[i];\n    }\n  }\n  return even;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let s = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      s += lst[i];\n    }\n\
    \  }\n  return s;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015366
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0;\
    \ i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6,\
    \ 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpwzhpfs0s.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwzhpfs0s.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015361
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((val, i) => i % 2 === 1 &&\
    \ val % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015366
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((element, i) => i % 2 ===\
    \ 1).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpmrwp4cyn.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmrwp4cyn.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '9

    '
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015366
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  const add = 0;\n  return lst.reduce((acc, el)\
    \ => {\n    if (el % 2 === 0 && el % 2 !== 0) {\n      return acc + el;\n    }\n\
    \    return acc;\n  }, add);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmp2o72ca4j.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2o72ca4j.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let ans = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015355
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((_, index) => index % 2).reduce((acc,\
    \ val) => val + acc);\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmptt98tnin.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptt98tnin.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '9

    '
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015358
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((val, i) => i % 2 !== 0\
    \ && val % 2 === 0).reduce((curr, prev) => curr + prev, 0);\n}\n\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let evens = lst.filter((element, index) => {\n\
    \    return index % 2 !== 0 && element % 2 === 0;\n  });\n  let total = evens.reduce((a,\
    \ b) => a + b);\n  return total;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((x, i) => x % 2 === 0 && i\
    \ % 2 !== 0).reduce((x, y) => x + y);\n}\nconsole.log(add([4, 2, 6, 7]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((el, index) => index % 2 !==\
    \ 0 && el % 2 === 0).reduce((acc, curr) => acc + curr, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015366
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      result += lst[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015363
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 === 0) {\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2,\
    \ 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n88\n    at test (/tmp/tmpywvvpjxu.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpywvvpjxu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 88,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    '
  timestamp: 1660015367
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((e, i) => (i % 2 == 1) &&\
    \ (e % 2 == 0)).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015367
- exit_code: 1
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  return lst.filter((n, i) => i % 2 === 1).reduce((sum,\
    \ n) => sum + n, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));\nconsole.log(add([]));\n\
    console.log(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpfkveq0bu.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfkveq0bu.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '9

    0

    30

    '
  timestamp: 1660015367
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((num, index) => num % 2\
    \ === 0 && index % 2 !== 0).reduce((sum, num) => sum + num, 0);\n}\n\nconsole.log(add([4,\
    \ 2, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015367
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015362
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    return lst.filter((v, i) => i % 2 != 0 &&\
    \ v % 2 == 0).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015367
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n    let sum: number = 0;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction\
    \ add(lst: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 != 0 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1660015355
