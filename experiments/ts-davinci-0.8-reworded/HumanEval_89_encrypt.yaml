name: HumanEval_89_encrypt
language: ts
prompt: "//Create a function encrypt that takes a string as an argument and\n// returns\
  \ a string encrypted with the alphabet being rotated. \n// The alphabet should be\
  \ rotated in a manner such that the letters \n// shift down by two multiplied to\
  \ two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
  asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
  et\")\n// \"ix\"\nfunction encrypt(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"\
  lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"\
  gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"\
  ),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"\
  a\"),\"e\");\n}\n\ntest();"
completions: ["\tvar sLen = s.length;\n\tvar result = \"\";\n\tfor (var i = 0; i <\
    \ sLen; i++) {\n\t\tresult += String.fromCharCode(s.charCodeAt(i) + 2 * 2);\n\t\
    }\n\treturn result;\n}\n", "    const a = 'abcdefghijklmnopqrstuvwxyz'\n    const\
    \ newa = a.slice(2, a.length) + a.slice(0, 2)\n    let newS = ''\n    for (let\
    \ i = 0; i < s.length; i++) {\n        newS += newa[a.indexOf(s[i])]\n    }\n\
    \    return newS\n}\n", "  var encryptString = '';\n  for (var i = 0; i < s.length;\
    \ i++) {\n    var a = s.charCodeAt(i);\n    var b = a - 3;\n    var c = String.fromCharCode(b);\n\
    \    encryptString += c;\n  }\n  return encryptString;\n}\n", "    let result\
    \ = \"\";\n    let shift = 2;\n    let charCode = 0;\n    let newCharCode = 0;\n\
    \    for (let i = 0; i < s.length; i++) {\n        charCode = s.charCodeAt(i);\n\
    \        newCharCode = charCode + shift * 2;\n        if (newCharCode > 122) {\n\
    \            newCharCode = newCharCode - 26;\n        }\n        result += String.fromCharCode(newCharCode);\n\
    \    }\n    return result;\n}\n", "    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    let result = ''\n    for (let i = 0; i < s.length; i++) {\n        for (let\
    \ j = 0; j < alphabet.length; j++) {\n            if (s[i] === alphabet[j]) {\n\
    \                result += alphabet[j + 4]\n            }\n        }\n    }\n\
    \    return result\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\n\
    console.log(encrypt('gf'))\nconsole.log(encrypt('et'))", "  return s.split('').map(function(value,\
    \ index, array) {\n    var newValue = value.charCodeAt(0) + 2 * 2;\n    if (newValue\
    \ > 122) {\n      newValue = newValue - 122 + 97 - 1;\n    }\n    return String.fromCharCode(newValue);\n\
    \  }).join('');\n}\n", "    let result: string = \"\";\n    for (let i = 0; i\
    \ < s.length; i++) {\n        result += String.fromCharCode(s.charCodeAt(i) +\
    \ i * 2);\n    }\n    return result;\n}\n", "    let result = '';\n    for (let\
    \ i = 0; i < s.length; i++) {\n        result += rotate_char(s[i], (2*2));\n \
    \   }\n    return result;\n}\n", "    let sArr = s.split('');\n    let newArr\
    \ = [];\n    let newStr = '';\n    let abetArr = ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    for (let i = 0; i < sArr.length; i++) {\n        let\
    \ char = sArr[i];\n        let newChar = '';\n        for (let j = 0; j < abetArr.length;\
    \ j++) {\n            if (char === abetArr[j]) {\n                newChar = abetArr[j\
    \ + 2];\n            }\n        }\n        newArr.push(newChar);\n    }\n    newStr\
    \ = newArr.join('');\n    return newStr;\n}\n\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\n\
    console.log(encrypt('gf'));\nconsole.log(encrypt('et'));\n", "    const alphabet\
    \ = [\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n\
    \        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n   \
    \ ];\n    let newString = '';\n    for (let i = 0; i < s.length; i++) {\n    \
    \    let index = alphabet.indexOf(s[i]);\n        let newIndex = (index + 2 *\
    \ 2) % 26;\n        newString += alphabet[newIndex];\n    }\n    return newString;\n\
    }", "    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        result\
    \ += String.fromCharCode(s.charCodeAt(i) + 2 * 2);\n    }\n    return result;\n\
    }\n\nconsole.log(encrypt(\"hi\"));\nconsole.log(encrypt(\"asdfghjkl\"));\nconsole.log(encrypt(\"\
    gf\"));\nconsole.log(encrypt(\"et\"));", "    let alphabets = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let encryptedString = \"\"\n    for (let i = 0; i < s.length; i++) {\n \
    \       let indexOfCurrentAlphabet = alphabets.indexOf(s[i])\n        encryptedString\
    \ += alphabets[(indexOfCurrentAlphabet + 2) % 26]\n    }\n    return encryptedString\n\
    }\n", "    let result = '';\n    const arr = s.split('');\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        let code = arr[i].charCodeAt(0);\n        if\
    \ (code >= 120) {\n            code -= 24;\n        }\n        code += 4;\n  \
    \      const letter = String.fromCharCode(code);\n        result += letter;\n\
    \    }\n    return result;\n}\n", "  let result: string = \"\";\n  for (let i\
    \ = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n    if (code >=\
    \ 97 && code <= 119) {\n      result += String.fromCharCode(code + 2);\n    }\
    \ else if (code >= 120 && code <= 122) {\n      result += String.fromCharCode(code\
    \ - 24);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n\
    }\nconsole.log(encrypt(\"hi\"));\nconsole.log(encrypt(\"asdfghjkl\"));\nconsole.log(encrypt(\"\
    gf\"));\nconsole.log(encrypt(\"et\"));\n", "  let newS = \"\";\n  for (let i =\
    \ 0; i < s.length; i++) {\n    if (s[i] === \"z\") {\n      newS += \"b\";\n \
    \   } else if (s[i] === \"y\") {\n      newS += \"a\";\n    } else {\n      newS\
    \ += String.fromCharCode(s.charCodeAt(i) + 2);\n    }\n  }\n  return newS;\n}",
  "    let en = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let c = s.charCodeAt(i);\n\
    \        c = c + 2 * 2;\n        if (c > 122) c = c - 26;\n        en = en + String.fromCharCode(c);\n\
    \    }\n    return en;\n}\n", "    let alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let reg = /[^a-z]+/g;\n    let sentence = s.replace(reg, \"\").split(\"\
    \");\n    let result = [];\n    for (let char of sentence) {\n        let count\
    \ = alpha.indexOf(char);\n        result.push(alpha[count + 4]);\n    }\n    return\
    \ result.join(\"\");\n}\nconsole.log(encrypt(\"Hello\"));\nconsole.log(encrypt(\"\
    hi\"));\nconsole.log(encrypt(\"asdfghjkl\"));\nconsole.log(encrypt(\"gf\"));\n\
    console.log(encrypt(\"et\"));\n", "    var rot13: any = {\n        'a': 'm', 'b':\
    \ 'n', 'c': 'o', 'd': 'p', 'e': 'q', 'f': 'r', 'g': 's', 'h': 't', 'i': 'u', 'j':\
    \ 'v', 'k': 'w', 'l': 'x', 'm': 'y', 'n': 'z', 'o': 'a', 'p': 'b', 'q': 'c', 'r':\
    \ 'd', 's': 'e', 't': 'f', 'u': 'g', 'v': 'h', 'w': 'i', 'x': 'j', 'y': 'k', 'z':\
    \ 'l',\n        'A': 'M', 'B': 'N', 'C': 'O', 'D': 'P', 'E': 'Q', 'F': 'R', 'G':\
    \ 'S', 'H': 'T', 'I': 'U', 'J': 'V', 'K': 'W', 'L': 'X', 'M': 'Y', 'N': 'Z', 'O':\
    \ 'A', 'P': 'B', 'Q': 'C', 'R': 'D', 'S': 'E', 'T': 'F', 'U': 'G', 'V': 'H', 'W':\
    \ 'I', 'X': 'J', 'Y': 'K', 'Z': 'L'\n    };\n    return s.replace(/[a-z]/gi, function\
    \ (c) { return rot13[c]; });\n}\n", "  var result: string = \"\";\n  for (var\
    \ i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"x\") {\n   \
    \   result += String.fromCharCode(s.charCodeAt(i) + 2);\n    } else if (s[i] >=\
    \ \"y\" && s[i] <= \"z\") {\n      result += String.fromCharCode(s.charCodeAt(i)\
    \ - 24);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n\
    }\n", "  let alphabet = {\n    a: 'c',\n    b: 'd',\n    c: 'e',\n    d: 'f',\n\
    \    e: 'g',\n    f: 'h',\n    g: 'i',\n    h: 'j',\n    i: 'k',\n    j: 'l',\n\
    \    k: 'm',\n    l: 'n',\n    m: 'o',\n    n: 'p',\n    o: 'q',\n    p: 'r',\n\
    \    q: 's',\n    r: 't',\n    s: 'u',\n    t: 'v',\n    u: 'w',\n    v: 'x',\n\
    \    w: 'y',\n    x: 'z',\n    y: 'a',\n    z: 'b'\n  }\n  let encrypted = '';\n\
    \  for (let i = 0; i < s.length; i++) {\n    encrypted += alphabet[s[i]];\n  }\n\
    \  return encrypted;\n}\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\n\
    console.log(encrypt('gf'));\nconsole.log(encrypt('et'));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
