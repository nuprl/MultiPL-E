name: HumanEval_66_digitSum
language: ts
prompt: "//Task\n// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\
  \")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n\
  // >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>>\
  \ digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n\
  \  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"\
  ),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"\
  woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\"\
  \ How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n\
  }\n\ntest();"
completions: ["  const sum = s.split('').map(char => char.charCodeAt(0)).reduce((acc,\
    \ curr) => acc + curr, 0);\n  return Math.floor(sum / 2);\n}\nconsole.log(digitSum('woArBld'));",
  "    const inRange = (char: string, start: number, end: number): boolean =>\n  \
    \      char.charCodeAt(0) >= start && char.charCodeAt(0) <= end;\n    return s.split('').reduce((acc,\
    \ curr) => {\n        if (inRange(curr, 65, 90)) {\n            return acc + curr.charCodeAt(0);\n\
    \        }\n        return acc;\n    }, 0);\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < s.length; i++) {\n    const ascii = s.charCodeAt(i);\n    if (ascii\
    \ >= 65 && ascii <= 90) {\n      sum += ascii;\n    }\n  }\n  return sum;\n}\n\
    \nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"\
    abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"\
    ));\nconsole.log(digitSum(\"aAaaaXa\"));", "    let sum: number = 0;\n    for\
    \ (let i: number = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) >= 65\
    \ && s.charCodeAt(i) <= 90) {\n            sum += s.charCodeAt(i);\n        }\n\
    \    }\n    return sum;\n}\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"\
    abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"\
    ));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n",
  "  let digitSum: number = 0;\n  for (let i: number = 0; i < s.length; i++) {\n \
    \   if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      digitSum += s.charCodeAt(i);\n\
    \    }\n  }\n  return digitSum;\n}\nconsole.log(digitSum(\"woArBld\"));\n", " \
    \ if (s.length === 0) {\n    return 0;\n  }\n  let total = 0;\n  for (let char\
    \ of s) {\n    let code = char.charCodeAt(0);\n    if (code >= 65 && code <= 90)\
    \ {\n      total += code;\n    }\n  }\n  return total;\n}\n\nconsole.log(digitSum(\"\
    abAB\"));", "    return s.split('').reduce((acc: number, curr: string) => {\n\
    \        if (curr.charCodeAt(0) > 64 && curr.charCodeAt(0) < 91) {\n         \
    \   return acc + curr.charCodeAt(0);\n        }\n        return acc;\n    }, 0);\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ===\
    \ s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n\
    }\n", "    let myArray = s.split('');\n    let counter = 0;\n    for (let i: number\
    \ = 0; i < myArray.length; i++) {\n        if (myArray[i] === myArray[i].toUpperCase())\
    \ {\n            counter += myArray[i].charCodeAt(0);\n        }\n    }\n    return\
    \ counter;\n}\n\nconsole.log(digitSum(\"woArBld\"));", "  return [...s].reduce((acc,\
    \ char) => char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90 ? acc + char.charCodeAt(0)\
    \ : acc, 0);\n}\n\nconsole.log(digitSum('aAaaaXa'));", "  let upperSum = 0;\n\
    \  let lowerSum = 0;\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    if (s[i] === s[i].toUpperCase()) {\n      sum += s.charCodeAt(i);\n    }\n\
    \  }\n  return sum;\n}\n\nconsole.log(digitSum(\"woArBld\"));", "  let sum = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s[i] !== s[i].toLowerCase())\
    \ {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", "    const\
    \ ascIIValues: string[] = s.split('').map(char => {\n        if (char !== char.toLowerCase())\
    \ {\n            return char.charCodeAt(0);\n        }\n    });\n    const filteredValues\
    \ = ascIIValues.filter(char => char !== undefined);\n    const sum = filteredValues.reduce((a,\
    \ b) => a + b, 0);\n    return sum;\n}\n\nconsole.log(digitSum('woArBld'));\n",
  "    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        const element\
    \ = s[i];\n        if (element.toUpperCase() === element) {\n            sum +=\
    \ element.charCodeAt(0);\n        }\n    }\n    return sum;\n}\n\n\n", "    let\
    \ sum = 0;\n    s.split('').forEach(el => {\n        sum += el.charCodeAt(0) %\
    \ 32;\n    });\n    return sum;\n}\nconsole.log(digitSum('abcCd'));\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let code = s.charCodeAt(i);\n\
    \        if (code >= 65 && code <= 90) {\n            sum += code;\n        }\n\
    \    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90)\
    \ {\n      sum += code;\n    }\n  }\n  return sum;\n}\nconsole.log(digitSum(\"\
    abcCd\"));\n", "    // Write your code here\n    let sum: number = 0;\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n\
    \            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\nconsole.log(digitSum(\"\
    abcCd\"));", "    return s.split('').reduce((a,b) => a + (b.charCodeAt(0) < 91\
    \ ? b.charCodeAt(0) : 0), 0);\n}\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"\
    abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"\
    ));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));",
  "    return s.toUpperCase().split('').reduce((a, b) => a + b.charCodeAt(0), 0);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
