name: HumanEval_122_add_elements
language: ts
prompt: "//Given a non-empty array of integers arr and an integer k, return\n// the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  // Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n\
  // Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction\
  \ add_elements(arr: number[], k: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2,\
  \ -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121,\
  \ 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7,\
  \ 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        const\
    \ x = arr[i];\n        if (x < 100) {\n            sum += x;\n        }\n    }\n\
    \    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));\n", "  return arr.slice(0, k).reduce((acc, num) => {\n    return num\
    \ < 100 ? acc + num : acc;\n  }, 0);\n}\n", "    if(arr.length === 0) {\n    \
    \    return 0;\n    }\n\n    let sum = 0;\n    for(let i = 0; i < k; i++) {\n\
    \        if(Math.floor(arr[i] / 10) > 0) {\n            sum += arr[i];\n     \
    \   }\n    }\n\n    return sum;\n}\n", "    if (k === 0) return 0;\n    let sum\
    \ = 0;\n    const is_len_2 = (num: number): boolean => {\n        const num_str\
    \ = num.toString();\n        return num_str.length === 2;\n    };\n    for (let\
    \ i = 0; i < k; i++) {\n        if (is_len_2(arr[i])) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));\n", "    // code goes here\n}\n", "    // Write code\
    \ here\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i]\
    \ < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    \n", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i]\
    \ >= 10 && arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n   \
    \ return sum;\n}\n", "    let temp = 0;\n    for (let i = 0; i < k; i++) {\n \
    \       if (arr[i] < 100) {\n            temp += arr[i];\n        }\n    }\n \
    \   return temp;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));\n", "    return arr.slice(0, k).reduce((acc, curr) => acc + +(curr > 9)\
    \ + curr, 0);\n}\n", "  let result = 0;\n  for (let i = 0; i < k; i++) {\n   \
    \ if (arr[i] < 100) {\n      result += arr[i];\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let\
    \ sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n \
    \           sum += arr[i];\n        }\n    }\n    return sum;\n}", "    return\
    \ 0;\n}\n", "    return arr.slice(0, k).reduce((a, b) => a + (b < 100 ? b : 0),\
    \ 0);\n}\n\nexport { add_elements };", "    return arr.slice(0, k).reduce((acc,\
    \ val) => {\n        if (val < 100) {\n            acc += val;\n        }\n  \
    \      return acc;\n    }, 0);\n}\n", "    const result: number[] = [];\n    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < k; i++) {\n        if (arr[i]\
    \ < 10) {\n            result.push(arr[i]);\n        } else if (arr[i] < 100)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    for (let j: number\
    \ = 0; j < result.length; j++) {\n        sum += result[j];\n    }\n    return\
    \ sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));",
  "  let result = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n \
    \     result += arr[i];\n    }\n  }\n  return result;\n}\n", "    // No need to\
    \ check k against arr.length, as k <= arr.length by problem statement\n    if\
    \ (k < 1) {\n        return 0;\n    }\n\n    // No need to check k > arr.length,\
    \ as k <= arr.length by problem statement\n    if (k > arr.length) {\n       \
    \ k = arr.length;\n    }\n\n    let result = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        const int = arr[i];\n        if (int < 100) {\n            result\
    \ += int;\n        }\n    }\n\n    return result;\n}\n", "  let i = 0;\n  let\
    \ count = 0;\n  let sum = 0;\n  while (count < k) {\n    if (arr[i] > 9 && arr[i]\
    \ < 100) {\n      sum += arr[i];\n      count++;\n    }\n    i++;\n  }\n  return\
    \ sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));",
  "  let result = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n \
    \     result += arr[i];\n    }\n  }\n  return result;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n\
    \    } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
