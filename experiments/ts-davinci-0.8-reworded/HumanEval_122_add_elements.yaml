name: HumanEval_122_add_elements
language: ts
prompt: "//Given a non-empty array of integers arr and an integer k, return\n// the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  // Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n\
  // Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction\
  \ add_elements(arr: number[], k: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2,\
  \ -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121,\
  \ 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7,\
  \ 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
completions: ["    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        const\
    \ x = arr[i];\n        if (x < 100) {\n            sum += x;\n        }\n    }\n\
    \    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));\n", "  return arr.slice(0, k).reduce((acc, num) => {\n    return num\
    \ < 100 ? acc + num : acc;\n  }, 0);\n}\n", "    if(arr.length === 0) {\n    \
    \    return 0;\n    }\n\n    let sum = 0;\n    for(let i = 0; i < k; i++) {\n\
    \        if(Math.floor(arr[i] / 10) > 0) {\n            sum += arr[i];\n     \
    \   }\n    }\n\n    return sum;\n}\n", "    if (k === 0) return 0;\n    let sum\
    \ = 0;\n    const is_len_2 = (num: number): boolean => {\n        const num_str\
    \ = num.toString();\n        return num_str.length === 2;\n    };\n    for (let\
    \ i = 0; i < k; i++) {\n        if (is_len_2(arr[i])) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));\n", "    // code goes here\n}\n", "    // Write code\
    \ here\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i]\
    \ < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    \n", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i]\
    \ >= 10 && arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n   \
    \ return sum;\n}\n", "    let temp = 0;\n    for (let i = 0; i < k; i++) {\n \
    \       if (arr[i] < 100) {\n            temp += arr[i];\n        }\n    }\n \
    \   return temp;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));\n", "    return arr.slice(0, k).reduce((acc, curr) => acc + +(curr > 9)\
    \ + curr, 0);\n}\n", "  let result = 0;\n  for (let i = 0; i < k; i++) {\n   \
    \ if (arr[i] < 100) {\n      result += arr[i];\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let\
    \ sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n \
    \           sum += arr[i];\n        }\n    }\n    return sum;\n}", "    return\
    \ 0;\n}\n", "    return arr.slice(0, k).reduce((a, b) => a + (b < 100 ? b : 0),\
    \ 0);\n}\n\nexport { add_elements };", "    return arr.slice(0, k).reduce((acc,\
    \ val) => {\n        if (val < 100) {\n            acc += val;\n        }\n  \
    \      return acc;\n    }, 0);\n}\n", "    const result: number[] = [];\n    let\
    \ sum: number = 0;\n    for (let i: number = 0; i < k; i++) {\n        if (arr[i]\
    \ < 10) {\n            result.push(arr[i]);\n        } else if (arr[i] < 100)\
    \ {\n            result.push(arr[i]);\n        }\n    }\n    for (let j: number\
    \ = 0; j < result.length; j++) {\n        sum += result[j];\n    }\n    return\
    \ sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));",
  "  let result = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n \
    \     result += arr[i];\n    }\n  }\n  return result;\n}\n", "    // No need to\
    \ check k against arr.length, as k <= arr.length by problem statement\n    if\
    \ (k < 1) {\n        return 0;\n    }\n\n    // No need to check k > arr.length,\
    \ as k <= arr.length by problem statement\n    if (k > arr.length) {\n       \
    \ k = arr.length;\n    }\n\n    let result = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        const int = arr[i];\n        if (int < 100) {\n            result\
    \ += int;\n        }\n    }\n\n    return result;\n}\n", "  let i = 0;\n  let\
    \ count = 0;\n  let sum = 0;\n  while (count < k) {\n    if (arr[i] > 9 && arr[i]\
    \ < 100) {\n      sum += arr[i];\n      count++;\n    }\n    i++;\n  }\n  return\
    \ sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));",
  "  let result = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n \
    \     result += arr[i];\n    }\n  }\n  return result;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n\
    \    } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\n", "  const filtered = arr.filter(\n    (e) => e > 9 && e < 100 || e === 1000\
    \ || e === 10000\n  );\n  if (k > filtered.length) {\n    return filtered.reduce((acc,\
    \ c) => (acc += c), 0);\n  }\n  return filtered.slice(0, k).reduce((acc, c) =>\
    \ (acc += c), 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n\
    \        if (arr[i] >= 10 && arr[i] < 100) {\n            sum += arr[i];\n   \
    \     }\n    }\n    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));", "  //Solution1:\n  let sum = 0;\n  for (let i = 0; i\
    \ < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n    } else if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "  let sum = 0;\n  let i = 0;\n  while\
    \ (i < k) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n    i++;\n\
    \  }\n  return sum;\n}\n", "    return arr.slice(0, k).filter(x => x < 100).reduce((x,\
    \ y) => x + y);\n}\n\ndescribe(\"add_elements\", () => {\n    it(\"should sum\
    \ elements with two digits or less\", () => {\n        let arr = [111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9];\n        let k = 4;\n        let expected = 24;\n    \
    \    let actual = add_elements(arr, k);\n        expect(actual).toBe(expected);\n\
    \    });\n});", "    return 0;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    const curr = arr[i];\n    if (curr < 10) {\n      sum += curr;\n\
    \    } else if (curr >= 10 && curr < 100) {\n      sum += curr;\n    }\n  }\n\
    \  return sum;\n}\n", "  const firstKArray = arr.slice(0, k);\n  const twoDigitNumbers\
    \ = firstKArray.filter(\n    (el: number) => el >= 10 && el < 100\n  );\n  const\
    \ singleDigitNumbers = firstKArray.filter((el: number) => el < 10);\n  return\
    \ twoDigitNumbers.reduce((acc: number, el: number) => acc + el, 0) +\n    singleDigitNumbers.reduce((acc:\
    \ number, el: number) => acc + el, 0)\n    ? singleDigitNumbers.reduce((acc: number,\
    \ el: number) => acc + el, 0)\n    : 0;\n}\n", "    if(arr.length === 0) return\
    \ 0;\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100)\
    \ sum += arr[i];\n    }\n    return sum;\n}\n", "  let summ = 0;\n  for (let i\
    \ = 0; i < k; i++) {\n    let numStr = arr[i].toString();\n    if (numStr.length\
    \ < 3) {\n      summ += arr[i];\n    }\n  }\n  return summ;\n}\n", "  let result\
    \ = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result\
    \ += arr[i];\n    }\n  }\n  return result;\n}\n", "    let sum = 0;\n    let count\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n\
    \        while (num > 9) {\n            num = Math.floor(num / 10);\n        }\n\
    \        sum += arr[i];\n        count++;\n        if (count == k) {\n       \
    \     break;\n        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const digits = arr[i].toString().length;\n  \
    \  if (digits <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let sum\
    \ = 0;\n    for (let i = 0; i < k; i++) {\n        let temp = 0;\n        let\
    \ flag = true;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n\
    \            if (arr[i].toString()[j] == 0 && flag) continue;\n            flag\
    \ = false;\n            temp += Number(arr[i].toString()[j]);\n        }\n   \
    \     if (temp <= 9) sum += temp;\n    }\n    return sum;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < k; i++) {\n    let element = arr[i];\n    if (element\
    \ < 10) {\n      sum += element;\n    } else if (element < 100) {\n      sum +=\
    \ element;\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i\
    \ = 0; i < k; i++) {\n        const current = arr[i];\n        if (current < 100)\
    \ {\n            sum += current;\n        }\n    }\n    return sum;\n}\n", " \
    \ let total = 0;\n  for (let i = 0; i < k; i++) {\n    const val = arr[i];\n \
    \   if (val < 100) {\n      total += val;\n    }\n  }\n  return total;\n}\n\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "  let sum\
    \ = 0;\n  for (let i = 0; i < k; i++) {\n    const element = arr[i];\n    if (element\
    \ <= 99) {\n      sum += element;\n    }\n  }\n  return sum;\n}\n", "  if (k <\
    \ 1 || k > arr.length) {\n    throw \"K is out of bounds\";\n  }\n  let sum =\
    \ 0;\n  for (let i = 0; i < k; i++) {\n    const twoDigitNum = arr[i];\n    if\
    \ (twoDigitNum < 100) {\n      sum += twoDigitNum;\n    }\n  }\n  return sum;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100)\
    \ {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "  let sum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n\
    \  }\n  return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));", "  return arr.slice(0, k).filter(num => num < 100).reduce((acc, num)\
    \ => acc + num, 0);\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));", "    // 1. Check the array is not empty\n    if (arr.length == 0)\
    \ return 0;\n    // 2. Create a variable to hold the count of numbers with at\
    \ most two digits\n    let numbersWithTwoDigits = 0;\n    // 3. Create a for loop\
    \ that loops to the value of k\n    for (let i = 0; i < k; i++) {\n        //\
    \ 4. Count up how many numbers with at most two digits are in the loop\n     \
    \   if (arr[i] < 100) numbersWithTwoDigits++;\n    }\n    // 5. Create a variable\
    \ to hold the sum of the numbers and initialize it at 0\n    let sum = 0;\n  \
    \  // 6. Create a for loop to sum up the values in the first k elements of the\
    \ array\n    for (let i = 0; i < k; i++) {\n        // 7. If the number is less\
    \ than 100, add it to the sum\n        if (arr[i] < 100) sum += arr[i];\n    }\n\
    \    // 8. Return the sum\n    return sum;\n}\n", "    let i = 0;\n    let sum\
    \ = 0;\n    let result = [];\n    for (i; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.forEach(function (el) {\n        if (el < 100) {\n        \
    \    sum += el;\n        }\n    });\n    return sum;\n}", "    let n = 0;\n  \
    \  for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            n +=\
    \ arr[i];\n        }\n    }\n    return n;\n}\n", "    let sum = 0;\n    for (let\
    \ i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100) {\n        \
    \    sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n  \
    \    sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let result = 0;\n    for (let i = 0;\
    \ i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\n", "  let sum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    if (arr[i] > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n\
    \  }\n  return sum;\n}", "    let result = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n \
    \   }\n    return result;\n}\nlet nums: number[] = [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9];\nlet k: number = 4;\nconsole.log(add_elements(nums, k));", "    let idx\
    \ = 0;\n    let total = 0;\n    while (idx < k) {\n        let item = arr[idx];\n\
    \        if (item < 100) {\n            total += item;\n        }\n        idx++;\n\
    \    }\n    return total;\n}\n\nexport {\n    add_elements\n}", "  let output\
    \ = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      output\
    \ += arr[i];\n    }\n  }\n  return output;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "  let sum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n",
  "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        let num = arr[i];\n\
    \        if (num > 99) {\n            continue;\n        }\n        sum += num;\n\
    \    }\n    return sum;\n}", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n",
  "    if (arr.length === 0) {\n        return 0;\n    }\n    if (k > arr.length)\
    \ {\n        return 0;\n    }\n    let sum = 0;\n    let digits_count = 0;\n \
    \   let i = 0;\n    while (digits_count < k) {\n        let temp = arr[i];\n \
    \       while (temp > 0) {\n            temp = temp / 10;\n            digits_count++;\n\
    \        }\n        sum += arr[i];\n        i++;\n    }\n    return sum;\n}\n",
  "  return arr.slice(0, k).reduce((acc, curr) => (acc += curr), 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "  let sum = 0;\n  let i = 0;\n  while\
    \ (i < k) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n    i++;\n\
    \  }\n  return sum;\n}\n", "    let count = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            count += arr[i];\n        }\n  \
    \  }\n    return count;\n}\n", "  let finalSum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    if (arr[i] < 100) {\n      finalSum += arr[i];\n    }\n  }\n  return\
    \ finalSum;\n}\n", "    if (k > arr.length) k = arr.length;\n    let result =\
    \ 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] <\
    \ 100) {\n            result += arr[i];\n        }\n    }\n    return result;\n\
    }\n", "  return 0;\n}\n", "    let res = 0;\n    for (let i = 0; i < k; i++) {\n\
    \        if (arr[i] >= 10 && arr[i] < 100) {\n            res += arr[i];\n   \
    \     }\n    }\n    return res;\n}\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < k; i++) {\n        const n = arr[i];\n        if (n < 100) {\n         \
    \   sum += n;\n        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const num = arr[i];\n    if (num >= 0 && num\
    \ < 100) {\n      sum += num;\n    }\n  }\n  return sum;\n}\n", "    let sum =\
    \ 0;\n    let j = 0;\n    while (j < k) {\n        if (arr[j] >= 10 && arr[j]\
    \ < 100) {\n            sum += arr[j];\n        }\n        j++;\n    }\n    return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));\n", "  let sum = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    const current_element = arr[i];\n    if (current_element < 100) {\n \
    \     sum += current_element;\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    const elements_to_add = arr.slice(0,\
    \ k);\n    let sum = 0;\n    elements_to_add.forEach(element => {\n        const\
    \ number_of_digits = String(element).length;\n        if (number_of_digits <=\
    \ 2) {\n            sum += element;\n        }\n    });\n    return sum;\n}\n",
  "  const take_k_elements = arr.slice(0, k);\n  const two_digit_numbers = take_k_elements.filter(element\
    \ => element < 100);\n  return two_digit_numbers.reduce((acc, curr) => acc + curr,\
    \ 0);\n}\n\ntest(\"it works\", () => {\n  expect(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)).toBe(24);\n});", "    let sum = 0;\n    for (let i = 0;\
    \ i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n   \
    \     }\n    }\n    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));", "    let result = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n \
    \   }\n    return result;\n}\n", "  let sum = 0;\n  let counter = 0;\n  while\
    \ (counter < k) {\n    if (arr[counter] < 100) {\n      sum += arr[counter];\n\
    \    }\n    counter++;\n  }\n  return sum;\n}\n", "  let result = 0;\n  for (let\
    \ i = 0; i < k; i++) {\n    if (arr[i] >= 0 && arr[i] < 100) {\n      result +=\
    \ arr[i];\n    }\n  }\n  return result;\n}\n", "    let sum = 0;\n    for (let\
    \ i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100) {\n        \
    \    sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    const ans: number[] = [];\n    for\
    \ (let i = 0; i < k; i++) {\n        const num = arr[i];\n        if (num < 10)\
    \ {\n            ans.push(num);\n        } else if (num < 100) {\n           \
    \ ans.push(num);\n        }\n    }\n    return ans.reduce((a, b) => a + b, 0);\n\
    }\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\nconsole.log(add_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9], 5));\n", "    // return arr.filter(n => n < 100).slice(0,\
    \ k).reduce((acc, n) => acc + n);\n    return arr.filter(n => n < 100).slice(0,\
    \ k).reduce((acc, n) => acc + n, 0);\n}\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));", "  return arr.reduce((a, b) => (b < 100 ? a + b\
    \ : a), 0);\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));", "    let added_k_elements = arr.slice(0, k);\n    let two_digit_elements\
    \ = added_k_elements.filter(element => element > 9);\n    return two_digit_elements.reduce((acc,\
    \ el) => acc + el, 0);\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));\n", "    let two_digits: number[] = []\n    let number: number\n\
    \    let sum: number = 0\n    for (let i: number = 0; i < k; i++) {\n        number\
    \ = arr[i]\n        if (number > 9 && number < 100) {\n            two_digits.push(number)\n\
    \        }\n    }\n    if (two_digits.length == 0) {\n        return 0\n    }\n\
    \    for (let i: number = 0; i < two_digits.length; i++) {\n        sum += two_digits[i]\n\
    \    }\n    return sum\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4))\n", "  let result = 0;\n  for (let i = 0; i < k; i++) {\n    if\
    \ (arr[i] < 100) {\n      result += arr[i];\n    }\n  }\n  return result;\n}\n\
    \nexport { add_elements };", "    let sum = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));", "    // let _arr = arr.slice(0, k)\n    // let _sum = 0;\n    //\
    \ _arr.forEach(element => {\n    //     let len = element.toString().length\n\
    \    //     if (len == 1 || len == 2) {\n    //         _sum += element\n    //\
    \     }\n    // });\n    // return _sum\n    return arr.slice(0, k).filter(e =>\
    \ e < 100).reduce((a, b) => a + b, 0)\n}\n", "  return arr.reduce((acc, curr)\
    \ => {\n    return (acc += curr.toString().length > 2 ? 0 : curr);\n  }, 0);\n\
    }\n", "  let sum = 0;\n  let counter = 0;\n  while (counter < k) {\n    if (arr[counter]\
    \ >= 10 && arr[counter] < 100) {\n      sum += arr[counter];\n    }\n    counter++;\n\
    \  }\n  return sum;\n}\n", "  return arr.slice(0, k).filter(n => n < 100).reduce((prev,\
    \ curr) => prev + curr, 0);\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4));\n", "  let result = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    let element = arr[i];\n    if (element < 100) {\n      result += element;\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n\
    \    if (arr[i] > 9 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "    let sum = 0;\n    let idx = 0;\n    while (idx < k) {\n   \
    \     if (arr[idx] < 100) {\n            sum += arr[idx];\n        }\n       \
    \ idx++;\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "    let ans: number = 0;\n    for (let i = 0; i < k; i++) {\n \
    \       let num: number = arr[i];\n        if (num < 10) {\n            ans +=\
    \ num;\n        } else if (num < 100) {\n            ans += num;\n        }\n\
    \    }\n    return ans;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));", "    let result = 0;\n    let cnt = 0;\n    while (cnt < k)\
    \ {\n        let num = arr[cnt];\n        if (num < 100) {\n            result\
    \ += num;\n        }\n        cnt++;\n    }\n    return result;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < k; i++) {\n        const num = arr[i];\n        if (num <= 99) {\n     \
    \       sum += num;\n        }\n    }\n    return sum;\n}\n", "  // your code\
    \ here\n  return 0;\n}\n\nimport { strictEqual } from \"assert\";\n\nstrictEqual(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\nstrictEqual(add_elements([100, 5, 300,\
    \ 25, 4, 5, 400, 500, 600], 5), 1405);\nstrictEqual(add_elements([12, 34, 56,\
    \ 78, 90], 3), 128);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 9), 1035);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 1), 33);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2), 114);\n\
    strictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3), 121);\nstrictEqual(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 124);\nstrictEqual(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 5), 129);\nstrictEqual(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 6), 134);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 7), 139);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 8), 144);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9),\
    \ 149);\nstrictEqual(add_elements([100, 5, 300, 25, 4, 5, 400, 500, 600], 1),\
    \ 100);\nstrictEqual(add_elements([100, 5, 300, 25, 4, 5, 400, 500, 600], 2",
  "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9 && arr[i] < 100)\
    \ {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    // First, we'll sort the array using\
    \ a bubble sort (efficiency is not a concern here)\n    let sorted_arr = bubble_sort(arr);\n\
    \    // Now we'll grab the first k elements of the sorted array, then map them\
    \ to strings\n    let str_arr = sorted_arr.slice(0, k).map(x => String(x));\n\
    \    // Now we'll sum up the elements of the new array that are only two digits\
    \ long, using map and filter\n    let sum = str_arr.map(x => Number(x)).filter(x\
    \ => x <= 99).reduce((acc, val) => acc + val, 0);\n    return sum;\n}\n", "  let\
    \ sum = 0;\n  const kArray = arr.slice(0, k);\n  kArray.forEach((value) => {\n\
    \    if (value < 100) {\n      sum += value;\n    }\n  });\n  return sum;\n}\n\
    \ndescribe(\"add_elements\", () => {\n  it(\"should add the elements with two\
    \ digits from the first k elements of arr\", () => {\n    expect(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)).toBe(24);\n  });\n});", "  return (\n    arr\n\
    \      .filter((num, index) => index < k && num.toString().length <= 2)\n    \
    \  .reduce((a, b) => a + b, 0)\n  );\n}\n\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 2));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 6));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 0));\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 1));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 5));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 8));\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 7));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 3));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0));\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 0));\nconsole.log(add_elements", "    let result\
    \ = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i]\
    \ < 100) {\n            result += arr[i];\n        }\n    }\n    return result;\n\
    }\n", "    let result = 0;\n    let cnt = 0;\n    while (cnt < k) {\n        if\
    \ (arr[cnt] < 100) {\n            result += arr[cnt];\n        }\n        cnt++;\n\
    \    }\n    return result;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4));\n", "  return arr.slice(0, k).filter(n => n > 9 && n < 100).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    let result = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n \
    \   }\n    return result;\n}", "    let sum = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n \
    \       }\n    }\n    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));\n", "    return arr.slice(0, k).filter(v => v > 9 && v\
    \ < 100).reduce((a, b) => a + b, 0);\n}\n", "    let result = 0;\n    for (let\
    \ i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let sum = 0;\n    for (let i = 0; i <\
    \ k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n       \
    \ }\n    }\n    return sum;\n}\n\ndescribe(\"add_elements\", function () {\n \
    \   it(\"should work for some examples\", function () {\n        expect(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)).toEqual(24);\n        expect(add_elements([14,\
    \ 25, 36, 47, 58, 69, 70, 81, 92], 9)).toEqual(0);\n        expect(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 3)).toEqual(24);\n        expect(add_elements([14,\
    \ 25, 36, 47, 58, 69, 70, 81, 92], 1)).toEqual(14);\n        expect(add_elements([14,\
    \ 25, 36, 47, 58, 69, 70, 81, 92], 3)).toEqual(125);\n    });\n});", "    return\
    \ 0;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", " \
    \   let sum = 0;\n    for (let i = 0; i < k; i++) {\n        let el = arr[i];\n\
    \        if (el < 100) {\n            sum += el;\n        }\n    }\n    return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    let num =\
    \ arr[i];\n    if (num < 100) {\n      sum += num;\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    //const\
    \ reducer = (accumulator: number, currentValue: number) => accumulator + currentValue;\n\
    \    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let result = 0;\n    for (let i = 0;\
    \ i < k; i++) {\n        if (arr[i] > 99) {\n            continue;\n        }\n\
    \        result += arr[i];\n    }\n    return result;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  // TODO: Implement solution\n  let twoDigits:\
    \ number[] = [];\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9 && arr[i]\
    \ < 100) {\n      twoDigits.push(arr[i]);\n    }\n  }\n  return twoDigits.reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport { add_elements };", "  let result = 0;\n  let\
    \ count = 0;\n  while (count < k) {\n    const element = arr[count];\n    if (element\
    \ > 9 && element < 100) {\n      result += element;\n    }\n    count++;\n  }\n\
    \  return result;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));", "    let sum = 0;\n    let i = 0;\n    for (; i < k; i++) {\n   \
    \     if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));\n", "    return 0;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if (k < 1 || k > arr.length) {\n    throw new Error(\"Invalid input\"\
    );\n  }\n  return arr.slice(0, k).reduce((acc, val) => {\n    if (val > 9 && val\
    \ < 100) {\n      return acc + val;\n    }\n    return acc;\n  }, 0);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let total = 0;\n    for (let i =\
    \ 0; i < k; i++) {\n        let num = arr[i];\n        let digits = 0;\n     \
    \   while (num > 0) {\n            digits++;\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (digits <= 2) {\n            total += arr[i];\n\
    \        }\n    }\n    return total;\n}\n", "  let result = 0;\n  for (let i =\
    \ 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n    }\n\
    \  }\n  return result;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4));\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const\
    \ element = arr[i];\n    const num = (element % 100) / 10;\n    if (num < 1) {\n\
    \      sum += element;\n    }\n  }\n  return sum;\n}\n", "    return arr.reduce((acc,\
    \ cv, index) => {\n        if (index < k && (cv < 10 || cv < 100)) {\n       \
    \     acc += cv;\n        }\n        return acc;\n    }, 0);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    return arr.reduce((sum, val, index)\
    \ => {\n        if (index < k && val > 9 && val < 100) {\n            sum += val;\n\
    \        }\n        return sum;\n    }, 0);\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < k; i++) {\n        if (arr[i] > 9 && arr[i] < 100) {\n     \
    \       sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let sum = 0;\n    let i = 0;\n  \
    \  while (i < k) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n        i++;\n    }\n    return sum;\n}\n", "    let sum = 0;\n  \
    \  let counter = 0;\n    while (counter < k) {\n        if (arr[counter] < 100)\
    \ {\n            sum += arr[counter];\n        }\n        counter++;\n    }\n\
    \    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));", "    return arr.slice(0, k).reduce((sum, el) => sum + (el < 100 ? el\
    \ : 0), 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n    \
    \    if (arr[i] >= 0 && arr[i] < 10) {\n            sum += arr[i];\n        }\
    \ else if (arr[i] >= 10 && arr[i] < 100) {\n            sum += arr[i];\n     \
    \   }\n    }\n    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));", "    let result = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            result += arr[i];\n        }\n \
    \   }\n    return result;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4));", "  return arr.filter(x => x > 9 && x < 100).slice(0, k).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4));", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if\
    \ (arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    let val =\
    \ arr[i];\n    let digits = [];\n    while (val > 0) {\n      digits.push(val\
    \ % 10);\n      val = Math.floor(val / 10);\n    }\n    if (digits.length < 3)\
    \ {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "  let sum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "  return arr.slice(0, k).filter(num => num < 100).reduce((a, b)\
    \ => a + b, 0);\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));", "    //base case\n    if (k === 0) {\n        return 0;\n    }\n\n\
    \    const head = arr[0];\n    //step case\n    const isHeadMoreThanTwoDigits\
    \ = head > 9;\n    return add_elements(arr.slice(1), k - 1) + (isHeadMoreThanTwoDigits\
    \ ? 0 : head);\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if\
    \ (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    if (k === 0) {\n        return 0;\n\
    \    }\n    else if (k > arr.length) {\n        return add_elements(arr, arr.length);\n\
    \    }\n    else {\n        return arr[k - 1] % 100 + add_elements(arr, k - 1);\n\
    \    }\n}\n", "  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "    let acc:\
    \ number = 0;\n    let count: number = 0;\n    let i: number = 0;\n    while (count\
    \ < k) {\n        if (arr[i] < 100) {\n            acc += arr[i];\n          \
    \  count++;\n        }\n        i++;\n    }\n    return acc;\n}\n", "    let total\
    \ = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n     \
    \       total += arr[i];\n        }\n    }\n    return total;\n}", "    // check\
    \ data validity\n    if (arr.length === 0 || k > arr.length) {\n        throw\
    \ new Error('Array cannot be empty and k cannot be greater than arr length.');\n\
    \    }\n\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        const number\
    \ = arr[i];\n        if (number < 100) {\n            sum += number;\n       \
    \ }\n    }\n\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k;\
    \ i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n\
    \  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] >= 10 && arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));", "    // TODO: implement here\n    return 0;\n}\n\
    \nexport { add_elements };", "    let sum = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        let number = arr[i];\n        if (number < 10) {\n            sum\
    \ += number;\n        } else if (number < 100) {\n            sum += number;\n\
    \        }\n    }\n    return sum;\n}\n", "  //#############################\n\
    \  //#######   SOLUTION 1 ########\n  //#############################\n  //return\
    \ arr.slice(0, k).reduce((acc, curr) => {\n  //  if (curr.toString().length <=\
    \ 2) {\n  //    acc += curr;\n  //  }\n  //  return acc;\n  //}, 0);\n\n  //#############################\n\
    \  //#######   SOLUTION 2 ########\n  //#############################\n  //return\
    \ arr.slice(0, k).filter(i => i.toString().length <= 2).reduce((acc, curr) =>\
    \ acc + curr, 0);\n\n  //#############################\n  //#######   SOLUTION\
    \ 3 ########\n  //#############################\n  return arr.slice(0, k).filter(i\
    \ => i.toString().length <= 2).reduce((acc, curr) => acc + curr);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let sum = 0;\n    for (let i = 0; i\
    \ < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100) {\n            sum +=\
    \ arr[i];\n        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < k; i++) {\n        if (arr[i] < 10) {\n            sum += arr[i];\n \
    \       } else if (arr[i] < 100) {\n            sum += arr[i];\n        }\n  \
    \  }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n\
    \    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n   \
    \ if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}", " \
    \   return arr.reduce((acc, curr) => acc + (curr <= 99 ? curr : 0), 0);\n}\n",
  "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "  let\
    \ sum = 0;\n  if (k <= arr.length) {\n    for (let i = 0; i < k; i++) {\n    \
    \  if (arr[i] < 100) {\n        sum += arr[i];\n      }\n    }\n  }\n  return\
    \ sum;\n}\n", "  // Write your code here\n  return arr.slice(0, k).reduce((tot,\
    \ num) => (num > 99 ? tot : tot + num), 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let total = 0;\n    for (let i =\
    \ 0; i < k; i++) {\n        if (arr[i] < 100) {\n            total += arr[i];\n\
    \        }\n    }\n    return total;\n}\n", "  let count = 0;\n  for (let i =\
    \ 0; i < k; i++) {\n    let curr = arr[i];\n    if (curr <= 99) {\n      count\
    \ += curr;\n    }\n  }\n  return count;\n}\n", "    let sum = 0;\n    for (let\
    \ i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let result = 0;\n    for (let i\
    \ = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result += arr[i];\n\
    \        }\n    }\n    return result;\n}", "    let total = 0;\n    if (k > arr.length)\
    \ {\n        throw \"K is bigger than the array length\";\n    }\n    for (let\
    \ i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100) {\n        \
    \    total += arr[i];\n        }\n    }\n    return total;\n}\n", "  let sum =\
    \ 0;\n  let counter = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n      counter++;\n    }\n    if (counter ===\
    \ k) {\n      break;\n    }\n  }\n  return sum;\n}\n", "    const sum = arr.reduce((acc,\
    \ curr) => {\n        if (curr.toString().length <= 2) acc += curr;\n        return\
    \ acc;\n    }, 0);\n    return sum;\n}\nexport { add_elements };", "  let sum\
    \ = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i\
    \ = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < k; i++) {\n        const number = arr[i];\n        if (number < 100)\
    \ {\n            sum += number;\n        }\n    }\n    return sum;\n}\n", "  \
    \  let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "  //\
    \ Implement me!\n  const answer = arr.filter(element => element < 100)\n    .filter((_,\
    \ index) => index < k)\n    .reduce((total, current) => total + current, 0);\n\
    \  return answer;\n}\n\nexport { add_elements };", "    return arr.slice(0, k).filter(x\
    \ => x < 100).reduce((a, b) => a + b, 0);\n}\n", "    return arr.slice(0, k).reduce((acc,\
    \ n) => {\n        return acc + (n <= 99 ? n : 0);\n    }, 0);\n}\n", "  return\
    \ 0;\n}\n", "  let res = 0;\n  let index = 0;\n  while (index < k) {\n    if (arr[index]\
    \ < 100) {\n      res += arr[index];\n    }\n    index++;\n  }\n  return res;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i]\
    \ < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i]\
    \ < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\
    \nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let\
    \ cnt = 0;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n   \
    \     if (arr[i] < 100) {\n            sum += arr[i];\n            cnt++;\n  \
    \      }\n        if (cnt == k) {\n            break;\n        }\n    }\n    return\
    \ sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 7));\nconsole.log(add_elements([1,2,3,4,5,6,7,8,9],\
    \ 5));\nconsole.log(add_elements([1,2,3,4,5,6,7,8,9], 1));\n", "  return arr.reduce((acc,\
    \ val, idx) => {\n    if (val < 100 && idx < k) {\n      acc += val;\n    }\n\
    \    return acc;\n  }, 0);\n}\n\ndescribe(\"add_elements(arr, k)\", () => {\n\
    \  it(\"returns correct sum\", () => {\n    expect(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)).toEqual(24);\n  });\n});", "    return 0;\n}\nexport default\
    \ add_elements;", "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n     \
    \   if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    let result = 0;\n    for (let i = 0; i < k; i++) {\n      \
    \  let element = arr[i];\n        if (element < 10) {\n            result += element;\n\
    \        } else if (element < 100) {\n            result += element;\n       \
    \ }\n    }\n    return result;\n}", "    let sum = 0;\n    for (let i = 0; i <\
    \ k; i++) {\n        const curr = arr[i];\n        if (curr < 100) {\n       \
    \     sum += curr;\n        }\n    }\n    return sum;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    let element = arr[i];\n    if (element <\
    \ 10) {\n      result += element;\n    } else if (element < 100) {\n      result\
    \ += element;\n    }\n  }\n  return result;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    let sum = 0;\n    for (let i = 0; i\
    \ < k; i++) {\n        if (arr[i] < 10) {\n            sum += arr[i];\n      \
    \  } else if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n\
    \    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    let arrStr = arr[i].toString();\n\
    \    let arrNum = parseInt(arrStr);\n    if (arrStr.length <= 2) {\n      sum\
    \ += arrNum;\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));", "  let r = 0;\n  for (let i = 0; i < k; i++)\
    \ {\n    if (arr[i] < 100) {\n      r += arr[i];\n    }\n  }\n  return r;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}", "    let count\
    \ = 0;\n    for (let i = 0; i < k; i++) {\n        let n = arr[i];\n        if\
    \ (n <= 9) {\n            count += n;\n        } else if (n <= 99) {\n       \
    \     count += n;\n        }\n    }\n    return count;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    return arr.slice(0, k).reduce((result,\
    \ curr) => result + (curr < 100 ? curr : 0), 0);\n}\n", "  let total = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      total += arr[i];\n\
    \    }\n  }\n  return total;\n}\n", "    return arr.filter(num => num < 100).slice(0,\
    \ k).reduce((total, num) => total + num, 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));", "    const result = arr.filter(function\
    \ (value) {\n        return value < 100;\n    });\n    const sum = result.slice(0,\
    \ k).reduce(function (sum, current) {\n        return sum + current;\n    }, 0);\n\
    \    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < k; i++) {\n   \
    \ if (arr[i] >= 10 && arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nimport { test } from \"../utils/index\";\ntest(add_elements, [\n\
    \  [\n    [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n    4,\n    24,\n  ],\n  [\n   \
    \ [12, 123, 45, 67, 890, 9, 999],\n    5,\n    1227,\n  ],\n  [\n    [12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12", "    const out_arr = [];\n    for (let i = 0; i < k; i++) {\n\
    \        if (arr[i] < 100) {\n            out_arr.push(arr[i]);\n        }\n \
    \   }\n    return out_arr.reduce((a, b) => a + b, 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n", "    let sum = 0;\n    for (let i = 0;\
    \ i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\nexport function run_add_elements():\
    \ void {\n    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    }", "    //add code here\n    let counter = 0;\n    let result = 0;\n    for (let\
    \ i of arr) {\n        if (counter === k) {\n            break;\n        }\n \
    \       if (i > 9 && i < 100) {\n            result += i;\n            counter\
    \ += 1;\n        }\n    }\n    return result;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < k; i++) {\n    const item = arr[i];\n    if (item > 9 && item < 100)\
    \ {\n      sum += item;\n    }\n  }\n  return sum;\n}\n\nexport default add_elements;",
  "    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n\
    \            sum += arr[i];\n        } else if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n", "    let sum = 0;\n   \
    \ for (let i = 0; i < k; i++) {\n        let temp = arr[i];\n        if (temp\
    \ < 100) {\n            sum += temp;\n        }\n    }\n    return sum;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
