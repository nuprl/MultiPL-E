name: HumanEval_45_triangle_area
language: ts
prompt: "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
  \ 3)\n// 7.5\nfunction triangle_area(a: number, h: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(5, 3),7.5);\n\
  \  assert.deepEqual(candidate(2, 2),2.0);\n  assert.deepEqual(candidate(10, 8),40.0);\n\
  }\n\ntest();"
completions: ["    return 1 / 2 * a * h;\n}\n\nconsole.log(\"triangle area with side\
    \ \" + 5 + \" and high \" + 3 + \" is: \" + triangle_area(5, 3));\n", "    return\
    \ ((a * h) / 2);\n}\nconsole.log(triangle_area(5, 3));\n", "  return (a * h) /\
    \ 2;\n}\n", "  return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return\
    \ a * h / 2;\n}\n", "    let area: number = (a * h) / 2;\n    return area;\n}",
  "    return a * h / 2;\n}\n", "    return 1 / 2 * a * h;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "  return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return\
    \ 0.5 * a * h;\n}\nconsole.log(triangle_area(5, 3));\n", "    return (a * h) /\
    \ 2;\n}\n", "    return 1 / 2 * a * h;\n}\n", "    return a * h / 2;\n}\n", " \
    \ return a * h / 2;\n}\n", "    return (a * h) / 2;\n}\n", "    return (a * h)\
    \ / 2;\n}\n", "    return a * h / 2;\n}\nconsole.log(triangle_area(5, 3));", " \
    \   return 0.5 * a * h;\n}\n", "    return a * h / 2;\n}\n", "    return 1 / 2\
    \ * a * h;\n}\nconsole.log(triangle_area(5, 3));", "  return a * h / 2;\n}\n",
  "  return (a * h) / 2;\n}\n", "  return a * h / 2;\n}\n", "  return (a * h) / 2;\n\
    }\n", "    return (a * h) / 2;\n}", "    return (a * h) / 2;\n}\n", "    return\
    \ a * h / 2;\n}\nconsole.log(triangle_area(5, 3));\n", "    return 0.5 * a * h;\n\
    }\n", "  return (a * h) / 2;\n}\n", "    return a * h / 2;\n}", "    return 1\
    \ / 2 * a * h;\n}\nconsole.log(triangle_area(5, 3));\n", "  return (a * h) / 2;\n\
    }\n", "    return (a * h) / 2;\n}\n", "    return 0.5 * a * h;\n}\n", "    return\
    \ a * h / 2;\n}\n", "    if (isNaN(a) || isNaN(h)) {\n        throw new Error(\"\
    triangle_area: a and h must be a numbers\");\n    }\n\n    if (a <= 0 || h <=\
    \ 0) {\n        throw new Error(\"triangle_area: a and h must be greater than\
    \ 0\");\n    }\n\n    return a * h / 2;\n}\n", "  return (a * h) / 2;\n}\n", " \
    \   let area: number = (a * h / 2);\n    return area;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "  return (a * h) / 2;\n}\n", "    return (a * h) / 2;\n}\n", "   \
    \ return (a * h) / 2;\n}\n", "    return (a * h) / 2;\n}\n", "  return a * h /\
    \ 2;\n}\ntest('triangle_area', () => {\n  expect(triangle_area(5, 3)).toBe(7.5);\n\
    });\n", "    return a * h / 2;\n}\nconsole.log(triangle_area(5, 3));\n", "  return\
    \ 0.5 * a * h;\n}\n", "  return a * h / 2;\n}\n\nconsole.log(triangle_area(5,\
    \ 3));\n", "    return (a * h) / 2;\n}\n", "  return (a * h) / 2;\n}", "  return\
    \ a * h / 2;\n}\n", "    return (a * h / 2);\n}\n", "    return a * h / 2;\n}\n",
  "  return 0.5 * a * h;\n}\n", "    return a * h / 2;\n}\n", "    return ((a * h)\
    \ / 2);\n}", "    return a * h / 2;\n}\n", "  return a * h / 2;\n}\n", "    return\
    \ 0.5 * a * h;\n}\n", "  return 0.5 * a * h;\n}\n", "    return a * h / 2;\n}\n",
  "    return (a * h) / 2;\n}", "  return a * h / 2;\n}\nconsole.log(\"Area of a triangle:\
    \ \" + triangle_area(5, 3));\n", "    return (a * h) / 2;\n}\n", "    return (a\
    \ * h) / 2;\n}\n", "    return a * h / 2;\n}", "    return (a * h) / 2;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "    return a * h / 2;\n}\n", "    return 0.5 * a * h;\n}\n", "   \
    \ return 0.5 * a * h;\n}\n", "    return (a * h) / 2;\n}\n", "    return a * h\
    \ / 2;\n}\nconsole.log(triangle_area(5, 3));\n", "  return (a * h) / 2;\n}\n",
  "    if (a <= 0 || h <= 0) {\n        throw new Error('Sides or high cannot be 0\
    \ or less');\n    }\n    return a * h / 2;\n}\n", "  return (a * h) / 2;\n}\n",
  "    return 0.5 * a * h;\n}\n", "    return a * h / 2;\n}\n", "    return a * h\
    \ / 2;\n}\n", "    return a * h / 2;\n}\n", "    return (a * h) / 2;\n}", "  \
    \  return a * h / 2;\n}\n", "  return (a * h) / 2;\n}\n", "  return a * h / 2;\n\
    }\nconsole.log(\"triangle_area(5, 3) is: \" + triangle_area(5, 3));\n", "    if\
    \ (a <= 0 || h <= 0) {\n        return -1;\n    } else {\n        return a * h\
    \ / 2;\n    }\n}\n", "  return (a * h) / 2;\n}\n", "    return 0.5 * a * h;\n\
    }\n", "    return (a * h) / 2;\n}\n", "    return a * h / 2;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "    return a * h / 2;\n}\n", "    return 0.5 * a * h;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "  return (a * h) / 2;\n}\n", "    return (a * h) / 2;\n}\n", "   \
    \ return a * h / 2;\n}\n", "  return a * h / 2;\n}\n", "  return (a * h) / 2;\n\
    }\n", "    return a * h / 2;\n}\n\nexport { triangle_area };", "    return a *\
    \ h / 2;\n}\n", "    return a * h / 2;\n}\n", "  return 1 / 2 * a * h;\n}\n",
  "    return a * h / 2;\n}\nconsole.log(triangle_area(5, 3));\n", "    return (a\
    \ * h) / 2;\n}\n", "  return a * h / 2;\n}\n", "  return (a * h) / 2;\n}\n", " \
    \ return a * h / 2;\n}\n", "    return ((a * h) / 2);\n}\n", "    return a * h\
    \ / 2;\n}\n", "  let ar = (a * h) / 2;\n  return ar;\n}\n", "    return a * h\
    \ / 2;\n}", "  return 0.5 * a * h;\n}\n", "  return (a * h) / 2;\n}\n", "    return\
    \ (a * h) / 2;\n}\nconsole.log(\"Triangle area(5,3) = \" + triangle_area(5, 3));\n",
  "    return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "  return 0.5 * a *\
    \ h;\n}\nconsole.log(triangle_area(5, 3));\n", "    return a * h / 2;\n}\nconsole.log(\"\
    triangle_area(5, 3): \", triangle_area(5, 3));\n", "  return 0.5 * a * h;\n}\n",
  "  return a * h / 2;\n}\n", "    return 0.5 * a * h;\n}\n", "    return (a * h /\
    \ 2);\n}\n", "    return a * h / 2;\n}", "    return (a * h) / 2;\n}\n", "  return\
    \ a * h / 2;\n}\n", "    return a * h / 2;\n}\nconsole.log(triangle_area(5, 3));\n",
  "    return (a * h) / 2;\n}\n", "    if (a < 0 || h < 0) {\n        return -1;\n\
    \    }\n    return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "  return a\
    \ * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return a * h / 2;\n}\n",
  "    return a * h / 2;\n}\n", "    let result = (a * h) / 2;\n    return result;\n\
    }\n\nconsole.log(triangle_area(4, 8));\n", "  return a * h / 2;\n}\n", "    return\
    \ a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return a * h / 2;\n}\n",
  "    return 0.5 * a * h;\n}\n", "    return (a * h) / 2;\n}\n", "    return a *\
    \ h / 2;\n}\nconsole.log(triangle_area(5, 3));\n", "    return 0.5 * a * h;\n}",
  "  return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return a * h / 2;\n\
    }\n", "  return a * h / 2;\n}\n", "    return (a * h) / 2;\n}\n", "    return\
    \ a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "  if (a < 0 || h < 0) {\n \
    \   throw new Error('Wrong argument');\n  }\n  return (a * h) / 2;\n}\nconsole.log(triangle_area(5,\
    \ 3));\nconsole.log(triangle_area(0, 4));\n", "    return (a * h) / 2;\n}\n",
  "    if (a <= 0 || h <= 0) {\n        return 0\n    }\n    return a * h / 2\n}\n\
    \ntest('test triangle_area', () => {\n    expect(triangle_area(5, 3)).toBe(7.5)\n\
    \    expect(triangle_area(0, 0)).toBe(0)\n    expect(triangle_area(0, 5)).toBe(0)\n\
    \    expect(triangle_area(5, 0)).toBe(0)\n})\n", "  return (a * h) / 2;\n}\n",
  "  return a * h / 2;\n}\n", "  return (a * h) / 2;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "  return a * h / 2;\n}\n", "    return (a * h) / 2;\n}\n", "    return\
    \ (a * h) / 2;\n}\nconsole.log(triangle_area(10, 4));\n\n", "  return (a * h)\
    \ / 2;\n}\n", "    return a * h / 2;\n}\n", "    if(a <= 0 || h <= 0) {\n    \
    \    throw \"Arguments must be positive\";\n    }\n    return a * h / 2;\n}\n",
  "    return (a * h) / 2;\n}\n", "  return (a * h) / 2;\n}\n", "  return a * h /\
    \ 2;\n}\n", "    return a * h / 2;\n}\n", "  return a * h / 2;\n}\n", "    return\
    \ a * h / 2;\n}\n", "  return a * h / 2;\n}\n", "    return a * h / 2;\n}\n\n\
    console.log(triangle_area(5, 3));\n", "    return (a * h) / 2;\n}\n", "    return\
    \ a * h / 2;\n}", "  return (a * h) / 2;\n}\n", "    return a * h / 2;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n", "  return (a * h) / 2;\n}\n", "    return (a * h) / 2;\n}\n", "  return\
    \ (a * h) / 2;\n}\n", "    return (a * h) / 2;\n}\n", "    return a * h / 2;\n\
    }\n", "  return (a * h) / 2;\n}\n", "    return a * h / 2;\n}\n", "    return\
    \ a * h / 2;\n}\n", "    return (a * h) / 2;\n}\n", "  return (a * h) / 2;\n}\n",
  "    return a * h / 2;\n}\nconsole.log(triangle_area(3, 5));\n", "  return (a *\
    \ h) / 2;\n}\n", "  return a * h / 2;\n}\n\ntest(\"test_triangle_area\", function\
    \ (): void {\n  equal(triangle_area(5, 3), 7.5);\n});\n", "  let area = 0.5 *\
    \ a * h;\n  return area;\n}\n\nconsole.log(triangle_area(5, 3));\n", "  return\
    \ a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return 0.5 * a * h;\n}\n",
  "    return (a * h) / 2;\n}\n", "    return (a * h) / 2;\n}\nconsole.log(triangle_area(5,\
    \ 3));\n\n", "    return (a * h) / 2;\n}\n", "    return a * h / 2;\n}\n", " \
    \   if (a <= 0 || h <= 0) {\n        throw new Error(\"Arguments must be positive\
    \ numbers\");\n    }\n    return (a * h) / 2;\n}\n", "  return a * h / 2;\n}\n",
  "  return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "    return 0.5 * a *\
    \ h;\n}\n", "  return a * h / 2;\n}\n", "    return a * h / 2;\n}\n", "  return\
    \ (a * h) / 2;\n}\n", "  return a * h / 2;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
