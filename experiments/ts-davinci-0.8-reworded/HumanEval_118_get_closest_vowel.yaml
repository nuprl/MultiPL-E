name: HumanEval_118_get_closest_vowel
language: ts
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
  yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
  easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
  ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
  most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
  ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
  anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
  Above\"),\"o\");\n}\n\ntest();"
completions: ["    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelsL =\
    \ ['A', 'E', 'I', 'O', 'U'];\n    let found: string = '';\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if\
    \ (i == word.length - 1) {\n                break;\n            }\n          \
    \  found = word[i];\n            break;\n        }\n    }\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowelsL.includes(word[i])) {\n            if\
    \ (i == word.length - 1) {\n                break;\n            }\n          \
    \  found = word[i];\n            break;\n        }\n    }\n    return found;\n\
    }\n", "    let vowels = \"aeiouAEIOU\";\n    let letters = word.split(\"\");\n\
    \    let lastLetter = letters[letters.length - 1];\n    let secondLastLetter =\
    \ letters[letters.length - 2];\n    let result = \"\";\n    if (vowels.indexOf(lastLetter)\
    \ > -1) {\n        result = lastLetter;\n    } else if (vowels.indexOf(secondLastLetter)\
    \ > -1) {\n        result = secondLastLetter;\n    }\n    return result;\n}\n\
    console.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "  return word.split('').reverse().reduce((acc: string, curr: string)\
    \ => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\
    \    const found = vowels.includes(curr);\n    if (found && acc === '') {\n  \
    \    return curr;\n    } else if (found && acc !== '') {\n      return '';\n \
    \   } else {\n      return acc;\n    }\n  }, '');\n}\n", "    var vowels = {\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n        \"A\": true,\n        \"E\": true,\n\
    \        \"I\": true,\n        \"O\": true,\n        \"U\": true\n    };\n   \
    \ var closest_vowel = \"\";\n    for (var i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels[word[i]]) {\n            closest_vowel = word[i];\n      \
    \      if (i != 0 && i != word.length - 1) {\n                if (!vowels[word[i\
    \ - 1]] && !vowels[word[i + 1]]) {\n                    return closest_vowel;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}\n", " \
    \   const vowels = \"AEIOUaeiou\";\n    const consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n    const word_arr = word.split(\"\");\n    let result: string = \"\";\n  \
    \  let prev_char = \"\";\n    let next_char = \"\";\n    let char_index = 0;\n\
    \    let closest_vowel_index = word.length;\n    for (const char of word_arr)\
    \ {\n        if (vowels.indexOf(char) !== -1) {\n            if (consonants.indexOf(prev_char)\
    \ !== -1 && consonants.indexOf(next_char) !== -1) {\n                if (char_index\
    \ < closest_vowel_index) {\n                    closest_vowel_index = char_index;\n\
    \                    result = char;\n                }\n            }\n      \
    \  }\n        prev_char = char;\n        char_index++;\n        next_char = word_arr[char_index];\n\
    \    }\n    return result;\n}\n", "    let vowels = \"aeiouAEIOU\";\n    let closestVowel\
    \ = \"\";\n    let counter = 0;\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel =\
    \ word[i];\n            counter++;\n        }\n        if (counter === 2) {\n\
    \            break;\n        }\n    }\n    return closestVowel;\n}", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let letter = \"\";\n    let\
    \ result = \"\";\n    let previous = \"\";\n    let next = \"\";\n    let counter\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        letter = word[i];\n\
    \        if (vowels.indexOf(letter) != -1) {\n            result = letter;\n \
    \           break;\n        }\n        counter++;\n    }\n    if (counter == word.length)\
    \ {\n        return \"\";\n    }\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        previous = word[i - 1];\n        next = word[i + 1];\n        if\
    \ (vowels.indexOf(next) == -1 && vowels.indexOf(previous) == -1) {\n         \
    \   return result;\n        }\n    }\n    return \"\";\n}\n", "    // Your code\
    \ here\n    return \"\";\n}\n\n", "    let vowel = {\n        a: 0,\n        e:\
    \ 0,\n        i: 0,\n        o: 0,\n        u: 0,\n        A: 0,\n        E: 0,\n\
    \        I: 0,\n        O: 0,\n        U: 0\n    };\n    let consonant = {\n \
    \       b: 0,\n        c: 0,\n        d: 0,\n        f: 0,\n        g: 0,\n  \
    \      h: 0,\n        j: 0,\n        k: 0,\n        l: 0,\n        m: 0,\n   \
    \     n: 0,\n        p: 0,\n        q: 0,\n        r: 0,\n        s: 0,\n    \
    \    t: 0,\n        v: 0,\n        w: 0,\n        x: 0,\n        y: 0,\n     \
    \   z: 0,\n        B: 0,\n        C: 0,\n        D: 0,\n        F: 0,\n      \
    \  G: 0,\n        H: 0,\n        J: 0,\n        K: 0,\n        L: 0,\n       \
    \ M: 0,\n        N: 0,\n        P: 0,\n        Q: 0,\n        R: 0,\n        S:\
    \ 0,\n        T: 0,\n        V: 0,\n        W: 0,\n        X: 0,\n        Y: 0,\n\
    \        Z: 0\n    };\n    let count = 0;\n    let conCount = 0;\n    let vowCount\
    \ = 0;\n    let pre = '';\n    let v = '';\n    for (let i = 0; i < word.length;\
    \ i++) {\n        let s = word[i];\n        if (s in vowel) {\n            vowCount++;\n\
    \            if (vowCount === 1) {\n                v = word[i];\n           \
    \ }\n            pre = '';\n            count = 0;\n        } else if (s in consonant)\
    \ {\n            conCount++;\n            count++;\n            if (pre === 'con')\
    \ {\n                pre = '';\n                break;\n            }\n      \
    \      pre = 'con';\n        }\n    }\n    if (vowCount === 1 && conCount ===\
    \ 2", "  let closest: string = \"\";\n  const vowels: string[] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n  for (let i = word.length - 1; i >= 0; i--) {\n    if\
    \ (vowels.includes(word[i])) {\n      const consonant1: boolean =\n        !vowels.includes(word[i\
    \ - 1]) && word[i - 1] !== undefined;\n      const consonant2: boolean =\n   \
    \     !vowels.includes(word[i + 1]) && word[i + 1] !== undefined;\n      if (consonant1\
    \ && consonant2) {\n        closest = word[i];\n        break;\n      }\n    }\n\
    \  }\n  return closest;\n}\n", "  let ind = 0;\n  let res: string = \"\";\n  let\
    \ regex = /[aeiou]/i;\n  let vowel = \"\";\n  for (let i = word.length - 1; i\
    \ >= 0; i--) {\n    if (regex.test(word[i])) {\n      vowel = word[i];\n     \
    \ ind = i;\n      break;\n    }\n  }\n  if (vowel) {\n    if (ind - 1 >= 0 &&\
    \ ind + 1 < word.length) {\n      if (!regex.test(word[ind - 1]) && !regex.test(word[ind\
    \ + 1])) {\n        res = vowel;\n      }\n    }\n  }\n  return res;\n}\n", " \
    \   //your code here\n    let vowel = '';\n    let i = 0;\n    let count = 0;\n\
    \    let consonant = 0;\n    let word_s = word.split('');\n    for (i = word_s.length\
    \ - 1; i >= 0; i--) {\n        if (word_s[i] == 'a' || word_s[i] == 'e' || word_s[i]\
    \ == 'i' || word_s[i] == 'o' || word_s[i] == 'u' || word_s[i] == 'A' || word_s[i]\
    \ == 'E' || word_s[i] == 'I' || word_s[i] == 'O' || word_s[i] == 'U') {\n    \
    \        vowel = word_s[i];\n            count++;\n            if (count == 2)\
    \ {\n                break;\n            }\n        }\n        else {\n      \
    \      consonant++;\n        }\n    }\n    if (consonant >= 2) {\n        return\
    \ vowel;\n    }\n    else {\n        return '';\n    }\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "\tlet vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tlet consonants = ['b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R',\
    \ 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n\tlet revWord = word.split('').reverse().join('');\n\
    \tlet closestVowel = '';\n\tlet closestVowelIndex = 0;\n\tfor (let i = 0; i <\
    \ revWord.length; i++) {\n\t\tif (consonants.indexOf(revWord[i]) > -1) {\n\t\t\
    \tfor (let j = i + 1; j < revWord.length; j++) {\n\t\t\t\tif (vowels.indexOf(revWord[j])\
    \ > -1) {\n\t\t\t\t\tclosestVowel = revWord[j];\n\t\t\t\t\tclosestVowelIndex =\
    \ j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ closestVowel;\n}\n\nlet get_closest_vowel_v2 = (word: string): string => {\n\
    \tlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tlet consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D',", "  // TODO: Implement your code\
    \ here\n  let arr = []\n  word.split('').forEach((l, index) => {\n    let isVowel\
    \ = 'aeiou'.includes(l)\n    let isConsonant = 'bcdfghjklmnpqrstvwxyz'.includes(l)\n\
    \    if (isVowel && isConsonant) {\n      arr.push({ letter: l, index })\n   \
    \ }\n  })\n  let start = word.length\n  let end = 0\n  arr.forEach(element =>\
    \ {\n    start = element.index < start ? element.index : start\n    end = element.index\
    \ > end ? element.index : end\n  })\n  return start < end ? word[start] : ''\n\
    }\n", "    const word_arr = word.split('');\n    const vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    const min = 1000;\n\n    let vowel_index: number;\n    let min_index:\
    \ number;\n    let is_vowel: boolean;\n    for (let i = word_arr.length - 1; i\
    \ >= 0; i--) {\n        is_vowel = false;\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (word_arr[i] === vowels[j]) {\n                is_vowel\
    \ = true;\n                vowel_index = i;\n                break;\n        \
    \    }\n        }\n        if (is_vowel && (vowel_index - i) < min) {\n      \
    \      min_index = i;\n        }\n    }\n    return word_arr[min_index];\n}\n\
    console.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "    const vowels = 'aeiouAEIOU';\n    const cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    let result = '';\n    for (let i = word.length - 1; i >= 0; i--) {\n    \
    \    const current = word[i];\n        if (cons.indexOf(current) !== -1) {\n \
    \           let j = i + 1;\n            while (word[j] && cons.indexOf(word[j])\
    \ !== -1) {\n                j++;\n            }\n            if (vowels.indexOf(word[j])\
    \ !== -1) {\n                result = word[j];\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\n", "  const vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  let closest_vowel: string = \"\";\n  for (let\
    \ i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n \
    \     closest_vowel = word[i];\n      break;\n    }\n  }\n  return closest_vowel;\n\
    }\n", "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelLastIndex = vowels.length\
    \ - 1;\n  let vowelIndex = word.length - 1;\n  while (vowelIndex >= 0) {\n   \
    \ if (vowels.indexOf(word[vowelIndex]) >= 0) {\n      let lastVowel = vowels.indexOf(word[vowelIndex]);\n\
    \      let leftConsonantIndex = vowelIndex - 1;\n      let rightConsonantIndex\
    \ = vowelIndex + 1;\n      if (leftConsonantIndex >= 0 && vowels.indexOf(word[leftConsonantIndex])\
    \ < 0 &&\n        rightConsonantIndex < word.length && vowels.indexOf(word[rightConsonantIndex])\
    \ < 0) {\n        return word[vowelIndex];\n      }\n    }\n    vowelIndex--;\n\
    \  }\n  return '';\n}\n", "    return '';\n}\n", "    let vowels = 'aeiou';\n\
    \    let currentPosition = word.length - 1;\n    let closestVowel = '';\n    let\
    \ hasVowel = false;\n    let hasConsonant = false;\n    while (currentPosition\
    \ >= 0) {\n        if (vowels.indexOf(word[currentPosition]) > -1) {\n       \
    \     hasVowel = true;\n            closestVowel = word[currentPosition];\n  \
    \      } else {\n            hasConsonant = true;\n        }\n        if (hasVowel\
    \ && hasConsonant) {\n            return closestVowel;\n        }\n        currentPosition--;\n\
    \    }\n    return '';\n}", "    let vowel = \"aeiou\";\n    let i = word.length\
    \ - 1;\n    while (i >= 0) {\n        if (vowel.indexOf(word[i]) >= 0) {\n   \
    \         let current_vowel = word[i];\n            if (i > 0 && vowel.indexOf(word[i\
    \ - 1]) < 0) {\n                return current_vowel;\n            }\n       \
    \     if (i < word.length - 1 && vowel.indexOf(word[i + 1]) < 0) {\n         \
    \       return current_vowel;\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";\n}\n", "\tlet vowel = \"aeiouAEIOU\"\n\tlet lo = 0\n\tlet hi\
    \ = word.length - 1\n\tlet hasVowel = false\n\tlet idx = 0\n\twhile (lo < hi)\
    \ {\n\t\tif (vowel.indexOf(word[lo]) === -1) {\n\t\t\tif (vowel.indexOf(word[hi])\
    \ === -1) {\n\t\t\t\thi--\n\t\t\t} else {\n\t\t\t\thasVowel = true\n\t\t\t\tidx\
    \ = hi\n\t\t\t\tbreak\n\t\t\t}\n\t\t} else {\n\t\t\tif (vowel.indexOf(word[hi])\
    \ === -1) {\n\t\t\t\thasVowel = true\n\t\t\t\tidx = lo\n\t\t\t\tbreak\n\t\t\t\
    } else {\n\t\t\t\thasVowel = true\n\t\t\t\tidx = hi\n\t\t\t\tbreak\n\t\t\t}\n\t\
    \t}\n\t\tlo++\n\t}\n\tif (hasVowel) {\n\t\treturn word[idx]\n\t} else {\n\t\t\
    return \"\"\n\t}\n}\nconsole.log(get_closest_vowel(\"FULL\"))", "    var index:\
    \ number = 0;\n    for (var i = word.length - 1; i >= 0; i--) {\n        if (word[i]\
    \ == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i]\
    \ == \"u\") {\n            index = i;\n            break;\n        }\n    }\n\
    \    for (var i = index - 1; i >= 0; i--) {\n        if (word[i] == \"a\" || word[i]\
    \ == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"u\") {\n  \
    \          return \"\";\n        }\n    }\n    return word[index];\n}", "    //\
    \ Write your code here...\n}\n", "    // your code goes here.\n    var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelIndex = -1;\n    var isVowel\
    \ = false;\n    var count = 0;\n    var isConso = false;\n    for (var i = word.length\
    \ - 1; i >= 0; i--) {\n        for (var j = 0; j < vowels.length; j++) {\n   \
    \         if (word[i] == vowels[j]) {\n                isVowel = true;\n     \
    \           vowelIndex = i;\n                break;\n            }\n        }\n\
    \        if (isVowel) {\n            break;\n        }\n    }\n    if (isVowel)\
    \ {\n        for (var i = vowelIndex - 1; i >= 0; i--) {\n            if (word[i]\
    \ == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i]\
    \ == \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count % 2 == 0) {\n            return word[vowelIndex];\n        }\n    }\n\
    \    return \"\";\n}", "    // your code here\n    return '';\n}\n\n", "  let\
    \ vowels = \"aeiouAEIOU\";\n  for (let i = word.length - 1; i >= 0; i--) {\n \
    \   let index = vowels.indexOf(word[i]);\n    if (index >= 0) {\n      return\
    \ word[i];\n    }\n  }\n  return \"\";\n}\n", "  let vowels = \"aeiou\"\n  let\
    \ result = \"\"\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i]))\
    \ {\n      result = word[i]\n      break\n    }\n  }\n  return result\n}", "\t\
    let vowels = \"aeiou\";\n\tlet vowel: string = \"\";\n\tlet position: number =\
    \ word.length;\n\tfor (let i = word.length - 1; i >= 0; i--) {\n\t\tif (vowels.indexOf(word[i])\
    \ >= 0) {\n\t\t\tvowel = word[i];\n\t\t\tposition = i;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tfor (let i = position - 1; i >= 0; i--) {\n\t\tif (vowels.indexOf(word[i])\
    \ < 0) {\n\t\t\treturn vowel;\n\t\t}\n\t}\n\treturn \"\";\n}", "  let counter\
    \ = 0;\n  let vowels = 'aeiouAEIOU';\n  let wordArray = word.split('');\n  for\
    \ (let i = wordArray.length - 1; i >= 0; i--) {\n    if (vowels.indexOf(wordArray[i])\
    \ != -1) {\n      if (vowels.indexOf(wordArray[i - 1]) == -1 &&\n        vowels.indexOf(wordArray[i\
    \ + 1]) == -1) {\n        return wordArray[i];\n      }\n    }\n  }\n  return\
    \ '';\n}\n", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = [];\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            result.push(word[i]);\n        }\n        if (result.length\
    \ === 2) {\n            return result[0];\n        }\n    }\n    return '';\n\
    }\n", "    const vowel = \"aeiouAEIOU\";\n    const d = [];\n    const w = word.split(\"\
    \");\n    let r = \"\";\n    w.map((c, i) => {\n        if (i == 0) return;\n\
    \        if (vowel.indexOf(c) == -1) return;\n        let a = w.slice(0, i + 1).reverse();\n\
    \        let c_idx = a.findIndex(v => vowel.indexOf(v) == -1);\n        if (c_idx\
    \ == -1) {\n            return;\n        }\n        let diff = c_idx;\n      \
    \  a = a.slice(0, c_idx);\n        let idx = a.findIndex(v => vowel.indexOf(v)\
    \ == -1);\n        if (idx != -1) {\n            diff = c_idx - idx - 1;\n   \
    \     }\n        d.push({\n            ch: c,\n            idx: i,\n         \
    \   diff: diff\n        });\n    });\n    if (d.length == 0) return \"\";\n  \
    \  let idx = 0;\n    for (let i = 1; i < d.length; i++) {\n        if (d[i].diff\
    \ < d[idx].diff) {\n            idx = i;\n        }\n    }\n    return d[idx].ch;\n\
    }\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var word_arr = word.split('');\n\
    \  var right_index = word_arr.length - 1;\n  var left_index = word_arr.length\
    \ - 2;\n  var is_vowel = false;\n  var is_consonant = false;\n  for (var i = right_index;\
    \ i >= 0; i--) {\n    if (vowels.indexOf(word_arr[i]) !== -1) {\n      is_vowel\
    \ = true;\n      right_index = i;\n    }\n    if (vowels.indexOf(word_arr[i])\
    \ === -1) {\n      is_consonant = true;\n      left_index = i;\n    }\n    if\
    \ (is_vowel && is_consonant) {\n      break;\n    }\n  }\n  return is_vowel &&\
    \ is_consonant ? word_arr[right_index] : '';\n}\nconsole.log('get_closest_vowel(\"\
    yogurt\")', get_closest_vowel(\"yogurt\"));\nconsole.log('get_closest_vowel(\"\
    FULL\")', get_closest_vowel(\"FULL\"));\nconsole.log('get_closest_vowel(\"quick\"\
    )', get_closest_vowel(\"quick\"));\nconsole.log('get_closest_vowel(\"ab\")', get_closest_vowel(\"\
    ab\"));\nconsole.log('get_closest_vowel(\"z\")', get_closest_vowel(\"z\"));\n\
    console.log('get_closest_vowel(\"aoiuaia\")', get_closest_vowel(\"aoiuaia\"));\n\
    console.log('get_closest_vowel(\"ic\")', get_closest_vowel(\"ic\"));\n", "   \
    \ // YOUR CODE GOES HERE\n    return \"\";\n}", "    let chars = word.split('').reverse();\n\
    \    let index = 1;\n    while (index < chars.length) {\n        if (is_vowel(chars[index])\
    \ && !is_vowel(chars[index - 1])) {\n            return chars[index];\n      \
    \  }\n        index += 1;\n    }\n    return '';\n}\n", "    const vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelFound = \"\";\n    let consonantCount\
    \ = 0;\n    let index = word.length - 1;\n    while (index >= 0) {\n        if\
    \ (vowels.indexOf(word[index]) >= 0) {\n            if (consonantCount == 2) {\n\
    \                vowelFound = word[index];\n                break;\n         \
    \   }\n            consonantCount = 0;\n        } else {\n            consonantCount++;\n\
    \        }\n        index--;\n    }\n    return vowelFound;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "  const vowels = \"aeiou\"\
    ;\n  const isVowel = (ch: string): boolean => vowels.indexOf(ch) !== -1;\n  let\
    \ i = word.length - 1;\n  while (i >= 0) {\n    const ch = word[i];\n    if (isVowel(ch))\
    \ {\n      if (i > 0 && !isVowel(word[i - 1])) {\n        return ch;\n      }\n\
    \    } else {\n      if (i > 0 && isVowel(word[i - 1])) {\n        return word[i\
    \ - 1];\n      }\n    }\n    i--;\n  }\n  return \"\";\n}\n", "    // Get the\
    \ right most vowel\n    const get_right_most_vowel = (word: string): string =>\
    \ {\n        for (let i = word.length - 1; i >= 0; i--) {\n            if ([\"\
    a\", \"e\", \"i\", \"o\", \"u\"].includes(word[i])) {\n                return\
    \ word[i];\n            }\n        }\n        return \"\";\n    };\n\n    // Find\
    \ all vowels\n    const vowels = word.split(\"\").filter(\n        (l) => [\"\
    a\", \"e\", \"i\", \"o\", \"u\"].includes(l)\n    );\n\n    // Check if there\
    \ are any vowels\n    if (vowels.length === 0) {\n        return \"\";\n    }\n\
    \n    // Check if there is a vowel in the middle\n    if (vowels.length > 1) {\n\
    \        return get_right_most_vowel(vowels.join(\"\"));\n    }\n\n    // Check\
    \ if there is only 1 vowel\n    const vowel = vowels[0];\n    const search = word.split(\"\
    \").reverse().join(\"\");\n    const index = search.indexOf(vowel);\n    if (index\
    \ === 0) {\n        return \"\";\n    }\n    const right = search.slice(0, index);\n\
    \    const left = search.slice(index + 1);\n    if (right.match(/[^aeiou]/i) &&\
    \ left.match(/[^aeiou]/i)) {\n        return vowel;\n    }\n    return \"\";\n\
    }\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i =\
    \ word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n\
    \            if (vowels.indexOf(word[i - 1]) < 0 && vowels.indexOf(word[i + 1])\
    \ < 0) {\n                return word[i];\n            }\n        }\n    }\n \
    \   return \"\";\n}\n", "  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \  const cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"];\n  const wordArr = word.split(\"\");\n  const vowelCount = wordArr.filter(e\
    \ => vowels.includes(e)).length;\n  const vowelIdx = wordArr.findIndex(e => vowels.includes(e));\n\
    \  const consIdx = wordArr.findIndex(e => cons.includes(e));\n  let closestVowel;\n\
    \  console.log(vowelCount, vowelIdx, consIdx)\n  if(vowelCount < 2 || vowelIdx\
    \ < consIdx) {\n    return \"\";\n  } else {\n    for(let i = 0; i < wordArr.length;\
    \ i++) {\n      if(cons.includes(wordArr[i]) && vowels.includes(wordArr[i+1]))\
    \ {\n        closestVowel = wordArr[i+1];\n      }\n    }\n  }\n  return closestVowel;\n\
    }\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let closest = '';\n\
    \    let distance = 0;\n    let lastConsonant = '';\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (lastConsonant) {\n            if (vowels.includes(word[i]))\
    \ {\n                closest = word[i];\n                distance = word.length\
    \ - 1 - i;\n                break;\n            }\n        } else {\n        \
    \    if (!vowels.includes(word[i])) {\n                lastConsonant = word[i];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let vowels =\
    \ \"aeiouAEIOU\";\n    let i: number = word.length - 1;\n    while (i >= 0) {\n\
    \        if (vowels.indexOf(word[i]) >= 0) {\n            return word[i];\n  \
    \      }\n        i -= 1;\n    }\n    return \"\";\n}\n", "\tlet target_char:\
    \ string = \"\",\n\t\t\tcurrent_char: string = \"\",\n\t\t\tvowels: string[] =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n\t\
    for (let i = word.length - 1; i >= 0; i--) {\n\t\tcurrent_char = word[i];\n\t\t\
    if (vowels.indexOf(current_char) !== -1) {\n\t\t\ttarget_char = current_char;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn target_char;\n}", "    let bestVowel: string\
    \ = \"\";\n    let bestDistance: number = word.length;\n    for (let c of word)\
    \ {\n        if (isVowel(c)) {\n            let vowelPosition: number = word.indexOf(c);\n\
    \            let distance: number = word.length - 1 - vowelPosition;\n       \
    \     if (distance > 0 && distance < bestDistance) {\n                bestVowel\
    \ = c;\n                bestDistance = distance;\n            }\n        }\n \
    \   }\n    return bestVowel;\n}\n\nlet word: string = \"yogurt\";\nconsole.log(get_closest_vowel(word));\n\
    \nword = \"FULL\";\nconsole.log(get_closest_vowel(word));\n\nword = \"quick\"\
    ;\nconsole.log(get_closest_vowel(word));\n\nword = \"ab\";\nconsole.log(get_closest_vowel(word));\n",
  "    let result = '';\n    let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    let vowels = 'aeiouAEIOU';\n    let wordArr = word.split('');\n    let newWord\
    \ = [];\n    wordArr.forEach(element => {\n        if (!consonants.includes(element))\
    \ {\n            newWord.push(element);\n        }\n    });\n    let newWordReverse\
    \ = newWord.reverse();\n    for (let i = 0; i < newWordReverse.length; i++) {\n\
    \        if (vowels.includes(newWordReverse[i])) {\n            result = newWordReverse[i];\n\
    \            break;\n        }\n    }\n    return result;\n}", "  // Your implementation\
    \ goes here\n  // Good luck\n  let vowels = 'AEIOU';\n  let wordArr = word.split('');\n\
    \  let close = '';\n  let closeArr = [];\n  let vowelsArr = [];\n  let result\
    \ = '';\n  for (let i = 0; i < wordArr.length; i++) {\n    if (vowels.indexOf(wordArr[i])\
    \ >= 0) {\n      vowelsArr.push(wordArr[i]);\n    }\n  }\n  if (vowelsArr.length\
    \ === 0) {\n    return '';\n  }\n  for (let i = 0; i < vowelsArr.length; i++)\
    \ {\n    close = word.split(vowelsArr[i]).pop();\n    closeArr.push(close);\n\
    \  }\n  let min = closeArr[0].length;\n  for (let i = 0; i < closeArr.length;\
    \ i++) {\n    if (closeArr[i].length < min) {\n      min = closeArr[i].length;\n\
    \      result = vowelsArr[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "    let closest = '';\n\
    \    let i = word.length - 1;\n    let c = 0;\n    let v = 0;\n    while (i >=\
    \ 0) {\n        if (is_vowel(word[i])) {\n            v = 1;\n            if (c)\
    \ {\n                closest = word[i];\n                break;\n            }\n\
    \        } else {\n            c = 1;\n        }\n        i--;\n    }\n    return\
    \ closest;\n}\n", "    let vowels = \"aeiou\";\n    let closest_vowel = \"\";\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            closest_vowel = word[i];\n            break;\n        }\n\
    \    }\n    return closest_vowel;\n}\n", "    let vowelRegExp = /[aeiouAEIOU]/;\n\
    \    let lastConsonantIndex = word.length - 1;\n    let nextConsonantIndex = lastConsonantIndex\
    \ - 1;\n    for (let i = lastConsonantIndex; i >= 0; i--) {\n        if (!vowelRegExp.test(word[i]))\
    \ {\n            lastConsonantIndex = i;\n            break;\n        }\n    }\n\
    \    for (let i = nextConsonantIndex; i >= 0; i--) {\n        if (!vowelRegExp.test(word[i]))\
    \ {\n            nextConsonantIndex = i;\n            break;\n        }\n    }\n\
    \    if (nextConsonantIndex == lastConsonantIndex - 1) {\n        return \"\"\
    ;\n    }\n    let closestVowelIndex = lastConsonantIndex;\n    for (let i = lastConsonantIndex\
    \ - 1; i > nextConsonantIndex; i--) {\n        if (vowelRegExp.test(word[i]))\
    \ {\n            closestVowelIndex = i;\n            break;\n        }\n    }\n\
    \    return word[closestVowelIndex];\n}\n", "  let vowels = ['a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'];\n  let i = 0;\n  let consCount = 0;\n  for (i\
    \ = word.length - 1; i >= 0; i--) {\n    if (vowels.indexOf(word[i]) !== -1) {\n\
    \      if (consCount === 2) {\n        return word[i];\n      }\n      consCount\
    \ = 0;\n    } else {\n      consCount++;\n    }\n  }\n  return '';\n}\n", "  \
    \  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word_vowels\
    \ = [];\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            word_vowels.push(word[i]);\n        }\n    }\n    if (word_vowels.length\
    \ === 0) {\n        return \"\";\n    }\n    return word_vowels[word_vowels.length\
    \ - 1];\n}\n", "  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let found\
    \ = 0;\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i]))\
    \ {\n      found = i;\n      if (vowels.includes(word[i + 1])) {\n        found\
    \ += 1;\n      }\n      break;\n    }\n  }\n  return found != 0 ? word[found]\
    \ : \"\";\n}\n", "  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowels_array\
    \ = [];\n  let consonants_array = [];\n  const word_array = word.split('');\n\
    \  const length = word_array.length;\n  const find_vowel = () => {\n    for (let\
    \ i = length - 1; i >= 0; i--) {\n      if (vowels.includes(word_array[i])) {\n\
    \        vowels_array.push(word_array[i]);\n      } else {\n        consonants_array.push(word_array[i]);\n\
    \      }\n    }\n  }\n  const contains_vowel = () => {\n    for (let i = 0; i\
    \ < length; i++) {\n      if (vowels.includes(word_array[i])) {\n        return\
    \ true;\n      }\n    }\n    return false;\n  }\n  if (contains_vowel()) {\n \
    \   find_vowel();\n    for (let i = 0; i < vowels_array.length; i++) {\n     \
    \ if (consonants_array.includes(vowels_array[i - 1]) && consonants_array.includes(vowels_array[i\
    \ + 1])) {\n        return vowels_array[i];\n      }\n    }\n  }\n  return '';\n\
    }\n", "    let vowels = \"aeiouAEIOU\";\n    let target = 0;\n    let found =\
    \ false;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ === -1) {\n            target = i;\n            break;\n        }\n    }\n \
    \   for (let i = target; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !==\
    \ -1) {\n            found = true;\n            return word[i];\n        }\n \
    \   }\n    if (!found) {\n        return \"\";\n    }\n}\n\n", "    var vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    for (var i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) != -1) {\n        \
    \    if (i == word.length - 1) {\n                return \"\";\n            }\n\
    \            else if (vowels.indexOf(word[i - 1]) == -1 && vowels.indexOf(word[i\
    \ + 1]) == -1) {\n                return word[i];\n            }\n        }\n\
    \    }\n    return \"\";\n}\n", "    let found = '';\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u') {\n            found = word[i];\n\
    \            return found;\n        }\n    }\n    return found;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    const vowels = \"\
    aeiouAEIOU\";\n    const letters = word.split(\"\");\n    let result = \"\";\n\
    \    for (let i = letters.length - 1; i >= 0; i--) {\n        const l = letters[i];\n\
    \        if (vowels.indexOf(l) !== -1) {\n            result = l;\n          \
    \  for (let j = i - 1; j >= 0; j--) {\n                const l2 = letters[j];\n\
    \                if (vowels.indexOf(l2) === -1) {\n                    return\
    \ result;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\n", "    const vowels = \"AEIOU\";\n    let lastConsonantIndex = -1;\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ === -1) {\n            lastConsonantIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = lastConsonantIndex - 1; i >= 0; i--) {\n        if\
    \ (vowels.indexOf(word[i]) !== -1) {\n            return word[i];\n        }\n\
    \    }\n    return \"\";\n}\n", "    let vowels = 'aeiouAEIOU';\n    let result\
    \ = '';\n    let rightIndex: number;\n    let leftIndex: number;\n    let finalIndex:\
    \ number;\n    let temp: number;\n    let length = word.length;\n    let i: number;\n\
    \    for (i = length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            rightIndex = i;\n            break;\n        }\n    }\n\
    \    for (i = rightIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ === -1) {\n            leftIndex = i;\n            break;\n        }\n    }\n\
    \    temp = length - rightIndex;\n    finalIndex = leftIndex + temp;\n    if (finalIndex\
    \ === length) {\n        return result;\n    }\n    else {\n        result = word[finalIndex];\n\
    \        return result;\n    }\n}\nconsole.log(get_closest_vowel(\"quick\"));\n\
    \n", "  return word.split('').reverse().join('').replace(/([^aeiou])[aeiou](?=[^aeiou])/i,\
    \ '$1')[0] || '';\n}\n", "    const vowels = \"aeiouAEIOU\";\n    const letters\
    \ = word.split(\"\");\n    for (let i = letters.length - 1; i >= 0; i--) {\n \
    \       if (vowels.indexOf(letters[i]) >= 0) {\n            if (i === letters.length\
    \ - 1) {\n                continue;\n            }\n            else if (vowels.indexOf(letters[i\
    \ + 1]) < 0) {\n                return letters[i];\n            }\n        }\n\
    \    }\n    return \"\";\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let answer = '';\n \
    \ for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])\
    \ && !vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n     \
    \ answer = word[i];\n      break;\n    }\n  }\n  return answer;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "  let vowel: string =\
    \ \"\";\n  let consonant: string = \"\";\n  for (let i = word.length - 1; i >=\
    \ 0; i--) {\n    if (!isVowel(word[i])) {\n      consonant = word[i];\n      for\
    \ (let j = i - 1; j >= 0; j--) {\n        if (isVowel(word[j])) {\n          vowel\
    \ = word[j];\n          break;\n        }\n      }\n      break;\n    }\n  }\n\
    \  return vowel;\n}", "  if (!word) {\n    return '';\n  }\n  let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n  let cons = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  let prevCons\
    \ = cons.indexOf(word[word.length - 1]) >= 0;\n  let nextCons = cons.indexOf(word[word.length\
    \ - 2]) >= 0;\n  let prevVowel = vowels.indexOf(word[word.length - 1]) >= 0;\n\
    \  let nextVowel = vowels.indexOf(word[word.length - 2]) >= 0;\n  if (nextCons\
    \ && prevVowel) {\n    return word[word.length - 1];\n  }\n  if (prevCons && nextVowel)\
    \ {\n    return word[word.length - 2];\n  }\n  return '';\n}\n", "    let vowels\
    \ = \"aeiou\";\n    let index = -1;\n    for (let i = word.length - 1; i >= 0;\
    \ i--) {\n        if (vowels.indexOf(word[i]) > -1) {\n            index = i;\n\
    \            break;\n        }\n    }\n    if (index < 0) {\n        return \"\
    \";\n    }\n    if (index === word.length - 1) {\n        return \"\";\n    }\n\
    \    if (vowels.indexOf(word[index + 1]) > -1) {\n        return \"\";\n    }\n\
    \    return word[index];\n}\n", "  // In this problem, \"vowel\" is a-e-i-o-u\n\
    \  // and \"consonant\" is other letters\n  // we check if the right side of the\
    \ word is vowels, then return empty string\n  if (/[a-e-i-o-u]$/.test(word)) {\n\
    \    return \"\";\n  }\n  // we use this condition to set up the left-side-boundary,\n\
    \  // the left side boundary is that letter that will be compared with the\n \
    \ // current character\n  // we compare the left side boundary with current character\
    \ from the last\n  // character of the word to the first character of the word\n\
    \  for (let i = word.length - 1; i >= 0; i--) {\n    if (/[a-e-i-o-u]/.test(word[i]))\
    \ {\n      return word[i];\n    }\n  }\n  return \"\";\n}\n", "  const vowel =\
    \ ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const word_arr = word.split('');\n\
    \  let result = [];\n  word_arr.reduce((previous, current, index) => {\n    if\
    \ (vowel.includes(current) && !vowel.includes(previous) && !vowel.includes(word_arr[index\
    \ + 1])) {\n      result.push(current);\n    }\n    return current;\n  });\n \
    \ return result.length ? result[result.length - 1] : '';\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "  const vowels = \"AEIOUaeiou\"\
    ;\n  let targetIdx = -1;\n  let targetIdx_ = -1;\n  let i = word.length - 1;\n\
    \  while (i > 0) {\n    if (vowels.indexOf(word[i]) !== -1) {\n      targetIdx\
    \ = i;\n      if (vowels.indexOf(word[i - 1]) === -1) {\n        break;\n    \
    \  }\n    }\n    --i;\n  }\n  if (targetIdx === -1) {\n    return \"\";\n  }\n\
    \  i = word.length - 1;\n  while (i > 0) {\n    if (vowels.indexOf(word[i]) !==\
    \ -1) {\n      targetIdx_ = i;\n      if (vowels.indexOf(word[i - 1]) === -1)\
    \ {\n        break;\n      }\n    }\n    --i;\n  }\n  if (targetIdx === -1) {\n\
    \    return \"\";\n  }\n  if (Math.abs(targetIdx - word.length) > Math.abs(targetIdx_\
    \ - word.length)) {\n    return word[targetIdx_];\n  }\n  return word[targetIdx];\n\
    }\n", "    let consonants: Array<string> = [ 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' ];\n  \
    \  let vowels: Array<string> = [ 'a', 'e', 'i', 'o', 'u' ];\n    let index: number\
    \ = 0;\n    let vowel = '';\n    for (let i = 0; i < word.length; i++) {\n   \
    \     for (let j = 0; j < consonants.length; j++) {\n            if (word[i] ===\
    \ consonants[j]) {\n                for (let k = 0; k < vowels.length; k++) {\n\
    \                    if (word[i + 1] === vowels[k]) {\n                      \
    \  vowel = word[i + 1];\n                        break;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return vowel;\n}\n",
  "  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let foundVowel = '';\n  for (let\
    \ i = word.length; i > 0; i--) {\n    const char = word[i];\n    if (vowels.includes(char))\
    \ {\n      if (foundVowel !== '') {\n        return foundVowel;\n      }\n   \
    \ } else {\n      foundVowel = char;\n    }\n  }\n  return '';\n}", "    var output\
    \ = \"\";\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var sVowels\
    \ = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    var firstVowel = \"\";\n    var\
    \ lastVowel = \"\";\n    for (var i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            firstVowel = word[i];\n            break;\n        }\n\
    \    }\n    for (var i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            lastVowel = word[i];\n            break;\n        }\n\
    \    }\n    if (firstVowel == \"\" || lastVowel == \"\") {\n        return \"\"\
    ;\n    } else {\n        var cons = word.split(firstVowel);\n        cons = cons[cons.length\
    \ - 1].split(lastVowel);\n        if (cons.length == 1) {\n            return\
    \ \"\";\n        } else {\n            if (vowels.indexOf(lastVowel) != -1) {\n\
    \                output = lastVowel;\n            } else {\n                output\
    \ = firstVowel;\n            }\n        }\n    }\n    return output;\n}\n", " \
    \   const regex = /[aeiou]/gi;\n    const regexConst = /[bcdfghjklmnpqrstvwxz]/gi;\n\
    \    const arrVowels = word.match(regex);\n    const arrConst = word.match(regexConst);\n\
    \    let closeVowel: string = \"\";\n    if (arrVowels === null) {\n        return\
    \ closeVowel;\n    }\n    if (arrConst === null) {\n        return closeVowel;\n\
    \    }\n    let i = arrConst.length - 1;\n    let j = arrVowels.length - 1;\n\
    \    while (j >= 0) {\n        if (arrConst[i] < arrVowels[j]) {\n           \
    \ closeVowel = arrVowels[j];\n            return closeVowel;\n        }\n    \
    \    j--;\n    }\n    return closeVowel;\n}\n", "    let vowels = \"aeiouAEIOU\"\
    ;\n    let lastConsonantIndex = -1;\n    let closestVowel = \"\";\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >=\
    \ 0) {\n            if (lastConsonantIndex >= 0) {\n                closestVowel\
    \ = word[i];\n                break;\n            }\n        } else {\n      \
    \      lastConsonantIndex = i;\n        }\n    }\n    return closestVowel;\n}\n",
  "  const vowels = 'aeiou';\n  const wordArray = word.split('');\n  let consonantCount\
    \ = 0;\n  const vowelArray = wordArray.map((char, idx) => {\n    if (vowels.indexOf(char)\
    \ === -1) {\n      consonantCount++;\n    } else {\n      consonantCount = 0;\n\
    \    }\n    if (consonantCount === 2) {\n      return idx;\n    }\n  });\n  return\
    \ vowelArray.filter(vowel => vowel).length ? wordArray[vowelArray.filter(vowel\
    \ => vowel)[0]] : '';\n}\n", "    var vowel: string = \"aeiou\";\n    for (var\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowel.indexOf(word[i]) >= 0)\
    \ {\n            if (i == word.length - 1 || vowel.indexOf(word[i + 1]) >= 0)\
    \ {\n                continue;\n            }\n            else {\n          \
    \      return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n\
    console.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "    let vowels = \"aeiou\";\n    let found_index = null;\n    let\
    \ word_rev = word.split(\"\").reverse().join(\"\");\n    for (let i = 0; i < word_rev.length;\
    \ i++) {\n        if (vowels.indexOf(word_rev[i]) !== -1) {\n            found_index\
    \ = i;\n            break;\n        }\n    }\n    if (found_index === null) {\n\
    \        return \"\";\n    } else {\n        return word_rev[found_index];\n \
    \   }\n}", "    let result: string = \"\";\n    let vowels: string[] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) != -1) {\n            result = word[i];\n\
    \            break;\n        }\n    }\n    return result;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "  const vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  const w = word.split(\"\");\n  const res = w.filter((e,\
    \ i) => i > 0 && vowels.includes(e) && !vowels.includes(w[i - 1]));\n  return\
    \ res.length > 0 ? res[0] : \"\";\n}\n", "    const vowel = ['a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'];\n    const vowelPosition: number[] = [];\n  \
    \  word.split('').forEach((elem, index) => {\n        if (vowel.includes(elem))\
    \ {\n            vowelPosition.push(index);\n        }\n    });\n    for (let\
    \ i = vowelPosition.length - 1; i >= 0; i--) {\n        const vowelIndex = vowelPosition[i];\n\
    \        if (vowelIndex === word.length - 1) {\n            continue;\n      \
    \  }\n        const previousLetter = word[vowelIndex - 1];\n        const nextLetter\
    \ = word[vowelIndex + 1];\n        if (!vowel.includes(previousLetter) && !vowel.includes(nextLetter))\
    \ {\n            return word[vowelIndex];\n        }\n    }\n    return '';\n\
    }\n\nexport { get_closest_vowel };", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let last = '';\n    let vowels_ar = [];\n    let cons_ar = [];\n    word.split('').forEach(char\
    \ => {\n        if(vowels.includes(char)) {\n            vowels_ar.push(char);\n\
    \        }\n        else {\n            cons_ar.push(char);\n        }\n    });\n\
    \    // console.log(vowels_ar, cons_ar);\n    let cons_ar_rev = cons_ar.reverse();\n\
    \    let count = 0;\n    for(let i = 0; i < cons_ar_rev.length; i++) {\n     \
    \   if(vowels_ar.includes(cons_ar_rev[i])) {\n            return cons_ar_rev[i];\n\
    \        }\n        count++;\n    }\n    return '';\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    let vowels = \"AEIOUaeiou\"\
    ;\n    let result = \"\";\n    let isCon = false;\n    let isVow = false;\n  \
    \  let con = \"\";\n    let vow = \"\";\n    let distance = word.length;\n   \
    \ word = word.split(\"\").reverse().join(\"\");\n    for (let i = 0; i < word.length;\
    \ i++) {\n        let character = word[i];\n        if (vowels.indexOf(character)\
    \ != -1) {\n            isVow = true;\n            vow = character;\n        }\
    \ else {\n            isCon = true;\n            con = character;\n        }\n\
    \        if (isCon && isVow) {\n            if (i < distance) {\n            \
    \    distance = i;\n                result = vow;\n            }\n           \
    \ isCon = false;\n            isVow = false;\n        }\n    }\n    return result;\n\
    }\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "\t// your code here\n}\n", "  const vowels = new Set(['a', 'e', 'i',\
    \ 'o', 'u']);\n  let vowel = \"\";\n  let index = word.length - 1;\n  while (index\
    \ >= 0) {\n    if (vowels.has(word[index])) {\n      vowel = word[index];\n  \
    \    if (index + 1 < word.length && !vowels.has(word[index + 1])) break;\n   \
    \ }\n    index--;\n  }\n  return vowel;\n}\n", "    const vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    let result = '';\n    let shortest = word.length;\n   \
    \ let index = word.length - 1;\n    while (index >= 0) {\n        const current\
    \ = word[index];\n        if (vowels.includes(current)) {\n            if (index\
    \ > 0 && index < word.length - 1) {\n                if (!vowels.includes(word[index\
    \ - 1]) && !vowels.includes(word[index + 1])) {\n                    if (index\
    \ < shortest) {\n                        shortest = index;\n                 \
    \       result = current;\n                    }\n                }\n        \
    \    }\n        }\n        index--;\n    }\n    return result;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "  let closestVowel = '';\n\
    \  const VOWELS = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = word.length - 1;\
    \ i >= 0; i--) {\n    if (VOWELS.includes(word[i])) {\n      closestVowel = word[i];\n\
    \      break;\n    }\n  }\n  return closestVowel;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "    const vowels = 'aeiouAEIOU';\n\
    \    const consoants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (consoants.indexOf(word[i])\
    \ !== -1) {\n            for (let j = i - 1; j >= 0; j--) {\n                if\
    \ (vowels.indexOf(word[j]) !== -1) {\n                    return word[j];\n  \
    \              }\n            }\n        }\n    }\n    return '';\n}\n\nexport\
    \ { find_second_max, get_closest_vowel };", "    const vowels = \"aeiou\";\n \
    \   const letters = word.split(\"\");\n    let result = \"\";\n    let found_consonant\
    \ = false;\n    let distance = Infinity;\n    let current_distance;\n    for (let\
    \ i = letters.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(letters[i])\
    \ !== -1) {\n            if (found_consonant) {\n                current_distance\
    \ = letters.length - 1 - i;\n                if (current_distance < distance)\
    \ {\n                    distance = current_distance;\n                    result\
    \ = letters[i];\n                }\n            }\n        } else {\n        \
    \    found_consonant = true;\n        }\n    }\n    return result;\n}\n", "  \
    \  let vowels = \"aeiou\"\n    let closest_vowel = \"\";\n    let position = 0;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            closest_vowel = word[i];\n            position = i;\n \
    \           break;\n        }\n    }\n    if (closest_vowel == \"\") {\n     \
    \   return \"\";\n    } else {\n        for (let i = position - 1; i >= 0; i--)\
    \ {\n            if (vowels.indexOf(word[i]) < 0) {\n                for (let\
    \ j = position + 1; j < word.length; j++) {\n                    if (vowels.indexOf(word[j])\
    \ < 0) {\n                        return closest_vowel;\n                    }\n\
    \                }\n            } else {\n                closest_vowel = \"\"\
    ;\n            }\n        }\n    }\n    return closest_vowel;\n}\n", "    const\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    word = word.toLowerCase();\n\
    \    let result = \"\";\n    let count = 0;\n    let i = word.length - 1;\n  \
    \  while (i >= 0) {\n        if (vowels.includes(word[i])) {\n            result\
    \ = word[i];\n            count++;\n        }\n        if (count === 2) {\n  \
    \          break;\n        }\n        i--;\n    }\n    return count === 2 ? result\
    \ : \"\";\n}\n\n", "    // your code goes here\n    let vowels = \"AEIOUaeiou\"\
    ;\n    let index = -1;\n    let i = word.length - 1;\n    while (i >= 0) {\n \
    \       if (vowels.indexOf(word[i]) >= 0) {\n            index = i;\n        \
    \    break;\n        }\n        i--;\n    }\n    i = index - 1;\n    while (i\
    \ >= 0) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            index = -1;\n\
    \            break;\n        }\n        i--;\n    }\n    if (index < 0) {\n  \
    \      return \"\";\n    }\n    return word[index];\n}\n", "  const vowels = ['a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q',\
    \ 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n  let foundVowel = \"\";\n  for (let\
    \ i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n \
    \     if (consonants.includes(word[i - 1]) && consonants.includes(word[i + 1]))\
    \ {\n        foundVowel = word[i];\n        break;\n      }\n    }\n  }\n  return\
    \ foundVowel;\n}\n", "  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \  const index = word.split(\"\").reverse().findIndex(char => vowels.includes(char));\n\
    \  return (index === -1 || word.length - index < 2) ? \"\" : word[word.length\
    \ - index - 1];\n}", "  let closest_vowel = \"\";\n  const vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n  for (let i = word.length - 1; i >= 0; i--) {\n \
    \   if (word[i] === \"a\" || word[i] === \"e\" || word[i] === \"i\" || word[i]\
    \ === \"o\" || word[i] === \"u\") {\n      closest_vowel = word[i];\n      if\
    \ (i !== 0 && i !== word.length - 1) {\n        if (word[i - 1] !== \"a\" && word[i\
    \ - 1] !== \"e\" && word[i - 1] !== \"i\" && word[i - 1] !== \"o\" && word[i -\
    \ 1] !== \"u\" && word[i + 1] !== \"a\" && word[i + 1] !== \"e\" && word[i + 1]\
    \ !== \"i\" && word[i + 1] !== \"o\" && word[i + 1] !== \"u\") {\n          return\
    \ closest_vowel;\n        }\n      }\n    }\n  }\n  return closest_vowel;\n}\n",
  "    let closest_vowel = \"\";\n    let right_vowel_found = false;\n    let right_index\
    \ = 0;\n    let vowels = \"aeiou\";\n    let no_consonants = true;\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) ==\
    \ -1) {\n            no_consonants = false;\n            if (right_vowel_found)\
    \ {\n                break;\n            }\n        } else {\n            if (no_consonants)\
    \ {\n                continue;\n            }\n            right_vowel_found =\
    \ true;\n            right_index = i;\n        }\n    }\n    let left_vowel_found\
    \ = false;\n    let left_index = 0;\n    for (let i = 0; i < word.length; i++)\
    \ {\n        if (vowels.indexOf(word[i]) == -1) {\n            if (left_vowel_found)\
    \ {\n                break;\n            }\n        } else {\n            left_vowel_found\
    \ = true;\n            left_index = i;\n        }\n    }\n    let right_distance\
    \ = word.length - right_index;\n    let left_distance = left_index + 1;\n    if\
    \ (right_distance > left_distance) {\n        closest_vowel = word[left_index];\n\
    \    } else {\n        closest_vowel = word[right_index];\n    }\n    return closest_vowel;\n\
    }\n", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        const char = word[i];\n        if (vowels.includes(char))\
    \ {\n            if (i === word.length - 1) {\n                return '';\n  \
    \          }\n            if (vowels.includes(word[i + 1])) {\n              \
    \  return '';\n            }\n            return char;\n        }\n    }\n   \
    \ return '';\n}\n", "    let result = \"\";\n    let index: number = 0;\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (isVowel(word[i])) {\n\
    \            index = i;\n            break;\n        }\n    }\n    if (index ==\
    \ 0) {\n        return result;\n    }\n    for (let i = index - 1; i >= 0; i--)\
    \ {\n        if (!isVowel(word[i])) {\n            result = word[index];\n   \
    \         break;\n        }\n    }\n    return result;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    let arr = word.split('').reverse()\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == 'a' || arr[i]\
    \ == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n            if\
    \ (arr[i + 1] != 'a' && arr[i + 1] != 'e' && arr[i + 1] != 'i' && arr[i + 1] !=\
    \ 'o' && arr[i + 1] != 'u') {\n                return arr[i]\n            }\n\
    \        }\n    }\n    return ''\n}\n", "    let closestVowel = '';\n    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = word.length - 1; i >=\
    \ 0; i--) {\n        if (vowels.includes(word[i]) && !vowels.includes(word[i -\
    \ 1])) {\n            closestVowel = word[i];\n            break;\n        }\n\
    \    }\n    return closestVowel;\n}\nconsole.log(get_closest_vowel(\"quick\"));",
  "  let vowelSet = new Set([\"a\", \"e\", \"i\", \"o\", \"u\"]);\n  let cvowel: string\
    \ = \"\";\n  let c1: string = \"\";\n  let c2: string = \"\";\n  for (let i =\
    \ word.length - 1; i >= 0; i--) {\n    if (c1 === \"\" && !vowelSet.has(word[i]))\
    \ {\n      c1 = word[i];\n    } else if (c1 !== \"\" && !vowelSet.has(word[i]))\
    \ {\n      c2 = word[i];\n      break;\n    } else if (c1 !== \"\" && vowelSet.has(word[i]))\
    \ {\n      cvowel = word[i];\n      break;\n    }\n  }\n  return cvowel;\n}\n",
  "    // const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    // let consonants\
    \ = [];\n    // for (let i = 0; i < word.length; i++) {\n    //     if (!vowels.includes(word[i]))\
    \ {\n    //         consonants.push(word[i]);\n    //     }\n    // }\n    //\
    \ for (let i = word.length - 1; i >= 0; i--) {\n    //     if (vowels.includes(word[i]))\
    \ {\n    //         if (consonants.length === 0) {\n    //             return\
    \ word[i];\n    //         }\n    //         consonants.splice(consonants.length\
    \ - 1, 1);\n    //     }\n    // }\n    // return consonants.length === 0 ? \"\
    \" : word[word.length - consonants.length - 1];\n    return word.split(\"\").reverse().find(char\
    \ => (word.match(/[aeiou]/g) || []).includes(char)) || \"\";\n}\n", "  const VOWELS\
    \ = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = word.length - 1; i >=\
    \ 0; i--) {\n    if (VOWELS.indexOf(word[i]) !== -1) {\n      result = word[i];\n\
    \      break;\n    }\n  }\n  return result;\n}\n", "\tlet vowels = {\n\t\t\"a\"\
    : true,\n\t\t\"e\": true,\n\t\t\"i\": true,\n\t\t\"o\": true,\n\t\t\"u\": true,\n\
    \t\t\"A\": true,\n\t\t\"E\": true,\n\t\t\"I\": true,\n\t\t\"O\": true,\n\t\t\"\
    U\": true\n\t};\n\tlet w = word.split(\"\");\n\tlet c = \"\";\n\tlet closest =\
    \ \"\";\n\tfor (let i = w.length - 1; i >= 0; i--) {\n\t\tif (vowels[w[i]]) {\n\
    \t\t\tif (c === \"\") {\n\t\t\t\tclosest = w[i];\n\t\t\t} else {\n\t\t\t\treturn\
    \ w[i];\n\t\t\t}\n\t\t} else {\n\t\t\tc = w[i];\n\t\t}\n\t}\n\treturn closest;\n\
    }", "    let letters: string[] = word.split('');\n    let vowels: string[] = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    let letter_index = letters.length - 1;\n    let vowel_index\
    \ = vowels.length - 1;\n    let not_find_vowel = \"\";\n    let vowel = \"\";\n\
    \    let letter = \"\";\n    let is_end_of_word = false;\n    while (letter_index\
    \ > 0 && !is_end_of_word) {\n        letter = letters[letter_index];\n       \
    \ if (vowels.indexOf(letter) >= 0) {\n            vowel = letter;\n          \
    \  is_end_of_word = true;\n        }\n        letter_index--;\n    }\n    if (vowel)\
    \ {\n        let is_in_vowels = false;\n        let vowel_index = vowels.indexOf(vowel);\n\
    \        while (vowel_index > 0 && !is_in_vowels) {\n            is_in_vowels\
    \ = vowel_index % 2 === 0;\n            vowel_index--;\n        }\n        if\
    \ (is_in_vowels) {\n            return vowel;\n        }\n    }\n    return not_find_vowel;\n\
    }\n\n", "    const cons: string[] = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    const vowels:\
    \ string[] = ['a', 'e', 'i', 'o', 'u'];\n    let temp: string = '';\n    let closest:\
    \ string = '';\n    word = word.toLowerCase();\n    for (let i = word.length -\
    \ 1; i >= 0; i--) {\n        if (cons.indexOf(word[i]) !== -1) {\n           \
    \ temp = word[i];\n            for (let j = i - 1; j >= 0; j--) {\n          \
    \      if (vowels.indexOf(word[j]) !== -1) {\n                    closest = word[j];\n\
    \                    return closest;\n                }\n            }\n     \
    \   }\n    }\n    return closest;\n}\n", "  let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n  let wordArr = word.split(\"\");\n  let wordLen = wordArr.length;\n\
    \  let lastIndex = wordLen - 1;\n  for (let i = lastIndex; i >= 0; i--) {\n  \
    \  if (i === 0) {\n      return \"\";\n    }\n    if (vowels.includes(wordArr[i]))\
    \ {\n      let prevChar = wordArr[i - 1];\n      if (!vowels.includes(prevChar))\
    \ {\n        return wordArr[i];\n      }\n    }\n  }\n  return \"\";\n}\n", " \
    \ let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let a = word.split('').reverse();\n\
    \  let b = \"\";\n  let c = \"\";\n  for (let i = 0; i < a.length; i++) {\n  \
    \  if (vowels.indexOf(a[i]) !== -1) {\n      b = a[i];\n      for (let j = i +\
    \ 1; j < a.length; j++) {\n        if (vowels.indexOf(a[j]) !== -1) {\n      \
    \    c = a[j];\n          break;\n        }\n      }\n      break;\n    }\n  }\n\
    \  if (b !== \"\" && c !== \"\") {\n    if (vowels.indexOf(b) < vowels.indexOf(c))\
    \ {\n      return b;\n    } else {\n      return c;\n    }\n  } else {\n    return\
    \ \"\";\n  }\n}\n", "    // TODO: write code...\n    return '';\n}\n", "    //\
    \ Write your code here.\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    for (let i = word.length; i > 0; i--) {\n        if (vowels.includes(word[i]))\
    \ {\n            if (vowels.includes(word[i + 1]) || vowels.includes(word[i -\
    \ 1])) {\n                continue;\n            }\n            return word[i];\n\
    \        }\n    }\n    return \"\";\n}\n", "  let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  let closestVowel = '';\n  let closestDistance = -1;\n  for (let i =\
    \ word.length - 1; i >= 0; i--) {\n    if (vowels.indexOf(word[i]) > -1) {\n \
    \     if (i + 1 < word.length && vowels.indexOf(word[i + 1]) === -1) {\n     \
    \   if (closestDistance === -1 || closestDistance > (word.length - i)) {\n   \
    \       closestDistance = word.length - i;\n          closestVowel = word[i];\n\
    \        }\n      }\n    }\n  }\n  return closestVowel;\n}\n", "  let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let word_vowels = word.split(\"\").filter(letter\
    \ => vowels.includes(letter));\n  let last_consonant_index = 0;\n  let vowel_index\
    \ = word.length;\n  let closest_vowel = \"\";\n  for (let i = 0; i < word.length;\
    \ i++) {\n    if (!vowels.includes(word[i])) {\n      last_consonant_index = i;\n\
    \    } else {\n      for (let j = 0; j < word_vowels.length; j++) {\n        if\
    \ (word[i] === word_vowels[j] && i > last_consonant_index && i < vowel_index)\
    \ {\n          vowel_index = i;\n          closest_vowel = word[i];\n        }\n\
    \      }\n    }\n  }\n  return closest_vowel;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    let vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let indexesOfConsonants\
    \ = []\n    for (let i = 0; i < word.length; i++) {\n        if (consonants.indexOf(word[i])\
    \ > -1) {\n            indexesOfConsonants.push(i);\n        }\n    }\n    if\
    \ (indexesOfConsonants.length < 2) {\n        return \"\";\n    }\n    for (let\
    \ i = 0; i < indexesOfConsonants.length - 1; i++) {\n        for (let j = indexesOfConsonants[i]\
    \ + 1; j < indexesOfConsonants[i + 1]; j++) {\n            if (vowels.indexOf(word[j])\
    \ > -1) {\n                return word[j];\n            }\n        }\n    }\n\
    \    return \"\";\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\n\n", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let stringArray = word.split(\"\
    \");\n    let arrayLength = stringArray.length;\n    let firstVowelIndex = arrayLength;\n\
    \    for (let i = arrayLength - 1; i >= 0; i--) {\n        if (vowels.indexOf(stringArray[i])\
    \ > -1) {\n            firstVowelIndex = i;\n            break;\n        }\n \
    \   }\n    for (let i = firstVowelIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(stringArray[i])\
    \ === -1) {\n            return stringArray[firstVowelIndex];\n        }\n   \
    \ }\n    return \"\";\n}\nconsole.log(get_closest_vowel(\"quick\"));\n", "   \
    \ return '';\n}\n", "    let wordLength = word.length;\n    let consonants: string[]\
    \ = [\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"\
    N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\
    \    let vowels: string[] = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    let result:\
    \ string = \"\";\n    let foundConsonant = false;\n    let foundVowel = false;\n\
    \    for (let i = wordLength - 1; i >= 0; i--) {\n        if (consonants.includes(word[i]))\
    \ {\n            foundConsonant = true;\n        }\n        if (foundConsonant\
    \ && vowels.includes(word[i])) {\n            result = word[i];\n            foundVowel\
    \ = true;\n            break;\n        }\n    }\n    if (!foundVowel) {\n    \
    \    result = \"\";\n    }\n    return result;\n}\n", "    return \"\";\n}\n",
  "    const regex: RegExp = /[aeiou]/gi;\n    const vowels: RegExpMatchArray = word.match(regex);\n\
    \    let index = 0;\n    let finalIndex = 0;\n    let difference: number = word.length;\n\
    \    if (!vowels) {\n        return \"\";\n    }\n    while (index < vowels.length)\
    \ {\n        const startIndex: number = word.lastIndexOf(vowels[index]);\n   \
    \     const endIndex: number = word.indexOf(vowels[index]);\n        if (startIndex\
    \ - endIndex >= 2 && startIndex - endIndex < difference) {\n            difference\
    \ = startIndex - endIndex;\n            finalIndex = index;\n        }\n     \
    \   index++;\n    }\n    if (difference === word.length) {\n        return \"\"\
    ;\n    }\n    return vowels[finalIndex];\n}", "    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word_arr = word.split('');\n  \
    \  for (let i = word_arr.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word_arr[i])\
    \ !== -1) {\n            if (vowels.indexOf(word_arr[i - 1]) !== -1 || vowels.indexOf(word_arr[i\
    \ + 1]) !== -1) {\n                return \"\";\n            } else {\n      \
    \          return word_arr[i];\n            }\n        }\n    }\n    return \"\
    \";\n}\n", "  return;\n}\n", "    const vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.includes(word[i]))\
    \ {\n            if (i - 1 >= 0 && i + 1 < word.length) {\n                if\
    \ (!vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])) {\n       \
    \             return word[i];\n                }\n            }\n        }\n \
    \   }\n    return \"\";\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "    //Write your function logic here\n    //Return the result\n}",
  "    if (word == null || word == undefined || word.length < 3) {\n        return\
    \ '';\n    }\n    let lastConsonant = \"\";\n    let indexOfLastConsonant = -1;\n\
    \    let vowel = '';\n    let consonant = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n   \
    \ let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (let i = word.length - 1; i\
    \ >= 0; i--) {\n        if (consonant.indexOf(word[i]) > -1) {\n            lastConsonant\
    \ = word[i];\n            indexOfLastConsonant = i;\n            break;\n    \
    \    }\n    }\n    if (indexOfLastConsonant == -1) {\n        return '';\n   \
    \ }\n    for (let i = indexOfLastConsonant - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowel = word[i];\n            break;\n        }\n    }\n\
    \    return vowel;\n}\n", "    // write code here.\n    let closest_vowel = '';\n\
    \    let prev_vowel = '';\n    let is_prev_consonant = false;\n    let is_next_consonant\
    \ = false;\n    let word_len = word.length;\n    for (let i = word_len - 1; i\
    \ >= 0; i--) {\n        let char = word[i];\n        let char_unicode = char.charCodeAt(0);\n\
    \        // check if the char is a vowel.\n        let is_vowel = false;\n   \
    \     if (char_unicode === 97 || char_unicode === 101 || char_unicode === 105\
    \ || char_unicode === 111 || char_unicode === 117) {\n            is_vowel = true;\n\
    \        }\n        if (is_vowel) {\n            if (prev_vowel !== '') {\n  \
    \              closest_vowel = prev_vowel;\n                break;\n         \
    \   }\n            prev_vowel = char;\n        } else {\n            prev_vowel\
    \ = '';\n        }\n    }\n    return closest_vowel;\n}\n", "    var vowels =\
    \ { \"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true, \"A\": true,\
    \ \"E\": true, \"I\": true, \"O\": true, \"U\": true };\n    var last_vowel_index\
    \ = -1;\n    var last_consonant_index = -1;\n    var closest_vowel = \"\";\n \
    \   var max_distance = 0;\n    for (var i = 0; i < word.length; i++) {\n     \
    \   if (vowels[word[i]]) {\n            last_vowel_index = i;\n        } else\
    \ {\n            last_consonant_index = i;\n        }\n        if (last_vowel_index\
    \ > -1 && last_consonant_index > -1) {\n            var distance = last_consonant_index\
    \ - last_vowel_index;\n            if (max_distance < distance) {\n          \
    \      max_distance = distance;\n                closest_vowel = word[last_vowel_index];\n\
    \            }\n        }\n    }\n    return closest_vowel;\n}\n", "  if (word.length\
    \ === 0) {\n    return \"\";\n  }\n  let ret = \"\";\n  let consonant = true;\n\
    \  for (let i = word.length - 1; i >= 0; i--) {\n    if (consonant && VOWELS.indexOf(word[i])\
    \ !== -1) {\n      ret = word[i];\n      consonant = false;\n    } else if (!consonant\
    \ && VOWELS.indexOf(word[i]) === -1) {\n      break;\n    }\n  }\n  return ret;\n\
    }\n", "    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var cons = [\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    for\
    \ (var i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            var j = i - 1;\n            while (j >= 0) {\n        \
    \        if (cons.indexOf(word[j]) >= 0) {\n                    if (j - 1 < 0)\
    \ {\n                        return word[i];\n                    }\n        \
    \            else if (cons.indexOf(word[j - 1]) >= 0) {\n                    \
    \    return word[i];\n                    }\n                    else {\n    \
    \                    break;\n                    }\n                }\n      \
    \          j--;\n            }\n        }\n    }\n    return \"\";\n}\n", "  \
    \  let vowel = \"aeiou\"\n    let str = word.split(\"\").reverse().join(\"\")\n\
    \    let i = 0;\n    while (i < str.length) {\n        if (vowel.indexOf(str[i])\
    \ >= 0) {\n            if (vowel.indexOf(str[i + 1]) < 0 && vowel.indexOf(str[i\
    \ - 1]) < 0) {\n                return str[i]\n            }\n        }\n    \
    \    i++\n    }\n    return \"\"\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"\
    ))\nconsole.log(get_closest_vowel(\"FULL\"))\nconsole.log(get_closest_vowel(\"\
    quick\"))\nconsole.log(get_closest_vowel(\"ab\"))\n", "    const vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    const word_length = word.length;\n    let\
    \ current_vowel = \"\";\n    for (let i = word_length - 1; i >= 0; i--) {\n  \
    \      if (vowels.includes(word[i]) && vowels.includes(word[i - 1])) {\n     \
    \       current_vowel = word[i - 1];\n            break;\n        }\n    }\n \
    \   return current_vowel;\n}\n", "  return word\n    .split(\"\")\n    .reverse()\n\
    \    .reduce((acc, curr, index, array) => {\n      const isConsonant = !isVowel(curr);\n\
    \      const isVowelAndNotFirst = isVowel(curr) && index > 0;\n      const isVowelAndNextIsConsonant\
    \ =\n        isVowel(curr) && isConsonant(array[index - 1]);\n      if (isVowelAndNotFirst\
    \ && isVowelAndNextIsConsonant) {\n        return curr;\n      }\n      return\
    \ acc;\n    }, \"\");\n}\n", "    const vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"];\n    const wordArray = word.split(\"\");\n    for (let i = wordArray.length\
    \ - 1; i >= 0; i--) {\n        const current = wordArray[i];\n        if (vowels.includes(current))\
    \ {\n            if (i > 0 && !vowels.includes(wordArray[i - 1])) {\n        \
    \        if (i < wordArray.length - 1 && !vowels.includes(wordArray[i + 1])) {\n\
    \                    return current;\n                }\n            }\n     \
    \   }\n    }\n    return \"\";\n}\n", "  if (!word) return '';\n  if (isConsonant(word[word.length\
    \ - 1])) return '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (isConsonant(word[i])\
    \ && isVowel(word[i + 1])) {\n      return word[i + 1];\n    }\n  }\n  return\
    \ '';\n}\n", "  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let result\
    \ = \"\";\n  for (let i = word.length - 1; i >= 0; i--) {\n    for (let j = 0;\
    \ j < vowels.length; j++) {\n      if (word[i] === vowels[j]) {\n        if (word[i\
    \ - 1] !== undefined && word[i + 1] !== undefined) {\n          if (vowels.indexOf(word[i\
    \ - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1) {\n            result =\
    \ word[i];\n            break;\n          }\n        }\n      }\n    }\n  }\n\
    \  return result;\n}\n", "    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U'];\n    let index = word.length - 1;\n    let returned_string =\
    \ '';\n    if (word[index] === 'y') {\n        index -= 1;\n    }\n    for (let\
    \ i = index; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n       \
    \     if (word[i - 1] !== undefined && vowels.includes(word[i - 1])) {\n     \
    \           continue;\n            }\n            if (word[i + 1] !== undefined\
    \ && vowels.includes(word[i + 1])) {\n                continue;\n            }\n\
    \            returned_string = word[i];\n            break;\n        }\n    }\n\
    \    return returned_string;\n}\nconsole.log(get_closest_vowel(\"ab\"));\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));", "    const vowels = \"aeiouAEIOU\";\n    const wordArr = word.split(\"\
    \");\n    //If there are two consonants at the end of the word, it will return\
    \ empty string\n    if (!vowels.includes(wordArr[wordArr.length - 1]) && !vowels.includes(wordArr[wordArr.length\
    \ - 2])) {\n        return \"\";\n    }\n    //If there is only one letter, return\
    \ empty string\n    if (wordArr.length === 1) {\n        return \"\";\n    }\n\
    \    //If there is only one consonant and one vowel, return the letter\n    if\
    \ (vowels.includes(wordArr[wordArr.length - 1]) && !vowels.includes(wordArr[wordArr.length\
    \ - 2])) {\n        return wordArr[wordArr.length - 1];\n    }\n    //If there\
    \ is one consonant and two vowels, return the first vowel\n    if (vowels.includes(wordArr[wordArr.length\
    \ - 1]) && vowels.includes(wordArr[wordArr.length - 2])) {\n        return wordArr[wordArr.length\
    \ - 2];\n    }\n    //If there are two consonants, return the first vowel that\
    \ is between two consonants\n    for (let i = wordArr.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.includes(wordArr[i]) && !vowels.includes(wordArr[i - 1])\
    \ && !vowels.includes(wordArr[i + 1])) {\n            return wordArr[i];\n   \
    \     }\n    }\n    return \"\";\n}\n", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let x;\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(word[i]) != -1) {\n            x = i;\n          \
    \  for (let j = x; j >= 0; j--) {\n                if (vowels.indexOf(word[j])\
    \ == -1) {\n                    return word[x];\n                }\n         \
    \   }\n        }\n    }\n    return \"\";\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    const vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    const letters = word.split(\"\");\n   \
    \ let previousVowel = false;\n    let closestVowel = \"\";\n    for (let i = letters.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(letters[i])) {\n          \
    \  if (previousVowel) {\n                return closestVowel;\n            }\n\
    \            closestVowel = letters[i];\n            previousVowel = true;\n \
    \       } else {\n            previousVowel = false;\n        }\n    }\n    return\
    \ \"\";\n}\n", "    return \"\";\n}\n", "    // var vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    // var candidate = \"\";\n    // var temp = \"\";\n \
    \   // for (var i = word.length - 1; i >= 0; i--) {\n    //     if (vowels.indexOf(word[i])\
    \ != -1) {\n    //         if (candidate == \"\") {\n    //             candidate\
    \ = word[i];\n    //         }\n    //         temp = word[i];\n    //     } else\
    \ {\n    //         if (temp != \"\") {\n    //             break;\n    //   \
    \      }\n    //     }\n    // }\n    // return candidate;\n    return word.split(\"\
    \").reverse().filter(v => /[aeiou]/i.test(v)).find(v => /[^aeiou]/i.test(v)) ||\
    \ \"\";\n}\n", "    let vowels = \"aeiouAEIOU\";\n    let i = word.length - 1;\n\
    \    let consonantSeen = false;\n    while (i >= 0) {\n        let letter = word[i];\n\
    \        if (consonantSeen && vowels.indexOf(letter) !== -1) {\n            return\
    \ letter;\n        }\n        if (vowels.indexOf(letter) === -1) {\n         \
    \   consonantSeen = true;\n        }\n        i -= 1;\n    }\n    return \"\"\
    ;\n}\n\nexport default get_closest_vowel;", "  const words_array = word.split(\"\
    \");\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const temp_array\
    \ = [];\n  let result: string = \"\";\n  for (let i = 0; i < words_array.length;\
    \ i++) {\n    if (vowels.includes(words_array[i].toLowerCase())) {\n      temp_array.push(words_array[i]);\n\
    \    }\n  }\n  if (temp_array.length <= 1) {\n    return \"\";\n  } else {\n \
    \   const last_vowel = temp_array[temp_array.length - 1];\n    const second_last_vowel\
    \ = temp_array[temp_array.length - 2];\n    const second_last_vowel_index = words_array.indexOf(second_last_vowel);\n\
    \    const last_vowel_index = words_array.indexOf(last_vowel);\n    if (\n   \
    \   second_last_vowel_index === -1 ||\n      last_vowel_index === -1 ||\n    \
    \  second_last_vowel_index === last_vowel_index\n    ) {\n      return \"\";\n\
    \    } else {\n      result = words_array[second_last_vowel_index + 1];\n    }\n\
    \  }\n  return result;\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "    let vowel = \"aeiou\";\n    let letter = \"\";\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowel.indexOf(word[i]) > -1)\
    \ {\n            letter = word[i];\n            for (let j = i; j >= 0; j--) {\n\
    \                if (vowel.indexOf(word[j]) == -1) {\n                    return\
    \ letter;\n                }\n            }\n        }\n    }\n    return \"\"\
    ;\n}\nconsole.log(get_closest_vowel(\"quick\"));", "    const VOWELS = \"aeiou\"\
    ;\n    let vowelIndex = -1;\n    const checkForVowel = (letra: string, i: number)\
    \ => {\n        if(VOWELS.indexOf(letra) != -1){\n            if(i > vowelIndex){\n\
    \                vowelIndex = i;\n            }\n        }\n    }\n    for(let\
    \ i = word.length - 1; i >= 0; i--){\n        checkForVowel(word[i], i);\n   \
    \     if(vowelIndex != -1 && i - 1 >= 0 && VOWELS.indexOf(word[i - 1]) == -1){\n\
    \            return word[vowelIndex];\n        }\n    }\n    return \"\";\n}\n\
    \nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "    const VOWELS = 'aeiou';\n    const CONSONANTS = 'bcdfghjklmnpqrstvwxyz';\n\
    \    let cons1: string = '';\n    let cons2: string = '';\n    let vow: string\
    \ = '';\n    let i: number = word.length - 1;\n    while (i > 0) {\n        if\
    \ (CONSONANTS.indexOf(word[i]) >= 0) {\n            cons1 = word[i];\n       \
    \     i--;\n            while (i > 0) {\n                if (VOWELS.indexOf(word[i])\
    \ >= 0) {\n                    vow = word[i];\n                    break;\n  \
    \              }\n                i--;\n            }\n            break;\n  \
    \      }\n        i--;\n    }\n    i = word.length - 1;\n    while (i > 0) {\n\
    \        if (VOWELS.indexOf(word[i]) >= 0) {\n            i--;\n            while\
    \ (i > 0) {\n                if (CONSONANTS.indexOf(word[i]) >= 0) {\n       \
    \             cons2 = word[i];\n                    break;\n                }\n\
    \                i--;\n            }\n            break;\n        }\n        i--;\n\
    \    }\n    if (cons1.length > 0 && cons2.length > 0) {\n        if (word.length\
    \ - word.indexOf(cons1) - 1 < word.length - word.indexOf(cons2) - 1) {\n     \
    \       return vow;\n        }\n    }\n    return '';\n}\n", "  let vowelList\
    \ = \"aeiouAEIOU\";\n  let wordArray = word.split(\"\");\n  let ansList = [];\n\
    \  if (vowelList.indexOf(wordArray[0]) != -1 || vowelList.indexOf(wordArray[wordArray.length\
    \ - 1]) != -1) {\n    return \"\";\n  } else {\n    for (let i = wordArray.length\
    \ - 1; i > 0; i--) {\n      if (vowelList.indexOf(wordArray[i]) != -1) {\n   \
    \     if (vowelList.indexOf(wordArray[i - 1]) == -1 && vowelList.indexOf(wordArray[i\
    \ + 1]) == -1) {\n          ansList.push(wordArray[i]);\n        }\n      }\n\
    \    }\n    return ansList.join(\"\");\n  }\n}\n", "    const vowels = \"aeiou\"\
    \n    const rev_word = word.split(\"\").reverse().join(\"\")\n    const array_of_arrays\
    \ = rev_word.split(/[bcdfghjklmnpqrstvwxyz]/).filter(val => val.length > 0)\n\
    \    const closest_vowel = array_of_arrays[0].charAt(0)\n    return vowels.includes(closest_vowel)\
    \ ? closest_vowel : ''\n}\n", "    const vowels = \"aeiou\";\n    const consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    const reversed_word = word.split(\"\").reverse().join(\"\
    \");\n    for (let i = 0; i < reversed_word.length; i++) {\n        if (consonants.includes(reversed_word[i])\
    \ && vowels.includes(reversed_word[i + 1])) {\n            return reversed_word[i\
    \ + 1];\n        }\n    }\n    return \"\";\n}\n", "  let vowels = {\n    'a':\
    \ true,\n    'e': true,\n    'i': true,\n    'o': true,\n    'u': true,\n    'A':\
    \ true,\n    'E': true,\n    'I': true,\n    'O': true,\n    'U': true\n  };\n\
    \  let word_array = word.split('');\n  let r_vowel: string = '';\n  let r_distance:\
    \ number = word.length;\n  let new_distance: number = 0;\n  for (let i = word_array.length\
    \ - 1; i >= 0; i--) {\n    if (vowels[word_array[i]]) {\n      new_distance =\
    \ word_array.length - i;\n      if (new_distance < r_distance) {\n        r_distance\
    \ = new_distance;\n        r_vowel = word_array[i];\n      }\n    }\n  }\n  return\
    \ r_vowel;\n}\n", "    const regex = /[^aeiouAEIOU]/g;\n    return word.split(regex).reverse()[0]\
    \ || '';\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "    return '';\n}\n\n", "    //Your implementation here\n    return\
    \ null;\n}\n", "    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (word[i] === \"a\" || word[i]\
    \ === \"e\" || word[i] === \"i\" || word[i] === \"o\" || word[i] === \"u\") {\n\
    \            if (word[i - 1] === \"a\" || word[i - 1] === \"e\" || word[i - 1]\
    \ === \"i\" || word[i - 1] === \"o\" || word[i - 1] === \"u\") {\n           \
    \     continue;\n            } else {\n                return word[i];\n     \
    \       }\n        }\n    }\n    return \"\";\n}\n", "    // write your code here.\n\
    \    return \"\";\n}\n", "    if (word.length < 3) {\n        return \"\";\n \
    \   }\n    let vowels = 'aeiouyAEIOUY';\n    for (let i = word.length - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            if (vowels.indexOf(word[i\
    \ - 1]) < 0 && vowels.indexOf(word[i + 1]) < 0) {\n                return word[i];\n\
    \            }\n        }\n    }\n    return \"\";\n}\n", "    const vowels =\
    \ \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    word.split(\"\").forEach((letter, index) => {\n        if\
    \ (vowels.includes(letter)) {\n            if (index > 0 && !vowels.includes(word[index\
    \ - 1]) && index < closest_vowel_index) {\n                closest_vowel = letter;\n\
    \                closest_vowel_index = index;\n            }\n        }\n    });\n\
    \    return closest_vowel;\n}\n", "  // Your Code Here\n  return word;\n}\n\n\
    describe(\"Testing get_closest_vowel\", () => {\n  it(\"should output `u` when\
    \ input is `yogurt`\", () => {\n    expect(get_closest_vowel(\"yogurt\")).toEqual(\"\
    u\");\n  });\n  it(\"should output `U` when input is `FULL`\", () => {\n    expect(get_closest_vowel(\"\
    FULL\")).toEqual(\"U\");\n  });\n  it(\"should output empty string when input\
    \ is `quick`\", () => {\n    expect(get_closest_vowel(\"quick\")).toEqual(\"\"\
    );\n  });\n  it(\"should output empty string when input is `ab`\", () => {\n \
    \   expect(get_closest_vowel(\"ab\")).toEqual(\"\");\n  });\n});", "    if (word.length\
    \ === 0) {\n        return \"\";\n    }\n\n    let vowel = 'aeiou';\n    let closest_vowel\
    \ = '';\n    let closest_distance = -1;\n    for (let i = word.length - 1; i >=\
    \ 0; i--) {\n        for (let j = 0; j < vowel.length; j++) {\n            if\
    \ (word[i] === vowel[j]) {\n                if (closest_distance === -1) {\n \
    \                   closest_distance = i;\n                    closest_vowel =\
    \ word[i];\n                } else if (i > closest_distance) {\n             \
    \       closest_distance = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        }\n    }\n\n    return closest_vowel;\n\
    }\n", "    // TODO: implement this function\n    return \"\";\n}\n", "    let\
    \ vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonant = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let index =\
    \ -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowel.indexOf(word[i])\
    \ > -1) {\n            if (consonant.indexOf(word[i - 1]) > -1 && consonant.indexOf(word[i\
    \ + 1]) > -1) {\n                index = i;\n                break;\n        \
    \    }\n        }\n    }\n    if (index > -1) {\n        return word[index];\n\
    \    } else {\n        return \"\";\n    }\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    const vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    const letters = word.split('');\n    let is_vowel\
    \ = false;\n    for (let i = letters.length - 1; i >= 0; i--) {\n        for (let\
    \ j = 0; j < vowels.length; j++) {\n            if (letters[i] === vowels[j])\
    \ {\n                is_vowel = true;\n                break;\n            }\n\
    \        }\n        if (is_vowel) {\n            for (let j = i - 1; j >= 0; j--)\
    \ {\n                for (let z = 0; z < vowels.length; z++) {\n             \
    \       if (letters[j] === vowels[z]) {\n                        break;\n    \
    \                }\n                    if (z === vowels.length - 1) {\n     \
    \                   return letters[i];\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return '';\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "  let vowels = 'aeiou';\n\
    \  let right = word.split('').reverse().join('');\n  let idx = right.search(/[^aeiou]{1}[aeiou]{1}[^aeiou]/);\n\
    \  if (idx < 0) return '';\n  else return right[idx + 1];\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "  let returnVowel = \"\
    \";\n  let lenWord = word.length;\n  let i = lenWord - 1;\n  let flag = true;\n\
    \  while (i >= 0 && flag) {\n    let chars = word.substring(i, i + 1);\n    if\
    \ (chars === \"a\" || chars === \"e\" || chars === \"i\" || chars === \"o\" ||\
    \ chars === \"u\") {\n      returnVowel = chars;\n      flag = false;\n    }\n\
    \    i--;\n  }\n  return returnVowel;\n}\nconsole.log(get_closest_vowel(\"yogurt\"\
    ));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "    const vowels = 'aeiou';\n\
    \    let index = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n     \
    \   if (vowels.indexOf(word[i]) !== -1) {\n            index = i;\n          \
    \  break;\n        }\n    }\n    if (index === -1) return '';\n    const current\
    \ = word[index];\n    let closestIndex = -1;\n    let distance = Number.MAX_VALUE;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i === index) continue;\n            const currentDistance\
    \ = index - i;\n            if (currentDistance < distance) {\n              \
    \  distance = currentDistance;\n                closestIndex = i;\n          \
    \  }\n        }\n    }\n    return closestIndex === -1 ? '' : word[closestIndex];\n\
    }\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "  let vowels = \"aeiouAEIOU\";\n  let idx: number = word.length -\
    \ 1;\n  let is_consonant = false;\n  while (idx >= 0) {\n    let ch: string =\
    \ word[idx];\n    if (vowels.indexOf(ch) >= 0) {\n      if (is_consonant) {\n\
    \        return ch;\n      }\n    } else {\n      is_consonant = true;\n    }\n\
    \    idx--;\n  }\n  return \"\";\n}", "  let closest = \"\";\n  const vowel =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (let i = word.length - 1; i >= 0;\
    \ i--) {\n    for (let j = 0; j < vowel.length; j++) {\n      if (word[i] ===\
    \ vowel[j]) {\n        return closest;\n      }\n    }\n    closest = word[i];\n\
    \  }\n  return \"\";\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "\tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet chars\
    \ = word.split(\"\");\n\tlet vowelPos = 0;\n\tlet consPos = 0;\n\tfor (let i =\
    \ chars.length - 1; i >= 0; i--) {\n\t\tif (vowels.indexOf(chars[i]) != -1) {\n\
    \t\t\tvowelPos = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (let i = vowelPos - 1; i\
    \ >= 0; i--) {\n\t\tif (vowels.indexOf(chars[i]) == -1) {\n\t\t\tconsPos = i;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (consPos == 0) {\n\t\treturn \"\";\n\t}\n\treturn\
    \ chars[vowelPos];\n}\n", "  var charCode = 0;\n  var closest: string = \"\";\n\
    \  var value = 0;\n  for (var i = word.length - 1; i >= 0; i--) {\n    charCode\
    \ = word.charCodeAt(i);\n    if (((charCode >= 65 && charCode <= 69) || (charCode\
    \ >= 97 && charCode <= 101)) && value > 0) {\n      closest = word[i];\n     \
    \ break;\n    }\n    if ((charCode === 105 || charCode === 111 || charCode ===\
    \ 117 || charCode === 121) && value === 0) {\n      closest = word[i];\n     \
    \ value++;\n    }\n  }\n  return closest;\n}\n", "    let vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let character_counter = 0;\n \
    \   let current_vowel = '';\n    let vowel_array = [];\n    let closest_vowel\
    \ = '';\n    //iterate through each character in word\n    for (let character\
    \ of word) {\n        //check if character is a vowel\n        if (vowels.includes(character))\
    \ {\n            //add the vowel to an array\n            vowel_array.push(character);\n\
    \            //check if current_vowel is empty, if so set it to vowel\n      \
    \      if (current_vowel === '') {\n                current_vowel = character;\n\
    \            }\n            //check if character is closer than current_vowel\
    \ to end of string\n            if (word.length - character_counter < word.length\
    \ - word.indexOf(current_vowel)) {\n                current_vowel = character;\n\
    \            }\n        }\n        character_counter++;\n    }\n    //iterate\
    \ through each character in word\n    for (let character of word) {\n        //check\
    \ if character is a vowel\n        if (vowels.includes(character)) {\n       \
    \     //check if character is a consonant\n            if (vowel_array.includes(character))\
    \ {\n                closest_vowel = character;\n            }\n        }\n  \
    \  }\n    return closest_vowel;\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\n\
    console.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"quick\"\
    ));\nconsole.log(get_closest_vowel(\"ab\"));\n", "  const VOWELS = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  const isConsonant = (letter: string): boolean => !VOWELS.includes(letter);\n\
    \  const wordAsArray = word.split('');\n  const reversedWordAsArray = wordAsArray.reverse();\n\
    \  const lastVowelIndex = reversedWordAsArray.findIndex(isConsonant);\n  const\
    \ closestVowelIndex = lastVowelIndex + 1;\n  const lastConsonantIndex = closestVowelIndex\
    \ + 1;\n  const vowel = reversedWordAsArray[closestVowelIndex];\n  const consonant\
    \ = reversedWordAsArray[lastConsonantIndex];\n  return isConsonant(consonant)\
    \ ? vowel : '';\n}\n", "    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'];\n    let idx = word.length - 1;\n    for (let i = idx; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) === -1) {\n            idx = i;\n   \
    \     } else {\n            if (vowels.indexOf(word[i - 1]) === -1) {\n      \
    \          return word[i];\n            }\n        }\n    }\n    return '';\n\
    }\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let nearest_vowel\
    \ = \"\";\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i]))\
    \ {\n      if (word[i + 1] && vowels.includes(word[i + 1])) {\n        continue;\n\
    \      } else {\n        nearest_vowel = word[i];\n        break;\n      }\n \
    \   }\n  }\n  return nearest_vowel;\n}\n", "    const VOWELS = 'AEIOU';\n    let\
    \ result = '';\n    let is_prev_consonant = false;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (VOWELS.indexOf(word[i]) !== -1) {\n       \
    \     if (is_prev_consonant) {\n                result = word[i];\n          \
    \      break;\n            }\n        } else {\n            is_prev_consonant\
    \ = true;\n        }\n    }\n    return result;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "    const vowels = \"\
    aeiouAEIOU\";\n    const letters = word.split(\"\");\n    let closestVowel: string\
    \ = \"\";\n    letters.forEach((letter, index) => {\n        if (vowels.includes(letter))\
    \ {\n            if (index > 0 && index < letters.length - 1) {\n            \
    \    const prevLetter = letters[index - 1];\n                const nextLetter\
    \ = letters[index + 1];\n                if (!vowels.includes(prevLetter) && !vowels.includes(nextLetter))\
    \ {\n                    closestVowel = letter;\n                }\n         \
    \   }\n        }\n    });\n    return closestVowel;\n}", "    const letters =\
    \ word.split('');\n    const vowels = 'aeiou'.split('');\n    for (let i = letters.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(letters[i]) && !vowels.includes(letters[i\
    \ - 1]) && !vowels.includes(letters[i + 1])) {\n            return letters[i];\n\
    \        }\n    }\n    return '';\n}\n", "  const vowels = \"aeiouAEIOU\";\n \
    \ const wordArr = word.split(\"\");\n  let closestVowel = \"\";\n  for (let i\
    \ = wordArr.length - 1; i >= 0; i--) {\n    if (vowels.includes(wordArr[i])) {\n\
    \      closestVowel = wordArr[i];\n      break;\n    }\n  }\n  return closestVowel;\n\
    }\n", "  return \"\";\n}\n", "    let result: string = '';\n    let position =\
    \ 0;\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let temp: string\
    \ = word.split('').reverse().join('');\n    let consonants = 0;\n    for (let\
    \ i = 0; i < temp.length; i++) {\n        if (vowels.indexOf(temp[i]) !== -1)\
    \ {\n            position = i;\n            break;\n        }\n        consonants++;\n\
    \    }\n    for (let i = 0; i < position; i++) {\n        if (vowels.indexOf(temp[i])\
    \ !== -1) {\n            result = temp[i];\n            break;\n        }\n  \
    \  }\n    return result;\n}\nconsole.log(\">>> get_closest_vowel(\\\"yogurt\\\"\
    )\");\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(\">>> get_closest_vowel(\\\
    \"FULL\\\")\");\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(\">>>\
    \ get_closest_vowel(\\\"quick\\\")\");\nconsole.log(get_closest_vowel(\"quick\"\
    ));\nconsole.log(\">>> get_closest_vowel(\\\"ab\\\")\");\nconsole.log(get_closest_vowel(\"\
    ab\"));\nconsole.log(\">>> get_closest_vowel(\\\"codefight\\\")\");\nconsole.log(get_closest_vowel(\"\
    codefight\"));\nconsole.log(\">>> get_closest_vowel(\\\"hiccup\\\")\");\nconsole.log(get_closest_vowel(\"\
    hiccup\"));\nconsole.log(\">>> get_closest_vowel(\\\"ZZZ\\\")\");\nconsole.log(get_closest_vowel(\"\
    ZZZ\"));\nconsole.log(\">>> get_closest_vowel(\\\"small\\\")\");\nconsole.log(get_closest_vowel(\"",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let list = [];\n   \
    \ for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            list.push(i);\n        }\n    }\n    for (let i = list.length\
    \ - 1; i >= 0; i--) {\n        if (word[list[i] - 1] != undefined && word[list[i]\
    \ + 1] != undefined) {\n            if (vowels.indexOf(word[list[i] - 1]) == -1\
    \ && vowels.indexOf(word[list[i] + 1]) == -1) {\n                return word[list[i]];\n\
    \            }\n        }\n    }\n    return \"\";\n}\n", "    var vowels = \"\
    aeiouAEIOU\";\n    var result = \"\";\n    for (var i = word.length - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            if (i ===\
    \ word.length - 1) {\n                break;\n            }\n            result\
    \ = word[i];\n            break;\n        }\n    }\n    if (result === \"\") {\n\
    \        return result;\n    }\n    for (var i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) >= 0) {\n            result = word[i];\n\
    \        } else {\n            break;\n        }\n    }\n    return result;\n\
    }\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n", "  // TODO: implement get_closest_vowel\n  return \"\";\n}\n", " \
    \   const vowels = \"aeiouAEIOU\";\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let lastVowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(word[i]) != -1) {\n            lastVowel = word[i];\n\
    \            continue;\n        }\n        if (consonants.indexOf(word[i]) !=\
    \ -1) {\n            return lastVowel;\n        }\n    }\n    return \"\";\n}",
  "  const CONSONANTS = \"bcdfghjklmnpqrstvwxyz\";\n  const VOWELS = \"aeiou\";\n\
    \  let vowel = \"\";\n  let wordArray = word.split(\"\");\n  for (let i = wordArray.length\
    \ - 1; i >= 0; i--) {\n    if (CONSONANTS.includes(wordArray[i]) && VOWELS.includes(wordArray[i\
    \ + 1])) {\n      vowel = wordArray[i + 1];\n      break;\n    }\n  }\n  return\
    \ vowel;\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "    var vowels = \"AEIOUaeiou\";\n    for (var i = word.length - 1;\
    \ i >= 0; i--) {\n        var currentLetter = word[i];\n        if (vowels.indexOf(currentLetter)\
    \ > -1) {\n            return currentLetter;\n        }\n    }\n    return \"\"\
    ;\n}", "    const vowels = \"AEIOUaeiou\";\n    const conso = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n    let flag = false;\n    let maxIndex = 0;\n    let last_vowel_index = 0;\n\
    \    let vowel_index = 0;\n    let max_vowel_index = 0;\n    let max_conso_index\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (conso.indexOf(word[i])\
    \ !== -1) {\n            flag = true;\n            last_vowel_index = vowel_index;\n\
    \            vowel_index = 0;\n        }\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            flag = false;\n            vowel_index = i;\n       \
    \ }\n        if (flag) {\n            if (vowel_index > last_vowel_index) {\n\
    \                max_vowel_index = vowel_index;\n                max_conso_index\
    \ = last_vowel_index;\n                maxIndex = i;\n            }\n        }\n\
    \    }\n    if (max_vowel_index - max_conso_index > 1) {\n        return word[max_vowel_index];\n\
    \    } else {\n        return \"\";\n    }\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n", "  let vowels = \"aeiouAEIOU\"\
    ;\n  let found = null;\n  for (let i = word.length - 1; i >= 0; i--) {\n    if\
    \ (vowels.indexOf(word[i]) >= 0) {\n      if (found == null) {\n        found\
    \ = word[i];\n      } else {\n        return found;\n      }\n    } else {\n \
    \     found = null;\n    }\n  }\n  return \"\";\n}\n", "    let l: number = word.length;\n\
    \    let consonants: string = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\
    \    let vowels: string = \"aeiouAEIOU\";\n    for (let i: number = l - 1; i >=\
    \ 0; i--) {\n        let c: string = word[i];\n        if (consonants.indexOf(c)\
    \ > -1) {\n            for (let j: number = i + 1; j < l; j++) {\n           \
    \     let v: string = word[j];\n                if (vowels.indexOf(v) > -1) {\n\
    \                    return v;\n                }\n            }\n        }\n\
    \    }\n    return \"\";\n}\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    let start = 0;\n    let end = word.length - 1;\n    let valid =\
    \ null;\n    while (start < end) {\n        if (vowels.indexOf(word[start]) ===\
    \ -1) {\n            start++;\n        } else if (vowels.indexOf(word[end]) ===\
    \ -1) {\n            end--;\n        } else {\n            valid = word[start];\n\
    \            break;\n        }\n    }\n    return valid;\n}", "    var VOWELS\
    \ = {\n        a: true,\n        e: true,\n        i: true,\n        o: true,\n\
    \        u: true,\n        A: true,\n        E: true,\n        I: true,\n    \
    \    O: true,\n        U: true\n    };\n    var foundVowel: string = \"\";\n \
    \   var start: number = 0;\n    for (var i = 0; i < word.length; i++) {\n    \
    \    if (word[i] in VOWELS) {\n            start = i;\n            break;\n  \
    \      }\n    }\n    for (var i = word.length - 1; i > 0; i--) {\n        if (word[i]\
    \ in VOWELS) {\n            if (i > start) {\n                foundVowel = word[i];\n\
    \                break;\n            }\n        }\n    }\n    return foundVowel;\n\
    }\n", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let word_array = word.split('');\n    word_array.reverse();\n\
    \    let vowel_index = -1;\n    for (let i = 0; i < word_array.length; i++) {\n\
    \        if (vowels.indexOf(word_array[i]) !== -1) {\n            vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (vowel_index === -1) {\n\
    \        return '';\n    }\n    let prev_is_consonant = consonants.indexOf(word_array[vowel_index\
    \ - 1]) !== -1;\n    let next_is_consonant = consonants.indexOf(word_array[vowel_index\
    \ + 1]) !== -1;\n    if (prev_is_consonant && next_is_consonant) {\n        return\
    \ word_array[vowel_index];\n    }\n    return '';\n}\n", "    let vowel = '';\n\
    \    let closest: number = 0;\n    let VOWELS = 'aeiouAEIOU';\n    let valid_index:\
    \ number = 0;\n    for (let index: number = 0; index < word.length; index++) {\n\
    \        let current_letter: string = word[index];\n        if (current_letter.match(/[aeiouAEIOU]/g))\
    \ {\n            if (index > 0 && index < word.length - 1) {\n               \
    \ let prev_letter: string = word[index - 1];\n                let next_letter:\
    \ string = word[index + 1];\n                if (!prev_letter.match(/[aeiouAEIOU]/g)\
    \ && !next_letter.match(/[aeiouAEIOU]/g)) {\n                    closest = word.length\
    \ - index;\n                    valid_index = index;\n                    vowel\
    \ = word[valid_index];\n                }\n            }\n        }\n    }\n \
    \   return vowel;\n}\n", "    let wordLength = word.length;\n    let lastConsonantIndex\
    \ = wordLength - 1;\n    let firstVowelIndex = 0;\n    for (let i = wordLength\
    \ - 1; i >= 0; i--) {\n        let char = word[i];\n        if (!isVowel(char))\
    \ {\n            lastConsonantIndex = i;\n        } else {\n            firstVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    let distanceOfFirstVowel = wordLength\
    \ - firstVowelIndex;\n    let distanceOfLastConsonant = wordLength - lastConsonantIndex;\n\
    \    if (distanceOfFirstVowel > distanceOfLastConsonant) {\n        return word[firstVowelIndex];\n\
    \    } else {\n        return '';\n    }\n}\n", "    // Your code here\n    let\
    \ map = {\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n\
    \        \"o\": true,\n        \"u\": true,\n        \"A\": true,\n        \"\
    E\": true,\n        \"I\": true,\n        \"O\": true,\n        \"U\": true\n\
    \    }\n    let ref = null;\n    let currentIndex = null;\n    let word1 = word.split(\"\
    \");\n    word1.reverse();\n    for (let i = 0; i < word1.length; i++) {\n   \
    \     if (map[word1[i]]) {\n            if (ref !== null) {\n                currentIndex\
    \ = i;\n                break;\n            }\n        } else {\n            ref\
    \ = i;\n        }\n    }\n    if (currentIndex === null) {\n        return \"\"\
    ;\n    }\n    return word1[currentIndex];\n}\n", "    var vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    var closestVowel: string = \"\";\n    var closestIndex:\
    \ number = word.length;\n    for (var i = 0; i < word.length; i++) {\n       \
    \ if (vowels.indexOf(word[i]) >= 0) {\n            var currentIndex = word.length\
    \ - i - 1;\n            if (currentIndex < closestIndex) {\n                closestIndex\
    \ = currentIndex;\n                closestVowel = word[i];\n            }\n  \
    \      }\n    }\n    return closestVowel;\n}\n", "    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let wordSplit = word.split(\"\");\n    let ret:\
    \ string = \"\";\n    for (let i = wordSplit.length - 1; i >= 0; i--) {\n    \
    \    if (vowels.indexOf(wordSplit[i]) !== -1) {\n            ret = wordSplit[i];\n\
    \            if (vowels.indexOf(wordSplit[i - 1]) === -1 && vowels.indexOf(wordSplit[i\
    \ + 1]) === -1) {\n                return ret;\n            }\n        }\n   \
    \ }\n    return \"\";\n}\n", "  // write your code here\n  var vowels = \"aeiou\"\
    ;\n  var result = \"\";\n  if (word.length == 0 || word.length == 1) {\n    return\
    \ result;\n  }\n  for (var i = 0; i < word.length; i++) {\n    if (i == 0) {\n\
    \      if (vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i + 1]) == -1)\
    \ {\n        result = word[i];\n        break;\n      }\n    } else if (i == word.length\
    \ - 1) {\n      if (vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i - 1])\
    \ == -1) {\n        result = word[i];\n        break;\n      }\n    } else {\n\
    \      if (vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i - 1]) == -1\
    \ && vowels.indexOf(word[i + 1]) == -1) {\n        result = word[i];\n       \
    \ break;\n      }\n    }\n  }\n  return result;\n}\n", "    // TODO: implement\
    \ function\n    // Hint: split()\n    let wordArr = word.split('')\n    let vowel\
    \ = ['a', 'e', 'i', 'o', 'u']\n    let vowelArr = []\n    let index = 0\n    for\
    \ (let letter of wordArr) {\n        if (vowel.includes(letter)) {\n         \
    \   vowelArr.push(index)\n        }\n        index += 1\n    }\n    if (vowelArr.length\
    \ <= 0) {\n        return ''\n    }\n    let min = vowelArr[0]\n    for (let i\
    \ = 0; i < vowelArr.length; i++) {\n        if (min > vowelArr[i]) {\n       \
    \     min = vowelArr[i]\n        }\n    }\n    return word[min]\n}\n", "    const\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closest_vowel = \"\"\
    ;\n    let closest_vowel_index = word.length - 1;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if\
    \ (i < closest_vowel_index) {\n                closest_vowel = word[i];\n    \
    \            closest_vowel_index = i;\n            }\n        } else {\n     \
    \       if (closest_vowel) {\n                return closest_vowel;\n        \
    \    }\n        }\n    }\n    return \"\";\n}\n", "    // Write your solution\
    \ here\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelLocations\
    \ = [];\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.includes(word[i]))\
    \ {\n            vowelLocations.push(i);\n        }\n    }\n    let currentVowelLocation\
    \ = 0;\n    for (let i = word.length; i >= 0; i--) {\n        if (vowelLocations.includes(i))\
    \ {\n            currentVowelLocation = i;\n            break;\n        }\n  \
    \  }\n    if (currentVowelLocation === 0) {\n        return \"\";\n    } else\
    \ {\n        return word[currentVowelLocation];\n    }\n}\n", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let first_char = word[0];\n    let\
    \ last_char = word[word.length - 1];\n    let closest_vowel = \"\";\n    let vowel_index\
    \ = -1;\n    if (vowels.indexOf(first_char) != -1 || vowels.indexOf(last_char)\
    \ != -1) {\n        return \"\";\n    }\n    for (let i = word.length - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) != -1) {\n            closest_vowel\
    \ = word[i];\n            vowel_index = i;\n            break;\n        }\n  \
    \  }\n    if (vowel_index == -1) {\n        return \"\";\n    }\n    for (let\
    \ i = vowel_index - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) ==\
    \ -1) {\n            return closest_vowel;\n        }\n    }\n    return \"\"\
    ;\n}\n", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closestVowel\
    \ = \"\";\n    let closestDistance = Infinity;\n    for (let i = 0; i < word.length;\
    \ i++) {\n        if (vowels.includes(word[i].toLowerCase())) {\n            let\
    \ j = word.length - 1;\n            while (j > i) {\n                if (!vowels.includes(word[j].toLowerCase()))\
    \ {\n                    let distance = j - i;\n                    if (distance\
    \ < closestDistance) {\n                        closestDistance = distance;\n\
    \                        closestVowel = word[i];\n                    }\n    \
    \                break;\n                }\n                j--;\n           \
    \ }\n        }\n    }\n    return closestVowel;\n}\n", "    let reversed = word.split('').reverse();\n\
    \    let index = -1;\n    for (let i = 0; i < reversed.length; i++) {\n      \
    \  if (reversed[i] == 'a' || reversed[i] == 'e' || reversed[i] == 'i' || reversed[i]\
    \ == 'o' || reversed[i] == 'u') {\n            index = i;\n            break;\n\
    \        }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    if\
    \ (index == reversed.length - 1) {\n        return \"\";\n    }\n    let vowel:\
    \ string = reversed[index];\n    if (index == 0) {\n        return vowel;\n  \
    \  }\n    for (let i = index + 1; i < reversed.length; i++) {\n        if (reversed[i]\
    \ != 'a' && reversed[i] != 'e' && reversed[i] != 'i' && reversed[i] != 'o' &&\
    \ reversed[i] != 'u') {\n            return vowel;\n        }\n    }\n    return\
    \ \"\";\n}\n", "    let vowel_idx = word.length - 1;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (is_vowel(word[i])) {\n            vowel_idx\
    \ = i;\n        } else {\n            if (vowel_idx !== word.length - 1) {\n \
    \               return word[vowel_idx];\n            }\n        }\n    }\n   \
    \ return \"\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
