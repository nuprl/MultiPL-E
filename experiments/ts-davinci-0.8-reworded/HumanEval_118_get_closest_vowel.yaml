name: HumanEval_118_get_closest_vowel
language: ts
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
  yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
  easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
  ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
  most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
  ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
  anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
  Above\"),\"o\");\n}\n\ntest();"
completions: ["    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const vowelsL =\
    \ ['A', 'E', 'I', 'O', 'U'];\n    let found: string = '';\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if\
    \ (i == word.length - 1) {\n                break;\n            }\n          \
    \  found = word[i];\n            break;\n        }\n    }\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowelsL.includes(word[i])) {\n            if\
    \ (i == word.length - 1) {\n                break;\n            }\n          \
    \  found = word[i];\n            break;\n        }\n    }\n    return found;\n\
    }\n", "    let vowels = \"aeiouAEIOU\";\n    let letters = word.split(\"\");\n\
    \    let lastLetter = letters[letters.length - 1];\n    let secondLastLetter =\
    \ letters[letters.length - 2];\n    let result = \"\";\n    if (vowels.indexOf(lastLetter)\
    \ > -1) {\n        result = lastLetter;\n    } else if (vowels.indexOf(secondLastLetter)\
    \ > -1) {\n        result = secondLastLetter;\n    }\n    return result;\n}\n\
    console.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "  return word.split('').reverse().reduce((acc: string, curr: string)\
    \ => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\
    \    const found = vowels.includes(curr);\n    if (found && acc === '') {\n  \
    \    return curr;\n    } else if (found && acc !== '') {\n      return '';\n \
    \   } else {\n      return acc;\n    }\n  }, '');\n}\n", "    var vowels = {\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n        \"A\": true,\n        \"E\": true,\n\
    \        \"I\": true,\n        \"O\": true,\n        \"U\": true\n    };\n   \
    \ var closest_vowel = \"\";\n    for (var i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels[word[i]]) {\n            closest_vowel = word[i];\n      \
    \      if (i != 0 && i != word.length - 1) {\n                if (!vowels[word[i\
    \ - 1]] && !vowels[word[i + 1]]) {\n                    return closest_vowel;\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}\n", " \
    \   const vowels = \"AEIOUaeiou\";\n    const consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n    const word_arr = word.split(\"\");\n    let result: string = \"\";\n  \
    \  let prev_char = \"\";\n    let next_char = \"\";\n    let char_index = 0;\n\
    \    let closest_vowel_index = word.length;\n    for (const char of word_arr)\
    \ {\n        if (vowels.indexOf(char) !== -1) {\n            if (consonants.indexOf(prev_char)\
    \ !== -1 && consonants.indexOf(next_char) !== -1) {\n                if (char_index\
    \ < closest_vowel_index) {\n                    closest_vowel_index = char_index;\n\
    \                    result = char;\n                }\n            }\n      \
    \  }\n        prev_char = char;\n        char_index++;\n        next_char = word_arr[char_index];\n\
    \    }\n    return result;\n}\n", "    let vowels = \"aeiouAEIOU\";\n    let closestVowel\
    \ = \"\";\n    let counter = 0;\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel =\
    \ word[i];\n            counter++;\n        }\n        if (counter === 2) {\n\
    \            break;\n        }\n    }\n    return closestVowel;\n}", "    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let letter = \"\";\n    let\
    \ result = \"\";\n    let previous = \"\";\n    let next = \"\";\n    let counter\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        letter = word[i];\n\
    \        if (vowels.indexOf(letter) != -1) {\n            result = letter;\n \
    \           break;\n        }\n        counter++;\n    }\n    if (counter == word.length)\
    \ {\n        return \"\";\n    }\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        previous = word[i - 1];\n        next = word[i + 1];\n        if\
    \ (vowels.indexOf(next) == -1 && vowels.indexOf(previous) == -1) {\n         \
    \   return result;\n        }\n    }\n    return \"\";\n}\n", "    // Your code\
    \ here\n    return \"\";\n}\n\n", "    let vowel = {\n        a: 0,\n        e:\
    \ 0,\n        i: 0,\n        o: 0,\n        u: 0,\n        A: 0,\n        E: 0,\n\
    \        I: 0,\n        O: 0,\n        U: 0\n    };\n    let consonant = {\n \
    \       b: 0,\n        c: 0,\n        d: 0,\n        f: 0,\n        g: 0,\n  \
    \      h: 0,\n        j: 0,\n        k: 0,\n        l: 0,\n        m: 0,\n   \
    \     n: 0,\n        p: 0,\n        q: 0,\n        r: 0,\n        s: 0,\n    \
    \    t: 0,\n        v: 0,\n        w: 0,\n        x: 0,\n        y: 0,\n     \
    \   z: 0,\n        B: 0,\n        C: 0,\n        D: 0,\n        F: 0,\n      \
    \  G: 0,\n        H: 0,\n        J: 0,\n        K: 0,\n        L: 0,\n       \
    \ M: 0,\n        N: 0,\n        P: 0,\n        Q: 0,\n        R: 0,\n        S:\
    \ 0,\n        T: 0,\n        V: 0,\n        W: 0,\n        X: 0,\n        Y: 0,\n\
    \        Z: 0\n    };\n    let count = 0;\n    let conCount = 0;\n    let vowCount\
    \ = 0;\n    let pre = '';\n    let v = '';\n    for (let i = 0; i < word.length;\
    \ i++) {\n        let s = word[i];\n        if (s in vowel) {\n            vowCount++;\n\
    \            if (vowCount === 1) {\n                v = word[i];\n           \
    \ }\n            pre = '';\n            count = 0;\n        } else if (s in consonant)\
    \ {\n            conCount++;\n            count++;\n            if (pre === 'con')\
    \ {\n                pre = '';\n                break;\n            }\n      \
    \      pre = 'con';\n        }\n    }\n    if (vowCount === 1 && conCount ===\
    \ 2", "  let closest: string = \"\";\n  const vowels: string[] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n  for (let i = word.length - 1; i >= 0; i--) {\n    if\
    \ (vowels.includes(word[i])) {\n      const consonant1: boolean =\n        !vowels.includes(word[i\
    \ - 1]) && word[i - 1] !== undefined;\n      const consonant2: boolean =\n   \
    \     !vowels.includes(word[i + 1]) && word[i + 1] !== undefined;\n      if (consonant1\
    \ && consonant2) {\n        closest = word[i];\n        break;\n      }\n    }\n\
    \  }\n  return closest;\n}\n", "  let ind = 0;\n  let res: string = \"\";\n  let\
    \ regex = /[aeiou]/i;\n  let vowel = \"\";\n  for (let i = word.length - 1; i\
    \ >= 0; i--) {\n    if (regex.test(word[i])) {\n      vowel = word[i];\n     \
    \ ind = i;\n      break;\n    }\n  }\n  if (vowel) {\n    if (ind - 1 >= 0 &&\
    \ ind + 1 < word.length) {\n      if (!regex.test(word[ind - 1]) && !regex.test(word[ind\
    \ + 1])) {\n        res = vowel;\n      }\n    }\n  }\n  return res;\n}\n", " \
    \   //your code here\n    let vowel = '';\n    let i = 0;\n    let count = 0;\n\
    \    let consonant = 0;\n    let word_s = word.split('');\n    for (i = word_s.length\
    \ - 1; i >= 0; i--) {\n        if (word_s[i] == 'a' || word_s[i] == 'e' || word_s[i]\
    \ == 'i' || word_s[i] == 'o' || word_s[i] == 'u' || word_s[i] == 'A' || word_s[i]\
    \ == 'E' || word_s[i] == 'I' || word_s[i] == 'O' || word_s[i] == 'U') {\n    \
    \        vowel = word_s[i];\n            count++;\n            if (count == 2)\
    \ {\n                break;\n            }\n        }\n        else {\n      \
    \      consonant++;\n        }\n    }\n    if (consonant >= 2) {\n        return\
    \ vowel;\n    }\n    else {\n        return '';\n    }\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));", "\tlet vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tlet consonants = ['b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R',\
    \ 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n\tlet revWord = word.split('').reverse().join('');\n\
    \tlet closestVowel = '';\n\tlet closestVowelIndex = 0;\n\tfor (let i = 0; i <\
    \ revWord.length; i++) {\n\t\tif (consonants.indexOf(revWord[i]) > -1) {\n\t\t\
    \tfor (let j = i + 1; j < revWord.length; j++) {\n\t\t\t\tif (vowels.indexOf(revWord[j])\
    \ > -1) {\n\t\t\t\t\tclosestVowel = revWord[j];\n\t\t\t\t\tclosestVowelIndex =\
    \ j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ closestVowel;\n}\n\nlet get_closest_vowel_v2 = (word: string): string => {\n\
    \tlet vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tlet consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D',", "  // TODO: Implement your code\
    \ here\n  let arr = []\n  word.split('').forEach((l, index) => {\n    let isVowel\
    \ = 'aeiou'.includes(l)\n    let isConsonant = 'bcdfghjklmnpqrstvwxyz'.includes(l)\n\
    \    if (isVowel && isConsonant) {\n      arr.push({ letter: l, index })\n   \
    \ }\n  })\n  let start = word.length\n  let end = 0\n  arr.forEach(element =>\
    \ {\n    start = element.index < start ? element.index : start\n    end = element.index\
    \ > end ? element.index : end\n  })\n  return start < end ? word[start] : ''\n\
    }\n", "    const word_arr = word.split('');\n    const vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    const min = 1000;\n\n    let vowel_index: number;\n    let min_index:\
    \ number;\n    let is_vowel: boolean;\n    for (let i = word_arr.length - 1; i\
    \ >= 0; i--) {\n        is_vowel = false;\n        for (let j = 0; j < vowels.length;\
    \ j++) {\n            if (word_arr[i] === vowels[j]) {\n                is_vowel\
    \ = true;\n                vowel_index = i;\n                break;\n        \
    \    }\n        }\n        if (is_vowel && (vowel_index - i) < min) {\n      \
    \      min_index = i;\n        }\n    }\n    return word_arr[min_index];\n}\n\
    console.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));", "    const vowels = 'aeiouAEIOU';\n    const cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';\n\
    \    let result = '';\n    for (let i = word.length - 1; i >= 0; i--) {\n    \
    \    const current = word[i];\n        if (cons.indexOf(current) !== -1) {\n \
    \           let j = i + 1;\n            while (word[j] && cons.indexOf(word[j])\
    \ !== -1) {\n                j++;\n            }\n            if (vowels.indexOf(word[j])\
    \ !== -1) {\n                result = word[j];\n                break;\n     \
    \       }\n        }\n    }\n    return result;\n}\n", "  const vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  let closest_vowel: string = \"\";\n  for (let\
    \ i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n \
    \     closest_vowel = word[i];\n      break;\n    }\n  }\n  return closest_vowel;\n\
    }\n", "  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelLastIndex = vowels.length\
    \ - 1;\n  let vowelIndex = word.length - 1;\n  while (vowelIndex >= 0) {\n   \
    \ if (vowels.indexOf(word[vowelIndex]) >= 0) {\n      let lastVowel = vowels.indexOf(word[vowelIndex]);\n\
    \      let leftConsonantIndex = vowelIndex - 1;\n      let rightConsonantIndex\
    \ = vowelIndex + 1;\n      if (leftConsonantIndex >= 0 && vowels.indexOf(word[leftConsonantIndex])\
    \ < 0 &&\n        rightConsonantIndex < word.length && vowels.indexOf(word[rightConsonantIndex])\
    \ < 0) {\n        return word[vowelIndex];\n      }\n    }\n    vowelIndex--;\n\
    \  }\n  return '';\n}\n", "    return '';\n}\n", "    let vowels = 'aeiou';\n\
    \    let currentPosition = word.length - 1;\n    let closestVowel = '';\n    let\
    \ hasVowel = false;\n    let hasConsonant = false;\n    while (currentPosition\
    \ >= 0) {\n        if (vowels.indexOf(word[currentPosition]) > -1) {\n       \
    \     hasVowel = true;\n            closestVowel = word[currentPosition];\n  \
    \      } else {\n            hasConsonant = true;\n        }\n        if (hasVowel\
    \ && hasConsonant) {\n            return closestVowel;\n        }\n        currentPosition--;\n\
    \    }\n    return '';\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
