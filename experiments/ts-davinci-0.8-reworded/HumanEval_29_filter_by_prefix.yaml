name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings:\
  \ string[], prefix: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter(s => s.startsWith(prefix));\n}\n", "    let\
    \ filtered = [];\n    for (let idx in strings) {\n        if (strings[idx].startsWith(prefix))\
    \ {\n            filtered.push(strings[idx]);\n        }\n    }\n    return filtered;\n\
    }\n", "  return strings.filter(function(a: string) {\n    return a.indexOf(prefix)\
    \ == 0;\n  });\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(string)\
    \ { return string.startsWith(prefix); });\n}\n", "    let result: string[] = [];\n\
    \    for (let s of strings) {\n        if (s.startsWith(prefix)) {\n         \
    \   result.push(s);\n        }\n    }\n    return result;\n}\n", "    return filter(strings,\
    \ function(s) { return s.startsWith(prefix); });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.startsWith(prefix);\n  });\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(string => string.indexOf(prefix)\
    \ === 0);\n}\n", "  return strings.filter(function(string) {\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "    const result: string[] = [];\n    for (const str of strings)\
    \ {\n        if (str.indexOf(prefix) === 0) {\n            result.push(str);\n\
    \        }\n    }\n    return result;\n}\n", "    var result: string[] = [];\n\
    \    var i = 0;\n    for (i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }", "    // YOUR CODE HERE\n    let checker = prefix.length;\n    let result:\
    \ string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].slice(0,\
    \ checker) == prefix) {\n            result.push(strings[i]);\n        }\n   \
    \ }\n    return result;\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(string => string.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(s) {\n        return s.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(string => string.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    let result:\
    \ string[] = [];\n    for (let s of strings) {\n        if (s.startsWith(prefix))\
    \ {\n            result.push(s);\n        }\n    }\n    return result;\n}\n",
  "    return strings.filter(str => str.startsWith(prefix));\n}\n", "    return _.filter(strings,\
    \ (s) => _.startsWith(s, prefix));\n}\n", "    var result: string[] = [];\n  \
    \  var i: number;\n    for (i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "  return strings.filter(v => v.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(x\
    \ => x.startsWith(prefix));\n}\n", "    return strings.filter(string => string.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    // TODO:\
    \ implement this function\n    let result: string[] = [];\n    for (let i = 0;\
    \ i < strings.length; i++) {\n        let firstChar = strings[i].charAt(0);\n\
    \        if (firstChar == prefix) {\n            result.push(strings[i]);\n  \
    \      }\n    }\n    return result;\n}\n", "  return strings.filter(s => s.indexOf(prefix)\
    \ === 0);\n}\n", "    var filtered: string[] = [];\n    strings.forEach(function(string){\n\
    \        if (string.startsWith(prefix)){\n            filtered.push(string);\n\
    \        }\n    });\n    return filtered;\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    // TODO\n    return [];\n}\n", "    let\
    \ ret: string[] = [];\n    strings.forEach(str => {\n        if (str.startsWith(prefix))\
    \ {\n            ret.push(str);\n        }\n    });\n    return ret;\n}\n", " \
    \   return strings.filter(str => {\n        return str.startsWith(prefix);\n \
    \   });\n}\n", "    let filtered_strings: string[] = [];\n    for (let i = 0;\
    \ i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n \
    \           filtered_strings.push(strings[i]);\n        }\n    }\n    return filtered_strings;\n\
    }\n", "    return strings.filter(str => str.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    var length = prefix.length;\n\
    \    return strings.filter(function(str) {\n        return (str.slice(0, length)\
    \ === prefix);\n    });\n}\n", "    return strings.filter(function(s: string)\
    \ {\n        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(string)\
    \ {\n        return string.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\ndescribe(\"filter_by_prefix\", () => {\n   \
    \ it(\"filter_by_prefix should work\", () => {\n        assert.deepEqual(filter_by_prefix([],\
    \ \"a\"), []);\n        assert.deepEqual(filter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\"), [\"abc\", \"array\"]);\n    });\n});\n", "    return\
    \ strings.filter(function(str) {\n        return str.startsWith(prefix);\n   \
    \ });\n}\n", "    var len: number = strings.length;\n    var new_arr: string[]\
    \ = [];\n    for (var i: number = 0; i < len; i++) {\n        if (strings[i].substring(0,\
    \ 1) == prefix) {\n            new_arr.push(strings[i]);\n        }\n    }\n \
    \   return new_arr;\n}\n", "  return strings.filter(function(string){\n    return\
    \ string.startsWith(prefix);\n  });\n}\n", "  let result: string[] = [];\n  for\
    \ (let str of strings) {\n    if (str.startsWith(prefix)) {\n      result.push(str);\n\
    \    }\n  }\n  return result;\n}\n", "    var filtered: string[] = [];\n    strings.forEach(function(s:\
    \ string): void {\n        if (s.startsWith(prefix)) {\n            filtered.push(s);\n\
    \        }\n    });\n    return filtered;\n}\n\n", "    return _.filter(strings,\
    \ (x) => _.startsWith(x, prefix));\n}\n", "    const result: string[] = [];\n\
    \    for (const str of strings) {\n        if (str.startsWith(prefix)) {\n   \
    \         result.push(str);\n        }\n    }\n    return result;\n}\n\nconst\
    \ readline = require(\"readline\");\nconst rl = readline.createInterface({\n \
    \   input: process.stdin,\n    output: process.stdout,\n});\n\nconst choose_from_list\
    \ = (header: string, options: string[]): string => {\n    const sorted_options\
    \ = options.sort();\n    while (true) {\n        console.log(header);\n      \
    \  for (const [i, opt] of sorted_options.entries()) {\n            console.log(`${i\
    \ + 1}: ${opt}`);\n        }\n        const input = await_question(`What do you\
    \ want to do? [1-${sorted_options.length}] `);\n        const index = Number.parseInt(input)\
    \ - 1;\n        if (index >= 0 && index < sorted_options.length) {\n         \
    \   return sorted_options[index];\n        }\n    }\n};\n\nconst await_question\
    \ = (question: string): Promise<string> => {\n    return new Promise((resolve)\
    \ => {\n        rl.question(question, (answer) => {\n            resolve(answer);\n\
    \        });\n    });\n};\n\nconst copy_from_original = (file_path: string): void\
    \ => {\n    fs.copyFileSync(`${ORIGINAL_FOLDER}/${file_path}`, `${CLIENT_FOLDER}/${file_path}`);\n\
    };\n\nconst main = async (): Promise<void> => {\n    console.log(\"\\nWelcome\
    \ to the client-side code generator!\\n\");\n    while (true) {\n        const\
    \ package_type = await choose_from_list(\n            \"What type of package do\
    \ you want to create?\",\n            [\"filter\", \"unmodifiable list\", \"unmodifiable\
    \ map\", \"unmodifiable set\", \"unmodifiable sorted map\", \"unmodifiable sorted\
    \ set\"]\n        );\n        const package_name = await_question(\"What do you\
    \ want to call your package? (Snake", "  /////your code here/////\n  return strings.filter(item\
    \ => item.indexOf(prefix) === 0);\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "  return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "    return strings.filter(function(s) {\n\
    \        return s.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n\n", "    return strings.filter(e => e.startsWith(prefix));\n\
    }\n", "    var res: string[] = [];\n    for (var i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].slice(0, prefix.length) == prefix)\n            res.push(strings[i]);\n\
    \    }\n    return res;\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    let result: string[] = [];\n    for (let s of strings) {\n        if\
    \ (s.startsWith(prefix)) {\n            result.push(s);\n        }\n    }\n  \
    \  return result;\n}\n", "  return strings.filter(function(element) {\n    return\
    \ element.startsWith(prefix);\n  });\n}\n", "    return strings.filter(value =>\
    \ value.startsWith(prefix));\n}\n", "    return strings.filter(function(string)\
    \ {\n        return string.startsWith(prefix);\n    });\n}\n", "  return strings.filter(function(str:\
    \ string): boolean {\n    return str.startsWith(prefix);\n  });\n}\n", "    return\
    \ strings.filter(function(item) {\n        return item.startsWith(prefix);\n \
    \   });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n}", " \
    \   let result: string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n\
    \        if (strings[i].startsWith(prefix)) {\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return strings.filter(s => s.indexOf(prefix)\
    \ === 0);\n}\n", "  return [];\n}\n", "    const filtered = strings.filter(s =>\
    \ s.indexOf(prefix) === 0);\n    return filtered;\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n\ndescribe(\"filter_by_prefix\", () => {\n    it(\"filters strings that start\
    \ with a given prefix\", () => {\n        assert.deepEqual(filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\"), [\"abc\", \"array\"]);\n    });\n\
    });\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    const\
    \ result: string[] = [];\n    for (const str of strings) {\n        if (str.startsWith(prefix))\
    \ {\n            result.push(str);\n        }\n    }\n    return result;\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    let result: string[]\
    \ = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(string => string.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return [];\n}\n",
  "    return strings.filter(string => string.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(word) { return word.startsWith(prefix); });\n}\n", " \
    \ var filtered: string[] = [];\n  for (var i = 0; i < strings.length; i++) {\n\
    \    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\n", "  const result: string[] = [];\n  for\
    \ (const str of strings) {\n    if (str.startsWith(prefix)) {\n      result.push(str);\n\
    \    }\n  }\n  return result;\n}\n", "    let result: string[] = [];\n    for\
    \ (let s of strings) {\n        if (s.startsWith(prefix)) {\n            result.push(s);\n\
    \        }\n    }\n    return result;\n}\n", "    return strings.filter(function(element)\
    \ {\n        return element.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\n\n", "    const result: string[] = [];\n   \
    \ for (const string of strings) {\n        if (string.startsWith(prefix)) {\n\
    \            result.push(string);\n        }\n    }\n    return result;\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return _.filter(strings,\
    \ function(str) {\n        return str.indexOf(prefix) === 0;\n    });\n}\n", " \
    \ return strings.filter(x => x.startsWith(prefix));\n}\n\nexport function getCompletions(\n\
    \  contents: string,\n  prefix: string,\n  line: string,\n  col: number\n): Completion[]\
    \ {\n  const completions: Completion[] = [];\n  if (isImport(line, col)) {\n \
    \   const line_number = parseInt(line.split(\":\")[0]);\n    const filenames =\
    \ getFilenamesInSameDir(contents, line_number);\n    const prefix_filenames =\
    \ filter_by_prefix(filenames, prefix);\n    const deduped_prefix_filenames = dedupe(prefix_filenames);\n\
    \    completions.push(...deduped_prefix_filenames.map(x => ({ name: x })));\n\
    \  }\n  return completions;\n}", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    // TODO: your code here\n    return strings.filter(word => word.startsWith(prefix));\n\
    }\n", "    return strings.filter(function(value) { return value.startsWith(prefix);\
    \ });\n}\n", "  return strings.filter(str => str.startsWith(prefix));\n}\n", " \
    \   let result: string[] = [];\n    for (let string of strings) {\n        if\
    \ (string.startsWith(prefix)) {\n            result.push(string);\n        }\n\
    \    }\n    return result;\n}\n", "    return strings.filter( (s) => { return\
    \ s.startsWith(prefix); } );\n}\n", "    let prefix_regex = new RegExp(`^${prefix}`);\n\
    \    return strings.filter(x => x.match(prefix_regex));\n}\n", "  // your code\
    \ here\n  return [];\n}\n", "    let prefix_length = prefix.length;\n    return\
    \ strings.filter(s => s.slice(0, prefix_length) === prefix);\n}\n", "    return\
    \ strings.filter(item => item.startsWith(prefix));\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(function(string: string)\
    \ {\n    return string.indexOf(prefix) === 0;\n  });\n}\n", "    return strings.filter(function(value:\
    \ string) {\n        return value.indexOf(prefix) === 0;\n    });\n}\n", "   \
    \ const filter_by_prefix_iter = function(strings_lst: string[], prefix: string,\
    \ acc: string[]): string[] {\n        if (is_empty_list(strings_lst)) {\n    \
    \        return acc;\n        } else {\n            const str = head(strings_lst);\n\
    \            const rest = tail(strings_lst);\n            if (str.startsWith(prefix))\
    \ {\n                return filter_by_prefix_iter(rest, prefix, pair(str, acc));\n\
    \            } else {\n                return filter_by_prefix_iter(rest, prefix,\
    \ acc);\n            }\n        }\n    };\n    return reverse(filter_by_prefix_iter(strings,\
    \ prefix, []));\n}\n", "  let filtered: string[] = [];\n  for (let s of strings)\
    \ {\n    if (s.startsWith(prefix)) {\n      filtered.push(s);\n    }\n  }\n  return\
    \ filtered;\n}\n", "    let filtered = [];\n    for (let string of strings) {\n\
    \        if (string.startsWith(prefix)) {\n            filtered.push(string);\n\
    \        }\n    }\n    return filtered;\n}\n", "  return strings.filter(str =>\
    \ str.startsWith(prefix));\n}\n", "    const result: string[] = [];\n    strings.forEach(element\
    \ => {\n        if (element.startsWith(prefix)) {\n            result.push(element);\n\
    \        }\n    });\n    return result;\n}\n", "    let prefixed_strings: string[]\
    \ = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            prefixed_strings.push(strings[i]);\n        }\n    }\n    return\
    \ prefixed_strings;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  let result: string[] = [];\n  let i = 0;\n  while (i < strings.length)\
    \ {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i]);\n\
    \    }\n    i++;\n  }\n  return result;\n}\n", "    const result: string[] = [];\n\
    \    for (const str of strings) {\n        if (str.startsWith(prefix)) {\n   \
    \         result.push(str);\n        }\n    }\n    return result;\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return filter(strings,\
    \ (str) => str.startsWith(prefix));\n}\n", "    return strings.filter(function(item:\
    \ string) {\n        return item.startsWith(prefix);\n    });\n}\n", "  return\
    \ strings.filter(function(word: string): boolean {\n    return word.substring(0,\
    \ prefix.length) === prefix;\n  });\n}\n", "    let starts_with = (str: string):\
    \ boolean => {\n        return str.slice(0, prefix.length) === prefix;\n    };\n\
    \    return strings.filter(starts_with);\n}\n", "    return strings.filter( function(string)\
    \ {\n        return string.startsWith(prefix);\n    });\n}\n", "  return strings.filter(string\
    \ => string.startsWith(prefix));\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n\n", "    return strings.filter(\n        function(item) {\n            return\
    \ item.startsWith(prefix);\n        }\n    );\n}\n\n", "  return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "  return strings.filter(function(str) {\n\
    \    return str.startsWith(prefix);\n  });\n}\n", "  return strings.filter(function(i)\
    \ {\n    return i.startsWith(prefix);\n  });\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return [];\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(name => name.startsWith(prefix));\n}\n", "  \
    \  let prefix_len = prefix.length;\n    let filtered = strings.filter(str => str.substring(0,\
    \ prefix_len) == prefix);\n    return filtered;\n}\n", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    let new_list: string[] = [];\n    strings.forEach(function(name) {\n\
    \        if (name.startsWith(prefix)) {\n            new_list.push(name);\n  \
    \      }\n    });\n    return new_list;\n}\n", "    let results: string[] = [];\n\
    \    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ results.push(strings[i]);\n    }\n    return results;\n}\n", "    const result:\
    \ string[] = [];\n    for (const str of strings) {\n        if (str.startsWith(prefix))\
    \ {\n            result.push(str);\n        }\n    }\n    return result;\n}\n",
  "    var arr = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            arr.push(strings[i]);\n        }\n    }\n    return arr;\n}\n",
  "  return strings.filter(str => str.startsWith(prefix));\n}\n\nconst result = filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\");\n\nconsole.log(result);", "  return\
    \ strings.filter(function(item) {\n    return item.indexOf(prefix) == 0;\n  });\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(s) {\n        return s.startsWith(prefix);\n    });\n\
    }\n", "    let rtn : string[] = [];\n    for (let i = 0; i < strings.length; i++)\
    \ {\n        if (strings[i].startsWith(prefix)) {\n            rtn.push(strings[i]);\n\
    \        }\n    }\n    return rtn;\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    let result: string[] = [];\n    for (let s of strings) {\n        if\
    \ (s.startsWith(prefix))\n            result.push(s);\n    }\n    return result;\n\
    }\n", "    return strings.filter(function(value) {\n        return value.substring(0,\
    \ prefix.length) === prefix;\n    });\n}\n", "    return strings.filter(s => s.indexOf(prefix)\
    \ === 0);\n}", "    const filtered = [];\n    for (const string of strings) {\n\
    \        if (string.startsWith(prefix)) {\n            filtered.push(string);\n\
    \        }\n    }\n    return filtered;\n}\n\ntest(\"test filter_by_prefix\",\
    \ () => {\n    expect(filter_by_prefix([], \"a\")).toEqual([]);\n    expect(filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")).toEqual([\"abc\", \"array\"]);\n\
    });\n", "  return strings.filter(str => str.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(function(string) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "  return strings.filter(e => e.startsWith(prefix));\n}\n", " \
    \   return strings.filter(s => s.startsWith(prefix));\n}\n", "    var filtered:\
    \ string[] = [];\n    var filterPrefix: string = prefix;\n    for (var i = 0;\
    \ i < strings.length; i++) {\n        if (strings[i].indexOf(filterPrefix) ==\
    \ 0) {\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "  return strings.filter(string => string.startsWith(prefix));\n}\n", " \
    \   let output: string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n\
    \        if (strings[i].startsWith(prefix)) {\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "    return strings.filter(x => x.startsWith(prefix));\n\
    }\n", "    let output: string[] = [];\n    for (let i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n", "  return strings.filter(function(value:\
    \ string): boolean {\n    return value.startsWith(prefix);\n  });\n}\n", "  let\
    \ a: string[] = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix))\
    \ {\n      a.push(strings[i]);\n    }\n  }\n  return a;\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(function(element)\
    \ {\n        return element.startsWith(prefix);\n    });\n}\n", "  const res:\
    \ string[] = [];\n  for (const s of strings) {\n    if (prefix === s.substring(0,\
    \ prefix.length)) {\n      res.push(s);\n    }\n  }\n  return res;\n}\n\nexport\
    \ function get_browser_url(url: string): string {\n  if (browser) {\n    const\
    \ path = url.replace(/\\//g, \"%2F\");\n    return `${browser_url}${path}`;\n\
    \  } else {\n    return url;\n  }\n}\n\nexport function get_code_url(path: string):\
    \ string {\n  return get_browser_url(`${site_prefix}/_static/code/${path}`);\n\
    }\n\nexport function get_notebook_url(path: string): string {\n  return get_browser_url(`${site_prefix}/_static/notebooks/${path}`);\n\
    }\n\nexport function get_course_notebook_url(path: string): string {\n  return\
    \ get_browser_url(`${site_prefix}/course/_static/notebooks/${path}`);\n}\n\nexport\
    \ function get_site_url(path: string): string {\n  return get_browser_url(`${site_prefix}/${path}`);\n\
    }\n\nexport function get_course_url(path: string): string {\n  return get_browser_url(`${site_prefix}/course/${path}`);\n\
    }\n", "    let filtered: string[] = [];\n    for (let str of strings) {\n    \
    \    if (str.startsWith(prefix)) {\n            filtered.push(str);\n        }\n\
    \    }\n    return filtered;\n}\n", "  return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    var result: string[] = [];\n    for (var i = 0; i < strings.length;\
    \ i++) {\n        if (strings[i].startsWith(prefix)) {\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return strings.filter(\n   \
    \     (s: string) => s.startsWith(prefix)\n    );\n}\n", "    const prefix_len\
    \ = prefix.length;\n    return strings.filter(v => v.slice(0, prefix_len) ===\
    \ prefix);\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(string)\
    \ {\n        return string.startsWith(prefix);\n    });\n}\n", "  return strings.filter(str\
    \ => str.substring(0, prefix.length) === prefix);\n}\n", "    var output = [];\n\
    \    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    let result:\
    \ string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n        let\
    \ str = strings[i];\n        if (str.startsWith(prefix)) {\n            result.push(str);\n\
    \        }\n    }\n    return result;\n}\n", "  const prefix_end = prefix.length\n\
    \  return strings.filter(s => s.startsWith(prefix))\n}", "    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "  let result: string[] = [];\n  for (let i\
    \ = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n\
    \      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n", "    let\
    \ filtered: string[] = [];\n    for (let string of strings) {\n        if (string.startsWith(prefix))\
    \ {\n            filtered.push(string);\n        }\n    }\n    return filtered;\n\
    }\n\n", "    return strings.filter(s => starts_with(s, prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\nconsole.log(filter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\"));\n", "    return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "  const filtered = [];\n  for (const str of strings) {\n    if (str.startsWith(prefix))\
    \ {\n      filtered.push(str);\n    }\n  }\n  return filtered;\n}\n", "    let\
    \ matches: string[] = [];\n    let not_matches: string[] = [];\n    let is_prefix\
    \ = (str: string) => str.startsWith(prefix);\n    for (let str of strings) {\n\
    \        if (is_prefix(str)) {\n            matches.push(str);\n        } else\
    \ {\n            not_matches.push(str);\n        }\n    }\n    return matches;\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n\ntest(filter_by_prefix,\
    \ [[\"abc\", \"bcd\", \"cde\", \"array\"], \"a\"], [\"abc\", \"array\"]);\n",
  "    const n = prefix.length;\n    let ret: string[] = [];\n    for (let string\
    \ of strings) {\n        if (string.substring(0, n) === prefix)\n            ret.push(string);\n\
    \    }\n    return ret;\n}\n", "    var filteredStrings: string[] = [];\n    for\
    \ (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(prefix)\
    \ == 0) {\n            filteredStrings.push(strings[i]);\n        }\n    }\n \
    \   return filteredStrings;\n}\n", "    return strings.filter(s => s.indexOf(prefix)\
    \ === 0);\n}\n", "    return strings.filter(function(str: string) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }", "  return strings.filter(function(word: string) {\n    return word.indexOf(prefix)\
    \ === 0;\n  });\n}\n\ntest(\"test_filter_by_prefix\", function(assert) {\n  assert.deepEqual(filter_by_prefix([],\
    \ \"a\"), []);\n  assert.deepEqual(filter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\"), [\n    \"abc\",\n    \"array\"\n  ]);\n});\n", "  return\
    \ strings.filter(str => str.startsWith(prefix));\n}\n", "    return strings.filter(function(str)\
    \ {\n        return str.startsWith(prefix);\n    });\n}\n\n", "    let res: string[]\
    \ = [];\n    for (let str of strings) {\n        if (str.startsWith(prefix)) {\n\
    \            res.push(str);\n        }\n    }\n    return res;\n}\n", "    let\
    \ ret = [];\n    for (let str of strings) {\n        if (str.startsWith(prefix))\
    \ {\n            ret.push(str);\n        }\n    }\n    return ret;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
