name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings:\
  \ string[], prefix: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter(s => s.startsWith(prefix));\n}\n", "    let\
    \ filtered = [];\n    for (let idx in strings) {\n        if (strings[idx].startsWith(prefix))\
    \ {\n            filtered.push(strings[idx]);\n        }\n    }\n    return filtered;\n\
    }\n", "  return strings.filter(function(a: string) {\n    return a.indexOf(prefix)\
    \ == 0;\n  });\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n\
    }\n\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(string)\
    \ { return string.startsWith(prefix); });\n}\n", "    let result: string[] = [];\n\
    \    for (let s of strings) {\n        if (s.startsWith(prefix)) {\n         \
    \   result.push(s);\n        }\n    }\n    return result;\n}\n", "    return filter(strings,\
    \ function(s) { return s.startsWith(prefix); });\n}\n", "  return strings.filter(function(string){\n\
    \    return string.startsWith(prefix);\n  });\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n", "    return strings.filter(string => string.indexOf(prefix)\
    \ === 0);\n}\n", "  return strings.filter(function(string) {\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "    const result: string[] = [];\n    for (const str of strings)\
    \ {\n        if (str.indexOf(prefix) === 0) {\n            result.push(str);\n\
    \        }\n    }\n    return result;\n}\n", "    var result: string[] = [];\n\
    \    var i = 0;\n    for (i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }", "    // YOUR CODE HERE\n    let checker = prefix.length;\n    let result:\
    \ string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].slice(0,\
    \ checker) == prefix) {\n            result.push(strings[i]);\n        }\n   \
    \ }\n    return result;\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "    return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
