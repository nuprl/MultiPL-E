name: HumanEval_62_derivative
language: ts
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = derivative;\n  assert.deepEqual(candidate([3, 1, 2,\
  \ 4, 5]),[1, 4, 12, 20]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["    let size = xs.length;\n    for (let i = 0; i < size - 1; i++) {\n\
    \        xs[i] = xs[i + 1] * (i + 1);\n    }\n    xs.pop();\n    return xs;\n\
    }\n", "    // your code goes here\n    const result: number[] = [];\n    for (let\
    \ i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return\
    \ result;\n}\n", "    const der: number[] = [];\n    for (let i = 1; i < xs.length;\
    \ i++) {\n        der.push(xs[i] * i);\n    }\n    return der;\n}\n", "  return\
    \ xs.map((x, i) => x * i).slice(1);\n}\n", "    const n = xs.length - 1;\n   \
    \ return Array.from({ length: n }, (_, i) => (i + 1) * xs[i + 1]);\n}\n\nexport\
    \ default derivative;", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n",
  "  const result: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "  return xs.slice(1).map((x, index) =>\
    \ (index + 1) * x);\n}\n\ntest(\"Problem\", () => {\n  expect(derivative([3, 1,\
    \ 2, 4, 5])).toEqual([1, 4, 12, 20]);\n  expect(derivative([1, 2, 3])).toEqual([2,\
    \ 6]);\n});", "  return xs.slice(1).map((v, i) => (i + 1) * v);\n}\n", "  return\
    \ xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "    return xs.slice(1).map((x,\
    \ i) => (i + 1) * x);\n}\n", "  let l = xs.length;\n  let result = [];\n  for\
    \ (let i = 1; i < l; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n\
    }\n", "  let out = [];\n  for (let i = 1; i < xs.length; i++) {\n    out.push(xs[i]\
    \ * i);\n  }\n  return out;\n}\n", "    if (xs.length === 0) {\n        return\
    \ xs;\n    }\n    const result = [];\n    for (let i = 1; i < xs.length; i++)\
    \ {\n        result.push(i * xs[i]);\n    }\n    return result;\n}\n", "  let\
    \ dxs: number[] = [];\n  for (let i = 1; i < xs.length; i++) {\n    dxs.push(i\
    \ * xs[i]);\n  }\n  return dxs;\n}\n", "    const newxs = [];\n    for (let i\
    \ = 1; i < xs.length; i++) {\n        newxs.push(xs[i] * i);\n    }\n    return\
    \ newxs;\n}\n", "  return xs.slice(1).map((x, i) => (i + 1) * x);\n}\n", "  if\
    \ (xs.length === 0) return [];\n  const dxs = [];\n  for (let i = 1; i < xs.length;\
    \ i++) {\n    dxs.push(i * xs[i]);\n  }\n  return dxs;\n}\n", "  if (xs.length\
    \ === 0) {\n    return [];\n  }\n  const [, ...ys] = xs;\n  return ys.map((x,\
    \ i) => x * (i + 1));\n}\n", "  const dxs: number[] = [];\n  for (let i = 1; i\
    \ < xs.length; i++) {\n    dxs.push(i * xs[i]);\n  }\n  return dxs;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
