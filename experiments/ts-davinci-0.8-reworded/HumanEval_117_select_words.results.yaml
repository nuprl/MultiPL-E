language: ts
name: HumanEval_117_select_words
results:
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    const res: string[] = [];\n    const words\
    \ = s.split(' ');\n    words.forEach(word => {\n        let consonants = 0;\n\
    \        for (let i = 0; i < word.length; i++) {\n            if (!vowels.includes(word[i]))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            res.push(word);\n        }\n    });\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbhv52b66.ts(24,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    //assume\
    \ the input string contains only letters and spaces\n    const arr = s.split(\"\
    \ \");\n    return arr.filter(word => get_count(word) === n);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7h9sme2v.ts(20,31): error TS2304: Cannot find name
    ''get_count''.

    '
  timestamp: 1659822273
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let x =\
    \ s.split(\" \");\n    let res = [];\n    for (let i = 0; i < x.length; i++) {\n\
    \        let cons = 0;\n        for (let j = 0; j < x[i].length; j++) {\n    \
    \        if (x[i][j] !== \"a\" && x[i][j] !== \"e\" && x[i][j] !== \"i\" && x[i][j]\
    \ !== \"o\" && x[i][j] !== \"u\") {\n                cons++;\n            }\n\
    \        }\n        if (cons === n) {\n            res.push(x[i]);\n        }\n\
    \    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpry490jpz.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpry490jpz.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(' ');\n    let results: string[] = [];\n    let consonants:\
    \ string = 'bcdfghjklmnpqrstvwxyz';\n    let countConsonants: number = 0;\n  \
    \  for (let i: number = 0; i < words.length; i++) {\n        countConsonants =\
    \ 0;\n        for (let j: number = 0; j < words[i].length; j++) {\n          \
    \  if (consonants.indexOf(words[i][j]) > -1) {\n                countConsonants++;\n\
    \            }\n        }\n        if (countConsonants === n) {\n            results.push(words[i]);\n\
    \        }\n    }\n    return results;\n}\n\ndescribe('select_words', () => {\n\
    \    it('should return an array of all words from string s that contain exactly\
    \ n consonants, in order these words appear in the string s', () => {\n      \
    \  assert.deepEqual(select_words(\"Mary had a little lamb\", 4), [\"little\"]);\n\
    \        assert.deepEqual(select_words(\"Mary had a little lamb\", 3), [\"Mary\"\
    , \"lamb\"]);\n        assert.deepEqual(select_words(\"simple white space\", 2),\
    \ []);\n        assert.deepEqual(select_words(\"Hello world\", 4), [\"world\"\
    ]);\n        assert.deepEqual(select_words(\"Uncle sam\", 3), [\"Uncle\"]);\n\
    \    });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy42x8nro.ts(36,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpy42x8nro.ts(37,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    '
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let res:\
    \ string[] = [];\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ words = s.split(\" \");\n    words.forEach(w => {\n        let c = 0;\n    \
    \    for (let i = 0; i < w.length; i++) {\n            if (!vowels.includes(w[i]))\
    \ c++;\n        }\n        if (c === n) res.push(w);\n    });\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw8ubd0nm.ts(24,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822273
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let consString\
    \ = s.replace(/[aeiou]/g, '');\n  if (consString.length === 0) {\n    return [];\n\
    \  }\n  let words = s.split(' ');\n  let results = [];\n  words.forEach(function(word)\
    \ {\n    let consWord = word.replace(/[aeiou]/g, '');\n    if (consWord.length\
    \ === n) {\n      results.push(word);\n    }\n  });\n  return results;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp4z6yk36c.js:39:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp4z6yk36c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822273
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    s.split(\" \").forEach(str => {\n        if (str.match(/[qwrtpsdfghjklzxcvbnm]/gi)\
    \ !== null && str.match(/[qwrtpsdfghjklzxcvbnm]/gi).length === n) {\n        \
    \    result.push(str);\n        }\n    });\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmp0g5wh_0g.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0g5wh_0g.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822274
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let arr\
    \ = s.split(' ');\n    let results = [];\n    const vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let word of arr) {\n        let letters = word.split('');\n\
    \        let count = 0;\n        for (let letter of letters) {\n            if\
    \ (!vowels.includes(letter)) {\n                count++;\n            }\n    \
    \    }\n        if (count === n) {\n            results.push(word);\n        }\n\
    \    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvmar_cpf.ts(25,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(' ');\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (countVowels(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words(\"Hello world\"\
    , 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzptr1j0t.ts(21,13): error TS2304: Cannot find name
    ''countVowels''.

    '
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(' ');\n  return words.filter(w => countConsonants(w) === n);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr3u87luy.ts(19,28): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    const words = s.split(' ');\n    const result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let currentWord\
    \ = words[i];\n        let count = 0;\n        for (let j = 0; j < currentWord.length;\
    \ j++) {\n            if (!vowels.includes(currentWord[j])) {\n              \
    \  count++;\n            }\n        }\n        if (count === n) {\n          \
    \  result.push(currentWord);\n        }\n    }\n    return result;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpix6stln2.ts(25,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822273
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    //  let\
    \ words: string[] = s.split(\" \");\n    //  let consonants: string[] = [];\n\
    \    //  for (let i = 0; i < words.length; i++) {\n    //      let numberOfConsonants:\
    \ number = 0;\n    //      for (let j = 0; j < words[i].length; j++) {\n    //\
    \          if (words[i][j] !== \"a\" && words[i][j] !== \"i\" && words[i][j] !==\
    \ \"u\" && words[i][j] !== \"e\" && words[i][j] !== \"o\") {\n    //         \
    \     numberOfConsonants += 1;\n    //          }\n    //      }\n    //     \
    \ if (numberOfConsonants === n) {\n    //          consonants.push(words[i]);\n\
    \    //      }\n    //  }\n    //  return consonants;\n    // return s.split(\"\
    \ \").filter(w => w.match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n);\n    return\
    \ s.split(\" \").filter(word => word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpko7opll_.js:33\n    return s.split(\" \").filter(function (word)\
    \ { return word.match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n; });\n       \
    \                                                                            \
    \            ^\n\nTypeError: Cannot read properties of null (reading 'length')\n\
    \    at /tmp/tmpko7opll_.js:33:96\n    at Array.filter (<anonymous>)\n    at select_words\
    \ (/tmp/tmpko7opll_.js:33:25)\n    at test (/tmp/tmpko7opll_.js:38:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpko7opll_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const output:\
    \ string[] = [];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    s.split('\
    \ ').forEach(word => {\n        let wordConsonantsCount = 0;\n        word.split('').forEach(letter\
    \ => {\n            if (!vowels.includes(letter)) wordConsonantsCount++;\n   \
    \     });\n        if (wordConsonantsCount === n) output.push(word);\n    });\n\
    \    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ksm2oqe.ts(23,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822273
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (!s)\
    \ return [];\n    const words = s.split(' ');\n    const result = [];\n    for\
    \ (let i = 0; i < words.length; i++) {\n        const word = words[i];\n     \
    \   const vowels = word.match(/[aeiouAEIOU]/g);\n        if (vowels && vowels.length\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpm72qfghb.js:34:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpm72qfghb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822273
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ < 1) {\n    return [];\n  }\n  let consonants: number;\n  let words = s.split(\"\
    \ \");\n  let result: string[] = [];\n  words.forEach(word => {\n    consonants\
    \ = 0;\n    word.split(\"\").forEach(letter => {\n      if (letter.match(/[bcdfghjklmnpqrstvwxyz]/i))\
    \ {\n        consonants++;\n      }\n    });\n    if (consonants === n) {\n  \
    \    result.push(word);\n    }\n  });\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822274
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const result = [];\n  const vowels = \"aeiou\";\n  words.forEach(word\
    \ => {\n    const filtered = word.split(\"\").filter(char => !vowels.includes(char));\n\
    \    if (filtered.length === n) {\n      result.push(word);\n    }\n  });\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvgqovpmq.ts(22,60): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659822273
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let input\
    \ = s.split(\" \");\n    let output = [];\n    let consonants = ['b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'];\n    for (let i = 0; i < input.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < input[i].length; j++) {\n            if (consonants.includes(input[i][j].toLowerCase()))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            output.push(input[i]);\n        }\n    }\n    return output;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf5joxm3x.ts(24,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822273
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  const consonants = \"bcdfghjklmnpqrstvwxyz\";\n  const words\
    \ = s.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let count\
    \ = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      for (let k = 0;\
    \ k < consonants.length; k++) {\n        if (words[i][j] === consonants[k]) {\n\
    \          count++;\n        }\n      }\n    }\n    if (count === n) {\n     \
    \ result.push(words[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpur251eru.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpur251eru.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822274
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(' ');\n  return words.filter(x => x.replace(/[aeiou]/gi, '').length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822274
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const consonants\
    \ = /[qwrtpsdfghjklzxcvbnm]/gi;\n    const words = s.split(' ');\n    return words.filter(w\
    \ => {\n        return (w.match(consonants) || []).length === n;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmp4z6eehwq.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4z6eehwq.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822274
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const re:\
    \ RegExp = /[aeiou]/;\n    const re2: RegExp = /[^aeiou]/;\n    return s.split(\"\
    \ \").filter(\n        word => word.split(\"\").filter(\n            letter =>\
    \ re.test(letter)).length === n\n    );\n}\n\n\nconsole.log(select_words(\"Mary\
    \ had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyfvhlxl_.js:30:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpyfvhlxl_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    []

    [ ''simple'', ''white'', ''space'' ]

    []

    []

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (!s)\
    \ return [];\n    if (n == 0) return [];\n    let consonants = 0;\n    let words\
    \ = s.split(' ');\n    let selectedWords = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        for (let j = 0; j < words[i].length; j++) {\n            if\
    \ (isConsonant(words[i][j])) {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            selectedWords.push(words[i]);\n\
    \        }\n        consonants = 0;\n    }\n    return selectedWords;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpujzl7opd.ts(25,17): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  // TODO:\
    \ implement\n  // Hint: think about what kind of data structures are you using\n\
    \  // to solve this problem. I used two data structures in my solution.\n  return\
    \ [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzh1ngcpm.js:26:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpzh1ngcpm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = \"a, e, i, o, u, y, A, E, I, O, U, Y\".split(', ');\n    const consonants\
    \ = \"b, c, d, f, g, h, j, k, l, m, n, p, q, r, s, t, v, w, x, z, B, C, D, F,\
    \ G, H, J, K, L, M, N, P, Q, R, S, T, V, W, X, Z\".split(', ');\n    const words\
    \ = s.split(' ');\n    const results: string[] = [];\n    words.forEach(word =>\
    \ {\n        const count = word.split('').reduce((acc, value) => {\n         \
    \   if (consonants.includes(value)) {\n                acc++;\n            }\n\
    \            return acc;\n        }, 0);\n        if (count === n) {\n       \
    \     results.push(word);\n        }\n    });\n    return results;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxrox9lps.ts(24,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  return s.split(\"\
    \ \").filter(w => countConsonants(w) === n);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv494hjum.ts(18,35): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004039
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  let arr = s.split(\" \");\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (\n      arr[i].toLowerCase().replace(/[^aeiou]/g, \"\").length\
    \ ===\n      arr[i].length - n\n    ) {\n      result.push(arr[i]);\n    }\n \
    \ }\n  return result;\n}\nconsole.log(select_words(\"simple white space\", 2));\n\
    console.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"Hello world\", 4));\n\
    console.log(select_words(\"Uncle sam\", 3));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[]

    [ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let sArray\
    \ = s.split(\" \");\n    let arr = [];\n    for (let word of sArray) {\n     \
    \   let consCount = 0;\n        for (let i = 0; i < word.length; i++) {\n    \
    \        let char = word[i];\n            if (char !== \"a\" && char !== \"e\"\
    \ && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n                consCount++;\n\
    \            }\n        }\n        if (consCount === n) {\n            arr.push(word);\n\
    \        }\n    }\n    return arr;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpbu8iaktl.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpbu8iaktl.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    const result = [];\n    const vowels = \"aeiouAEIOU\"\
    ;\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  \
    \  words.forEach(word => {\n        let numConsonants = 0;\n        for (let i\
    \ = 0; i < word.length; i++) {\n            if (consonants.indexOf(word[i]) >=\
    \ 0) {\n                numConsonants++;\n            }\n        }\n        if\
    \ (numConsonants === n) {\n            result.push(word);\n        }\n    });\n\
    \    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004039
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let arr =\
    \ s.split(' ');\n  let isVowel = (c: string) => c.toLowerCase() == 'a' || c.toLowerCase()\
    \ == 'e' || c.toLowerCase() == 'i' || c.toLowerCase() == 'o' || c.toLowerCase()\
    \ == 'u';\n  let isConsonant = (c: string) => !isVowel(c);\n  let countConsonants\
    \ = (str: string) => str.split('').filter(isConsonant).length;\n  return arr.filter(str\
    \ => countConsonants(str) == n);\n}\n\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let res:\
    \ string[] = [];\n  if (s === \"\") {\n    return res;\n  }\n  let arr = s.split(\"\
    \ \");\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for\
    \ (let j = 0; j < arr[i].length; j++) {\n      if (\n        arr[i][j] !== \"\
    a\" &&\n        arr[i][j] !== \"e\" &&\n        arr[i][j] !== \"i\" &&\n     \
    \   arr[i][j] !== \"o\" &&\n        arr[i][j] !== \"u\"\n      ) {\n        count++;\n\
    \      }\n    }\n    if (count === n) {\n      res.push(arr[i]);\n    }\n  }\n\
    \  return res;\n}\nconsole.log(select_words(\"Mary had a little lamb\", 4));\n\
    console.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp8ix7w_md.js:52:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp8ix7w_md.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ s.split(' ').filter(v => !v.match(/^[aeiou]*$/i)).filter(v => v.match(/[aeiou]/gi).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3_lmo7d9.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp3_lmo7d9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let ss\
    \ = s.split(\" \");\n    let ret = [];\n    ss.forEach(function (value) {\n  \
    \      let s = value.replace(/[^a-zA-Z]/g, '');\n        let s2 = s.replace(/[a,e,i,o,u]/gi,\
    \ '');\n        if (s2.length == n) {\n            ret.push(value);\n        }\n\
    \    });\n    return ret;\n}\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let arr\
    \ = s.split(' ');\n    let consonants = \"bcdfghjklmnpqrstvwxz\";\n    let result:\
    \ string[] = [];\n    for (let word of arr) {\n        let count = 0;\n      \
    \  for (let letter of word) {\n            if (consonants.includes(letter)) {\n\
    \                count++;\n            }\n        }\n        if (count === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6qp98v51.ts(23,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmp6qp98v51.ts(24,28): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(' ');\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n\
    \    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (!vowels.includes(word[j]))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr9rvasif.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let output:\
    \ string[] = [];\n  let wordList: string[] = s.split(\" \");\n  wordList.forEach(w\
    \ => {\n    if (consonantCount(w) === n) {\n      output.push(w);\n    }\n  });\n\
    \  return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvggecf4g.ts(21,9): error TS2304: Cannot find name
    ''consonantCount''.

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let res:\
    \ string[] = [];\n    let arr: string[] = s.split(\" \");\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (countConsonants(arr[i]) === n) {\n\
    \            res.push(arr[i]);\n        }\n    }\n    return res;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp8trspkb.ts(21,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let vowels\
    \ = \"aeiou\";\n    let consonants = 0;\n    let string = \"\";\n    let words\
    \ = [];\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i])\
    \ < 0) {\n            consonants++;\n        }\n        if (vowels.indexOf(s[i])\
    \ >= 0 || i === s.length - 1) {\n            if (consonants === n) {\n       \
    \         words.push(string);\n            }\n            string = \"\";\n   \
    \         consonants = 0;\n        }\n        string += s[i];\n    }\n    return\
    \ words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ary h'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp0gpp6f2w.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0gpp6f2w.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'ary h'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  if (s === \"\") {\n    return result;\n  }\n  let s_arr =\
    \ s.split(\" \");\n  for (let word of s_arr) {\n    if (countConsonants(word)\
    \ === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpizb202mp.ts(24,9): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let wordArray: string[] = s.split(\" \");\n    wordArray.forEach(word\
    \ => {\n        let wordVowelCount: number = word.split(/[aeiou]/).length - 1;\n\
    \        if (word.length - wordVowelCount === n) {\n            result.push(word);\n\
    \        }\n    });\n    return result;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpq6eryfqy.js:35:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpq6eryfqy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    const result = words.filter(word => {\n        let consonants\
    \ = 0;\n        word.split(\"\").forEach(letter => {\n            if (is_consonant(letter))\
    \ {\n                consonants++;\n            }\n        });\n        return\
    \ consonants === n;\n    });\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwcjyc67l.ts(22,17): error TS2552: Cannot find name
    ''is_consonant''. Did you mean ''consonants''?

    '
  timestamp: 1660004039
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyrso17cd.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpyrso17cd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  // your code\
    \ here\n  let words = s.split(' ');\n  let result = [];\n  for (let word of words)\
    \ {\n    let consonants = 0;\n    let vowels = 'aeiou'.split('');\n    for (let\
    \ letter of word) {\n      if (!vowels.includes(letter)) {\n        consonants++;\n\
    \      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n\
    \  }\n  return result;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0xwy2vh.ts(24,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpv0xwy2vh.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\",\
    \ \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let final = [];\n    let vowels = 0;\n\
    \    let cons = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i]\
    \ != \"\") {\n            for (let j = 0; j < words[i].length; j++) {\n      \
    \          if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] ===\
    \ \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n               \
    \     vowels += 1;\n                }\n                else if (consonants.includes(words[i][j]))\
    \ {\n                    cons += 1;\n                }\n            }\n      \
    \      if (cons === n) {\n                final.push(words[i]);\n            }\n\
    \            vowels = 0;\n            cons = 0;\n        }\n    }\n    return\
    \ final;\n}\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqjugzom7.ts(29,37): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let regex\
    \ = /^[AEIOUaeiou]$/;\n    let words = s.split(' ').filter(word => {\n       \
    \ return countConsonants(word) === n;\n    });\n    return words;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2x84cb5a.ts(20,16): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004043
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(' ');\n  let selectedWords = [];\n  for (let word of words) {\n  \
    \  if (countConsonants(word) === n) {\n      selectedWords.push(word);\n    }\n\
    \  }\n  return selectedWords;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvbi3o2jq.ts(21,9): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const result:\
    \ string[] = [];\n  const words = s.split(\" \");\n  for (let word of words) {\n\
    \    let consCount = 0;\n    for (let i = 0; i < word.length; i++) {\n      const\
    \ char = word[i];\n      if (isVowel(char)) {\n        consCount++;\n      }\n\
    \    }\n    if (consCount === n) {\n      result.push(word);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu2fso_no.ts(24,11): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660004043
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (!s)\
    \ {\n        return [];\n    }\n    let words = s.split(' ');\n    let consonants\
    \ = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z'];\n    let selectedWords = [];\n    for (let word\
    \ of words) {\n        let temp = word.toUpperCase();\n        let count = 0;\n\
    \        for (let consonant of consonants) {\n            if (temp.includes(consonant))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            selectedWords.push(word);\n        }\n    }\n    return selectedWords;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupd0ohki.ts(28,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(' ');\n    let result: string[] = [];\n    words.forEach(element\
    \ => {\n        if (countConst(element) === n) {\n            result.push(element);\n\
    \        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpagmrw9hz.ts(21,13): error TS2304: Cannot find name
    ''countConst''.

    '
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    return words.filter(word\
    \ => {\n        let numConsonants = 0;\n        for (let i = 0; i < word.length;\
    \ i++) {\n            const letter = word[i];\n            if (!vowels.includes(letter))\
    \ {\n                numConsonants++;\n            }\n        }\n        return\
    \ numConsonants === n;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdy25bvl8.ts(24,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let arr: string[] = s.split(\" \");\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (count_consonants(arr[i]) === n) {\n\
    \            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpky12jy1n.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let array_with_words\
    \ = s.split(\" \");\n    let new_array = [];\n    for (let i = 0; i < array_with_words.length;\
    \ i++) {\n        if (array_with_words[i].match(/[^aeiou]/gi).length === n) {\n\
    \            new_array.push(array_with_words[i]);\n        }\n    }\n    return\
    \ new_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfue188ll.js:21\n        if (array_with_words[i].match(/[^aeiou]/gi).length\
    \ === n) {\n                                                   ^\n\nTypeError:\
    \ Cannot read properties of null (reading 'length')\n    at select_words (/tmp/tmpfue188ll.js:21:52)\n\
    \    at test (/tmp/tmpfue188ll.js:30:22)\n    at Object.<anonymous> (/tmp/tmpfue188ll.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(' ');\n  return words.filter(word => count_consonants(word) === n);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjafdoyzf.ts(19,31): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004043
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfx8kgto.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ [];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp3id1v_u4.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp3id1v_u4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let vowels: string[] = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let results: string[] = [];\n    let count: number = 0;\n    for\
    \ (let word of words) {\n        count = 0;\n        for (let character of word)\
    \ {\n            if (!vowels.includes(character.toLowerCase())) {\n          \
    \      count++;\n            }\n        }\n        if (count === n) {\n      \
    \      results.push(word);\n        }\n    }\n    return results;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjn3oc4ny.ts(24,31): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpjn3oc4ny.ts(25,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (!s) return\
    \ [];\n  const words = s.split(' ');\n  const match = words.filter(word => {\n\
    \    const cons = word.split('').filter(char => !isVowel(char)).length;\n    return\
    \ cons === n;\n  });\n  return match;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeoj_fbpx.ts(21,49): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const regex\
    \ = new RegExp(`[b-df-hj-np-tv-z][b-df-hj-np-tv-z]*`, 'gi');\n    const results\
    \ = [];\n    let match = regex.exec(s);\n    while (match) {\n        if (match[0].length\
    \ === n) {\n            results.push(match[0]);\n        }\n        match = regex.exec(s);\n\
    \    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmptqc0_neh.js:32:12)\n  \
    \  at Object.<anonymous> (/tmp/tmptqc0_neh.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = 'aeiou';\n    let res: string[] = [];\n    let i = 0;\n    let j = 0;\n  \
    \  let tmp = '';\n    let cnt = 0;\n    while (i < s.length) {\n        if (s[i]\
    \ !== ' ') {\n            j = i;\n            cnt = 0;\n            while (j <\
    \ s.length && s[j] !== ' ') {\n                if (vowels.indexOf(s[j]) === -1)\
    \ {\n                    cnt++;\n                }\n                j++;\n   \
    \         }\n            if (cnt === n) {\n                tmp = s.substring(i,\
    \ j);\n                res.push(tmp);\n            }\n            i = j;\n   \
    \     }\n        i++;\n    }\n    return res;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp9czut5lc.js:51:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp9czut5lc.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const arr\
    \ = s.split(' ');\n    const newArr = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let numOfConsonants = 0;\n        for (let j = 0; j < arr[i].length;\
    \ j++) {\n            const char = arr[i][j];\n            if (char !== 'a' &&\
    \ char !== 'e' && char !== 'i' && char !== 'o' && char !== 'u') {\n          \
    \      numOfConsonants++;\n            }\n        }\n        if (numOfConsonants\
    \ === n) {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpsuq6nmvo.js:41:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpsuq6nmvo.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let stringArr\
    \ = s.split(\" \");\n    let result = [];\n    let vocales = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    for (let i = 0; i < stringArr.length; i++) {\n      \
    \  let consonants = 0;\n        for (let j = 0; j < stringArr[i].length; j++)\
    \ {\n            if (!vocales.includes(stringArr[i][j])) {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(stringArr[i]);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdinetdg5.ts(24,26): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  //TODO: your\
    \ code here\n  let answer: string[] = [];\n  let str = s.split(\" \");\n  let\
    \ vowels = \"aeiou\";\n  for (let i = 0; i < str.length; i++) {\n    let count\
    \ = 0;\n    for (let j = 0; j < str[i].length; j++) {\n      if (vowels.indexOf(str[i][j])\
    \ === -1) {\n        count++;\n      }\n    }\n    if (count === n) {\n      answer.push(str[i]);\n\
    \    }\n  }\n  return answer;\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpnd0emuiw.js:47:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpnd0emuiw.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004044
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    if (word.length\
    \ >= n) {\n      let nConsonants = countConsonants(word);\n      if (nConsonants\
    \ === n) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7_9z_r1s.ts(22,25): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let vowels\
    \ = {\n        a: true,\n        e: true,\n        i: true,\n        o: true,\n\
    \        u: true,\n        y: true\n    };\n    let words = s.split(\" \");\n\
    \    let answer = [];\n    for (let i = 0; i < words.length; i++) {\n        let\
    \ numOfConsonants = 0;\n        for (let j = 0; j < words[i].length; j++) {\n\
    \            if (!vowels[words[i][j].toLowerCase()]) {\n                numOfConsonants++;\n\
    \            }\n        }\n        if (numOfConsonants === n) {\n            answer.push(words[i]);\n\
    \        }\n    }\n    return answer;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpqio0cwyi.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqio0cwyi.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let sArray\
    \ = s.split(' ');\n    let result: string[] = [];\n    for (let i = 0; i < sArray.length;\
    \ i++) {\n        if (sArray[i].match(/[bcdfghjklmnpqrstvwxyz]/g).length === n)\
    \ {\n            result.push(sArray[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq9haudh6.js:21\n        if (sArray[i].match(/[bcdfghjklmnpqrstvwxyz]/g).length\
    \ === n) {\n                                                       ^\n\nTypeError:\
    \ Cannot read properties of null (reading 'length')\n    at select_words (/tmp/tmpq9haudh6.js:21:56)\n\
    \    at test (/tmp/tmpq9haudh6.js:30:22)\n    at Object.<anonymous> (/tmp/tmpq9haudh6.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  return s.split(\"\
    \ \").filter(w =>\n    // filter out words that do not contain exactly 'n' consonants.\n\
    \    w.split(\"\").filter(letter =>\n      // filter out vowels\n      \"aeiou\"\
    .indexOf(letter) === -1\n    ).length === n\n  );\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpd4aij366.js:33:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpd4aij366.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004044
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let split\
    \ = s.split(' ')\n    let res: string[] = []\n    for (let i = 0; i < split.length;\
    \ i++) {\n        let word = split[i]\n        let count = 0\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j]\n           \
    \ if (char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u')\
    \ {\n                count += 1\n            }\n        }\n        if (count ==\
    \ n) {\n            res.push(word)\n        }\n    }\n    return res\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4))\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3))\nconsole.log(select_words(\"simple white space\", 2))\nconsole.log(select_words(\"\
    Hello world\", 4))\nconsole.log(select_words(\"Uncle sam\", 3))\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzh0618u5.js:43:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpzh0618u5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[]

    []

    [ ''simple'', ''white'', ''space'' ]

    []

    []

    '
  timestamp: 1660004045
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const consonants = \"bcdfghjklmnpqrstvwxyz\".split(\"\"\
    );\n  return words.filter(word => word.split(\"\").filter(letter => consonants.includes(letter)).length\
    \ === n);\n}\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpft945zu4.ts(20,74): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004048
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // let\
    \ res: string[] = [];\n    // s.split(' ').forEach(word => {\n    //     if( word.match(/[b-df-hj-np-tv-z]/g).length\
    \ === n) {\n    //         res.push(word);\n    //     }\n    // });\n    // return\
    \ res;\n    // return s.split(' ').filter( word => word.match(/[b-df-hj-np-tv-z]/g).length\
    \ === n);\n    return s.split(' ').filter( word => word.match(/[b-df-hj-np-tv-z]/g).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp98u7oxo4.js:26\n    return s.split(' ').filter(function (word)\
    \ { return word.match(/[b-df-hj-np-tv-z]/g).length === n; });\n              \
    \                                                                          ^\n\
    \nTypeError: Cannot read properties of null (reading 'length')\n    at /tmp/tmp98u7oxo4.js:26:89\n\
    \    at Array.filter (<anonymous>)\n    at select_words (/tmp/tmp98u7oxo4.js:26:25)\n\
    \    at test (/tmp/tmp98u7oxo4.js:31:22)\n    at Object.<anonymous> (/tmp/tmp98u7oxo4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004048
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const results: string[] = [];\n  const vowel = \"aeiouAEIOU\"\
    ;\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let\
    \ j = 0; j < words[i].length; j++) {\n      if (!vowel.includes(words[i][j]))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      results.push(words[i]);\n\
    \    }\n  }\n  return results;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfjp5b67v.ts(24,18): error TS2339: Property ''includes''
    does not exist on type ''"aeiouAEIOU"''.

    '
  timestamp: 1660004048
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let strArray: string[] = s.split(\" \");\n    for (let i\
    \ = 0; i < strArray.length; i++) {\n        if (strArray[i].match(/[^aeiou]/g))\
    \ {\n            if (strArray[i].match(/[^aeiou]/g).length === n) {\n        \
    \        result.push(strArray[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpm6zbe50n.js:36:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpm6zbe50n.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004048
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const result:\
    \ string[] = [];\n    let count: number = 0;\n    let word: string = \"\";\n \
    \   for (let i = 0; i < s.length; i++) {\n        if (s[i] != \" \") {\n     \
    \       if (consonant.indexOf(s[i]) > -1) {\n                count++;\n      \
    \      }\n            word += s[i];\n        } else {\n            if (count ==\
    \ n) {\n                result.push(word);\n            }\n            count =\
    \ 0;\n            word = \"\";\n        }\n    }\n    if (count == n) {\n    \
    \    result.push(word);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptplo0hv8.ts(23,17): error TS2304: Cannot find name
    ''consonant''.

    '
  timestamp: 1660004048
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const results:\
    \ string[] = [];\n    const sArr = s.split(\" \");\n    const vowels = {\n   \
    \     a: true,\n        e: true,\n        i: true,\n        o: true,\n       \
    \ u: true,\n    };\n    sArr.forEach((word) => {\n        let constCount = 0;\n\
    \        word.split(\"\").forEach((letter) => {\n            if (!vowels[letter])\
    \ {\n                constCount++;\n            }\n        });\n        if (constCount\
    \ === n) {\n            results.push(word);\n        }\n    });\n    return results;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpklca5e4z.js:47:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpklca5e4z.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words:\
    \ string[] = s.split(\" \");\n  let consonants: string[] = [];\n  words.forEach(word\
    \ => {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n    \
    \  if (isConsonant(word[i])) {\n        count++;\n      }\n    }\n    if (count\
    \ === n) {\n      consonants.push(word);\n    }\n  });\n  return consonants;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo7fffznt.ts(23,11): error TS2552: Cannot find name
    ''isConsonant''. Did you mean ''consonants''?

    '
  timestamp: 1660004048
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const result:\
    \ string[] = [];\n    let word = '';\n    let consonants = 0;\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (s[i] !== ' ') {\n            word +=\
    \ s[i];\n            if (!isVowel(s[i])) {\n                consonants++;\n  \
    \          }\n        } else {\n            if (consonants === n) {\n        \
    \        result.push(word);\n            }\n            word = '';\n         \
    \   consonants = 0;\n        }\n    }\n    if (consonants === n) {\n        result.push(word);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphvx89100.ts(24,18): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660004048
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let words: string[] = s.split(' ');\n\
    \    let count: number = 0;\n    let result: string[] = [];\n    for (let i =\
    \ 0; i < words.length; i++) {\n        for (let j = 0; j < words[i].length; j++)\
    \ {\n            if (isConsonant(words[i][j])) {\n                count++;\n \
    \           }\n        }\n        if (count == n) {\n            result.push(words[i]);\n\
    \        }\n        count = 0;\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqecm919m.ts(26,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1660004048
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const res:\
    \ string[] = [];\n    s.split(' ').forEach(word => {\n        const numOfConsonants\
    \ = word.toUpperCase().split('').filter(letter => /[^AEIOU]/.test(letter)).length;\n\
    \        if (numOfConsonants === n) {\n            res.push(word);\n        }\n\
    \    });\n    return res;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004049
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let letter = word[j];\n        \
    \    if (\n                letter.toLowerCase() !== \"a\" &&\n               \
    \ letter.toLowerCase() !== \"e\" &&\n                letter.toLowerCase() !==\
    \ \"i\" &&\n                letter.toLowerCase() !== \"o\" &&\n              \
    \  letter.toLowerCase() !== \"u\"\n            ) {\n                count++;\n\
    \            }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (!s.length)\
    \ return [];\n    const result: string[] = [];\n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    .split(\"\");\n    const words = s.split(\" \");\n    for (let word of words)\
    \ {\n        let count = 0;\n        for (let char of word) {\n            if\
    \ (consonants.includes(char.toLowerCase())) count++;\n        }\n        if (count\
    \ === n) result.push(word);\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphs74fdqk.ts(24,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmphs74fdqk.ts(25,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s ===\
    \ '') {\n    return [];\n  }\n  const result: string[] = [];\n  let vowels: string[]\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  let words: string[] = s.split(' ');\n  words.forEach(word\
    \ => {\n    let consonants: number = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n      if (!vowels.includes(word[i])) {\n        consonants++;\n    \
    \  }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  });\n\
    \  return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_p9dgiac.ts(27,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004049
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s ===\
    \ \"\") {\n        return [];\n    }\n    let words = s.split(\" \");\n    let\
    \ res: string[] = [];\n    words.forEach(function (val) {\n        if (val.match(/[b-df-hj-np-tv-z]/gi)\
    \ !== null) {\n            if (val.match(/[b-df-hj-np-tv-z]/gi).length === n)\
    \ {\n                res.push(val);\n            }\n        }\n    });\n    return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    return s.split(' ').filter(\n        (word)\
    \ => (word.split('').filter(\n            (char) => !vowels.includes(char.toLowerCase())\n\
    \        ).length === n)\n    );\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv7vc5emm.ts(21,31): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let arr:\
    \ string[] = s.split(\" \");\n    let ans: string[] = [];\n    for (let i: number\
    \ = 0; i < arr.length; i++) {\n        if (count_consonants(arr[i]) === n) {\n\
    \            ans.push(arr[i]);\n        }\n    }\n    return ans;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprskuh4rh.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004049
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const arr\
    \ = s.split(' ');\n    const results = arr.filter(e => e.match(/[bcdfghjklmnpqrstvwxz]/g).length\
    \ === n);\n    return results;\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppu8vzmk1.js:19\n    var results = arr.filter(function (e) { return\
    \ e.match(/[bcdfghjklmnpqrstvwxz]/g).length === n; });\n                     \
    \                                                                ^\n\nTypeError:\
    \ Cannot read properties of null (reading 'length')\n    at /tmp/tmppu8vzmk1.js:19:86\n\
    \    at Array.filter (<anonymous>)\n    at select_words (/tmp/tmppu8vzmk1.js:19:23)\n\
    \    at Object.<anonymous> (/tmp/tmppu8vzmk1.js:22:13)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004049
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = 'aeiouAEIOU';\n    const words = s.split(' ');\n    const result = [];\n \
    \   for (let i = 0; i < words.length; i++) {\n        let consonants = 0;\n  \
    \      for (let j = 0; j < words[i].length; j++) {\n            if (vowels.indexOf(words[i][j])\
    \ === -1) {\n                consonants++;\n            }\n        }\n       \
    \ if (consonants === n) {\n            result.push(words[i]);\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  // Write\
    \ your code here\n  const words = s.split(\" \");\n  const filtered_words = words.filter(word\
    \ => {\n    if (vowels(word) == n) {\n      return word;\n    }\n  });\n  return\
    \ filtered_words;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcjznkl3l.ts(21,9): error TS2304: Cannot find name
    ''vowels''.

    '
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \ const result = [];\n  words.forEach(word => {\n    let amount = 0;\n    word.split(\"\
    \").forEach(letter => {\n      vowels.includes(letter) ? 0 : amount++;\n    });\n\
    \    amount === n ? result.push(word) : 0;\n  });\n  return result;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp35k2pa69.ts(24,14): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  //write your\
    \ function here\n  const vowels = \"aeiouy\";\n  let res: string[] = [];\n  let\
    \ words = s.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    let\
    \ cCount = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (!vowels.includes(words[i][j]))\
    \ {\n        cCount++;\n      }\n    }\n    if (cCount === n) {\n      res.push(words[i]);\n\
    \    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxwhtyde6.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''"aeiouy"''.

    '
  timestamp: 1660004049
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = \"aeiouyAEIOUY\";\n    const input = s.split(\" \");\n    const res: string[]\
    \ = [];\n    input.forEach(element => {\n        if (element.length == 0) {\n\
    \            return;\n        }\n        let count = 0;\n        for (let i =\
    \ 0; i < element.length; i++) {\n            if (vowels.indexOf(element[i]) <\
    \ 0) {\n                count++;\n            }\n        }\n        if (count\
    \ == n) {\n            res.push(element);\n        }\n    });\n    return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmptapxgmo5.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmptapxgmo5.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n    let splittedString = s.split(\" \"\
    );\n    let arrayOfConsonants: number[] = [];\n    let arrayOfWords: string[]\
    \ = [];\n    for (let word of splittedString) {\n        let currentWordConsonants:\
    \ number = 0;\n        for (let letter of word) {\n            if (letter.match(/[bcdfghjklmnpqrstvwxyz]/i))\
    \ {\n                currentWordConsonants += 1;\n            }\n        }\n \
    \       arrayOfConsonants.push(currentWordConsonants);\n    }\n    for (let index\
    \ = 0; index < arrayOfConsonants.length; index++) {\n        if (arrayOfConsonants[index]\
    \ === n) {\n            arrayOfWords.push(splittedString[index]);\n        }\n\
    \    }\n    return arrayOfWords;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpruwgg_9d.ts(26,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660004049
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let matches: string[] = [];\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            matches.push(word);\n\
    \        }\n    }\n    return matches;\n}\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpioobqs7u.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004053
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let i:\
    \ number = 0; i < words.length; i++) {\n        let vowels: string[] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n        let count: number = 0;\n        for (let\
    \ j: number = 0; j < words[i].length; j++) {\n            if (vowels.indexOf(words[i][j])\
    \ == -1) {\n                count++;\n            }\n        }\n        if (count\
    \ == n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp3wwxqark.js:46:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3wwxqark.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004053
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // TODO:\
    \ implement me!\n    return [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpz4f2qpzz.js:24:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpz4f2qpzz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004053
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let arr\
    \ = [];\n    let counter = 0;\n    let result = [];\n    for (let index = 0; index\
    \ < s.length; index++) {\n        if (s[index] === \" \") {\n            if (counter\
    \ === n) {\n                result.push(arr.join(\"\"));\n            }\n    \
    \        arr = [];\n            counter = 0;\n        } else {\n            arr.push(s[index]);\n\
    \            if (s[index] !== \"a\" && s[index] !== \"e\" && s[index] !== \"i\"\
    \ && s[index] !== \"o\" && s[index] !== \"u\") {\n                counter++;\n\
    \            }\n        }\n    }\n    if (counter === n) {\n        result.push(arr.join(\"\
    \"));\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmplbi44brh.js:53:12)\n   \
    \ at Object.<anonymous> (/tmp/tmplbi44brh.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004053
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // console.log(s,\
    \ n);\n    if (s === \"\") {\n        return [];\n    }\n    const allWords =\
    \ s.split(\" \");\n    let wordsWithNConsonants = [];\n    for (let word of allWords)\
    \ {\n        let consonants = 0;\n        for (let letter of word) {\n       \
    \     const lowerCaseLetter = letter.toLowerCase();\n            if (lowerCaseLetter\
    \ !== \"a\" && lowerCaseLetter !== \"e\" && lowerCaseLetter !== \"i\" && lowerCaseLetter\
    \ !== \"o\" && lowerCaseLetter !== \"u\") {\n                consonants++;\n \
    \           }\n        }\n        if (consonants === n) {\n            wordsWithNConsonants.push(word);\n\
    \        }\n    }\n    return wordsWithNConsonants;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4), [\"little\"]);\nconsole.log(select_words(\"Mary\
    \ had a little lamb\", 3), [\"Mary\", \"lamb\"]);\nconsole.log(select_words(\"\
    simple white space\", 2), []);\nconsole.log(select_words(\"Hello world\", 4),\
    \ [\"world\"]);\nconsole.log(select_words(\"Uncle sam\", 3), [\"Uncle\"]);\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpll4jnmxr.ts(26,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660004053
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n  const words = s.split(\" \");\n  const result = [];\n  for (let word\
    \ of words) {\n    let consonants = 0;\n    for (let char of word) {\n      if\
    \ (!vowels.includes(char.toLowerCase())) {\n        consonants++;\n      }\n \
    \   }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_8lssijs.ts(26,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmp_8lssijs.ts(27,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004053
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s ===\
    \ '') {\n    return [];\n  }\n  return s.split(' ').filter(word => vowels(word)\
    \ == n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt8gqvxta.ts(21,38): error TS2304: Cannot find name
    ''vowels''.

    '
  timestamp: 1660004053
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s ===\
    \ \"\") {\n    return [];\n  }\n\n  const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  const words = s.split(\" \");\n  const selectedWords = [];\n\n  for (let\
    \ i = 0; i < words.length; i++) {\n    let numberOfConsonants = 0;\n    for (let\
    \ j = 0; j < words[i].length; j++) {\n      if (consonants.includes(words[i][j]))\
    \ {\n        numberOfConsonants++;\n      }\n    }\n    if (numberOfConsonants\
    \ === n) {\n      selectedWords.push(words[i]);\n    }\n  }\n\n  return selectedWords;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo4a3dei2.ts(29,22): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004053
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ [];\n}\ntest(select_words(\"Mary had a little lamb\", 4), [\"little\"]);\ntest(select_words(\"\
    Mary had a little lamb\", 3), [\"Mary\", \"lamb\"]);\ntest(select_words(\"simple\
    \ white space\", 2), []);\ntest(select_words(\"Hello world\", 4), [\"world\"]);\n\
    test(select_words(\"Uncle sam\", 3), [\"Uncle\"]);\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi23cq32b.ts(20,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpi23cq32b.ts(21,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpi23cq32b.ts(22,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpi23cq32b.ts(23,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmpi23cq32b.ts(24,6): error TS2554: Expected 0 arguments, but
    got 2.

    '
  timestamp: 1660004053
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = { a: true, e: true, i: true, o: true, u: true };\n  const words = s.split(\"\
    \ \");\n  return words.filter(word => {\n    let consonants = 0;\n    for (let\
    \ i = 0; i < word.length; i++) {\n      if (!vowels[word[i].toLowerCase()]) {\n\
    \        consonants++;\n      }\n    }\n    return consonants === n;\n  });\n\
    }\nconsole.log(select_words(\"Hello world\", 4));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''world'' ]

    '
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  return s.split('\
    \ ').filter(w => get_consonants(w) === n);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwpl6zmkq.ts(18,35): error TS2304: Cannot find name
    ''get_consonants''.

    '
  timestamp: 1660004053
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let arr:\
    \ string[] = s.split(\" \");\n  let result: string[] = [];\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    let num: number = 0;\n    for (let j = 0; j < arr[i].length;\
    \ j++) {\n      if (arr[i][j] != \"a\" && arr[i][j] != \"e\" && arr[i][j] != \"\
    i\" && arr[i][j] != \"o\" && arr[i][j] != \"u\") {\n        num++;\n      }\n\
    \    }\n    if (num == n) {\n      result.push(arr[i]);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpdg1bfn4k.js:40:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpdg1bfn4k.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ s.split(\" \").filter(w => countConsonants(w) === n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv3ltj3a6.ts(18,37): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \")\n    const result = []\n    for (const word of words) {\n \
    \       if (count_consonants(word) === n) {\n            result.push(word)\n \
    \       }\n    }\n    return result\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_wo0_xhy.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004054
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = 'aeiou';\n  return s.split(/\\s/).filter(s => s.split('').filter(s => vowels.indexOf(s)\
    \ === -1).length === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp7lycwkwo.js:28:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp7lycwkwo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004054
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    words.forEach(w => {\n        let\
    \ count = w.replace(/[^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/g, \"\").length;\n\
    \        if (count === n) {\n            result.push(w);\n        }\n    });\n\
    \    return result;\n}\n\nexport { select_words };\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  // Your code\
    \ here\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split('\
    \ ');\n  const result = [];\n  for (let word of words) {\n    let count = 0;\n\
    \    for (let letter of word) {\n      if (!vowels.includes(letter)) {\n     \
    \   count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\nexport { select_words };\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbow86i0a.ts(24,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpbow86i0a.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004053
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const arr:\
    \ string[] = [];\n    if (s.length === 0) {\n        return arr;\n    }\n    s.split('\
    \ ').forEach(element => {\n        if (getConsonants(element) === n) {\n     \
    \       arr.push(element);\n        }\n    });\n    return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw__xnb6b.ts(23,13): error TS2304: Cannot find name
    ''getConsonants''.

    '
  timestamp: 1660004054
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let str\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < str.length;\
    \ i++) {\n        if (str[i].match(/[^aeiou]/g) && str[i].match(/[^aeiou]/g).length\
    \ === n) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp3_obfxw4.js:34:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3_obfxw4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let array\
    \ = s.split(\" \");\n  let result = [];\n  array.forEach(element => {\n    if\
    \ (count_consonants(element) === n) {\n      result.push(element);\n    }\n  });\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwyv53ua7.ts(21,9): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let x: string[]\
    \ = [];\n  let y: string[] = s.split(\" \");\n  for (let i = 0; i < y.length;\
    \ i++) {\n    if (letter_counter(y[i]) === n) {\n      x.push(y[i]);\n    }\n\
    \  }\n  return x;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\n\
    console.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp23l0ofwo.ts(21,9): error TS2304: Cannot find name
    ''letter_counter''.

    '
  timestamp: 1660004054
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let st\
    \ = s.toLowerCase();\n    let words = st.split(\" \");\n    const result = [];\n\
    \    for (let i = 0; i < words.length; i++) {\n        let chs = words[i].split(\"\
    \");\n        let cons = 0;\n        for (let j = 0; j < chs.length; j++) {\n\
    \            if (chs[j] !== \"a\" && chs[j] !== \"e\" && chs[j] !== \"i\" && chs[j]\
    \ !== \"o\" && chs[j] !== \"u\") {\n                cons += 1;\n            }\n\
    \        }\n        if (cons === n) {\n            result.push(words[i]);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at\
    \ test (/tmp/tmppp_g2p55.js:39:12)\n    at Object.<anonymous> (/tmp/tmppp_g2p55.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'mary',\
    \ 'lamb' ],\n  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ s.split(\" \").filter(w => count_consonants(w) === n);\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzk8d_l5h.ts(18,37): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004054
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(' ')\n  const result = []\n  for (let word of words) {\n    if (n\
    \ === count_consonants(word)) {\n      result.push(word)\n    }\n  }\n  return\
    \ result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpicjuy0bb.ts(21,15): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004057
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\".split(\"\");\n  let words =\
    \ s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n   \
    \   if (consonants.includes(words[i][j])) {\n        count++;\n      }\n    }\n\
    \    if (count === n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu7k7oi0j.ts(24,22): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004057
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \").filter(w => w.length > 0);\n  const consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \  const res: string[] = [];\n  for (const word of words) {\n    let count = 0;\n\
    \    for (const letter of word) {\n      if (consonants.includes(letter.toLowerCase()))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      res.push(word);\n\
    \    }\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqq_f7cwr.ts(23,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpqq_f7cwr.ts(24,22): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004058
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const res:\
    \ string[] = [];\n    const arr = s.split(' ');\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i].length >= n) {\n            let counter = 0;\n  \
    \          for (let j = 0; j < arr[i].length; j++) {\n                if (arr[i][j]\
    \ === 'a' || arr[i][j] === 'e' || arr[i][j] === 'i' || arr[i][j] === 'o' || arr[i][j]\
    \ === 'u') {\n                    counter++;\n                }\n            }\n\
    \            if (counter === n) {\n                res.push(arr[i]);\n       \
    \     }\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpfhcszfqi.js:38:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpfhcszfqi.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004058
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) return [];\n    let result: string[] = [];\n    let str = s.split(' ');\n\
    \    for (let i = 0; i < str.length; i++) {\n        let cons = str[i].match(/[^aeiou]/gi);\n\
    \        if (cons && cons.length === n) {\n            result.push(str[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let words: string[] = s.split(\"\
    \ \");\n    let nConsonants: string[] = [];\n    let nConsonantsWords: string[]\
    \ = [];\n    words.forEach(function (word) {\n        nConsonants = word.split(\"\
    \").filter(function (letter) {\n            return !vowels.includes(letter);\n\
    \        });\n        if (nConsonants.length === n) {\n            nConsonantsWords.push(word);\n\
    \        }\n    });\n    return nConsonantsWords;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzopdatnl.ts(24,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004058
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = [];\n    let consonants: string[] = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let count: number = 0;\n    let word: string = '';\n    for (let i: number\
    \ = 0; i < s.length; i++) {\n        if (s[i] === ' ') {\n            if (count\
    \ === n) {\n                words.push(word);\n            }\n            count\
    \ = 0;\n            word = '';\n        } else {\n            if (consonants.indexOf(s[i])\
    \ > -1) {\n                count++;\n            }\n            word += s[i];\n\
    \        }\n    }\n    if (count === n) {\n        words.push(word);\n    }\n\
    \    return words;\n}\n\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmpe0gihhh8.js:51:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe0gihhh8.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004059
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(' ');\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had\
    \ a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcqv5hz2q.ts(21,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004058
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s ===\
    \ \"\") return [];\n    let consonants: string[] = [];\n    let vowel: string[]\
    \ = [];\n    let words: string[] = s.split(\" \");\n    words.forEach(word =>\
    \ {\n        let numOfConsonants: number = 0;\n        let numOfVowels: number\
    \ = 0;\n        word.split(\"\").forEach(char => {\n            if (char.toLowerCase()\
    \ !== \"a\" && char.toLowerCase() !== \"e\" && char.toLowerCase() !== \"i\" &&\
    \ char.toLowerCase() !== \"o\" && char.toLowerCase() !== \"u\") {\n          \
    \      numOfConsonants += 1;\n            } else {\n                numOfVowels\
    \ += 1;\n            }\n        });\n        if (numOfConsonants === n) {\n  \
    \          consonants.push(word);\n        }\n    });\n    return consonants;\n\
    }\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004058
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpyrso17cd.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpyrso17cd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004039
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words = s.split(\" \");\n  const vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const consonants = words.filter(word\
    \ => {\n    return Array.from(word).filter(letter => !vowels.includes(letter)).length\
    \ === n;\n  });\n  return consonants;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaf28q7dk.ts(24,18): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmpaf28q7dk.ts(24,54): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let words = s.split(\" \");\n  \
    \  let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let\
    \ currentWord = words[i];\n        let consCounter = 0;\n        for (let j =\
    \ 0; j < currentWord.length; j++) {\n            let currentLetter = currentWord[j];\n\
    \            if (!vowels.includes(currentLetter)) {\n                consCounter++;\n\
    \            }\n        }\n        if (consCounter === n) {\n            result.push(currentWord);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp69k89dkq.ts(26,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let arr\
    \ = s.split(\" \");\n    let res = [];\n    for (let item of arr) {\n        let\
    \ count = 0;\n        for (let c of item) {\n            if (is_consonant(c))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            res.push(item);\n        }\n    }\n    return res;\n}\nexport\
    \ function select_words_test() {\n    console.log(select_words(\"Mary had a little\
    \ lamb\", 4));\n    console.log(select_words(\"Mary had a little lamb\", 3));\n\
    \    console.log(select_words(\"simple white space\", 2));\n    console.log(select_words(\"\
    Hello world\", 4));\n    console.log(select_words(\"Uncle sam\", 3));\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb70tl0l5.ts(22,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpb70tl0l5.ts(23,17): error TS2304: Cannot find name ''is_consonant''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const res:\
    \ string[] = [];\n    if (s.length === 0) {\n        return res;\n    }\n    let\
    \ vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let words: string[] = s.split('\
    \ ');\n    for (let i = 0; i < words.length; i++) {\n        let numOfConsonants:\
    \ number = 0;\n        for (let j = 0; j < words[i].length; j++) {\n         \
    \   if (!vowels.includes(words[i][j])) {\n                numOfConsonants++;\n\
    \            }\n        }\n        if (numOfConsonants === n) {\n            res.push(words[i]);\n\
    \        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj2619_uz.ts(27,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  let result: string[] = [];\n  let words = s.split(\"\
    \ \");\n  for (let word of words) {\n    if (count_consonants(word) === n) {\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm0exbq_d.ts(24,9): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ == 0) return [];\n  let strArr = s.split(\" \");\n  let res = [];\n  for (let\
    \ i = 0; i < strArr.length; i++) {\n    if (countConsonants(strArr[i]) == n) {\n\
    \      res.push(strArr[i]);\n    }\n  }\n  return res;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps103l181.ts(22,9): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const matches\
    \ = s.match(/[a-z]+/g)\n    if (matches === null) {\n        return []\n    }\n\
    \    const words = matches.filter(w => count_consonants(w) === n)\n    return\
    \ words\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ujh4kup.ts(22,39): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const result:\
    \ string[] = [];\n    const words = s.split(\" \");\n    const consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    for (const word of words) {\n        let consonantCount\
    \ = 0;\n        for (const letter of word) {\n            if (consonants.includes(letter))\
    \ {\n                consonantCount++;\n            }\n        }\n        if (consonantCount\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpze4l1a01.ts(23,30): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpze4l1a01.ts(24,28): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    const list = s.split('\
    \ ')\n    const result = []\n    for (let word of list) {\n        let count =\
    \ 0\n        for (let ch of word) {\n            if (!vowels.includes(ch)) {\n\
    \                count++\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word)\n        }\n    }\n    return result\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjhule6_4.ts(23,24): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpjhule6_4.ts(24,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004058
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let arr:\
    \ string[] = s.split(\" \");\n  let tempArray: string[] = [];\n  let finalArray:\
    \ string[] = [];\n  let vowels: string[] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n  let nVowels: number = 0;\n  let nConsonants: number = 0;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    tempArray = arr[i].split(\"\");\n    for (let\
    \ j = 0; j < tempArray.length; j++) {\n      if (vowels.includes(tempArray[j]))\
    \ {\n        nVowels++;\n      } else {\n        nConsonants++;\n      }\n   \
    \ }\n    if (nConsonants === n) {\n      finalArray.push(arr[i]);\n    }\n   \
    \ nVowels = 0;\n    nConsonants = 0;\n  }\n  return finalArray;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt1r4tbvy.ts(27,18): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004058
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  //the vowels\
    \ array contains the number of the vowels in the string \n  let vowels: string[]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  //this array contains the words that\
    \ match the requirements\n  let result: string[] = [];\n  let stringArray: string[]\
    \ = s.split(\" \");\n  let count: number = 0;\n  let flag: boolean = false;\n\
    \  for (let i = 0; i < stringArray.length; i++) {\n    for (let j = 0; j < stringArray[i].length;\
    \ j++) {\n      for (let k = 0; k < vowels.length; k++) {\n        if (stringArray[i][j]\
    \ === vowels[k]) {\n          flag = true;\n        }\n      }\n      if (flag\
    \ === false) {\n        count++;\n      }\n      if (flag === true) {\n      \
    \  flag = false;\n      }\n    }\n    if (count === n) {\n      result.push(stringArray[i]);\n\
    \    }\n    count = 0;\n  }\n  return result;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpztkbu0ir.js:58:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpztkbu0ir.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004059
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let selectedWords = [];\n    words.forEach(word => {\n\
    \        if (countConsonants(word) === n) {\n            selectedWords.push(word);\n\
    \        }\n    });\n    return selectedWords;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpef1t9zg6.ts(21,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004059
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let stringArr\
    \ = s.split(\" \");\n    let wordArray = [];\n    for (let i = 0; i < stringArr.length;\
    \ i++) {\n        let consonantCount = 0;\n        for (let j = 0; j < stringArr[i].length;\
    \ j++) {\n            if (stringArr[i][j] != \"a\" && stringArr[i][j] != \"e\"\
    \ && stringArr[i][j] != \"i\" && stringArr[i][j] != \"o\" && stringArr[i][j] !=\
    \ \"u\") {\n                consonantCount++;\n            }\n        }\n    \
    \    if (consonantCount == n) {\n            wordArray.push(stringArr[i]);\n \
    \       }\n    }\n    return wordArray;\n}\n\nconsole.log(select_words(\"Mary\
    \ had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpqdl3ein1.js:45:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpqdl3ein1.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004059
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let split = s.split(\" \");\n    let\
    \ result = [];\n    for (let i = 0; i < split.length; i++) {\n        if (countConsonants(split[i])\
    \ == n) {\n            result.push(split[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp987r7mx0.ts(24,13): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004059
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let foundWords:\
    \ string[] = [];\n    const words = s.split(\" \");\n    for (let w of words)\
    \ {\n        let cCount = 0;\n        for (let c of w) {\n            if (c !==\
    \ \"a\" && c !== \"e\" && c !== \"i\" && c !== \"o\" && c !== \"u\") {\n     \
    \           cCount++;\n            }\n        }\n        if (cCount === n) {\n\
    \            foundWords.push(w);\n        }\n    }\n    return foundWords;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk8nnjkcw.ts(22,23): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660004061
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let splitS\
    \ = s.split(\" \");\n  let consonants = [];\n  let result = [];\n  for (let i\
    \ = 0; i < splitS.length; i++) {\n    consonants.push(splitS[i].match(/[^aeiou]/gi));\n\
    \  }\n  for (let i = 0; i < consonants.length; i++) {\n    if (consonants[i] &&\
    \ consonants[i].length === n) {\n      result.push(splitS[i]);\n    }\n  }\n \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004062
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let word: string = \"\";\n    let consonants: number = 0;\n\
    \    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] !== \" \"\
    ) {\n            word += s[i];\n            if (consonants === n) {\n        \
    \        result.push(word);\n                word = \"\";\n                consonants\
    \ = 0;\n            }\n        } else {\n            if (consonants === n) {\n\
    \                result.push(word);\n                word = \"\";\n          \
    \      consonants = 0;\n            } else {\n                word = \"\";\n \
    \               consonants = 0;\n            }\n        }\n        if (\"aeiou\"\
    .indexOf(s[i]) === -1) {\n            consonants++;\n        }\n    }\n    if\
    \ (consonants === n) {\n        result.push(word);\n    }\n    return result;\n\
    }\n\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\nconsole.log(select_words(\"\", 3));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'littl',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp4be_eb8a.js:59:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4be_eb8a.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'littl',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '[ ''littl'', ''lamb'' ]

    [ ''Mary'', ''had'', ''litt'', ''lamb'' ]

    [ ''simp'', ''le'', ''wh'', ''ite'', ''sp'', ''ace'' ]

    [ ''world'' ]

    [ ''Uncl'', ''sam'' ]

    []

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s ===\
    \ \"\") {\n        return [];\n    }\n    const words = s.split(\" \");\n    const\
    \ consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"];\n    const result = [];\n    for (let i = 0; i < words.length; i++)\
    \ {\n        const word = words[i];\n        let consCounter = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (consonants.includes(word[j].toLowerCase()))\
    \ {\n                consCounter++;\n            }\n        }\n        if (consCounter\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpihddt7z_.ts(28,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    return words.filter(w => consonants(w) === n);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppq_erxg4.ts(19,30): error TS2304: Cannot find name
    ''consonants''.

    '
  timestamp: 1660004063
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  return s.split(\"\
    \ \").filter(v => v.match(/[^aeiou]/g).length === n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpturawc_9.js:18\n    return s.split(\" \").filter(function (v) {\
    \ return v.match(/[^aeiou]/g).length === n; });\n                            \
    \                                             ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at /tmp/tmpturawc_9.js:18:74\n    at Array.filter\
    \ (<anonymous>)\n    at select_words (/tmp/tmpturawc_9.js:18:25)\n    at test\
    \ (/tmp/tmpturawc_9.js:23:22)\n    at Object.<anonymous> (/tmp/tmpturawc_9.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = words.filter(word => count_consonants(word)\
    \ === n);\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn96nn45g.ts(19,39): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let l = new\
    \ Letter(s);\n  return l.getWordsWithNConsonants(n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9fgf07xr.ts(18,15): error TS2304: Cannot find name
    ''Letter''.

    '
  timestamp: 1660004063
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  words.forEach(word => {\n    let consonants\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (\n        word[i]\
    \ != \"a\" &&\n        word[i] != \"e\" &&\n        word[i] != \"i\" &&\n    \
    \    word[i] != \"o\" &&\n        word[i] != \"u\"\n      ) {\n        consonants++;\n\
    \      }\n    }\n    if (consonants == n) {\n      result.push(word);\n    }\n\
    \  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp59ziryqu.js:44:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp59ziryqu.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const matchedWords = [];\n    words.forEach(word => {\n\
    \        if (getConsonantCount(word) === n) {\n            matchedWords.push(word);\n\
    \        }\n    });\n    return matchedWords;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoaqrbupy.ts(21,13): error TS2304: Cannot find name
    ''getConsonantCount''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s ===\
    \ \"\") return [];\n    const words = s.split(\" \");\n    const result = [];\n\
    \    words.forEach(w => {\n        const count = w.toLowerCase().split(\"\").filter(l\
    \ => !'aeiou'.includes(l)).length;\n        if (count === n) result.push(w);\n\
    \    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmsbf5dda.ts(22,70): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (!s)\
    \ return [];\n    const arr = s.split(\" \");\n    const vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    const result = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let count = 0;\n        for (let j = 0; j < arr[i].length; j++) {\n\
    \            if (!vowels.includes(arr[i][j].toLowerCase())) {\n              \
    \  count++;\n            }\n        }\n        if (count === n) {\n          \
    \  result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkq5y15su.ts(25,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004063
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let vowels\
    \ = 'aeiouyAEIOUY'\n    let result: string[] = []\n    let words = s.split(' ')\n\
    \    for (let word of words) {\n        let wordResult = 0\n        for (let j\
    \ = 0; j < word.length; j++) {\n            if (vowels.indexOf(word[j]) == -1)\
    \ {\n                wordResult++\n            }\n        }\n        if (wordResult\
    \ == n) {\n            result.push(word)\n        }\n    }\n    return result\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmp4wk6obmx.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4wk6obmx.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (s.length\
    \ === 0) {\n        return [];\n    }\n\n    const words = s.split(\" \");\n \
    \   const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const ret: string[] = [];\n\
    \n    for (const word of words) {\n        let count = 0;\n        for (const\
    \ letter of word) {\n            if (consonants.includes(letter)) {\n        \
    \        count++;\n            }\n        }\n\n        if (count === n) {\n  \
    \          ret.push(word);\n        }\n    }\n\n    return ret;\n}\n\nlet s =\
    \ \"Mary had a little lamb\";\nconsole.log(select_words(s, 4));\nconsole.log(select_words(s,\
    \ 3));\ns = \"simple white space\";\nconsole.log(select_words(s, 2));\ns = \"\
    Hello world\";\nconsole.log(select_words(s, 4));\ns = \"Uncle sam\";\nconsole.log(select_words(s,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxvqlf5i0.ts(28,30): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpxvqlf5i0.ts(29,28): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004063
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let arr =\
    \ [];\n  let arr2 = [];\n  let arr3 = [];\n  let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  let count = 0;\n  arr = s.split(' ');\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    arr2 = arr[i].split('');\n    for (let j = 0; j < arr2.length; j++)\
    \ {\n      if (vowels.indexOf(arr2[j]) == -1) {\n        count++;\n      }\n \
    \   }\n    if (count == n) {\n      arr3.push(arr[i]);\n    }\n    count = 0;\n\
    \  }\n  return arr3;\n}\nconsole.log(select_words(\"Mary had a little lamb\",\
    \ 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpj2qwy2yy.js:50:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpj2qwy2yy.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpovvuh_t3.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const result:\
    \ string[] = [];\n  const stringArray = s.split(\" \");\n  const consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\";\n  stringArray.forEach((word) => {\n    let wordConsonants\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (consonants.includes(word[i]))\
    \ {\n        wordConsonants++;\n      }\n    }\n    if (wordConsonants === n)\
    \ {\n      result.push(word);\n    }\n  });\n  return result;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfp8w0geq.ts(24,22): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004063
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    words.forEach(w => {\n        if\
    \ (w.match(/[^aeiou]/gi).length === n) {\n            result.push(w);\n      \
    \  }\n    });\n    return result;\n}\n\nconsole.log(select_words(\"Mary had a\
    \ little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\n\
    console.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6sh67_sy.js:21\n        if (w.match(/[^aeiou]/gi).length === n)\
    \ {\n                                 ^\n\nTypeError: Cannot read properties of\
    \ null (reading 'length')\n    at /tmp/tmp6sh67_sy.js:21:34\n    at Array.forEach\
    \ (<anonymous>)\n    at select_words (/tmp/tmp6sh67_sy.js:20:11)\n    at Object.<anonymous>\
    \ (/tmp/tmp6sh67_sy.js:27:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004063
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // Your\
    \ code here!\n    return [];\n}\n\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpsvunrbgl.js:24:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpsvunrbgl.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004064
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    words.forEach(word => {\n       \
    \ if (nConsonants(word) === n) {\n            result.push(word);\n        }\n\
    \    });\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptge3m9gq.ts(21,13): error TS2304: Cannot find name
    ''nConsonants''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const\
    \ result: string[] = [];\n    for (let word of words) {\n        let count = 0;\n\
    \        for (let char of word) {\n            if (consonants.includes(char))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp51ghozu1.ts(23,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmp51ghozu1.ts(24,28): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004063
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbrn23aa6.ts(21,13): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004064
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let result:\
    \ string[] = [];\n  if (!s) {\n    return result;\n  }\n  let words = s.split(\"\
    \ \");\n  for (let word of words) {\n    let consonants = 0;\n    for (let i =\
    \ 0; i < word.length; i++) {\n      if (!isVowel(word[i])) {\n        consonants++;\n\
    \      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdv1_6u3j.ts(26,12): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660004064
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = { a: 1, e: 1, i: 1, o: 1, u: 1, y: 1 };\n  const words = s.split(\" \");\n\
    \  const result = [];\n  for (let word of words) {\n    let count = 0;\n    for\
    \ (let char of word) {\n      if (!vowels[char.toLowerCase()]) {\n        count++;\n\
    \      }\n    }\n    if (count === n) {\n      result.push(word);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp259j2qnb.ts(23,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1660004066
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    if (!s.length)\
    \ return [];\n    if (isNaN(n)) return [];\n    let string = s.toLowerCase();\n\
    \    let words = string.split(\" \");\n    return words.filter(word => countConsonants(word)\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsvlbrb5h.ts(22,33): error TS2304: Cannot find name
    ''countConsonants''.

    '
  timestamp: 1660004067
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result\
    \ = [];\n    let allWords = s.split(\" \");\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for (let word\
    \ of allWords) {\n        let count = 0;\n        for (let char of word) {\n \
    \           if (consonants.includes(char)) {\n                count++;\n     \
    \       }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgvw78ad.ts(24,26): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmppgvw78ad.ts(25,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004067
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const res: string[] = [];\n  words.forEach(word => {\n\
    \    if (count_consonants(word) === n) {\n      res.push(word);\n    }\n  });\n\
    \  return res;\n}\n\nconst word = \"World\";\nconst num = 4;\nconsole.log(select_words(word,\
    \ num));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2b426eyn.ts(21,9): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004067
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const allWords\
    \ = s.split(' ');\n  const selectedWords = allWords.filter(word => {\n    let\
    \ counter = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word[i]\
    \ !== 'a' && word[i] !== 'e' && word[i] !== 'i' && word[i] !== 'o' && word[i]\
    \ !== 'u') {\n        counter++;\n      }\n    }\n    return counter === n;\n\
    \  });\n  return selectedWords;\n}\n\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpzribcear.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpzribcear.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660004068
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let filteredWords = words.filter(word => (word.match(/[bcdfghjklmnpqrstvwxz]/g)\
    \ || []).length === n);\n    return filteredWords;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmp2lukd4pp.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2lukd4pp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const result:\
    \ string[] = [];\n  if (s.length) {\n    const words = s.split(' ');\n    words.forEach(w\
    \ => {\n      if (count_consonants(w) === n) {\n        result.push(w);\n    \
    \  }\n    });\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0w6sa5wm.ts(22,11): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004067
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // count\
    \ the number of consonants in a word\n    function count_consonants(w: string):\
    \ number {\n        let count = 0;\n        const vowels = \"aeiou\";\n      \
    \  for (let i = 0; i < w.length; i++) {\n            if (vowels.indexOf(w[i])\
    \ < 0) count++;\n        }\n        return count;\n    }\n    // start with the\
    \ first word\n    let words = s.split(\" \");\n    let matches = [];\n    for\
    \ (let i = 0; i < words.length; i++) {\n        if (count_consonants(words[i])\
    \ === n) matches.push(words[i]);\n    }\n    return matches;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpktt_27u9.js:44:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpktt_27u9.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    const words = s.split(\" \");\n    const result\
    \ = words.filter(word => {\n        const cons = word.split(\"\").filter(char\
    \ => !vowels.includes(char.toLowerCase()));\n        return cons.length === n;\n\
    \    });\n    return result;\n}\n\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt5ro6wec.ts(21,60): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let arr:\
    \ string[] = s.split(\" \");\n  let res: string[] = [];\n  let con: string = \"\
    bcdfghjklmnpqrstvwxz\";\n  let cons: string[] = con.split(\"\");\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    let temp: string = arr[i];\n    let count:\
    \ number = 0;\n    for (let j = 0; j < temp.length; j++) {\n      if (cons.includes(temp[j]))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      res.push(temp);\n\
    \    }\n  }\n  return res;\n}\nconsole.log(select_words(\"\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp625le2t3.ts(26,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let numOfConsonants = 0;\n    let consonants = [\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let result\
    \ = [];\n    for (let word of words) {\n        numOfConsonants = 0;\n       \
    \ for (let letter of word) {\n            if (consonants.includes(letter.toLowerCase()))\
    \ {\n                numOfConsonants++;\n            }\n        }\n        if\
    \ (numOfConsonants === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq7b5k9mh.ts(24,28): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpq7b5k9mh.ts(25,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const results:\
    \ string[] = [];\n    const words = s.split(' ');\n    for (const word of words)\
    \ {\n        if (consonants(word) === n) {\n            results.push(word);\n\
    \        }\n    }\n    return results;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkp2mcdpm.ts(21,13): error TS2304: Cannot find name
    ''consonants''.

    '
  timestamp: 1660004068
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let consonants\
    \ = 'bcdfghjklmnpqrstvwxyz'.split('');\n    let result = [];\n    let words =\
    \ s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < words[i].length; j++) {\n            if (consonants.indexOf(words[i][j].toLowerCase())\
    \ > -1) {\n                count++;\n            }\n        }\n        if (count\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\nlet s = \"Mary had a little lamb\";\nlet n = 4;\nlet res = select_words(s,\
    \ n);\nconsole.log(res);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    '
  timestamp: 1660004068
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let arr:\
    \ string[] = [];\n    s.split(\" \").forEach(element => {\n        if (element.length\
    \ == n) {\n            arr.push(element);\n        }\n    });\n    return arr;\n\
    }\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp7ism06fb.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7ism06fb.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: '[ ''Mary'', ''lamb'' ]

    [ ''had'' ]

    []

    []

    [ ''sam'' ]

    '
  timestamp: 1660004068
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(' ');\n  const consonants: string[] = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n\
    \      const regex = /[^aeiouy]/i;\n      if (regex.test(words[i][j])) {\n   \
    \     count++;\n      }\n    }\n    if (count === n) {\n      consonants.push(words[i]);\n\
    \    }\n  }\n  return consonants;\n}\n\nconsole.log(select_words(\"Mary had a\
    \ little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\n\
    console.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'Mary',\n  'lamb'\n]\n    at test (/tmp/tmp_xdsakt1.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_xdsakt1.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''little'' ]

    [ ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  const words: string[] = s.split(\" \");\n \
    \ const consonants = words.filter(word => getConsonantsCount(word) === n);\n \
    \ return consonants;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0eki0q2p.ts(22,43): error TS2304: Cannot find name
    ''getConsonantsCount''.

    '
  timestamp: 1660004068
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  return s.split(\"\
    \ \").filter(w => w.match(/[^aeiou]/gi).length === n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyzpxrqix.js:18\n    return s.split(\" \").filter(function (w) {\
    \ return w.match(/[^aeiou]/gi).length === n; });\n                           \
    \                                               ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at /tmp/tmpyzpxrqix.js:18:75\n    at Array.filter\
    \ (<anonymous>)\n    at select_words (/tmp/tmpyzpxrqix.js:18:25)\n    at test\
    \ (/tmp/tmpyzpxrqix.js:23:22)\n    at Object.<anonymous> (/tmp/tmpyzpxrqix.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result\
    \ = [];\n  words.forEach(word => {\n    const count = word.split('').reduce((acc,\
    \ curr) => {\n      if (!vowels.includes(curr.toLowerCase())) {\n        acc++;\n\
    \      }\n      return acc;\n    }, 0);\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  });\n  return result;\n}\n\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5l94ckp0.ts(23,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004068
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(' ');\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let countConsonants = 0;\n    for (let j =\
    \ 0; j < word.length; j++) {\n      let currentChar = word[j];\n      if (currentChar\
    \ !== 'a' && currentChar !== 'e' && currentChar !== 'i' && currentChar !== 'o'\
    \ && currentChar !== 'u') {\n        countConsonants++;\n      }\n    }\n    if\
    \ (countConsonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmp2bshp1_1.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp2bshp1_1.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \  let words = s.split(\" \");\n  let foundWords = [];\n  for (let i = 0; i <\
    \ words.length; i++) {\n    let word = words[i];\n    let numberOfConsonants =\
    \ 0;\n    for (let j = 0; j < word.length; j++) {\n      if (consonants.includes(word[j].toLowerCase()))\
    \ {\n        numberOfConsonants++;\n      }\n    }\n    if (numberOfConsonants\
    \ === n) {\n      foundWords.push(word);\n    }\n  }\n  return foundWords;\n}\n\
    \nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjz4_qhp8.ts(25,22): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004068
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (s.length\
    \ === 0) {\n    return [];\n  }\n  let words = s.split(\" \");\n  let result =\
    \ [];\n  words.forEach(word => {\n    let counter = 0;\n    for (let i = 0; i\
    \ < word.length; i++) {\n      if (!isVowel(word[i])) {\n        counter++;\n\
    \      }\n    }\n    if (counter === n) {\n      result.push(word);\n    }\n \
    \ });\n  return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4b6yqri5.ts(26,12): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660004068
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // your\
    \ code goes here\n    return s.split(' ').filter(x => (x.match(/[bcdfghjklmnpqrstvwxyz]/gi)\
    \ || []).length === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004069
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"];\n    const newWords = [];\n    for (let\
    \ i = 0; i < words.length; i++) {\n        let amount = 0;\n        const word\
    \ = words[i].toLowerCase();\n        for (let j = 0; j < word.length; j++) {\n\
    \            if (consonants.includes(word[j])) {\n                amount++;\n\
    \            }\n        }\n        if (amount === n) {\n            newWords.push(words[i]);\n\
    \        }\n    }\n    return newWords;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_yapvb98.ts(25,28): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004068
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let count: number = 0;\n    let re: RegExp = /[b-df-hj-np-tv-z]/g;\n\
    \    let words: string[] = s.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        count = 0;\n        for (let j = 0; j < words[i].length; j++)\
    \ {\n            if (re.test(words[i][j])) {\n                count++;\n     \
    \       }\n        }\n        if (count === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp9qeed4mj.js:38:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp9qeed4mj.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004071
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let str:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let i:\
    \ number = 0; i < str.length; i++) {\n        if (str[i].match(/[^aeiou]/g).length\
    \ === n) {\n            result.push(str[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9vojsw2_.js:21\n        if (str[i].match(/[^aeiou]/g).length ===\
    \ n) {\n                                     ^\n\nTypeError: Cannot read properties\
    \ of null (reading 'length')\n    at select_words (/tmp/tmp9vojsw2_.js:21:38)\n\
    \    at test (/tmp/tmp9vojsw2_.js:30:22)\n    at Object.<anonymous> (/tmp/tmp9vojsw2_.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004071
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const results:\
    \ string[] = [];\n  let wordCount = 0;\n  let word = \"\";\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (s[i] !== \" \") {\n      word += s[i];\n     \
    \ if (s[i].match(/[^aeiou]/i)) {\n        wordCount++;\n      }\n    } else {\n\
    \      if (wordCount === n) {\n        results.push(word);\n      }\n      word\
    \ = \"\";\n      wordCount = 0;\n    }\n  }\n  if (wordCount === n) {\n    results.push(word);\n\
    \  }\n  return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004071
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let array\
    \ = s.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < array.length;\
    \ i++) {\n        if (findVowels(array[i]) === n) {\n            result.push(array[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa9lj74io.ts(21,13): error TS2304: Cannot find name
    ''findVowels''.

    '
  timestamp: 1660004071
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    const consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    ;\n    return words.filter(word => word.split(\"\").filter(l => consonants.includes(l)).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzsfrhava.ts(20,71): error TS2339: Property ''includes''
    does not exist on type ''"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004071
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    const vowels = \"aeiou\";\n    const words\
    \ = s.split(\" \");\n    const result = [];\n    words.forEach(word => {\n   \
    \     let consonantCount = 0;\n        word.split(\"\").forEach(letter => {\n\
    \            if (consonants.includes(letter)) {\n                consonantCount++;\n\
    \            }\n        });\n        if (consonantCount === n) {\n           \
    \ result.push(word);\n        }\n    });\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyp0uc5qu.ts(25,28): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1660004071
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const result:\
    \ string[] = [];\n  if (s === \"\") {\n    return result;\n  }\n  const words\
    \ = s.split(\" \");\n  for (const word of words) {\n    if (count_consonants(word)\
    \ === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgaydl1yt.ts(24,9): error TS2304: Cannot find name
    ''count_consonants''.

    '
  timestamp: 1660004071
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    return\
    \ s.split(' ').filter(w => w.match(/[^aeiou]/g) !== null && w.match(/[^aeiou]/g).length\
    \ === n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmpbli2zs9m.js:27:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpbli2zs9m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004072
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let consonants\
    \ = /[^aeiou ]/gi;\n    let words: string[] = s.split(\" \");\n    let matches:\
    \ string[] = [];\n    words.forEach(word => {\n        let wordConsonants = word.match(consonants);\n\
    \        if (wordConsonants) {\n            if (wordConsonants.length === n) {\n\
    \                matches.push(word);\n            }\n        }\n    });\n    return\
    \ matches;\n}\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    [ ''Uncle'' ]

    '
  timestamp: 1660004072
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const strArr\
    \ = s.split(\" \");\n  const cons = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"z\"];\n  const output: string[] = [];\n  for (let i = 0; i <\
    \ strArr.length; i++) {\n    const word = strArr[i];\n    let consCount = 0;\n\
    \    for (let j = 0; j < word.length; j++) {\n      if (cons.includes(word[j].toLowerCase()))\
    \ {\n        consCount++;\n      }\n    }\n    if (consCount === n) {\n      output.push(word);\n\
    \    }\n  }\n  return output;\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplf71ol_m.ts(25,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004072
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  return s.split('\
    \ ').filter(w => w.match(/[bcdfghjklmnpqrstvwxyz]+/gi).length === n);\n}\nconsole.log(select_words(\"\
    simple white space\", 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplf8lzepg.js:18\n    return s.split(' ').filter(function (w) { return\
    \ w.match(/[bcdfghjklmnpqrstvwxyz]+/gi).length === n; });\n                  \
    \                                                                        ^\n\n\
    TypeError: Cannot read properties of null (reading 'length')\n    at /tmp/tmplf8lzepg.js:18:91\n\
    \    at Array.filter (<anonymous>)\n    at select_words (/tmp/tmplf8lzepg.js:18:25)\n\
    \    at test (/tmp/tmplf8lzepg.js:24:22)\n    at Object.<anonymous> (/tmp/tmplf8lzepg.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: '[ ''simple'', ''white'', ''space'' ]

    '
  timestamp: 1660004072
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    // Write\
    \ your implementation here\n    return [];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8s9ih4c0.js:24:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp8s9ih4c0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004072
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  if (!s) return\
    \ [];\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const words =\
    \ s.split(\" \");\n  const result = [];\n  for (let word of words) {\n    let\
    \ count = 0;\n    for (let char of word) {\n      if (!vowels.includes(char.toLowerCase()))\
    \ count++;\n    }\n    if (count === n) result.push(word);\n  }\n  return result;\n\
    }\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppecjsxbp.ts(24,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmppecjsxbp.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004072
- exit_code: 0
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const sArray = s.split(\" \");\n \
    \ const nArray = [];\n  const filteredArray = sArray.filter(\n    (word: string)\
    \ =>\n      (word.match(/[^aeiou]/gi) || []).length === n && word.length > 0\n\
    \  );\n  return filteredArray;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004072
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = []\n    let sArray: string[] = s.split(\" \")\n    let filtered:\
    \ string[] = []\n    let letters: string[] = []\n    let vowels: string[] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let consonants: string[] = []\n    for (let\
    \ i = 0; i < sArray.length; i++) {\n        if (sArray[i].length === n) {\n  \
    \          filtered.push(sArray[i])\n        }\n    }\n    for (let i = 0; i <\
    \ filtered.length; i++) {\n        letters = filtered[i].split(\"\")\n       \
    \ for (let j = 0; j < letters.length; j++) {\n            if (!vowels.includes(letters[j]))\
    \ {\n                consonants.push(letters[j])\n            }\n        }\n \
    \       if (consonants.length === n) {\n            result.push(filtered[i])\n\
    \        }\n        consonants = []\n    }\n    return result\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwn3g8rf4.ts(32,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1660004072
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let consonantsCount:\
    \ number = 0;\n  let word: string = \"\";\n  let words: string[] = [];\n  for\
    \ (let i: number = 0; i < s.length; i++) {\n    if (s[i] !== \" \") {\n      if\
    \ (!isVowel(s[i])) {\n        consonantsCount++;\n      }\n      word += s[i];\n\
    \    } else {\n      if (consonantsCount === n) {\n        words.push(word);\n\
    \      }\n      consonantsCount = 0;\n      word = \"\";\n    }\n  }\n  if (consonantsCount\
    \ === n) {\n    words.push(word);\n  }\n  return words;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf7uw1qv5.ts(23,12): error TS2304: Cannot find name
    ''isVowel''.

    '
  timestamp: 1660004072
- exit_code: 1
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let arr: string[] = s.split(\" \");\n    let vowels: string[]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        let currWord: string = arr[i];\n        let counter: number\
    \ = 0;\n        for (let j: number = 0; j < currWord.length; j++) {\n        \
    \    if (vowels.indexOf(currWord[j]) === -1) {\n                counter++;\n \
    \           }\n        }\n        if (counter === n) {\n            result.push(currWord);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Uncle'\n]\n    at test (/tmp/tmps92sz6hj.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmps92sz6hj.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Uncle' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004072
- exit_code: 2
  program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const strArr\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < strArr.length;\
    \ i++) {\n        const word = strArr[i];\n        if (is_consonant(word, n))\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9wxn80a4.ts(22,13): error TS2304: Cannot find name
    ''is_consonant''.

    '
  timestamp: 1660004072
