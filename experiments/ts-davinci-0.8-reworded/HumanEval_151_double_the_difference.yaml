name: HumanEval_151_double_the_difference
language: ts
prompt: "//Given an array of numbers, return the sum of squares of the numbers\n//\
  \ in the array that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1,\
  \ -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n\
  // 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
  \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
  \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
completions: ["  // YOUR CODE HERE\n  throw new Error(\"Not implemented yet.\");\n\
    }\n\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > 0 && lst[i] % 2 != 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n \
    \ return sum;\n}\n", "    return 0;\n}\n", "    return lst.reduce((acc, val) =>\
    \ {\n        return (val % 2 === 1 && val >= 0) ? acc + Math.pow(val, 2) : acc;\n\
    \    }, 0);\n}\n", "    if (lst.length == 0) {\n        return 0;\n    }\n   \
    \ let result = 0;\n    for (let num of lst) {\n        if (num % 2 == 1 && num\
    \ > 0) {\n            result += num * num;\n        }\n    }\n    return result;\n\
    }\nconsole.log(double_the_difference([0]));\n", "    let sum: number = 0;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0 && lst[i]\
    \ > 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n\
    }", "    var square_sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] > 0 && lst[i] % 2 == 1) {\n            square_sum += lst[i] *\
    \ lst[i];\n        }\n    }\n    return square_sum;\n}", "    let sum = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 1) {\n \
    \           sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nconsole.log(double_the_difference([1,\
    \ 3, 2, 0]));\nconsole.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9,\
    \ -2]));\nconsole.log(double_the_difference([0]));\n", "    // let i: number =\
    \ 0;\n    // let sum: number = 0;\n    // for (i = 0; i < lst.length; i++) {\n\
    \    //     if (lst[i] % 2 == 1) {\n    //         sum += lst[i] ** 2;\n    //\
    \     }\n    // }\n    // return sum;\n    return lst.filter(x => x % 2 == 1).map(x\
    \ => x ** 2).reduce((x, y) => x + y, 0);\n}\n", "    return lst.filter(n => n\
    \ > 0 && n % 2 === 1).map(n => n * n).reduce((sum, x) => sum + x, 0);\n}\n", " \
    \   let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0 && Number.isInteger(lst[i])) {\n            if (lst[i] % 2 !== 0) {\n  \
    \              sum += lst[i] * lst[i];\n            }\n        }\n    }\n    return\
    \ sum;\n}\nconsole.log(double_the_difference([1, 3, 2, 0]));\n", "  let lst_sq:\
    \ number[] = lst.map(function(num: number): number {\n    return num * num;\n\
    \  });\n  let lst_sum: number = lst_sq.reduce(function(accumulator: number, currentValue:\
    \ number): number {\n    return accumulator + currentValue;\n  });\n  return lst_sum;\n\
    }\n", "  if (!lst.length) {\n    return 0;\n  }\n  return 2 * (lst.filter(x =>\
    \ typeof x === \"number\" && x % 2 === 1).reduce((a, b) => a + b * b, 0));\n}\n",
  "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let x = lst[i];\n\
    \        if (x < 0) {\n            continue;\n        }\n        if (x % 2 ==\
    \ 1) {\n            sum += x * x;\n        }\n    }\n    return sum;\n}\n\nconsole.log(double_the_difference([1,\
    \ 3, 2, 0]));\nconsole.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9,\
    \ -2]));\nconsole.log(double_the_difference([0]));\n", "  let total = 0;\n  lst.forEach(num\
    \ => {\n    if (num >= 0 && Number.isInteger(num)) {\n      if (num % 2 !== 0)\
    \ {\n        total += num * num;\n      }\n    }\n  });\n  return total;\n}\n",
  "    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n}\n", " \
    \ var result = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] >\
    \ 0 && lst[i] % 2 == 1) {\n      result += lst[i] ** 2;\n    }\n  }\n  return\
    \ result;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] % 2 == 1 && lst[i] > 0) {\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}", "  let result = 0;\n  for (let n of lst)\
    \ {\n    if (n % 2 !== 0 && n > 0) {\n      result += n * n;\n    }\n  }\n  return\
    \ result;\n}\n", "    let result = 0;\n    for (let num of lst) {\n        if\
    \ (num % 2 != 0 && num > 0) {\n            result += num ** 2;\n        }\n  \
    \  }\n    return result;\n}\nconsole.log(double_the_difference([1, 3, 2, 0]));\n\
    console.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9,\
    \ -2]));\nconsole.log(double_the_difference([0]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
