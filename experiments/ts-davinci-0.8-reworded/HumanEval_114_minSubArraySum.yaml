name: HumanEval_114_minSubArraySum
language: ts
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
  \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["  let currSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1;\
    \ i < nums.length; i++) {\n    const num = nums[i];\n    currSum = Math.min(num,\
    \ currSum + num);\n    minSum = Math.min(minSum, currSum);\n  }\n  return minSum;\n\
    }\n", "  // TODO your code here\n  return 0;\n}\n", "  let minSum = Infinity;\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n   \
    \   sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minimum = nums[0];\n\
    \  let current = 0;\n  for (let i = 0; i < nums.length; i++) {\n    current +=\
    \ nums[i];\n    if (current < minimum) {\n      minimum = current;\n    }\n  \
    \  if (current > 0) {\n      current = 0;\n    }\n  }\n  return minimum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  let total = 0;\n  let min = nums[0];\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    if (total < min) {\n      min = total;\n    }\n   \
    \ total += nums[i];\n    if (total < 0) {\n      total = 0;\n    }\n  }\n  return\
    \ min;\n}\n", "  if (nums.length === 0) return 0;\n  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let num of nums) {\n    currSum += num;\n    minSum\
    \ = Math.min(minSum, currSum);\n    if (currSum < 0) currSum = 0;\n  }\n  return\
    \ minSum;\n}\n", "    // if no elements in array\n    if (!nums.length) return\
    \ 0;\n    //   set min subarray to first element\n    let minSubArray = nums[0];\n\
    \    // set current subarray to first element\n    let currentSubArray = nums[0];\n\
    \    // loop over array starting from index 1\n    for (let i = 1; i < nums.length;\
    \ i++) {\n        // set current subarray to min of current subarray and current\
    \ subarray + current element\n        currentSubArray = Math.min(currentSubArray\
    \ + nums[i], nums[i]);\n        // set min subarray to min of current subarray\
    \ and min subarray\n        minSubArray = Math.min(currentSubArray, minSubArray);\n\
    \    }\n    // return min subarray\n    return minSubArray;\n}\n", "  let minSum\
    \ = nums[0];\n  let minStart = 0;\n  let minEnd = 0;\n  let sum = nums[0];\n \
    \ let start = 0;\n  let end = 0;\n  while (end < nums.length) {\n    while (end\
    \ < nums.length - 1 && sum >= 0) {\n      end++;\n      sum += nums[end];\n  \
    \  }\n    if (sum < minSum) {\n      minSum = sum;\n      minStart = start;\n\
    \      minEnd = end;\n    }\n    if (start === end) {\n      end++;\n      sum\
    \ = nums[end];\n    } else {\n      sum -= nums[start];\n      start++;\n    }\n\
    \  }\n  // console.log(nums.slice(minStart, minEnd + 1));\n  return minSum;\n\
    }\n\ndescribe(\"minSubArraySum\", () => {\n  test(\"#1\", () => {\n    expect(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])).toBe(1);\n  });\n  test(\"#2\", () => {\n    expect(minSubArraySum([-1,\
    \ -2, -3])).toBe(-6);\n  });\n  test(\"#3\", () => {\n    expect(minSubArraySum([0,\
    \ 0, 0])).toBe(0);\n  });\n  test(\"#4\", () => {\n    expect(minSubArraySum([-1,\
    \ 0, -2])).toBe(-3);\n  });\n  test(\"#5\", () => {\n    expect(minSubArraySum([1,\
    \ 2, 3, -4, 5, -6, 7, 8, 9])).toBe(-4);\n  });\n  test(\"#6\", () => {\n    expect(minSubArraySum([-4,\
    \ -5, -1, -3, 1, 2, 0, 2])).toBe(-5);\n  });\n  test(\"#7\", () => {\n    expect(minSubArraySum([1,\
    \ 2, 4, 2, 5, 7, 2, 4, 9, 0])).toBe(0);\n  });\n  test", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum +=\
    \ nums[i];\n    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if\
    \ (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n", " \
    \ let minSum = Infinity;\n  let currSum = 0;\n  let start = 0;\n  let end = 0;\n\
    \n  while (start < nums.length) {\n    while (currSum < 0 && start < nums.length)\
    \ {\n      currSum += nums[start];\n      start++;\n    }\n\n    while (currSum\
    \ >= 0 && end < nums.length) {\n      currSum += nums[end];\n      end++;\n  \
    \  }\n\n    minSum = Math.min(minSum, currSum);\n    currSum -= nums[start];\n\
    \    start++;\n  }\n\n  return minSum;\n}\n\nexport default minSubArraySum;",
  "  let min_sum = Infinity;\n  let curr_sum = 0;\n  for (let n of nums) {\n    curr_sum\
    \ += n;\n    min_sum = Math.min(min_sum, curr_sum);\n    if (curr_sum > 0) curr_sum\
    \ = 0;\n  }\n  return min_sum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum < 0) {\n \
    \     sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum +=\
    \ nums[i];\n    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if\
    \ (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "    let currentSum\
    \ = 0,\n        minSum = Infinity;\n    for (let i = 0; i < nums.length; i++)\
    \ {\n        currentSum += nums[i];\n        if (currentSum < minSum) {\n    \
    \        minSum = currentSum;\n        }\n        if (currentSum > 0) {\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let currentSum\
    \ = 0;\n  let minSum = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n \
    \   currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n\
    \    }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  // We can find the minimum sum by starting at the first value,\
    \ then adding\n  // every other value until we find a sum smaller than the current\
    \ one.\n  // If we don't find a sum that is smaller, we can assume the first sum\
    \ is the\n  // smallest possible.\n  let currentSum = nums[0];\n  let minSum =\
    \ nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const value = nums[i];\n\
    \    currentSum = Math.min(currentSum + value, value);\n    minSum = Math.min(currentSum,\
    \ minSum);\n  }\n  return minSum;\n}\n\nexport default minSubArraySum;", "   \
    \ let currentSum = 0,\n        minSum = Infinity;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        currentSum += nums[i];\n        if (currentSum < minSum) {\n\
    \            minSum = currentSum;\n        }\n        if (currentSum > 0) {\n\
    \            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "  let\
    \ currSum = 0;\n  let minSum = Infinity;\n  let start = 0;\n  let end = 0;\n\n\
    \  while (start < nums.length) {\n    if (currSum < 0) {\n      currSum = 0;\n\
    \    }\n    if (end >= nums.length) {\n      currSum -= nums[start];\n      start++;\n\
    \    } else {\n      currSum += nums[end];\n      end++;\n    }\n    minSum =\
    \ Math.min(minSum, currSum);\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n\
    \  let sum = 0;\n  let end = 0;\n  for (let start = 0; start < nums.length; start++)\
    \ {\n    while (end < nums.length && sum < 0) {\n      sum += nums[end];\n   \
    \   end++;\n    }\n    minSum = Math.min(minSum, sum);\n    sum -= nums[start];\n\
    \  }\n  return minSum;\n}\n", "    let minSum = nums[0];\n    let currentSum =\
    \ 0;\n    for (let num of nums) {\n        currentSum += num;\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
