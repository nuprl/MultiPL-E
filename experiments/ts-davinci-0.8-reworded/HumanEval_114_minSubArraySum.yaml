name: HumanEval_114_minSubArraySum
language: ts
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
  \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["  let currSum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1;\
    \ i < nums.length; i++) {\n    const num = nums[i];\n    currSum = Math.min(num,\
    \ currSum + num);\n    minSum = Math.min(minSum, currSum);\n  }\n  return minSum;\n\
    }\n", "  // TODO your code here\n  return 0;\n}\n", "  let minSum = Infinity;\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n   \
    \   sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minimum = nums[0];\n\
    \  let current = 0;\n  for (let i = 0; i < nums.length; i++) {\n    current +=\
    \ nums[i];\n    if (current < minimum) {\n      minimum = current;\n    }\n  \
    \  if (current > 0) {\n      current = 0;\n    }\n  }\n  return minimum;\n}\n\n\
    console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  let total = 0;\n  let min = nums[0];\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    if (total < min) {\n      min = total;\n    }\n   \
    \ total += nums[i];\n    if (total < 0) {\n      total = 0;\n    }\n  }\n  return\
    \ min;\n}\n", "  if (nums.length === 0) return 0;\n  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let num of nums) {\n    currSum += num;\n    minSum\
    \ = Math.min(minSum, currSum);\n    if (currSum < 0) currSum = 0;\n  }\n  return\
    \ minSum;\n}\n", "    // if no elements in array\n    if (!nums.length) return\
    \ 0;\n    //   set min subarray to first element\n    let minSubArray = nums[0];\n\
    \    // set current subarray to first element\n    let currentSubArray = nums[0];\n\
    \    // loop over array starting from index 1\n    for (let i = 1; i < nums.length;\
    \ i++) {\n        // set current subarray to min of current subarray and current\
    \ subarray + current element\n        currentSubArray = Math.min(currentSubArray\
    \ + nums[i], nums[i]);\n        // set min subarray to min of current subarray\
    \ and min subarray\n        minSubArray = Math.min(currentSubArray, minSubArray);\n\
    \    }\n    // return min subarray\n    return minSubArray;\n}\n", "  let minSum\
    \ = nums[0];\n  let minStart = 0;\n  let minEnd = 0;\n  let sum = nums[0];\n \
    \ let start = 0;\n  let end = 0;\n  while (end < nums.length) {\n    while (end\
    \ < nums.length - 1 && sum >= 0) {\n      end++;\n      sum += nums[end];\n  \
    \  }\n    if (sum < minSum) {\n      minSum = sum;\n      minStart = start;\n\
    \      minEnd = end;\n    }\n    if (start === end) {\n      end++;\n      sum\
    \ = nums[end];\n    } else {\n      sum -= nums[start];\n      start++;\n    }\n\
    \  }\n  // console.log(nums.slice(minStart, minEnd + 1));\n  return minSum;\n\
    }\n\ndescribe(\"minSubArraySum\", () => {\n  test(\"#1\", () => {\n    expect(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])).toBe(1);\n  });\n  test(\"#2\", () => {\n    expect(minSubArraySum([-1,\
    \ -2, -3])).toBe(-6);\n  });\n  test(\"#3\", () => {\n    expect(minSubArraySum([0,\
    \ 0, 0])).toBe(0);\n  });\n  test(\"#4\", () => {\n    expect(minSubArraySum([-1,\
    \ 0, -2])).toBe(-3);\n  });\n  test(\"#5\", () => {\n    expect(minSubArraySum([1,\
    \ 2, 3, -4, 5, -6, 7, 8, 9])).toBe(-4);\n  });\n  test(\"#6\", () => {\n    expect(minSubArraySum([-4,\
    \ -5, -1, -3, 1, 2, 0, 2])).toBe(-5);\n  });\n  test(\"#7\", () => {\n    expect(minSubArraySum([1,\
    \ 2, 4, 2, 5, 7, 2, 4, 9, 0])).toBe(0);\n  });\n  test", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum +=\
    \ nums[i];\n    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if\
    \ (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n", " \
    \ let minSum = Infinity;\n  let currSum = 0;\n  let start = 0;\n  let end = 0;\n\
    \n  while (start < nums.length) {\n    while (currSum < 0 && start < nums.length)\
    \ {\n      currSum += nums[start];\n      start++;\n    }\n\n    while (currSum\
    \ >= 0 && end < nums.length) {\n      currSum += nums[end];\n      end++;\n  \
    \  }\n\n    minSum = Math.min(minSum, currSum);\n    currSum -= nums[start];\n\
    \    start++;\n  }\n\n  return minSum;\n}\n\nexport default minSubArraySum;",
  "  let min_sum = Infinity;\n  let curr_sum = 0;\n  for (let n of nums) {\n    curr_sum\
    \ += n;\n    min_sum = Math.min(min_sum, curr_sum);\n    if (curr_sum > 0) curr_sum\
    \ = 0;\n  }\n  return min_sum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum < 0) {\n \
    \     sum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum +=\
    \ nums[i];\n    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if\
    \ (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "    let currentSum\
    \ = 0,\n        minSum = Infinity;\n    for (let i = 0; i < nums.length; i++)\
    \ {\n        currentSum += nums[i];\n        if (currentSum < minSum) {\n    \
    \        minSum = currentSum;\n        }\n        if (currentSum > 0) {\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let currentSum\
    \ = 0;\n  let minSum = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n \
    \   currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n\
    \    }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  // We can find the minimum sum by starting at the first value,\
    \ then adding\n  // every other value until we find a sum smaller than the current\
    \ one.\n  // If we don't find a sum that is smaller, we can assume the first sum\
    \ is the\n  // smallest possible.\n  let currentSum = nums[0];\n  let minSum =\
    \ nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    const value = nums[i];\n\
    \    currentSum = Math.min(currentSum + value, value);\n    minSum = Math.min(currentSum,\
    \ minSum);\n  }\n  return minSum;\n}\n\nexport default minSubArraySum;", "   \
    \ let currentSum = 0,\n        minSum = Infinity;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        currentSum += nums[i];\n        if (currentSum < minSum) {\n\
    \            minSum = currentSum;\n        }\n        if (currentSum > 0) {\n\
    \            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n", "  let\
    \ currSum = 0;\n  let minSum = Infinity;\n  let start = 0;\n  let end = 0;\n\n\
    \  while (start < nums.length) {\n    if (currSum < 0) {\n      currSum = 0;\n\
    \    }\n    if (end >= nums.length) {\n      currSum -= nums[start];\n      start++;\n\
    \    } else {\n      currSum += nums[end];\n      end++;\n    }\n    minSum =\
    \ Math.min(minSum, currSum);\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n\
    \  let sum = 0;\n  let end = 0;\n  for (let start = 0; start < nums.length; start++)\
    \ {\n    while (end < nums.length && sum < 0) {\n      sum += nums[end];\n   \
    \   end++;\n    }\n    minSum = Math.min(minSum, sum);\n    sum -= nums[start];\n\
    \  }\n  return minSum;\n}\n", "    let minSum = nums[0];\n    let currentSum =\
    \ 0;\n    for (let num of nums) {\n        currentSum += num;\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\n", "  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n", "    let start = 0;\n    let end =\
    \ 0;\n    let sum = nums[start];\n    let min = nums[start];\n    while (start\
    \ < nums.length && end < nums.length) {\n        if (sum < min) {\n          \
    \  min = sum;\n        }\n        if (sum <= 0) {\n            start = end + 1;\n\
    \            end = start;\n            sum = nums[start];\n        } else {\n\
    \            end++;\n            sum += nums[end];\n        }\n    }\n    return\
    \ min;\n}\n", "    if (!nums || nums.length === 0) {\n        return 0;\n    }\n\
    \    let currentSum = nums[0];\n    let currentMin = nums[0];\n    for (let i\
    \ = 1; i < nums.length; i++) {\n        if (currentSum > 0) {\n            currentSum\
    \ = nums[i];\n        } else {\n            currentSum += nums[i];\n        }\n\
    \        currentMin = Math.min(currentMin, currentSum);\n    }\n    return currentMin;\n\
    }\n", "  let minSum = nums[0];\n  let currSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n      minSum =\
    \ currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n", "    let minSum = Infinity;\n    let currentSum = 0;\n    for\
    \ (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n      \
    \  if (currentSum < minSum) {\n            minSum = currentSum;\n        }\n \
    \       if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n\
    \    return minSum;\n}\n", "  let minSum = Infinity;\n  let currentSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if\
    \ (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let currSum = 0;\n  for (let num of nums) {\n    currSum += num;\n\
    \    minSum = Math.min(minSum, currSum);\n    if (currSum < 0) currSum = 0;\n\
    \  }\n  return minSum;\n}\n", "  let min = Infinity;\n  let sum = 0;\n  let start\
    \ = 0;\n  let end = 0;\n  while (start < nums.length) {\n    while (end < nums.length\
    \ && sum < 0) {\n      sum += nums[end];\n      end++;\n    }\n    min = Math.min(min,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return min;\n}\n", "  let\
    \ minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n\
    \    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}", "  let\
    \ mss = nums[0];\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n\
    \    count += nums[i];\n    if (count < mss) {\n      mss = count;\n    }\n  \
    \  if (count > 0) {\n      count = 0;\n    }\n  }\n  return mss;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));", "  let minSum = Infinity;\n  let left = 0;\n  let sum =\
    \ 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while\
    \ (sum >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[left];\n\
    \      left++;\n    }\n  }\n  return minSum;\n}\n", "  let currentSum = 0;\n \
    \ let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum\
    \ += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n  \
    \  }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n", "    // iterate over input array\n    // at each index find the sum of all\
    \ other possible sub-arrays and store in variable\n    // compare variable to\
    \ the current min\n\n    let min: number = nums[0];\n    let tempSum: number =\
    \ 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        // reset sum each\
    \ iteration\n        tempSum = 0;\n        for (let j = i; j < nums.length; j++)\
    \ {\n            tempSum += nums[j];\n            if (tempSum < min) {\n     \
    \           min = tempSum;\n            }\n        }\n    }\n    return min;\n\
    }\nconsole.log(minSubArraySum([-1, -2, -3]));", "  if (nums.length === 0) return\
    \ 0;\n  let currentSum = nums[0];\n  let globalSum = nums[0];\n  for (let i =\
    \ 1; i < nums.length; i++) {\n    currentSum = Math.min(nums[i], currentSum +\
    \ nums[i]);\n    globalSum = Math.min(globalSum, currentSum);\n  }\n  return globalSum;\n\
    }\n\ndescribe(\"minSubArraySum\", () => {\n  it(\"should work for provided example\"\
    , () => {\n    const minSum1 = minSubArraySum([2, 3, 4, 1, 2, 4]);\n    expect(minSum1).toEqual(1);\n\
    \    const minSum2 = minSubArraySum([-1, -2, -3]);\n    expect(minSum2).toEqual(-6);\n\
    \  });\n});", "  let sum = 0;\n  let min = Number.MAX_SAFE_INTEGER;\n  let start\
    \ = 0;\n  let end = 0;\n  while (start < nums.length) {\n    if (sum < 0) {\n\
    \      sum = 0;\n      end = start;\n    }\n    sum += nums[start];\n    min =\
    \ Math.min(min, sum);\n    start++;\n  }\n  return min;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "    let start\
    \ = 0;\n    let end = nums.length - 1;\n    let currentMin = nums[start];\n  \
    \  let sum = nums[start];\n    while (start < end) {\n        while (sum >= 0\
    \ && start < end) {\n            end--;\n            sum += nums[end];\n     \
    \   }\n        if (sum < currentMin) {\n            currentMin = sum;\n      \
    \  }\n        while (sum <= 0 && start < end) {\n            start++;\n      \
    \      sum += nums[start];\n        }\n        if (sum < currentMin) {\n     \
    \       currentMin = sum;\n        }\n    }\n    return currentMin;\n}\n", " \
    \ let min = Infinity;\n  let currSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < min) {\n      min = currSum;\n\
    \    }\n    if (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return min;\n\
    }\n", "    let minSum = nums[0];\n    let currentSum = nums[0];\n    for (let\
    \ i = 1; i < nums.length; i++) {\n        if (currentSum < 0) {\n            currentSum\
    \ = nums[i];\n        } else {\n            currentSum += nums[i];\n        }\n\
    \        if (currentSum < minSum) {\n            minSum = currentSum;\n      \
    \  }\n    }\n    return minSum;\n}", "  // TODO\n  return;\n}", "  let result\
    \ = Infinity;\n  let currentSum = 0;\n  for (let index = 0; index < nums.length;\
    \ index++) {\n    currentSum += nums[index];\n    result = Math.min(result, currentSum);\n\
    \    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return result;\n\
    }\n", "  // brute force\n  // const sums = [];\n  // for (let i = 0; i < nums.length;\
    \ i++) {\n  //   sums.push(nums[i]);\n  //   for (let j = i + 1; j < nums.length;\
    \ j++) {\n  //     sums.push(sums[sums.length - 1] + nums[j]);\n  //   }\n  //\
    \ }\n  // return Math.min(...sums);\n\n  // sliding window\n  let min = Infinity;\n\
    \  let sum = 0;\n  let l = 0;\n  for (let r = 0; r < nums.length; r++) {\n   \
    \ sum += nums[r];\n    while (sum >= 0) {\n      min = Math.min(min, sum);\n \
    \     sum -= nums[l];\n      l++;\n    }\n  }\n  return min;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let minimum\
    \ = nums[0];\n  let sum = 0;\n  for (let num of nums) {\n    sum += num;\n   \
    \ if (sum < minimum) {\n      minimum = sum;\n    }\n    if (sum > 0) {\n    \
    \  sum = 0;\n    }\n  }\n  return minimum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum < 0) {\n \
    \     sum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  // Initialize\
    \ a minimum sum.\n  let minSum = Infinity;\n  // Initialize a current sum.\n \
    \ let currentSum = 0;\n  // Iterate through the numbers.\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    // Initialize a current number.\n    const currentNum\
    \ = nums[i];\n    // Set the current sum.\n    currentSum += currentNum;\n   \
    \ // If the current sum is less than the minimum sum.\n    if (currentSum < minSum)\
    \ {\n      // Set the minimum sum to the current sum.\n      minSum = currentSum;\n\
    \    }\n    // If the current sum is less than 0.\n    if (currentSum < 0) {\n\
    \      // Set the current sum to 0.\n      currentSum = 0;\n    }\n  }\n  // Return\
    \ the minimum sum.\n  return minSum;\n}\n", "    let min_val = Infinity;\n   \
    \ let max_sum = 0;\n    let max_sum_end = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        max_sum_end = max_sum_end + nums[i];\n        min_val = Math.min(min_val,\
    \ max_sum_end);\n        if (max_sum_end > max_sum) {\n            max_sum = max_sum_end;\n\
    \        }\n        if (max_sum_end < 0) {\n            max_sum_end = 0;\n   \
    \     }\n    }\n    return min_val;\n}\n", "    if (nums.length < 1) {\n     \
    \   return 0;\n    }\n    let maxSoFar = nums[0];\n    let maxEndingHere = nums[0];\n\
    \    for (let i = 1; i < nums.length; i++) {\n        maxEndingHere = Math.max(maxEndingHere\
    \ + nums[i], nums[i]);\n        maxSoFar = Math.max(maxSoFar, maxEndingHere);\n\
    \    }\n    return maxSoFar;\n}\n\nexport default minSubArraySum;", "    let sum\
    \ = 0;\n    let min = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n        if (sum > 0) {\n            sum = 0;\n        }\n \
    \   }\n    return min;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));", "  let minSum = nums[0];\n  let sum:\
    \ number = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    if (sum < minSum) {\n      minSum = sum;\n    }\n    if (sum > 0) {\n   \
    \   sum = 0;\n    }\n  }\n  return minSum;\n}\n\nconst nums = [2, 3, 4, 1, 2,\
    \ 4];\nconsole.log(minSubArraySum(nums));", "  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let current = 0;\n  for (let i = 0; i < nums.length; i++) {\n    current +=\
    \ nums[i];\n    if (current < min) {\n      min = current;\n    }\n    if (current\
    \ > 0) {\n      current = 0;\n    }\n  }\n  return min;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\n", "  let minSum = Infinity;\n  let sum = 0;\n  let left\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while\
    \ (sum >= minSum) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[left];\n\
    \      left++;\n    }\n  }\n  return minSum;\n}\n", "    let minSum = Infinity;\n\
    \    let currentSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n      \
    \  currentSum += nums[i];\n        if (currentSum < minSum) {\n            minSum\
    \ = currentSum;\n        }\n        if (currentSum > 0) {\n            currentSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\n", "    if (nums.length === 0)\
    \ {\n        return 0;\n    }\n    let res = nums[0];\n    let sum = 0;\n    for\
    \ (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        res =\
    \ Math.min(res, sum);\n        if (sum > 0) {\n            sum = 0;\n        }\n\
    \    }\n    return res;\n}\n(function () {\n    const res = minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]);\n    console.log(res);\n})();", "  let sum = Infinity;\n  let\
    \ start = 0;\n  let end = 0;\n  let curSum = 0;\n  while (end < nums.length) {\n\
    \    curSum += nums[end];\n    if (curSum < sum) {\n      sum = curSum;\n    }\n\
    \    while (curSum >= 0) {\n      curSum -= nums[start];\n      start++;\n   \
    \ }\n    end++;\n  }\n  return sum;\n}\n", "  let currentSum = 0;\n  let minSum\
    \ = Infinity;\n  let start = 0;\n  let end = 0;\n\n  while (start < nums.length)\
    \ {\n    // currentSum less than 0, we will skip currentSum and start from next\
    \ element\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n\n    currentSum\
    \ += nums[end];\n    minSum = Math.min(minSum, currentSum);\n\n    if (end ===\
    \ nums.length - 1) {\n      start++;\n      end = start;\n      currentSum = 0;\n\
    \    } else {\n      end++;\n    }\n  }\n\n  return minSum;\n}\n", "    if (!nums\
    \ || nums.length === 0) {\n        return 0;\n    }\n    let minSum = Number.MAX_SAFE_INTEGER;\n\
    \    let currSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currSum\
    \ += nums[i];\n        minSum = Math.min(minSum, currSum);\n        if (currSum\
    \ < 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\n",
  "    // TODO\n    return 0;\n}\n\nminSubArraySum([2, 3, 4, 1, 2, 4]);\nminSubArraySum([-1,\
    \ -2, -3]);", "    if (nums.length === 0) return 0;\n    let minSum = nums[0];\n\
    \    let currentSum = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n\
    \        currentSum = Math.min(currentSum + nums[i], nums[i]);\n        minSum\
    \ = Math.min(minSum, currentSum);\n    }\n    return minSum;\n}\n\nexport default\
    \ minSubArraySum;", "  let smallest = Infinity;\n  let current = 0;\n  for (let\
    \ i = 0; i < nums.length; i++) {\n    current += nums[i];\n    if (current < smallest)\
    \ {\n      smallest = current;\n    }\n    if (current > 0) {\n      current =\
    \ 0;\n    }\n  }\n  return smallest;\n}\n", "    let minSum = Infinity;\n    let\
    \ currSum = 0;\n    for (let num of nums) {\n        currSum += num;\n       \
    \ minSum = Math.min(minSum, currSum);\n        if (currSum < 0) {\n          \
    \  currSum = 0;\n        }\n    }\n    return minSum;\n}\n", "    if (!nums.length)\
    \ {\n        return 0;\n    }\n    let currentSum = nums[0];\n    let minSum =\
    \ nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        currentSum =\
    \ Math.min(currentSum + nums[i], nums[i]);\n        minSum = Math.min(currentSum,\
    \ minSum);\n    }\n    return minSum;\n}\n", "  let minSum = Infinity;\n  let\
    \ i = 0;\n  let start = 0;\n  let currentSum = 0;\n  while (i < nums.length) {\n\
    \    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n\
    \    }\n    if (currentSum >= 0) {\n      start = i + 1;\n      currentSum = 0;\n\
    \    }\n    i++;\n  }\n  return minSum;\n}\n", "  let startIndex = 0;\n  let endIndex\
    \ = 0;\n  let sum = nums[0];\n  let minSum = sum;\n\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n\n    if (sum\
    \ < 0) {\n      sum = 0;\n      startIndex = i + 1;\n    }\n  }\n\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  let minSum = Infinity;\n  let currSum = 0;\n  for (let num of\
    \ nums) {\n    currSum += num;\n    minSum = Math.min(minSum, currSum);\n    if\
    \ (currSum < 0) currSum = 0;\n  }\n  return minSum;\n}\n\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4]);\nminSubArraySum([-1, -2, -3]);", "  let start = 0;\n  let end\
    \ = 0;\n  let total = 0;\n  let min = Infinity;\n\n  while (start < nums.length)\
    \ {\n    if (total < 0) {\n      start++;\n      end = start;\n      total = 0;\n\
    \    } else if (end === nums.length) {\n      total -= nums[start];\n      start++;\n\
    \    } else {\n      total += nums[end];\n      end++;\n    }\n    min = Math.min(min,\
    \ total);\n  }\n  return min;\n}\n\nexport { minSubArraySum };", "    let total\
    \ = 0;\n    let min = Infinity;\n    for (let i = 0; i < nums.length; i++) {\n\
    \        total += nums[i];\n        if (total < min) {\n            min = total;\n\
    \        }\n        if (total > 0) {\n            total = 0;\n        }\n    }\n\
    \    return min;\n}", "    let currentSum = nums[0];\n    let minimumSum = nums[0];\n\
    \    for (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(nums[i],\
    \ currentSum + nums[i]);\n        minimumSum = Math.min(currentSum, minimumSum);\n\
    \    }\n    return minimumSum;\n}", "  let curSum = 0;\n  let maxSum = Infinity;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    curSum += nums[i];\n    if (curSum\
    \ < maxSum) {\n      maxSum = curSum;\n    }\n    if (curSum > 0) {\n      curSum\
    \ = 0;\n    }\n  }\n  return maxSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\n", "  let min: number = Infinity;\n  let sum: number = 0;\n  for\
    \ (let i: number = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum\
    \ < min) {\n      min = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n\
    \  }\n  return min;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); //1\n\
    console.log(minSubArraySum([-1, -2, -3])); //-6", "  let minSum = nums[0];\n \
    \ let tmpSum = 0;\n  for (let n of nums) {\n    tmpSum += n;\n    if (tmpSum <\
    \ minSum) {\n      minSum = tmpSum;\n    }\n    if (tmpSum > 0) {\n      tmpSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n", "    let sum = 0;\n    let left =\
    \ 0;\n    let min = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n        while (sum >= 0) {\n            min\
    \ = Math.min(min, sum);\n            sum -= nums[left];\n            left++;\n\
    \        }\n    }\n    return min;\n}\n", "  let sum = Infinity;\n  let currentSum\
    \ = 0;\n  for (let index = 0; index < nums.length; index++) {\n    currentSum\
    \ += nums[index];\n    if (currentSum < sum) {\n      sum = currentSum;\n    }\n\
    \    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  if (nums.length === 0) return 0;\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    if (sum < min) min = sum;\n    if (sum > 0) sum = 0;\n  }\n  return min;\n\
    }\n\nexport default minSubArraySum;", "  let total = 0;\n  let minTotal = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (total < 0) {\n      total\
    \ = nums[i];\n    } else {\n      total += nums[i];\n    }\n    minTotal = Math.min(total,\
    \ minTotal);\n  }\n  return minTotal;\n}\n", "  let currentMin = Number.MAX_SAFE_INTEGER;\n\
    \  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let\
    \ j = i; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum\
    \ < currentMin) {\n        currentMin = currentSum;\n      }\n    }\n    currentSum\
    \ = 0;\n  }\n  return currentMin;\n}\n", "  let minSum = Infinity;\n  let sum\
    \ = 0;\n  let left = 0;\n  let right = 0;\n\n  while (right < nums.length) {\n\
    \    sum += nums[right];\n    right++;\n\n    while (sum >= 0) {\n      minSum\
    \ = Math.min(minSum, sum);\n      sum -= nums[left];\n      left++;\n    }\n \
    \ }\n\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));", "    let current_sum = nums[0];\n\
    \    let min_sum = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n   \
    \     current_sum = Math.min(nums[i], current_sum + nums[i]);\n        min_sum\
    \ = Math.min(current_sum, min_sum);\n    }\n    return min_sum;\n}\n", "  let\
    \ left = 0,\n    right = 0,\n    minSum = Infinity,\n    currSum = 0;\n  while\
    \ (right < nums.length) {\n    currSum += nums[right];\n    right++;\n    while\
    \ (currSum >= 0) {\n      minSum = Math.min(minSum, currSum);\n      currSum -=\
    \ nums[left];\n      left++;\n    }\n  }\n  return minSum;\n}\n\nexport function\
    \ runTests(): void {\n  const inputs = [\n    [[2, 3, 4, 1, 2, 4], 1],\n    [[-1,\
    \ -2, -3], -6],\n    [[2, 3, -4, 1, 2, 4], 0],\n    [[-1, -1, -1, -1, -1, -1],\
    \ -6],\n    [[-1, 1, -1, 1, -1, 1], -1],\n    [[], 0],\n    [[0], 0],\n    [[1],\
    \ 1],\n    [[1, 2], 1],\n    [[-1, 1], 0],\n    [[1, -1], 0],\n    [[1, 2, 3],\
    \ 1],\n    [[2, 3, -1, 1, 4], 1],\n    [[-2, 3, -1, 1, 4], 0],\n    [[1, -1, -1,\
    \ -1, 1], 0],\n    [[1, -1, -1, -1, -1], -1],\n    [[1, -1, -1, -1, -1, 1], 0],\n\
    \    [[-2, 3, -1, 1, 4, -6, 5, 8, 3, -1, -3, 4, 5, -4, 7, -6, 1, -4, -6, -8],\n\
    \      -6],\n    [[-2, 3, -1, 1, 4, -6, 5, 8, 3, -1, -3, 4, 5, -4, 7, -6, 1, -4,\
    \ -6, -8,\n      -3, 7, -3, -2, 7, 1, -6, -4, -7, -", "  if (nums.length === 0)\
    \ return 0;\n  if (nums.length === 1) return nums[0];\n  let min = nums[0];\n\
    \  let max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    max = Math.max(nums[i],\
    \ max + nums[i]);\n    min = Math.min(min, max);\n  }\n  return min;\n}\n", " \
    \ let result = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    if (sum < 0) {\n      sum = nums[i];\n    } else {\n      sum += nums[i];\n\
    \    }\n    result = Math.min(result, sum);\n  }\n  return result;\n}\n", "  let\
    \ currentSum = nums[0];\n  let minSum = currentSum;\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = Math.min(currentSum, minSum);\n  }\n  return minSum;\n}\n", "  let min = Infinity\n\
    \  let sum = 0\n  let start = 0\n  for (let i = 0; i < nums.length; i++) {\n \
    \   sum += nums[i]\n    min = Math.min(min, sum - start)\n    if (sum < start)\
    \ {\n      start = sum\n    }\n  }\n  return min\n}\n\ntype Coordinate = [number,\
    \ number]\n", "  let sum = nums[0];\n  let minSum = nums[0];\n  for (let i = 1;\
    \ i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n    minSum\
    \ = Math.min(sum, minSum);\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let minSum\
    \ = Infinity;\n  let currentSum = 0;\n  for (let num of nums) {\n    currentSum\
    \ += num;\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum < 0)\
    \ currentSum = 0;\n  }\n  return minSum;\n}\n", "  let result = Number.MAX_SAFE_INTEGER;\n\
    \  let sum = 0;\n  let l = 0;\n  let r = 0;\n  while (r < nums.length) {\n   \
    \ sum += nums[r];\n    while (sum >= 0) {\n      result = Math.min(result, sum);\n\
    \      sum -= nums[l];\n      l++;\n    }\n    r++;\n  }\n  return result;\n}\n",
  "  let min: number = Number.MAX_SAFE_INTEGER;\n  let sum: number = 0;\n  for (let\
    \ i: number = 0; i < nums.length; i++) {\n    for (let j: number = i; j < nums.length;\
    \ j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n\
    \      }\n    }\n    sum = 0;\n  }\n  return min;\n}", "    let minSum = Number.MAX_SAFE_INTEGER;\n\
    \    let sum = 0;\n    let n = nums.length;\n    for (let i = 0; i < n; i++) {\n\
    \        sum = 0;\n        for (let j = i; j < n; j++) {\n            sum += nums[j];\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let minSum = Infinity;\n\
    \  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum\
    \ += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n  \
    \  }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n", "  let minSum = Infinity;\n  let runningSum = 0;\n  let i = 0;\n  while\
    \ (i < nums.length) {\n    let num = nums[i];\n    runningSum += num;\n    minSum\
    \ = Math.min(minSum, runningSum);\n    if (runningSum < 0) {\n      runningSum\
    \ = 0;\n    }\n    i++;\n  }\n  return minSum;\n}\n", "    let minSum = nums[0];\n\
    \    let currSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currSum\
    \ += nums[i];\n        if (currSum < minSum) {\n            minSum = currSum;\n\
    \        }\n        if (currSum > 0) {\n            currSum = 0;\n        }\n\
    \    }\n    return minSum;\n}\n", "  if (nums.length === 0) return 0;\n  let minimum\
    \ = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    currentSum += nums[i];\n    if (currentSum < minimum) minimum = currentSum;\n\
    \    if (currentSum > 0) currentSum = 0;\n  }\n  return minimum;\n}\n", "  let\
    \ minSum = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n(function Main():\
    \ void {\n  const nums = [2, 3, 4, 1, 2, 4];\n  console.log(minSubArraySum(nums));\n\
    })();", "  if (nums.length === 0) return 0;\n  let min = Infinity;\n  let curr\
    \ = 0;\n  let start = 0;\n  let end = 0;\n  while (end < nums.length) {\n    curr\
    \ += nums[end];\n    while (curr < 0) {\n      min = Math.min(min, curr);\n  \
    \    curr -= nums[start];\n      start++;\n    }\n    end++;\n  }\n  return min;\n\
    }\n", "    let minSum = nums[0];\n    let window = [nums[0]];\n    for (let i\
    \ = 1; i < nums.length; i++) {\n        window[i] = Math.min(window[i - 1] + nums[i],\
    \ nums[i]);\n        minSum = Math.min(minSum, window[i]);\n    }\n    return\
    \ minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1,\
    \ -2, -3])); // -6", "  let ret = 0;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (i === 0) {\n      ret = sum;\n    } else\
    \ {\n      ret = Math.min(ret, sum);\n    }\n    if (sum > 0) {\n      sum = 0;\n\
    \    }\n  }\n  return ret;\n}\n\ndescribe(\"function minSubArraySum\", () => {\n\
    \  it(\"nums = [2, 3, 4, 1, 2, 4]\", () => {\n    assert.strictEqual(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]), 1);\n  });\n  it(\"nums = [-1, -2, -3]\", () => {\n    assert.strictEqual(minSubArraySum([-1,\
    \ -2, -3]), -6);\n  });\n});", "  let min = nums[0];\n  let sum = 0;\n  for (let\
    \ i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n\
    \      min = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));", "  let windowStart\
    \ = 0;\n  let windowSum = 0;\n  let minSum = Number.MAX_SAFE_INTEGER;\n\n  for\
    \ (let windowEnd = 0; windowEnd < nums.length; windowEnd++) {\n    windowSum +=\
    \ nums[windowEnd];\n\n    while (windowSum >= minSum) {\n      minSum = Math.min(minSum,\
    \ windowSum);\n      windowSum -= nums[windowStart];\n      windowStart++;\n \
    \   }\n  }\n\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));", "  let minSoFar = Infinity;\n  let currentMin = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currentMin = Math.min(currentMin + nums[i], nums[i]);\n\
    \    minSoFar = Math.min(minSoFar, currentMin);\n  }\n  return minSoFar;\n}\n",
  "    if (!nums.length) {\n        return 0;\n    }\n    let minSoFar = nums[0];\n\
    \    let currentMin = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n\
    \        currentMin = Math.min(currentMin + nums[i], nums[i]);\n        minSoFar\
    \ = Math.min(minSoFar, currentMin);\n    }\n    return minSoFar;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "    if (nums.length\
    \ === 0) {\n        return 0;\n    }\n    let currentMin = nums[0];\n    let runningTotal\
    \ = 0;\n    for (let i = 0; i < nums.length; i++) {\n        runningTotal += nums[i];\n\
    \        if (runningTotal < currentMin) {\n            currentMin = runningTotal;\n\
    \        }\n    }\n    return currentMin;\n}\n", "  let minSum = Infinity;\n \
    \ let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum\
    \ += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n  \
    \  }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n", "    let minSum = nums[0];\n    let currentSum = nums[0];\n    for (let\
    \ i = 1; i < nums.length; i++) {\n        if (currentSum + nums[i] < nums[i])\
    \ {\n            currentSum = nums[i];\n        } else {\n            currentSum\
    \ += nums[i];\n        }\n        if (currentSum < minSum) {\n            minSum\
    \ = currentSum;\n        }\n    }\n    return minSum;\n}\n", "  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let currentSum = 0;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    currentSum += nums[i];\n    min = Math.min(min, currentSum);\n    if\
    \ (currentSum > 0) {\n      currentSum = 0;\n    }\n    sum += nums[i];\n  }\n\
    \  return min < 0 ? min : sum;\n}\n", "  let minSum = nums[0];\n  let maxSum =\
    \ nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length; i++)\
    \ {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > maxSum) {\n      maxSum = currentSum;\n\
    \    }\n  }\n  let possibleMinimum = minSum;\n  let newMin = minSum;\n  let newMax\
    \ = maxSum;\n  let returnMin = minSum;\n  while (currentSum !== newMin) {\n  \
    \  newMin = newMin + maxSum;\n    newMax = newMax + maxSum;\n    currentSum =\
    \ currentSum + maxSum;\n    if (currentSum < returnMin) {\n      returnMin = currentSum;\n\
    \    }\n  }\n  if (returnMin < possibleMinimum) {\n    return returnMin;\n  }\n\
    \  return possibleMinimum;\n}\n", "  let minSum = Infinity;\n  let tempSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    tempSum += nums[i];\n    if (tempSum\
    \ < minSum) {\n      minSum = tempSum;\n    }\n    if (tempSum > 0) {\n      tempSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = nums[0];\n  let sum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (sum < 0) {\n      sum\
    \ = 0;\n    }\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n  }\n\
    \  return minSum;\n}\n\nexport default minSubArraySum;", "    // base case\n \
    \   if (nums.length === 0) return 0;\n    if (nums.length === 1) return nums[0];\n\
    \n    // build up min sub array sum\n    let minSum = nums[0];\n    let currSum\
    \ = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        currSum = Math.min(currSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currSum);\n    }\n \
    \   return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n  let sum\
    \ = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    if (sum\
    \ < 0) {\n      sum = nums[i];\n    } else {\n      sum += nums[i];\n    }\n \
    \   if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n}\n\
    \nexport { minSubArraySum };", "  let min = 0;\n  let sum = 0;\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > min) {\n    \
    \  min = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min;\n}\n\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let total = nums[0];\n\
    \  let left = 0;\n  let right = 0;\n  let min = nums[0];\n  for (let i = 1; i\
    \ < nums.length; i++) {\n    total += nums[i];\n    if (total < min) {\n     \
    \ min = total;\n      right = i;\n    }\n    if (total - nums[left] < min) {\n\
    \      min = total - nums[left];\n      right = i;\n    }\n    if (total - nums[left]\
    \ === 0) {\n      left++;\n    }\n  }\n  return min;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum +=\
    \ nums[i];\n    if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if\
    \ (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n", " \
    \ let lowest = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    for (let j = i; j < nums.length; j++) {\n      sum\
    \ += nums[j];\n      if (sum < lowest) {\n        lowest = sum;\n      }\n   \
    \ }\n    sum = 0;\n  }\n  return lowest;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let length\
    \ = nums.length;\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let currentSum =\
    \ 0;\n  for (let i = 0; i < length; i++) {\n    currentSum += nums[i];\n    if\
    \ (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));", "    let minSum = nums[0];\n    let currentSum = nums[0];\n\
    \    for (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  let min: number = Number.MAX_SAFE_INTEGER;\n  let sum: number\
    \ = 0;\n  for (let i: number = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    if (sum < min) {\n      min = sum;\n    }\n    if (sum > 0) {\n      sum\
    \ = 0;\n    }\n  }\n  return min;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1,\
    \ 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let sum: number =\
    \ nums[0];\n  let tempSum: number = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    tempSum = Math.min(tempSum + nums[i], nums[i]);\n    sum = Math.min(sum,\
    \ tempSum);\n  }\n  return sum;\n}\n\nexport {minSubArraySum};", "  let minSum\
    \ = Infinity;\n  let sum = 0;\n  let start = 0;\n  let end = 0;\n  while (end\
    \ < nums.length) {\n    sum += nums[end];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    while (sum >= 0) {\n      if (sum < minSum) {\n        minSum\
    \ = sum;\n      }\n      sum -= nums[start];\n      start++;\n    }\n    end++;\n\
    \  }\n  return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); //\
    \ 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6", "    let currentMax =\
    \ Number.MAX_SAFE_INTEGER;\n    let currentSum = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        if (nums[i] < currentMax) {\n            currentMax = nums[i];\n\
    \        }\n        currentSum += nums[i];\n        if (currentSum < currentMax)\
    \ {\n            currentMax = currentSum;\n        }\n        for (let j = i +\
    \ 1; j < nums.length; j++) {\n            currentSum += nums[j];\n           \
    \ if (currentSum < currentMax) {\n                currentMax = currentSum;\n \
    \           }\n        }\n        currentSum = 0;\n    }\n    return currentMax;\n\
    }\n", "  let min = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n\
    \    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min;\n}\n\nexport {\
    \ minSubArraySum };", "  let smallestSum = Infinity;\n  let currentSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    for (let j = i; j < nums.length;\
    \ j++) {\n      currentSum += nums[j];\n      if (currentSum < smallestSum) {\n\
    \        smallestSum = currentSum;\n      }\n    }\n    currentSum = 0;\n  }\n\
    \  return smallestSum;\n}\n", "  let minSum = nums[0];\n  let currSum = nums[0];\n\
    \  for (let i = 1; i < nums.length; i++) {\n    currSum = Math.min(nums[i], currSum\
    \ + nums[i]);\n    minSum = Math.min(minSum, currSum);\n  }\n  return minSum;\n\
    }\n\nexport function runTests(): void {\n  const inputs = [\n    [[2, 3, 4, 1,\
    \ 2, 4], 1],\n    [[-1, -2, -3], -6],\n    [[5, 2, -3, -1, 2, 4], 2],\n    [[-1,\
    \ 2, -3, -1, 2, 4], -1],\n    [[], 0],\n    [[-1], -1],\n    [[-1, 2], -1],\n\
    \    [[-1, -2], -3],\n    [[-1, -2, -3], -6],\n    [[-1, -2, -3, -1], -6],\n \
    \   [[-1, -2, -3, -1, -2], -7],\n    [[-1, -2, -3, -1, -2, -4], -12],\n    [[-1,\
    \ -2, -3, -1, -2, -4, -1], -12],\n    [[-1, -2, -3, -1, -2, -4, -1, 2], -11],\n\
    \    [[-1, -2, -3, -1, -2, -4, -1, 2, 1], -11],\n    [[-1, -2, -3, -1, -2, -4,\
    \ -1, 2, 1, 3], -8],\n    [[-1, -2, -3, -1, -2, -4, -1, 2, 1, 3, -4], -8],\n \
    \   [[-1, -2, -3, -1, -2, -4, -1, 2, 1, 3, -4, -3], -8],\n    [[-1, -2, -3, -1,\
    \ -2, -4", "  let res = nums[0];\n  let localMin = nums[0];\n  for (let i = 1;\
    \ i < nums.length; i++) {\n    localMin = Math.min(nums[i], localMin + nums[i]);\n\
    \    res = Math.min(res, localMin);\n  }\n  return res;\n}\n", "  let minimumSum\
    \ = Infinity;\n  let sum: number = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    sum += nums[i];\n    if (sum < minimumSum) {\n      minimumSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minimumSum;\n\
    }\n\nexport default minSubArraySum;", "  if (nums.length === 0) return 0;\n  let\
    \ minSum = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    sum = Math.min(sum + nums[i], nums[i]);\n    minSum = Math.min(minSum,\
    \ sum);\n  }\n  return minSum;\n}\n", "    let minSum = Infinity;\n    let sum\
    \ = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (sum > 0) {\n            sum = 0;\n        }\n    }\n    return minSum;\n}\n",
  "  // TODO\n  return -1;\n}\n", "  let minSum = Infinity;\n  let currentSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if\
    \ (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum\
    \ = Infinity;\n  let currSum = 0;\n  let subArray = [];\n  nums.forEach((num,\
    \ index) => {\n    // while (subArray.length < nums.length) {\n    if (num > 0)\
    \ {\n      subArray.push(num);\n      currSum += num;\n      minSum = Math.min(minSum,\
    \ currSum);\n    } else {\n      currSum += num;\n      minSum = Math.min(minSum,\
    \ currSum);\n      if (currSum > 0) {\n        currSum = 0;\n        subArray\
    \ = [];\n      }\n    }\n    // }\n  });\n  return minSum;\n}\n\nminSubArraySum([-1,\
    \ -2, -3]);", "  let minSum = Infinity;\n  let subSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    subSum += nums[i];\n    if (subSum < minSum) {\n\
    \      minSum = subSum;\n    }\n    if (subSum > 0) {\n      subSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n", "  //initialize minimum sum\n  let min = nums[0];\n\
    \  //initialize sum\n  let sum = 0;\n  //iterate over the array\n  for (let i\
    \ = 0; i < nums.length; i++) {\n    //if adding the current number to the sum\
    \ would result in the sum being less than\n    //the minimum sum, we set the minimum\
    \ sum to the sum.\n    if (sum + nums[i] < min) {\n      min = sum + nums[i];\n\
    \    }\n    //increment sum by current number\n    sum += nums[i];\n    //if the\
    \ sum is less than the minimum sum, then we set the minimum sum to the sum\n \
    \   if (sum < min) {\n      min = sum;\n    }\n  }\n  //return minimum sum\n \
    \ return min;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  let total = 0;\n  let minTotal = Infinity;\n  for (let num of\
    \ nums) {\n    total += num;\n    minTotal = Math.min(minTotal, total);\n    if\
    \ (total < 0) total = 0;\n  }\n  return minTotal;\n}\n", "    let start = 0;\n\
    \    let end = 0;\n    let sum = nums[0];\n    let min = sum;\n    while (end\
    \ < nums.length) {\n        if (sum >= 0) {\n            end++;\n            sum\
    \ += nums[end];\n        } else {\n            min = Math.min(min, sum);\n   \
    \         start++;\n            sum -= nums[start - 1];\n        }\n    }\n  \
    \  return min;\n}\n", "  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n\
    \  let start = 0;\n  let end = 0;\n  while (end < nums.length) {\n    while (sum\
    \ < 0 && start < end) {\n      sum -= nums[start];\n      start++;\n    }\n  \
    \  min = Math.min(min, sum);\n    sum += nums[end];\n    end++;\n  }\n  return\
    \ min;\n}\n\nexport { minSubArraySum };", "  let total = 0;\n  let start = 0;\n\
    \  let end = 0;\n  let min = Infinity;\n\n  while (start < nums.length) {\n  \
    \  // if current window doesn't add up to the given sum then\n    // move the\
    \ window to right\n    if (total < 10 && end < nums.length) {\n      total +=\
    \ nums[end];\n      end++;\n    }\n    // if current window adds up to at least\
    \ the sum given then\n    // we can shrink the window\n    else if (total >= 10)\
    \ {\n      min = Math.min(min, end - start);\n      total -= nums[start];\n  \
    \    start++;\n    }\n    // current total less than required total but we reach\
    \ the end, need this or else we'll be in an infinite loop\n    else {\n      break;\n\
    \    }\n  }\n\n  return min;\n}\n\nminSubArraySum([2, 3, 4, 1, 2, 4]);\nminSubArraySum([-1,\
    \ -2, -3]);", "  let minSum = nums[0];\n  let currentSum = 0;\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum <\
    \ minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n  \
    \    currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (sum < 0) {\n\
    \      sum = 0;\n    }\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n\
    \  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let currSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum\
    \ < minSum) {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n\nexport { minSubArraySum };", "    let\
    \ currSum = nums[0];\n    let minSum = nums[0];\n    for (let i = 1; i < nums.length;\
    \ i++) {\n        currSum = Math.min(nums[i], currSum + nums[i]);\n        minSum\
    \ = Math.min(minSum, currSum);\n    }\n    return minSum;\n}\n", "    let minSum\
    \ = nums[0];\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n\
    \        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n \
    \   return minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n  let currSum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= minSum)\
    \ continue;\n    currSum = nums[i];\n    minSum = Math.min(minSum, currSum);\n\
    \    for (let j = i + 1; j < nums.length; j++) {\n      currSum += nums[j];\n\
    \      minSum = Math.min(minSum, currSum);\n    }\n  }\n  return minSum;\n}\n",
  "  let minSum = nums[0];\n  let tempSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    tempSum = Math.min(tempSum + nums[i], nums[i]);\n    minSum = Math.min(minSum,\
    \ tempSum);\n  }\n  return minSum;\n}", "    let minSum = Infinity;\n    let sum\
    \ = 0;\n    let left = 0;\n    for (let i = 0; i < nums.length; i++) {\n     \
    \   sum += nums[i];\n        while (sum >= minSum) {\n            minSum = Math.min(minSum,\
    \ sum);\n            sum -= nums[left];\n            left++;\n        }\n    }\n\
    \    return minSum;\n}", "  let min = nums[0]\n  let sum = 0\n  for (let num of\
    \ nums) {\n    sum += num\n    if (sum < min) {\n      min = sum\n    }\n    if\
    \ (sum > 0) {\n      sum = 0\n    }\n  }\n  return min\n}\n", "  let minSum =\
    \ Infinity;\n  let start = 0;\n  let end = 0;\n  let currentSum = 0;\n\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    end++;\n\
    \n    while (currentSum >= minSum) {\n      minSum = Math.min(minSum, currentSum);\n\
    \      currentSum -= nums[start];\n      start++;\n    }\n  }\n\n  return minSum;\n\
    }\n\nminSubArraySum([2, 3, 4, 1, 2, 4]);", "  let result = Infinity;\n  let currSum\
    \ = 0;\n  let startIdx = 0;\n  for (let endIdx = 0; endIdx < nums.length; endIdx++)\
    \ {\n    currSum += nums[endIdx];\n    while (currSum >= 0) {\n      result =\
    \ Math.min(result, currSum);\n      currSum -= nums[startIdx];\n      startIdx++;\n\
    \    }\n  }\n  return result;\n}\n", "  let currentSum = 0;\n  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currentMinSum = 0;\n  let currentIndex = 0;\n  while (currentIndex < nums.length)\
    \ {\n    currentSum += nums[currentIndex];\n    if (currentSum < minSum) {\n \
    \     minSum = currentSum;\n    }\n    if (currentSum < currentMinSum) {\n   \
    \   currentMinSum = currentSum;\n    }\n    currentIndex++;\n  }\n  return minSum\
    \ - currentMinSum;\n}\n", "  let min = Infinity;\n  let sum = 0;\n  for (let i\
    \ = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n  \
    \    min = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ min;\n}\n", "  let minSum = Infinity;\n  let start = 0;\n  let end = 0;\n  let\
    \ sum = 0;\n  while (start < nums.length) {\n    if (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    } else {\n      sum -= nums[start];\n\
    \      start++;\n    }\n    if (sum < minSum) {\n      minSum = sum;\n    }\n\
    \  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let currentSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if\
    \ (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n", "    let\
    \ sum = Infinity;\n    let curr = 0;\n    for (let num of nums) {\n        curr\
    \ += num;\n        if (curr < sum) {\n            sum = curr;\n        }\n   \
    \     if (curr > 0) {\n            curr = 0;\n        }\n    }\n    return sum;\n\
    }\n", "  let min = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    currentSum\
    \ += nums[i];\n    if (currentSum < min) {\n      min = currentSum;\n    }\n \
    \   for (let j = i + 1; j < nums.length; j++) {\n      currentSum += nums[j];\n\
    \      if (currentSum < min) {\n        min = currentSum;\n      }\n    }\n  \
    \  currentSum = 0;\n  }\n  return min;\n}\n\nexport default minSubArraySum;",
  "    let minimumSum = Infinity;\n    let sum = 0;\n    let left = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        while (sum\
    \ >= 0) {\n            minimumSum = Math.min(minimumSum, sum);\n            sum\
    \ -= nums[left];\n            left++;\n        }\n    }\n    return minimumSum;\n\
    }\n", "  if (nums.length === 0) return 0;\n  let answer = nums[0];\n  let start\
    \ = 0;\n  let end = 0;\n  let sum = 0;\n  while (end < nums.length) {\n    sum\
    \ += nums[end];\n    while (sum >= 0) {\n      answer = Math.min(answer, sum);\n\
    \      sum -= nums[start];\n      start++;\n    }\n    end++;\n  }\n  return answer;\n\
    }\n", "  let curSum = 0;\n  let result = Infinity;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    curSum += nums[i];\n    result = Math.min(result, curSum);\n   \
    \ if (curSum > 0) {\n      curSum = 0;\n    }\n  }\n  return result;\n}\n", " \
    \ let minSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n", "  if (nums.length\
    \ == 0) return -1;\n  let minSum = nums[0];\n  let currSum = nums[0];\n  for (let\
    \ i = 1; i < nums.length; i++) {\n    if (currSum > 0) {\n      currSum = nums[i];\n\
    \    } else {\n      currSum += nums[i];\n    }\n    minSum = Math.min(minSum,\
    \ currSum);\n  }\n  return minSum;\n}\n", "  let sum = 0;\n  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (sum < 0) {\n      sum = nums[i];\n\
    \    } else {\n      sum += nums[i];\n    }\n    minSum = Math.min(minSum, sum);\n\
    \  }\n  return minSum;\n}\n\nexport default minSubArraySum;", "    let minimumSum\
    \ = nums[0];\n    let lastSubArrSum = nums[0];\n    for (let i = 1; i < nums.length;\
    \ i++) {\n        lastSubArrSum = Math.min(lastSubArrSum + nums[i], nums[i]);\n\
    \        minimumSum = Math.min(minimumSum, lastSubArrSum);\n    }\n    return\
    \ minimumSum;\n}\n", "  let min: number = Number.MAX_SAFE_INTEGER;\n  let sum:\
    \ number = 0;\n  for (let i: number = 0; i < nums.length; i++) {\n    for (let\
    \ j: number = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum\
    \ < min) {\n        min = sum;\n      }\n    }\n    sum = 0;\n  }\n  return min;\n\
    }\n", "  let minSum = Infinity;\n  let sum = 0;\n  for (let num of nums) {\n \
    \   sum += num;\n    minSum = Math.min(minSum, sum);\n    if (sum < 0) sum = 0;\n\
    \  }\n  return minSum;\n}\n", "    let minSum = Number.MAX_SAFE_INTEGER;\n   \
    \ let currentSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currentSum\
    \ += nums[i];\n        if (currentSum < minSum) {\n            minSum = currentSum;\n\
    \        }\n        if (currentSum > 0) {\n            currentSum = 0;\n     \
    \   }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  // TODO\n  // YOUR CODE\
    \ HERE\n  return 0;\n}\n\nexport default minSubArraySum;", "    // loop through\
    \ the nums array starting at position 0\n    // keep track of the running sum\n\
    \    // if the sum is less than the current least sum, replace it\n    // if the\
    \ sum is less than 0, start over at the next index\n\n    // edge case: if array\
    \ is length 0, return 0\n    if (nums.length === 0) {\n        return 0;\n   \
    \ }\n\n    let leastSum = Number.MAX_SAFE_INTEGER;\n    let currentSum = 0;\n\n\
    \    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n\
    \        if (currentSum < leastSum) {\n            leastSum = currentSum;\n  \
    \      }\n        if (currentSum < 0) {\n            currentSum = 0;\n       \
    \ }\n    }\n\n    return leastSum;\n}\n\nexport default minSubArraySum;", "  let\
    \ minSum = Number.MAX_SAFE_INTEGER;\n  let currSum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n\
    \      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let sum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    minSum =\
    \ Math.min(minSum, sum);\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nexport default minSubArraySum;", "  let currentSum = 0;\n  let\
    \ minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum\
    \ += nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n  \
    \  }\n    if (currentSum > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n\
    }\n", "  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum)\
    \ {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let sum\
    \ = 0;\n  let start = 0;\n  let end = 0;\n  while (end < nums.length) {\n    while\
    \ (sum < 0 && start < end) {\n      sum -= nums[start];\n      start++;\n    }\n\
    \    sum += nums[end];\n    minSum = Math.min(minSum, sum);\n    end++;\n  }\n\
    \  return minSum;\n}\n", "    let min = 0,\n        start = 0,\n        end =\
    \ 0,\n        total = 0;\n    while (end < nums.length) {\n        while (total\
    \ >= min && start < end) {\n            total -= nums[start];\n            start++;\n\
    \        }\n        total += nums[end];\n        if (total < min || min === 0)\
    \ {\n            min = total;\n        }\n        end++;\n    }\n    return min;\n\
    }\n", "  let min = Infinity;\n  let sum = 0;\n  for (let num of nums) {\n    sum\
    \ += num;\n    min = Math.min(min, sum);\n    if (sum < 0) sum = 0;\n  }\n  return\
    \ min;\n}\n", "  if (nums.length === 0) return 0;\n  let minSum = Infinity;\n\
    \  let currSum = 0;\n  let start = 0;\n  let end = 0;\n  while (end < nums.length)\
    \ {\n    currSum += nums[end];\n    while (currSum >= 0) {\n      minSum = Math.min(minSum,\
    \ currSum);\n      currSum -= nums[start];\n      start++;\n    }\n    end++;\n\
    \  }\n  return minSum;\n}\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let\
    \ minSum = nums[0];\n  let currentSum = nums[0];\n  let startingIdx = 0;\n  let\
    \ endingIdx = 0;\n  for (let i = 1; i < nums.length; i++) {\n    currentSum +=\
    \ nums[i];\n    if (currentSum < minSum) {\n      minSum = currentSum;\n     \
    \ endingIdx = i;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n  \
    \    startingIdx = i + 1;\n    }\n  }\n  // console.log(nums.slice(startingIdx,\
    \ endingIdx + 1));\n  return minSum;\n}", "  let minSum = Infinity;\n  let currSum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currSum += nums[i];\n \
    \   if (currSum < minSum) {\n      minSum = currSum;\n    }\n    if (currSum >\
    \ 0) {\n      currSum = 0;\n    }\n  }\n  return minSum;\n}\n", "    let tempSum\
    \ = 0;\n    let minSum = nums[0];\n    for (let i = 0; i < nums.length; i++) {\n\
    \        tempSum += nums[i];\n        if (tempSum < minSum) {\n            minSum\
    \ = tempSum;\n        }\n        if (tempSum > 0) {\n            tempSum = 0;\n\
    \        }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3,\
    \ 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "    if (nums.length\
    \ < 1) {\n        return 0;\n    }\n    let minSum = nums[0];\n    let currSum\
    \ = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        const num =\
    \ nums[i];\n        currSum = Math.min(num, currSum + num);\n        minSum =\
    \ Math.min(minSum, currSum);\n    }\n    return minSum;\n}\n", "  let min: number\
    \ = Number.MAX_SAFE_INTEGER;\n  let sum: number = 0;\n  let left: number = 0;\n\
    \  let right: number = 0;\n  let arr: number[] = [];\n  while (left < nums.length)\
    \ {\n    if (sum >= 0) {\n      sum += nums[right];\n      right++;\n    } else\
    \ {\n      sum -= nums[left];\n      left++;\n    }\n    if (sum < min) {\n  \
    \    min = sum;\n      arr = nums.slice(left, right);\n    }\n  }\n  return min;\n\
    }\n\nexport default minSubArraySum;", "    // set the first index as the minSum\n\
    \    let minSum = nums[0];\n    // set the first index as the currentSum\n   \
    \ let currentSum = nums[0];\n    // iterate through the remaining array indices\n\
    \    for (let i = 1; i < nums.length; i++) {\n        // set the current sum to\
    \ the current value added to either the existing current sum, or 0\n        currentSum\
    \ = Math.min(currentSum + nums[i], nums[i]);\n        // if the current sum is\
    \ less than the current minSum, set the current sum as the new minSum\n      \
    \  if (currentSum < minSum) {\n            minSum = currentSum;\n        }\n \
    \   }\n    // return the minSum\n    return minSum;\n}\n", "  let res = Number.MAX_SAFE_INTEGER;\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \    res = Math.min(res, sum);\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n\
    \  return res;\n}\n", "    let res = nums[0];\n    let currSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currSum += nums[i];\n        res = Math.min(res,\
    \ currSum);\n        if (currSum > 0) {\n            currSum = 0;\n        }\n\
    \    }\n    return res;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));", "  let minSum = nums[0];\n  let sum\
    \ = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i],\
    \ sum + nums[i]);\n    minSum = Math.min(minSum, sum);\n  }\n  return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  // Create variables for the minimum sum and current sum, assign\
    \ current sum to\n  // the first number in the array\n  let minSum = nums[0];\n\
    \  let currSum = nums[0];\n  // Loop through the nums array\n  for (let i = 1;\
    \ i < nums.length; i++) {\n    // Find the minimum of the current sum and the\
    \ current number\n    currSum = Math.min(currSum + nums[i], nums[i]);\n    //\
    \ If the current sum is less than the minimum sum, set the minimum sum to\n  \
    \  // the current sum\n    if (currSum < minSum) {\n      minSum = currSum;\n\
    \    }\n  }\n  // Return the minimum sum\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6", " \
    \   // min sum and min idx, this is basically a greedy algo\n    let minSum =\
    \ nums[0];\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n  \
    \      if (sum < 0) {\n            sum = nums[i];\n        } else {\n        \
    \    sum += nums[i];\n        }\n        minSum = Math.min(minSum, sum);\n   \
    \ }\n    return minSum;\n}\n", "  let minSum = nums[0];\n  let currSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (currSum < 0) {\n      currSum\
    \ = 0;\n    }\n    currSum += nums[i];\n    minSum = Math.min(minSum, currSum);\n\
    \  }\n  return minSum;\n}\n", "  let minSum = Infinity;\n  let sum = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum,\
    \ sum);\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}",
  "  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n\nexport default minSubArraySum;", "  let min =\
    \ Infinity;\n  let total = 0;\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ total += nums[i];\n    if (total < min) {\n      min = total;\n    }\n    if\
    \ (total > 0) {\n      total = 0;\n    }\n  }\n  return min;\n}\n", "  let minSum\
    \ = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    for (let j = i; j < nums.length; j++) {\n      currentSum += nums[j];\n\
    \      if (currentSum < minSum) {\n        minSum = currentSum;\n      }\n   \
    \ }\n    currentSum = 0;\n  }\n  return minSum;\n}\n", "  // TODO: Implement\n\
    \  let min: number = nums[0];\n  let sum: number = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    sum += nums[i];\n\
    \  }\n  return sum - min;\n}\n", "  let minSum = Infinity;\n  let currSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum\
    \ < minSum) {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum\
    \ = 0;\n    }\n  }\n  return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  let minSum = Number.MAX_SAFE_INTEGER;\n\
    \  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let\
    \ j = i; j < nums.length; j++) {\n      currentSum += nums[j];\n      if (currentSum\
    \ < minSum) {\n        minSum = currentSum;\n      }\n    }\n    currentSum =\
    \ 0;\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));", "    let sum = 0;\n    let min =\
    \ Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    sum += nums[i];\n        if (sum < min) {\n            min = sum;\n     \
    \   }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n    return\
    \ min;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));", "  let result = Infinity;\n  let sum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    sum += nums[i];\n    if (sum < result) {\n      result\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return result;\n\
    }\n", "    let minSum = nums[0];\n    let currSum = 0;\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        currSum += nums[i];\n        if (currSum < minSum)\
    \ {\n            minSum = currSum;\n        }\n        if (currSum > 0) {\n  \
    \          currSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));", "  if (nums.length\
    \ === 0) return 0;\n  let min = nums[0];\n  let current = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    current += nums[i];\n    if (current < min) min\
    \ = current;\n    if (current > 0) current = 0;\n  }\n  return min;\n}\n\nexport\
    \ default minSubArraySum;", "  let minSum = nums[0];\n  let sum = nums[0];\n \
    \ for (let i = 1; i < nums.length; i++) {\n    sum = Math.min(nums[i], sum + nums[i]);\n\
    \    minSum = Math.min(minSum, sum);\n  }\n  return minSum;\n}\n", "    let minSum\
    \ = nums[0];\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n\
    \        sum += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n\
    \        }\n        if (sum > 0) {\n            sum = 0;\n        }\n    }\n \
    \   return minSum;\n}\n", "  let total = 0;\n  let minSum = Infinity;\n  let curSum\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    total += nums[i];\n   \
    \ curSum += nums[i];\n    if (curSum < minSum) {\n      minSum = curSum;\n   \
    \ }\n    if (curSum > 0) {\n      curSum = 0;\n    }\n  }\n  return total > 0\
    \ ? minSum : total;\n}\n", "  if (nums.length === 0) return 0;\n  let minSum =\
    \ Infinity;\n  let currentSum = 0;\n  for (let num of nums) {\n    currentSum\
    \ += num;\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum < 0)\
    \ currentSum = 0;\n  }\n  return minSum;\n}\n\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4]);", "    let result = nums[0];\n    let tempSum = nums[0];\n    let i = 1;\n\
    \    while (i < nums.length) {\n        tempSum = Math.min(tempSum + nums[i],\
    \ nums[i]);\n        result = Math.min(result, tempSum);\n        i++;\n    }\n\
    \    return result;\n}\n\n(function UnitTest() {\n    const test = require(\"\
    ./common/test\");\n\n    test(minSubArraySum([2, 3, 4, 1, 2, 4]), 1);\n    test(minSubArraySum([-1,\
    \ -2, -3]), -6);\n})();", "  let sum = 0;\n  let minimumSum = Infinity;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minimumSum)\
    \ {\n      minimumSum = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n\
    \  }\n  return minimumSum;\n}\n", "    let minSum = Infinity;\n    let currentSum\
    \ = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n\
    \        if (currentSum < minSum) {\n            minSum = currentSum;\n      \
    \  }\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n\
    \    }\n    return minSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
