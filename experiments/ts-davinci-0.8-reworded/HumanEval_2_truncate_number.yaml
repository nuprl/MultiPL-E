name: HumanEval_2_truncate_number
language: ts
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["    return number % 1;\n}\n", "  return number - Math.floor(number);\n\
    }\n", "  // TODO: implement this\n  return null;\n}\n", "  return Math.trunc(number);\n\
    }\n", "  const int = Math.floor(number);\n  return number - int;\n}\n", "  return\
    \ (number % 1);\n}\n", "    const [integer, decimals] = number.toString().split('.');\n\
    \    return parseFloat(`0.${decimals}`);\n}\n", "  return number > 0 ? number\
    \ % 1 : number - number % 1;\n}\n", "  return number % 1;\n}", "    if (number\
    \ < 0) {\n        throw new Error(\"Expecting a positive number but got \" + number);\n\
    \    }\n    let integer_part = Math.floor(number);\n    return number - integer_part;\n\
    }\n", "  return number - Math.floor(number);\n}\n", "    return number - Math.floor(number);\n\
    }\n\n", "    return number - Math.floor(number);\n}\n", "    return number - Math.floor(number);\n\
    }\n", "    const idx = number.toString().indexOf('.');\n    return parseFloat(number.toString().substring(idx\
    \ + 1));\n}\n", "  return number - Math.floor(number);\n}\n", "  return number\
    \ - Math.floor(number);\n}\n", "  return number % 1;\n}\n\n", "  // TODO: complete\
    \ implementation\n  let num = number.toString();\n  let n = num.split(\".\")[1];\n\
    \  if (n) {\n    return \"0.\" + n;\n  } else {\n    return \"0\";\n  }\n}\nconsole.log(truncate_number(3.5));\n",
  "  return Number(number.toString().split('.')[1]);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
