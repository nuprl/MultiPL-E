name: HumanEval_30_get_positive
language: ts
prompt: "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2,\
  \ 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0,\
  \ 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
  \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
completions: ["  return l.filter(x => x > 0);\n}\n", "    return l.filter(x => x >\
    \ 0);\n}\n", "    return l.filter(x => x > 0);\n}\n", "    let ret = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret.push(l[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}\n", "    let answer: number[] = []\n    for\
    \ (let n of l) {\n        if (n > 0) {\n            answer.push(n)\n        }\n\
    \    }\n    return answer\n}\n\nconsole.log(get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10]))\n\n", "  return l.filter(x => x > 0);\n}\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n", "    let ret: number[] = [];\n    l.forEach(function (element) {\n\
    \        if (element > 0) {\n            ret.push(element);\n        }\n    });\n\
    \    return ret;\n}\n", "  return l.filter(i => i > 0);\n}\n", "  return l.filter(e\
    \ => e > 0);\n}\n", "    return l.filter(function(i) { return i > 0 });\n}\n",
  "    let count: number = 0;\n    for (let i = 0; i < l.length; i++) {\n        if\
    \ (l[i] > 0) {\n            count += 1;\n        }\n    }\n    let array: number[]\
    \ = new Array(count);\n    count = 0;\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            array[count] = l[i];\n            count\
    \ += 1;\n        }\n    }\n    return array;\n}\n", "  let r = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      r.push(l[i]);\n    }\n\
    \  }\n  return r;\n}\n", "  return l.filter(n => n > 0);\n}\n", "    let positives:\
    \ number[] = []\n    for (let n of l) {\n        if (n > 0) {\n            positives.push(n)\n\
    \        }\n    }\n    return positives\n}\n", "  return l.filter(e => e > 0);\n\
    }\n", "  const filtered = l.filter(value => value > 0);\n  return filtered;\n\
    }\n", "    var newl: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n\
    \        if (l[i] > 0) {\n            newl.push(l[i]);\n        }\n    }\n   \
    \ return newl;\n}\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
