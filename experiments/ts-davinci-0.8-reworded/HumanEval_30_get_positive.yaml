name: HumanEval_30_get_positive
language: ts
prompt: "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2,\
  \ 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0,\
  \ 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
  \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
completions: ["  return l.filter(x => x > 0);\n}\n", "    return l.filter(x => x >\
    \ 0);\n}\n", "    return l.filter(x => x > 0);\n}\n", "    let ret = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret.push(l[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}\n", "    let answer: number[] = []\n    for\
    \ (let n of l) {\n        if (n > 0) {\n            answer.push(n)\n        }\n\
    \    }\n    return answer\n}\n\nconsole.log(get_positive([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10]))\n\n", "  return l.filter(x => x > 0);\n}\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n", "    let ret: number[] = [];\n    l.forEach(function (element) {\n\
    \        if (element > 0) {\n            ret.push(element);\n        }\n    });\n\
    \    return ret;\n}\n", "  return l.filter(i => i > 0);\n}\n", "  return l.filter(e\
    \ => e > 0);\n}\n", "    return l.filter(function(i) { return i > 0 });\n}\n",
  "    let count: number = 0;\n    for (let i = 0; i < l.length; i++) {\n        if\
    \ (l[i] > 0) {\n            count += 1;\n        }\n    }\n    let array: number[]\
    \ = new Array(count);\n    count = 0;\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            array[count] = l[i];\n            count\
    \ += 1;\n        }\n    }\n    return array;\n}\n", "  let r = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      r.push(l[i]);\n    }\n\
    \  }\n  return r;\n}\n", "  return l.filter(n => n > 0);\n}\n", "    let positives:\
    \ number[] = []\n    for (let n of l) {\n        if (n > 0) {\n            positives.push(n)\n\
    \        }\n    }\n    return positives\n}\n", "  return l.filter(e => e > 0);\n\
    }\n", "  const filtered = l.filter(value => value > 0);\n  return filtered;\n\
    }\n", "    var newl: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n\
    \        if (l[i] > 0) {\n            newl.push(l[i]);\n        }\n    }\n   \
    \ return newl;\n}\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}", "    let res: number[] = [];\n    for (let\
    \ i of l) {\n        if (i > 0) {\n            res.push(i);\n        }\n    }\n\
    \    return res;\n}", "    return l.filter(n => n > 0);\n}\n", "  return l.filter(num\
    \ => num > 0);\n}", "    return l.filter(function(item) {\n        return item\
    \ > 0;\n    });\n}\n", "  return l.filter(n => n > 0);\n}\n", "    return l.filter(num\
    \ => num > 0);\n}\n", "  return l.filter(e => e > 0);\n}\n", "  return l.filter(n\
    \ => n > 0);\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  return l.filter(n => n > 0);\n}\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(item\
    \ => item > 0);\n}\n", "    // Code goes here\n    return l.filter(x => x > 0);\n\
    }\n", "  let positives: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (l[i] > 0) {\n      positives.push(l[i]);\n    }\n  }\n  return positives;\n\
    }\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  return l.filter(x => x > 0);\n\
    }\n", "  let evens: number[] = [];\n  for (let number of l) {\n    if (number\
    \ > 0) {\n      evens.push(number);\n    }\n  }\n  return evens;\n}\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  return l.filter(x => x > 0);\n\
    }\n", "  let result: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n\
    }\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    let result: number[] = [];\n\
    \    l.forEach(function (elem: number) {\n        if (elem > 0) {\n          \
    \  result.push(elem);\n        }\n    });\n    return result;\n}\n", "    return\
    \ l.filter(function(num){\n        return num > 0;\n    });\n}\n", "    return\
    \ l.filter(x => x >= 0);\n}\n", "  const positives = l.filter(x => x > 0);\n \
    \ return positives;\n}\n", "    return l.filter(function(n) {\n        return\
    \ n > 0;\n    });\n}\n", "  return l.filter(function(value) {\n    return value\
    \ > 0;\n  });\n}", "  return l.filter(el => el > 0);\n}\n", "  return l.filter(function(n)\
    \ {\n    return n > 0;\n  });\n}\n", "    return l.filter(n => n > 0);\n}\n",
  "    return l.filter(x => x > 0);\n}\n", "    let result: number[] = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return l.filter(v => v > 0);\n\
    }\n", "    let result: number[] = [];\n    for (let i: number = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n\
    \    }\n    return result;\n}\n", "  let list = [];\n  for (let x = 0; x < l.length;\
    \ x++) {\n    if (l[x] > 0) {\n      list.push(l[x]);\n    }\n  }\n  return list;\n\
    }\n", "    return l.filter(val => val > 0);\n}\n", "    let result: number[] =\
    \ [];\n    for (let n of l) {\n        if (n > 0) {\n            result.push(n);\n\
    \        }\n    }\n    return result;\n}\n", "    return l.filter(n => n > 0);\n\
    }\n", "    let list: number[] = [];\n    for (let i of l) {\n        if (i > 0)\
    \ {\n            list.push(i);\n        }\n    }\n    return list;\n}\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  const filtered: number[] = l.filter(function(val)\
    \ {\n    return val > 0;\n  });\n  return filtered;\n}\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\n", "  let newList: number[] = [];\n  for (let i: number = 0;\
    \ i < l.length; i++) {\n    if (l[i] > 0) {\n      newList.push(l[i]);\n    }\n\
    \  }\n  return newList;\n}\n", "    return l.filter(x => x > 0);\n}\n", "  let\
    \ result: number[] = [];\n  for (let i of l) {\n    if (i > 0) {\n      result.push(i);\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\n\
    console.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  let\
    \ l1: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0)\
    \ {\n      l1.push(l[i]);\n    }\n  }\n  return l1;\n}\n", "  return l.filter(x\
    \ => x > 0);\n}\n", "    return l.filter(e => e > 0);\n}\n\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n", "    let ret = []\n    for (let i = 0; i < l.length; i++) {\n  \
    \      if (l[i] > 0) {\n            ret.push(l[i])\n        }\n    }\n    return\
    \ ret\n}\n", "    return [];\n}\n", "    return l.filter(function(i){\n      \
    \  return i > 0;\n    });\n}\n", "    var out: number[] = [];\n    for (var x\
    \ of l) {\n        if (x > 0) {\n            out.push(x);\n        }\n    }\n\
    \    return out;\n}\n", "    let res: number[] = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            res.push(l[i]);\n   \
    \     }\n    }\n    return res;\n}\n", "    return l.filter(x => x > 0);\n}\n",
  "  return l.filter(number => number > 0);\n}\n", "    var result = l.filter(function(x)\
    \ {\n        return x > 0;\n    });\n    return result;\n}\n", "    let result:\
    \ number[] = [];\n    l.forEach(function (x) {\n        if (x > 0) {\n       \
    \     result.push(x);\n        }\n    });\n    return result;\n}\n", "  return\
    \ l.filter(element => element > 0);\n}\n", "    return l.filter(x => x > 0);\n\
    }\n", "    let list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (l[i] > 0) {\n            list.push(l[i]);\n        }\n    }\n   \
    \ return list;\n}\n", "    return l.filter(e => e > 0);\n}", "    return l.filter(function(num)\
    \ {\n        return num > 0;\n    });\n}\n", "  let res: number[] = []\n  for\
    \ (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i])\n\
    \    }\n  }\n  return res\n}\n", "  //replace this for solution\n  return [];\n\
    }\n", "  // ... code here\n  return l.filter(function(x) { return x > 0; });\n\
    }\n", "  // FILL IN YOUR CODE HERE\n  return l.filter(e => e > 0);\n}\n", "  \
    \  return l.filter(x => x > 0);\n}\n", "  return l.filter(x => x > 0);\n}\n",
  "    return l.filter(value => value > 0);\n}\n", "  return l.filter(value => value\
    \ > 0);\n}\n", "    let c: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            c.push(l[i]);\n        }\n    }\n  \
    \  return c;\n}\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    return l.filter(x => x > 0);\n\
    }\n", "    return l.filter(n => n > 0);\n}\n", "    return l.filter(function(item)\
    \ {\n        return item > 0;\n    });\n}\n", "    return l.filter(e => e > 0);\n\
    }\n\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    return l.filter(x => x > 0);\n\
    }\n", "    return l.filter(n => n > 0);\n}\n", "  return l.filter(number => number\
    \ > 0);\n}\n", "    return l.filter(x => x > 0);\n}", "    return l.filter(function(n:\
    \ number) {\n        return n > 0;\n    });\n}\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n", "  return l.filter(item => item > 0);\n}\n", "  return l.filter(item\
    \ => item > 0);\n}\n", "    let output = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            output.push(l[i]);\n        }\n\
    \    }\n    return output;\n}\n", "  return l.filter(n => n > 0);\n}\n", "   \
    \ let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n",
  "    return l.filter(i => i > 0);\n}\n", "    return l.filter(function(num) { return\
    \ num > 0; });\n}\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(value\
    \ => value > 0);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return l.filter(x => x >= 0);\n\
    }", "    let ret: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n \
    \       if (l[i] > 0) {\n            ret.push(l[i]);\n        }\n    }\n    return\
    \ ret;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n\
    }\n", "    let output: number[] = [];\n    l.forEach(num => {\n        if (num\
    \ > 0) {\n            output.push(num);\n        }\n    });\n    return output;\n\
    }\n", "  let res: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n   \
    \ if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n}\n", " \
    \   var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i]\
    \ > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    //l.filter(x => x > 0);\n  \
    \  return l.filter(function (x) {\n        return x > 0;\n    });\n}\n", "  return\
    \ l.filter(x => x > 0);\n}\n", "    return [];\n}\n", "  return l.filter(n =>\
    \ n > 0);\n}\n", "    let output: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            output.push(l[i]);\n        }\n\
    \    }\n    return output;\n}\n", "  return l.filter(element => element > 0);\n\
    }\n", "  return l.filter(a => a > 0);\n}\n", "  return l.filter(x => x > 0);\n\
    }\n", "  return l.filter(function(num) {\n    return num > 0;\n  });\n}\n", " \
    \   return l.filter(n => n > 0);\n}\n", "    let newArray: number[] = [];\n  \
    \  for (let index = 0; index < l.length; index++) {\n        if (l[index] > 0)\
    \ {\n            newArray.push(l[index]);\n        }\n    }\n    return newArray;\n\
    }\n\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    return l.filter(i => i >= 0);\n\
    }\n", "    return l.filter(i => i >= 0);\n}\n", "    let out: number[] = [];\n\
    \    for (let i: number = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n \
    \           out.push(l[i]);\n        }\n    }\n    return out;\n}\n", "  const\
    \ res: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >\
    \ 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n}\n", "    let list:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            list.push(l[i]);\n        }\n    }\n    return list;\n}\n",
  "    return l.filter(function(v) { return v > 0; })\n}\n", "  return l.filter(x\
    \ => x > 0);\n}\n", "  return l.filter(x => x > 0);\n}", "  return l.filter(function(v:\
    \ number): boolean { return v > 0 });\n}\n", "    let xs: number[] = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            xs.push(l[i]);\n\
    \        }\n    }\n    return xs;\n}", "  let result: number[] = [];\n  for (let\
    \ i: number = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  // your code here\n  return l.filter(function(num){\n\
    \    return num > 0;\n  });\n}", "  return l.filter(function(num) {\n    return\
    \ num > 0;\n  });\n}\n", "    let positive = [];\n    l.forEach(element => {\n\
    \        if (element > 0) {\n            positive.push(element);\n        }\n\
    \    });\n    return positive;\n}", "  return l.filter(x => x > 0);\n}\n", " \
    \   return l.filter(function(n) {\n        return n > 0;\n    });\n}\n", "   \
    \ return l.filter(x => x > 0);\n}", "    let positives: number[] = [];\n    for\
    \ (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            positives.push(l[i]);\n\
    \        }\n    }\n    return positives;\n}\n", "    return l.filter(i => i >\
    \ 0);\n}\n", "  let res: number[] = [];\n  for (let i = 0; i < l.length; i++)\
    \ {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n}",
  "  return l.filter(function(n: number) {\n    return n > 0;\n  });\n}\n", "    return\
    \ l.filter(function(n) { return n > 0; });\n}\n", "    return l.filter(x => x\
    \ > 0);\n}\n", "    return l.filter(function(x) {\n        return x >= 0;\n  \
    \  });\n}\n", "    let p: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            p.push(l[i]);\n        }\n    }\n  \
    \  return p;\n}\n", "  return l.filter(function(item) {\n    return item > 0;\n\
    \  });\n}\n", "    return l.filter(element => element > 0);\n}\n", "    var a:\
    \ number[] = [];\n    var i: number;\n    for (i = 0; i < l.length; i++) {\n \
    \       if (l[i] > 0) {\n            a.push(l[i]);\n        }\n    }\n    return\
    \ a;\n}\n", "    return l.filter(x => x > 0);\n}\n", "  return l.filter(x => x\
    \ > 0);\n}", "    return l.filter(x => x > 0);\n}\n", "    var l_pos = l.filter(function(elem){\n\
    \        return elem >= 0;\n    });\n    return l_pos;\n}\n", "    let output:\
    \ number[] = []\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ 0) {\n            output.push(l[i])\n        }\n    }\n    return output\n}\n\
    console.log(get_positive([-1, 2, -4, 5, 6]))\nconsole.log(get_positive([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    return l.filter(function(num) { return\
    \ num > 0; });\n}\n", "  return l.filter(e => e > 0);\n}\n", "  return l.filter(i\
    \ => i > 0);\n}\n", "    return l.filter(e => e > 0);\n}\nconsole.log(get_positive([-1,\
    \ 2, -4, 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(n\
    \ => n > 0);\n}\n", "    return l.filter(v => v > 0);\n}\n", "  return l.filter(x\
    \ => x > 0);\n}\n", "  return l.filter(e => e > 0);\n}\n", "    return _.filter(l,\
    \ (x) => {\n        return x > 0;\n    });\n}\n", "    return filter(x => x >\
    \ 0, l);\n}\n", "    let n: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > 0) {\n            n.push(l[i]);\n        }\n    }\n\
    \    return n;\n}\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10]));\n", "  return l.filter(n => n > 0);\n}\n", "    return l.filter(is_positive);\n\
    }\n", "    return l.filter(n => n > 0);\n}\n", "  return l.filter(item => item\
    \ > 0);\n}\n", "  return l.filter(function(n: number): boolean {\n    return n\
    \ > 0;\n  });\n}\n", "    return l.filter(function(value){\n        return value\
    \ > 0;\n    });\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < l.length;\
    \ i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  return l.filter(n => n > 0);\n}\n", "    return l.filter(n\
    \ => n > 0);\n}\n", "  return l.filter(n => n > 0);\n}\n", "  return l.filter(number\
    \ => number > 0);\n}\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    return l.filter(e => e > 0);\n\
    }\n", "    return [];\n}\n", "    return l.filter(function(v) {\n        return\
    \ v > 0;\n    });\n}\n", "    let res: number[] = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            res.push(l[i]);\n   \
    \     }\n    }\n    return res;\n}\n", "  return l.filter(x => x > 0);\n}\n",
  "  const results: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if\
    \ (l[i] > 0) {\n      results.push(l[i]);\n    }\n  }\n  return results;\n}\n",
  "  return l.filter(function(num) {\n    return num > 0;\n  });\n}\n", "    return\
    \ l.filter(x => x > 0);\n}\n", "    var res: number[] = [];\n    for (var i =\
    \ 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            res.push(l[i]);\n\
    \        }\n    }\n    return res;\n}", "  return l.filter(function(num) { return\
    \ num > 0 });\n}\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(num\
    \ => num > 0);\n}\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "  return l.filter(is_positive);\n\
    }\n", "    return l.filter( (n) => n >= 0)\n}\n", "    var r: number[] = [];\n\
    \    for (var i=0; i<l.length; i++) {\n        if (l[i] > 0) {\n            r.push(l[i]);\n\
    \        }\n    }\n    return r;\n}\n", "  return l.filter(n => n > 0);\n}\n",
  "    return l.filter(e => e > 0);\n}\n", "  return l.filter(function(n) {\n    return\
    \ n > 0;\n  });\n}\n", "    return l.filter(element => element > 0);\n}\n", " \
    \   return l.filter(n => n > 0);\n}\n", "  // Add code here\n  const result =\
    \ [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n\
    \    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
