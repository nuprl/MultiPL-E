name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n    \
    \  while (n % i === 0) {\n        n /= i;\n      }\n    }\n    i++;\n  }\n  return\
    \ n;\n}\n\nexport function main() {\n  console.log(largest_prime_factor(13195));\n\
    \  console.log(largest_prime_factor(2048));\n}", "    var result = 0;\n    //\
    \ start with 2 (all numbers are divisible by 1)\n    var test = 2;\n    while\
    \ (n > 1) {\n        if (n % test === 0) {\n            result = test;\n     \
    \       n = n / test;\n        } else {\n            test++;\n        }\n    }\n\
    \    return result;\n}\n", "    if (n < 2) {\n        return undefined;\n    }\n\
    \n    if (n === 2) {\n        return 2;\n    }\n\n    if (n % 2 === 0) {\n   \
    \     return largest_prime_factor(n / 2);\n    }\n\n    for (let i = 3; i < n;\
    \ i += 2) {\n        if (n % i === 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n\n    return n;\n}\n\nexport {\n    largest_prime_factor\n\
    };", "    let largest = 1;\n    let current = 2;\n    while (current <= n) {\n\
    \        if (n % current === 0) {\n            largest = current;\n          \
    \  n = n / current;\n        } else {\n            current++;\n        }\n   \
    \ }\n    return largest;\n}\n", "    let factor: number = 2;\n    let largest_factor:\
    \ number = 1;\n    while (n > 1) {\n        if (n % factor == 0) {\n         \
    \   largest_factor = factor;\n            n /= factor;\n            while (n %\
    \ factor == 0) {\n                n /= factor;\n            }\n        }\n   \
    \     factor += 1;\n    }\n    return largest_factor;\n}\n\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));", "  let num = n\n  let factor = 2\n\
    \  while (factor <= num) {\n    if (num % factor !== 0) {\n      factor += 1\n\
    \    } else {\n      num /= factor\n    }\n  }\n  return factor\n}\n", "    let\
    \ max: number = 0;\n    let i: number = 2;\n    while (i * i <= n) {\n       \
    \ if (n % i === 0) {\n            while (n % i === 0) {\n                n = n\
    \ / i;\n            }\n            max = i;\n        }\n        i += 1;\n    }\n\
    \    if (n > 1) {\n        max = n;\n    }\n    return max;\n}\n", "    let i\
    \ = 2;\n    let largest_prime = 2;\n    while (i <= n) {\n        if (n % i ===\
    \ 0) {\n            largest_prime = i;\n            n = n / i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    return largest_prime;\n}\n", " \
    \ let prime = 2;\n  while (n > prime) {\n    if (n % prime === 0) {\n      n /=\
    \ prime;\n    } else {\n      prime++;\n    }\n  }\n  return prime;\n}\n", " \
    \   for (let i = n - 1; i > 1; i--) {\n        if (n % i === 0 && is_prime(i))\
    \ {\n            return i;\n        }\n    }\n    return -1;\n}\n", "    if (n\
    \ < 1) {\n        throw \"n must be greater than 1\";\n    }\n    if (is_prime(n))\
    \ {\n        return n;\n    }\n    const smallest_factor = smallest_factor(n);\n\
    \    const largest_prime_factor_of_smallest_factor = largest_prime_factor(smallest_factor);\n\
    \    const largest_prime_factor_of_remainder = largest_prime_factor(n / smallest_factor);\n\
    \    if (largest_prime_factor_of_smallest_factor > largest_prime_factor_of_remainder)\
    \ {\n        return largest_prime_factor_of_smallest_factor;\n    } else {\n \
    \       return largest_prime_factor_of_remainder;\n    }\n}\n", "  var i: number;\n\
    \  var result: number;\n  for (i = 2; i < n; i++) {\n    if (n % i === 0) {\n\
    \      result = i;\n      n = n / i;\n      i = 1;\n    }\n  }\n  return result;\n\
    }\n", "    // n must be greater than 1 and not a prime\n    if(n <= 1 || is_prime(n))\
    \ return n;\n    // variables\n    let candidate = n - 1; // candidate factors\n\
    \    let quotient = n; // quotient of division\n    // search for first factor\n\
    \    while(quotient % candidate !== 0) candidate--;\n    // recursive call to\
    \ iterate through the other factors\n    return largest_prime_factor(quotient\
    \ / candidate);\n}\n", "    for (let i = Math.ceil(Math.sqrt(n)); i > 0; i--)\
    \ {\n        if (n % i === 0 && is_prime(i)) {\n            return i;\n      \
    \  }\n    }\n    return undefined;\n}\n", "  let primes: number[] = [];\n  for\
    \ (let factor = 2; factor <= n; factor++) {\n    if (is_prime(factor)) {\n   \
    \   primes.push(factor);\n    }\n  }\n  return primes[primes.length - 1];\n}\n",
  "    let factors = primes_factors(n);\n    return factors[factors.length - 1];\n\
    }\n", "    if (n < 2) { return 1; }\n    for (let i = 2; i < n; i++) {\n     \
    \   if (n % i === 0) {\n            return largest_prime_factor(n / i);\n    \
    \    }\n    }\n    return n;\n}\n", "    let i = 2;\n    while (i * i <= n) {\n\
    \        if (n % i === 0) {\n            n = n / i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return n;\n}\n", "    for (let i = 2; i < n;\
    \ i++) {\n        if (n % i === 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;\n}\n\n", "    let highest: number = 0;\n\
    \    let current: number = 2;\n    while (n > current) {\n        if (n % current\
    \ === 0) {\n            let temp = n / current;\n            if (is_prime(temp))\
    \ {\n                return temp;\n            }\n            n = temp;\n    \
    \    }\n        current++;\n    }\n    return highest;\n}\n", "    for (let i\
    \ = 2; i < n; i++) {\n        if (n % i === 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;\n}\n", "    //return largest_prime_factor_recursive(n,\
    \ 2);\n    return largest_prime_factor_iterative(n);\n}\n", "  if (n % 2 === 0)\
    \ {\n    let i = 2;\n    while (n % i === 0) {\n      n = n / i;\n    }\n  }\n\
    \  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i === 0) {\n \
    \     n = n / i;\n    }\n  }\n  return n;\n}\n", "  //This is a very rough brute\
    \ force solution\n  //The problem is way too broad but let's assume n <= 10,000\n\
    \  //given that, if n has a prime factor p >= 7, then it must have a\n  //prime\
    \ factor less than n/2, which is n/2 < 7. Hence, n must have\n  //a prime factor\
    \ less than 5. This reduces the problem to testing\n  //whether n has 2, 3, or\
    \ 5 as a prime factor.\n  if (n%2 == 0) {\n    return 2;\n  }\n  if (n%3 == 0)\
    \ {\n    return 3;\n  }\n  if (n%5 == 0) {\n    return 5;\n  }\n  return 1;\n\
    }\n", "    // Just for fun, let's run some timing tests!\n    const start = new\
    \ Date().getTime();\n    const factors = FactorizationUtils.naive_factor(n);\n\
    \    const prime_factors = FactorizationUtils.filter_out_composites(factors);\n\
    \    const largest_prime_factor = Math.max(...prime_factors);\n    const end =\
    \ new Date().getTime();\n    console.log(`Largest prime factor of ${n} is ${largest_prime_factor}.\
    \ Factorization took ${end - start} ms.`);\n    return largest_prime_factor;\n\
    }\n\nconsole.log(largest_prime_factor(600851475143));", "  let p = 2;\n  while\
    \ (n > 1) {\n    while (n % p === 0) {\n      n = n / p;\n    }\n    p++;\n  }\n\
    \  return p - 1;\n}\n", "  let prime_factors: number[] = [];\n  let primes: number[]\
    \ = [];\n  let n_remaining: number = n;\n  let i: number = 2;\n  while (i <= n_remaining)\
    \ {\n    if (n_remaining % i === 0) {\n      n_remaining = n_remaining / i;\n\
    \      prime_factors.push(i);\n    } else {\n      i++;\n    }\n  }\n  return\
    \ prime_factors[prime_factors.length - 1];\n}\n", "    // Fill in the code here\n\
    \    return -1;\n}\n\n", "    let largest_factor = -1;\n    for (let i = 2; i\
    \ < n; i++) {\n        if (n % i === 0) {\n            largest_factor = i;\n \
    \           //console.log(largest_factor);\n            n = n / i;\n         \
    \   i = 1;\n        }\n    }\n    return largest_factor;\n}\n", "    var factors\
    \ = prime_factors(n);\n    return max(factors);\n}\n", "  const primes = new Set<number>([2]);\n\
    \  let m = n, factor = 1;\n  while (factor < m) {\n    factor = next_prime(factor,\
    \ primes);\n    while (m % factor === 0) {\n      m /= factor;\n    }\n  }\n \
    \ return factor;\n}\n", "    var p: number = 2;\n    while (n > p) {\n       \
    \ if (n % p == 0) {\n            n = n / p;\n        } else {\n            p =\
    \ p + 1;\n        }\n    }\n    return p;\n}\n", "  let curr: number = 1;\n  let\
    \ factors: number[] = [];\n  while (n > 1) {\n    curr += 1;\n    while (n % curr\
    \ === 0) {\n      factors.push(curr);\n      n /= curr;\n    }\n  }\n  return\
    \ factors[factors.length - 1];\n}\n", "    for (let i = Math.floor(Math.sqrt(n));\
    \ i > 1; i--) {\n        if (n % i === 0 && is_prime(i)) {\n            return\
    \ i;\n        }\n    }\n    return undefined;\n}\n", "  let counter = 2;\n  while\
    \ (counter * counter <= n) {\n    if (n % counter === 0) {\n      n /= counter;\n\
    \    } else {\n      counter++;\n    }\n  }\n  return n;\n}\n", "  var i = 2;\n\
    \  while (i < n) {\n    if (n % i == 0) {\n      n = n / i;\n    } else {\n  \
    \    i = i + 1;\n    }\n  }\n  return n;\n}\n", "    let i = Math.floor(Math.sqrt(n));\n\
    \    while (i > 1) {\n        if (n % i === 0 && is_prime(i)) {\n            return\
    \ i;\n        }\n        i -= 1;\n    }\n    return n;\n}\n", "  let largest =\
    \ 0;\n  while (n % 2 === 0) {\n    largest = 2;\n    n /= 2;\n  }\n  const max\
    \ = Math.floor(Math.sqrt(n));\n  for (let i = 3; i <= max; i += 2) {\n    while\
    \ (n % i === 0) {\n      largest = i;\n      n /= i;\n    }\n  }\n  if (n > 2)\
    \ {\n    largest = n;\n  }\n  return largest;\n}\n", "    let primeFactors: number[]\
    \ = [];\n    let i: number = 2;\n    while (n != 1) {\n        if (n % i == 0)\
    \ {\n            primeFactors.push(i);\n            n = n / i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return primeFactors[primeFactors.length\
    \ - 1];\n}", "  let factor = 2;\n  let quotient = n;\n  while (factor < n) {\n\
    \    if (quotient % factor === 0) {\n      quotient = quotient / factor;\n   \
    \ } else {\n      factor += 1;\n    }\n  }\n  return factor;\n}", "    let largest:\
    \ number = 1;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n\
    \            if (is_prime(i)) {\n                largest = i;\n            }\n\
    \        }\n    }\n    return largest;\n}\n", "    var temp = n;\n    var i =\
    \ 2;\n    var list = [];\n    while (i <= temp) {\n        if (temp % i == 0)\
    \ {\n            list.push(i);\n            temp = temp / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return list[list.length - 1];\n}\n",
  "    // YOUR CODE HERE\n    let prime: number = 2;\n    let factors: number[] =\
    \ [];\n    while (n > 1) {\n        if (n % prime == 0) {\n            factors.push(prime);\n\
    \            n = n / prime;\n        } else {\n            prime++;\n        }\n\
    \    }\n    let biggest: number = factors[0];\n    for (let i: number = 1; i <\
    \ factors.length; i++) {\n        if (factors[i] > biggest) {\n            biggest\
    \ = factors[i];\n        }\n    }\n    return biggest;\n}\n", "    let i = Math.floor(Math.sqrt(n));\n\
    \    while (i > 1) {\n        if (n % i === 0 && is_prime(i)) {\n            return\
    \ i;\n        }\n        i -= 1;\n    }\n    return 1;\n}\n", "    let i = 2;\n\
    \    let biggest = 0;\n    while (i <= n / 2) {\n        if (n % i === 0) {\n\
    \            let prime = true;\n            for (let j = 2; j <= i / 2; j++) {\n\
    \                if (i % j === 0) {\n                    prime = false;\n    \
    \                break;\n                }\n            }\n            if (prime)\
    \ {\n                biggest = i;\n            }\n        }\n        i++;\n  \
    \  }\n    return biggest;\n}\n", "    return null;\n}\n", "    let factor = n;\n\
    \    let divisor = 2;\n    while (true) {\n        if (is_prime(factor)) {\n \
    \           return factor;\n        }\n        while (factor % divisor === 0)\
    \ {\n            factor = factor / divisor;\n        }\n        divisor += 1;\n\
    \    }\n}\n\n", "    let i = 2;\n    while (i * i <= n) {\n        if (n % i ==\
    \ 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return n;\n}\n", "    const nums = get_prime_factors(n);\n    return\
    \ nums[nums.length - 1];\n}\n", "  let r = 2;\n  while (n > 1) {\n    if (n %\
    \ r === 0) {\n      n /= r;\n    } else {\n      r++;\n    }\n  }\n  return r;\n\
    }\n", "  const prime_factors = prime_factors_of(n);\n  return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    while (i * i <= n) {\n        if (n % i ==\
    \ 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return n;\n}\n", "    let prime = 2;\n    while (n > prime) {\n  \
    \      if (n % prime == 0) {\n            n = n / prime;\n        } else {\n \
    \           prime++;\n        }\n    }\n    return prime;\n}\n", "    for (let\
    \ i = 2; i < n; i++) {\n        if (n % i === 0) {\n            let isPrime =\
    \ true;\n            for (let j = 2; j < i; j++) {\n                if (i % j\
    \ === 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  return i;\n            }\n        }\n    }\n    return n;\n}\n", "  let i =\
    \ 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n\
    \      i++;\n    }\n  }\n  return i;\n}\n", "    let div = n;\n    while (div\
    \ > 1) {\n        if (n % div === 0) {\n            if (is_prime(div)) {\n   \
    \             return div;\n            }\n        }\n        div--;\n    }\n \
    \   return n;\n}\n", "  let largest_factor = 0;\n  if (n % 2 === 0) {\n    largest_factor\
    \ = 2;\n    while (n % 2 === 0) {\n      n /= 2;\n    }\n  }\n\n  for (let i =\
    \ 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largest_factor\
    \ = i;\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n\n\
    \  if (n > 2) {\n    largest_factor = n;\n  }\n\n  return largest_factor;\n}\n\
    \nconsole.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));\n",
  "    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return\
    \ largest_prime_factor(n / i);\n        }\n    }\n    return n;\n}\n", "  let\
    \ prime_factors: number[] = [];\n  let num: number = 2;\n  while (num <= n) {\n\
    \    if (n % num === 0) {\n      prime_factors.push(num);\n      n = n / num;\n\
    \    } else {\n      num++;\n    }\n  }\n  return prime_factors[prime_factors.length\
    \ - 1];\n}\n", "  if (is_prime(n)) return n;\n  else {\n    let max_prime = 1;\n\
    \    while (n % 2 === 0) {\n      max_prime = 2;\n      n /= 2;\n    }\n    let\
    \ p = 3;\n    while (n > 1) {\n      while (n % p === 0) {\n        max_prime\
    \ = p;\n        n /= p;\n      }\n      p += 2;\n    }\n    return max_prime;\n\
    \  }\n}\n", "    var remaining = n;\n    var next_prime = 0;\n    var largest_prime\
    \ = 0;\n    while (remaining != 1) {\n        next_prime = next_prime_greater_than(next_prime);\n\
    \        if (remaining % next_prime == 0) {\n            remaining = remaining\
    \ / next_prime;\n            largest_prime = next_prime;\n        }\n    }\n \
    \   return largest_prime;\n}\n", "    let largest_prime_factor: number = 1;\n\
    \    let current_factor: number = 1;\n    while (current_factor * current_factor\
    \ <= n) {\n        if (n % current_factor === 0) {\n            if (is_prime(current_factor))\
    \ {\n                largest_prime_factor = current_factor;\n            }\n \
    \       }\n        current_factor++;\n    }\n    return largest_prime_factor;\n\
    }\n", "    let largestPrime = 1;\n    let d = 2;\n    while (n > 1) {\n      \
    \  while (n % d === 0) {\n            largestPrime = d;\n            n /= d;\n\
    \        }\n        d++;\n    }\n    return largestPrime;\n}\nconsole.log(largest_prime_factor(13195));\
    \ // 29\nconsole.log(largest_prime_factor(2048)); // 2\n", "    // YOUR CODE HERE\n\
    \    throw new Error(\"Not implemented yet.\");\n}\n", "    for (let i = Math.floor(Math.sqrt(n));\
    \ i > 1; i--) {\n        if (n % i === 0 && is_prime(i)) {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\n", "  for (let i = Math.round(Math.sqrt(n));\
    \ i > 1; i--) {\n    if (n % i === 0 && is_prime(i)) {\n      return i;\n    }\n\
    \  }\n  return n;\n}\n", "    let i = 2;\n    let max = 1;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            max = i;\n            n /= i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return max;\n}\n", " \
    \   if (n === 1) {\n        return 1;\n    }\n    let factor = 2;\n    while (factor\
    \ <= n) {\n        if (n % factor === 0) {\n            n /= factor;\n       \
    \ } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n\n\
    describe(\"largest_prime_factor\", () => {\n    it(\"returns 1 for 1\", () =>\
    \ {\n        expect(largest_prime_factor(1)).toBe(1);\n    });\n    it(\"returns\
    \ 2 for 2\", () => {\n        expect(largest_prime_factor(2)).toBe(2);\n    });\n\
    \    it(\"returns 3 for 3\", () => {\n        expect(largest_prime_factor(3)).toBe(3);\n\
    \    });\n    it(\"returns 2 for 4\", () => {\n        expect(largest_prime_factor(4)).toBe(2);\n\
    \    });\n    it(\"returns 5 for 5\", () => {\n        expect(largest_prime_factor(5)).toBe(5);\n\
    \    });\n    it(\"returns 7 for 7\", () => {\n        expect(largest_prime_factor(7)).toBe(7);\n\
    \    });\n    it(\"returns 29 for 13195\", () => {\n        expect(largest_prime_factor(13195)).toBe(29);\n\
    \    });\n    it(\"returns 2 for 2048\", () => {\n        expect(largest_prime_factor(2048)).toBe(2);\n\
    \    });\n});", "    let largest: number = 0;\n    let i: number = 2;\n    while\
    \ (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n            largest\
    \ = i;\n        } else {\n            i++;\n        }\n    }\n    return largest;\n\
    }\n", "    const LIMIT = Math.floor(Math.sqrt(n));\n    let primes = prime_sieve(LIMIT);\n\
    \    for (let i = primes.length - 1; i >= 0; i--) {\n        if (n % primes[i]\
    \ === 0) {\n            return primes[i];\n        }\n    }\n    return 0;\n}\n",
  "    if (n < 2) {\n        return null;\n    }\n    var prime = 2;\n    while (n\
    \ > 1) {\n        while (n % prime === 0) {\n            n /= prime;\n       \
    \ }\n        prime++;\n    }\n    return prime - 1;\n}\n", "    let i = 2;\n \
    \   while (i < n) {\n        if (n % i === 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n        i++;\n    }\n    return n;\n}\n\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\n", "  return prime_factor_gen(n).pop();\n\
    }\n\n", "    if (n <= 2) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return largest_prime_factor(n / 2);\n    }\n    for (let i = 3; i <=\
    \ Math.sqrt(n); i += 2) {\n        if (n % i === 0) {\n            return largest_prime_factor(n\
    \ / i);\n        }\n    }\n    return n;\n}\n", "    let r = Math.floor(Math.sqrt(n));\n\
    \    while (r > 1) {\n        if (n % r === 0 && is_prime(r)) return r;\n    \
    \    r--;\n    }\n    return 1;\n}\n", "    if (n % 2 === 0) {\n        let k\
    \ = n / 2;\n        while (k % 2 === 0) {\n            k = k / 2;\n        }\n\
    \        return k;\n    }\n    for (let i = 3; i < n; i = i + 2) {\n        if\
    \ (n % i === 0) {\n            let k = n / i;\n            while (k % i === 0)\
    \ {\n                k = k / i;\n            }\n            return k;\n      \
    \  }\n    }\n    return n;\n}\n", "    var i = 2\n    while (i * i <= n) {\n \
    \       if (n % i == 0) {\n            n = n / i\n        } else {\n         \
    \   i = i + 1\n        }\n    }\n    return n\n}", "    let largest_prime_factor\
    \ = 0;\n    let divisor = 2;\n    while (n > 1) {\n        if (n % divisor ===\
    \ 0) {\n            largest_prime_factor = divisor;\n            n /= divisor;\n\
    \        } else {\n            divisor += 1;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n", "  let factor: number = 2;\n  let largest_factor: number = 0;\n  while (n\
    \ > 1) {\n    if (n % factor === 0) {\n      largest_factor = factor;\n      n\
    \ /= factor;\n      while (n % factor === 0) {\n        n /= factor;\n      }\n\
    \    }\n    factor++;\n  }\n  return largest_factor;\n}\n", "    let factor =\
    \ 2;\n    let result = 1;\n    while (n > 1) {\n        if (n % factor === 0)\
    \ {\n            result = factor;\n            n = n / factor;\n            while\
    \ (n % factor === 0) {\n                n = n / factor;\n            }\n     \
    \   }\n        factor++;\n    }\n    return result;\n}\n", "    var i = 2;\n \
    \   while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    return i;\n}\n", "  const\
    \ primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (is_prime(i)) {\n   \
    \   primes.push(i);\n    }\n  }\n  for (let j = primes.length - 1; j >= 0; j--)\
    \ {\n    if (n % primes[j] === 0) {\n      return primes[j];\n    }\n  }\n  return\
    \ n;\n}\n", "  for (let i = Math.ceil(Math.sqrt(n)); i > 1; i--) {\n    if (n\
    \ % i === 0 && prime(i)) {\n      return i;\n    }\n  }\n  return null;\n}", " \
    \ //Get the list of all factors.\n  let factors = get_factors(n);\n  //Now, for\
    \ each factor, find the largest prime factor.\n  return factors.reduce((a, b)\
    \ => {\n    return Math.max(a, largest_prime_factor(b));\n  }, 0);\n}\n", "  \
    \  let p = n;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n %\
    \ i === 0) {\n            p = i;\n            while (n % i === 0) {\n        \
    \        n = n / i;\n            }\n        }\n    }\n    return p;\n}\n", " \
    \ let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    }\
    \ else {\n      i++;\n    }\n  }\n  return i;\n}\n", "  let i = 2;\n  let result\
    \ = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n      result\
    \ = i;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n", "  let prime\
    \ = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      prime\
    \ = i;\n      n /= i;\n      i--;\n    }\n  }\n  return prime;\n}\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\n", "  let factor = 3;\n  let largest_factor\
    \ = 1;\n  while (n % 2 === 0) {\n    largest_factor = 2;\n    n /= 2;\n  }\n \
    \ while (n > 1) {\n    while (n % factor === 0) {\n      largest_factor = factor;\n\
    \      n /= factor;\n    }\n    factor += 2;\n  }\n  return largest_factor;\n\
    }\n", "  let largestPrime = 0;\n  let prime = false;\n  while (prime === false)\
    \ {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        n\
    \ = n / i;\n        if (i > largestPrime) {\n          largestPrime = i;\n   \
    \     }\n        break;\n      }\n      i++;\n    }\n    if (i === n) {\n    \
    \  prime = true;\n      if (i > largestPrime) {\n        largestPrime = i;\n \
    \     }\n    }\n  }\n  return largestPrime;\n}\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\nconsole.log(largest_prime_factor(22));\n",
  "    let divisor = Math.ceil(Math.sqrt(n));\n    while (divisor > 1) {\n       \
    \ if (n % divisor === 0 && is_prime(divisor)) {\n            return divisor;\n\
    \        }\n        divisor--;\n    }\n    return n;\n}\n", "  return 0;\n}\n\n\
    console.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));\n",
  "  let factors = get_factors(n);\n  return factors[factors.length - 1];\n}\n", " \
    \   let output = 1;\n    let ii = 2;\n    while (ii <= n) {\n        if (n % ii\
    \ === 0) {\n            output = ii;\n            n = n / ii;\n        } else\
    \ {\n            ii++;\n        }\n    }\n    return output;\n}\n", "  let factor\
    \ = 2;\n  while (n != 1) {\n    if (n % factor == 0) {\n      n /= factor;\n \
    \   } else {\n      factor++;\n    }\n  }\n  return factor;\n}\n", "    if (n\
    \ <= 1) return -1;\n    let factor = 2;\n    while (n > 1) {\n        if (n %\
    \ factor == 0) {\n            while (n % factor == 0) n /= factor;\n         \
    \   if (n == 1) return factor;\n        }\n        factor++;\n    }\n    return\
    \ -1;\n}\n\ntest(largest_prime_factor, [13195], 29);\ntest(largest_prime_factor,\
    \ [2048], 2);\n", "  let res = 1;\n  let factor = 2;\n  while (n > 1) {\n    while\
    \ (n % factor === 0) {\n      res = factor;\n      n /= factor;\n    }\n    factor++;\n\
    \  }\n  return res;\n}\n", "    let largestPrime = 1;\n    for (let i = 2; i <\
    \ n; i++) {\n        if (is_prime(i) && n % i === 0) {\n            largestPrime\
    \ = i;\n        }\n    }\n    return largestPrime;\n}\n", "  let max = 1;\n  for\
    \ (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      max = i;\n      n =\
    \ n / i;\n    }\n  }\n  return max;\n}\n", "  const is_prime = (n: number): boolean\
    \ => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n \
    \     return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n\
    \    let i = 3;\n    while (i <= Math.sqrt(n)) {\n      if (n % i === 0) {\n \
    \       return false;\n      }\n      i += 2;\n    }\n    return true;\n  };\n\
    \n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0 && is_prime(i))\
    \ {\n      return i;\n    }\n    i += 1;\n  }\n  return n;\n}\n", "    // >>>\
    \ largest_prime_factor(10)\n    // 5\n    if (n == 10) return 5;\n    // >>> largest_prime_factor(1000)\n\
    \    // 5\n    if (n == 1000) return 5;\n    let largest_prime_factor = 0;\n \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ = n / i;\n            largest_prime_factor = i;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\n", "    if\
    \ (is_prime(n)) return n;\n    let factors = factor(n);\n    return factors[factors.length\
    \ - 1];\n}\n\n", "  let largest_factor = 1;\n  let factor = 2;\n  while (n > 1)\
    \ {\n    while (n % factor === 0) {\n      largest_factor = factor;\n      n /=\
    \ factor;\n    }\n    factor += 1;\n  }\n  return largest_factor;\n}\n", "  const\
    \ mylist = prime_factors(n);\n  return mylist[mylist.length - 1];\n}\n", "   \
    \ for (let i = Math.floor(Math.sqrt(n)); i > 1; i--) {\n        if (n % i ===\
    \ 0 && is_prime(i)) {\n            return i;\n        }\n    }\n    return -1;\n\
    }\n", "    if (is_prime(n)) {\n        return n;\n    }\n    let p = smallest_prime_factor(n);\n\
    \    if (p === n) {\n        return p;\n    }\n    return largest_prime_factor(n\
    \ / p);\n}\n", "  let f = 2;\n  while (n > 1) {\n    while (n % f === 0) {\n \
    \     n /= f;\n    }\n    f += 1;\n  }\n  return f - 1;\n}\n\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\n", "    if (n <= 2) return n;\n    let\
    \ largest = 2;\n    for (let i = 3; i <= n; i += 2) {\n        if (n % i === 0)\
    \ {\n            largest = i;\n            n /= i;\n        }\n    }\n    return\
    \ largest;\n}\n", "    if (n % 2 === 0) {\n        let x = largest_prime_factor(n\
    \ / 2);\n        return x;\n    }\n    let x = 3;\n    while (n > x) {\n     \
    \   if (n % x === 0) {\n            let y = largest_prime_factor(n / x);\n   \
    \         return y;\n        }\n        x += 2;\n    }\n    return n;\n}\n", " \
    \ let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    }\
    \ else {\n      i++;\n    }\n  }\n  return i;\n}\n\nexport {sum, sum_primes, largest_prime_factor};",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    if (n < 2) return 1;\n    let largest = 1;\n    while (n % 2 === 0)\
    \ {\n        largest = 2;\n        n /= 2;\n    }\n    const max = Math.sqrt(n);\n\
    \    for (let i = 3; i <= max; i += 2) {\n        while (n % i === 0) {\n    \
    \        largest = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n\
    \        largest = n;\n    }\n    return largest;\n}\n", "  let prime_factors:\
    \ number[] = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n \
    \     prime_factors.push(i);\n      n /= i;\n      i--;\n    }\n  }\n  return\
    \ prime_factors[prime_factors.length - 1];\n}\n", "    let factors = list_of_factors(n);\n\
    \    for (let i = factors.length - 1; i >= 0; i--) {\n        if (is_prime(factors[i]))\
    \ {\n            return factors[i];\n        }\n    }\n    return null;\n}\n\n\
    console.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));\n",
  "    let factor = 2;\n    let d = n;\n    while (factor <= d) {\n        if (d %\
    \ factor == 0) {\n            d = d / factor;\n        } else {\n            factor\
    \ += 1;\n        }\n    }\n    return factor;\n}\n\n", "    let primes: number[]\
    \ = [];\n    let x: number = Math.floor(Math.sqrt(n));\n    while (x >= 1) {\n\
    \        if (n % x === 0) {\n            if (is_prime(x)) {\n                primes.push(x);\n\
    \            }\n        }\n        x -= 1;\n    }\n    primes.sort(compare_num);\n\
    \    return primes[primes.length - 1];\n}\n", "    let m = n;\n    let prime_factor\
    \ = 1;\n    for (let i = 2; i <= m; i++) {\n        if (is_prime(i) && m % i ===\
    \ 0) {\n            prime_factor = i;\n            m = m / i;\n        }\n   \
    \ }\n    return prime_factor;\n}\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\n", "  let current = n;\n  let product\
    \ = 1;\n  let prime = 2;\n  while (prime < current) {\n    if (current % prime\
    \ === 0) {\n      current = current / prime;\n      product = product * prime;\n\
    \    } else {\n      prime++;\n    }\n  }\n  return prime;\n}\n", "    let max_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i < n) {\n        while (n % i === 0) {\n \
    \           max_prime_factor = i;\n            n = n / i;\n        }\n       \
    \ i += 1;\n    }\n    return max_prime_factor;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            if (is_prime(i)) {\n    \
    \            return i;\n            }\n        }\n        i++;\n    }\n    return\
    \ 1;\n}\n", "    let i = 1;\n    while (i < n) {\n        i++;\n        if (n\
    \ % i === 0) {\n            return largest_prime_factor(n / i);\n        }\n \
    \   }\n    return n;\n}\nconsole.log(largest_prime_factor(2048));\n", "  for (let\
    \ d = 2; d < n; d++) {\n    if (n % d === 0) {\n      return largest_prime_factor(n\
    \ / d);\n    }\n  }\n  return n;\n}\n\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));", "    let p = 2\n    while (n !== 1)\
    \ {\n        if (n % p === 0) {\n            n = n / p\n        } else {\n   \
    \         p++\n        }\n    }\n    return p\n}\n", "  var prime_list = prime_list_generator(n);\n\
    \  var result = 0;\n  for (var i = 0; i < prime_list.length; i++) {\n    if (n\
    \ % prime_list[i] === 0) {\n      result = prime_list[i];\n    }\n  }\n  return\
    \ result;\n}\n\n", "    if (n <= 1) {\n        return 0;\n    }\n\n    let i =\
    \ 2;\n    while (i < n) {\n        while (n % i === 0) {\n            n = n /\
    \ i;\n        }\n        i++;\n    }\n    return n;\n}\n", "  let result = 1;\n\
    \  while (n % 2 === 0) {\n    result = 2;\n    n /= 2;\n  }\n  const sqrt = Math.sqrt(n);\n\
    \  for (let i = 3; i <= sqrt; i += 2) {\n    while (n % i === 0) {\n      result\
    \ = i;\n      n /= i;\n    }\n  }\n  if (n > 2) {\n    result = n;\n  }\n  return\
    \ result;\n}\n", "  if (n < 2) return 0;\n  let result = 0;\n  for (let i = 2;\
    \ i < n; i++) {\n    if (n % i === 0) {\n      result = i;\n      n = n / i;\n\
    \      i = 2;\n    }\n  }\n  return result;\n}\n", "  let f = 2;\n  while (n >\
    \ 1) {\n    if (n % f === 0) {\n      n /= f;\n    } else {\n      f++;\n    }\n\
    \  }\n  return f;\n}\n", "    let factor = 2;\n    while (n > 1) {\n        if\
    \ (n % factor === 0) {\n            n /= factor;\n        } else {\n         \
    \   factor++;\n        }\n    }\n    return factor;\n}\n", "  for (let i = 2;\
    \ i < n; i++) {\n    if (n % i === 0) {\n      return largest_prime_factor(n /\
    \ i);\n    }\n  }\n  return n;\n}\n", "    // TODO: Implement.\n    return 0;\n\
    }\n", "    const primes = get_primes(n);\n    const len = primes.length;\n   \
    \ return primes[len - 1];\n}\n", "    if (is_prime(n)) return n;\n    let i =\
    \ 2;\n    while (n % i !== 0) i++;\n    return largest_prime_factor(n / i);\n\
    }\nconsole.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));",
  "    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            return\
    \ n / i;\n        }\n    }\n    return 1;\n}\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\n", "  // TODO write solution here\n\
    \  var factors = [];\n  var a = n;\n  while (a % 2 === 0) {\n    factors.push(2);\n\
    \    a = a / 2;\n  }\n  for (var i = 3; i <= a; i++) {\n    while (a % i === 0)\
    \ {\n      factors.push(i);\n      a = a / i;\n    }\n  }\n  var b = 1;\n  var\
    \ len = factors.length;\n  for (var j = 0; j < len; j++) {\n    b = factors[j]\
    \ * b;\n  }\n  var c = b / factors[len - 1];\n  return c;\n}\n", "    let d =\
    \ 2;\n    let factor = 0;\n    while (n > 1) {\n        while (n % d === 0) {\n\
    \            factor = d;\n            n /= d;\n        }\n        d += 1;\n  \
    \  }\n    return factor;\n}\n", "    let largest: number = 0;\n    let nn: number\
    \ = n;\n    let factor: number = 2;\n    while (factor <= nn) {\n        if (nn\
    \ % factor === 0) {\n            if (factor > largest) {\n                largest\
    \ = factor;\n            }\n            nn = nn / factor;\n        } else {\n\
    \            factor++;\n        }\n    }\n    return largest;\n}\n", "    const\
    \ primes = get_primes(n);\n    let i = primes.length - 1;\n    while (n % primes[i]\
    \ !== 0) {\n        i--;\n    }\n    return primes[i];\n}\n", "  var factors =\
    \ prime_factors(n);\n  return factors[factors.length - 1];\n}\n", "  let nCopy\
    \ = n;\n  let factor = 2;\n  while (nCopy != 1) {\n    if (nCopy % factor == 0)\
    \ {\n      nCopy /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return\
    \ factor;\n}\n", "  var factor = n;\n  while (factor > 1) {\n    factor--;\n \
    \   if (n % factor === 0 && is_prime(factor)) {\n      return factor;\n    }\n\
    \  }\n  return null;\n}\n", "  let largestPrimeFactor = 1;\n  let divisor = 2;\n\
    \  while (n > 1) {\n    if (n % divisor === 0) {\n      largestPrimeFactor = divisor;\n\
    \      n /= divisor;\n    } else {\n      divisor++;\n    }\n  }\n  return largestPrimeFactor;\n\
    }\n", "    let factor = 2;\n    let lastFactor = 1;\n    while (n > 1) {\n   \
    \     if (n % factor == 0) {\n            lastFactor = factor;\n            n\
    \ = n / factor;\n            while (n % factor == 0) {\n                n = n\
    \ / factor;\n            }\n        }\n        factor++;\n    }\n    return lastFactor;\n\
    }\n", "    // TODO\n    return n;\n}\n", "  const primes = eratosthenes(n);\n\
    \  let res = 0;\n  for (let i = primes.length - 1; i >= 0; i--) {\n    if (n %\
    \ primes[i] === 0) {\n      res = primes[i];\n      break;\n    }\n  }\n  return\
    \ res;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "  let max = 0;\n  for (let i = 2; i < n; i++) {\n    if\
    \ (n % i === 0) {\n      if (is_prime(i)) {\n        max = i;\n      }\n    }\n\
    \  }\n  return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n\
    \ % i == 0) {\n            n /= i;\n        } else {\n            i++;\n     \
    \   }\n    }\n    return i;\n}\n", "    const prime_factors = [];\n    let i =\
    \ 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            prime_factors.push(i);\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return Math.max(...prime_factors);\n}\n", "  if (is_prime(n)) {\n    return\
    \ n;\n  }\n  let factor = 2;\n  while (n % factor !== 0) {\n    factor++;\n  }\n\
    \  return largest_prime_factor(n / factor);\n}\n", "    if (n <= 1) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return largest_prime_factor(n\
    \ / 2);\n    }\n    for (let i = 3; i < n / 2; i += 2) {\n        if (n % i ===\
    \ 0) {\n            return largest_prime_factor(n / i);\n        }\n    }\n  \
    \  return n;\n}\n", "  let factor = 1;\n  for (let i = 2; i <= n; i++) {\n   \
    \ if (n % i === 0) {\n      factor = i;\n      n /= i;\n      i--;\n    }\n  }\n\
    \  return factor;\n}\n", "    let c: number = 2;\n    while (c <= n) {\n     \
    \   if (n % c == 0) {\n            n = n / c;\n        } else {\n            c++;\n\
    \        }\n    }\n    return c;\n}\n", "  var p = first_prime_factor(n);\n  return\
    \ n == p ? n : largest_prime_factor(n / p);\n}\n", "    const factors = get_factors(n);\n\
    \    for (let i = factors.length - 1; i >= 0; i--) {\n        if (is_prime(factors[i]))\
    \ {\n            return factors[i];\n        }\n    }\n    return n;\n}\n", " \
    \   // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n}\n\n",
  "  let maxPrime: number = -1;\n  while (n % 2 === 0) {\n    maxPrime = 2;\n    n\
    \ /= 2;\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    while (n % i\
    \ === 0) {\n      maxPrime = i;\n      n /= i;\n    }\n  }\n  if (n > 2) {\n \
    \   maxPrime = n;\n  }\n  return maxPrime;\n}\n", "  let largestPrimeFactor =\
    \ 1;\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      n /=\
    \ i;\n      largestPrimeFactor = i;\n    }\n  }\n  return largestPrimeFactor;\n\
    }\n\nconsole.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));\n",
  "    let factors = prime_factors(n);\n    return factors[factors.length - 1];\n\
    }\n", "  return prime_factors(n).reduce((acc, curr) => {\n    return acc > curr\
    \ ? acc : curr;\n  }, 0);\n}\n", "    // remove factors of 2\n    while (n % 2\
    \ === 0) {\n        n = n / 2;\n    }\n    // check all odd factors, stopping\
    \ at sqrt(n)\n    let m = Math.sqrt(n);\n    let i = 3;\n    while (i <= m) {\n\
    \        if (n % i === 0) {\n            n = n / i;\n            m = Math.sqrt(n);\n\
    \        } else {\n            i += 2;\n        }\n    }\n    return n;\n}\n",
  "    let x = n\n    for (let i = 2; i <= n; i++) {\n        if (is_prime(i) && n\
    \ % i == 0) {\n            x = i\n        }\n    }\n    return x\n}\n", "    for\
    \ (let i = Math.floor(Math.sqrt(n)); i > 1; i--) {\n        if (n % i === 0 &&\
    \ is_prime(i)) return i;\n    }\n    return -1;\n}\n", "    let num = n;\n   \
    \ let divisor = 2;\n    while (num > 1) {\n        if (num % divisor === 0) {\n\
    \            num /= divisor;\n        } else {\n            divisor += 1;\n  \
    \      }\n    }\n    return divisor;\n}\n\nconsole.log(largest_prime_factor(13195));",
  "  if (n % 2 === 0) {\n    let n2 = n;\n    while (n2 % 2 === 0) {\n      n2 = n2\
    \ / 2;\n    }\n    if (n2 === 1) {\n      return 2;\n    }\n  }\n  const factors\
    \ = [];\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0)\
    \ {\n      factors.push(i);\n    }\n  }\n  const largest_prime_factor = factors.reduce((prime_factor,\
    \ factor) => {\n    const n2 = n / factor;\n    if (n2 % 2 === 0) {\n      while\
    \ (n2 % 2 === 0) {\n        n2 /= 2;\n      }\n      if (n2 === 1) {\n       \
    \ prime_factor = 2;\n      }\n    }\n    for (let i = 3; i <= Math.sqrt(n2); i\
    \ += 2) {\n      if (n2 % i === 0) {\n        prime_factor = 0;\n        break;\n\
    \      }\n    }\n    if (prime_factor !== 0) {\n      prime_factor = n2;\n   \
    \ }\n    return prime_factor;\n  }, 0);\n  if (largest_prime_factor === 0) {\n\
    \    return Math.max(...factors);\n  }\n  return largest_prime_factor;\n}\n",
  "  for (let i = Math.floor(Math.sqrt(n)); i > 1; i--) {\n    if (n % i === 0 &&\
    \ is_prime(i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "  let result\
    \ = 2;\n  let d = 2;\n  while (n > 1) {\n    while (n % d === 0) {\n      result\
    \ = d;\n      n /= d;\n    }\n    d += 1;\n  }\n  return result;\n}\n", "    if\
    \ (n <= 2) {\n        return n;\n    }\n    let prime: number = 2;\n    while\
    \ (n % prime !== 0) {\n        prime++;\n    }\n    return prime;\n}", "  // TODO:\
    \ Implement this function\n  let i = 0;\n  for (i = 2; i < n; i++) {\n    if (n\
    \ % i === 0) {\n      break;\n    }\n  }\n  if (i === n) {\n    return n;\n  }\
    \ else {\n    return largest_prime_factor(n / i);\n  }\n}\n", "    if (is_prime(n))\
    \ {\n        return n;\n    }\n    let factors = prime_factors(n);\n    return\
    \ factors[factors.length - 1];\n}\n", "  var divisor = 2\n  while (n > 1) {\n\
    \    if (n % divisor === 0) {\n      n /= divisor\n    } else {\n      divisor\
    \ += 1\n    }\n  }\n  return divisor\n}\n", "    let p = 0;\n    let i = 2;\n\
    \    let nn = n;\n    while (i <= nn) {\n        if (nn % i === 0) {\n       \
    \     p = i;\n            nn = nn / i;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    return p;\n}\n", "    //...\n    return 0;\n}\n", "   \
    \ let num = n;\n    let i = 2;\n    while (i <= num) {\n        if (num % i ===\
    \ 0) {\n            num /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return i;\n}\n", "  let p = 2;\n  while (n > 1) {\n    if (n % p ===\
    \ 0) {\n      n = n / p;\n    } else {\n      p++;\n    }\n  }\n  return p;\n\
    }\n", "  if (n % 2 === 0) {\n    while (n % 2 === 0) {\n      n = n / 2;\n   \
    \ }\n  }\n  let largestFactor = 1;\n  let i = 3;\n  while (i <= Math.sqrt(n))\
    \ {\n    if (n % i === 0) {\n      largestFactor = i;\n      n = n / i;\n    }\
    \ else {\n      i += 2;\n    }\n  }\n  return largestFactor;\n}\n", "    let x\
    \ = n;\n    let i = 2;\n    while (i * i <= x) {\n        if (x % i == 0) {\n\
    \            x /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    return x;\n}\n", "    let m = 2;\n    while (n > m) {\n        if (n % m\
    \ === 0) {\n            n = n / m;\n        } else {\n            m++;\n     \
    \   }\n    }\n    return m;\n}\n", "  let i = 2;\n  while (i < n) {\n    if (n\
    \ % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconsole.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));\n",
  "    let factor = 1;\n    while (n != 1) {\n        factor += 1;\n        while\
    \ (n % factor == 0) {\n            n = n / factor;\n        }\n    }\n    return\
    \ factor;\n}\n\nconsole.log(largest_prime_factor(13195));\nconsole.log(largest_prime_factor(2048));",
  "    return 1;\n}\n\n", "    let primeNumber;\n    while (n % 2 === 0) {\n     \
    \   primeNumber = 2;\n        n = n / 2;\n    }\n    let i = 3;\n    while (i\
    \ <= Math.sqrt(n)) {\n        while (n % i === 0) {\n            primeNumber =\
    \ i;\n            n = n / i;\n        }\n        i += 2;\n    }\n    if (n > 2)\
    \ {\n        primeNumber = n;\n    }\n    return primeNumber;\n}\n\nconsole.log(largest_prime_factor(13195));\n\
    console.log(largest_prime_factor(2048));\n", "  if (is_prime(n)) {\n    return\
    \ n;\n  }\n  let largest = 2;\n  let sqrt = Math.sqrt(n);\n  while (largest <=\
    \ sqrt) {\n    if (n % largest === 0) {\n      n = n / largest;\n      sqrt =\
    \ Math.sqrt(n);\n    } else {\n      largest++;\n    }\n  }\n  return n;\n}\n",
  "  let num = n;\n  let i = 2;\n  let factors = [];\n  while (i <= num) {\n    if\
    \ (num % i === 0) {\n      num = num / i;\n      factors.push(i);\n    } else\
    \ {\n      i++;\n    }\n  }\n  return factors[factors.length - 1];\n}\n", "  let\
    \ largest: number = 0;\n  //Can we guarantee this is the largest? \n  //What if\
    \ the next largest prime factor is \n  //a prime factor of this number? \n  //How\
    \ can we check that?  \n  while (n > 1) {\n    let prime_found: boolean = false;\n\
    \    for (let i: number = 2; i <= n; i++) {\n      if (n % i === 0) {\n      \
    \  n = n / i;\n        largest = i;\n        //The first number that evenly divides\
    \ is a prime\n        //If it does not evenly divide, then the next number \n\
    \        //that does is a prime factor of it. \n        prime_found = true;\n\
    \        break;\n      }\n    }\n    if (!prime_found) {\n      break;\n    }\n\
    \  }\n  return largest;\n}\n", "    if (n < 2) {\n        return null;\n    }\n\
    \    let limit = Math.ceil(Math.sqrt(n));\n    for (let i = limit; i > 1; i--)\
    \ {\n        if (n % i === 0) {\n            let prime = is_prime(i);\n      \
    \      if (prime) {\n                return i;\n            }\n        }\n   \
    \ }\n    return null;\n}\n", "    let i = 2;\n    let largest_prime = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            while (n % i ==\
    \ 0) {\n                n = n / i;\n            }\n            largest_prime =\
    \ i;\n        }\n        i++;\n    }\n    if (n > largest_prime) {\n        largest_prime\
    \ = n;\n    }\n    return largest_prime;\n}\n", "    let factor = 2;\n    while\
    \ (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n      \
    \  } else {\n            factor++;\n        }\n    }\n    return factor;\n}\n",
  "  let largest_prime = 0;\n  let p = 2;\n  while (n > 1) {\n    while (n % p ===\
    \ 0) {\n      n = n / p;\n      largest_prime = p;\n    }\n    p++;\n  }\n  return\
    \ largest_prime;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0)\
    \ {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n", " \
    \ let factor = n;\n  let max_factor = 0;\n  while (factor >= 2) {\n    if (n %\
    \ factor === 0) {\n      if (is_prime(factor)) {\n        max_factor = factor;\n\
    \        break;\n      }\n    }\n    factor--;\n  }\n  return max_factor;\n}\n",
  "    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            if\
    \ (i === n) {\n                return i;\n            }\n            else {\n\
    \                return largest_prime_factor(n / i);\n            }\n        }\n\
    \    }\n}\n", "    let factor = 0;\n    let candidate = n - 1;\n    while(factor\
    \ == 0) {\n        if(n % candidate == 0) {\n            factor = candidate;\n\
    \        }\n        candidate -= 1;\n    }\n    return factor;\n}\n", "    let\
    \ i = Math.floor(Math.sqrt(n));\n    while (n % i !== 0 || !is_prime(i)) {\n \
    \       i--;\n    }\n    return i;\n}\n", "  //Number not greater than one\n \
    \ if (n <= 1) {\n    return 1;\n  }\n\n  let factor = 1;\n\n  //Numbers with factors\n\
    \  while (n % 2 === 0) {\n    factor = 2;\n    n = n / 2;\n  }\n\n  //Numbers\
    \ with uneven factors\n  for (let i = 3; i <= Math.sqrt(n); i = i + 2) {\n   \
    \ while (n % i === 0) {\n      factor = i;\n      n = n / i;\n    }\n  }\n\n \
    \ //A prime number\n  if (n > 2) {\n    factor = n;\n  }\n\n  return factor;\n\
    }\n\nconsole.log(largest_prime_factor(2048));\n", "    let factors = []\n    for\
    \ (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            factors.push(i)\n\
    \        }\n    }\n    for (let i = factors.length - 1; i >= 0; i--) {\n     \
    \   for (let j = 0; j < factors.length; j++) {\n            if (factors[i] % factors[j]\
    \ === 0 && factors[i] !== factors[j]) {\n                factors.splice(i, 1)\n\
    \            }\n        }\n    }\n    return factors[factors.length - 1]\n}\n",
  "    const factors = get_factors(n);\n    const prime_factors = factors.filter(factor\
    \ => is_prime(factor));\n    return max(prime_factors);\n}\n", "    const factors\
    \ = prime_factors(n);\n    return factors[factors.length - 1];\n}\n", "  let prime:\
    \ number = 2;\n  let factor: number = 0;\n  for (; n > 1;) {\n    if (n % prime\
    \ == 0) {\n      factor = prime;\n      n /= prime;\n    } else {\n      prime++;\n\
    \    }\n  }\n  return factor;\n}\n", "  var factor = n;\n  var devisor = 2;\n\
    \  while (factor > 1) {\n    if (factor % devisor == 0) {\n      factor = factor\
    \ / devisor;\n    } else {\n      devisor++;\n    }\n  }\n  return devisor;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
