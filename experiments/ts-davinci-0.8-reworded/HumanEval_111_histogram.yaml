name: HumanEval_111_histogram
language: ts
prompt: "//Given a string representing a space separated lowercase letters, return\
  \ an object\n// of the letter with the most repetition and containing the corresponding\
  \ count.\n// If several letters have the same occurrence, return all of them.\n\
  // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c\
  \ a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n\
  // >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]:\
  \ number} {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"\
  ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2,\
  \ \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1,\
  \ \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
  : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\":\
  \ 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
  \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
  a\": 1});\n}\n\ntest();"
completions: ["    let count: {[key: string]: number} = {};\n    for (let i = 0; i\
    \ < test.length; i++) {\n        if (test[i] !== \" \") {\n            count[test[i]]\
    \ = count[test[i]] + 1 || 1;\n        }\n    }\n    return count;\n}\n", "   \
    \ let result = {};\n    let testArr = test.split(\" \");\n    for (let i = 0;\
    \ i < testArr.length; i++) {\n        if (testArr[i] in result) {\n          \
    \  result[testArr[i]]++;\n        } else {\n            result[testArr[i]] = 1;\n\
    \        }\n    }\n    let temp = 0;\n    let maxArr = [];\n    for (let prop\
    \ in result) {\n        if (result[prop] > temp) {\n            temp = result[prop];\n\
    \            maxArr = [];\n            maxArr.push(prop);\n        } else if (result[prop]\
    \ === temp) {\n            maxArr.push(prop);\n        }\n    }\n    let maxCount\
    \ = {};\n    for (let i = 0; i < maxArr.length; i++) {\n        maxCount[maxArr[i]]\
    \ = temp;\n    }\n    return maxCount;\n}\nconsole.log(histogram(\"a b c\"));\n\
    console.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\n\
    console.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\"));", "  let\
    \ result = {};\n  test.split(\" \").forEach(element => {\n    result[element]\
    \ = result[element] ? result[element] + 1 : 1;\n  });\n  return result;\n}\n",
  "  let chars = test.split(\" \");\n  let map: {[key: string]: number} = {};\n  chars.forEach(char\
    \ => {\n    map[char] = map[char] + 1 || 1;\n  });\n  return map;\n}\n", "   \
    \ // Remove empty string\n    const words = test.split(\" \").filter(word => word\
    \ !== \"\");\n    // Sort list from largest to smallest\n    const sortedWords\
    \ = words.sort((a, b) => words.filter(v => v === b).length - words.filter(v =>\
    \ v === a).length);\n    // Filter largest word(s)\n    const topWords = sortedWords.filter(word\
    \ => word === sortedWords[0]);\n    // Dict of words and number of times word\
    \ appears\n    return topWords.reduce((acc: {[key: string]: number}, cur: string)\
    \ => {\n        acc[cur] = words.filter(word => word === cur).length;\n      \
    \  return acc;\n    }, {});\n}\n", "  const charMap: {[key: string]: number} =\
    \ {};\n  const maxes: {[key: string]: number} = {};\n  let maxCount = 0;\n  for\
    \ (const c of test.split(' ')) {\n    charMap[c] = charMap[c] + 1 || 1;\n    if\
    \ (charMap[c] > maxCount) {\n      maxCount = charMap[c];\n      maxes[c] = charMap[c];\n\
    \    } else if (charMap[c] === maxCount) {\n      maxes[c] = charMap[c];\n   \
    \ }\n  }\n  return maxes;\n}\n", "    const arr = test.split(\" \");\n    const\
    \ histo = {};\n    for (const x of arr) {\n        if (x in histo) {\n       \
    \     histo[x] += 1;\n        } else {\n            histo[x] = 1;\n        }\n\
    \    }\n    return histo;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));", "  const histo: {[key: string]:\
    \ number} = {};\n  const letters = test.split(\" \");\n  letters.forEach((letter)\
    \ => {\n    if (histo[letter]) {\n      histo[letter] += 1;\n    } else {\n  \
    \    histo[letter] = 1;\n    }\n  });\n  const maxCount = Math.max(...Object.values(histo));\n\
    \  const final = {};\n  Object.keys(histo).forEach((key) => {\n    if (histo[key]\
    \ === maxCount) {\n      final[key] = maxCount;\n    }\n  });\n  return final;\n\
    }\n", "  const letters = test.split(' ');\n  const hist = {};\n  for (const letter\
    \ of letters) {\n    if (letter in hist) {\n      hist[letter]++;\n    } else\
    \ {\n      hist[letter] = 1;\n    }\n  }\n  return hist;\n}\n", "    let obj:\
    \ {[key: string]: number} = {};\n    test.split(' ').forEach(function(el) {\n\
    \        if (obj[el]) {\n            obj[el]++;\n        } else {\n          \
    \  obj[el] = 1;\n        }\n    });\n    return obj;\n}\nconsole.log(histogram(\"\
    a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b\
    \ c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));", "    const map: {[key: string]: number} = {};\n    test.split(' ').forEach(letter\
    \ => {\n        map[letter] = (map[letter] || 0) + 1;\n    });\n    return map;\n\
    }\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"));\n\
    console.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"b b b b a\"));\n\
    console.log(histogram(\"\"));\n", "  const histogram = {} as {[key: string]: number};\n\
    \  test.split(' ').forEach(char => {\n    if (histogram[char]) {\n      histogram[char]++;\n\
    \    } else {\n      histogram[char] = 1;\n    }\n  });\n  const max = Math.max(...Object.values(histogram));\n\
    \  return Object.keys(histogram).reduce((acc, key) => {\n    if (histogram[key]\
    \ === max) {\n      acc[key] = histogram[key];\n    }\n    return acc;\n  }, {}\
    \ as {[key: string]: number});\n}\n", "    const arr = test.split(' ');\n    const\
    \ result: {[key: string]: number} = {};\n    let max: number = 0;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if (result[arr[i]]\
    \ > max) {\n            max = result[arr[i]];\n        }\n    }\n    const output:\
    \ {[key: string]: number} = {};\n    for (const key in result) {\n        if (result[key]\
    \ === max) {\n            output[key] = result[key];\n        }\n    }\n    return\
    \ output;\n}\nconsole.log(histogram('a b c'));\nconsole.log(histogram('a b b a'));\n\
    console.log(histogram('a b c a b'));\nconsole.log(histogram('b b b b a'));\nconsole.log(histogram(''));",
  "    const h: {[key: string]: number} = {};\n    test.split(' ').forEach(item =>\
    \ {\n        if (item) {\n            h[item] = h[item] + 1 || 1;\n        }\n\
    \    });\n    return h;\n}\n", "    let wordList = test.split(\" \");\n    let\
    \ wordSet = new Set(wordList);\n    let wordDict: {[key: string]: number} = {};\n\
    \    let maxVal = 0;\n    let maxLetter: string[] = [];\n    for (let word of\
    \ wordSet) {\n        wordDict[word] = 0;\n    }\n    for (let i = 0; i < wordList.length;\
    \ i++) {\n        let word = wordList[i];\n        wordDict[word] += 1;\n    \
    \    if (wordDict[word] > maxVal) {\n            maxVal = wordDict[word];\n  \
    \          maxLetter = [word];\n        } else if (wordDict[word] === maxVal)\
    \ {\n            maxLetter.push(word);\n        }\n    }\n    for (let word of\
    \ wordSet) {\n        if (wordDict[word] < maxVal) {\n            delete wordDict[word];\n\
    \        }\n    }\n    return wordDict;\n}\n\nexport = histogram;", "  const result:\
    \ {[key: string]: number} = {};\n  test.split(\" \").forEach((n) => {\n    if\
    \ (result[n]) {\n      result[n] += 1;\n    } else {\n      result[n] = 1;\n \
    \   }\n  });\n  return result;\n}\n", "  const array = test.split(\" \");\n  const\
    \ result: {[key: string]: number} = {};\n  for (const item of array) {\n    if\
    \ (result[item]) {\n      result[item]++;\n    } else {\n      result[item] =\
    \ 1;\n    }\n  }\n  return result;\n}\n", "    const histogram = {}\n    test.split(\"\
    \ \").forEach(l => {\n        histogram[l] = (histogram[l] || 0) + 1\n    })\n\
    \    return histogram\n}\n", "  let map: {[key: string]: number} = {};\n  let\
    \ maxCount: number = 0;\n  let maxCountValues: string[] = [];\n  test.split(\"\
    \ \").forEach(\n    (element: string) => {\n      if (map[element] === undefined)\
    \ {\n        map[element] = 1;\n      } else {\n        map[element] += 1;\n \
    \     }\n      if (map[element] === maxCount) {\n        maxCountValues.push(element);\n\
    \      } else if (map[element] > maxCount) {\n        maxCount = map[element];\n\
    \        maxCountValues = [element];\n      }\n    }\n  );\n  maxCountValues.forEach(\n\
    \    (key: string) => {\n      map[key] = maxCount;\n    }\n  );\n  return map;\n\
    }\n\nexport const __test__ = {\n  histogram,\n};", "    let result: {[key: string]:\
    \ number} = {};\n    let max: number = 0;\n    test.split(\" \").forEach(function(x)\
    \ {\n        if(result[x] === undefined) {\n            result[x] = 1;\n     \
    \   } else {\n            result[x]++;\n        }\n        if(result[x] > max)\
    \ {\n            max = result[x];\n        }\n    });\n    let keys: string[]\
    \ = Object.keys(result);\n    for(let i = 0; i < keys.length; i++) {\n       \
    \ if(result[keys[i]] < max) {\n            delete result[keys[i]];\n        }\n\
    \    }\n    return result;\n}\n", "    let letters: {[key: string]: number} =\
    \ {};\n    test.split(\" \").forEach(function(letter) {\n        if (letter in\
    \ letters) {\n            letters[letter]++;\n        } else {\n            letters[letter]\
    \ = 1;\n        }\n    });\n    return letters;\n}\n", "  const testSplit = test.split('\
    \ ');\n  const histogramSet = new Set(testSplit);\n  const histogramObj: {[key:\
    \ string]: number} = {};\n  histogramSet.forEach((i) => {\n    histogramObj[i]\
    \ = 0;\n  });\n  testSplit.forEach((i) => {\n    histogramObj[i]++;\n  });\n \
    \ return histogramObj;\n}\n", "    let result = {};\n    for (let i = 0; i < test.length;\
    \ i++) {\n        if (result[test[i]] === undefined) {\n            result[test[i]]\
    \ = 1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n \
    \   return result;\n}\n", "    // We will use the regExp to match the characters\
    \ we are looking for.\n    const regExp = /[a-z]/g;\n    // This will contain\
    \ our matches.\n    const matches = test.match(regExp);\n    // If there are no\
    \ matches, we can simply return an empty object.\n    if (matches === null) {\n\
    \        return {};\n    }\n    // This will hold our letter counts.\n    const\
    \ counts: {[key: string]: number} = {};\n    // Initialize our max to 0.\n   \
    \ let max = 0;\n    // This variable will hold the letters with the most repetition.\n\
    \    let letters: string[] = [];\n    // Now we loop through our matches and keep\
    \ track of our letter counts and max.\n    for (const character of matches) {\n\
    \        if (counts[character] === undefined) {\n            counts[character]\
    \ = 1;\n        } else {\n            counts[character] += 1;\n        }\n   \
    \     if (counts[character] > max) {\n            max = counts[character];\n \
    \           letters = [character];\n        } else if (counts[character] === max)\
    \ {\n            letters.push(character);\n        }\n    }\n    // Finally, we\
    \ go through our letters array and remove all letters with a count\n    // less\
    \ than max.\n    for (const letter of letters) {\n        if (counts[letter] <\
    \ max) {\n            delete counts[letter];\n        }\n    }\n    return counts;\n\
    }\n", "    var result: {[key: string]: number} = {};\n    for (var char of test.split('\
    \ ')) {\n        if (result[char]) {\n            result[char] += 1;\n       \
    \ } else {\n            result[char] = 1;\n        }\n    }\n    return result;\n\
    }\n", "  let letters: string[] = test.split(\" \");\n  let out = {};\n  for (let\
    \ i = 0; i < letters.length; i++) {\n    if (out[letters[i]]) {\n      out[letters[i]]++;\n\
    \    } else {\n      out[letters[i]] = 1;\n    }\n  }\n  return out;\n}\nconsole.log(histogram(\"\
    a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b\
    \ c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));", "    const o = {};\n    test.split(\" \").forEach(c => {\n        if (!o[c])\
    \ {\n            o[c] = 1;\n        } else {\n            o[c] += 1;\n       \
    \ }\n    });\n    return o;\n}\n", "    let map: {[key: string]: number} = {};\n\
    \    test.split(\" \").forEach(e => {\n        map[e] = (map[e] || 0) + 1;\n \
    \   });\n    return map;\n}\n", "    const charCounts: {[key: string]: number}\
    \ = {};\n    test.split(\" \").forEach(char => {\n        if (charCounts[char])\
    \ {\n            charCounts[char]++;\n        } else {\n            charCounts[char]\
    \ = 1;\n        }\n    });\n    return charCounts;\n}\n", "    // your code here\n\
    \    let hist: {[key: string]: number} = {};\n    const letters = test.split(\"\
    \ \");\n    let max = 0;\n    for (let i = 0; i < letters.length; i++) {\n   \
    \     if (hist[letters[i]] !== undefined) {\n            hist[letters[i]] += 1;\n\
    \        } else {\n            hist[letters[i]] = 1;\n        }\n        if (hist[letters[i]]\
    \ > max) {\n            max = hist[letters[i]];\n        }\n    }\n    const ret:\
    \ {[key: string]: number} = {};\n    for (const letter in hist) {\n        if\
    \ (hist[letter] === max) {\n            ret[letter] = hist[letter];\n        }\n\
    \    }\n    return ret;\n}\n", "    let histogram = {};\n    test.split(\" \"\
    ).forEach(item => {\n        if (item) {\n            histogram[item] = (histogram[item]\
    \ || 0) + 1;\n        }\n    });\n    return histogram;\n}\n", "    let input\
    \ = test.split(' ');\n    let map: {[key: string]: number} = {};\n    input.forEach(function(val)\
    \ {\n        if (map[val] === undefined) {\n            map[val] = 1;\n      \
    \  } else {\n            map[val] += 1;\n        }\n    });\n    let greatest\
    \ = Number.MIN_VALUE;\n    let result: {[key: string]: number} = {};\n    for\
    \ (let [key, value] of Object.entries(map)) {\n        if (value > greatest) {\n\
    \            greatest = value;\n            result = {};\n            result[key]\
    \ = value;\n        } else if (value === greatest) {\n            result[key]\
    \ = value;\n        }\n    }\n    return result;\n}\n", "    let count: {[key:\
    \ string]: number} = {};\n    if(test.length === 0) {\n        return count;\n\
    \    }\n    for(let char of test.split(' ')) {\n        count[char] = (count[char]\
    \ || 0) + 1;\n    }\n    // @ts-ignore\n    let max = Math.max(...Object.values(count));\n\
    \    let result: {[key: string]: number} = {};\n    for(let key in count) {\n\
    \        if(count[key] === max) {\n            result[key] = count[key];\n   \
    \     }\n    }\n    return result;\n}", "    const regex = /\\s+/;\n    const\
    \ letters = test.split(regex);\n    const results: {[key: string]: number} = {};\n\
    \    letters.forEach((letter) => {\n        if (results[letter]) {\n         \
    \   results[letter]++;\n        } else {\n            results[letter] = 1;\n \
    \       }\n    });\n    return results;\n}\n", "  const result: {[key: string]:\
    \ number} = {};\n  const testArray = test.split(' ');\n  testArray.forEach((item)\
    \ => {\n    result[item] = (result[item] || 0) + 1;\n  });\n  return result;\n\
    }\n", "  let dict: {[key: string]: number} = {};\n  let str = test.split(\" \"\
    );\n  for (let i = 0; i < str.length; i++) {\n    if (dict[str[i]]) {\n      dict[str[i]]\
    \ += 1;\n    } else {\n      dict[str[i]] = 1;\n    }\n  }\n  return dict;\n}\n\
    console.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"\
    a b c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));", "    let array: string[] = test.split(\" \");\n    let hist: {[key: string]:\
    \ number} = {};\n    array.forEach(function(i) {\n        if (i in hist) {\n \
    \           hist[i]++;\n        } else {\n            hist[i] = 1;\n        }\n\
    \    });\n    return hist;\n}\n", "  let text = test.split(' ');\n  let obj: {[key:\
    \ string]: number} = {};\n  for (let key of text) {\n    if (obj[key]) {\n   \
    \   obj[key]++;\n    } else {\n      obj[key] = 1;\n    }\n  }\n  return obj;\n\
    }\n", "    const result: {[key: string]: number} = {};\n    const letters: string[]\
    \ = test.split(' ');\n    for (const letter of letters) {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    }\n    return result;\n}\n", "  // YOUR CODE GOES HERE\n\
    \  let result: {[key: string]: number} = {};\n  test.split(\" \").forEach(item\
    \ => {\n    result[item] = result[item] ? result[item] + 1 : 1;\n  });\n  return\
    \ result;\n}", "    let letters = test.split(\" \");\n    let lettersDictionary:\
    \ {[key: string]: number} = {};\n    letters.forEach(function(letter) {\n    \
    \    if(lettersDictionary[letter]) {\n            lettersDictionary[letter] +=\
    \ 1;\n        } else {\n            lettersDictionary[letter] = 1;\n        }\n\
    \    });\n    return lettersDictionary;\n}\n", "    let result: {[key: string]:\
    \ number} = {};\n    let wordArray: string[] = test.split(\" \");\n    wordArray.forEach(function(word)\
    \ {\n        let count: number = 0;\n        wordArray.forEach(function(element)\
    \ {\n            if (word === element) {\n                count++;\n         \
    \   }\n        });\n        result[word] = count;\n    });\n    return result;\n\
    }", "    let result = {};\n    let letters = test.split(\" \");\n    let max =\
    \ 0;\n    for (let i = 0; i < letters.length; i++) {\n        let current = letters[i];\n\
    \        if (result[current] === undefined) {\n            result[current] = 1;\n\
    \        } else {\n            result[current]++;\n        }\n        if (result[current]\
    \ > max) {\n            max = result[current];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n", "    const result = {}\n    const\
    \ spl = test.split(' ')\n    for (let i = 0; i < spl.length; i++) {\n        const\
    \ word = spl[i]\n        if (result[word]) {\n            result[word] += 1\n\
    \        } else {\n            result[word] = 1\n        }\n    }\n    return\
    \ result\n}\n\n", "  let split = test.split(\" \");\n  let result = {};\n  for\
    \ (let letter of split) {\n    if (letter in result) {\n      result[letter]++;\n\
    \    } else {\n      result[letter] = 1;\n    }\n  }\n  return result;\n}\n",
  "  //throw \"TODO\";\n  if(test.length === 0) {\n    return {};\n  }\n  // creates\
    \ array from string\n  let x = test.split(\" \");\n  let result: {[key: string]:\
    \ number} = {};\n  // loops through array and adds value and count to the object\n\
    \  for(let i = 0; i < x.length; i++) {\n    let char = x[i];\n    if(result[char])\
    \ {\n      result[char]++;\n    } else {\n      result[char] = 1;\n    }\n  }\n\
    \  // gets the highest value in the object\n  let highest: number = 0;\n  let\
    \ keys: string[] = [];\n  // adds key to array\n  for(let key in result) {\n \
    \   keys.push(key);\n  }\n  // checks if value is highest\n  for(let i = 0; i\
    \ < keys.length; i++) {\n    if(result[keys[i]] > highest) {\n      highest =\
    \ result[keys[i]];\n    }\n  }\n  // checks to see if any keys match the highest\
    \ value\n  for(let i = 0; i < keys.length; i++) {\n    if(result[keys[i]] !==\
    \ highest) {\n      delete result[keys[i]];\n    }\n  }\n  return result;\n}\n",
  "    let results: {[key: string]: number} = {};\n    let charArray: string[] = test.split('\
    \ ');\n    let letterCount: number = 0;\n    let currChar: string = \"\";\n  \
    \  if (test === \"\") {\n        return results;\n    } else {\n        for (let\
    \ i = 0; i < charArray.length; i++) {\n            currChar = charArray[i];\n\
    \            letterCount = charArray.filter(letter => letter === currChar).length;\n\
    \            results[currChar] = letterCount;\n        }\n        return results;\n\
    \    }\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"\
    ));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"b b b b a\"\
    ));\nconsole.log(histogram(\"\"));", "  if (test.length === 0) {\n    return {};\n\
    \  }\n  const newObj: {[key: string]: number} = {};\n  const newArr: string[]\
    \ = test.split(' ');\n  newArr.forEach((newValue: string) => {\n    if (newObj[newValue])\
    \ {\n      newObj[newValue] += 1;\n    } else {\n      newObj[newValue] = 1;\n\
    \    }\n  });\n  const max: number = Math.max(...Object.values(newObj));\n  const\
    \ finalResult: {[key: string]: number} = {};\n  for (const key in newObj) {\n\
    \    if (newObj[key] === max) {\n      finalResult[key] = max;\n    }\n  }\n \
    \ return finalResult;\n}\n", "  let result: {[key: string]: number} = {};\n  for\
    \ (let i: number = 0; i < test.length; i++) {\n    if (test[i] != \" \") {\n \
    \     if (result[test[i]] == undefined) {\n        result[test[i]] = 1;\n    \
    \  } else {\n        result[test[i]] += 1;\n      }\n    }\n  }\n  return result;\n\
    }", "    let letters = test.split(' ');\n    let hist: {[key: string]: number}\
    \ = {};\n    for (let letter of letters) {\n        if (hist[letter]) {\n    \
    \        hist[letter]++;\n        } else {\n            hist[letter] = 1;\n  \
    \      }\n    }\n    return hist;\n}\n", "    const hist: {[key: string]: number}\
    \ = {};\n    const testArr = test.split(\" \");\n    const testArrLength = testArr.length;\n\
    \    let histKeys = Object.keys(hist);\n    let histValues = Object.values(hist);\n\
    \    let currValue = 0;\n    let maxValue = 0;\n    let maxKey = \"\";\n    for\
    \ (let i = 0; i < testArrLength; i++) {\n        hist[testArr[i]] = hist[testArr[i]]\
    \ ? hist[testArr[i]] + 1 : 1;\n    }\n    for (let i = 0; i < histKeys.length;\
    \ i++) {\n        currValue = hist[histKeys[i]];\n        if (currValue > maxValue)\
    \ {\n            maxValue = currValue;\n            maxKey = histKeys[i];\n  \
    \      }\n    }\n    for (let i = 0; i < histKeys.length; i++) {\n        if (hist[histKeys[i]]\
    \ !== maxValue) {\n            delete hist[histKeys[i]];\n        }\n    }\n \
    \   return hist;\n}\nconst test1 = \"a b c\";\nconst test2 = \"a b b a\";\nconst\
    \ test3 = \"a b c a b\";\nconst test4 = \"b b b b a\";\nconst test5 = \"\";\n\
    const hist1 = histogram(test1);\nconst hist2 = histogram(test2);\nconst hist3\
    \ = histogram(test3);\nconst hist4 = histogram(test4);\nconst hist5 = histogram(test5);\n\
    console.log(hist1);\nconsole.log(hist2);\nconsole.log(hist3);\nconsole.log(hist4);\n\
    console.log(hist5);", "    // TODO\n    return {};\n}\n", "    const map = new\
    \ Map<string, number>();\n    const arr = test.split(' ');\n    arr.forEach(value\
    \ => {\n        map.set(value, map.has(value) ? map.get(value) + 1 : 1);\n   \
    \ });\n    let max: number = 0;\n    const maxKeys: string[] = [];\n    map.forEach((value,\
    \ key) => {\n        if (value > max) {\n            max = value;\n          \
    \  maxKeys.length = 0;\n            maxKeys.push(key);\n        } else if (value\
    \ === max) {\n            maxKeys.push(key);\n        }\n    });\n    const res:\
    \ {[key: string]: number} = {};\n    maxKeys.forEach(key => {\n        res[key]\
    \ = max;\n    });\n    return res;\n}", "  const testArr = test.split(' ');\n\
    \  const letterCount: {[key: string]: number} = {};\n  let count: number = 0;\n\
    \  let max: number = 0;\n  let maxLetter: string = '';\n  let maxLetterArr: Array<string>\
    \ = [];\n  for (let i: number = 0; i < testArr.length; i++) {\n    if (testArr[i]\
    \ in letterCount) {\n      letterCount[testArr[i]]++;\n    } else {\n      letterCount[testArr[i]]\
    \ = 1;\n    }\n  }\n  for (let key in letterCount) {\n    if (letterCount[key]\
    \ > max) {\n      max = letterCount[key];\n      maxLetter = key;\n    }\n  }\n\
    \  for (let key in letterCount) {\n    if (letterCount[key] === max) {\n     \
    \ maxLetterArr.push(key);\n    }\n  }\n  if (maxLetterArr.length > 1) {\n    return\
    \ {[maxLetterArr.join('')]: max};\n  } else {\n    return {[maxLetter]: max};\n\
    \  }\n}\n", "    const histo: {[key: string]: number} = {};\n    const letters:\
    \ string[] = test.split(\" \");\n    letters.forEach((letter: string) => {\n \
    \       if (!histo[letter]) {\n            histo[letter] = 1;\n        } else\
    \ {\n            histo[letter]++;\n        }\n    });\n    return histo;\n}\n\n\
    console.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"\
    a b c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));", "    const result: {[key: string]: number} = {};\n    const testArr =\
    \ test.split(\" \");\n    for (let i = 0; i < testArr.length; i++) {\n       \
    \ if (result[testArr[i]] === undefined) {\n            result[testArr[i]] = 1;\n\
    \        } else {\n            result[testArr[i]] += 1;\n        }\n    }\n  \
    \  return result;\n}\n", "    let letters: string[] = test.split(\" \");\n   \
    \ let count: {[key: string]: number} = {};\n    let maxCount: number = 0;\n  \
    \  let maxLetter: string = \"\";\n    for (let letter of letters) {\n        if\
    \ (count[letter] === undefined) {\n            count[letter] = 1;\n        } else\
    \ {\n            count[letter]++;\n        }\n        if (count[letter] > maxCount)\
    \ {\n            maxCount = count[letter];\n            maxLetter = letter;\n\
    \        }\n    }\n    return {[maxLetter]: maxCount};\n}", "    const chars =\
    \ {};\n    const words = test.split(\" \");\n    words.forEach(word => {\n   \
    \     if (chars[word]) {\n            chars[word]++;\n        } else {\n     \
    \       chars[word] = 1;\n        }\n    });\n    return chars;\n}\n", "    let\
    \ input: string[] = test.split(' ');\n    let count: {[key: string]: number} =\
    \ {};\n    let max: number = 0;\n    let result: {[key: string]: number} = {};\n\
    \    input.forEach(function(c) {\n        if (!count[c]) {\n            count[c]\
    \ = 0;\n        }\n        count[c] += 1;\n        if (count[c] > max) {\n   \
    \         max = count[c];\n        }\n    });\n    Object.keys(count).forEach(function(k)\
    \ {\n        if (count[k] === max) {\n            result[k] = count[k];\n    \
    \    }\n    });\n    return result;\n}\n", "    if (test.length === 0) {\n   \
    \     return {};\n    }\n    const letters: {[key: string]: number} = {};\n  \
    \  test.split(' ').forEach((letter: string) => {\n        if (letters[letter])\
    \ {\n            letters[letter] += 1;\n        } else {\n            letters[letter]\
    \ = 1;\n        }\n    });\n    const maxValue: number = Math.max(...Object.values(letters));\n\
    \    const maxLetters: {[key: string]: number} = {};\n    Object.keys(letters).forEach((letter:\
    \ string) => {\n        if (letters[letter] === maxValue) {\n            maxLetters[letter]\
    \ = letters[letter];\n        }\n    });\n    return maxLetters;\n}\n", "  const\
    \ hist: {[key: string]: number} = {};\n  test.split(' ').forEach(l => {\n    if\
    \ (!hist[l]) {\n      hist[l] = 1;\n    } else {\n      hist[l] += 1;\n    }\n\
    \  });\n  return hist;\n}\n\nconst hist = histogram('a b c a b');\n", "    const\
    \ result: {[key: string]: number} = {};\n    const tests: string[] = test.split(\"\
    \ \");\n    for (const t of tests) {\n        if (t) {\n            if (result[t])\
    \ {\n                result[t] += 1;\n            } else {\n                result[t]\
    \ = 1;\n            }\n        }\n    }\n    return result;\n}\n", "    let output:\
    \ {[key: string]: number} = {};\n    test.split(\" \").forEach(function(elem)\
    \ {\n        if (Object.keys(output).indexOf(elem) > -1) {\n            output[elem]++;\n\
    \        } else {\n            output[elem] = 1;\n        }\n    });\n    return\
    \ output;\n}\n", "  if (!test) {\n    return {};\n  }\n  const testArr = test.split('\
    \ ');\n  const result: {[key: string]: number} = {};\n  let arrMax = 0;\n  let\
    \ arrMaxElem = '';\n  testArr.forEach((elem) => {\n    result[elem] = result[elem]\
    \ + 1 || 1;\n    if (result[elem] > arrMax) {\n      arrMax = result[elem];\n\
    \      arrMaxElem = elem;\n    }\n  });\n  Object.keys(result).forEach((elem)\
    \ => {\n    if (result[elem] < arrMax) {\n      delete result[elem];\n    }\n\
    \  });\n  return result;\n}", "  let result: {[key: string]: number} = {};\n \
    \ let flag: boolean = false;\n  test.split(' ').forEach(function(item) {\n   \
    \ if (result[item] === undefined) {\n      result[item] = 1;\n    } else {\n \
    \     result[item] += 1;\n    }\n  });\n  let count: number = 0;\n  for (let key\
    \ in result) {\n    if (result[key] > count) {\n      count = result[key];\n \
    \   }\n  }\n  if (count === 1) {\n    flag = true;\n  }\n  for (let key in result)\
    \ {\n    if (result[key] !== count && flag === false) {\n      delete result[key];\n\
    \    }\n  }\n  return result;\n}", "    const letters: string[] = test.split('\
    \ ');\n    const letterCount: {[key: string]: number} = {};\n    letters.forEach(letter\
    \ => {\n        if (letterCount[letter]) {\n            letterCount[letter] +=\
    \ 1;\n        } else {\n            letterCount[letter] = 1;\n        }\n    });\n\
    \    const maxValue: number = Math.max(...Object.values(letterCount));\n    let\
    \ maxChar: string[] = [];\n    for (const key in letterCount) {\n        if (letterCount[key]\
    \ === maxValue) {\n            maxChar.push(key);\n        }\n    }\n    const\
    \ maxCharLength: number = maxChar.length;\n    const maxCharObj: {[key: string]:\
    \ number} = {};\n    for (let i = 0; i < maxCharLength; i++) {\n        maxCharObj[maxChar[i]]\
    \ = maxValue;\n    }\n    return maxCharObj;\n}\n", "    let hist: {[key: string]:\
    \ number} = {};\n    let words = test.split(' ');\n    for (let word of words)\
    \ {\n        if (hist[word]) {\n            hist[word]++;\n        } else {\n\
    \            hist[word] = 1;\n        }\n    }\n    return hist;\n}\n", "    const\
    \ r = {};\n    for (const char of test.split(' ')) {\n        if (r[char]) {\n\
    \            r[char]++;\n        } else {\n            r[char] = 1;\n        }\n\
    \    }\n    return r;\n}", "    if (test.length == 0) return {};\n    let obj\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (obj[arr[i]] == undefined) {\n            obj[arr[i]] = 1;\n\
    \        } else {\n            obj[arr[i]] += 1;\n        }\n    }\n    return\
    \ obj;\n}\n", "    let myDict = {};\n    test.split(' ').forEach(element => {\n\
    \        if(myDict[element]){\n            myDict[element] = myDict[element] +\
    \ 1;\n        } else {\n            myDict[element] = 1;\n        }\n    });\n\
    \    return myDict;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));\n", "    let letterCount = {};\n\
    \    let mostRepeated = [];\n    let mostRepeatedCount = 0;\n    test.split(\"\
    \ \").forEach(letter => {\n        letterCount[letter] = letterCount[letter] ===\
    \ undefined ? 1 : letterCount[letter] + 1;\n        if (letterCount[letter] >\
    \ mostRepeatedCount) {\n            mostRepeated = [letter];\n            mostRepeatedCount\
    \ = letterCount[letter];\n        } else if (letterCount[letter] === mostRepeatedCount)\
    \ {\n            mostRepeated.push(letter);\n        }\n    });\n    let result\
    \ = {};\n    mostRepeated.forEach(letter => {\n        result[letter] = mostRepeatedCount;\n\
    \    });\n    return result;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));", "  let hist = {};\n  let max =\
    \ 0;\n  let maxKeys = [];\n  let arr = test.split(\" \");\n  for (let i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] in hist) {\n      hist[arr[i]] += 1;\n\
    \    } else {\n      hist[arr[i]] = 1;\n    }\n    if (hist[arr[i]] > max) {\n\
    \      max = hist[arr[i]];\n      maxKeys = [arr[i]];\n    } else if (hist[arr[i]]\
    \ === max) {\n      maxKeys.push(arr[i]);\n    }\n  }\n  let final = {};\n  for\
    \ (let i = 0; i < maxKeys.length; i++) {\n    final[maxKeys[i]] = max;\n  }\n\
    \  return final;\n}\n", "  const chars: string[] = test.split(\" \");\n  const\
    \ map: {[key: string]: number} = {};\n  for (const char of chars) {\n    if (map[char])\
    \ {\n      map[char]++;\n    } else {\n      map[char] = 1;\n    }\n  }\n  return\
    \ map;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"\
    ));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"b b b b a\"\
    ));\nconsole.log(histogram(\"\"));\n", "  let store: {[key: string]: number} =\
    \ {};\n  let arr: string[] = test.split(\" \");\n  let max: number = 0;\n  let\
    \ maxVal: string[] = [];\n  let result: {[key: string]: number} = {};\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (store[arr[i]] === undefined) {\n    \
    \  store[arr[i]] = 1;\n    } else {\n      store[arr[i]]++;\n    }\n  }\n  for\
    \ (let key in store) {\n    if (store[key] > max) {\n      max = store[key];\n\
    \      maxVal = [];\n      maxVal.push(key);\n    } else if (store[key] === max)\
    \ {\n      maxVal.push(key);\n    }\n  }\n  for (let i = 0; i < maxVal.length;\
    \ i++) {\n    result[maxVal[i]] = max;\n  }\n  return result;\n}\n", "    let\
    \ result: {[key: string]: number} = {};\n    test.split(\" \").forEach(function(letter)\
    \ {\n        if (result[letter] != undefined) {\n            result[letter] +=\
    \ 1;\n        } else {\n            result[letter] = 1;\n        }\n    });\n\
    \    return result;\n}\n", "    let obj: {[key: string]: number} = {};\n    test.split(\"\
    \ \").forEach(a => obj[a] = (obj[a] || 0) + 1);\n    let result: {[key: string]:\
    \ number} = {};\n    Object.keys(obj).forEach(key => {\n        if (obj[key] >\
    \ (Object.values(result).pop() || 0)) {\n            result = {};\n          \
    \  result[key] = obj[key];\n        } else if (obj[key] === (Object.values(result).pop()\
    \ || 0)) {\n            result[key] = obj[key];\n        }\n    });\n    return\
    \ result;\n}\n", "    let letterValue: number = 0;\n    let letterCount: {[key:\
    \ string]: number} = {};\n    for (let i: number = 0; i < test.length; i++) {\n\
    \        if (test[i] === \" \") {\n            continue;\n        }\n        if\
    \ (letterCount[test[i]]) {\n            letterCount[test[i]]++;\n        } else\
    \ {\n            letterCount[test[i]] = 1;\n        }\n    }\n    for (let key\
    \ in letterCount) {\n        if (letterCount[key] > letterValue) {\n         \
    \   letterValue = letterCount[key];\n        }\n    }\n    for (let key in letterCount)\
    \ {\n        if (letterCount[key] !== letterValue) {\n            delete letterCount[key];\n\
    \        }\n    }\n    return letterCount;\n}\n", "    // split the string\n \
    \   const letters: string[] = test.split(' ');\n    // variables\n    let highest:\
    \ string = \"\";\n    let counter: number = 0;\n    let count: number = 0;\n \
    \   let object: {[key: string]: number} = {};\n    // loop over the letters\n\
    \    for (let i: number = 0; i < letters.length; i++) {\n        // check if the\
    \ letter is in the object\n        if (letters[i] in object) {\n            //\
    \ increment the letter count\n            object[letters[i]] += 1;\n        }\
    \ else {\n            // put the letter in the object\n            object[letters[i]]\
    \ = 1;\n        }\n    }\n    // find the highest count\n    for (let key in object)\
    \ {\n        if (object[key] > count) {\n            count = object[key];\n  \
    \          highest = key;\n        }\n    }\n    // check for ties\n    for (let\
    \ key in object) {\n        if (object[key] === count) {\n            counter++;\n\
    \        }\n    }\n    // if there are ties\n    if (counter > 1) {\n        object\
    \ = {};\n        for (let key in object) {\n            if (object[key] === count)\
    \ {\n                object[key] = count;\n            }\n        }\n    } else\
    \ {\n        object = {[highest]: count};\n    }\n    return object;\n}\n", " \
    \ if (!test.length) {\n    return {};\n  }\n  let histogram = test.split(\" \"\
    ).reduce((pre, cur) => {\n    return {\n      ...pre,\n      [cur]: pre[cur] ?\
    \ pre[cur] + 1 : 1\n    };\n  }, {});\n  let maxCount = Math.max(...Object.values(histogram));\n\
    \  return Object.keys(histogram).reduce((pre, cur) => {\n    if (histogram[cur]\
    \ !== maxCount) {\n      return pre;\n    }\n    return {\n      ...pre,\n   \
    \   [cur]: histogram[cur]\n    };\n  }, {});\n}\n", "    // your code here\n \
    \   let letterMap = {};\n    let letters = test.split(\" \");\n    for (let i\
    \ = 0; i < letters.length; i++) {\n        let letter = letters[i];\n        if\
    \ (letterMap[letter] === undefined) {\n            letterMap[letter] = 1;\n  \
    \      } else {\n            letterMap[letter] += 1;\n        }\n    }\n    return\
    \ letterMap;\n}\n", "    let result = {};\n    test.split(\" \").forEach(function(el)\
    \ {\n        if (el in result) {\n            result[el]++;\n        } else {\n\
    \            result[el] = 1;\n        }\n    });\n    return result;\n}\n", " \
    \   const list: string[] = test.split(\" \");\n    const count: {[key: string]:\
    \ number} = {};\n    list.forEach((l) => {\n        if (!count[l]) {\n       \
    \     count[l] = 1;\n        } else {\n            count[l]++;\n        }\n  \
    \  });\n    const max: number = list.reduce((prev, curr) => Math.max(prev, count[curr]),\
    \ 0);\n    const result: {[key: string]: number} = {};\n    for (const key in\
    \ count) {\n        if (count[key] === max) {\n            result[key] = count[key];\n\
    \        }\n    }\n    return result;\n}\n", "    var items = {};\n    for (var\
    \ i in test) {\n        if (test[i] in items) {\n            items[test[i]] +=\
    \ 1;\n        } else {\n            items[test[i]] = 1;\n        }\n    }\n  \
    \  return items;\n}\n", "    const hist: {[key: string]: number} = {};\n    const\
    \ tmp: string[] = test.split(\" \");\n    let max: number = 0;\n    for (let i\
    \ = 0; i < tmp.length; i++) {\n        if (tmp[i] in hist) {\n            hist[tmp[i]]++;\n\
    \        } else {\n            hist[tmp[i]] = 1;\n        }\n        if (hist[tmp[i]]\
    \ > max) {\n            max = hist[tmp[i]];\n        }\n    }\n    for (const\
    \ key in hist) {\n        if (hist[key] !== max) {\n            delete hist[key];\n\
    \        }\n    }\n    return hist;\n}\n", "  if (test.length == 0) {\n    return\
    \ {};\n  }\n  let dict: {[key: string]: number} = {};\n  let maxcount: number\
    \ = 0;\n  let maxkey: string = \"\";\n  let maxkeys: string[] = [];\n  let letters:\
    \ string[] = test.split(\" \");\n  for (let i = 0; i < letters.length; i++) {\n\
    \    if (dict[letters[i]] == undefined) {\n      dict[letters[i]] = 1;\n    }\
    \ else {\n      dict[letters[i]]++;\n    }\n    if (dict[letters[i]] > maxcount)\
    \ {\n      maxcount = dict[letters[i]];\n      maxkey = letters[i];\n      maxkeys\
    \ = [maxkey];\n    } else if (dict[letters[i]] == maxcount) {\n      maxkeys.push(letters[i]);\n\
    \    }\n  }\n  if (maxkeys.length == 1) {\n    return {[maxkey]: maxcount};\n\
    \  } else {\n    let result: {[key: string]: number} = {};\n    for (let i = 0;\
    \ i < maxkeys.length; i++) {\n      result[maxkeys[i]] = maxcount;\n    }\n  \
    \  return result;\n  }\n}\n\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));", "    var set: {[key: string]:\
    \ number} = {};\n    var words = test.split(' ');\n    for (var i: number = 0;\
    \ i < words.length; i++) {\n        var letters = words[i].split('');\n      \
    \  for (var j: number = 0; j < letters.length; j++) {\n            if (set[letters[j]])\
    \ {\n                set[letters[j]]++;\n            } else {\n              \
    \  set[letters[j]] = 1;\n            }\n        }\n    }\n    return set;\n}\n\
    \nconsole.log(histogram(\"\"));\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\n", "    const map: {[key: string]: number} = {};\n    for (const\
    \ char of test.split(' ')) {\n        if (map[char]) {\n            map[char]\
    \ += 1;\n        } else {\n            map[char] = 1;\n        }\n    }\n    let\
    \ result = {};\n    let max = 0;\n    for (const key in map) {\n        if (map[key]\
    \ > max) {\n            max = map[key];\n            result = {[key]: map[key]};\n\
    \        } else if (map[key] === max) {\n            result[key] = map[key];\n\
    \        }\n    }\n    return result;\n}\n", "    if (!test) return {};\n    const\
    \ split = test.split(' ');\n    const obj: {[key: string]: number} = {};\n   \
    \ split.forEach(s => {\n        if (obj[s]) {\n            obj[s] += 1;\n    \
    \    } else {\n            obj[s] = 1;\n        }\n    });\n    return obj;\n\
    }\n", "  const result: {[key: string]: number} = {};\n  test.split(' ').forEach(val\
    \ => {\n    if (result[val]) {\n      result[val]++;\n    } else {\n      result[val]\
    \ = 1;\n    }\n  });\n  return result;\n}\n\nconst test1 = 'a b c';\nconst test2\
    \ = 'a b b a';\nconst test3 = 'a b c a b';\nconst test4 = 'b b b b a';\n\nconsole.log(histogram(test1));\n\
    console.log(histogram(test2));\nconsole.log(histogram(test3));\nconsole.log(histogram(test4));",
  "    const letters: {[key: string]: number} = {};\n    test.split(' ').forEach(letter\
    \ => {\n        letters[letter] = (letters[letter] || 0) + 1;\n    });\n    return\
    \ letters;\n}\n", "  let returned: {[key: string]: number} = {};\n  test.split('\
    \ ').forEach(letter => {\n    if (returned[letter]) {\n      returned[letter]\
    \ += 1;\n    } else {\n      returned[letter] = 1;\n    }\n  });\n  return returned;\n\
    }\n", "  const res: {[key: string]: number} = {};\n  for (const letter of test.split('\
    \ ')) {\n    if (letter in res) {\n      res[letter]++;\n    } else {\n      res[letter]\
    \ = 1;\n    }\n  }\n  return res;\n}\n", "  const obj: {[key: string]: number}\
    \ = {};\n  if (test.length > 0) {\n    const arr = test.split(\" \");\n    arr.forEach((element)\
    \ => {\n      if (obj[element]) {\n        obj[element]++;\n      } else {\n \
    \       obj[element] = 1;\n      }\n    });\n  }\n  return obj;\n}\n", "    //\
    \ put your code here\n    return {};\n}\n\n", "    const hist: {[key: string]:\
    \ number} = {};\n    for (const letter of test.split(' ')) {\n        if (hist[letter])\
    \ {\n            hist[letter]++;\n        } else {\n            hist[letter] =\
    \ 1;\n        }\n    }\n    return hist;\n}\n", "    const result: {[key: string]:\
    \ number} = {};\n    test.split(\" \").forEach(chr => {\n        if (result[chr])\
    \ {\n            result[chr] += 1;\n        } else {\n            result[chr]\
    \ = 1;\n        }\n    });\n    return result;\n}\n\nconsole.log(histogram(\"\
    a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b\
    \ c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));", "    const chars = test.split(\" \");\n    const charcounts: {[key: string]:\
    \ number} = {};\n    chars.forEach(char => {\n        charcounts[char] = charcounts[char]\
    \ ? charcounts[char] + 1 : 1;\n    });\n    const maxcount = Object.keys(charcounts).reduce((a,\
    \ c) => {\n        return charcounts[c] > a ? charcounts[c] : a;\n    }, 0);\n\
    \    const maxchars = Object.keys(charcounts).filter(c => charcounts[c] === maxcount);\n\
    \    const maxobj: {[key: string]: number} = {};\n    maxchars.forEach(c => maxobj[c]\
    \ = maxcount);\n    return maxobj;\n}", "    let re: RegExp = /[a-z]/g;\n    let\
    \ match: RegExpExecArray | null;\n    let letter: string;\n    let result: {[key:\
    \ string]: number} = {};\n    while ((match = re.exec(test)) !== null) {\n   \
    \     letter = match[0];\n        if (result[letter] === undefined) {\n      \
    \      result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n    }\n    return result;\n}\n", "    let result = {};\n    let test2\
    \ = test.split(\" \");\n    for (let i = 0; i < test2.length; i++) {\n       \
    \ let char = test2[i];\n        if (result[char]) {\n            result[char]++;\n\
    \        } else {\n            result[char] = 1;\n        }\n    }\n    return\
    \ result;\n}\n", "    let split = test.split(\" \");\n    let newObj = {};\n \
    \   for (let i = 0; i < split.length; i++) {\n        if (!(split[i] in newObj))\
    \ {\n            newObj[split[i]] = 1;\n        } else {\n            newObj[split[i]]\
    \ += 1;\n        }\n    }\n    return newObj;\n}", "  let result: {[key: string]:\
    \ number} = {};\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] in\
    \ result) {\n      result[test[i]] += 1;\n    } else {\n      result[test[i]]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\nlet stringToBeTested: string = \"a\
    \ b c\";\nconsole.log(histogram(stringToBeTested));\n\nstringToBeTested = \"a\
    \ b b a\";\nconsole.log(histogram(stringToBeTested));\n\nstringToBeTested = \"\
    a b c a b\";\nconsole.log(histogram(stringToBeTested));\n\nstringToBeTested =\
    \ \"b b b b a\";\nconsole.log(histogram(stringToBeTested));\n\nstringToBeTested\
    \ = \"\";\nconsole.log(histogram(stringToBeTested));", "    const letters: {[key:\
    \ string]: number} = {};\n    const words = test.split(\" \");\n    for (const\
    \ word of words) {\n        if (letters[word]) {\n            letters[word] +=\
    \ 1;\n        } else {\n            letters[word] = 1;\n        }\n    }\n   \
    \ return letters;\n}\n", "  let result: {[key: string]: number} = {};\n  test.split(\"\
    \ \").forEach(element => {\n    if (result[element]) result[element]++;\n    else\
    \ result[element] = 1;\n  });\n  return result;\n}\n", "    let result = {};\n\
    \    test.split(' ').forEach(function(letter){\n        result[letter] = result[letter]\
    \ ? result[letter] + 1 : 1;\n    });\n    return result;\n}\n\nlet testCase =\
    \ 'a b c';\nconsole.log(histogram(testCase));\n\ntestCase = 'a b b a';\nconsole.log(histogram(testCase));\n\
    \ntestCase = 'a b c a b';\nconsole.log(histogram(testCase));\n\ntestCase = 'b\
    \ b b b a';\nconsole.log(histogram(testCase));\n\ntestCase = '';\nconsole.log(histogram(testCase));",
  "    let hist: {[key: string]: number} = {};\n    let max: number = 0;\n    let\
    \ results: {[key: string]: number} = {};\n    for (let i: number = 0; i < test.length;\
    \ i++) {\n        if (hist[test[i]] == undefined) {\n            hist[test[i]]\
    \ = 1;\n        } else {\n            hist[test[i]] += 1;\n        }\n       \
    \ if (hist[test[i]] > max) {\n            max = hist[test[i]];\n        }\n  \
    \  }\n    for (let i: number = 0; i < test.length; i++) {\n        if (hist[test[i]]\
    \ == max) {\n            results[test[i]] = max;\n        }\n    }\n    return\
    \ results;\n}\n", "    if (test === '') {\n        return {};\n    }\n    let\
    \ wordlist = test.split(' ');\n    let result: {[key: string]: number} = {};\n\
    \    let max: number = 1;\n    for (let i = 0; i < wordlist.length; i++) {\n \
    \       if (result[wordlist[i]]) {\n            result[wordlist[i]]++;\n     \
    \       if (result[wordlist[i]] > max) {\n                max = result[wordlist[i]];\n\
    \            }\n        } else {\n            result[wordlist[i]] = 1;\n     \
    \   }\n    }\n    if (max > 1) {\n        Object.keys(result).forEach(function(key)\
    \ {\n            if (result[key] < max) {\n                delete result[key];\n\
    \            }\n        });\n    }\n    return result;\n}\nconsole.log(histogram(\"\
    a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b\
    \ c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));", "    var arr = test.split(\" \");\n    return arr.reduce(function(acc,\
    \ next) {\n        acc[next] = (acc[next] || 0) + 1;\n        return acc;\n  \
    \  }, {});\n}\n", "    let freq = {};\n    let output = {};\n    let freq_max\
    \ = 0;\n    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (freq[letters[i]] === undefined) {\n            freq[letters[i]]\
    \ = 1;\n        } else {\n            freq[letters[i]] += 1;\n        }\n    }\n\
    \    for (let letter in freq) {\n        if (freq[letter] === freq_max) {\n  \
    \          output[letter] = freq[letter];\n        } else if (freq[letter] > freq_max)\
    \ {\n            freq_max = freq[letter];\n            output = {};\n        \
    \    output[letter] = freq[letter];\n        }\n    }\n    return output;\n}\n\
    console.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"\
    a b c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));\n", "    const result: {[key: string]: number} = {};\n    test.split(\"\
    \ \").forEach(function(letter: string) {\n        if (result[letter]) {\n    \
    \        result[letter]++;\n        } else {\n            result[letter] = 1;\n\
    \        }\n    });\n    return result;\n}\n", "  const result: {[key: string]:\
    \ number} = {};\n  const array = test.split(\" \");\n  let max = 0;\n  for (const\
    \ letter of array) {\n    if (result[letter]) {\n      result[letter]++;\n   \
    \ } else {\n      result[letter] = 1;\n    }\n    if (result[letter] > max) {\n\
    \      max = result[letter];\n    }\n  }\n  let results: {[key: string]: number}\
    \ = {};\n  for (const key in result) {\n    if (result[key] === max) {\n     \
    \ results[key] = result[key];\n    }\n  }\n  return results;\n}\n", "  let testArr\
    \ = test.split(\" \")\n  let obj = {}\n  for (let char of testArr) {\n    if (!obj[char])\
    \ {\n      obj[char] = 1\n    } else {\n      obj[char] = obj[char] + 1\n    }\n\
    \  }\n  return obj\n}\n", "    const entries = test.split(' ');\n    const result\
    \ = entries.reduce((acc, curr) => {\n        if (acc[curr]) {\n            acc[curr]++;\n\
    \        } else {\n            acc[curr] = 1;\n        }\n        return acc;\n\
    \    }, {});\n    return result;\n}\n\nconst histogram1 = histogram('a b c');\n\
    const histogram2 = histogram('a b b a');\nconst histogram3 = histogram('a b c\
    \ a b');\nconst histogram4 = histogram('b b b b a');\nconst histogram5 = histogram('');\n\
    \nconsole.log(histogram1);\nconsole.log(histogram2);\nconsole.log(histogram3);\n\
    console.log(histogram4);\nconsole.log(histogram5);\n", "    let result: {[key:\
    \ string]: number} = {};\n    let arr = test.split(\" \");\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]\
    \ += 1;\n        } else {\n            result[arr[i]] = 1;\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));\n", "  const word = test.split(\"\
    \ \");\n  let obj: {[key: string]: number} = {};\n  for (let i = 0; i < word.length;\
    \ i++) {\n    if (obj[word[i]] === undefined) {\n      obj[word[i]] = 1;\n   \
    \ } else {\n      obj[word[i]]++;\n    }\n  }\n  return obj;\n}\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"a b c a b\"));", "  let input = test.split(\"\
    \ \");\n  let result = {};\n  for (let i = 0; i < input.length; i++) {\n    if\
    \ (result[input[i]]) {\n      result[input[i]] += 1;\n    } else {\n      result[input[i]]\
    \ = 1;\n    }\n  }\n  return result;\n}\n", "    let result = {};\n    let letters\
    \ = test.split(' ');\n    let max = 0;\n    let maxKeys = [];\n    for (let i\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]] === undefined)\
    \ {\n            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n        if (result[letters[i]] > max) {\n            max = result[letters[i]];\n\
    \            maxKeys = [letters[i]];\n        } else if (result[letters[i]] ===\
    \ max) {\n            maxKeys.push(letters[i]);\n        }\n    }\n    for (let\
    \ key in result) {\n        if (maxKeys.indexOf(key) < 0) {\n            delete\
    \ result[key];\n        }\n    }\n    return result;\n}\n", "  const obj: {[key:\
    \ string]: number} = {};\n  const list: string[] = test.split(\" \");\n  for (let\
    \ i = 0; i < list.length; i++) {\n    if (obj[list[i]]) {\n      obj[list[i]]\
    \ += 1;\n    } else {\n      obj[list[i]] = 1;\n    }\n  }\n  return obj;\n}\n",
  "    let obj = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (obj[arr[i]]) {\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    let temp = [];\n    let\
    \ keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n    \
    \    if (obj[keys[i]] > 1) {\n            temp.push(keys[i]);\n        }\n   \
    \ }\n    for (let i = 0; i < temp.length; i++) {\n        delete obj[temp[i]];\n\
    \    }\n    return obj;\n}\n", "    const letterCount: {[key: string]: number}\
    \ = {};\n    test.split(\" \").forEach(char => {\n        if (char in letterCount)\
    \ {\n            letterCount[char] += 1;\n        } else {\n            letterCount[char]\
    \ = 1;\n        }\n    });\n    return letterCount;\n}\n", "    if (test.length\
    \ > 0) {\n        let result = {};\n        let split = test.split(' ');\n   \
    \     for (let i = 0; i < split.length; i++) {\n            if (result[split[i]])\
    \ {\n                result[split[i]] = result[split[i]] + 1;\n            } else\
    \ {\n                result[split[i]] = 1;\n            }\n        }\n       \
    \ return result;\n    } else {\n        return {};\n    }\n}\n", "  return test.split(\"\
    \ \").reduce((acc: {[key: string]: number}, value: string) => {\n    if (acc[value])\
    \ acc[value]++;\n    else acc[value] = 1;\n    return acc;\n  }, {});\n}\nconsole.log(histogram(\"\
    a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b\
    \ c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));\n", "    var dict: {[key: string]: number} = {};\n    test.split(' ').forEach(function(char:\
    \ string): void {\n        if (dict[char] == undefined) {\n            dict[char]\
    \ = 1;\n        } else {\n            dict[char] += 1;\n        }\n    });\n \
    \   return dict;\n}\n", "    const wordArray = test.split(\" \");\n    const wordArrayMap\
    \ = {};\n    wordArray.forEach(function(value){\n        if (wordArrayMap[value])\
    \ {\n            wordArrayMap[value]++;\n        } else {\n            wordArrayMap[value]\
    \ = 1;\n        }\n    });\n    return wordArrayMap;\n}\n", "  const result: {[key:\
    \ string]: number} = {};\n  const words = test.split(\" \");\n  for (const word\
    \ of words) {\n    if (word !== \"\") {\n      result[word] = (result[word] ||\
    \ 0) + 1;\n    }\n  }\n  return result;\n}\n", "    let test_dict: {[key: string]:\
    \ number} = {};\n    let res_dict: {[key: string]: number} = {};\n    let max:\
    \ number = 0;\n    if(test.length == 0) {\n        return {};\n    }\n    test\
    \ = test.replace(/\\s+/g, '');\n    for(let i = 0; i < test.length; i++) {\n \
    \       if(test_dict[test[i]]) {\n            test_dict[test[i]]++;\n        }\
    \ else {\n            test_dict[test[i]] = 1;\n        }\n    }\n    for(let key\
    \ in test_dict) {\n        if(test_dict[key] > max) {\n            max = test_dict[key];\n\
    \        }\n    }\n    for(let key in test_dict) {\n        if(test_dict[key]\
    \ == max) {\n            res_dict[key] = max;\n        }\n    }\n    return res_dict;\n\
    }\n", "    let letters = test.split(\" \");\n    let histo = {};\n    letters.forEach(function(letter)\
    \ {\n        if (letter in histo) {\n            histo[letter] = histo[letter]\
    \ + 1;\n        } else {\n            histo[letter] = 1;\n        }\n    });\n\
    \    return histo;\n}\n", "  let strs = test.split(' ');\n  let obj: {[key: string]:\
    \ number} = {};\n  for (let str of strs) {\n    if (obj[str]) {\n      obj[str]\
    \ += 1;\n    } else {\n      obj[str] = 1;\n    }\n  }\n  return obj;\n}\nconsole.log(histogram(\"\
    a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b\
    \ c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));\n", "  const result: {[key: string]: number} = {};\n  const arr: string[]\
    \ = test.split(' ');\n  for (let i: number = 0; i < arr.length; i++) {\n    if\
    \ (result[arr[i]]) {\n      result[arr[i]]++;\n    } else {\n      result[arr[i]]\
    \ = 1;\n    }\n  }\n  return result;\n}", "    let result: {[key: string]: number}\
    \ = {};\n    if (test.length !== 0) {\n        let arr = test.split(\" \");\n\
    \        for (let i = 0; i < arr.length; i++) {\n            if (result[arr[i]]\
    \ === undefined) {\n                result[arr[i]] = 1;\n            } else {\n\
    \                result[arr[i]]++;\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: {[key: string]: number} = {};\n    let keys:\
    \ string[] = test.split(\" \");\n    let current: string = \"\";\n    let last:\
    \ string = \"\";\n    let count: number = 0;\n    let i: number = 0;\n    let\
    \ j: number = 0;\n    let key: string = \"\";\n    let keys2: string[] = [];\n\
    \    while (i < keys.length) {\n        current = keys[i];\n        count = 0;\n\
    \        if (i > 0) {\n            last = keys[i - 1];\n        }\n        for\
    \ (j = 0; j < keys.length; j++) {\n            if (keys[j] === current) {\n  \
    \              count++;\n            }\n        }\n        result[current] = count;\n\
    \        i++;\n    }\n    let max = 0;\n    let maxCount = 0;\n    let max2 =\
    \ 0;\n    let maxCount2 = 0;\n    let maxkey = \"\";\n    let maxkey2 = \"\";\n\
    \    let maxkey3 = \"\";\n    let maxkey4 = \"\";\n    let maxkey5 = \"\";\n \
    \   for (key in result) {\n        maxCount = result[key];\n        if (maxCount\
    \ > max) {\n            maxkey = key;\n            max = maxCount;\n        }\n\
    \    }\n    for (key in result) {\n        maxCount2 = result[key];\n        if\
    \ (maxCount2 > max2 && maxCount2 < max) {\n            maxkey2 = key;\n      \
    \      max2 = maxCount2;\n        }\n    }\n    for (key in result) {\n      \
    \  maxCount2 = result[key];\n        if (maxCount2 > max2 && maxCount2 < max &&\
    \ maxkey2 !== key) {\n            maxkey3 = key;\n            max2 = maxCount2;\n\
    \        }\n    }\n    for (key in result) {\n        maxCount2 = result[key];\n\
    \        if (maxCount2 > max2 && maxCount2 < max && maxkey2 !== key && maxkey3\
    \ !== key) {\n            maxkey4 = key;\n            max2 = max", "    const\
    \ result: {[key: string]: number} = {};\n    const arr = test.split(' ');\n  \
    \  let max: number = 0;\n    let maxLetters: string[] = [];\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (arr[i] in result) {\n            result[arr[i]]\
    \ += 1;\n        } else {\n            result[arr[i]] = 1;\n        }\n      \
    \  if (result[arr[i]] > max) {\n            max = result[arr[i]];\n          \
    \  maxLetters = [arr[i]];\n        } else if (result[arr[i]] === max) {\n    \
    \        maxLetters.push(arr[i]);\n        }\n    }\n    const final: {[key: string]:\
    \ number} = {};\n    for (let i = 0; i < maxLetters.length; i++) {\n        final[maxLetters[i]]\
    \ = max;\n    }\n    return final;\n}\n\nconsole.log(histogram(\"a b c\"));\n\
    console.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\n\
    console.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\"));", "    let\
    \ arr = test.split(\" \");\n    let obj = {};\n    let set = new Set(arr);\n \
    \   let count = 0;\n    let max = 0;\n    let max_s = \"\";\n    let max_key =\
    \ \"\";\n    for (let key of set) {\n        for (let s of arr) {\n          \
    \  if (key === s) {\n                count += 1;\n            }\n        }\n \
    \       obj[key] = count;\n        count = 0;\n    }\n    for (let i in obj) {\n\
    \        if (obj[i] > max) {\n            max = obj[i];\n            max_key =\
    \ i;\n        }\n    }\n    for (let j in obj) {\n        if (obj[j] === max)\
    \ {\n            max_s += j + \" \";\n        }\n    }\n    if (max_s.length ===\
    \ 1) {\n        return {[max_key]: max};\n    } else {\n        let final = {};\n\
    \        let word = max_s.split(\" \");\n        for (let k of word) {\n     \
    \       final[k] = max;\n        }\n        return final;\n    }\n}\n", "    const\
    \ histo: {[key: string]: number} = {};\n    const letters: string[] = test.split('\
    \ ');\n    for (const letter of letters) {\n        if (histo[letter]) {\n   \
    \         histo[letter]++;\n        } else {\n            histo[letter] = 1;\n\
    \        }\n    }\n    const max: number = Math.max(...Object.values(histo));\n\
    \    const result: {[key: string]: number} = {};\n    for (const key in histo)\
    \ {\n        if (histo[key] === max) {\n            result[key] = histo[key];\n\
    \        }\n    }\n    return result;\n}\n", "    // check if test is empty\n\
    \    if (test.length == 0) {\n        return {};\n    }\n\n    // create dict\
    \ to store letter and its count\n    let dict: {[key: string]: number} = {};\n\
    \n    // split string into array of words\n    let words: string[] = test.split(\"\
    \ \");\n\n    // iterate through each word and count the letters\n    for (let\
    \ word of words) {\n        for (let letter of word) {\n            if (letter\
    \ in dict) {\n                dict[letter] += 1;\n            } else {\n     \
    \           dict[letter] = 1;\n            }\n        }\n    }\n\n    // find\
    \ the max count in the dictionary\n    let maxCount: number = -1;\n    for (let\
    \ key in dict) {\n        if (dict[key] > maxCount) {\n            maxCount =\
    \ dict[key];\n        }\n    }\n\n    // create a new dict with only keys having\
    \ the same max count\n    let newDict: {[key: string]: number} = {};\n    for\
    \ (let key in dict) {\n        if (dict[key] == maxCount) {\n            newDict[key]\
    \ = dict[key];\n        }\n    }\n\n    return newDict;\n}\n", "    let splitString\
    \ = test.split(\" \");\n    let histogram = {};\n    for (let i = 0; i < splitString.length;\
    \ i++) {\n        if (!histogram[splitString[i]]) {\n            histogram[splitString[i]]\
    \ = 1;\n        } else {\n            histogram[splitString[i]] += 1;\n      \
    \  }\n    }\n    return histogram;\n}\n", "    let result: {[key: string]: number}\
    \ = {};\n    for (let word of test.split(\" \")) {\n        if (word in result)\
    \ {\n            result[word] = result[word] + 1;\n        } else {\n        \
    \    result[word] = 1;\n        }\n    }\n    let max_value = 0;\n    let max_key\
    \ = \"\";\n    for (let key in result) {\n        if (result[key] > max_value)\
    \ {\n            max_value = result[key];\n            max_key = key;\n      \
    \  }\n    }\n    return max_key ? {[max_key]: max_value} : {};\n}\n", "    let\
    \ mostRepeatedLetter: string = \"\";\n    let mostRepeatedLetterCount: number\
    \ = 0;\n    let mostRepeatedLetters: {[key: string]: number} = {};\n    let letters:\
    \ string[] = test.split(\" \");\n    for (let letter of letters) {\n        let\
    \ count: number = 1;\n        if (letter in mostRepeatedLetters) {\n         \
    \   mostRepeatedLetters[letter]++;\n            if (mostRepeatedLetters[letter]\
    \ > mostRepeatedLetterCount) {\n                mostRepeatedLetterCount = mostRepeatedLetters[letter];\n\
    \                mostRepeatedLetter = letter;\n            }\n        } else {\n\
    \            mostRepeatedLetters[letter] = count;\n        }\n    }\n    return\
    \ mostRepeatedLetters;\n}\n", "    var arr = test.split(' ');\n    var obj: {[key:\
    \ string]: number} = {};\n    var letter: string;\n    var letterCount: number;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        letter = arr[i];\n      \
    \  if (obj[letter] != undefined) {\n            obj[letter]++;\n        } else\
    \ {\n            obj[letter] = 1;\n        }\n    }\n    var max = 0;\n    for\
    \ (var key in obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n\
    \        }\n    }\n    var newObj: {[key: string]: number} = {};\n    for (var\
    \ key in obj) {\n        if (obj[key] == max) {\n            newObj[key] = max;\n\
    \        }\n    }\n    return newObj;\n}", "  let parts = test.split(' ');\n \
    \ let hist: {[key: string]: number} = {};\n  parts.forEach(\n    (item: string)\
    \ => hist[item] = hist[item] ? hist[item] + 1 : 1\n  );\n  let max = Math.max(...Object.values(hist));\n\
    \  Object.keys(hist).forEach(\n    (item: string) => {\n      if (hist[item] !==\
    \ max) {\n        delete hist[item];\n      }\n    }\n  );\n  return hist;\n}\n",
  "    let dict: {[key: string]: number} = {};\n    let count: number = 0;\n    let\
    \ letters: string[] = test.split(\" \");\n    letters.forEach(letter => {\n  \
    \      count = 1;\n        for (let i = 0; i < letters.length; i++) {\n      \
    \      if (letter === letters[i]) {\n                count++;\n            }\n\
    \        }\n        dict[letter] = count;\n    });\n    return dict;\n}\n", " \
    \   let result = {};\n    let testArray = test.split(\" \");\n    for (let i =\
    \ 0; i < testArray.length; i++) {\n        if (result[testArray[i]]) {\n     \
    \       result[testArray[i]]++;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\n", "    let counter: {[key:\
    \ string]: number} = {};\n    for (let letter of test.split(' ')) {\n        if\
    \ (counter[letter]) {\n            counter[letter] += 1;\n        } else {\n \
    \           counter[letter] = 1;\n        }\n    }\n    return counter;\n}\n",
  "    if (test === \"\") {\n        return {};\n    }\n    const split = test.split(\"\
    \ \");\n    const hist: {[key: string]: number} = {};\n    for (const letter of\
    \ split) {\n        if (letter in hist) {\n            hist[letter]++;\n     \
    \   } else {\n            hist[letter] = 1;\n        }\n    }\n    let max = 0;\n\
    \    const maxKeys: string[] = [];\n    for (const key in hist) {\n        if\
    \ (hist[key] > max) {\n            max = hist[key];\n            maxKeys.length\
    \ = 0;\n            maxKeys.push(key);\n        } else if (hist[key] === max)\
    \ {\n            maxKeys.push(key);\n        }\n    }\n    const maxDict: {[key:\
    \ string]: number} = {};\n    for (const key of maxKeys) {\n        maxDict[key]\
    \ = max;\n    }\n    return maxDict;\n}\nconsole.log(histogram(\"a b c\"));\n\
    console.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\n\
    console.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\"));\n", "  \
    \  const counts: {[key: string]: number} = {};\n    for (const char of test.split('\
    \ ')) {\n        if (char === '') {\n            continue;\n        }\n      \
    \  counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    return counts;\n\
    }", "    let result: {[key: string]: number} = {};\n    if (test === \"\") {\n\
    \        return result;\n    }\n    let testArr: string[] = test.split(\" \");\n\
    \    let testHash: {[key: string]: number} = {};\n    for (let i = 0; i < testArr.length;\
    \ i++) {\n        if (testHash[testArr[i]] === undefined) {\n            testHash[testArr[i]]\
    \ = 1;\n        } else {\n            testHash[testArr[i]] += 1;\n        }\n\
    \    }\n    let max: number = 0;\n    for (let key in testHash) {\n        if\
    \ (testHash[key] > max) {\n            max = testHash[key];\n        }\n    }\n\
    \    for (let key in testHash) {\n        if (testHash[key] === max) {\n     \
    \       result[key] = max;\n        }\n    }\n    return result;\n}\n", "    let\
    \ histogram: {[key: string]: number} = {};\n    let most_occurrence: number =\
    \ 0;\n    let most_occurrence_letters: {[key: string]: number} = {};\n    for\
    \ (let letter of test.split(' ')) {\n        if (typeof histogram[letter] ===\
    \ 'undefined') {\n            histogram[letter] = 1;\n        } else {\n     \
    \       histogram[letter]++;\n        }\n        if (histogram[letter] > most_occurrence)\
    \ {\n            most_occurrence = histogram[letter];\n            most_occurrence_letters\
    \ = {};\n            most_occurrence_letters[letter] = most_occurrence;\n    \
    \    } else if (histogram[letter] === most_occurrence) {\n            most_occurrence_letters[letter]\
    \ = most_occurrence;\n        }\n    }\n    return most_occurrence_letters;\n\
    }\n", "    const letters = test.split(\" \");\n    const counts: {[key: string]:\
    \ number} = {};\n    for (const letter of letters) {\n        if (counts[letter])\
    \ {\n            counts[letter]++;\n        } else {\n            counts[letter]\
    \ = 1;\n        }\n    }\n    return counts;\n}\n", "  let dict: {[key: string]:\
    \ number} = {};\n  test.split(\" \").forEach(function(word: string) {\n    if\
    \ (!dict[word]) {\n      dict[word] = 1;\n    } else {\n      dict[word] += 1;\n\
    \    }\n  });\n  return dict;\n}\n", "  let splitArray = test.split(\" \");\n\
    \  let result: {[key: string]: number} = {};\n  for (let i = 0; i < splitArray.length;\
    \ i++) {\n    if (result[splitArray[i]] === undefined) {\n      result[splitArray[i]]\
    \ = 1;\n    } else {\n      result[splitArray[i]] += 1;\n    }\n  }\n  return\
    \ result;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b\
    \ b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"b\
    \ b b b a\"));\nconsole.log(histogram(\"\"));", "  let arr = test.split(\" \"\
    );\n  let res: {[key: string]: number} = {};\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (res[arr[i]] === undefined) {\n      res[arr[i]] = 1;\n    }\
    \ else {\n      res[arr[i]]++;\n    }\n  }\n  return res;\n}\nlet test1 = \"a\
    \ b c\";\nlet test2 = \"a b b a\";\nlet test3 = \"a b c a b\";\nlet test4 = \"\
    b b b b a\";\nlet test5 = \"\";\nconsole.log(histogram(test1));\nconsole.log(histogram(test2));\n\
    console.log(histogram(test3));\nconsole.log(histogram(test4));\nconsole.log(histogram(test5));",
  "    const letters = test.split(\" \");\n    const histogram = {};\n    let max\
    \ = 0;\n    for (const letter of letters) {\n        histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n        if (histogram[letter] > max) {\n     \
    \       max = histogram[letter];\n        }\n    }\n    return Object.keys(histogram).reduce((prev,\
    \ curr) => {\n        if (histogram[curr] >= max) {\n            prev[curr] =\
    \ histogram[curr];\n        }\n        return prev;\n    }, {});\n}\n", "  const\
    \ letters = {};\n  test.split(\" \").forEach(l => {\n    letters[l] = letters[l]\
    \ ? letters[l] + 1 : 1;\n  });\n  return letters;\n}\n", "  const entries = test.split('\
    \ ');\n  let rtn: {[key: string]: number} = {};\n  entries.forEach(entry => {\n\
    \    if (rtn[entry]) {\n      rtn[entry]++;\n    } else {\n      rtn[entry] =\
    \ 1;\n    }\n  });\n  return rtn;\n}", "    const histogram: {[key: string]: number}\
    \ = {};\n    const letters = test.split(' ');\n    const keys = [];\n    let max\
    \ = 0;\n    letters.forEach((letter) => {\n        if (histogram[letter]) {\n\
    \            histogram[letter] += 1;\n        } else {\n            histogram[letter]\
    \ = 1;\n        }\n        if (histogram[letter] > max) {\n            max = histogram[letter];\n\
    \        }\n    });\n    for (const key in histogram) {\n        if (histogram[key]\
    \ === max) {\n            keys.push(key);\n        }\n    }\n    return {[keys[0]]:\
    \ max};\n}\n", "    let word: string[] = test.split(\" \");\n    let result: {[key:\
    \ string]: number} = {};\n    for (let i: number = 0; i < word.length; i++) {\n\
    \        let letter: string = word[i];\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n    }\n    return result;\n}\n", "    var ret: {[key: string]: number}\
    \ = {};\n    if (test) {\n        test.split(\" \").forEach(function(key: string)\
    \ {\n            if (ret[key]) {\n                ret[key]++;\n            } else\
    \ {\n                ret[key] = 1;\n            }\n        });\n    }\n    return\
    \ ret;\n}", "    const result: {[key: string]: number} = {};\n    test.split(\"\
    \ \").forEach(item => {\n        if (item in result) {\n            result[item]++;\n\
    \        } else {\n            result[item] = 1;\n        }\n    });\n    return\
    \ result;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b\
    \ b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"b\
    \ b b b a\"));\nconsole.log(histogram(\"\"));\n", "    let out = {};\n    let\
    \ words = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n \
    \       if (out[words[i]]) {\n            out[words[i]]++;\n        } else {\n\
    \            out[words[i]] = 1;\n        }\n    }\n    return out;\n}\n", "  return\
    \ test.split(\" \").reduce((acc, letter) => {\n    acc[letter] = (acc[letter]\
    \ || 0) + 1;\n    return acc;\n  }, {});\n}\n", "  if (test === \"\") {\n    return\
    \ {};\n  }\n  let words = test.split(\" \");\n  let histo: {[key: string]: number}\
    \ = {};\n  let max = 0;\n  let maxLetter = \"\";\n  let tmp: string[] = [];\n\
    \  for (let i = 0; i < words.length; i++) {\n    if (histo[words[i]] === undefined)\
    \ {\n      histo[words[i]] = 1;\n    } else {\n      histo[words[i]] += 1;\n \
    \   }\n    if (histo[words[i]] > max) {\n      max = histo[words[i]];\n      maxLetter\
    \ = words[i];\n    }\n  }\n  for (let j = 0; j < words.length; j++) {\n    if\
    \ (histo[words[j]] === max) {\n      tmp.push(words[j]);\n    }\n  }\n  if (tmp.length\
    \ > 1) {\n    for (let k = 0; k < tmp.length; k++) {\n      delete histo[tmp[k]];\n\
    \    }\n    histo[tmp[0]] = max;\n  }\n  return histo;\n}\n", "    if (!test)\
    \ {\n        return {};\n    }\n    const keys = test.split(' ');\n    const tally\
    \ = {};\n    let max = 0;\n    let maxKey = '';\n    keys.forEach((key) => {\n\
    \        tally[key] = tally[key] ? tally[key] + 1 : 1;\n        if (tally[key]\
    \ > max) {\n            max = tally[key];\n            maxKey = key;\n       \
    \ }\n    });\n    const answer = {};\n    if (max === 1) {\n        return tally;\n\
    \    }\n    keys.forEach((key) => {\n        if (tally[key] === max) {\n     \
    \       answer[key] = max;\n        }\n    });\n    return answer;\n}\n", "  \
    \  var histogram: {[key: string]: number} = {};\n    var words = test.split(\"\
    \ \");\n    for (var i = 0; i < words.length; i++) {\n        if (histogram[words[i]]\
    \ == undefined) {\n            histogram[words[i]] = 1;\n        } else {\n  \
    \          histogram[words[i]]++;\n        }\n    }\n    return histogram;\n}\n",
  "  let strArr = test.split(' ');\n  let h = {};\n  for (let i = 0; i < strArr.length;\
    \ i++) {\n    let key = strArr[i];\n    if (h[key]) {\n      h[key]++;\n    }\
    \ else {\n      h[key] = 1;\n    }\n  }\n  return h;\n}\n", "    let result: {[key:\
    \ string]: number} = {};\n    if (test.length === 0) {\n        return result;\n\
    \    }\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n", "  let result = {};\n  let words = test.split(\" \");\n\
    \  for (let i = 0; i < words.length; i++) {\n    result[words[i]] = (result[words[i]]\
    \ || 0) + 1;\n  }\n  return result;\n}\n", "    //return null;\n    var result\
    \ = {};\n    var testArray = test.split(\" \");\n    var i: number;\n    var key:\
    \ string;\n    var keyOccurence: number;\n    var maxKey: string;\n    var maxKeyOccurence:\
    \ number;\n    var maxKeys: string[] = [];\n    var maxKeysOccurence: number;\n\
    \    //console.log(testArray);\n    maxKey = testArray[0];\n    maxKeyOccurence\
    \ = 1;\n    for (i = 0; i < testArray.length; i++) {\n        key = testArray[i];\n\
    \        keyOccurence = 1;\n        for (var j = i+1; j < testArray.length; j++)\
    \ {\n            if (key === testArray[j]) {\n                keyOccurence++;\n\
    \            }\n        }\n        result[key] = keyOccurence;\n        if (keyOccurence\
    \ > maxKeyOccurence) {\n            maxKey = key;\n            maxKeyOccurence\
    \ = keyOccurence;\n        }\n    }\n    console.log(result);\n    return result;\n\
    }", "  let result = {};\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]]\
    \ === undefined) {\n      result[test[i]] = 1;\n    } else {\n      result[test[i]]\
    \ += 1;\n    }\n  }\n  return result;\n}", "    let result: {[key: string]: number}\
    \ = {};\n    if (test !== \"\") {\n        let letters = test.split(\" \");\n\
    \        for (let i = 0; i < letters.length; i++) {\n            if (result[letters[i]]\
    \ !== undefined) {\n                result[letters[i]]++;\n            } else\
    \ {\n                result[letters[i]] = 1;\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let result: {[key: string]: number} = {};\n  \
    \  let arr = test.split(\" \");\n    let max = 0;\n    let maxKeys: string[] =\
    \ [];\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]] = result[arr[i]] + 1;\n        } else {\n    \
    \        result[arr[i]] = 1;\n        }\n        if (result[arr[i]] > max) {\n\
    \            max = result[arr[i]];\n            maxKeys = [arr[i]];\n        }\
    \ else if (result[arr[i]] === max) {\n            maxKeys.push(arr[i]);\n    \
    \    }\n    }\n    for (let key in result) {\n        if (maxKeys.indexOf(key)\
    \ === -1) {\n            delete result[key];\n        }\n    }\n    return result;\n\
    }", "  // Your code here\n  var dictionary: {[key: string]: number} = {};\n  var\
    \ maxCount: number = 0;\n  var maxCountKeys: string[] = [];\n  var split: string[]\
    \ = test.split(\" \");\n  for (var i: number = 0; i < split.length; i++) {\n \
    \   if (dictionary[split[i]] === undefined) {\n      dictionary[split[i]] = 1;\n\
    \    } else {\n      dictionary[split[i]]++;\n    }\n    if (dictionary[split[i]]\
    \ > maxCount) {\n      maxCount = dictionary[split[i]];\n      maxCountKeys =\
    \ [split[i]];\n    } else if (dictionary[split[i]] === maxCount) {\n      maxCountKeys.push(split[i]);\n\
    \    }\n  }\n  var toReturn: {[key: string]: number} = {};\n  for (var j: number\
    \ = 0; j < maxCountKeys.length; j++) {\n    toReturn[maxCountKeys[j]] = maxCount;\n\
    \  }\n  return toReturn;\n}", "    let output: {[key: string]: number} = {};\n\
    \    let max: number = 0;\n    let letter: string = \"\";\n    let letters: string[]\
    \ = test.split(\" \");\n    for (let i: number = 0; i < letters.length; i++) {\n\
    \        if (output[letters[i]]) {\n            output[letters[i]]++;\n      \
    \  } else {\n            output[letters[i]] = 1;\n        }\n        if (output[letters[i]]\
    \ > max) {\n            max = output[letters[i]];\n            letter = letters[i];\n\
    \        }\n    }\n    for (let key in output) {\n        if (output[key] !==\
    \ max) {\n            delete output[key];\n        }\n    }\n    return output;\n\
    }\n", "  if (!test) {\n    return {};\n  }\n  const map = new Map<string, number>();\n\
    \  test.split(' ').forEach(letter => {\n    const currentCount = map.get(letter)\
    \ || 0;\n    map.set(letter, currentCount + 1);\n  });\n  let letterWithMostRepetition\
    \ = '';\n  let count = 0;\n  map.forEach((value, key) => {\n    if (value > count)\
    \ {\n      letterWithMostRepetition = key;\n      count = value;\n    }\n  });\n\
    \  const result = {};\n  map.forEach((value, key) => {\n    if (value === count)\
    \ {\n      result[key] = value;\n    }\n  });\n  return result;\n}\n", "    let\
    \ results: {[key: string]: number} = {};\n    let words = test.split(\" \");\n\
    \    words.forEach(function(key){\n        if(!results[key]){\n            results[key]\
    \ = 0;\n        }\n        results[key]++;\n    });\n    return results;\n}\n\
    console.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"\
    a b c a b\"));\nconsole.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\
    \"));\n", "  const result: {[key: string]: number} = {};\n  test.split(' ').forEach(\n\
    \    letter => result[letter] = result[letter] ? result[letter] + 1 : 1\n  );\n\
    \  let maxCount = 0;\n  Object.keys(result).forEach(key => {\n    maxCount = result[key]\
    \ > maxCount ? result[key] : maxCount;\n  });\n  Object.keys(result).forEach(key\
    \ => {\n    if (result[key] < maxCount) {\n      delete result[key];\n    }\n\
    \  });\n  return result;\n}\n", "  const map = new Map<string, number>();\n  test.split(\"\
    \ \").forEach(char => {\n    map.set(char, (map.get(char) || 0) + 1);\n  });\n\
    \  const maxCount = Math.max(...Array.from(map.values()));\n  const solution =\
    \ {};\n  map.forEach((value, key) => {\n    if (value === maxCount) {\n      solution[key]\
    \ = value;\n    }\n  });\n  return solution;\n}\n\nexport { histogram };", " \
    \   let occurences: {[key: string]: number} = {};\n    for (let i = 0; i < test.length;\
    \ i++) {\n        if (test[i] !== \" \") {\n            if (test[i] in occurences)\
    \ {\n                occurences[test[i]]++;\n            } else {\n          \
    \      occurences[test[i]] = 1;\n            }\n        }\n    }\n    return occurences;\n\
    }", "    let hist: {[key: string]: number} = {};\n    for (let char of test.split(\"\
    \ \")) {\n        hist[char] = (hist[char] || 0) + 1;\n    }\n    return hist;\n\
    }\n", "    let dictionary: {[key: string]: number} = {};\n    let maxCount: number\
    \ = 0;\n    if(test.length === 0) return dictionary;\n    let splitted: string[]\
    \ = test.split(\" \");\n    splitted.forEach(letter => {\n        if(dictionary[letter]\
    \ === undefined) {\n            dictionary[letter] = 1;\n        } else {\n  \
    \          dictionary[letter] += 1;\n        }\n        if(dictionary[letter]\
    \ > maxCount) {\n            maxCount = dictionary[letter];\n        }\n    });\n\
    \    for(let key in dictionary) {\n        if(dictionary[key] < maxCount) {\n\
    \            delete dictionary[key];\n        }\n    }\n    return dictionary;\n\
    }", "    // Input Validation\n    if (!test || test.length == 0) return {};\n\n\
    \    const words: string[] = test.split(\" \");\n    const wordMap: {[key: string]:\
    \ number} = {};\n\n    for (let word of words) {\n        wordMap[word] = wordMap[word]\
    \ + 1 || 1;\n    }\n\n    const sortedWordMap: any[] = Object.keys(wordMap).map(function(key)\
    \ {\n        return [key, wordMap[key]];\n    });\n\n    sortedWordMap.sort(function(first,\
    \ second) {\n        return second[1] - first[1];\n    });\n\n    const highestCount:\
    \ number = sortedWordMap[0][1];\n    const result: {[key: string]: number} = {};\n\
    \n    for (let [word, count] of sortedWordMap) {\n        if (count == highestCount)\
    \ {\n            result[word] = count;\n        }\n    }\n\n    return result;\n\
    }\n", "  let letters: {[key: string]: number} = {};\n  for (let i = 0; i < test.length;\
    \ i++) {\n    if (!letters[test[i]]) {\n      letters[test[i]] = 1;\n    } else\
    \ {\n      letters[test[i]]++;\n    }\n  }\n  return letters;\n}\n", "    const\
    \ str = test.split(\" \");\n    const obj = {};\n    for (let i = 0; i < str.length;\
    \ i++) {\n        const key = str[i];\n        if (obj[key]) {\n            obj[key]++;\n\
    \        } else {\n            obj[key] = 1;\n        }\n    }\n    let max =\
    \ 0;\n    for (const key in obj) {\n        if (obj[key] > max) {\n          \
    \  max = obj[key];\n        }\n    }\n    const result = {};\n    for (const key\
    \ in obj) {\n        if (obj[key] === max) {\n            result[key] = max;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(histogram(\"a b c\"));\n\
    console.log(histogram(\"a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\n\
    console.log(histogram(\"b b b b a\"));\nconsole.log(histogram(\"\"));", "  let\
    \ result: {[key: string]: number} = {};\n  let testArr = test.split(\" \");\n\
    \  let max = 0;\n  let keys = [];\n  for (let i = 0; i < testArr.length; i++)\
    \ {\n    if (testArr[i] in result) {\n      result[testArr[i]]++;\n    } else\
    \ {\n      result[testArr[i]] = 1;\n    }\n  }\n  for (let key in result) {\n\
    \    if (result[key] > max) {\n      max = result[key];\n      keys = [key];\n\
    \    } else if (result[key] === max) {\n      keys.push(key);\n    }\n  }\n  for\
    \ (let i = 0; i < keys.length; i++) {\n    result[keys[i]] = max;\n  }\n  return\
    \ result;\n}\n", "  const letters: string[] = test.split(' ');\n  return letters.reduce((res:\
    \ {[key: string]: number}, letter: string) => {\n    res[letter] = (res[letter]\
    \ || 0) + 1;\n    return res;\n  }, {});\n}\n", "    let dict: {[key: string]:\
    \ number} = {};\n    let max_letter = ' ';\n    let max_val = 0;\n    test.split('\
    \ ').forEach(element => {\n        if(!(element in dict)){\n            dict[element]\
    \ = 1;\n        }\n        else{\n            dict[element] = dict[element] +\
    \ 1;\n        }\n        if(dict[element] > max_val){\n            max_val = dict[element];\n\
    \            max_letter = element;\n        }\n    });\n    return {[max_letter]:\
    \ max_val};\n}\n", "    let arr = test.split(' ');\n    let mf = 1;\n    let m\
    \ = 0;\n    let item;\n    let output = {};\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        for (let j = i; j < arr.length; j++) {\n            if (arr[i]\
    \ == arr[j])\n                m++;\n            if (mf < m) {\n              \
    \  mf = m;\n                item = arr[i];\n            }\n        }\n       \
    \ m = 0;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ == item) {\n            m++;\n        }\n    }\n    output[item] = m;\n    return\
    \ output;\n}\n", "    let obj: {[key: string]: number} = {};\n    let arr: string[]\
    \ = test.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (obj[arr[i]] == undefined) {\n            obj[arr[i]] = 1;\n        } else {\n\
    \            obj[arr[i]] += 1;\n        }\n    }\n    return obj;\n}\n", "  let\
    \ obj = {};\n  let charArr = test.split(' ');\n  for (let i=0; i<charArr.length;\
    \ i++) {\n    if (obj[charArr[i]]) {\n      obj[charArr[i]]++;\n    } else {\n\
    \      obj[charArr[i]] = 1;\n    }\n  }\n  let maxVal = Object.values(obj).reduce((a,\
    \ b) => Math.max(a, b));\n  let obj2 = {};\n  for (let j=0; j<charArr.length;\
    \ j++) {\n    if (obj[charArr[j]] === maxVal) {\n      obj2[charArr[j]] = maxVal;\n\
    \    }\n  }\n  return obj2;\n}", "  let obj: {[key: string]: number} = {};\n \
    \ test.split(\" \").forEach(char => {\n    if (obj[char]) {\n      obj[char] =\
    \ obj[char] + 1;\n    } else {\n      obj[char] = 1;\n    }\n  });\n  return obj;\n\
    }\n", "    let counts: {[key: string]: number} = {};\n    if (test == \"\") {\n\
    \        return counts;\n    }\n    let max = 0;\n    let splitString = test.split(\"\
    \ \");\n    for (let i = 0; i < splitString.length; i++) {\n        if (counts[splitString[i]]\
    \ != undefined) {\n            counts[splitString[i]] += 1;\n        } else {\n\
    \            counts[splitString[i]] = 1;\n        }\n        if (counts[splitString[i]]\
    \ > max) {\n            max = counts[splitString[i]];\n        }\n    }\n    let\
    \ result: {[key: string]: number} = {};\n    for (let i = 0; i < splitString.length;\
    \ i++) {\n        if (counts[splitString[i]] == max) {\n            result[splitString[i]]\
    \ = max;\n        }\n    }\n    return result;\n}\n", "    let obj = {};\n   \
    \ let arr = test.split(\" \");\n    let max = 0;\n    let key_max = \"\";\n  \
    \  arr.forEach(function(key) {\n        if (obj[key] == undefined) {\n       \
    \     obj[key] = 1;\n        } else {\n            obj[key]++;\n        }\n  \
    \      if (obj[key] > max) {\n            max = obj[key];\n            key_max\
    \ = key;\n        }\n    });\n    if (max == 1) {\n        return obj;\n    }\
    \ else {\n        obj = {};\n        obj[key_max] = max;\n        return obj;\n\
    \    }\n}\n", "  let a: string[] = test.split(\" \");\n  let new_a: any = {};\n\
    \  for (let i = 0; i < a.length; i++) {\n    if (new_a[a[i]]) {\n      new_a[a[i]]++;\n\
    \    } else {\n      new_a[a[i]] = 1;\n    }\n  }\n  return new_a;\n}\n", "  \
    \  let words: string[] = test.split(\" \");\n    let dict: {[key: string]: number}\
    \ = {};\n    for (let word of words) {\n        if (word in dict) {\n        \
    \    dict[word]++;\n        } else {\n            dict[word] = 1;\n        }\n\
    \    }\n    return dict;\n}", "  let result: {[key: string]: number} = {};\n \
    \ test.split(\" \").forEach(function(letter) {\n    result[letter] = result[letter]\
    \ ? result[letter] + 1 : 1;\n  });\n  let max: number = Math.max(...Object.values(result));\n\
    \  let subobj: {[key: string]: number} = {};\n  for (let key in result) {\n  \
    \  if (result[key] === max) {\n      subobj[key] = result[key];\n    }\n  }\n\
    \  return subobj;\n}\n", "    const testArr = test.split(\" \");\n    const testSet\
    \ = new Set(testArr);\n    const testObj: {[key: string]: number} = {};\n    for\
    \ (const test of testSet) {\n        const testCount = testArr.filter((x) => x\
    \ === test).length;\n        testObj[test] = testCount;\n    }\n    return testObj;\n\
    }\n", "    if (test == \"\") {\n        return {};\n    }\n\n    const counts:\
    \ Map<string, number> = new Map();\n    const letters: string[] = test.split(\"\
    \ \");\n\n    for (const letter of letters) {\n        const count = counts.get(letter);\n\
    \        if (count) {\n            counts.set(letter, count + 1);\n        } else\
    \ {\n            counts.set(letter, 1);\n        }\n    }\n\n    const highestCount\
    \ = Math.max(...Array.from(counts.values()));\n    const result: {[key: string]:\
    \ number} = {};\n    for (const [letter, count] of counts) {\n        if (count\
    \ === highestCount) {\n            result[letter] = count;\n        }\n    }\n\
    \n    return result;\n}\n\ninterface TestCase {\n    input: string;\n    expected:\
    \ {[key: string]: number};\n}\n\nconst tests: TestCase[] = [\n    {input: \"a\
    \ b c\", expected: {\"a\": 1, \"b\": 1, \"c\": 1}},\n    {input: \"a b b a\",\
    \ expected: {\"a\": 2, \"b\": 2}},\n    {input: \"a b c a b\", expected: {\"a\"\
    : 2, \"b\": 2}},\n    {input: \"b b b b a\", expected: {\"b\": 4}},\n    {input:\
    \ \"\", expected: {}},\n];\n\nfor (const test of tests) {\n    const result =\
    \ histogram(test.input);\n    console.log(result);\n    console.log(JSON.stringify(result)\
    \ === JSON.stringify(test.expected));\n}", "    const letters = {}\n    test.split('\
    \ ').forEach(letter => {\n        if (letters[letter]) {\n            letters[letter]\
    \ += 1\n        } else {\n            letters[letter] = 1\n        }\n    })\n\
    \    return letters\n}\n\nconsole.log(histogram(\"a b c\"))\nconsole.log(histogram(\"\
    a b b a\"))\nconsole.log(histogram(\"a b c a b\"))\nconsole.log(histogram(\"b\
    \ b b b a\"))\nconsole.log(histogram(\"\"))", "  let obj = {};\n  test.split(\"\
    \ \").forEach( (letter) => {\n    if ( obj[letter] ) {\n      obj[letter]++;\n\
    \    } else {\n      obj[letter] = 1;\n    }\n  });\n  return obj;\n}\n", "  \
    \  const letters: string[] = test.split(' ');\n    const values: {[key: string]:\
    \ number} = {};\n    letters.forEach(letter => {\n        if (values[letter])\
    \ {\n            values[letter]++;\n        } else {\n            values[letter]\
    \ = 1;\n        }\n    });\n    return values;\n}\n", "    const result: {[key:\
    \ string]: number} = {};\n    test.split(' ').forEach(element => {\n        if\
    \ (result[element]) {\n            result[element]++;\n        } else {\n    \
    \        result[element] = 1;\n        }\n    });\n    return result;\n}", " \
    \ // no idea why this is needed, TypeScript is complaining otherwise\n  let histo:\
    \ {[key: string]: number} = {};\n  if (test) {\n    test.split(\" \").forEach(x\
    \ => {\n      if (histo[x]) {\n        histo[x]++;\n      } else {\n        histo[x]\
    \ = 1;\n      }\n    });\n  }\n  return histo;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
