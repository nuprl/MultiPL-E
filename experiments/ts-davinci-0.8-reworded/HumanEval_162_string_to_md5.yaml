name: HumanEval_162_string_to_md5
language: ts
prompt: "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text'\
  \ is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n\
  // \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text: string): string\
  \ | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello\
  \ world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\
  \"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n\ntest();"
completions: ["  return text.length === 0 ? undefined : require(\"crypto\").createHash(\"\
    md5\").update(text).digest(\"hex\");\n}\n", "    if (text === \"\") {\n      \
    \  return undefined;\n    }\n    return crypto.createHash(\"md5\").update(text).digest(\"\
    hex\");\n}\n", "  if (text.length == 0) {\n    return undefined;\n  }\n\n  return\
    \ md5(text);\n}\n", "  if (!text) {\n    return undefined;\n  }\n  let hashedPassword\
    \ = crypto.createHash(\"md5\").update(text).digest(\"hex\");\n  return hashedPassword;\n\
    }\n", "    return isEmpty(text) ? undefined : crypto.createHash('md5').update(text).digest('hex');\n\
    }\n", "  if (text.length === 0) {\n    return undefined;\n  }\n  return crypto.createHash(\"\
    md5\").update(text).digest(\"hex\");\n}\n", "    if (text) {\n        return crypto.createHash('md5').update(text).digest('hex');\n\
    \    } else {\n        return undefined;\n    }\n}\n", "  const md5 = crypto.createHash(\"\
    md5\");\n  return text.length > 0 ? md5.update(text).digest(\"hex\") : undefined;\n\
    }\n", "  if (!text) {\n    return undefined;\n  }\n  return crypto.createHash(\"\
    md5\").update(text).digest(\"hex\");\n}\n", "  let hash = crypto.createHash(\"\
    md5\");\n  hash.update(text);\n  let res = hash.digest(\"hex\");\n  return res;\n\
    }\n", "  if (text.length > 0) {\n    return md5(text);\n  }\n  return undefined;\n\
    }\n", "    if (!text) {\n        return undefined;\n    }\n    let result = crypto.createHash('md5').update(text).digest('hex');\n\
    \    return result;\n}\n", "    if (text.length === 0) {\n        return undefined;\n\
    \    }\n\n    const crypto = require('crypto');\n    const hash = crypto.createHash('md5').update(text).digest('hex');\n\
    \    return hash;\n}\n", "  if (text.length === 0) {\n    return undefined;\n\
    \  }\n  var md5: any = crypto.createHash(\"md5\");\n  md5.update(text);\n  return\
    \ md5.digest(\"hex\");\n}\n", "  if (text === '') {\n    return undefined;\n \
    \ }\n  let stringBuffer = Buffer.from(text);\n  return crypto.createHash('md5').update(stringBuffer).digest('hex');\n\
    }\n", "    if (text.length === 0) {\n        return undefined;\n    }\n    //\
    \ TODO\n    return undefined;\n}\n", "  return text.length === 0 ? undefined :\
    \ md5(text);\n}\n", "  return (\n    text &&\n    crypto\n      .createHash(\"\
    md5\")\n      .update(text)\n      .digest(\"hex\")\n  );\n}\n", "  if (text ===\
    \ \"\") {\n    return undefined;\n  }\n  return createHash(\"md5\").update(text).digest(\"\
    hex\");\n}\n", "    return text === \"\" ? undefined : md5(text)\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
