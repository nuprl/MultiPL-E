language: ts
name: HumanEval_80_is_happy
results:
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let arr = [...s];\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        if (arr[i] == arr[i + 1] && arr[i] == arr[i +\
    \ 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"aabb\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpriajeu9o.ts(18,19): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return (s.length >= 3 && s.length % 3 ===\
    \ 0) && s.split('').every((x, i) => (i + 1) % 3 !== 0 || x !== s[i - 1] && x !==\
    \ s[i - 2])\n}\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('bbeeaabb'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_dykbwfq.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_dykbwfq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    false

    false

    '
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && Array.from(new Set(s.match(/[a-z]{3}/g)\
    \ || [])).length > 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd6a_ir5v.ts(18,33): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmpd6a_ir5v.ts(18,42): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy_counter = 0;\n    if (s.length\
    \ > 2) {\n        for (let i = 0; i < s.length - 2; i++) {\n            if (s[i]\
    \ !== s[i + 1] && s[i] !== s[i + 2] && s[i + 1] !== s[i + 2]) {\n            \
    \    happy_counter++;\n            }\n        }\n        if (happy_counter ===\
    \ s.length - 2) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  const length: number = s.length;\n  const\
    \ arr = [];\n  for (let i = 0; i < length; i++) {\n    if (i + 2 <= length) {\n\
    \      arr.push(s.slice(i, i + 3));\n    }\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const set = new Set(arr[i]);\n    if (set.size === 2) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc9tv7r7u.ts(26,21): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    else {\n        let haps = [];\n        haps.push(s[0]);\n       \
    \ for (let i = 1; i < s.length; i++) {\n            if (s[i] === s[i - 1]) {\n\
    \                return false;\n            }\n            else {\n          \
    \      haps.push(s[i]);\n            }\n        }\n        return true;\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpelwrzd5r.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpelwrzd5r.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let flag = false;\n    if (s.length > 2)\
    \ {\n        for (let i = 2; i < s.length; i++) {\n            if (s[i] !== s[i\
    \ - 1] && s[i] !== s[i - 2] && s[i - 1] !== s[i - 2]) {\n                flag\
    \ = true;\n            } else {\n                flag = false;\n             \
    \   break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let r = false;\n    if (s.length >= 3) {\n\
    \        let a = [];\n        for (let i = 0; i < s.length; i++) {\n         \
    \   a.push(s[i]);\n        }\n        a.splice(0, 3);\n        let s2 = a.join('');\n\
    \        if (s2.includes(s[0]) || s2.includes(s[1]) || s2.includes(s[2])) {\n\
    \            r = false;\n        } else {\n            r = true;\n        }\n\
    \    }\n    return r;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdha5ewgc.ts(26,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpdha5ewgc.ts(26,37): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpdha5ewgc.ts(26,58): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && (\n        s.slice(0,\
    \ 3).split('').every((e, i, a) => e !== a[(i + 1) % 3])\n        || is_happy(s.slice(1))\n\
    \    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvrcla0yy.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvrcla0yy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 2; i < s.length; i++) {\n        if (s[i] === s[i - 1] && s[i] ===\
    \ s[i - 2]) return false;\n    }\n    return true;\n}\nconsole.log(is_happy('abcdef'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp02dwysp4.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp02dwysp4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    const uniques = new Set();\n    let isHappy = true;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (i >= 3) {\n            uniques.delete(s[i\
    \ - 3]);\n        }\n        if (uniques.has(s[i])) {\n            isHappy = false;\n\
    \            break;\n        }\n        uniques.add(s[i]);\n    }\n    return\
    \ isHappy;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyarb39o2.ts(22,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    const arr = s.split('');\n    if (arr.length\
    \ < 3) {\n        return false;\n    }\n    for (let i = 0; i < arr.length - 2;\
    \ i++) {\n        if (arr[i] === arr[i + 1] || arr[i] === arr[i + 2] || arr[i\
    \ + 1] === arr[i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let i = 0;\n  while (i < s.length - 2) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \    i++;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return undefined;\n}\n\nexport { is_happy\
    \ };\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk2uli8__.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk2uli8__.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy = true;\n    if (s.length < 3)\
    \ {\n        happy = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            let first: string = s.charAt(i);\n            let second:\
    \ string = s.charAt(i + 1);\n            let third: string = s.charAt(i + 2);\n\
    \            if (first === second && second === third) {\n                happy\
    \ = false;\n            }\n        }\n    }\n    return happy;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp55yuxeij.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp55yuxeij.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let set = new Set();\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (i + 3 > s.length) {\n            break;\n\
    \        }\n        let str = s.substring(i, i + 3);\n        let unique = new\
    \ Set(str);\n        if (unique.size != 3) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbxuowdc0.ts(18,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    ../../../../../tmp/tmpbxuowdc0.ts(24,26): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    let\
    \ temp = s.split('');\n    for (let i = 0; i < temp.length; i += 3) {\n      \
    \  if (temp[i] === temp[i + 1] || temp[i] === temp[i + 2] || temp[i + 1] === temp[i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxil8226i.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxil8226i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && !s.match(/(.)\\\
    1{2,}/);\n}\n\nconsole.log(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabc\"));\n\
    console.log(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabx\"));\nconsole.log(is_happy(\"\
    abcabcabcabcabcabcabcabcabcabcabcabca\"));\nconsole.log(is_happy(\"bbcabcabcabcabcabcabcabcabcabcabcabca\"\
    ));\nconsole.log(is_happy(\"abcaabcaabcaabcaabcaabcaabcaabcaabcaabc\"));\nconsole.log(is_happy(\"\
    abcabcabcabcabcabcabcabcabcabcabcabcab\"));\nconsole.log(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabcabx\"\
    ));\nconsole.log(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabcabcc\"));\nconsole.log(is_happy(\"\
    bbcabcabcabcabcabcabcabcabcabcabcabcabcc\"));\nconsole.log(is_happy(\"abcaabcaabcaabcaabcaabcaabcaabcaabcaabcc\"\
    ));\nconsole.log(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqmmu7rkh.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqmmu7rkh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    true

    true

    true

    true

    true

    true

    true

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && !s.split('').some((char,\
    \ index) => {\n    return char === s[index + 1] && char === s[index + 2];\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpluvxn_79.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpluvxn_79.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015582
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let length: number = s.length;\n  if (length\
    \ < 3) {\n    return false;\n  } else {\n    for (let i: number = 0; i < length\
    \ - 2; i++) {\n      if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\
    }\nconsole.log(is_happy('adb'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && !s.match(/([a-z])\\\
    1{2,}/i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6lub0ohi.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6lub0ohi.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let temp = [];\n    for (let i = 0; i <\
    \ s.length; i++) {\n        if (temp.indexOf(s[i]) == -1) {\n            temp.push(s[i]);\n\
    \        }\n    }\n    if (temp.length < 3) {\n        return false;\n    }\n\
    \    else {\n        return true;\n    }\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptihym75n.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptihym75n.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && s.match(/(.)\\1\\\
    1/g) === null;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptjeodf5n.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptjeodf5n.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        let c1 = s.charAt(i);\n\
    \        let c2 = s.charAt(i + 1);\n        let c3 = s.charAt(i + 2);\n      \
    \  if (c1 == c2 || c1 == c3 || c2 == c3) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015581
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let ret: boolean = false;\n    if (s.length\
    \ < 3) {\n        ret = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] !== s[i + 1] && s[i] !== s[i + 2] && s[i +\
    \ 1] !== s[i + 2]) {\n                ret = true;\n            } else {\n    \
    \            ret = false;\n                break;\n            }\n        }\n\
    \    }\n    return ret;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015582
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = true;\n    let i = 0;\n   \
    \ if (s.length < 3) {\n        result = false;\n    } else {\n        for (i =\
    \ 2; i < s.length; i++) {\n            if (s[i] == s[i - 1] || s[i] == s[i - 2])\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abc\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"\
    adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // Your code here\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnc4svly4.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnc4svly4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let p = s.length;\n    if (p < 3) return\
    \ false;\n    for (let i = 0; i < p - 2; i++) {\n        if (s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015581
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy:boolean = true;\n    if (s.length\
    \ < 3) {\n        happy = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i +\
    \ 1] === s[i + 2]) {\n                happy = false;\n            }\n        }\n\
    \    }\n    return happy;\n}\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015581
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let res: boolean = true;\n    let s_array:\
    \ string[] = s.split('');\n    // console.log(s_array);\n    if (s_array.length\
    \ < 3) {\n        res = false;\n    } else {\n        for (let i = 0; i < s_array.length\
    \ - 2; i++) {\n            if (s_array[i] === s_array[i + 1] || s_array[i] ===\
    \ s_array[i + 2] || s_array[i + 1] === s_array[i + 2]) {\n                res\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ res;\n}\n\nconsole.log(is_happy('aabb'));\n\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let totalLength = s.length;\n    let counter\
    \ = 0;\n    for (let i = 0; i < totalLength; i++) {\n        if (i < totalLength\
    \ - 2) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n                counter++;\n            }\n        }\n    }\n \
    \   return counter === 0;\n}\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgu11k8x6.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgu11k8x6.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    true

    false

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return false;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4x1dvm4e.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4x1dvm4e.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015582
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let arr = Array.from(s);\n    let set =\
    \ new Set(arr);\n    if (arr.length < 3 || set.size < 3) return false;\n    for\
    \ (let i = 0; i < arr.length - 2; i++) {\n        if (arr[i] === arr[i + 1] ||\
    \ arr[i] === arr[i + 2] || arr[i + 1] === arr[i + 2]) return false;\n    }\n \
    \   return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzkcu3vwf.ts(18,21): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmpzkcu3vwf.ts(19,19): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && s[0] !== s[1] && s[1]\
    \ !== s[2] && s[0] !== s[2];\n}\nconsole.log(is_happy(\"abcd\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeph0tke2.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeph0tke2.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu_y14_7r.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu_y14_7r.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let cpy: string = s.toLowerCase();\n   \
    \ return cpy.length > 2 && cpy.match(/[a-z]{3}/g).every(el => el[0] != el[1] &&\
    \ el[1] != el[2] && el[0] != el[2]);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzsy7vfcz.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzsy7vfcz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015582
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length > 2 && s.length % 3 == 0\
    \ && s.length % 2 != 0 && s.split('').filter((el, i, arr) => el == arr[i + 1]\
    \ && el == arr[i + 2]).length == 0;\n}\n\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd_vnkqnl.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd_vnkqnl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    true

    true

    false

    false

    '
  timestamp: 1660015581
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // Write your code here\n    let result:\
    \ boolean = false;\n    let n: number = s.length;\n    let happy: boolean[] =\
    \ new Array(n).fill(false);\n    if (n >= 3) {\n        for (let i: number = 0;\
    \ i < n - 2; i++) {\n            let condition: boolean = true;\n            let\
    \ x: string = s.charAt(i);\n            let y: string = s.charAt(i + 1);\n   \
    \         let z: string = s.charAt(i + 2);\n            if (x === y || x === z\
    \ || y === z) {\n                condition = false;\n            }\n         \
    \   happy[i] = condition;\n        }\n        for (let i: number = 0; i < n -\
    \ 2; i++) {\n            if (happy[i] === false) {\n                result = false;\n\
    \                break;\n            } else {\n                result = true;\n\
    \            }\n        }\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp22abphig.ts(21,41): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let charArr = s.split(\"\");\n  if (charArr.length\
    \ < 3) {\n    return false;\n  }\n  for (let i = 0; i < charArr.length - 2; i++)\
    \ {\n    if (charArr[i] === charArr[i + 1] && charArr[i + 1] === charArr[i + 2])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsoayuzgk.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsoayuzgk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let hap: boolean = false;\n  for (let i =\
    \ 0; i < s.length; i++) {\n    if (s.charAt(i) != s.charAt(i + 1) && s.charAt(i)\
    \ != s.charAt(i + 2)) {\n      hap = true;\n    } else if (s.charAt(i) == s.charAt(i\
    \ + 1) && s.charAt(i) == s.charAt(i + 2)) {\n      hap = false;\n    }\n  }\n\
    \  return hap;\n}\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"\
    ));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqkjk_219.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqkjk_219.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    '
  timestamp: 1660015582
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    let\
    \ isHappy = true;\n    let i = 0;\n    while (i < s.length - 2) {\n        if\
    \ (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      \
    \      isHappy = false;\n            break;\n        }\n        i++;\n    }\n\
    \    return isHappy;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return (s.length >= 3 && s.length % 3 ===\
    \ 0) && s.match(/(.).*\\1/g) == null;\n}\n\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_3zevnwq.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3zevnwq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    '
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let count = 0;\n    let word = '';\n   \
    \ let flag = true;\n    if (s.length < 3) {\n        return false;\n    }\n  \
    \  for (let i = 0; i < s.length; i++) {\n        word += s[i];\n        count++;\n\
    \        if (count === 3) {\n            if (word[0] === word[1] || word[0] ===\
    \ word[2] || word[1] === word[2]) {\n                flag = false;\n         \
    \   }\n            count = 0;\n            word = '';\n        }\n    }\n    return\
    \ flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp71qp1d61.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp71qp1d61.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let alphaArray = [\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"];\n  let array1 = [];\n  let array2 = [];\n  let boolArray = [];\n  let counter\
    \ = 0;\n  let counter2 = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.length\
    \ < 3) {\n      return false;\n    }\n    else {\n      array1.push(s[i]);\n \
    \   }\n  }\n  for (let i = 0; i < array1.length; i++) {\n    array2.push(array1[i]);\n\
    \    counter++;\n    if (counter == 3) {\n      if (array2[0] == array2[1] ||\
    \ array2[0] == array2[2] || array2[1] == array2[2]) {\n        return false;\n\
    \      }\n      counter = 0;\n      array2 = [];\n    }\n  }\n  return true;\n\
    }\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpay7s3gct.js:57:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpay7s3gct.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    '
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 2; i < s.length; i += 3) {\n        if (s[i] === s[i - 1] || s[i] ===\
    \ s[i - 2] || s[i - 1] === s[i - 2]) return false;\n    }\n    return true;\n\
    }\n\nexport function runTests(): void {\n    const inputs = [\n        'a',\n\
    \        'aa',\n        'abcd',\n        'aabb',\n        'adb',\n        'xyy',\n\
    \    ];\n    const expected = [\n        false,\n        false,\n        true,\n\
    \        false,\n        true,\n        false,\n    ];\n\n    inputs.forEach((input,\
    \ index) => {\n        const result = is_happy(input);\n        if (result !==\
    \ expected[index]) {\n            throw new Error(`Test failed for ${input}: expected\
    \ ${expected[index]}, got ${result}`);\n        }\n    });\n\n    console.log('All\
    \ tests passed for is_happy');\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphv98a9b2.js:64:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphv98a9b2.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  // return true if string has 3 or more consecutive\n\
    \  // unique chars.\n  if (s.length < 3) {\n    return false;\n  }\n  for (let\
    \ i = 0; i < s.length - 2; i++) {\n    if (s[i] !== s[i + 1] && s[i] !== s[i +\
    \ 2] && s[i + 1] !== s[i + 2]) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_0xlltww.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_0xlltww.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length >= 3) {\n        for (let i\
    \ = 2; i < s.length; i++) {\n            if (s[i] === s[i - 1] && s[i] === s[i\
    \ - 2]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    return false;\n}\nconsole.log(is_happy('abcde'));\nconsole.log(is_happy('abbcde'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_0tg23ea.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_0tg23ea.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    '
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  //TODO: implement the function\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxs75rr8s.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxs75rr8s.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015586
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    else\
    \ return s.split('').map((item, i, s) => {\n        if (i < s.length - 2) {\n\
    \            return s.substr(i, 3).split('').reduce((acc, curr) => {\n       \
    \         if (acc.includes(curr)) return false;\n                else return acc.concat(curr);\n\
    \            }, []);\n        }\n    }).every(item => item !== false);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpngv04xig.ts(21,22): error TS2339: Property ''substr''
    does not exist on type ''string[]''.

    '
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let set = new Set<string>();\n    for (let i = 0; i < s.length - 2;\
    \ i++) {\n        set.add(s.substring(i, i + 3));\n    }\n    return set.size\
    \ === s.length - 2;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8qetn4fs.ts(21,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\nconsole.log(is_happy('aa'))\nconsole.log(is_happy('abcd'))\nconsole.log(is_happy('aabb'))\n\
    console.log(is_happy('adb'))\nconsole.log(is_happy('xyy'))\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    true

    false

    true

    false

    '
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length < 3 ? false : !/([a-z])\\\
    1{2}/i.test(s);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9i9bp7l3.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9i9bp7l3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let isHappy: boolean = false;\n    let len:\
    \ number = s.length;\n    if (len >= 3) {\n        for (let i: number = 0; i <\
    \ len - 2; i++) {\n            let str: string = s.substr(i, 3);\n           \
    \ let strLen: number = str.length;\n            for (let j: number = 0; j < strLen\
    \ - 1; j++) {\n                if (str[j] === str[j + 1]) {\n                \
    \    isHappy = false;\n                    break;\n                } else {\n\
    \                    isHappy = true;\n                }\n            }\n     \
    \   }\n    }\n    return isHappy;\n}\nlet s: string = 'abcd';\nconsole.log(is_happy(s));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt1wdg0h5.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt1wdg0h5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let i: number = 0;\n    let result: boolean\
    \ = true;\n    let j: number = i + 3;\n    for (; i < s.length - 2; i++) {\n \
    \       let str: string = s.substring(i, j);\n        for (let k: number = 0;\
    \ k < str.length; k++) {\n            for (let l: number = k + 1; l < str.length;\
    \ l++) {\n                if (str[k] === str[l]) {\n                    result\
    \ = false;\n                }\n            }\n        }\n        j++;\n    }\n\
    \    return result;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88r2fpg3.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp88r2fpg3.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    true

    false

    '
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    let\
    \ a = [];\n    a.push(s[0]);\n    a.push(s[1]);\n    a.push(s[2]);\n    if (a[0]\
    \ == a[1] || a[0] == a[2] || a[1] == a[2]) return false;\n    let index = 3;\n\
    \    while (index < s.length) {\n        let newChar = s[index];\n        if (a[0]\
    \ == newChar || a[1] == newChar || a[2] == newChar) return false;\n        a.push(newChar);\n\
    \        a.shift();\n        index++;\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdofkv11j.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdofkv11j.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && !s.match(/(.)\\\
    1{2,}/);\n}\n\nconsole.log(is_happy('abcabcabc'));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj2a1e1rt.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj2a1e1rt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n\n  return true;\n}\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015587
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  // Your code here\n  let check = false;\n\
    \  const test = s.split(\"\");\n  if (test.length < 3) {\n    return check;\n\
    \  } else {\n    for (let i = 2; i < test.length; i++) {\n      if (test[i] !==\
    \ test[i - 1] && test[i] !== test[i - 2]) {\n        check = true;\n      } else\
    \ {\n        check = false;\n        break;\n      }\n    }\n  }\n  return check;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    const len = s.length;\n    if (len < 3)\
    \ return false;\n    for (let i = 0; i < len - 2; i++) {\n        const c1 = s.charAt(i);\n\
    \        const c2 = s.charAt(i + 1);\n        const c3 = s.charAt(i + 2);\n  \
    \      if (c1 === c2 || c1 === c3 || c2 === c3) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    if (s.length % 3 !== 0) {\n        return false;\n    }\n    for (let\
    \ i = 0; i < s.length; i += 3) {\n        let str = s.slice(i, i + 3);\n     \
    \   if (str[0] === str[1] || str[0] === str[2] || str[1] === str[2]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_happy('xyy'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('aaa'));\nconsole.log(is_happy('aabb'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqtruuc09.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqtruuc09.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    false

    '
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let r: boolean = false;\n    let list: string[]\
    \ = [];\n    let letter: string = s.charAt(0);\n    let letter1: string = s.charAt(1);\n\
    \    let letter2: string = s.charAt(2);\n    if (s.length >= 3) {\n        list.push(letter);\n\
    \        list.push(letter1);\n        list.push(letter2);\n        console.log(list);\n\
    \        if ((list[0] != list[1]) && (list[1] != list[2]) && (list[0] != list[2]))\
    \ {\n            r = true;\n        }\n    }\n    return r;\n}\nconsole.log(is_happy(\"\
    aabb\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvt82dgyi.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvt82dgyi.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''a'', ''a'', ''b'' ]

    false

    [ ''a'', ''b'', ''c'' ]

    [ ''a'', ''a'', ''b'' ]

    [ ''a'', ''d'', ''b'' ]

    [ ''x'', ''y'', ''y'' ]

    [ ''i'', ''o'', ''p'' ]

    [ ''i'', ''o'', ''p'' ]

    '
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 2; i < s.length; i++) {\n        if (s[i] === s[i -\
    \ 1] && s[i] === s[i - 2]) {\n            return false;\n        }\n    }\n\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6fy2wlkw.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6fy2wlkw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let cnt = 1;\n  for (let i = 0; i < s.length\
    \ - 1; i++) {\n    if (s[i] === s[i + 1]) {\n      cnt++;\n    } else {\n    \
    \  cnt = 1;\n    }\n    if (cnt === 3) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9u08fssl.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9u08fssl.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let temp = s[0] + s[1] + s[2];\n  for (let i = 3; i < s.length; i++) {\n\
    \    if (s[i] === temp[0] || s[i] === temp[1] || s[i] === temp[2]) {\n      return\
    \ false;\n    }\n    temp = temp[1] + temp[2] + s[i];\n  }\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpop3v73iw.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpop3v73iw.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu_y14_7r.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu_y14_7r.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015581
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return /^(.)(?!\\1{2})\\w*(.)(?!\\2{2})\\\
    w*(.)(?!\\3{2})\\w*$/.test(s);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp721ii_xy.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp721ii_xy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  // your code here\n  let hap = true;\n  let\
    \ arr = s.split(\"\");\n  if (arr.length < 3) {\n    return false;\n  }\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] == arr[i + 1] && arr[i +\
    \ 1] == arr[i + 2]) {\n      hap = false;\n    }\n  }\n  return hap;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl3y4ofwm.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl3y4ofwm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nconsole.log(is_happy(\"abc\"));\nconsole.log(is_happy(\"\
    acb\"));\nconsole.log(is_happy(\"abac\"));\nconsole.log(is_happy(\"yxy\"));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    false

    false

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015591
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  const a = s.split(\"\");\n  const b = a.filter((e, i) => e !== a[i + 1]\
    \ && e !== a[i + 2]);\n  if (b.length === a.length) {\n    return true;\n  }\n\
    \  return false;\n}\n\ntest(\"is_happy\", () => {\n  expect(is_happy(\"a\")).toBe(false);\n\
    \  expect(is_happy(\"aa\")).toBe(false);\n  expect(is_happy(\"abcd\")).toBe(true);\n\
    \  expect(is_happy(\"aabb\")).toBe(false);\n  expect(is_happy(\"adb\")).toBe(true);\n\
    \  expect(is_happy(\"xyy\")).toBe(false);\n});\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpndigj879.ts(29,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpndigj879.ts(30,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpndigj879.ts(31,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpndigj879.ts(32,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpndigj879.ts(33,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpndigj879.ts(34,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpndigj879.ts(35,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015591
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && ![...s].every((val,\
    \ index, arr) => val === arr[index + 2]);\n}\n\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp71cbm258.ts(18,34): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let arr = s.split('');\n    let check: boolean\
    \ = true;\n    if (arr.length < 3) {\n        return false;\n    }\n    for (let\
    \ i = 0; i < arr.length - 3; i += 3) {\n        if (arr[i] === arr[i + 1] || arr[i]\
    \ === arr[i + 2] || arr[i + 1] === arr[i + 2]) {\n            check = false;\n\
    \        }\n    }\n    return check;\n}\nconsole.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\n\
    console.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm9hk80c6.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm9hk80c6.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    true

    true

    '
  timestamp: 1660015591
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let isHappy: boolean = false;\n    const\
    \ sLength: number = s.length;\n    if (sLength < 3) {\n        return isHappy;\n\
    \    }\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n\
    \    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let\
    \ o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number\
    \ = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n\
    \    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let\
    \ y: number = 0;\n    let z: number = 0;\n    for (let i = 0; i < sLength; i++)\
    \ {\n        if (s[i] === \"a\") {\n            a++;\n        }\n        if (s[i]\
    \ === \"b\") {\n            b++;\n        }\n        if (s[i] === \"c\") {\n \
    \           c++;\n        }\n        if (s[i] === \"d\") {\n            d++;\n\
    \        }\n        if (s[i] === \"e\") {\n            e++;\n        }\n     \
    \   if (s[i] === \"f\") {\n            f++;\n        }\n        if (s[i] === \"\
    g\") {\n            g++;\n        }\n        if (s[i] === \"h\") {\n         \
    \   h++;\n        }\n        if (s[i] === \"i\") {\n            i++;\n       \
    \ }\n        if (s[i] === \"j\") {\n            j++;\n        }\n        if (s[i]\
    \ === \"k\") {\n            k++;\n        }\n        if (s[i] === \"l\") {\n \
    \           l++;\n        }\n        if (s[i] === \"m\") {\n            m++;\n\
    \        }\n        if (s[i] === \"n\") {\n            n++;\n        }\n     \
    \   if (s[i] === \"o\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ewpatfs.ts(101,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015591
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && [...s].every((letter,\
    \ index, letters) => {\n        return (index === 0) ||\n            (index ===\
    \ 1) ||\n            !(letter === letters[index - 1] || letter === letters[index\
    \ - 2]);\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyma_ilir.ts(18,33): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    else\
    \ {\n        for (let i = 0; i < s.length - 2; i++) {\n            if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let check: boolean = false;\n  if (s.length\
    \ >= 3) {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        check = false;\n\
    \        break;\n      } else {\n        check = true;\n      }\n    }\n  }\n\
    \  return check;\n}\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"\
    aabb\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660015591
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3\n    && s.match(/[^.]{3}/g)?.every((v)\
    \ => v[0] !== v[1] && v[1] !== v[2] && v[0] !== v[2]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshnnthc1.ts(19,28): error TS1109: Expression expected.

    ../../../../../tmp/tmpshnnthc1.ts(19,90): error TS1005: '':'' expected.

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let result = false;\n  if (s.length >= 3)\
    \ {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] !== s[i + 1]\
    \ && s[i] !== s[i + 2] && s[i + 1] !== s[i + 2]) {\n        result = true;\n \
    \     } else {\n        result = false;\n        break;\n      }\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let happy: boolean = false;\n  let strLen\
    \ = s.length;\n  if (strLen >= 3) {\n    for (let i = 0; i < strLen - 2; i++)\
    \ {\n      if (s[i] !== s[i + 1] && s[i] !== s[i + 2] && s[i + 1] !== s[i + 2])\
    \ {\n        happy = true;\n      } else {\n        happy = false;\n        break;\n\
    \      }\n    }\n  }\n  return happy;\n}\n\nconsole.log(is_happy(\"abcd\"));\n\
    console.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"\
    xyy\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let result = true;\n  if (s.length < 3) {\n\
    \    result = false;\n  } else {\n    for (let i = 0; i < s.length - 2; i++) {\n\
    \      if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n\
    \        result = false;\n      }\n    }\n  }\n  return result;\n}\nconsole.log(is_happy('aabb'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    '
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let hapts = true;\n    if (s.length >= 3)\
    \ {\n        for (let i = 0; i < s.length - 2; i++) {\n            if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n                hapts\
    \ = false;\n            }\n        }\n    } else {\n        hapts = false;\n \
    \   }\n    return hapts;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015592
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    //check valid input\n    if (s.length <\
    \ 3) {\n        return false;\n    }\n\n    //check if chars are unique\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015591
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    let length = s.length;\n    for (let i = 0; i < length - 2; i++)\
    \ {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i +\
    \ 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015595
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 &&\n        ![...s].some((val,\
    \ index, s) => s[index + 1] === val && s[index + 2] === val);\n}\n\nconsole.log(is_happy('abcd'));\n\
    console.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9fphzues.ts(19,14): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015596
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && [...s].every((_, i,\
    \ a) => i < a.length - 2 && a[i] !== a[i + 1] && a[i] !== a[i + 2] && a[i + 1]\
    \ !== a[i + 2]);\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmoguu9l9.ts(18,31): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015595
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && /^(.).\\1{2}/g.test(s)\
    \ == false;\n}\n\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"xyy\"\
    ));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqx9m9kg2.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqx9m9kg2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    '
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015596
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let char_array = s.split('');\n    let char_map\
    \ = {};\n    if (char_array.length < 3) {\n        return false;\n    } else {\n\
    \        for (let i = 0; i < char_array.length; i++) {\n            char_map[char_array[i]]\
    \ = true;\n        }\n        if (Object.keys(char_map).length >= 3) {\n     \
    \       return true;\n        } else {\n            return false;\n        }\n\
    \    }\n}\nconsole.log(is_happy('xyy'));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpteqrp4jn.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpteqrp4jn.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    '
  timestamp: 1660015596
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  // Your code here\n  const len = s.length;\n\
    \  if (len < 3) {\n    return false;\n  }\n  const arr = s.split(\"\");\n  for\
    \ (let i = 0; i < len - 2; i++) {\n    const s1 = arr[i];\n    const s2 = arr[i\
    \ + 1];\n    const s3 = arr[i + 2];\n    if (s1 === s2 || s1 === s3 || s2 ===\
    \ s3) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndescribe(\"is_happy\"\
    , function() {\n  it(\"Sample Tests\", function() {\n    expect(is_happy(\"a\"\
    )).toBe(false);\n    expect(is_happy(\"aa\")).toBe(false);\n    expect(is_happy(\"\
    abcd\")).toBe(true);\n    expect(is_happy(\"aabb\")).toBe(false);\n    expect(is_happy(\"\
    adb\")).toBe(true);\n    expect(is_happy(\"xyy\")).toBe(false);\n  });\n});\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5mces69h.ts(35,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmp5mces69h.ts(36,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmp5mces69h.ts(37,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5mces69h.ts(38,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5mces69h.ts(39,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5mces69h.ts(40,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5mces69h.ts(41,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp5mces69h.ts(42,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015596
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 &&\n        Array.from(s)\n\
    \            .slice(2)\n            .every((c, i) => s[i] !== s[i + 1] && s[i]\
    \ !== s[i + 2] && s[i + 1] !== s[i + 2]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5tn3gwi6.ts(19,15): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660015595
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let isHappy = false;\n  let newStr = s.split(\"\
    \");\n  let i = 0;\n  let j = i + 3;\n  if (newStr.length < 3) {\n    return isHappy;\n\
    \  } else {\n    while (j <= newStr.length) {\n      for (let a = i; a < j; a++)\
    \ {\n        for (let b = a + 1; b < j; b++) {\n          if (newStr[a] === newStr[b])\
    \ {\n            isHappy = false;\n            return isHappy;\n          } else\
    \ {\n            isHappy = true;\n          }\n        }\n      }\n      i++;\n\
    \      j++;\n    }\n  }\n  return isHappy;\n}\nconsole.log(is_happy(\"abcd\"));\n\
    console.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"\
    xyy\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  const trimmed = s.trim();\n  if (trimmed.length\
    \ < 3) {\n    return false;\n  }\n  for (let i = 0; i < trimmed.length - 2; i++)\
    \ {\n    const first = trimmed[i];\n    const second = trimmed[i + 1];\n    const\
    \ third = trimmed[i + 2];\n    if (first === second || first === third || second\
    \ === third) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015596
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let distinct = new Set();\n  let result = true;\n  let i = 0;\n  while\
    \ (i < s.length) {\n    if (distinct.has(s[i])) {\n      result = false;\n   \
    \   break;\n    }\n    distinct.add(s[i]);\n    i++;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ci44tii.ts(21,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015596
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return (\n    s.length >= 3 &&\n    !s.match(\n\
    \      /([a-z])\\1{2,}|([a-z])([a-z])\\2|([a-z])([a-z])([a-z])\\3|([a-z])([a-z])([a-z])([a-z])\\\
    4/\n    )\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt2uq68qg.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt2uq68qg.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  const length = s.length;\n  if (length < 3)\
    \ {\n    return false;\n  }\n\n  for (let i = 0; i < length - 2; i++) {\n    if\
    \ (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return\
    \ false;\n    }\n  }\n\n  return true;\n}\n\nconsole.log(is_happy(\"abcd\"));\n\
    console.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    '
  timestamp: 1660015596
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length > 2 &&\n        s.match(/[^\\\
    w]+/g).length === 0 &&\n        s.match(/([a-z])\\1{2,}/g) === null;\n}\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abc'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpa4imgexn.js:19\n        s.match(/[^\\w]+/g).length === 0 &&\n \
    \                         ^\n\nTypeError: Cannot read properties of null (reading\
    \ 'length')\n    at is_happy (/tmp/tmpa4imgexn.js:19:27)\n    at Object.<anonymous>\
    \ (/tmp/tmpa4imgexn.js:23:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: 'false

    '
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length >= 3) {\n        for (let i\
    \ = 0; i < s.length - 2; i++) {\n            if (s[i] === s[i + 1] || s[i] ===\
    \ s[i + 2] || s[i + 1] === s[i + 2]) {\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015597
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n\n  let prevPrev = s[0];\n  let prev = s[1];\n  let current = s[2];\n\n \
    \ for (let i = 3; i < s.length; i++) {\n    if (prev === current && prevPrev ===\
    \ current) {\n      return false;\n    }\n\n    prevPrev = prev;\n    prev = current;\n\
    \    current = s[i];\n  }\n\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6hpjwd1e.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6hpjwd1e.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let bool: boolean = false;\n    let counter:\
    \ number = 0;\n    let arr: string[] = [];\n    if (s.length >= 3) {\n       \
    \ for (let i: number = 0; i < s.length; i++) {\n            if (i + 2 <= s.length)\
    \ {\n                if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n                    bool = false;\n                    break;\n\
    \                } else {\n                    bool = true;\n                }\n\
    \            }\n        }\n    }\n    return bool;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015596
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let i = 0;\n  let counter = 0;\n  while (i\
    \ < s.length - 2) {\n    if (s[i] !== s[i + 1] && s[i] !== s[i + 2] && s[i + 1]\
    \ !== s[i + 2]) {\n      counter++;\n    }\n    i++;\n  }\n  return counter >\
    \ 0;\n}\nconsole.log(is_happy(\"aabb\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptrdnj3fv.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrdnj3fv.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    '
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        let j = i + 1;\n\
    \        let k = i + 2;\n        if (s[i] === s[j] || s[i] === s[k] || s[j] ===\
    \ s[k]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015596
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length < 3 ? false :\n        s.slice(0,\
    \ 3).split('').reduce((acc, curr) => acc + (s.includes(curr) ? 1 : 0), 0) ===\
    \ 3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4wfn06no.ts(19,64): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660015596
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && !s.match(/(.)\\\
    1\\1/);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwmdr9_ek.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwmdr9_ek.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015596
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length < 3 ? false : [...s].every((x,\
    \ i, a) => i < a.length - 2 ? x !== a[i + 1] && x !== a[i + 2] : true);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4knr71er.ts(18,39): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015596
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = false;\n    let consectutiveLetters\
    \ = s.split('');\n    if (consectutiveLetters.length >= 3) {\n        let distinctLetters\
    \ = [];\n        for (let i = 0; i < consectutiveLetters.length; i++) {\n    \
    \        if (distinctLetters.indexOf(consectutiveLetters[i]) === -1) {\n     \
    \           distinctLetters.push(consectutiveLetters[i]);\n            }\n   \
    \     }\n        result = consectutiveLetters.length === distinctLetters.length;\n\
    \    }\n    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp74sdzqxd.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp74sdzqxd.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015600
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length > 2 && s.split('').every((v,\
    \ i, a) => i < a.length - 2 ? v !== a[i + 1] && v !== a[i + 2] : true);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyswwebyo.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyswwebyo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015600
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    let count = 0;\n    let i = 0;\n    while (i < s.length - 1) {\n \
    \       if (s[i] === s[i + 1]) {\n            count++;\n        } else {\n   \
    \         count = 0;\n        }\n        if (count === 2) {\n            return\
    \ false;\n        }\n        i++;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp78rdz7a3.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp78rdz7a3.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015600
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 &&\n    s.split('').slice(0,\
    \ s.length - 2).every((e, i) => e !== s[i + 1] && e !== s[i + 2] && s[i + 1] !==\
    \ s[i + 2]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    const k = s.length;\n    if (k < 3) {\n\
    \        return false;\n    } else {\n        let i = 0;\n        while (i <=\
    \ s.length - 3) {\n            if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i\
    \ + 1] === s[i + 2]) {\n                return false;\n            }\n       \
    \     i++;\n        }\n        return true;\n    }\n}\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015600
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 2; i < s.length; i++) {\n    if (s[i] === s[i - 1] && s[i]\
    \ === s[i - 2]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntest(is_happy(\"\
    a\"), false);\ntest(is_happy(\"aa\"), false);\ntest(is_happy(\"abcd\"), true);\n\
    test(is_happy(\"aabb\"), false);\ntest(is_happy(\"adb\"), true);\ntest(is_happy(\"\
    xyy\"), false);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5ukbtfg_.ts(29,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmp5ukbtfg_.ts(30,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp5ukbtfg_.ts(31,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp5ukbtfg_.ts(32,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp5ukbtfg_.ts(33,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmp5ukbtfg_.ts(34,6): error TS2554: Expected 0 arguments, but
    got 2.

    '
  timestamp: 1660015600
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let splitted: string[] = s.split(\"\");\n  let i: number = 0;\n  let numOfDistinct:\
    \ number = 0;\n  for (let i: number = 0; i < splitted.length - 2; i++) {\n   \
    \ if (splitted[i] === splitted[i + 1] || splitted[i] === splitted[i + 2] || splitted[i\
    \ + 1] === splitted[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\n\
    console.log(is_happy(\"xyy\"));\nconsole.log(is_happy(\"aaabbb\"));\nconsole.log(is_happy(\"\
    aabbc\"));\nconsole.log(is_happy(\"abcdabcdabcd\"));\nconsole.log(is_happy(\"\
    aaa\"));\nconsole.log(is_happy(\"xyxyxyx\"));\nconsole.log(is_happy(\"asdsadd\"\
    ));\nconsole.log(is_happy(\"aacc\"));\nconsole.log(is_happy(\"aaaabcd\"));\nconsole.log(is_happy(\"\
    abcabcabcabc\"));\nconsole.log(is_happy(\"abc\"));\nconsole.log(is_happy(\"aaaabcabc\"\
    ));\nconsole.log(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnpd_vge0.ts(49,539): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpnpd_vge0.ts(50,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpnpd_vge0.ts(50,9): error TS1005: '','' expected.

    '
  timestamp: 1660015600
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length < 3 ? false : !s.match(/(.)\\\
    1\\1/g);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq_ndedw9.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq_ndedw9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    let letters = s.split('');\n    let g1 = letters.slice(0, 3);\n\
    \    let g2 = letters.slice(1, 4);\n    let g3 = letters.slice(2, 5);\n\n    if\
    \ ((new Set(g1)).size !== 3 || (new Set(g2)).size !== 3 || (new Set(g3)).size\
    \ !== 3) {\n        return false;\n    }\n\n    for (let i = 0; i < letters.length\
    \ - 3; i++) {\n        let g1 = letters.slice(i, i + 3);\n        let g2 = letters.slice(i\
    \ + 1, i + 4);\n        let g3 = letters.slice(i + 2, i + 5);\n\n        if ((new\
    \ Set(g1)).size !== 3 || (new Set(g2)).size !== 3 || (new Set(g3)).size !== 3)\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_jsenggp.ts(27,14): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp_jsenggp.ts(27,42): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp_jsenggp.ts(27,70): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp_jsenggp.ts(36,18): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp_jsenggp.ts(36,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp_jsenggp.ts(36,74): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && s.split('').every((val,\
    \ idx, arr) => idx === 0 || arr[idx - 1] !== val);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp91wax80g.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp91wax80g.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015601
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return false;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4x1dvm4e.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4x1dvm4e.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015582
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // TODO: add your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6ol2ckfx.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ol2ckfx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015601
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let set = new Set();\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (i > 0 && i < s.length - 1) {\n           \
    \ if (s[i - 1] !== s[i] && s[i] !== s[i + 1] && s[i - 1] !== s[i + 1]) {\n   \
    \             set.add(s[i]);\n            }\n        }\n    }\n    if (set.size\
    \ > 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcq9ps67d.ts(18,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\nconsole.log(is_happy(\"abcd\"));\n\
    console.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"\
    a\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\nconsole.log(is_happy(\"\
    xyyxx\"));\nconsole.log(is_happy(\"xyyyx\"));\nconsole.log(is_happy(\"xxyyy\"\
    ));\nconsole.log(is_happy(\"yyyxx\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    false

    true

    false

    false

    false

    false

    false

    '
  timestamp: 1660015601
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let bool1 = s.length >= 3;\n  let bool2 =\
    \ [...s].every((elem, index, array) => {\n    return index === array.length -\
    \ 1\n      ? true\n      : elem === array[index + 1] && elem === array[index +\
    \ 2];\n  });\n  return bool1 && !bool2;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdw21dv3f.ts(19,19): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = false;\n    let array:\
    \ string[] = s.split('');\n    if (array.length < 3) {\n        return result;\n\
    \    }\n    for (let i = 0; i < array.length - 2; i++) {\n        if (array[i]\
    \ != array[i + 1] && array[i] != array[i + 2] && array[i + 1] != array[i + 2])\
    \ {\n            result = true;\n        } else {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abc'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result: boolean = false;\n    let arr:\
    \ string[] = s.split('');\n    console.log(arr);\n    if (arr.length >= 3) {\n\
    \        for (let i: number = 0; i < arr.length - 2; i++) {\n            if (arr[i]\
    \ !== arr[i + 1] && arr[i] !== arr[i + 2] && arr[i + 1] !== arr[i + 2]) {\n  \
    \              result = true;\n            } else {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[ 'a', 'b', 'c', 'd' ]\ntrue\n[ 'a', 'a', 'b', 'b' ]\nfalse\n[ 'a', 'd',\
    \ 'b' ]\ntrue\n[ 'x', 'y', 'y' ]\nfalse\n[ 'a' ]\n[ 'a', 'a' ]\n[ 'a', 'b', 'c',\
    \ 'd' ]\n[ 'a', 'a', 'b', 'b' ]\n[ 'a', 'd', 'b' ]\n[ 'x', 'y', 'y' ]\n[\n  'i',\
    \ 'o', 'p',\n  'a', 'x', 'p',\n  'o', 'i'\n]\n[\n  'i', 'o', 'p',\n  'a', 'x',\
    \ 'i',\n  'o', 'i'\n]\n"
  timestamp: 1660015601
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let chars = s.split('');\n    if (chars.length\
    \ < 3) {\n        return false;\n    }\n    for (let i = 0; i < chars.length -\
    \ 2; i++) {\n        if (chars[i] === chars[i + 1] && chars[i] === chars[i + 2])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplx58h6h5.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplx58h6h5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015601
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let chars = s.split(\"\");\n  for (let i =\
    \ 0; i < chars.length - 2; i++) {\n    if (chars[i] === chars[i + 1] || chars[i]\
    \ === chars[i + 2] || chars[i + 1] === chars[i + 2]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppfhk24j9.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppfhk24j9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015601
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let count = 0;\n  let previous = null;\n \
    \ for (let i = 0; i < s.length; i++) {\n    if (s[i] === previous) {\n      count++;\n\
    \    } else {\n      count = 1;\n    }\n    previous = s[i];\n    if (count ===\
    \ 3) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvx38bcuf.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvx38bcuf.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015601
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && ![...s].some((el,\
    \ i) => i % 3 === 0 && el === s[i + 1] && el === s[i + 2]);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppdpt6596.ts(18,34): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660015601
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  if (s.length === 3) {\n    return true;\n  }\n  for (let i = 0; i < s.length\
    \ - 2; i++) {\n    const word = s.substring(i, i + 3);\n    const wordSet = new\
    \ Set(word);\n    if (wordSet.size !== 3) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\ntest(\"is_happy\", () => {\n  expect(is_happy(\"a\")).toBe(false);\n\
    \  expect(is_happy(\"aa\")).toBe(false);\n  expect(is_happy(\"abcd\")).toBe(true);\n\
    \  expect(is_happy(\"aabb\")).toBe(false);\n  expect(is_happy(\"adb\")).toBe(true);\n\
    \  expect(is_happy(\"xyy\")).toBe(false);\n});\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppw2dadwk.ts(26,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmppw2dadwk.ts(34,6): error TS2554: Expected 0 arguments, but
    got 2.

    ../../../../../tmp/tmppw2dadwk.ts(35,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmppw2dadwk.ts(36,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmppw2dadwk.ts(37,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmppw2dadwk.ts(38,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmppw2dadwk.ts(39,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmppw2dadwk.ts(40,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length >= 3) {\n    for (let i = 0;\
    \ i < s.length - 2; i++) {\n      let tempString = s.substring(i, i + 3);\n  \
    \    let first = tempString.charAt(0);\n      let second = tempString.charAt(1);\n\
    \      let third = tempString.charAt(2);\n      if (first === second || first\
    \ === third || second === third) {\n        return false;\n      }\n    }\n  \
    \  return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015601
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015602
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let result = false;\n    const letters:\
    \ string[] = [];\n    const sLength = s.length;\n    if (sLength >= 3) {\n   \
    \     for (let i = 0; i < sLength; i++) {\n            letters.push(s[i]);\n \
    \       }\n        const lettersLength = letters.length;\n        for (let i =\
    \ 0; i < lettersLength; i++) {\n            if (i + 2 <= lettersLength) {\n  \
    \              if (letters[i] !== letters[i + 1] && letters[i] !== letters[i +\
    \ 2] && letters[i + 1] !== letters[i + 2]) {\n                    result = true;\n\
    \                } else {\n                    result = false;\n             \
    \       break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015605
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // your code here\n    return;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc_naujg7.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc_naujg7.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015605
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015605
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 2; i < s.length; i++) {\n        if (s[i] === s[i - 1]\
    \ && s[i] === s[i - 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpprii8csp.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpprii8csp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015605
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 &&\n    !/aaa|bbb|ccc|ddd|eee|fff|ggg|hhh|iii|jjj|kkk|lll|mmm|nnn|ooo|ppp|qqq|rrr|sss|ttt|uuu|vvv|www|xxx|yyy|zzz/.test(s);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbua_bu_j.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbua_bu_j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015605
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 2; i < s.length; i++) {\n        if (s[i] === s[i - 1]\
    \ && s[i] === s[i - 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpprii8csp.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpprii8csp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015605
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    else {\n        let unique: boolean = true;\n        for (let i =\
    \ 0; i < s.length; i++) {\n            if (i+2 < s.length && s[i] === s[i+1] &&\
    \ s[i] === s[i+2]) {\n                unique = false;\n            }\n       \
    \ }\n        return unique;\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoynghvus.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoynghvus.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"xyy\"));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    false

    '
  timestamp: 1660015605
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return (s.length < 3) ? false : (new Set(s.slice(0,3)).size\
    \ === 3) && is_happy(s.slice(1));\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoxv775fk.ts(18,42): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015605
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let start: number = 0;\n  let end: number = 3;\n  while (end <= s.length)\
    \ {\n    if (\n      s[start] === s[start + 1] ||\n      s[start] === s[start\
    \ + 2] ||\n      s[start + 1] === s[start + 2]\n    ) {\n      return false;\n\
    \    }\n    start++;\n    end++;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  let result = false;\n  if (s.length >= 3)\
    \ {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] !== s[i + 1]\
    \ && s[i] !== s[i + 2] && s[i + 1] !== s[i + 2]) {\n        result = true;\n \
    \     } else {\n        result = false;\n        break;\n      }\n    }\n  } else\
    \ {\n    result = false;\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let res: boolean = true;\n    let len: number\
    \ = s.length;\n    if (len < 3) {\n        res = false;\n    } else {\n      \
    \  for (let i: number = 0; i < len - 2; i++) {\n            if (s[i] === s[i +\
    \ 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n                res = false;\n\
    \                break;\n            }\n        }\n    }\n    return res;\n}\n\
    \nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\n\
    console.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let s_length = s.length;\n    let result\
    \ = true;\n    if (s_length >= 3) {\n        let first_char = s.charAt(0);\n \
    \       let second_char = s.charAt(1);\n        let third_char = s.charAt(2);\n\
    \        for (let i = 0; i < s_length - 2; i++) {\n            if (first_char\
    \ == second_char && second_char == third_char) {\n                result = false;\n\
    \                break;\n            }\n            first_char = s.charAt(i);\n\
    \            second_char = s.charAt(i + 1);\n            third_char = s.charAt(i\
    \ + 2);\n        }\n    } else {\n        result = false;\n    }\n    return result;\n\
    }\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\n\
    console.log(is_happy(\"xyy\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2jko7sop.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2jko7sop.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    true

    true

    true

    true

    '
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  const strings = [];\n  for (let i = 0; i < s.length - 2; i++) {\n    strings.push(s.substring(i,\
    \ i + 3));\n  }\n  for (let i = 0; i < strings.length; i++) {\n    for (let j\
    \ = i + 1; j < strings.length; j++) {\n      if (strings[i] === strings[j]) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5p7w1__v.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5p7w1__v.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let arr = s.split(\"\");\n  let i = 0;\n  while (i < arr.length - 2) {\n\
    \    if (arr[i] == arr[i + 1] || arr[i] == arr[i + 2] || arr[i + 1] == arr[i +\
    \ 2]) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    const regex = /(.)\\1\\1/;\n    const regResult\
    \ = regex.test(s);\n    if (s.length > 2 && !regResult) {\n        return true;\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeiaze_2c.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeiaze_2c.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    // return whether the string is hapts or\
    \ not\n    if (s.length < 3) {\n        return false;\n    }\n    else {\n   \
    \     for (let i = 0; i < s.length - 2; i++) {\n            for (let j = i + 1;\
    \ j < s.length - 1; j++) {\n                for (let k = j + 1; k < s.length;\
    \ k++) {\n                    if (s[i] == s[j] && s[j] == s[k]) {\n          \
    \              return false;\n                    }\n                }\n     \
    \       }\n        }\n        return true;\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7zjjs42v.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7zjjs42v.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && s.split('').every((e,\
    \ i, a) => (i + 2) % 3 != 0 || a[i] != a[i + 1] || a[i] != a[i + 2])\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf2vqp_rd.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf2vqp_rd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    const threeCharArray = s.slice(i,\
    \ i + 3).split(\"\");\n    if (threeCharArray[0] === threeCharArray[1] || threeCharArray[0]\
    \ === threeCharArray[2] || threeCharArray[1] === threeCharArray[2]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    const string = s.toLowerCase();\n    const\
    \ arr = string.split('');\n    if (arr.length < 3) {\n        return false;\n\
    \    } else {\n        for (let i = 0; i < arr.length; i++) {\n            if\
    \ (arr[i] == arr[i + 1] && arr[i + 1] == arr[i + 2]) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n}\n\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppxi33a2e.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppxi33a2e.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    true

    true

    true

    true

    '
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let c1 = s.charAt(0);\n    let c2 = s.charAt(1);\n\
    \    let c3 = s.charAt(2);\n    let i: number = 0;\n    let result: boolean =\
    \ true;\n    for (i = 0; i < s.length; i++) {\n        if (c1 === c2 && c2 ===\
    \ c3) {\n            result = false;\n            break;\n        }\n        c1\
    \ = c2;\n        c2 = c3;\n        c3 = s.charAt(i + 3);\n    }\n    return result;\n\
    }\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"\
    xyy\"));\nconsole.log(is_happy(\"x\"));\nconsole.log(is_happy(\"abc\"));\nconsole.log(is_happy(\"\
    \"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp34ib766g.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp34ib766g.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    true

    true

    '
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let l = s.length;\n    if (l < 3) {\n  \
    \      return false;\n    }\n    for (let i = 0; i < l - 2; i++) {\n        if\
    \ (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015606
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    else {\n        for (let i = 0; i < s.length; i++) {\n           \
    \ if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph8xmbarn.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph8xmbarn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015586
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015605
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015605
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015605
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && !s.split('').every((c,\
    \ index) => s[index] === s[index + 1] && s[index] === s[index + 2]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4v8y8zro.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4v8y8zro.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015606
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015591
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return true;\n}\n\nexport default is_happy;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp28svoioz.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp28svoioz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015607
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n\n  if (s.length === 3) {\n    return s[0] !== s[1] && s[1] !== s[2] && s[0]\
    \ !== s[2];\n  }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015607
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  const len = s.length;\n  if (len < 3) {\n\
    \    return false;\n  }\n  for (let i = 0; i < len - 2; i++) {\n    if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015607
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && s.substring(0, 3).split('').filter((value,\
    \ index, self) => self.indexOf(value) === index).length === 3;\n}\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptue6joqo.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptue6joqo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660015607
