language: ts
name: HumanEval_80_is_happy
results:
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let arr = [...s];\n    for (let i = 0; i\
    \ < arr.length; i++) {\n        if (arr[i] == arr[i + 1] && arr[i] == arr[i +\
    \ 2]) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"aabb\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpriajeu9o.ts(18,19): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return (s.length >= 3 && s.length % 3 ===\
    \ 0) && s.split('').every((x, i) => (i + 1) % 3 !== 0 || x !== s[i - 1] && x !==\
    \ s[i - 2])\n}\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('bbeeaabb'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_dykbwfq.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_dykbwfq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    false

    false

    '
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return s.length >= 3 && Array.from(new Set(s.match(/[a-z]{3}/g)\
    \ || [])).length > 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd6a_ir5v.ts(18,33): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmpd6a_ir5v.ts(18,42): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy_counter = 0;\n    if (s.length\
    \ > 2) {\n        for (let i = 0; i < s.length - 2; i++) {\n            if (s[i]\
    \ !== s[i + 1] && s[i] !== s[i + 2] && s[i + 1] !== s[i + 2]) {\n            \
    \    happy_counter++;\n            }\n        }\n        if (happy_counter ===\
    \ s.length - 2) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  const length: number = s.length;\n  const\
    \ arr = [];\n  for (let i = 0; i < length; i++) {\n    if (i + 2 <= length) {\n\
    \      arr.push(s.slice(i, i + 3));\n    }\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const set = new Set(arr[i]);\n    if (set.size === 2) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc9tv7r7u.ts(26,21): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    else {\n        let haps = [];\n        haps.push(s[0]);\n       \
    \ for (let i = 1; i < s.length; i++) {\n            if (s[i] === s[i - 1]) {\n\
    \                return false;\n            }\n            else {\n          \
    \      haps.push(s[i]);\n            }\n        }\n        return true;\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpelwrzd5r.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpelwrzd5r.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let flag = false;\n    if (s.length > 2)\
    \ {\n        for (let i = 2; i < s.length; i++) {\n            if (s[i] !== s[i\
    \ - 1] && s[i] !== s[i - 2] && s[i - 1] !== s[i - 2]) {\n                flag\
    \ = true;\n            } else {\n                flag = false;\n             \
    \   break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let r = false;\n    if (s.length >= 3) {\n\
    \        let a = [];\n        for (let i = 0; i < s.length; i++) {\n         \
    \   a.push(s[i]);\n        }\n        a.splice(0, 3);\n        let s2 = a.join('');\n\
    \        if (s2.includes(s[0]) || s2.includes(s[1]) || s2.includes(s[2])) {\n\
    \            r = false;\n        } else {\n            r = true;\n        }\n\
    \    }\n    return r;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdha5ewgc.ts(26,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpdha5ewgc.ts(26,37): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpdha5ewgc.ts(26,58): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    return s.length >= 3 && (\n        s.slice(0,\
    \ 3).split('').every((e, i, a) => e !== a[(i + 1) % 3])\n        || is_happy(s.slice(1))\n\
    \    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvrcla0yy.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvrcla0yy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    for\
    \ (let i = 2; i < s.length; i++) {\n        if (s[i] === s[i - 1] && s[i] ===\
    \ s[i - 2]) return false;\n    }\n    return true;\n}\nconsole.log(is_happy('abcdef'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp02dwysp4.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp02dwysp4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    const uniques = new Set();\n    let isHappy = true;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (i >= 3) {\n            uniques.delete(s[i\
    \ - 3]);\n        }\n        if (uniques.has(s[i])) {\n            isHappy = false;\n\
    \            break;\n        }\n        uniques.add(s[i]);\n    }\n    return\
    \ isHappy;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyarb39o2.ts(22,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    const arr = s.split('');\n    if (arr.length\
    \ < 3) {\n        return false;\n    }\n    for (let i = 0; i < arr.length - 2;\
    \ i++) {\n        if (arr[i] === arr[i + 1] || arr[i] === arr[i + 2] || arr[i\
    \ + 1] === arr[i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  let i = 0;\n  while (i < s.length - 2) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \    i++;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  return undefined;\n}\n\nexport { is_happy\
    \ };\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk2uli8__.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk2uli8__.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n \
    \ }\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] ||\
    \ s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) {\n        return false;\n\
    \    }\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i\
    \ + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let happy = true;\n    if (s.length < 3)\
    \ {\n        happy = false;\n    } else {\n        for (let i = 0; i < s.length\
    \ - 2; i++) {\n            let first: string = s.charAt(i);\n            let second:\
    \ string = s.charAt(i + 1);\n            let third: string = s.charAt(i + 2);\n\
    \            if (first === second && second === third) {\n                happy\
    \ = false;\n            }\n        }\n    }\n    return happy;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp55yuxeij.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp55yuxeij.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    let set = new Set();\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (i + 3 > s.length) {\n            break;\n\
    \        }\n        let str = s.substring(i, i + 3);\n        let unique = new\
    \ Set(str);\n        if (unique.size != 3) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbxuowdc0.ts(18,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    ../../../../../tmp/tmpbxuowdc0.ts(24,26): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    '
  timestamp: 1659822213
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapts or not.\n// A string is hapts if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s: string): boolean {\n    if (s.length < 3) return false;\n    let\
    \ temp = s.split('');\n    for (let i = 0; i < temp.length; i += 3) {\n      \
    \  if (temp[i] === temp[i + 1] || temp[i] === temp[i + 2] || temp[i + 1] === temp[i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxil8226i.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxil8226i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822213
