name: HumanEval_146_specialFilter
language: ts
prompt: "//Write a function that takes an array of numbers as input and returns \n\
  // the number of elements in the array that are greater than 10 and both \n// first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
  \ specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45,\
  \ 21, 109])\n// 2\nfunction specialFilter(nums: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2,\
  \ 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33,\
  \ -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121,\
  \ 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n\
  \  assert.deepEqual(candidate([]),0);\n}\n\ntest();"
completions: ["    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n \
    \       if (nums[i] > 10 && nums[i] % 2 != 0 && nums[0] % 2 != 0 && nums[nums.length\
    \ - 1] % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }", "    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ if (nums[i] > 10 && nums[i] % 2 !== 0 && nums[0] % 2 !== 0 && nums[nums.length\
    \ - 1] % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  let newarr = [];\n  for (let num of nums) {\n    let digits = num.toString().split(\"\
    \");\n    if (num > 10 && (digits[0] % 2 == 1) && (digits[digits.length - 1] %\
    \ 2 == 1)) {\n      newarr.push(num);\n    }\n  }\n  return newarr.length;\n}\n\
    \n", "    let result = 0;\n    for (let i = 0; i < nums.length; i++) {\n     \
    \   let num = nums[i];\n        if (num > 10 && (num % 2 != 0)) {\n          \
    \  let firstDigit = Math.floor(num / 10);\n            let lastDigit = num % 10;\n\
    \            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\n\n", " \
    \   let counter = 0;\n    nums.forEach(num => {\n        if (num > 10 && num %\
    \ 2 === 1 && Math.floor(num / 10) % 2 === 1) {\n            counter++;\n     \
    \   }\n    });\n    return counter;\n}\n", "  let count = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    let num = nums[i];\n    if (num > 10 && Math.abs(num)\
    \ % 2 !== 0 && num % 10 % 2 !== 0) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n     \
    \   if (nums[i] >= 10 && nums[i] % 2 !== 0 && nums[i] % 10 % 2 !== 0) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109]));\n", "    let total: number = 0;\n    for (let num of\
    \ nums) {\n        let firstDigit: number = Math.floor(num / 10);\n        let\
    \ lastDigit: number = num % 10;\n        if (num > 10 && (firstDigit % 2 == 1\
    \ || lastDigit % 2 == 1)) {\n            total++;\n        }\n    }\n    return\
    \ total;\n}\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109]));\n", "\tlet count = 0;\n\tnums.forEach(number => {\n\t\
    \tif (number > 10 && number % 2 === 1 &&\n\t\t\t(number % 10 === 1 || number %\
    \ 10 === 3 ||\n\t\t\t\tnumber % 10 === 5 || number % 10 === 7 ||\n\t\t\t\tnumber\
    \ % 10 === 9)) {\n\t\t\tcount++;\n\t\t}\n\t});\n\treturn count;\n}\n", "    return\
    \ nums.filter(e => {\n        return e % 2 !== 0 && e > 10 && Math.floor(e / 10)\
    \ % 2 !== 0 && e % 10 % 2 !== 0;\n    }).length;\n}\n", "    var count = 0;\n\
    \    for (var i = 0; i < nums.length; i++) {\n        var str = nums[i].toString();\n\
    \        if (nums[i] > 10 && parseInt(str[0]) % 2 !== 0 && parseInt(str[str.length\
    \ - 1]) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    let counter = 0;\n    nums.forEach(num => {\n        let string = num.toString();\n\
    \        if (num > 10 && isOdd(parseInt(string[0])) && isOdd(parseInt(string[string.length\
    \ - 1]))) counter++;\n    });\n    return counter;\n}", "    var count = 0;\n\
    \    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && nums[i]\
    \ % 2 != 0 && nums[i] % 5 != 0) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109]));\n", "\t// generate an array of numbers where both the\
    \ first and last digits are odd\n\tvar odds: number[] = nums.filter(function(n)\
    \ {\n\t\treturn n >= 10 && n.toString().length > 1 && isOdd(n.toString()[0]) &&\
    \ isOdd(n.toString()[n.toString().length - 1]);\n\t});\n\treturn odds.length;\n\
    }\n", "    let count = 0;\n    for (let n of nums) {\n        let numStr = n.toString();\n\
    \        if (numStr.length > 1 && n > 10 &&\n            parseInt(numStr[0]) %\
    \ 2 !== 0 && parseInt(numStr[numStr.length - 1]) % 2 !== 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(specialFilter([15, -73,\
    \ 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n", "  \
    \  return nums.filter(e => Math.abs(e) > 10 && Math.abs(e) % 2 == 1 && Math.abs(e\
    \ % 10) % 2 == 1).length;\n}\n", "    let count = 0;\n    for (let num of nums)\
    \ {\n        if (num > 10 && num % 2 === 1 && (num % 10 === 1 || num % 10 ===\
    \ 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9)) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(specialFilter([15, -73, 14,\
    \ -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n", "    let\
    \ filtered = nums.filter(n => n >= 10 && isFirstLastDigitOdd(n));\n    return\
    \ filtered.length;\n}\n", "    return nums.filter(num => Math.abs(num) > 10 &&\
    \ \n        Math.abs(num) % 10 % 2 != 0 && \n        num % Math.pow(10, Math.floor(Math.log10(Math.abs(num))))\
    \ % 2 != 0)\n        .length;\n}", "  let count = 0;\n  nums.map(num => {\n  \
    \  let first = Math.floor(num / 10);\n    let last = num % 10;\n    if (\n   \
    \   num > 10 &&\n      (first % 2 == 1 || first % 2 == -1) &&\n      (last % 2\
    \ == 1 || last % 2 == -1)\n    ) {\n      count++;\n    }\n  });\n  return count;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
