language: jl
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns a\
    \ dictionary with the most frequent letter in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfbjmu24j.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbjmu24j.jl:21\n\
    in expression starting at /tmp/tmpfbjmu24j.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore \nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnsy80apk.jl:26\nin expression starting at\
    \ /tmp/tmpnsy80apk.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpoifyk117.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoifyk117.jl:22\n\
    in expression starting at /tmp/tmpoifyk117.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary with the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nIf no letter appears in the string, return an empty dictionary.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmha_wsm.jl:24\nin expression starting at\
    \ /tmp/tmphmha_wsm.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!()\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nnot spaces.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_akh1t8_.jl:31\nin expression starting at\
    \ /tmp/tmp_akh1t8_.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpej9k10bv.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpej9k10bv.jl:22\n\
    in expression starting at /tmp/tmpej9k10bv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0rpejljb.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0rpejljb.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0rpejljb.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters.sort!\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a dictionary with the frequency of\
    \ each character\nin the string. \nExample: \n>>> histogram(\"a b c\")\nDict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\nDict(\"a\" => 2,\
    \ \"b\" => 2)\n>>> histogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n>>>\
    \ histogram(\"b b b b a\")\nDict(\"b\" => 4)\n>>> histogram(\"\")\nDict()\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzx8zjs2i.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzx8zjs2i.jl:23\n\
    in expression starting at /tmp/tmpzx8zjs2i.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    letters = unique(letters)\n    for letter in\
    \ letters\n        histogram[letter] = length(filter(x -> x == letter, letters))\n\
    \    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nThe function\
    \ should ignore all non-word characters (punctuation, spaces, etc).\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjtk95qm.jl:28\nin expression starting at\
    \ /tmp/tmpnjtk95qm.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string with the\
    \ first letter of each word capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7uby_pt3.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uby_pt3.jl:23\n\
    in expression starting at /tmp/tmp7uby_pt3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplfgka9ap.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplfgka9ap.jl:22\n\
    in expression starting at /tmp/tmplfgka9ap.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all numbers and only count the letters\
    \ a-z.\nThe function should ignore all special characters and only count the letters\
    \ a-z.\nThe function should ignore all whitespace and only count the letters a-z.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are longer than 20 characters.\nThe function should\
    \ ignore all words that are longer than 50 characters.\nThe function should ignore\
    \ all words that are longer than 100 characters.\nThe function should ignore all\
    \ words that are longer than 200 characters.\nThe function should ignore all words\
    \ that are longer than 500 characters.\nThe function should ignore all words that\
    \ are longer than 1000 characters.\nThe function should ignore all words that\
    \ are longer than 2000 characters.\nThe function should ignore all words that\
    \ are longer than 5000 characters.\nThe function should ignore all words that\
    \ are longer than 10000 characters.\nThe function should ignore all words that\
    \ are longer than 20000 characters.\nThe function should ignore all words that\
    \ are longer than 50000 characters.\nThe function should ignore all words that\
    \ are longer than 100000 characters.\nThe function should ignore all words that\
    \ are longer than 200000 characters.\nThe function should ignore all words that\
    \ are longer than 500000 characters.\nThe function should ignore all words that\
    \ are longer than 1000000 characters.\nThe function should ignore all words that\
    \ are longer than 2000000 characters.\nThe function should ignore all words that\
    \ are longer than 5000000 characters.\nThe function should ignore all words that\
    \ are longer than 10000000 characters.\nThe function should ignore all words that\
    \ are longer than 20000000 characters.\nThe function should ignore all words that\
    \ are longer than 50000000 characters.\nThe function should ignore all words that\
    \ are longer than 100000000 characters.\nThe function should ignore all words\
    \ that are longer than 200000000 characters.\nThe function should ignore all words\
    \ that are longer than 500000000 characters.\nThe function should ignore all words\
    \ that are longer than 1000000000 characters.\nThe function should ignore all\
    \ words that are longer than 2000000000 characters.\nThe function should ignore\
    \ all words that are longer than 5000000000 characters.\nThe function should ignore\
    \ all words that are longer than 10000000000 characters.\nThe function should\
    \ ignore all words that are longer than 20000000000 characters.\n\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1nm_j795.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1nm_j795.jl:22\n\
    in expression starting at /tmp/tmp1nm_j795.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpale9re_8.jl:30\nin expression starting at\
    \ /tmp/tmpale9re_8.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input and returns\
    \ the number of occurrences of each letter in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptw9gtpzc.jl:30\nin expression starting at\
    \ /tmp/tmptw9gtpzc.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of unique characters in the string.\n    \n    Example:\n    >>> unique_characters(\"\
    a b c\")\n    3\n    >>> unique_characters(\"a b b a\")\n    4\n    >>> unique_characters(\"\
    b b b b a\")\n    4\n    >>> unique_characters(\"\")\n    0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5gb06mn.jl:30\nin expression starting at\
    \ /tmp/tmpx5gb06mn.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters = sort(letters)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp414itpw5.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp414itpw5.jl:33\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp414itpw5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp414itpw5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp414itpw5.jl:36\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp414itpw5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp414itpw5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpt_972hx8.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt_972hx8.jl:21\n\
    in expression starting at /tmp/tmpt_972hx8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqaau_sbn.jl:26\nin expression starting at\
    \ /tmp/tmpqaau_sbn.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4o3lj0q.jl:24\nin expression starting at\
    \ /tmp/tmpc4o3lj0q.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a dictionary with the letter with the most repetition and containing\
    \ the corresponding count.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiobw1l98.jl:26\nin expression starting at\
    \ /tmp/tmpiobw1l98.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with all\
    \ the letters capitalized.\nExample:\n>>> capitalize(\"a b c\")\n\"A B C\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8prnihov.jl:29\nin expression starting at\
    \ /tmp/tmp8prnihov.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.\nThe function should ignore case and only count the letters a-z.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcz2v9qbf.jl:27\nin expression starting at\
    \ /tmp/tmpcz2v9qbf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nuppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzkyf49e.jl:30\nin expression starting at\
    \ /tmp/tmpbzkyf49e.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ histogram[c] = histogram.get(c, 0) + 1\n    end\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vzav31f.jl:25\nin expression starting at\
    \ /tmp/tmp8vzav31f.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nWrite\
    \ a function that takes a string and returns the number of uppercase letters in\
    \ the string.\nWrite a function that takes a string and returns the number of\
    \ lowercase letters in the string.\nWrite a function that takes a string and returns\
    \ the number of digits (0-9) in the string.\nWrite a function that takes a string\
    \ and returns the number of punctuation marks in the string.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a capital letter.\nWrite a function that takes a string and returns the\
    \ number of words in the string that start with a lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a digit.\nWrite a function that takes a string and returns the number of\
    \ words in the string that start with a punctuation mark.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that start\
    \ with a capital letter.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that start with a lowercase letter.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that start with a digit.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that start with a punctuation mark.\nWrite\
    \ a function that takes a string and returns the number of uppercase letters in\
    \ the string that start with a capital letter.\nWrite a function that takes a\
    \ string and returns the number of uppercase letters in the string that start\
    \ with a lowercase letter.\nWrite a function that takes a string and returns the\
    \ number of uppercase letters in the string that start with a digit.\nWrite a\
    \ function that takes a string and returns the number of uppercase letters in\
    \ the string that start with a punctuation mark.\nWrite a function that takes\
    \ a string and returns the number of lowercase letters in the string that start\
    \ with a capital letter.\nWrite a function that takes a string and returns the\
    \ number of lowercase letters in the string that start with a lowercase letter.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string that start with a digit.\nWrite a function that takes a string\
    \ and returns the number of lowercase letters in the string that start with a\
    \ punctuation mark.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string that start with a capital letter.\nWrite a function\
    \ that takes a string and returns the number of digits (0-9) in the string that\
    \ start with a lowercase letter.\nWrite a function that takes a string and returns\
    \ the number of digits (0-9) in the string that start with a \nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0znn2bh.jl:30\nin expression starting at\
    \ /tmp/tmpx0znn2bh.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        if !haskey(histogram, c)\n            histogram[c] = 1\n        else\n\
    \            histogram[c] += 1\n        end\n    end\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all numbers and only count the letters a-z.\nThe function\
    \ should ignore all special characters and only count the letters a-z.\nThe function\
    \ should ignore all spaces and only count the letters a-z.\nThe function should\
    \ ignore all uppercase and only count the letters a-z.\nThe function should ignore\
    \ all lowercase and only count the letters a-z.\nThe function should ignore all\
    \ special characters and only count the letters a-z.\nThe function should ignore\
    \ all spaces and only count the letters a-z.\nThe function should ignore all uppercase\
    \ and only count the letters a-z.\nThe function should ignore all lowercase and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all spaces and only\
    \ count the letters a-z.\nThe function should ignore all uppercase and only count\
    \ the letters a-z.\nThe function should ignore all lowercase and only count the\
    \ letters a-z.\nThe function should ignore all special characters and only count\
    \ the letters a-z.\nThe function should ignore all spaces and only count the letters\
    \ a-z.\nThe function should ignore all uppercase and only count the letters a-z.\n\
    The function should ignore all lowercase and only count the letters a-z.\nThe\
    \ function should ignore all special characters and only count the letters a-z.\n\
    The function should ignore all spaces and only count the letters a-z.\nThe function\
    \ should ignore all uppercase and only count the letters a-z.\nThe function should\
    \ ignore all lowercase and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgyueyw98.jl:29\nin expression starting at\
    \ /tmp/tmpgyueyw98.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of lines\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of uppercase letters in the string. \nWrite a function that takes a string and\
    \ returns the number of lowercase letters in the string. \nWrite a function that\
    \ takes a string and returns the number of digits (0-9) in the string. \nWrite\
    \ a function that takes a string and returns the number of punctuation characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words that start with a capital letter. \nWrite a function that takes a string\
    \ and returns the number of words that start with a lowercase letter. \nWrite\
    \ a function that takes a string and returns the number of words that start with\
    \ a digit. \nWrite a function that takes a string and returns the number of words\
    \ that start with a punctuation character. \nWrite a function that takes a string\
    \ and returns the number of words that start with a word that starts with a capital\
    \ letter. \nWrite a function that takes a string and returns the number of words\
    \ that start with a word that starts with a lowercase letter. \nWrite a function\
    \ that takes a string and returns the number of words that start with a word that\
    \ starts with a digit. \nWrite a function that takes a string and returns the\
    \ number of words that start with a word that starts with a punctuation character.\
    \ \nWrite a function that takes a string and returns the number of words that\
    \ start with a word that starts with a word that starts with a capital letter.\
    \ \nWrite a function that takes a string and returns the number of words that\
    \ start with a word that starts with a word that starts with a lowercase letter.\
    \ \nWrite a function that takes a string and returns the number of words that\
    \ start with a word that starts with a word that starts with a digit. \nWrite\
    \ a function that takes a string and returns the number of words that start with\
    \ a word that starts with a word that starts with a punctuation character. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a word that starts with a word that starts with a word that starts with\
    \ a capital letter\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplleosojs.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplleosojs.jl:22\n\
    in expression starting at /tmp/tmplleosojs.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for c in split(test)\n        histogram[c]\
    \ = get(histogram, c, 0) + 1\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_thur25s.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_thur25s.jl:1\n\
    in expression starting at /tmp/tmp_thur25s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should return a dictionary\
    \ with the letters as keys and the number of times they appear in the string as\
    \ values.\nExample:\n>>> count_letters(\"a b c\")\nDict(\"a\" => 1, \"b\" => 1,\
    \ \"c\" => 1)\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vf3wu5y.jl:25\nin expression starting at\
    \ /tmp/tmp7vf3wu5y.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function called histogram that takes a string and returns a\
    \ dictionary of the letter with the most repetition and containing the corresponding\
    \ count.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq29ad1p.jl:24\nin expression starting at\
    \ /tmp/tmpjq29ad1p.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmph7ercyep.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7ercyep.jl:22\n\
    in expression starting at /tmp/tmph7ercyep.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all non-alphanumeric characters\
    \ and split on whitespace.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp_ysujd35.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ysujd35.jl:22\n\
    in expression starting at /tmp/tmp_ysujd35.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary with the most repeated character and the number of\
    \ times it appears.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxf0zegc8.jl:26\nin expression starting at\
    \ /tmp/tmpxf0zegc8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nnot in the alphabet (a to z).\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qg_ecdz.jl:30\nin expression starting at\
    \ /tmp/tmp4qg_ecdz.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string with the first letter of each word capitalized.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3gex1c_.jl:26\nin expression starting at\
    \ /tmp/tmpp3gex1c_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all spaces.\nThe\
    \ function should ignore all numbers.\nThe function should ignore all special\
    \ characters.\nThe function should ignore all uppercase letters.\nThe function\
    \ should ignore all lowercase letters.\nThe function should ignore all symbols.\n\
    The function should ignore all non-alphabetic characters.\nThe function should\
    \ ignore all empty strings.\nThe function should ignore all empty lists.\nThe\
    \ function should ignore all empty tuples.\nThe function should ignore all empty\
    \ dictionaries.\nThe function should ignore all empty arrays.\nThe function should\
    \ ignore all empty sets and sets.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty sets and dictionaries.\nThe\
    \ function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionaries and arrays.\nThe function should ignore all empty\
    \ dictionaries and arrays.\nThe function should ignore all empty dictionaries\
    \ and arrays.\nThe function should ignore all empty dictionaries and arrays.\n\
    The function should ignore all empty dictionaries and arrays.\nThe function should\
    \ ignore all empty dictionarie\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpq59bwfk0.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq59bwfk0.jl:21\n\
    in expression starting at /tmp/tmpq59bwfk0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        if !haskey(histogram, c)\n            histogram[c] = 0\n        end\n\
    \        histogram[c] += 1\n    end\n    return histogram\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with the\
    \ first letter capitalized.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb326qzb_.jl:28\nin expression starting at\
    \ /tmp/tmpb326qzb_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a list of all the words in the string. \nThe function\
    \ should ignore all punctuation and split on whitespace.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn347qy0q.jl:30\nin expression starting at\
    \ /tmp/tmpn347qy0q.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxkgaeqxa.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxkgaeqxa.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkgaeqxa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkgaeqxa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxkgaeqxa.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkgaeqxa.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkgaeqxa.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a dictionary with the letters as keys and the number of times each letter appears\
    \ in the string as values.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvs13tlu2.jl:30\nin expression starting at\
    \ /tmp/tmpvs13tlu2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpin37ln9n.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpin37ln9n.jl:22\n\
    in expression starting at /tmp/tmpin37ln9n.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with all the letters replaced by their respective counts.\nExample:\n\
    >>> replace_letters(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmjuk1nw.jl:26\nin expression starting at\
    \ /tmp/tmpkmjuk1nw.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a dictionary with the number of times each letter\
    \ appears in the string.\nThe function should ignore non-letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq3m8js1.jl:30\nin expression starting at\
    \ /tmp/tmpnq3m8js1.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters = sort(letters)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string where all the characters are replaced by\
    \ their ASCII code. \nExample:\n>>> encode(\"Hello World\")\n\"68 101 108 108\
    \ 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108\
    \ 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99\
    \ 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33\
    \ 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100\
    \ 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108\
    \ 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114\
    \ 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87 111\
    \ 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32 87\
    \ 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111 32\
    \ 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 33 99 108 108 111\
    \ 32 87 111 114 108 100 33 99 108 108 111 32 87 111 114 108 100 \nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfcn1lk8.jl:31\nin expression starting at\
    \ /tmp/tmpcfcn1lk8.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    \n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    \n  \
    \  return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8q5zdjq.jl:27\nin expression starting at\
    \ /tmp/tmpd8q5zdjq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnxbkaa5k.jl:26\nin expression starting at\
    \ /tmp/tmpnxbkaa5k.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpej9k10bv.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpej9k10bv.jl:22\n\
    in expression starting at /tmp/tmpej9k10bv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all non-word characters (spaces, punctuation, etc.).\nThe function should\
    \ ignore all empty words.\nThe function should ignore all words shorter than 3\
    \ characters.\nThe function should ignore all words longer than 20 characters.\n\
    The function should ignore all words containing only numbers.\nThe function should\
    \ ignore all words containing only letters a-z or A-Z.\nThe function should ignore\
    \ all words containing only letters a-z or A-Z and digits.\nThe function should\
    \ ignore all words containing only letters a-z or A-Z and digits.\nThe function\
    \ should ignore all words containing only letters a-z or A-Z and digits.\nThe\
    \ function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only letters a-z or A-Z and digits.\n\
    The function should ignore all words containing only \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctwvwql3.jl:26\nin expression starting at\
    \ /tmp/tmpctwvwql3.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of occurrences of each\
    \ letter. \nThe function should ignore case and only count the letters a-z.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvfjhzjhc.jl:26\nin expression starting at\
    \ /tmp/tmpvfjhzjhc.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmou0ihii.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmou0ihii.jl:1\n\
    in expression starting at /tmp/tmpmou0ihii.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all non-word characters (punctuation, spaces, etc.).\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ strings consisting of only whitespace.\nThe function should ignore all strings\
    \ consisting of only a single word.\nThe function should ignore all strings consisting\
    \ of only two words.\nThe function should ignore all strings consisting of only\
    \ three words.\nThe function should ignore all strings consisting of only four\
    \ words.\nThe function should ignore all strings consisting of only five words.\n\
    The function should ignore all strings consisting of only six words.\nThe function\
    \ should ignore all strings consisting of only seven words.\nThe function should\
    \ ignore all strings consisting of only eight words.\nThe function should ignore\
    \ all strings consisting of only nine words.\nThe function should ignore all strings\
    \ consisting of only ten words.\nThe function should ignore all strings consisting\
    \ of only eleven words.\nThe function should ignore all strings consisting of\
    \ only twelve words.\nThe function should ignore all strings consisting of only\
    \ thirteen words.\nThe function should ignore all strings consisting of only fourteen\
    \ words.\nThe function should ignore all strings consisting of only fifteen words.\n\
    The function should ignore all strings consisting of only sixteen words.\nThe\
    \ function should ignore all strings consisting of only seventeen words.\nThe\
    \ function should ignore all strings consisting of only eighteen words.\nThe function\
    \ should ignore all strings consisting of only nineteen words.\nThe function should\
    \ ignore all strings consisting of only twenty words.\nThe function should ignore\
    \ all strings consisting of only twenty-one words.\nThe function should ignore\
    \ all strings consisting of only twenty-two words.\nThe function should ignore\
    \ all strings consisting of only twenty-three words.\nThe function should ignore\
    \ all strings consisting of only twenty-four words.\nThe function should ignore\
    \ all strings consisting of only twenty-five words.\nThe function should ignore\
    \ all strings consisting of only twenty-six words.\nThe function should ignore\
    \ all strings consisting of only twenty-seven words.\nThe function should ignore\
    \ all strings consisting of only twenty-eight words.\nThe function should ignore\
    \ all strings consisting of only twenty-nine words.\nThe function should ignore\
    \ all strings consisting of only thirty-one words.\nThe function should ignore\
    \ all strings consisting of only thirty-two words.\nThe function should ignore\
    \ all \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca7onlwa.jl:26\nin expression starting at\
    \ /tmp/tmpca7onlwa.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a dictionary with the most frequent letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixyqac2b.jl:26\nin expression starting at\
    \ /tmp/tmpixyqac2b.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.\nIf the letter does not appear in\
    \ the string, return 0.\nIf the string contains multiple spaces, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces, ignore them and count the letters individually.\nIf the string contains\
    \ multiple consecutive spaces and letters, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces and letters, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces and letters, ignore them and count the letters individually.\nIf the\
    \ string contains multiple consecutive spaces and letters, ignore them and count\
    \ the letters individually.\nIf the string contains multiple consecutive spaces\
    \ and letters, ignore them and count the letters individually.\nIf the string\
    \ contains multiple consecutive spaces and letters, ignore them and count the\
    \ letters individually.\nIf the string contains multiple consecutive spaces and\
    \ letters, ignore them and count the letters individually.\nIf the string contains\
    \ multiple consecutive spaces and letters, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces and letters, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces and letters, ignore them and count the letters individually.\nIf the\
    \ string contains multiple consecutive spaces and letters, ignore them and count\
    \ the letters individually.\nIf the string contains multiple consecutive spaces\
    \ and letters, ignore them and count the letters individually.\nIf the string\
    \ contains multiple consecutive spaces and letters, ignore them and count the\
    \ letters individually.\nIf the string contains multiple consecutive spaces and\
    \ letters, ignore them and count the letters individually.\nIf the string contains\
    \ multiple consecutive spaces and letters, ignore them and count the letters individually.\n\
    If the string contains multiple consecutive spaces and letters, ignore them and\
    \ count the letters individually.\nIf the string contains multiple consecutive\
    \ spaces and letters, ignore them and count the letters individually.\nIf the\
    \ string contains multiple consecutive spaces and letters, ignore them and count\
    \ the letters individually.\nIf the string contains multiple consecutive spaces\
    \ and letters, ignore them and count the letters individually.\nIf the \nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq7pj6cb.jl:29\nin expression starting at\
    \ /tmp/tmpjq7pj6cb.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc0vp11ly.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc0vp11ly.jl:22\n\
    in expression starting at /tmp/tmpc0vp11ly.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ histogram[c] = histogram.get(c, 0) + 1\n    end\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a dictionary with the characters\
    \ as keys and the number of times they appear in the string as values.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp15p5l7r.jl:25\nin expression starting at\
    \ /tmp/tmpp15p5l7r.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function named count_letters that takes a string as input\
    \ and returns the number of occurrences of each letter in the string. \nThe function\
    \ should return a dictionary with the letters as keys and the corresponding counts\
    \ as values.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7ye_oca.jl:29\nin expression starting at\
    \ /tmp/tmpr7ye_oca.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns a\
    \ dictionary with the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_v_divf.jl:30\nin expression starting at\
    \ /tmp/tmpa_v_divf.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    If there are multiple words, return a list of them.\nIf there are no words, return\
    \ 0.\nIf there are only spaces, return 0.\nIf there are only numbers, return 0.\n\
    If there are only special characters, return 0.\nIf there are only uppercase letters,\
    \ return 0.\nIf there are only lowercase letters, return 0.\nIf there are only\
    \ digits, return 0.\nIf there are only spaces, return 0.\nIf there are only numbers,\
    \ return 0.\nIf there are only special characters, return 0.\nIf there are only\
    \ uppercase letters, return 0.\nIf there are only lowercase letters, return 0.\n\
    If there are only digits, return 0.\nIf there are only spaces, return 0.\nIf there\
    \ are only numbers, return 0.\nIf there are only special characters, return 0.\n\
    If there are only uppercase letters, return 0.\nIf there are only lowercase letters,\
    \ return 0.\nIf there are only digits, return 0.\nIf there are only spaces, return\
    \ 0.\nIf there are only numbers, return 0.\nIf there are only special characters,\
    \ return 0.\nIf there are only uppercase letters, return 0.\nIf there are only\
    \ lowercase letters, return 0.\nIf there are only digits, return 0.\nIf there\
    \ are only spaces, return 0.\nIf there are only numbers, return 0.\nIf there are\
    \ only special characters, return 0.\nIf there are only uppercase letters, return\
    \ 0.\nIf there are only lowercase letters, return 0.\nIf there are only digits,\
    \ return 0.\nIf there are only spaces, return 0.\nIf there are only numbers, return\
    \ 0.\nIf there are only special characters, return 0.\nIf there are only uppercase\
    \ letters, return 0.\nIf there are only lowercase letters, return 0.\nIf there\
    \ are only digits, return 0.\nIf there are only spaces, return 0.\nIf there are\
    \ only numbers, return 0.\nIf there are only special characters, return 0.\nIf\
    \ there are only uppercase letters, return 0.\nIf there are only lowercase letters,\
    \ return 0.\nIf there are only digits, return 0.\nIf there are only spaces, return\
    \ 0.\nIf there are only numbers, return 0.\nIf there are only special characters,\
    \ return 0.\nIf there are only uppercase letters, return 0.\nIf there are only\
    \ lowercase letters, return 0.\nIf there are only digits, return 0.\nIf there\
    \ are only spaces, return 0.\nIf \nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph38badq5.jl:26\nin expression starting at\
    \ /tmp/tmph38badq5.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nThe function should\
    \ ignore non-letter characters and only count letters.\nThe function should ignore\
    \ case when counting.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzxq6lyq.jl:30\nin expression starting at\
    \ /tmp/tmpjzxq6lyq.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with the\
    \ first letter capitalized.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnagduqye.jl:29\nin expression starting at\
    \ /tmp/tmpnagduqye.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgkcvklmp.jl:26\nin expression starting at\
    \ /tmp/tmpgkcvklmp.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        if\
    \ histogram[letter] == 0\n            histogram[letter] = 1\n        else\n  \
    \          histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpd5kxc2h7.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpd5kxc2h7.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpd5kxc2h7.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd5kxc2h7.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd5kxc2h7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd5kxc2h7.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpd5kxc2h7.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd5kxc2h7.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd5kxc2h7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd5kxc2h7.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpd5kxc2h7.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd5kxc2h7.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd5kxc2h7.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpd5kxc2h7.jl:37\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns a dictionary with the\
    \ most repeated letter and its count.\n    \n    Example:\n    >>> most_repeated_letter(\"\
    a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> most_repeated_letter(\"\
    a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> most_repeated_letter(\"\
    a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> most_repeated_letter(\"\
    b b b b a\")\n    Dict(\"b\" => 4)\n    >>> most_repeated_letter(\"\")\n    Dict()\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8y7uopj.jl:24\nin expression starting at\
    \ /tmp/tmpo8y7uopj.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    Write a function that takes a string and returns the number of letters in the\
    \ string.\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in the string.\nWrite a function that takes a string and returns the\
    \ number of lowercase letters in the string.\nWrite a function that takes a string\
    \ and returns the number of digits (0-9) in the string.\nWrite a function that\
    \ takes a string and returns the number of punctuation marks (!,.,?) in the string.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a letter.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that start with a \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpayo8_8rw.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpayo8_8rw.jl:22\n\
    in expression starting at /tmp/tmpayo8_8rw.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = letters[2:end]\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.\nIf two letters have the same number of occurrences, return both.\n\
    If no letter appears in the string, return an empty dictionary.\nExample: histogram(\"\
    a b c a b c\")\nshould return Dict(\"a\" => 2, \"b\" => 2, \"c\" => 2)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppe0ccrj4.jl:27\nin expression starting at\
    \ /tmp/tmppe0ccrj4.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are\nnot in the alphabet (including spaces and punctuation).\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4gimleyp.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4gimleyp.jl:22\n\
    in expression starting at /tmp/tmp4gimleyp.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nnot letters. \nExample: \n\
    >>> count_non_letters(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\
    )\n26\n>>> count_non_letters(\"a b c d e f g h i j k l m n o p q r s t u v w x\
    \ y z\")\n0\n>>> count_non_letters(\"a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z\")\n1\n>>> count_non_letters(\"a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z\")\n0\n>>> count_non_letters(\"\")\n0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mfekdz2.jl:30\nin expression starting at\
    \ /tmp/tmp3mfekdz2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns a\
    \ dictionary of the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpeljmhs.jl:26\nin expression starting at\
    \ /tmp/tmpxpeljmhs.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        if\
    \ histogram[letter] == 0\n            histogram[letter] = 1\n        else\n  \
    \          histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of letters\
    \ contained in the string that appear more than once.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogo7vw86.jl:29\nin expression starting at\
    \ /tmp/tmpogo7vw86.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ histogram[c] = histogram[c] + 1 if histogram[c] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letter characters\
    \ and return a dictionary with the letters as keys and the number of times they\
    \ appear in the string as values.\nThe function should ignore case when counting\
    \ letters.\nThe function should ignore non-letter characters and return a dictionary\
    \ with the letters as keys and the number of times they appear in the string as\
    \ values.\nThe function should ignore case when counting letters.\nThe function\
    \ should ignore non-letter characters and return a dictionary with the letters\
    \ as keys and the number of times they appear in the string as values.\nThe function\
    \ should ignore case when counting letters.\nThe function should ignore non-letter\
    \ characters and return a dictionary with the letters as keys and the number of\
    \ times they appear in the string as values.\nThe function should ignore case\
    \ when counting letters.\nThe function should ignore non-letter characters and\
    \ return a dictionary with the letters as keys and the number of times they appear\
    \ in the string as values.\nThe function should ignore case when counting letters.\n\
    The function should ignore non-letter characters and return a dictionary with\
    \ the letters as keys and the number of times they appear in the string as values.\n\
    The function should ignore case when counting letters.\nThe function should ignore\
    \ non-letter characters and return a dictionary with the letters as keys and the\
    \ number of times they appear in the string as values.\nThe function should ignore\
    \ case when counting letters.\nThe function should ignore non-letter characters\
    \ and return a dictionary with the letters as keys and the number of times they\
    \ appear in the string as values.\nThe function should ignore case when counting\
    \ letters.\nThe function should ignore non-letter characters and return a dictionary\
    \ with the letters as keys and the number of times they appear in the string as\
    \ values.\nThe function should ignore case when counting letters.\nThe function\
    \ should ignore non-letter characters and return a dictionary with the letters\
    \ as keys and the number of times they appear in the string as values.\nThe function\
    \ should ignore case when counting letters.\nThe function should ignore non-letter\
    \ characters and return a dictionary with the letters as keys and the number of\
    \ times they \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjggqhcwg.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjggqhcwg.jl:21\n\
    in expression starting at /tmp/tmpjggqhcwg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string\nthat are\
    \ not in the alphabet (uppercase or lowercase).\nExample: histogram(\"a b c a\
    \ b\") returns 3.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6vk9o63.jl:30\nin expression starting at\
    \ /tmp/tmpv6vk9o63.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all whitespace and\
    \ only count the letters a-z.\nThe function should ignore all words that are shorter\
    \ than 3 letters.\nThe function should ignore all words that are longer than 20\
    \ letters.\nThe function should ignore all words that are longer than 3 letters\
    \ and shorter than 20 letters.\nThe function should ignore all words that are\
    \ longer than 3 letters and shorter than 20 letters and that contain numbers or\
    \ special characters.\nThe function should ignore all words that are longer than\
    \ 3 letters and shorter than 20 letters and that contain numbers or special characters\
    \ and that contain whitespace.\nThe function should ignore all words that are\
    \ longer than 3 letters and shorter than 20 letters and that contain numbers or\
    \ special characters and that contain whitespace and that contain punctuation.\n\
    The function should ignore all words that are longer than 3 letters and shorter\
    \ than 20 letters and that contain numbers or special characters and that contain\
    \ whitespace and that contain punctuation and that contain numbers.\nThe function\
    \ should ignore all words that are longer than 3 letters and shorter than 20 letters\
    \ and that contain numbers or special characters and that contain whitespace and\
    \ that contain punctuation and that contain numbers and that contain special characters.\n\
    The function should ignore all words that are longer than 3 letters and shorter\
    \ than 20 letters and that contain numbers or special characters and that contain\
    \ whitespace and that contain punctuation and that contain numbers and that contain\
    \ special characters and that contain whitespace.\nThe function should ignore\
    \ all words that are longer than 3 letters and shorter than 20 letters and that\
    \ contain numbers or special characters and that contain whitespace and that contain\
    \ punctuation and that contain numbers and that contain special characters and\
    \ that contain whitespace and that contain punctuation.\nThe function should ignore\
    \ \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqsejsbmz.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqsejsbmz.jl:21\n\
    in expression starting at /tmp/tmpqsejsbmz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    \n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpnp1dmaxi.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnp1dmaxi.jl:22\n\
    in expression starting at /tmp/tmpnp1dmaxi.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of unique\
    \ characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3v968e_w.jl:25\nin expression starting at\
    \ /tmp/tmp3v968e_w.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpyladtf2j.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpyladtf2j.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpyladtf2j.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyladtf2j.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyladtf2j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpyladtf2j.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpyladtf2j.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyladtf2j.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyladtf2j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpyladtf2j.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpyladtf2j.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyladtf2j.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyladtf2j.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpyladtf2j.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmph29136b3.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph29136b3.jl:21\n\
    in expression starting at /tmp/tmph29136b3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input and returns\
    \ a dictionary of the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3xpyhwpx.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3xpyhwpx.jl:21\n\
    in expression starting at /tmp/tmp3xpyhwpx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp820y03h3.jl:30\nin expression starting at\
    \ /tmp/tmp820y03h3.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns a\
    \ dictionary with the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs73cvx0.jl:30\nin expression starting at\
    \ /tmp/tmpqs73cvx0.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns a dictionary with the most repeated\
    \ letter and its count. \n    \n    Example:\n    >>> histogram(\"a b c\")\n \
    \   Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n\
    \    Dict(\"a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n\
    \    >>> histogram(\"\")\n    Dict()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpnpwuyptz.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnpwuyptz.jl:22\n\
    in expression starting at /tmp/tmpnpwuyptz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a dictionary with the most frequent\
    \ letters.\nThe function should ignore the case of the letters.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp6nu8fovo.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6nu8fovo.jl:22\n\
    in expression starting at /tmp/tmp6nu8fovo.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of words in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03kscrsd.jl:26\nin expression starting at\
    \ /tmp/tmp03kscrsd.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpcm78c1ks.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcm78c1ks.jl:22\n\
    in expression starting at /tmp/tmpcm78c1ks.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all punctuation marks and\
    \ split on whitespace.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp57h1dhq8.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp57h1dhq8.jl:22\n\
    in expression starting at /tmp/tmp57h1dhq8.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram.has_key(letter)\n           \
    \ histogram[letter] += 1\n        else\n            histogram[letter] = 1\n  \
    \      end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary of the letters occurring in the string with the number\
    \ of times each letter occurs.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpis1e13b2.jl:30\nin expression starting at\
    \ /tmp/tmpis1e13b2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string with all the letters replaced by their first letter.\n\
    \    \n    Example:\n    >>> first_letter(\"a b c\")\n    \"a\"\n    >>> first_letter(\"\
    a b b a\")\n    \"a\"\n    >>> first_letter(\"a b c a b\")\n    \"a\"\n    >>>\
    \ first_letter(\"b b b b a\")\n    \"b\"\n    >>> first_letter(\"\")\n    \"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6tn8heu0.jl:26\nin expression starting at\
    \ /tmp/tmp6tn8heu0.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmou0ihii.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmou0ihii.jl:1\n\
    in expression starting at /tmp/tmpmou0ihii.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called most_frequent() that takes a string and returns the most frequent\
    \ letter in the string. \nIf there are several letters with the same frequency,\
    \ return all of them. \nIf there are no letters in the string, return an empty\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpice1kf3w.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpice1kf3w.jl:22\n\
    in expression starting at /tmp/tmpice1kf3w.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpv1n5e9gr.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpv1n5e9gr.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpv1n5e9gr.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1n5e9gr.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1n5e9gr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv1n5e9gr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key 'a'\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpv1n5e9gr.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1n5e9gr.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1n5e9gr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv1n5e9gr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String,\
    \ Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpv1n5e9gr.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1n5e9gr.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1n5e9gr.jl:33\ntest"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmou0ihii.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmou0ihii.jl:1\n\
    in expression starting at /tmp/tmpmou0ihii.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a dictionary of the letter with the\
    \ most repetition and containing the corresponding count.\nIf several letters\
    \ have the same occurrence, return all of them.\nExample: histogram(\"a b c\"\
    )\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\nhistogram(\"a b b a\")\nDict(\"a\"\
    \ => 2, \"b\" => 2)\nhistogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n\
    histogram(\"b b b b a\")\nDict(\"b\" => 4)\nhistogram(\"\")\nDict()\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct8py0mv.jl:29\nin expression starting at\
    \ /tmp/tmpct8py0mv.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns a\
    \ dictionary of the letter with the most repetition and containing the corresponding\
    \ count.\n    If several letters have the same occurrence, return all of them.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4xbhhxa.jl:30\nin expression starting at\
    \ /tmp/tmpk4xbhhxa.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0rpejljb.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0rpejljb.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0rpejljb.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of letters in the string that occur more than once.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjsltgto.jl:26\nin expression starting at\
    \ /tmp/tmpkjsltgto.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks (!,.,;,:) in the string.\nWrite a function that\
    \ takes a string and returns the number of words in the string that contain at\
    \ least one uppercase letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one lowercase letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one digit.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one punctuation mark.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one word that contains a lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one word that contains a digit.\nWrite a function that takes a string\
    \ and returns the number of words in the string that contain at least one word\
    \ that contains a punctuation mark.\nWrite a function that takes a string and\
    \ returns the number of words in the string that contain at least one word that\
    \ contains a word that contains a lowercase letter.\nWrite a function that takes\
    \ a string and returns the number of words in the string that contain at least\
    \ one word that contains a word that contains a digit.\nWrite a function that\
    \ takes a string and returns the number of words in the string that contain at\
    \ least one word that contains a word that contains a punctuation mark.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that contain at least one word that contains a word that contains a word that\
    \ contains a lowercase letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one word that contains\
    \ a word that contains a word that contains a digit.\nWrite a function that takes\
    \ a string and returns the number of words in the string that contain at least\
    \ one word that contains a word that contains a word that contains a punctu\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01mrw5w4.jl:26\nin expression starting at\
    \ /tmp/tmp01mrw5w4.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.reduce((acc, letter) =>\n        letter.count(letter) > (acc[letter]\
    \ ? acc[letter] : acc[letter] = 1), histogram)\n    return histogram\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_01zi2a8.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmp_01zi2a8.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  type\
    \ Array has no field reduce\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_01zi2a8.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_01zi2a8.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_01zi2a8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_01zi2a8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  type Array has no\
    \ field reduce\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp_01zi2a8.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_01zi2a8.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_01zi2a8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_01zi2a8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  type Array has no field reduce\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp_01zi2a8.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_01zi2a8.jl:32 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_01zi2a8.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp_01zi2a8.jl:33\n  Test threw exception\n  "
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_letters(test::String) which\
    \ returns a dictionary with the letter as key and the number of times it appears\
    \ as value.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu790awh.jl:30\nin expression starting at\
    \ /tmp/tmpgu790awh.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ji_ugc6.jl:30\nin expression starting at\
    \ /tmp/tmp0ji_ugc6.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram.has_key(letter)\n           \
    \ histogram[letter] += 1 \n        else\n            histogram[letter] = 1\n \
    \       end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nThe function should\
    \ ignore all non-word characters (spaces, punctuation, etc.).\nThe function should\
    \ ignore all empty words.\nThe function should ignore all words that are shorter\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 50 characters.\nThe function should ignore all words that are longer than 50\
    \ characters and have more than 2 repetitions.\nThe function should ignore all\
    \ words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 characters and have more than 2 repetitions.\n\
    The function should ignore all words that are longer than 50 characters and have\
    \ more than 2 repetitions.\nThe function should ignore all words that are longer\
    \ than 50 characters and have more than 2 repetitions.\nThe function should ignore\
    \ all words that are longer than 50 character\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i12av4r.jl:30\nin expression starting at\
    \ /tmp/tmp1i12av4r.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string. \nThe function should ignore\
    \ all punctuation and only count the letters a-z.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptv2h564c.jl:26\nin expression starting at\
    \ /tmp/tmptv2h564c.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with the first letter of each word capitalized.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f6pjjdv.jl:30\nin expression starting at\
    \ /tmp/tmp0f6pjjdv.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a string with the first letter of\
    \ each word capitalized.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl498p1ma.jl:26\nin expression starting at\
    \ /tmp/tmpl498p1ma.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each letter appears in the string.\n\
    The function should ignore case and special characters (like !@#$%^&*()_+-={}[]|;:'\"\
    ,<>?/) and return an empty dictionary if there are no letters.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdhs4u0c.jl:26\nin expression starting at\
    \ /tmp/tmptdhs4u0c.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of words in the string.\nThe function should\
    \ ignore all punctuation and only count the letters a-z.\nThe function should\
    \ ignore all numbers and only count the letters a-z.\nThe function should ignore\
    \ all special characters and only count the letters a-z.\nThe function should\
    \ ignore all non-alphabetic characters and only count the letters a-z.\nThe function\
    \ should ignore all non-alphabetic characters and only count the letters a-z.\n\
    The function should ignore all non-alphabetic characters and only count the letters\
    \ a-z.\nThe function should ignore all non-alphabetic characters and only count\
    \ the letters a-z.\nThe function should ignore all non-alphabetic characters and\
    \ only count the letters a-z.\nThe function should ignore all non-alphabetic characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kg7448i.jl:24\nin expression starting at\
    \ /tmp/tmp7kg7448i.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary with the most frequent letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklhh9knh.jl:26\nin expression starting at\
    \ /tmp/tmpklhh9knh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function called count_letters\
    \ that takes a string and returns a dictionary with the letter as the key and\
    \ the number of times the letter appears as the value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppalclryj.jl:26\nin expression starting at\
    \ /tmp/tmppalclryj.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = histogram.get(c, 0) + 1\n    histogram\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that takes a string and returns the number\
    \ of words in it.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ipmfzij.jl:24\nin expression starting at\
    \ /tmp/tmp3ipmfzij.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmou0ihii.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmou0ihii.jl:1\n\
    in expression starting at /tmp/tmpmou0ihii.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string.\n    \n    Example:\n    >>>\
    \ count_words(\"a b c a b c\")\n    3\n    >>> count_words(\"a b b a b c\")\n\
    \    4\n    >>> count_words(\"a b c a b c a b c\")\n    7\n    >>> count_words(\"\
    a b c a b c a b c a b c\")\n    8\n    >>> count_words(\"a b c a b c a b c a b\
    \ c a b c\")\n    10\n    >>> count_words(\"a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc_t1m7v5.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc_t1m7v5.jl:22\n\
    in expression starting at /tmp/tmpc_t1m7v5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ histogram[c] = histogram.get(c, 0) + 1\n    end\n    histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are\nnot spaces.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9d_9s1ea.jl:25\nin expression starting at\
    \ /tmp/tmp9d_9s1ea.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!()\n    letters.reverse!()\n    \n    for letter in letters\n\
    \        if histogram.has_key?(letter)\n            histogram[letter] += 1\n \
    \       else\n            histogram[letter] = 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letter characters\
    \ (such as punctuation).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore non-letter characters (such as punctuation).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore non-letter\
    \ characters (such as punctuation).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore non-letter characters (such as punctuation).\n\
    The function should ignore case (uppercase and lowercase).\nThe function should\
    \ ignore non-letter characters (such as punctuation).\nThe function should ignore\
    \ case (uppercase and lowercase).\nThe function should ignore non-letter characters\
    \ (such as punctuation).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore non-letter characters (such as punctuation).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore non-letter\
    \ characters (such as punctuation).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore non-letter characters (such as punctuation).\n\
    The function should ignore case (uppercase and lowercase).\nThe function should\
    \ ignore non-letter characters (such as punctuation).\nThe function should ignore\
    \ case (uppercase and lowercase).\nThe function should ignore non-letter characters\
    \ (such as punctuation).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore non-letter characters (such as punctuation).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore non-letter\
    \ characters (such as punctuation).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore non-letter characters (such as \n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yx_ftfs.jl:25\nin expression starting at\
    \ /tmp/tmp8yx_ftfs.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of occurrences of each\
    \ letter in the string.\nWrite a function that takes a string and returns the\
    \ letter with the most occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that takes a string and returns the letter with\
    \ the most and least occurrences.\nWrite a function that takes a string and returns\
    \ the letter with the most and least occurrences.\nWrite a function that takes\
    \ a string and returns the letter with the most and least occurrences.\nWrite\
    \ a function that takes a string and returns the letter with the most and least\
    \ occurrences.\nWrite a function that \nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyjp7qr6c.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjp7qr6c.jl:22\n\
    in expression starting at /tmp/tmpyjp7qr6c.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpg1uj3lu_.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpg1uj3lu_.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpg1uj3lu_.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1uj3lu_.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1uj3lu_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpg1uj3lu_.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpg1uj3lu_.jl:21\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1uj3lu_.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1uj3lu_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpg1uj3lu_.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpg1uj3lu_.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg1uj3lu_.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg1uj3lu_.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpg1uj3lu_.jl:37\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of words in the string. \nWrite a function that takes a string and\
    \ returns the number of sentences in the string. \nWrite a function that takes\
    \ a string and returns the number of uppercase letters in the string. \nWrite\
    \ a function that takes a string and returns the number of lowercase letters in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ digits (0-9) in the string. \nWrite a function that takes a string and returns\
    \ the number of punctuation marks (!,.,?) in it. \nWrite a function that takes\
    \ a string and returns the number of words that are not in the dictionary. \n\
    Write a function that takes a string and returns the number of sentences that\
    \ are not in the dictionary. \nWrite a function that takes a string and returns\
    \ the number of uppercase letters that are not in the dictionary. \nWrite a function\
    \ that takes a string and returns the number of lowercase letters that are not\
    \ in the dictionary. \nWrite a function that takes a string and returns the number\
    \ of digits that are not in the dictionary. \nWrite a function that takes a string\
    \ and returns the number of punctuation marks that are not in the dictionary.\
    \ \nWrite a function that takes a string and returns the number of words that\
    \ are not in the dictionary and that contain at least one digit. \nWrite a function\
    \ that takes a string and returns the number of sentences that are not in the\
    \ dictionary and that contain at least one digit. \nWrite a function that takes\
    \ a string and returns the number of uppercase letters that are not in the dictionary\
    \ and that contain at least one digit. \nWrite a function that takes a string\
    \ and returns the number of lowercase letters that are not in the dictionary and\
    \ that contain at least one digit. \nWrite a function that takes a string and\
    \ returns the number of digits that are not in the dictionary and that contain\
    \ at least one digit. \nWrite a function that takes a string and returns the number\
    \ of punctuation marks that are not in the dictionary and that contain at least\
    \ one digit. \nWrite a function that takes a string and returns the number of\
    \ words that are not in the dictionary and that contain at least one digit. and\
    \ that contain at least one uppercase letter. \nWrite a function that takes a\
    \ string and returns the number of sentences that are not in the dictionary and\
    \ that contain at least one digit. and that contain at least one uppercase letter.\
    \ \nWrite a function that takes a string and returns the number of uppercase letters\
    \ that are not in the dictionary and that contain at least one digit. and that\
    \ contain at least one uppercase letter. \nWrite a function that takes a string\
    \ and returns the number of lowercase letters that are not in the dictionary and\
    \ that contain at least one digit. and that contain at least one uppercase letter.\
    \ \nWrite a function that takes a string and returns the number of digits that\
    \ are not in the dictionary \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpghoaf7m9.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpghoaf7m9.jl:22\n\
    in expression starting at /tmp/tmpghoaf7m9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of times each letter appears in the string.\nWrite a function that takes\
    \ a string and returns the most frequent letter in the string.\nWrite a function\
    \ that takes a string and returns the letter with the highest occurrence in the\
    \ string.\nWrite a function that takes a string and returns the letter with the\
    \ lowest occurrence in the string.\nWrite a function that takes a string and returns\
    \ the letter with the second lowest occurrence in the string.\nWrite a function\
    \ that takes a string and returns the letter with the third lowest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the fourth lowest occurrence in the string.\nWrite a function that takes\
    \ a string and returns the letter with the fifth lowest occurrence in the string.\n\
    Write a function that takes a string and returns the letter with the sixth lowest\
    \ occurrence in the string.\nWrite a function that takes a string and returns\
    \ the letter with the seventh lowest occurrence in the string.\nWrite a function\
    \ that takes a string and returns the letter with the eighth lowest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the ninth lowest occurrence in the string.\nWrite a function that takes\
    \ a string and returns the letter with the tenth lowest occurrence in the string.\n\
    Write a function that takes a string and returns the letter with the eleventh\
    \ lowest occurrence in the string.\nWrite a function that takes a string and returns\
    \ the letter with the twelfth lowest occurrence in the string.\nWrite a function\
    \ that takes a string and returns the letter with the thirteenth lowest occurrence\
    \ in the string.\nWrite a function that takes a string and returns the letter\
    \ with the fourteenth lowest occurrence in the string.\nWrite a function that\
    \ takes a string and returns the letter with the fifteenth lowest occurrence in\
    \ the string.\nWrite a function that takes a string and returns the letter with\
    \ the sixteenth lowest occurrence in the string.\nWrite a function that takes\
    \ a string and returns the letter with the seventeenth lowest occurrence in the\
    \ string.\nWrite a function that takes a string and returns the letter with the\
    \ eighteenth lowest occurrence in the string.\nWrite a function that takes a string\
    \ and returns the letter with the nineteenth lowest occurrence in the string.\n\
    Write a function that takes a string and returns the letter with the \nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwxgzgp3.jl:30\nin expression starting at\
    \ /tmp/tmpcwxgzgp3.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all spaces.\nThe function should\
    \ ignore all non-alphabetic characters.\nThe function should ignore all words\
    \ that are shorter than 3 characters.\nThe function should ignore all words that\
    \ are longer than 20 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain all letters of the alphabet.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters and that\
    \ contain at least one letter of the alphabet.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters and that\
    \ contain at least one letter of the alphabet and that contain at least one digit.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain at least one letter of the alphabet and\
    \ that contain at least one digit and that contain at least one letter.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain at least one letter of the alphabet and that contain\
    \ at least one digit and that contain at least one letter and that contain at\
    \ least one letter.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain at least one letter\
    \ of the alphabet and that contain at least one digit and that contain at least\
    \ one letter and that contain at least one letter and that contain at least one\
    \ letter.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain at least one letter of the alphabet\
    \ and that contain at least one digit and that contain at least one letter and\
    \ that contain at least one letter and that contain at least one letter and that\
    \ contain at least one letter.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain at\
    \ least one letter of the alphabet and that contain at least one digit and \n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzyxi17g6.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzyxi17g6.jl:22\n\
    in expression starting at /tmp/tmpzyxi17g6.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters.sort!()\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqybm7xd2.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqybm7xd2.jl:23\n\
    in expression starting at /tmp/tmpqybm7xd2.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6kny4c_.jl:26\nin expression starting at\
    \ /tmp/tmpj6kny4c_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all empty words.\n\
    The function should ignore all words that are shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain digits. \nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain digits.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 20 characters and that contain digits and\
    \ that contain uppercase letters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain digits\
    \ and that contain uppercase letters.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than \nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gh097_c.jl:24\nin expression starting at\
    \ /tmp/tmp3gh097_c.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for c in split(test)\n        histogram[c]\
    \ = get(histogram, c, 0) + 1\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_thur25s.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_thur25s.jl:1\n\
    in expression starting at /tmp/tmp_thur25s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nThe function\
    \ should ignore all punctuation and only count the letters a-z.\nThe function\
    \ should ignore all numbers and only count the letters a-z.\nThe function should\
    \ ignore all special characters and only count the letters a-z.\nThe function\
    \ should ignore all whitespace and only count the letters a-z.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all word\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplfh51lfd.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplfh51lfd.jl:21\n\
    in expression starting at /tmp/tmplfh51lfd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmou0ihii.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmou0ihii.jl:1\n\
    in expression starting at /tmp/tmpmou0ihii.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a string with the first letter of each word capitalized.\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0udf4k_.jl:30\nin expression starting at\
    \ /tmp/tmpd0udf4k_.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in that string that are not spaces.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmicrgvt1.jl:30\nin expression starting at\
    \ /tmp/tmpmicrgvt1.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0_heon9l.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0_heon9l.jl:22\n\
    in expression starting at /tmp/tmp0_heon9l.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0_heon9l.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0_heon9l.jl:22\n\
    in expression starting at /tmp/tmp0_heon9l.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxkgaeqxa.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpxkgaeqxa.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkgaeqxa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkgaeqxa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpxkgaeqxa.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxkgaeqxa.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxkgaeqxa.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns a dictionary with the most frequent\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16kcvb02.jl:27\nin expression starting at\
    \ /tmp/tmp16kcvb02.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp998lw2dz.jl:26\nin expression starting at\
    \ /tmp/tmp998lw2dz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 1\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h_sgt5m.jl:25\nin expression starting at\
    \ /tmp/tmp_h_sgt5m.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 10\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlxm694k.jl:26\nin expression starting at\
    \ /tmp/tmptlxm694k.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string. \nThe function should ignore all non-word\
    \ characters (spaces, punctuation, etc.).\nThe function should ignore all empty\
    \ strings.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\nThe function\
    \ should ignore all strings with only one word.\nThe function should ignore all\
    \ strings with only one word.\nThe function should ignore all strings with only\
    \ one word.\nThe function should ignore all strings with only one word.\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6gmrqzf.jl:30\nin expression starting at\
    \ /tmp/tmpj6gmrqzf.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0rpejljb.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0rpejljb.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0rpejljb.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nIf the string does not contain\
    \ any words, return 0.\nIf the string contains only spaces, return 0.\nIf the\
    \ string contains only punctuation, return 0.\nIf the string contains only letters,\
    \ return 0.\nIf the string contains only digits, return 0.\nIf the string contains\
    \ only uppercase letters, return 0.\nIf the string contains only lowercase letters,\
    \ return 0.\nIf the string contains only numbers, return 0.\nIf the string contains\
    \ only uppercase and lowercase letters, return 0.\nIf the string contains only\
    \ uppercase and numbers, return 0.\nIf the string contains only lowercase and\
    \ numbers, return 0.\nIf the string contains only uppercase and lowercase and\
    \ numbers, return 0.\nIf the string contains only uppercase and numbers and lowercase\
    \ letters, return 0.\nIf the string contains only lowercase and numbers and uppercase\
    \ letters, return 0.\nIf the string contains only numbers and uppercase letters,\
    \ return 0.\nIf the string contains only numbers and lowercase letters, return\
    \ 0.\nIf the string contains only numbers and punctuation, return 0.\nIf the string\
    \ contains only numbers and letters, return 0.\nIf the string contains only numbers\
    \ and digits, return 0.\nIf the string contains only numbers and uppercase and\
    \ lowercase letters, return 0.\nIf the string contains only numbers and uppercase\
    \ and numbers, return 0.\nIf the string contains only numbers and lowercase and\
    \ numbers, return 0.\nIf the string contains only numbers and punctuation, return\
    \ 0.\nIf the string contains only numbers and letters, return 0.\nIf the string\
    \ contains only numbers and digits, return 0.\nIf the string contains only numbers\
    \ and uppercase and lowercase letters, return 0.\nIf the string contains only\
    \ numbers and uppercase and numbers, return 0.\nIf the string contains only numbers\
    \ and lowercase and numbers, return 0.\nIf the string contains only numbers and\
    \ punctuation, return 0.\nIf the string contains only numbers and letters, return\
    \ 0.\nIf the string contains only numbers and digits, return 0.\nIf the string\
    \ contains only numbers and uppercase and lowercase letters, return 0.\nIf the\
    \ string contains only numbers and uppercase and numbers, return 0.\nIf the string\
    \ contains only numbers and lowercase and numbers, return 0.\nIf the string contains\
    \ only numbers and punctuation, return 0.\nIf the string contains only numbers\
    \ and letters, return 0.\nIf the string contains \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp47sma2p.jl:29\nin expression starting at\
    \ /tmp/tmpp47sma2p.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns a\
    \ dictionary of the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgcdeyh3.jl:26\nin expression starting at\
    \ /tmp/tmpxgcdeyh3.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nnot letters.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kgwc2hu.jl:26\nin expression starting at\
    \ /tmp/tmp2kgwc2hu.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76b185mo.jl:24\nin expression starting at\
    \ /tmp/tmp76b185mo.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not alphabetic characters. \n\
    For example \"a\" has 1 character, \"b\" has 2 characters, \"c\" has 1 character,\
    \ \"d\" has 0 characters and \"e\" has 0 characters.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrrlx13r.jl:30\nin expression starting at\
    \ /tmp/tmpjrrlx13r.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string with the first letter of each word capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp332taqbd.jl:30\nin expression starting at\
    \ /tmp/tmp332taqbd.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all empty strings.\nThe function should ignore all whitespace.\n\
    The function should ignore all non-letter characters.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and whitespace.\nThe function should\
    \ ignore all non-letter characters and whitespace.\nThe function should ignore\
    \ all non-letter characters and whitespace.\nThe function should ignore all non-letter\
    \ characters and whitespace.\nThe function should ignore all non-letter characters\
    \ and whitespace.\nThe function should ignore all non-letter characters and whitespace.\n\
    The function should ignore all non-letter characters and whitespace.\nThe function\
    \ should ignore all non-letter characters and \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpi4zqzzbj.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi4zqzzbj.jl:22\n\
    in expression starting at /tmp/tmpi4zqzzbj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are\nupper case. For example, histogram(\"\
    A B C\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_snq18f.jl:30\nin expression starting at\
    \ /tmp/tmpk_snq18f.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoci02ycc.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoci02ycc.jl:1\n\
    in expression starting at /tmp/tmpoci02ycc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function named \"histogram\" that\
    \ takes a string and returns a dictionary with the letter with the most repetition\
    \ and containing the corresponding count.\nIf several letters have the same occurrence,\
    \ return all of them.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn68ozhja.jl:30\nin expression starting at\
    \ /tmp/tmpn68ozhja.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpej9k10bv.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpej9k10bv.jl:22\n\
    in expression starting at /tmp/tmpej9k10bv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not alphabetic characters. \n\
    Example: \n>>> count_non_alpha(\"a b c\")\n3\n>>> count_non_alpha(\"a b b a\"\
    )\n4\n>>> count_non_alpha(\"b b b b a\")\n4\n>>> count_non_alpha(\"\")\n0\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp23onjb8m.jl:30\nin expression starting at\
    \ /tmp/tmp23onjb8m.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function count_letters(test::String) which\
    \ takes a string and returns the number of times each letter appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp418bnjin.jl:26\nin expression starting at\
    \ /tmp/tmp418bnjin.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpav5nj22d.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not letters.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vp1m41a.jl:26\nin expression starting at\
    \ /tmp/tmp6vp1m41a.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpafi951gj.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpafi951gj.jl:22\n\
    in expression starting at /tmp/tmpafi951gj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all empty strings.\n\
    The function should ignore all words that are shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain only letters a-z and ignore all words that are longer\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain only letters a-z\
    \ and ignore all words that are longer than 20 characters and that contain only\
    \ letters a-z.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z and ignore\
    \ all words that are longer than 20 characters and that contain only letters a-z\
    \ and ignore all words that are longer than 3 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain only letters a-z and ignore all words that are longer than\
    \ 20 characters and that contain only letters a-z and ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain only letters a-z and ignore all words that are longer than\
    \ 20 characters and that contain only letters a-z and ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain only\
    \ letters a-z.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z and ignore\
    \ all words that are longer than 20 characters and that contain only letters a-z\
    \ and ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain only letters a-z and ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain only letters a-z.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain only letters a-z\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29qcxr_p.jl:26\nin expression starting at\
    \ /tmp/tmp29qcxr_p.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the most frequent letter in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp5ib5h9_6.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ib5h9_6.jl:22\n\
    in expression starting at /tmp/tmp5ib5h9_6.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0_heon9l.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0_heon9l.jl:22\n\
    in expression starting at /tmp/tmp0_heon9l.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0_heon9l.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0_heon9l.jl:22\n\
    in expression starting at /tmp/tmp0_heon9l.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not alphabetic. \nFor example\
    \ \"a\" has one alphabetic character and no other characters. \n\"b\" has two\
    \ alphabetic characters and no other characters. \n\"c\" has three alphabetic\
    \ characters and no other characters. \n\"d\" has four alphabetic characters and\
    \ no other characters. \n\"e\" has five alphabetic characters and no other characters.\
    \ \n\"f\" has six alphabetic characters and no other characters. \n\"g\" has seven\
    \ alphabetic characters and no other characters. \n\"h\" has eight alphabetic\
    \ characters and no other characters. \n\"i\" has nine alphabetic characters and\
    \ no other characters. \n\"j\" has ten alphabetic characters and no other characters.\
    \ \n\"k\" has eleven alphabetic characters and no other characters. \n\"l\" has\
    \ twelve alphabetic characters and no other characters. \n\"m\" has thirteen alphabetic\
    \ characters and no other characters. \n\"n\" has fourteen alphabetic characters\
    \ and no other characters. \n\"o\" has fifteen alphabetic characters and no other\
    \ characters. \n\"p\" has sixteen alphabetic characters and no other characters.\
    \ \n\"q\" has seventeen alphabetic characters and no other characters. \n\"r\"\
    \ has eighteen alphabetic characters and no other characters. \n\"s\" has nineteen\
    \ alphabetic characters and no other characters. \n\"t\" has twenty alphabetic\
    \ characters and no other characters. \n\"u\" has twenty-one alphabetic characters\
    \ and no other characters. \n\"v\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5pyt7jl.jl:30\nin expression starting at\
    \ /tmp/tmpu5pyt7jl.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with the first letter of each word capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqabne4vh.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqabne4vh.jl:22\n\
    in expression starting at /tmp/tmpqabne4vh.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpafw3p6ih.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpafw3p6ih.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpafw3p6ih.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpafw3p6ih.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpafw3p6ih.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        if !haskey(histogram, c)\n            histogram[c] = 0\n        end\n\
    \        histogram[c] += 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64i5de2k.jl:28\nin expression starting at\
    \ /tmp/tmp64i5de2k.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of occurrences of each letter in\
    \ the string. \nThe function should return a dictionary of the letter with the\
    \ most occurrences and containing the corresponding count.\nIf several letters\
    \ have the same occurrence, return all of them.\nExample: histogram(\"a b c\"\
    )\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\nhistogram(\"a b b a\")\nDict(\"a\"\
    \ => 2, \"b\" => 2)\nhistogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n\
    histogram(\"b b b b a\")\nDict(\"b\" => 4)\nhistogram(\"\")\nDict()\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph15xm7pz.jl:26\nin expression starting at\
    \ /tmp/tmph15xm7pz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nExample: \n>>> count_non_space(\"a b c\")\n3\n>>> count_non_space(\"\
    a b b a\")\n4\n>>> count_non_space(\"b b b b a\")\n5\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_7nhkb6.jl:29\nin expression starting at\
    \ /tmp/tmpd_7nhkb6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all non-word characters (spaces, punctuation, etc.).\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ strings consisting of only whitespace.\nThe function should ignore all strings\
    \ consisting of only a single word.\nThe function should ignore all strings consisting\
    \ of only two words.\nThe function should ignore all strings consisting of only\
    \ three words.\nThe function should ignore all strings consisting of only four\
    \ words.\nThe function should ignore all strings consisting of only five words.\n\
    The function should ignore all strings consisting of only six words.\nThe function\
    \ should ignore all strings consisting of only seven words.\nThe function should\
    \ ignore all strings consisting of only eight words.\nThe function should ignore\
    \ all strings consisting of only nine words.\nThe function should ignore all strings\
    \ consisting of only ten words.\nThe function should ignore all strings consisting\
    \ of only eleven words.\nThe function should ignore all strings consisting of\
    \ only twelve words.\nThe function should ignore all strings consisting of only\
    \ thirteen words.\nThe function should ignore all strings consisting of only fourteen\
    \ words.\nThe function should ignore all strings consisting of only fifteen words.\n\
    The function should ignore all strings consisting of only sixteen words.\nThe\
    \ function should ignore all strings consisting of only seventeen words.\nThe\
    \ function should ignore all strings consisting of only eighteen words.\nThe function\
    \ should ignore all strings consisting of only nineteen words.\nThe function should\
    \ ignore all strings consisting of only twenty words.\nThe function should ignore\
    \ all strings consisting of only twenty-one words.\nThe function should ignore\
    \ all strings consisting of only twenty-two words.\nThe function should ignore\
    \ all strings consisting of only twenty-three words.\nThe function should ignore\
    \ all strings consisting of only twenty-four words.\nThe function should ignore\
    \ all strings consisting of only twenty-five words.\nThe function should ignore\
    \ all strings consisting of \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv6ryp30m.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv6ryp30m.jl:22\n\
    in expression starting at /tmp/tmpv6ryp30m.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8a2zt32.jl:26\nin expression starting at\
    \ /tmp/tmpa8a2zt32.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letter characters\
    \ and return a dictionary with the letters as keys and the number of times they\
    \ appear in the string as values.\nThe function should ignore case when counting.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp716dap5p.jl:29\nin expression starting at\
    \ /tmp/tmp716dap5p.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0rpejljb.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp0rpejljb.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0rpejljb.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.1>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.1>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.1>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.1>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.1>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of unique characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qrm9215.jl:26\nin expression starting at\
    \ /tmp/tmp2qrm9215.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all non-word characters\
    \ (spaces, punctuation, etc.).\nThe function should ignore all empty strings.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjmxpl2ce.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjmxpl2ce.jl:22\n\
    in expression starting at /tmp/tmpjmxpl2ce.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are\nnot in the alphabet (a to z).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgnmfzdco.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgnmfzdco.jl:22\n\
    in expression starting at /tmp/tmpgnmfzdco.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0_heon9l.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0_heon9l.jl:22\n\
    in expression starting at /tmp/tmp0_heon9l.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbn3s1u1v.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbn3s1u1v.jl:22\n\
    in expression starting at /tmp/tmpbn3s1u1v.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a dictionary of the letters with the most occurrences.\nThe function should\
    \ ignore spaces.\nThe function should ignore uppercase letters.\nThe function\
    \ should ignore lowercase letters.\nThe function should ignore non-alphabetic\
    \ characters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ letters.\nThe function should ignore repeated letters.\nThe function should\
    \ ignore repeated letters.\nThe function should ignore repeated letters.\nThe\
    \ function should ignore repeated letters.\nThe function should ignore repeated\
    \ \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltgcpzy7.jl:30\nin expression starting at\
    \ /tmp/tmpltgcpzy7.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpv1n5e9gr.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpv1n5e9gr.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpv1n5e9gr.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1n5e9gr.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1n5e9gr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv1n5e9gr.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key 'a'\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpv1n5e9gr.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1n5e9gr.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1n5e9gr.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpv1n5e9gr.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String,\
    \ Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpv1n5e9gr.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv1n5e9gr.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv1n5e9gr.jl:33\ntest"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    \n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nExample: histogram(\"a b c\")\nDict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1)\nhistogram(\"a b b a\")\nDict(\"a\" => 2, \"b\" => 2)\nhistogram(\"\
    a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\nhistogram(\"b b b b a\")\nDict(\"\
    b\" => 4)\nhistogram(\"\")\nDict()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3aab8clu.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3aab8clu.jl:22\n\
    in expression starting at /tmp/tmp3aab8clu.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a string with all the letters capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp6kr1_xtj.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6kr1_xtj.jl:22\n\
    in expression starting at /tmp/tmp6kr1_xtj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxp4r_i5.jl:26\nin expression starting at\
    \ /tmp/tmpoxp4r_i5.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function which takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation marks.\nThe function should ignore\
    \ all empty strings.\nThe function should ignore all strings with only one word.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore all strings with only one letter.\nThe function\
    \ should ignore all strings with only one letter.\nThe function should ignore\
    \ all strings with only one letter.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore all strings with only one letter.\nThe function\
    \ should ignore all strings with only one letter.\nThe function should ignore\
    \ all strings with only one letter.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore all strings with only one letter.\nThe function\
    \ should ignore all strings with only one letter.\nThe function should ignore\
    \ all strings with only one letter.\nThe function should ignore all strings with\
    \ only one letter.\nThe function should ignore all strings with only one letter.\n\
    The function should ignore all strings with only one letter.\nThe function should\
    \ ignore all strings with only one letter.\nThe function should ignore all strings\
    \ with only one letter.\nThe function should ignore all strings with only one\
    \ letter.\nThe function should ignore \nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0dsi7d52.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0dsi7d52.jl:21\n\
    in expression starting at /tmp/tmp0dsi7d52.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8rq0ka6.jl:29\nin expression starting at\
    \ /tmp/tmpj8rq0ka6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = letters[2:end]\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all empty strings.\nThe function should ignore all spaces.\n\
    The function should ignore all numbers.\nThe function should ignore all uppercase\
    \ letters.\nThe function should ignore all lowercase letters.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebmprarf.jl:27\nin expression starting at\
    \ /tmp/tmpebmprarf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a list of all words in the string.\
    \ \nThe function should ignore all punctuation and split on whitespace.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all words that\
    \ are shorter than 3 characters.\nThe function should ignore all words that are\
    \ longer than 20 characters.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 20 characters.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain digits. \nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 20 characters and that contain digits.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain digits and that contain non-alphanumeric\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain digits and that contain non-alphanumeric\
    \ characters and that contain whitespace.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain non-alphanumeric characters and that contain whitespace\
    \ and that contain punctuation.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain digits\
    \ and that contain non-alphanumeric characters and that contain whitespace and\
    \ that contain punctuation and that contain whitespace.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain digits and that contain non-alphanumeric characters and that contain\
    \ whitespace and that contain punctuation and that contain whitespace and that\
    \ contain punctuation.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain digits and that\
    \ contain non-alphanumeric characters and that contain whitespace and that contain\
    \ punctuation and that contain whitespace and that contain punctuation and that\
    \ contain whitespace.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain digits and that\
    \ contain non-alphanumeric characters and that contain whitespace and that contain\
    \ punctuation and that contain whitespace and that contain punctuation and that\
    \ contain whitespace and that contain punctuation.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain digits and that contain non-alphanumeric characters and that contain\
    \ whitespace and that contain punctuation and that contain whitespace and that\
    \ contain punctuation and that contain whitespace \nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqo5160a.jl:26\nin expression starting at\
    \ /tmp/tmpkqo5160a.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are\nnot letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp965rhazi.jl:29\nin expression starting at\
    \ /tmp/tmp965rhazi.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpari99h5g.jl:30\nin expression starting at\
    \ /tmp/tmpari99h5g.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters that are not alphabetic or digits. \nExample:\
    \ \n>>> count_non_alpha(\"a b c\")\n3\n>>> count_non_alpha(\"a b b a\")\n4\n>>>\
    \ count_non_alpha(\"b b b b a\")\n4\n>>> count_non_alpha(\"\")\n0\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkba10hrq.jl:26\nin expression starting at\
    \ /tmp/tmpkba10hrq.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpaf9q62nu.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaf9q62nu.jl:23\n\
    in expression starting at /tmp/tmpaf9q62nu.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!\n    letters.reverse!\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of unique words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1vo96mb.jl:28\nin expression starting at\
    \ /tmp/tmpk1vo96mb.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7lns048o.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7lns048o.jl:1\n\
    in expression starting at /tmp/tmp7lns048o.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters = sort(letters)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks (!, ?, ., ;, :) in the string.\nWrite a function\
    \ that takes a string and returns the number of words in the string that are all\
    \ uppercase.\nWrite a function that takes a string and returns the number of words\
    \ in the string that are all lowercase.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all digits.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ are all punctuation marks.\nWrite a function that takes a string and returns\
    \ the number of words in the string that are all uppercase and all lowercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are all digits all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lowercase,\
    \ all digits and all punctuation marks.\nWrite a function that takes a string\
    \ and returns the number of words in the string that are all uppercase, all lower\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijpcve0m.jl:27\nin expression starting at\
    \ /tmp/tmpijpcve0m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of characters in that string that are\nnot spaces, tabs, or newlines.\
    \ Use this function to count the number of words in a string.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnq89c8yl.jl:26\nin expression starting at\
    \ /tmp/tmpnq89c8yl.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ numbers and only count the letters a-z.\nThe function should ignore all special\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all uppercase and\
    \ only count the letters a-z.\nThe function should ignore all lowercase and only\
    \ count the letters a-z.\nThe function should ignore all characters that are not\
    \ a-z and ignore all whitespace.\nThe function should ignore all characters that\
    \ are not a-z and ignore all punctuation.\nThe function should ignore all characters\
    \ that are not a-z and ignore all numbers.\nThe function should ignore all characters\
    \ that are not a-z and ignore all special characters.\nThe function should ignore\
    \ all characters that are not a-z and ignore all uppercase and lowercase.\nThe\
    \ function should ignore all characters that are not a-z and ignore all numbers.\n\
    The function should ignore all characters that are not a-z and ignore all special\
    \ characters.\nThe function should ignore all characters that are not a-z and\
    \ ignore all uppercase and lowercase.\nThe function should ignore all characters\
    \ that are not a-z and ignore all numbers.\nThe function should ignore all characters\
    \ that are not a-z and ignore all special characters.\nThe function should ignore\
    \ all characters that are not a-z and ignore all uppercase and lowercase.\nThe\
    \ function should ignore all characters that are not a-z and ignore all numbers.\n\
    The function should ignore all characters that are not a-z and ignore all special\
    \ characters.\nThe function should ignore all characters that are not a-z and\
    \ ignore all uppercase and lowercase.\nThe function should ignore all characters\
    \ that are not a-z and ignore all numbers.\nThe function should ignore all characters\
    \ that are not a-z and ignore all special characters.\nThe function should ignore\
    \ all characters that are not a-z and ignore all uppercase and lowercase.\nThe\
    \ function should ignore all characters that are not a-z and ignore all numbers.\n\
    The function should ignore \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9ctof6k.jl:24\nin expression starting at\
    \ /tmp/tmpt9ctof6k.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nIf the letter does not\
    \ appear in the string, return 0.\nIf the letter appears more than once, return\
    \ the number of times it appears.\nIf the letter appears less than once, return\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzb4bam4t.jl:30\nin expression starting at\
    \ /tmp/tmpzb4bam4t.jl:30\n"
  stdout: ''
