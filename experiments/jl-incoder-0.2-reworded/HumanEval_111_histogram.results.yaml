name: HumanEval_111_histogram
language: jl
results:
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns a\
    \ dictionary with the most frequent letter in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfbjmu24j.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbjmu24j.jl:21\n\
    in expression starting at /tmp/tmpfbjmu24j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore non-letter characters and return\
    \ 0 for empty strings.\nThe function should ignore case when counting.\nThe function\
    \ should ignore non-letter characters and return 0 for empty strings.\nThe function\
    \ should ignore case when counting.\nThe function should ignore non-letter characters\
    \ and return 0 for empty strings.\nThe function should ignore case when counting.\n\
    The function should ignore non-letter characters and return 0 for empty strings.\n\
    The function should ignore case when counting.\nThe function should ignore non-letter\
    \ characters and return 0 for empty strings.\nThe function should ignore case\
    \ when counting.\nThe function should ignore \nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnsy80apk.jl:26\nin expression starting at\
    \ /tmp/tmpnsy80apk.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpoifyk117.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoifyk117.jl:22\n\
    in expression starting at /tmp/tmpoifyk117.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary with the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nIf no letter appears in the string, return an empty dictionary.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmha_wsm.jl:24\nin expression starting at\
    \ /tmp/tmphmha_wsm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!()\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nnot spaces.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_akh1t8_.jl:31\nin expression starting at\
    \ /tmp/tmp_akh1t8_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpej9k10bv.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpej9k10bv.jl:22\n\
    in expression starting at /tmp/tmpej9k10bv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0rpejljb.jl:32\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp0rpejljb.jl:35\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0rpejljb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0rpejljb.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rpejljb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters.sort!\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a dictionary with the frequency of\
    \ each character\nin the string. \nExample: \n>>> histogram(\"a b c\")\nDict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\nDict(\"a\" => 2,\
    \ \"b\" => 2)\n>>> histogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n>>>\
    \ histogram(\"b b b b a\")\nDict(\"b\" => 4)\n>>> histogram(\"\")\nDict()\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzx8zjs2i.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzx8zjs2i.jl:23\n\
    in expression starting at /tmp/tmpzx8zjs2i.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    letters = unique(letters)\n    for letter in\
    \ letters\n        histogram[letter] = length(filter(x -> x == letter, letters))\n\
    \    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nThe function\
    \ should ignore all non-word characters (punctuation, spaces, etc).\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one word.\nThe function should ignore all strings consisting of only\
    \ one word.\nThe function should ignore all strings consisting of only one word.\n\
    The function should ignore all strings consisting of only one word.\nThe function\
    \ should ignore all strings consisting of only one word.\nThe function should\
    \ ignore all strings consisting of only one word.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word.\nThe function should ignore all strings consisting\
    \ of only one \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjtk95qm.jl:28\nin expression starting at\
    \ /tmp/tmpnjtk95qm.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string with the\
    \ first letter of each word capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7uby_pt3.jl:22 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uby_pt3.jl:23\n\
    in expression starting at /tmp/tmp7uby_pt3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplfgka9ap.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplfgka9ap.jl:22\n\
    in expression starting at /tmp/tmplfgka9ap.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all numbers and only count the letters\
    \ a-z.\nThe function should ignore all special characters and only count the letters\
    \ a-z.\nThe function should ignore all whitespace and only count the letters a-z.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are longer than 20 characters.\nThe function should\
    \ ignore all words that are longer than 50 characters.\nThe function should ignore\
    \ all words that are longer than 100 characters.\nThe function should ignore all\
    \ words that are longer than 200 characters.\nThe function should ignore all words\
    \ that are longer than 500 characters.\nThe function should ignore all words that\
    \ are longer than 1000 characters.\nThe function should ignore all words that\
    \ are longer than 2000 characters.\nThe function should ignore all words that\
    \ are longer than 5000 characters.\nThe function should ignore all words that\
    \ are longer than 10000 characters.\nThe function should ignore all words that\
    \ are longer than 20000 characters.\nThe function should ignore all words that\
    \ are longer than 50000 characters.\nThe function should ignore all words that\
    \ are longer than 100000 characters.\nThe function should ignore all words that\
    \ are longer than 200000 characters.\nThe function should ignore all words that\
    \ are longer than 500000 characters.\nThe function should ignore all words that\
    \ are longer than 1000000 characters.\nThe function should ignore all words that\
    \ are longer than 2000000 characters.\nThe function should ignore all words that\
    \ are longer than 5000000 characters.\nThe function should ignore all words that\
    \ are longer than 10000000 characters.\nThe function should ignore all words that\
    \ are longer than 20000000 characters.\nThe function should ignore all words that\
    \ are longer than 50000000 characters.\nThe function should ignore all words that\
    \ are longer than 100000000 characters.\nThe function should ignore all words\
    \ that are longer than 200000000 characters.\nThe function should ignore all words\
    \ that are longer than 500000000 characters.\nThe function should ignore all words\
    \ that are longer than 1000000000 characters.\nThe function should ignore all\
    \ words that are longer than 2000000000 characters.\nThe function should ignore\
    \ all words that are longer than 5000000000 characters.\nThe function should ignore\
    \ all words that are longer than 10000000000 characters.\nThe function should\
    \ ignore all words that are longer than 20000000000 characters.\n\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1nm_j795.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1nm_j795.jl:22\n\
    in expression starting at /tmp/tmp1nm_j795.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpale9re_8.jl:30\nin expression starting at\
    \ /tmp/tmpale9re_8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input and returns\
    \ the number of occurrences of each letter in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptw9gtpzc.jl:30\nin expression starting at\
    \ /tmp/tmptw9gtpzc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of unique characters in the string.\n    \n    Example:\n    >>> unique_characters(\"\
    a b c\")\n    3\n    >>> unique_characters(\"a b b a\")\n    4\n    >>> unique_characters(\"\
    b b b b a\")\n    4\n    >>> unique_characters(\"\")\n    0\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5gb06mn.jl:30\nin expression starting at\
    \ /tmp/tmpx5gb06mn.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    letters = sort(letters)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp414itpw5.jl:33\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp414itpw5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp414itpw5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp414itpw5.jl:36\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp414itpw5.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp414itpw5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp414itpw5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpt_972hx8.jl:20 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt_972hx8.jl:21\n\
    in expression starting at /tmp/tmpt_972hx8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqaau_sbn.jl:26\nin expression starting at\
    \ /tmp/tmpqaau_sbn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpav5nj22d.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmpav5nj22d.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpav5nj22d.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpav5nj22d.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpav5nj22d.jl:38\n  Test threw exception\n  Expression:\
    \ can"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpav5nj22d.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4o3lj0q.jl:24\nin expression starting at\
    \ /tmp/tmpc4o3lj0q.jl:24\n"
  exit_code: 1
  status: SyntaxError
