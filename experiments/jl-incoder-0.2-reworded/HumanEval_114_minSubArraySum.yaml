name: HumanEval_114_minSubArraySum
language: jl
prompt: "\"\"\"\n    Given a vector of integers nums, find the minimum sum of any\
  \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
  \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n\
  function minSubArraySum(nums::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
  \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
  \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
  \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10,\
  \ -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
  \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
  \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
  \ -1]) == -1)\nend\n"
completions: ["    sum = 0\n    for n in nums\n        sum += n\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>>\
    \ minSubArraySum([-1, -2, -3])\n-6\nHint: use min() and a for loop.", "    \n\
    \    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given vector.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a vector that\
    \ are less than a given value.", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are less than a given value.", "    \n    sum =\
    \ 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend", "   \
    \ \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ to iterate through nums.", "    \n    sum = 0\n    \n    for n in nums\n   \
    \     sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find\
    \ the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2,\
    \ -3])\n    -6\n    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n   \
    \     sum += n\n    end\n    \n    return sum\nend", "    \n    sum = 0\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given vector.", "    \n    sum = 0\n    for x in nums\n \
    \       sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find\
    \ the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2,\
    \ -3])\n    -6\n    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n   \
    \     sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a Julia\
    \ function minSubArraySum(nums::Vector{Int64})::Vector{Int64} that takes in an\
    \ array of integers and returns the minimum sum of any non-empty sub-array of\
    \ nums.", "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the sum of the numbers in the\
    \ array nums.", "    sum = 0\n    for x in nums\n        sum += x\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.4>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are less than a given value.", "    \n    sum::Int64 = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ positive integers in a given vector.", "    \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.\nExample\n\
    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n\
    -6\nHint: You will need to use the function minSubArraySum.", "    \n    sum =\
    \ 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64}) which returns\
    \ the minimum sum of any non-empty sub-vector of nums.", "    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n   \
    \ end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ times a given element appears in an array.", "    \n    sum = 0\n    for num\
    \ in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find the minimum product of any non-empty\
    \ sub-array of nums.\nExample\nGiven nums = [-1, -2, -3, 0, 3, 6, 9], the function\
    \ should return 0.\nThe product of any sub-array of nums is defined as the product\
    \ of its elements multiplied by the first element. Since the empty set has no\
    \ product, it is not included.\nThe product of any two non-adjacent sub-arrays\
    \ of nums is defined as the product of the two elements at the two indices (first\
    \ and second) multiplied by the first element. Since the two sub-arrays are non-adjacent,\
    \ it is not included.\nThe product of any three non-adjacent sub-arrays of nums\
    \ is defined as the product of the three elements at the three indices (first,\
    \ second, and third) multiplied by the first element. Since the three sub-arrays\
    \ are non-adjacent, it is not included.\nThe product of any four-element sub-array\
    \ of nums is defined as the product of the four elements at the first three indices\
    \ multiplied by the first element. Since the four sub-array is non-adjacent, it\
    \ is not included.\nThe product of any five-element sub-array of nums is defined\
    \ as the product of the five elements at the first four indices multiplied by\
    \ the first element. Since the five sub-array is non-adjacent, it is not included.\n\
    The product of any six-element sub-array of nums is defined as the product of\
    \ the six elements at the first five indices multiplied by the first element.\
    \ Since the six sub-array is non-adjacent, it is not included.\nThe product of\
    \ any seven-element sub-array of nums is defined as the product of the seven elements\
    \ at the first six indices multiplied by the first element. Since the seven sub-array\
    \ is non-adjacent, it is not included.\nThe product of any eight-element sub-array\
    \ of nums is defined as the product of the eight elements at the first seven indices\
    \ multiplied by the first element. Since the eight sub-array is non-adjacent,\
    \ it is not included.\nThe product of any nine-element sub-array of nums is defined\
    \ as the product of the nine elements at the first eight indices multiplied by\
    \ the first element. Since the nine sub-array is non-adjacent, it is not included.\n\
    The product of any 10-element sub-array of nums is defined as the product of the\
    \ ten elements at the first n", "    \n    sum = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend", "    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in a vector.", "    \n    sum = 0\n    \n    for n in\
    \ nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that finds the minimum\
    \ sum of a given array of integers. \nThe function should take an array of integers\
    \ as an argument and return the minimum sum.\nExample\n>>> minSum([2, 3, 4, 1,\
    \ 2, 4])\n1\n>>> minSum([-1, -2, -3])\n-6\n</text>\n<code language=julia-1.5>",
  "    \n    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 4\nWrite a function that returns the\
    \ number of times a given element appears in a given vector.", "    \n    sum\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nPart 2\nGiven a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find the\
    \ minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n\
    \    -6\n    \"\"\"", "    \n    sum = 0\n    \n    for x in nums\n        sum\
    \ += x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that finds the minimum sum of any non-empty sub-vector of nums.\nExample\n>>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\n\
    Hint: Use a for loop to iterate over the sub-vectors of nums.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of integers in a\
    \ given vector that are less than a given value.", "    \n    sum = 0\n    for\
    \ num in nums\n        sum += num\n    end\n    return sum\nend", "    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sum = 0\n    \n    for n in nums\n    \
    \    sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.", "    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend", "    \n\
    \    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nProblem 7\nGiven a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of times a given number\
    \ appears in a given vector.", "    sum = 0\n    \n    for n in nums\n       \
    \ sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of integers in a given vector that are less than a given value.", "    \n  \
    \  sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.", "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum sum of any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ and a variable sum to keep track of the current sum.", "    sum = 0\n    for\
    \ num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise: Find the minimum sum\
    \ of any non-empty sub-vector of nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\nminSubArraySum([-1, -2, -3])", "    \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-vector of nums.", "    \n\
    \    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of integers\
    \ in an array that are less than a given value.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the minimum sum of any non-empty sub-vector of nums.\n\
    Example\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2,\
    \ -3])\n-6\nHint: Use a for loop to iterate over the sub-vectors of nums.", " \
    \   \n    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum\
    \ of any non-empty sub-vector of nums.\nFor example, given nums = [2, 3, 4, 1,\
    \ 2, 4], the function should return 1.", "    \n    sum = 0\n    \n    for n in\
    \ nums\n        sum += n\n    end\n    \n    return sum\nend", "    \n    sum\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nProblem 7\nGiven a vector of integers nums, find the minimum\
    \ sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum::Int64 = 0\n    \n    for i in nums\n        sum += i\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum sum of a given vector of integers nums.", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for x in\
    \ nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum sum of a vector of integers nums.", "    \n    sum\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 3\nGiven a vector of integers nums, find the minimum sum of any non-empty\
    \ sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"", "   \
    \ \n    sum = 0\n    \n    for x in nums\n        sum += x\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given vector.", "    \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a vector that\
    \ are less than a given value.", "    \n    sum = 0\n    for n in nums\n     \
    \   sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times the number n appears in nums.", "    \n    sum = 0\n    \n    for n\
    \ in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times the given element appears in the given vector.", "    \n\
    \    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n  \
    \  for n in nums\n        sum += n\n    end\n    \n    return sum\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given value appears in a given vector.", "   \
    \ \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend", "    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: You can use\
    \ the function minSubArraySum.", "    \n    sum = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times the number \"x\" appears\
    \ in the vector \"nums\". For example, the number of times the number \"3\" appears\
    \ in the vector [3, 4, 3, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, ", "    \n    sum = 0\n    for x in nums\n        sum\
    \ += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a given vector.", "    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of a given vector of integers nums.", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector.", "  \
    \  \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ to iterate over the sub-arrays of nums.", "    \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    sum = 0\n    for\
    \ n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of prime numbers less than a given integer n.", "  \
    \  \n    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for n in nums\n  \
    \      sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.", "    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use minSubArraySum(nums[start:end])", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ vector.", "    \n    sum = 0\n    \n    for x in nums\n        sum += x\n  \
    \  end\n    \n    return sum\nend", "    \n    sum::Int64 = 0\n    \n    for n\
    \ in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum sum of any non-empty sub-array of nums.", "    \n    sum = 0\n \
    \   for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum sum of any non-empty sub-array of nums.", "    \n    sum\
    \ = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in a given vector.", "    \n    sum = 0\n    \n    for num in nums\n       \
    \ sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7: Find the minimum\
    \ sum of any non-empty sub-vector of length 3 of the given array.\nExample\n>>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\n\
    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.", "    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.", "    \n    sum = 0\n    \n    for n in nums\n        sum +=\
    \ n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven a vector of integers nums, find\
    \ the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2,\
    \ -3])\n    -6\n    \"\"\"", "    sum::Int64 = 0\n    \n    for n in nums\n  \
    \      sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given element appears\
    \ in a given vector.", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of positive integers less than or equal to\
    \ n.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n\
    \    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given element appears in a given vector.",
  "    \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a vector.", "    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in a given vector.",
  "    \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ to iterate over the vector. \nHint: Use a while loop to iterate over the vector.\
    \ \nHint: Use a recursive function to solve the problem. \nHint: Use a while loop\
    \ to iterate over the vector. \nHint: Use a recursive function to solve the problem.\
    \ \nHint: Use a while loop to iterate over the vector. \nHint: Use a recursive\
    \ function to solve the problem. \nHint: Use a while loop to iterate over the\
    \ vector. \nHint: Use a recursive function to solve the problem. \nHint: Use a\
    \ while loop to iterate over the vector. \nHint: Use a recursive function to solve\
    \ the problem. \nHint: Use a while loop to iterate over the vector. \nHint: Use\
    \ a recursive function to solve the problem. \nHint: Use a while loop to iterate\
    \ over the vector. \nHint: Use a recursive function to solve the problem. \nHint:\
    \ Use a while loop to iterate over the vector. \nHint: Use a recursive function\
    \ to solve the problem. \nHint: Use a while loop to iterate over the vector. \n\
    Hint: Use a recursive function to solve the problem. \nHint: Use a while loop\
    \ to iterate over the vector. \nHint: Use a recursive function to solve the problem.\
    \ \nHint: Use a while loop to iterate over the vector. \nHint: Use a recursive\
    \ function to solve the problem. \nHint: Use a while loop to iterate over the\
    \ vector. \nHint: Use a recursive function to solve the problem. \nHint: Use a\
    \ while loop to iterate over the vector. \nHint: Use a recursive function to solve\
    \ the problem. \nHint: Use a while loop to iterate over the vector. \nHint: Use\
    \ a recursive function to solve the problem. \nHint: Use a while loop to iterate\
    \ over the vector. \nHint: Use a recursive function to solve the problem. \nHint:\
    \ Use a while loop to iterate over the vector. \nHint: Use a recursive function\
    \ to solve the problem. \nHint: Use a while loop to iterate over the vector. \n\
    Hint: Use a recursive function to solve the problem. \nHint: Use a while loop\
    \ to iterate over the vector. \nHint: Use ", "    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        \n        if num > 0\n            \n           \
    \ sum += num\n            \n        else\n            \n            sum -= num\n\
    \            \n        end\n        \n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given element\
    \ appears in a given vector.", "    \n    sum = 0\n    \n    for n in nums\n \
    \       sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        \n        if sum < n\n            sum = n\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find the\
    \ minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n    >>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n\
    \    -6\n    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the minimum sum of any non-empty sub-vector of nums.\n\
    Example\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2,\
    \ -3])\n-6\nHint: You will need to use a for loop to iterate over the sub-vectors\
    \ of nums.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find\
    \ the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2,\
    \ -3])\n    -6\n    \"\"\"", "    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector that satisfy a given condition. For\
    \ example, a vector with elements greater than 5 would return 3.", "    \n   \
    \ sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.4>", "    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-vector of nums.", "    \n\
    \    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint\nThe function minSubArraySum(nums::Vector{Int64})\
    \ should return an Int64.", "    \n    sum = 0\n    for x in nums\n        sum\
    \ += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a given array that add up to a specific\
    \ value.", "    \n    sum::Int64 = 0\n    \n    for i in nums\n        \n    \
    \    if sum < i\n            sum = i\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the number of elements in the vector that are less than the given\
    \ value.", "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times each element\
    \ appears in the input array. For example, given [1, 1, 2, 3], return [1, 1, 2,\
    \ 3]. You may assume that the array does not contain duplicate elements.", " \
    \   sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-vector of nums.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 7\nGiven a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    sum::Int64 = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given number appears in a given vector.", "    \n    sum = 0\n  \
    \  \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.", "    \n    sum = 0\n    \n    for x in nums\n        \n        if\
    \ sum < x\n            sum = x\n        end\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of elements\
    \ in a vector that are less than a given value.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ vector. For example, if the vector is [4, 9, 16, 25], then the function should\
    \ return 50.", "    sum = 0\n    for n in nums\n        sum += n\n    end\n  \
    \  return sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the first n positive integers, where n is given as an input\
    \ to the function.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times each element appears\
    \ in an array.", "    sum = 0\n    for i in nums\n        sum += i\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers nums, find\
    \ the maximum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> maxSubArraySum([2, 3, 4, 1, 2, 4])\n    10\n    >>> maxSubArraySum([-1,\
    \ -2, -3])\n    -3\n    \"\"\"", "    \n    sum::Int64 = 0\n    \n    for i in\
    \ nums\n        sum += i\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given vector.", "    \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.", "    \n    sum = 0\n    \n    for n in nums\n   \
    \     sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of prime numbers less than or equal to a given number.", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\n\
    \    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n\
    \    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"", "    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the first n positive integers. \nExample\n>>> sumFirstN([2,\
    \ 3, 4, 1, 2, 4])\n10\n>>> sumFirstN([-1, -2, -3])\n6\n>>> sumFirstN([-10, -20,\
    \ -30])\n60\n>>> sumFirstN([-10, -20, -30, -40])\n140\n>>> sumFirstN([-10, -20,\
    \ -30, -40, -50])\n210\n>>> sumFirstN([-10, -20, -30, -40, -50, -60])\n280\n>>>\
    \ sumFirstN([-10, -20, -30, -40, -50, -60, -70])\n360\n>>> sumFirstN([-10, -20,\
    \ -30, -40, -50, -60, -70, -80])\n440\n>>> sumFirstN([-10, -20, -30, -40, -50,\
    \ -60, -70, -80, -90])\n520\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90, -100])\n600\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70, -80,\
    \ -90, -100, -101])\n660\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70, -80,\
    \ -90, -100, -101, -102])\n760\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90, -100, -101, -102, -103])\n850\n>>> sumFirstN([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90, -100, -101, -102, -103, -104])\n950\n>>> sumFirstN([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105])\n\
    1050\n>>> sumFirstN([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101,\
    \ -102, -103, -104, -105, -106])\n1150\n>>> sumFirstN([-10, -20, -30, -40, -50,\
    \ -60, -70, -80, -90, -100, -101, -102, -103, -10", "    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.", "  \
    \  \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of a given vector of integers nums.", "    \n    sum = 0\n    for num in\
    \ nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a Julia\
    \ function called maxSubArraySum(nums::Vector{Int64}) that returns the maximum\
    \ sum of any non-empty sub-vector of nums.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend", "    \n  \
    \  sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given vector.", "    \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.", "    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ to iterate through nums.", "    \n    sum = 0\n    \n    for num in nums\n \
    \       sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in the vector nums up\
    \ to the first occurrence of the number num.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the sum of the squares of the numbers in a\
    \ vector.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n  \
    \  end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 3\nGiven a vector of integers nums, find the minimum sum of any\
    \ non-empty sub-vector\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of a given array\
    \ of integers. \nExample\n>>> minSum([2, 3, 4, 1, 2, 4])\n1\n>>> minSum([-1, -2,\
    \ -3])\n-6\n</text>\n<code language=julia-1.5>", "    \n    sum = 0\n    for x\
    \ in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-vector of nums.", "    sum\
    \ = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    sum::Int64 = 0\n    \n    for i in nums\n        sum += i\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.", "    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the minimum sum of any non-empty sub-array of nums.\n\
    Example\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2,\
    \ -3])\n-6\nHint: You may want to use the function minSubArraySum defined above.",
  "    \n    sum::Int64 = 0\n    \n    for i in nums\n        sum += i\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.", "    \n    sum =\
    \ 0\n    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum\
    \ of any non-empty sub-vector of nums.", "    \n    sum = 0\n    \n    for n in\
    \ nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-vector of nums.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    sum = 0\n    for n in nums\n        sum\
    \ += n\n    end\n    return sum\nend", "    sum = 0\n    for i in nums\n     \
    \   sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in a given vector.", "    \n    sum = 0\n   \
    \ \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.", "    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sum::Int64 = 0\n    \n    for\
    \ i in nums\n        sum += i\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a Julia function called maxSubArraySum(nums::Vector{Int64}) that returns\
    \ the maximum sum of any non-empty sub-vector of nums.", "    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.", "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n\
    \    return sum\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-vector\
    \ of nums.", "    \n    sum = 0\n    \n    for x in nums\n        sum += x\n \
    \   end\n    \n    return sum\nend", "    \n    sum = 0\n    for n in nums\n \
    \       sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of times a given value appears in a given vector.", "    \n    sum = 0\n   \
    \ \n    for num in nums\n        \n        if sum > 0\n            sum += num\n\
    \        else\n            sum -= num\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven a vector of integers\
    \ nums, find the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n\
    \    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1,\
    \ -2, -3])\n    -6\n    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 4\nGiven a vector of integers nums, find\
    \ the minimum sum of any non-empty sub-vector\n    of nums.\n    Example\n   \
    \ >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2,\
    \ -3])\n    -6\n    \"\"\"", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        \n        if num > 0\n            sum += num\n        else\n        \
    \    sum -= num\n        end\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the numbers in a given vector.\n\
    Example\n>>> sumOfNumbers([1, 2, 3, 4])\n10\n</text>", "    \n    sum = 0\n  \
    \  \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a given value appears in\
    \ a given vector.", "    \n    sum = 0\n    \n    for n in nums\n        sum +=\
    \ n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum::Int64 = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum\
    \ of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1,\
    \ 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate\
    \ through the array.", "    \n    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the first n positive integers. \nExample\n>>> sumFirstN([2, 3, 4,\
    \ 1, 2, 4])\n10\n>>> sumFirstN([-1, -2, -3])\n-6\n\"\"\"", "    \n    sum = 0\n\
    \    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of integers in an array that are less than a given value.", "    \n \
    \   sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in a vector that are greater than a given value.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    sum = 0\n    for num in nums\n        sum +=\
    \ num\n    end\n    return sum\nend", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend", "    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a given value appears in a given vector.",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds the minimum sum of any\
    \ non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate over\
    \ the sub-array and add each element to the sum.", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    sum = 0\n    for num in nums\n  \
    \      sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-vector of nums.\nExample\n\
    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n\
    -6\nHint: Use a for loop to iterate through the vector.", "    sum::Int64 = 0\n\
    \    for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector.", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ times a given value appears in a given vector.", "    \n    sum = 0\n    \n\
    \    for num in nums\n        \n        if num > 0\n            \n           \
    \ sum += num\n            \n        else\n            \n            sum += num\n\
    \            \n        end\n        \n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of integers less than or equal to\
    \ n that are divisible by k.", "    \n    sum = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each unique element appears in a given vector.", "    \n    sum = 0\n\
    \    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given element appears\
    \ in a given vector.", "    sum = 0\n    for x in nums\n        sum += x\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-vector of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
