name: HumanEval_66_digitSum
language: jl
prompt: "\"\"\"Task\n    Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n   \
  \ >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
  abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
  )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
  \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
  \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
  \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
  \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
completions: ["    if s == \"\" then 0 else sum (map (\\c -> if c >= 'A' && c <= 'Z'\
    \ then c - 'A' else 0, s))\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the sum of the digits in that string.",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    if s == \"\"\n    \
    \    0\n    else\n        sum(map(ord, filter(c => c >= 'A' && c <= 'Z', s)))\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n \
    \           sum += c - '0'\n        else\n            sum += c - 'A' + 10\n  \
    \      end\n    end\n    return sum\nend", "    sum::Int64 = 0\n    for c in s:\n\
    \        if c >= 'A' and c <= 'Z':\n            sum += (c - 'A' + 10)\n      \
    \  elif c >= 'a' and c <= 'z':\n            sum += (c - 'a' + 10)\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case letters.", "    sum::Int64 = 0\n    for c in s do\n        if c >=\
    \ '0' && c <= '9' then\n            sum = sum + c - '0'\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the sum of the digits of that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s do \n        if c >= 'a'\
    \ && c <= 'z' then \n            sum += c - 'a'\n        else \n            sum\
    \ += c - 'A'\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the numbers in the string.", "    sum::Int64 = 0\n    for c in s\n      \
    \  if ('A' <= c && c <= 'Z')\n            sum += c - 'A' + 1\n        else if\
    \ ('a' <= c && c <= 'z')\n            sum += c - 'a' + 1\n        else if ('0'\
    \ <= c && c <= '9')\n            sum += c - '0'\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n \
    \           sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThe question was about using only `if` statements, not `for` loops.\n\
    <|/ c |>\n<| c |>\nThe question was about using only `if` statements, not `for`\
    \ loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if` statements,\
    \ not `for` loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if`\
    \ statements, not `for` loops.\n<|/ c |>\n<| c |>\nThe question was about using\
    \ only `if` statements, not `for` loops.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map ord $ filter (\\\
    c -> ord c >= 'A' && ord c <= 'Z') s)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe\
    \ question was about using only `if` statements, not `for` loops.\n<|/ c |>\n\
    <| c |>\nThe question was about using only `if` statements, not `for` loops.\n\
    <|/ c |>\n<| c |>\nThe question was about using only `if` statements, not `for`\
    \ loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if` statements,\
    \ not `for` loops.\n<|/ c |>\n<| c |>\nThe question was about using only `if`\
    \ statements, not `for` loops.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum ::\
    \ String -> Int\ndigitSum s = sum (map ord $ filter (\\c -> ord c >= 'A' && ord\
    \ c <= 'Z') s)\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n\
    The question was about using only `if` statements, not `for` loops.\n<|/ c |>\n\
    <| c |>\nThe question was about using only `if` statements, not `for` loops.\n\
    <|/ c |>\n<| c |>\nThe question was ", "    sum::Int64 = 0\n    for c in s\n \
    \       if c.isUpper\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| c |>\n`digitSum = sum . filter (\\c ->\
    \ c.isUpper)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> c.isUpper)`\
    \ - this was the most elegant solution. Thank you!\n<|/ c |>\n<| a |>\nHere's\
    \ a solution using Data.Char:\n<code>\nimport Data.Char", "    sum::Int64 = 0\n\
    \    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\nI like your use of codePointAt. Very nice.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c\
    \ |>\nThe `isUpper` method doesn't exist in Julia. `c.isUpper()` returns `Bool`\
    \ not `Int64`.\n<|/ c |>\n<| c |>\nThanks, I fixed the answer.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nThe answer by is correct, but I wanted to add that you can also\
    \ use regular expressions to solve this problem:\n<code>\ndigitSum(s::String)::Int64\
    \ = sum(map(x -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=2 |>\nA more Julian way is to use map\n<code>\ndigitSum(s::String)::Int64\
    \ = sum(map(x -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\nA more Julian way is to use filter:\n<code>\ndigitSum(s::String)::Int64\
    \ = sum(filter(x -> x.isUpper(), s))\n</code>\n<|/ a dscore=2 tags=julia,string\
    \ |>\n<| a dscore=1 |>\nAnother Julian way is to use reduce:\n<code>\ndigitSum(s::String)::Int64\
    \ = reduce(+, map(x -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a\
    \ tags=julia,string |>\n<| a tags=julia,string |>\nAnother Julian way is to use\
    \ reduce:\n<code>\ndigitSum(s::String)::Int64 = reduce(+, map(x -> x.isUpper()\
    \ ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\nAnother Julian way is to use reduce:\n<code>\ndigitSum(s::String)::Int64\
    \ = reduce(+, map(x -> x.isUpper() ? x.codePointAt(0) : 0, s))\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=julia,string |>\nAnother Julian way is to use reduce:\n\
    <code>\ndigitSum(s::String)::Int64 = reduce(+, map(x -> x.isUpper() ? x.codePointAt(0)\
    \ : 0, s))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nAnother Julian way is\
    \ to use reduce", "    sum::Int64 = 0\n    for c in s do \n        if c >= 'A'\
    \ and c <= 'Z' then \n            sum += c - 'A' + 1 \n        else \n       \
    \     sum += c \n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the sum of the digits in that string.", "    if s == \"\
    \"\n        0\n    else\n        sum = 0\n        for c in s\n            if c\
    \ >= '0' && c <= '9'\n                sum += c - '0'\n            else\n     \
    \           sum += 10\n        end\n        sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the number of upper characters only'\nASCII codes.", "    sum::Int64 = 0\n\
    \    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do it without using any libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution without libraries.\n<|/ c |>\n<| c |>\n\
    I added a solution without libraries.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.Char (toUpper)", "    digitSum = 0\n    for c in s do\n        if c >=\
    \ '0' and c <= '9' then\n            digitSum += c - '0'\n        else\n     \
    \       digitSum = 0\n        end\n    end\n    return digitSum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    digitSum = 0\n  \
    \  for c in s\n        if c.isUpper\n            digitSum += c.code\n    return\
    \ digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n<| a\
    \ tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char", " \
    \   if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n \
    \           if c >= '0' and c <= '9'\n                sum += c - '0'\n       \
    \     else\n                sum += 0\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore all non-alphabetic\
    \ characters and return 0 if the string contains only alphabetic characters.",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n \
    \           sum += c - '0'\n        else\n            sum += c - 'A' + 10\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=haskell,string |>\n<| c |>\n`digitSum` doesn't work for `\"abc\"`.\n\
    <|/ c |>\n<| c |>\nI didn't notice that at first, but I fixed it now.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe simplest solution would be to use Data.Char.digitToInt to\
    \ convert each character to a number, then add them up.\n<code>\nimport Data.Char",
  "    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum +=\
    \ toUpper(c) - 'A' + 1\n        end\n    end\n    return digitSum\nend", "   \
    \ sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n  \
    \          sum += c - '0'\n        else\n            sum += c - 'A' + 10\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.", "    sum::Int64 = 0\n    for c in s\n       \
    \ if c.isUpper\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this answer because it's more idiomatic and\
    \ more efficient. However it does require the user to import `Char` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import Data.List` which may\
    \ not be a good idea. Also it requires `import Data.Char` which may not be a good\
    \ idea. Also it requires `import Data.List` which may not be a good idea. Also\
    \ it requires `import Data.Char` which may not be a good idea. Also it requires\
    \ `import Data.List` which may not be a good idea. Also it requires `import Data.Char`\
    \ which may not be a good idea. Also it requires `import ", "    if s == \"\"\n\
    \        0\n    else\n        sum(map(ord, filter(c => c >= 'A' && c <= 'Z', s)))\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of occurrences of the character 'e' in the string.",
  "    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c >= 'A'\
    \ && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| c |>\nI like\
    \ your use of pattern matching. However, I believe that `sum` should be `Int64`\
    \ instead of `Int`.\n<|/ c |>\n<| c |>\n: Thanks. I didn't know that `sum` was\
    \ an `Int64` until I looked it up. I've updated my answer.\n<|/ c |>\n<| c |>\n\
    `sum` should be `Int64` because `Int` doesn't have enough bits to represent all\
    \ possible values of `Int64`.\n<|/ c |>\n<| c |>\n: Thanks. I didn't know that\
    \ `Int` doesn't have enough bits to represent all possible values of `Int64`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl\
    \ (\\acc c -> if isUpper c then acc + c.codePointAt(0) else acc) 0 s\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| a tags=string,haskell,ascii |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=haskell,string |>\n<code>\nimport Data.Char", "    sum = 0\n \
    \   for c in s do\n        if c >= '0' && c <= '9' then\n            sum = sum\
    \ + c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.", "    sum::Int64 = 0\n    for c in s\n      \
    \  if ('A' <= c && c <= 'Z')\n            sum += c - 'A' + 1\n        else\n \
    \           sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the lower characters only'\nASCII codes.", "    if s == \"\"\n        0\n  \
    \  else\n        sum = 0\n        for c in s\n            if c >= '0' and c <=\
    \ '9'\n                sum += c - '0'\n            else\n                sum +=\
    \ c - 'A' + 10\n        end\n        sum\nend", "    sum::Int64 = 0\n    for c\
    \ in s do\n        if c >= '0' && c <= '9' then\n            sum += c - '0'\n\
    \        else\n            sum += c - 'A' + 10\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits of that string. \n    For\
    \ example, digitSum(\"1234\") should return 10.", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c >= '0' and c <= '9':\n            sum += (c - '0')\n \
    \   return sum\nend", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of upper case letters.", "    sum::Int64 = 0\n    for\
    \ c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c - 'A' + 1\n\
    \        else if ('a' <= c && c <= 'z')\n            sum += c - 'a' + 1\n    \
    \    else if ('0' <= c && c <= '9')\n            sum += c - '0'\n    return sum\n\
    end\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the sum of the\
    \ digits in that string.", "    sum::Int64 = 0\n    for c in s:\n        if c\
    \ >= '0' and c <= '9':\n            sum += c - '0'\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits of that string.", "    sum::Int64 = 0\n  \
    \  for c in s do \n        if c >= '0' && c <= '9' then \n            sum += (c\
    \ - '0')\n        else \n            sum += (c - 'A' + 10)\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n            sum +=\
    \ c - '0'\n    return sum\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndef digitSum(s):\n\
    \    sum = 0\n    for c in s:\n        if c.isdigit():\n            sum += int(c)\n\
    \    return sum\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n\
    This doesn't answer the question. OP wants to know how to use `digitSum` without\
    \ using `isdigit`.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. My\
    \ answer was based on the assumption that he wanted to use digitSum to solve the\
    \ problem without using isdigit.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = foldl (\\acc x -> acc + ord x - ord '0') 0 s\n\
    </code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know how to use `digitSum` without using `isdigit`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. My answer was based on\
    \ the assumption that he wanted to use digitSum to solve the problem without using\
    \ isdigit.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. My answer\
    \ was based on the assumption that he wanted to use digitSum to solve the problem\
    \ without using isdigit.\n<|/ c |>\n<| a tags=haskell,functional-programming |>\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> acc + ord x\
    \ - ord '0') 0 s\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to know how to use `digitSum` without using `isdigit`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. My answer was based on\
    \ the assumption that he wanted to use digitSum to solve the problem without using\
    \ isdigit.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = foldl (\\acc x -> acc + ord x - ord '0') 0 s", "    sum::Int64 = 0\n   \
    \ for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=haskell,string |>\n<| c |>\n`digitSum = sum\
    \ . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\\
    c -> isUpper c)` - I like that one. Thanks!\n<|/ c |>\n<| c |>\n`digitSum = sum\
    \ . filter (\\c -> isUpper c)` - I like that one. Thanks!\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - I like that one. Thanks!\n<|/ c\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` - I like that one.\
    \ Thanks!\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + ord x else acc) 0 s\n</code>\n\
    <|/ a tags=haskell,string |>\n<| c |>\n`digitSum s = foldl (\\acc x -> if isUpper\
    \ x then acc + ord x else acc) 0 s` is more efficient than `digitSum s = sum .\
    \ filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum s = foldl (\\acc x\
    \ -> if isUpper x then acc + ord x else acc) 0 s` is more efficient than `digitSum\
    \ s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum s = foldl\
    \ (\\acc x -> if isUpper x then acc + ord x else acc) 0 s` is more efficient than\
    \ `digitSum s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum\
    \ s = foldl (\\acc x -> if isUpper x then acc + ord x else acc) 0 s` is more efficient\
    \ than `digitSum s = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n", " \
    \   sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using foldl\
    \ for this\n<code>\nfoldl (+) 0 [1..length \"abc\"]\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\nHere's a solution using\
    \ foldl:\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if\
    \ isUpper x then acc + x.codePointAt(0) else acc) 0 s\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nHere's a solution using foldl\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc + x.codePointAt(0)\
    \ else acc) 0 s\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| a |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n   \
    \     if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\nend",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking\
    \ for a solution that does not require any additional libraries. I guess I should\
    \ have been more clear in my question. I was looking for a solution that does\
    \ not require any additional libraries. I guess I should have been more clear\
    \ in my question. I was looking for a solution that does not require any additional\
    \ libraries. I guess I should have been more clear in my question. I was looking ",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n \
    \           sum += c - '0'\n        else\n            sum += c - 'A' + 10\n  \
    \      end\n    end\n    return sum\nend", "    sum::Int64 = 0\n    for c in s\n\
    \        if c >= '0' and c <= '9'\n            sum += c - '0'\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the sum of the\
    \ digits only'\n    ASCII codes.", "    sum::Int64 = 0\n    for c in s:\n    \
    \    if c >= '0' and c <= '9':\n            sum += c - '0'\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis answer would be better if you explained what\
    \ was wrong with OP's code and how you fixed it.\n<|/ c |>\n<| c |>\nThanks for\
    \ your comment. I added some explanation.\n<|/ c |>\n<| a dscore=1 |>\nThe issue\
    \ is that the function digitSum does not return a value.  It only prints out the\
    \ result.  To fix this, simply add a return statement to the end of the function.\n\
    <code>", "    digitSum = 0\n    for c in s:\n        if c.isUpper():\n       \
    \     digitSum += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for the empty string. `digitSum(\"\")` returns\
    \ 0.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using recursion:\n<code>\nimport\
    \ Data.Char (toUpper)", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (c >= 'a' && c <= 'z')\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphanumeric characters.", "    digitSum = 0\n\
    \    for c in s\n        if isUpper(c)\n            digitSum += toUpper(c) - 'A'\
    \ + 1\n        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the digits only'\n    ASCII codes.", "    sum = 0\n    for c in s:\n       \
    \ if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| c |>\n`digitSum = sum . filter (\\c ->\
    \ c.isUpper)`\n<|/ c |>\n<| c |>\n: Thanks, I didn't know about `isUpper`.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I didn't know about `isUpper`.\n<|/ c |>\n<| c |>\n\
    : Thanks, I didn't know about `isUpper`.\n<|/ c |>\n<| c |>\n: Thanks, I didn't\
    \ know about `isUpper`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c >=\
    \ '0' and c <= '9':\n            sum += c - '0'\n    return sum\n</code>\n<|/\
    \ a tags=string,haskell,functional-programming |>\n<| c |>\n`digitSum` doesn't\
    \ work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nI fixed the typo.\n<|/\
    \ c |>\n<| c |>\nI fixed the typo.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport\
    \ Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `digitSum` returns `0` for `digitSum(\"\")`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\
    \ What is your GHCi version?\n<|/ c |>\n<| c |>\n: I tested it on GHCi 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| c |>\n: I tested it on 7.8.3, and 7.8.4 (which I believe is the latest\
    \ version). What version are you using?\n<|/ c |>\n<| c |>\n: I tested it on 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| a dscore=2 |>\nI like Daniel's answer, but here's another one that\
    \ doesn't use any libraries:\n<code>\ndigitSum :: String -> Int\ndigitSum s =\
    \ sum $ map (ord '0') s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `digitSum` returns `0` for `digitSum(\"\")`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\
    \ What is your GHCi version?\n<|/ c |>\n<| c |>\n: I tested it on GHCi 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| c |>\n: I tested it on 7.8.3, and 7.8.4 (which I believe is the latest\
    \ version). What version are you using?\n<|/ c |>\n<| c |>\n: I tested it on 7.8.3,\
    \ and 7.8.4 (which I believe is the latest version). What version are you using?\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n       \
    \     sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n           \
    \ sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n            sum\
    \ += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits only'\n    ASCII codes.", "    sum::Int64\
    \ = 0\n    for c in s do\n        sum += toupper(c)\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nThe function should ignore\
    \ all non-alphabetic characters and return 0 if the string contains only alphabetic\
    \ characters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| a |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\
    \ do \n        if c >= '0' && c <= '9' then \n            sum += c - '0'\n   \
    \     else \n            sum += 10\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    if s == \"\"\n\
    \        0\n    else\n        sum = 0\n        for c in s\n            if c >=\
    \ '0' and c <= '9'\n                sum += c - '0'\n            else\n       \
    \         sum += c - 'A' + 10\n        end\n        sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the lower characters only'\nASCII codes.", "    sum::Int64 = 0\n    for i in\
    \ s\n        if i <> 'A'\n            sum += i\n    return sum\nend", "    sum\
    \ = 0\n    for c in s\n        if c >= '0' and c <= '9'\n            sum += c\
    \ - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. \nThe function should ignore the case of the characters.", "   \
    \ sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n          \
    \  sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphabetic\
    \ characters and return 0 if the string contains only alphabetic characters.",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\nend",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, although it does require the user to import\
    \ `Char` from `Data.Char`.\n<|/ c |>\n<| c |>\nYes, I agree. My solution does\
    \ not require importing `Char` from `Data.Char`. However, I wanted to show that\
    \ you can write your own `digitSum` function without importing `Char` from `Data.Char`.\n\
    <|/ c |>\n<| a dscore=2 |>\nThis solution uses recursion and a helper function\
    \ which returns true if the character is uppercase and false otherwise:\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the lower characters only'\nASCII codes.", "    sum = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming |>\n\
    <code>\nimport Data.Char", "    sum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of uppercase letters.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the lower characters only'\nASCII codes.",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c.lower()) - ord('A')\n    return sum\n</code>\n<|/ a\
    \ tags=haskell,string |>\n<| a |>\n<code>\nimport Data.Char\nimport Data.List",
  "    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n  \
    \          if c >= 'A' and c <= 'Z'\n                sum += c - 'A' + 1\n    \
    \        else\n                sum += c\n        sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are upper case. For\
    \ example, the string \"hello\" has 5 characters that are upper case: \"H\", \"\
    E\", \"L\", \"L\", \"O\".", "    digitSum = 0\n    for c in s\n        if c >=\
    \ '0' and c <= '9'\n            digitSum += c - '0'\n        end\n    end\n  \
    \  return digitSum\nend", "    sum::Int64 = 0\n    for c in s\n        if ('A'\
    \ <= c && c <= 'Z')\n            sum += c - 'A' + 1\n        else\n          \
    \  sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string. \nThe digits\
    \ are the numbers from 0 to 9. \nThe string can contain any characters, including\
    \ spaces.", "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <=\
    \ '9' then\n            sum += c - '0'\n        else\n            sum += c - 'A'\
    \ + 10\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s\n        if c >=\
    \ 'A' and c <= 'Z'\n            sum += (c - 'A' + 10)\n        else\n        \
    \    sum += c\n    return sum\nend", "    sum::Int64 = 0\n    for c in s\n   \
    \     if isUpper(c)\n            sum += toUpper(c)\n    return sum\nend", "  \
    \  sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then \n\
    \            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s\n        if c.isUpper\n            sum += c.codePointAt(0)\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s\n        if c >= '0'\
    \ && c <= '9'\n            sum += c - '0'\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the sum of the\
    \ lower characters only'\nASCII codes.", "    sum::Int64 = 0\n    for c in s do\n\
    \        if ('A' <= c && c <= 'Z') || (\"a\" <= c && c <= \"z\") then\n      \
    \      sum += c - 'A' + 1\n        else\n            sum += c\n    end\n    return\
    \ sum\nend", "    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <=\
    \ 'Z'\n            sum += c - 'A' + 1\n        else\n            sum += c\n  \
    \  return sum\nend", "    if s == \"\"\n        0\n    else\n        digitSum(tail(s))+sum(map(ord,tail(s)))\
    \ \nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    sum::Int64 = 0\n  \
    \  for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\nThis doesn't work. `digitSum` returns `Int64`, but `digitSum \"aAaaaXa\"\
    ` returns `153`, which is wrong.\n<|/ c |>\n<| c |>\nI see what you mean. I'll\
    \ fix it.\n<|/ c |>\n<| c |>\nI fixed it now. Thanks for pointing that out.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work for `digitSum(\"aAaaaXa\")` which returns `153` instead of `151`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code in the answer.\n\
    <|/ c |>\n<| a |>\n<code>\nimport Data.Char", "    sum = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153`, not `162`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a function that\
    \ does this in O(n) time and O(1) space:\n<code>\nimport Data.Char", "    digitSum\
    \ = 0\n    for c in s\n        if c.isUpper\n            digitSum += c.codePointAt(0)\n\
    \    return digitSum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\n       \
    \ if c >= '0' and c <= '9'\n            sum += c - '0'\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c\
    \ - 'A' + 1\n        else\n            sum += c\n    return sum\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=string,haskell,functional-programming |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s do \n        if c >= 'A'\
    \ and c <= 'Z' then \n            sum += (c - 'A' + 10)\n        else \n     \
    \       sum += c\n    return sum\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nI like your solution, but I wouldn't call it \"functional\".  It's\
    \ more like imperative programming.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more like imperative programming. I just wanted to show that you can do it in\
    \ Haskell without using recursion.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more like imperative programming. I just wanted to show that you can do it in\
    \ Haskell without using recursion.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more like imperative programming. I just wanted to show that you can do it in\
    \ Haskell without using recursion.\n<|/ c |>\n<| c |>\nI agree with you, it's\
    \ more like imperative programming. I just wanted to show that you can do it in\
    \ Haskell without using recursion.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = sum (map ord $ filter (\\c -> c >= 'A' && c <=\
    \ 'Z') s)\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\nI like\
    \ your solution, but I wouldn't call it \"functional\".  It's more like imperative\
    \ programming.\n<|/ c |>\n<| c |>\nI agree with you, it's more like imperative\
    \ programming. I just wanted to show that you can do it in Haskell without using\
    \ recursion.\n<|/ c |>\n<| c |>\nI agree with you, it's more like imperative programming.\
    \ I just wanted to show that you can do it in Haskell without using recursion.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum\
    \ (map (\\c -> if c >= 'A' && c <= 'Z' then c - 'A' else c) s)\n</code>\n<|/ a\
    \ tags=haskell,functional-programming |>\n<| c |>\nI like your solution, but I\
    \ wouldn't call it \"functional\".  It's ", "    sum::Int64 = 0\n    for c in\
    \ s do \n        if c >= '0' && c <= '9' then \n            sum += c - '0'\n \
    \       else \n            sum += 10\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. Try `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c\
    \ |>\nI fixed it\n<|/ c |>\n<| c |>\nThis still doesn't work. Try `digitSum(\"\
    aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI fixed it\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. Try `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.Char", "    digitSum = 0\n    for c in s do\n        if c >= '0' && c <=\
    \ '9' then\n            digitSum += c - '0'\n        else\n            digitSum\
    \ += 10\n        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the upper characters only'\nASCII codes.",
  "    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend", "    if s == \"\"\n        0\n    else\n        sum = 0\n\
    \        for c in s\n            if c >= '0' and c <= '9'\n                sum\
    \ += c - '0'\n            else\n                sum += 0\n        end\n      \
    \  sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the sum of the digits of that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n            sum +=\
    \ c - '0'\n    return sum\n</code>\n<|/ a |>\n<| c |>\nThe `sum` variable is unnecessary.\
    \ Just use `return sum + c - '0'`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\
    \ I've edited my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know that. I've edited my answer to reflect your suggestion.\n<|/ c\
    \ |>\n<| c |>\nThanks, I didn't know that. I've edited my answer to reflect your\
    \ suggestion.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've edited my answer\
    \ to reflect your suggestion.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl (+) 0 $ map digitToInt\
    \ s\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks, I didn't know that. I've edited\
    \ my answer to reflect your suggestion.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = sum $ map digitToInt s\n</code>\n<|/ a\
    \ tags=string,haskell,functional-programming |>\n<| c |>\nThanks, I didn't know\
    \ that. I've edited my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I've edited my answer to reflect your suggestion.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = foldl (+) 0 $ map digitToInt s\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nThanks, I didn't know that. I've edited my answer to\
    \ reflect your suggestion.\n<|/ c |>\n<| a dscore=3 |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = foldl (+) 0 $ map digitToInt s\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a dscore=3 |>\n<code>\n", "    sum::Int64 = 0\n    for c in s do\n  \
    \      sum += (c - 'A' + 1)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s:\n        if c >= '0' and c <= '9':\n            sum += c\
    \ - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    : I see what you mean. Thanks for pointing that out. I've updated the answer.\n\
    <|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=haskell,string\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=string,haskell,functional-programming |>\n<| c |>\n`digitSum` should\
    \ probably be `digitSum = sum . filter (\\c -> isUpper c)`.\n<|/ c |>\n<| c |>\n\
    : Yes, that's a good point. I was trying to keep it close to the original code\
    \ as much as possible. I'll edit my answer to include your suggestion.\n<|/ c\
    \ |>\n<| a dscore=3 |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef digitSum(s):\n\
    \    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c.lower())\n\
    \    return sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n<| c |>\nThis doesn't\
    \ work. `ord` takes an `Int` and returns an `Int`, not a `Char`.\n<|/ c |>\n<|\
    \ c |>\nThis also doesn't work. `ord` takes an `Int` and returns an `Int`, not\
    \ a `Char`.\n<|/ c |>\n<| c |>\nThis doesn't work. `ord` takes an `Int` and returns\
    \ an `Int`, not a `Char`.\n<|/ c |>\n<| c |>\nThis doesn't work. `ord` takes an\
    \ `Int` and returns an `Int`, not a `Char`.\n<|/ c |>\n<| a tags=haskell,string,ascii\
    \ |>\n<code>\nimport Data.Char", "    if s == \"\"\n        0\n    else\n    \
    \    sum = 0\n        for c in s\n            if ('A' <= c && c <= 'Z')\n    \
    \            sum += c - 'A' + 1\n            else\n                sum += c\n\
    \        end\n        sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphabetic characters and return the number of\
    \ alphabetic characters.", "    digitSum = 0\n    for c in s\n        if ('A'\
    \ <= c && c <= 'Z')\n            digitSum += c - 'A' + 1\n        else\n     \
    \       digitSum += c\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Task\nWrite a function that takes a string as input and returns the sum of the\
    \ lower characters only'\nASCII codes.", "    sum::Int64 = 0\n    for c in s do\n\
    \        if c >= '0' && c <= '9' then\n            sum += c - '0'\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c\
    \ - 'A' + 1\n        else\n            sum += c\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    sum::Int64 = 0\n  \
    \  for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n\
    <| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| c |>\n`digitSum` can be written as `sum (map ord \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )`\n<|/ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport\
    \ Data.Char", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` should probably be `digitSum = sum . filter (\\c ->\
    \ c.isUpper)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> c.isUpper)`\
    \ doesn't work. `digitSum = sum . filter (\\c -> isUpper c)` does.\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` doesn't work because `isUpper`\
    \ isn't a function, but a type constructor. `digitSum = sum . filter (\\c -> c.isUpper)`\
    \ works because `isUpper` is a function.\n<|/ c |>\n<| a |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n\
    <| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `151`.\n\
    <|/ c |>\n<| c |>\n: Thanks, I fixed the typo.\n<|/ c |>\n<| c |>\n: I added a\
    \ more efficient solution that doesn't require any imports.\n<|/ c |>\n<| c |>\n\
    : I added a more efficient solution that doesn't require any imports.\n<|/ c |>\n\
    <| c |>\n: I added a more efficient solution that doesn't require any imports.\n\
    <|/ c |>\n<| a |>\nThe simplest way is to use Data.Char.digitToInt:\n<code>\n\
    import Data.Char", "    if s == \"\"\n        0\n    else\n        sum = 0\n \
    \       for c in s\n            if isUpper(c)\n                sum += toUpper(c)\n\
    \            else\n                sum += toLower(c)\n        end\n        sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    digitSum = 0\n    for\
    \ c in s\n        if c >= '0' and c <= '9'\n            digitSum += c - '0'\n\
    \        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c -\
    \ 'A' + 1\n        else if ('a' <= c && c <= 'z')\n            sum += c - 'a'\
    \ + 1\n        else if ('0' <= c && c <= '9')\n            sum += c - '0'\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphabetic characters and count the alphabetic\
    \ ones.", "    if s == \"\"\n        0\n    else\n        sum = 0\n        for\
    \ c in s\n            if ('A' <= c && c <= 'Z')\n                sum += (c - 'A'\
    \ + 10)\n            else\n                sum += c\n        sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    sum::Int64 = 0\n  \
    \  for i in s\n        if i >='A' and i <='Z'\n            sum += (i - 'A' + 1)\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    if s == \"\"\n        0\n    else\n        sum(map(ord,\
    \ filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are uppercase\
    \ letters.", "    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <=\
    \ 'Z') || ('a' <= c && c <= 'z')\n            sum += c - 'A' + 1\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits of that string. \n    For\
    \ example: digitSum(\"1234\") should return 10.", "    digitSum = 0\n    for c\
    \ in s\n        if c.isUpper\n            digitSum += c.codePointAt(0)\n     \
    \   end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nThe answer by is correct, but I thought I'd add some explanation\
    \ as to why it works.\nThe reason why this works is because of the way that Strings\
    \ are represented in memory. Strings are represented as a pointer to the first\
    \ character of the string followed by the length of the string. \n<code>\nlet\
    \ s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\n</code>\nThe first character of\
    \ the string is the character at index 0, the second character is the character\
    \ at index 1, and so on. \n<code>\nlet s_ptr[0]\nlet s_ptr[1]\nlet s_ptr[2]\n\
    let s_ptr[3]\nlet s_ptr[4]\n</code>\nSo if you wanted to get the first character\
    \ of the string you would have to dereference the pointer and then get the first\
    \ character of the dereferenced pointer. \n<code>\nlet first_char = s_ptr[0]\n\
    </code>\nThe reason why this works is because Strings are immutable in Rust. \n\
    <code>\nlet s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\nlet s_ptr[0]\nlet s_ptr[1]\n\
    let s_ptr[2]\nlet s_ptr[3]\nlet s_ptr[4]\n</code>\nThe above code will throw an\
    \ error because you can't mutate a String. \n<code>\nlet s = \"hello\"\nlet s_ptr\
    \ = &s\nlet s_len = 5\nlet s_ptr[0] = \"a\"\n</code>\nThis code will compile and\
    \ run just fine, but it will not change the value of the string because Strings\
    \ are immutable. \n<code>\nlet s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\n\
    let s_ptr[0] = \"a\"\n</code>\nThe above code will compile and run just fine,\
    \ but it will not change the value of the string because Strings are immutable.\
    \ \n<code>\nlet s = \"hello\"\nlet s_ptr = &s\nlet s_len = 5\nlet s_ptr[0] = \"\
    a\"\n</code>\nThe above code will compile and run just fine, but it will not change\
    \ the value of the string because Strings are immutable. \n<code>\nlet s = \"\
    hello\"\nlet s_ptr = &s\nlet s_len = 5\nlet s_ptr[0] = \"a\"\n</code>\nThe above\
    \ code will compile and run just fine, but it will not change the value of the\
    \ string because Strings are immutable. \n<code>\nlet s = \"hello\"\nlet s_ptr\
    \ = &s\nlet s_len = 5\nlet s_ptr[0] = \"a\"\n</code>\nThe above ", "    digitSum\
    \ = 0\n    for c in s\n        if isUpper(c)\n            digitSum += toUpper(c)\n\
    \        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters in the string.", "    sum = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\n`c.codePointAt(0)` will throw an error if the string\
    \ contains any non-ASCII characters.\n<|/ c |>\n<| c |>\nThanks, I added a version\
    \ that doesn't throw an error\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s\n        if c >= '0' and c <= '9'\n            sum += c\
    \ - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the digits in that string.", "    sum::Int64 = 0\n    for c in s\n        if\
    \ c >= '0' and c <= '9'\n            sum += c - '0'\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string. \nThe digits\
    \ are the characters '0' through '9'.", "    sum::Int64 = 0\n    for c in s\n\
    \        if c >= '0' and c <= '9'\n            sum += c - '0'\n    return sum\n\
    </code>\n<|/ a tags=string,haskell,integer |>\n<| a |>\n<code>\nimport Data.Char",
  "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n \
    \           sum = sum + c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in the string.", "    if s == \"\" then 0\
    \ else sum(map(ord, filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    sum::Int64 = 0\n    for i in s\n        if i >=48 and i <=57\n            sum\
    \ += i\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c >= 'A' and c <= 'Z':\n            sum +=\
    \ (c - 'A' + 10)\n        elif c >= 'a' and c <= 'z':\n            sum += (c -\
    \ 'a' + 10)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nThe\
    \ function should ignore all non-alphanumeric characters.", "    digitSum = 0\n\
    \    for c in s\n        if c.isUpper\n            digitSum += c.codePointAt(0)\n\
    \    return digitSum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of uppercase letters.", "    sum::Int64\
    \ = 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.Char", "    digitSum = 0\n    for c in s\n        if c >= '0' and c <=\
    \ '9'\n            digitSum += c - '0'\n        end\n    end\n    return digitSum\n\
    end", "    digitSum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            digitSum += c - '0'\n        else\n            digitSum = 0\n   \
    \     end\n    end\n    return digitSum\nend", "    sum = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a |>\n<| c |>\nI like your answer, but I think it would be better\
    \ to use a `fold` instead of a `for` loop. Also, `sum` could be replaced with\
    \ `foldl`.\n<|/ c |>\n<| c |>\nI agree with you on `fold` vs `for` loop. `fold`\
    \ would also allow to return `0` instead of `-1`.\n<|/ c |>\n<| c |>\n`fold` would\
    \ also allow to return `0` instead of `-1`. I think `fold` would be more efficient\
    \ than `for` loop. `fold` would also allow to return `0` instead of `-1`.\n<|/\
    \ c |>\n<| c |>\n`fold` would also allow to return `0` instead of `-1`. I think\
    \ `fold` would be more efficient than `for` loop. `fold` would also allow to return\
    \ `0` instead of `-1`.\n<|/ c |>\n<| c |>\n`fold` would also allow to return `0`\
    \ instead of `-1`. I think `fold` would be more efficient than `for` loop. `fold`\
    \ would also allow to return `0` instead of `-1`.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc c -> if isUpper\
    \ c then acc + c.codePointAt(0) else acc) 0 s\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\n`foldl` would be more efficient than `for` loop. `foldl` would also allow\
    \ to return `0` instead of `-1`.\n<|/ c |>\n<| c |>\n`foldl` would be more efficient\
    \ than `for` loop. `foldl` would also allow to return `0` instead of `-1`.\n<|/\
    \ c |>\n<| c |>\n`foldl` would be more efficient than `for` loop. `foldl` would\
    \ also allow to return `0` instead of `-1`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = foldl (\\acc c -> if isUpper c then acc\
    \ + c.codePointAt(0) else acc) 0 s", "    sum::Int64 = 0\n    for c in s do\n\
    \        if c >= '0' && c <= '9' then \n            sum += (c - '0')\n       \
    \ else\n            sum += (c - 'A' + 10)\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    digitSum = 0\n  \
    \  for c in s do \n        if c >= '0' && c <= '9' then digitSum += c - '0'\n\
    \    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.", "  \
    \  sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to do this\
    \ without using any built-in functions. Also, `ord` returns a `Char`, not a `Int64`.\n\
    <|/ c |>\n<| c |>\nThe question was about how to do this without using any built-in\
    \ functions. I answered it with the code I already had. My answer was to show\
    \ how it could be done without using any built-in functions. I didn't say that\
    \ my answer was wrong, just that it's not the answer to the question.\n<|/ c |>\n\
    <| c |>\nThe question was about how to do this without using any built-in functions.\
    \ I answered it with the code I already had. My answer was to show how it could\
    \ be done without using any built-in functions. I didn't say that my answer was\
    \ wrong, just that it's not the answer to the question.\n<|/ c |>\n<| c |>\nI\
    \ didn't say that my answer was wrong, just that it's not the answer to the question.\n\
    <|/ c |>\n<| c |>\nI didn't say that my answer was wrong, just that it's not the\
    \ answer to the question.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map (\\c -> if isUpper c then c else toUpper c) s\n\
    </code>\n<|/ a tags=haskell,string |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to do this without using any built-in functions. Also, `sum`\
    \ expects a `[Int]`, not a `[Char]`.\n<|/ c |>\n<| c |>\nI didn't say that my\
    \ answer was wrong, just that it's not the answer to the question.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (\\\
    c -> if isUpper c then c else toUpper c) s\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to ", "  \
    \  if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n  \
    \          if c >= 'A' && c <= 'Z'\n                sum += (c - 'A' + 10)\n  \
    \          else\n                sum += c\n        sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s:\n        if c >= '0' and c <= '9':\n            sum += (c\
    \ - '0')\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like your solution, but I wonder if it can be done without recursion.\n\
    <|/ c |>\n<| c |>\n: I believe it can be done without recursion, but it's probably\
    \ more complicated than it needs to be. I'll post a solution without recursion.\n\
    <|/ c |>\n<| c |>\nI added a solution without recursion.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s do\n    \
    \    sum += (c - 'A' + 1)\n    end\n    return sum\nend", "    sum::Int64 = 0\n\
    \    for c in s do\n        if c >= '0' && c <= '9' then\n            sum += c\
    \ - '0'\n        else\n            sum += c - 'A' + 10\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ not digits.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for the answer! I didn't know that `isUpper` was a function\
    \ in `Char`. However, this doesn't solve my problem because I still need to convert\
    \ the string to a list of `Char`s first. Also, `digitSum` needs to return an `Int64`,\
    \ not an `Int`.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require you\
    \ to convert to a list of `Char`s.\n<|/ c |>\n<| c |>\nThanks for the update!\
    \ I didn't know that `isUpper` was a function in `Char`. However, this doesn't\
    \ solve my problem because I still need to convert the string to a list of `Char`s\
    \ first. Also, `digitSum` needs to return an `Int64`, not an `Int`.\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require you to convert to a list of `Char`s.\n\
    <|/ c |>\n<| c |>\nThanks for the update! I didn't know that `isUpper` was a function\
    \ in `Char`. However, this doesn't solve my problem because I still need to convert\
    \ the string to a list of `Char`s first. Also, `digitSum` needs to return an `Int64`,\
    \ not an `Int`.\n<|/ c |>\n<| a tags=string,haskell,ascii |>\nHere's a solution\
    \ using Data.Char's toUpper and sum functions:\n<code>\nimport Data.Char", " \
    \   sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| a |>\n<code>\nlet\
    \ digitSum(s:String):Int64 = \n    let rec loop i acc = if i >= s.length then\
    \ acc else loop(i+1) (acc+s.[i]) \n    in loop 0 0\n</code>\n<|/ a dscore=2 tags=recursion,haskell,string\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `131`.\n<|/ c |>\n<| c |>\nI fixed it by changing `acc+s.[i]` to `acc+s.codePointAt(i)`\n\
    <|/ c |>\n<| c |>\n`digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n<|/\
    \ c |>\n<| c |>\nI fixed it by changing `acc+s.[i]` to `acc+s.codePointAt(i)`\n\
    <|/ c |>\n<| a tags=recursion,haskell,string |>\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc + ord x else acc)\
    \ 0 s\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nI fixed it by changing\
    \ `acc+s.[i]` to `acc+s.codePointAt(i)`\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc\
    \ + ord x else acc) 0 s\n</code>\n<|/ a tags=recursion,haskell,string |>\n<| a\
    \ dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x\
    \ -> if isUpper x then acc + ord x else acc) 0 s\n</code>\n<|/ a tags=recursion,haskell,string\
    \ |>\n<| a tags=recursion,haskell,string |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = foldl (\\acc x ", "    sum::Int64 = 0\n    for c in s:\n        if\
    \ c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `151`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that and\
    \ fixed it. I was thinking about a more general solution, where you might want\
    \ to add more characters to the sum than just uppercase letters.\n<|/ c |>\n<|\
    \ c |>\n: I added a more general solution that should work for any character.\n\
    <|/ c |>\n<| c |>\n: I added a more general solution that should work for any\
    \ character.\n<|/ c |>\n<| c |>\n: I added a more general solution that should\
    \ work for any character.\n<|/ c |>\n<| a tags=string,haskell,ascii |>\n<code>\n\
    import Data.Char", "    sum::Int64 = 0\n    for c in s do \n        if c >= '0'\
    \ && c <= '9' then \n            sum += c - '0'\n        else \n            sum\
    \ += c - 'A' + 10\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n            sum\
    \ = sum + c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.", "    sum::Int64 =\
    \ 0\n    for c in s\n        if c >= '0' and c <= '9'\n            sum += c -\
    \ '0'\n        end\n    end\n    return sum\nend", "    sum::Int64 = 0\n    for\
    \ c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI believe that this is what\
    \ you are looking for:\n<code>\nimport Data.Char (toUpper)", "    sum::Int64 =\
    \ 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n            sum\
    \ += c - '0'\n        else\n            sum += c - 'A' + 10\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.", "  \
    \  sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then \n\
    \            sum += c - '0'\n        else \n            sum += 10\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written more concisely as `sum . filter isUpper`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n \
    \   for c in s do \n        if c >= 'A' and c <= 'Z' then \n            sum +=\
    \ c - 'A' + 1\n        else \n            sum += c\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits only'\n    ASCII codes.", "    sum = 0\n \
    \   for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell |>\nThe\
    \ other answers are great, but I thought I'd add my own solution:\n<code>\nimport\
    \ Data.Char (toUpper)", "    sum::Int64 = 0\n    for c in s \n        if c >=\
    \ '0' and c <= '9' \n            sum += c - '0'\n    return sum\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=haskell,functional-programming |>\n<code>\nimport Data.Char",
  "    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n  \
    \          if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += c\n        sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the lower characters only'\n    ASCII codes.", "    if s == \"\"\n        0\n\
    \    else\n        sum = 0\n        for c in s\n            if c >= '0' && c <=\
    \ '9'\n                sum += c - '0'\n            else\n                sum\n\
    \        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the sum of the digits in that string. For\
    \ example, the string \"1234\" should return 10.", "    sum::Int64 = 0\n    for\
    \ c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c - 'A' + 1\n\
    \        else if ('a' <= c && c <= 'z')\n            sum += c - 'a' + 1\n    \
    \    else if ('0' <= c && c <= '9')\n            sum += c - '0'\n    return sum\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    sum::Int64 = 0\n \
    \   for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s\n       \
    \ if c >= 'A' and c <= 'Z'\n            sum += c - 'A' + 1\n        else\n   \
    \         sum += c\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isdigit():\n\
    \            sum += int(c)\n    return sum\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| a tags=haskell,functional-programming |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map (ord 'A') [x | x <- s, x >= 'A' && x <= 'Z']\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = sum $ map (ord 'A') [x | x <- s, x >= 'A' && x <= 'Z']\n</code>\n\
    <|/ a tags=haskell,functional-programming |>\n<| c |>\nPlease don't post only\
    \ code as an answer, but also provide an explanation of what your code does and\
    \ how it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum\
    \ $ map (ord 'A') [x | x <- s, x >= 'A' && x <= 'Z']\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (ord 'A') [x |\
    \ x <- s, x >= 'A' && x <= 'Z']\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually ", "    if s == \"\"\n        0\n    else\n        sum(map(ord,\
    \ filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the digits only'\n    ASCII codes.", "    sum::Int64 = 0\n    for c in s:\n\
    \        if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a tags=string,haskell,functional-programming |>\n<| c |>\nI like\
    \ your solution but I think it would be more idiomatic to use `foldl` instead\
    \ of `foldl1 (+) . map toUpper`.\n<|/ c |>\n<| c |>\nI agree that `foldl` is more\
    \ idiomatic. `foldl` is more general than `foldl1`, though. `foldl1` only works\
    \ on `Char`s, whereas `foldl` works on any `Foldable` type. `foldl1` also has\
    \ more general type signatures than `foldl`, so it's more flexible.\n<|/ c |>\n\
    <| c |>\nI agree that `foldl` is more general, but `foldl1` has more general type\
    \ signatures than `foldl`, so it's more flexible.\n<|/ c |>\n<| c |>\n`foldl1`\
    \ has more general type signatures than `foldl`, so it's more flexible.\n<|/ c\
    \ |>\n<| c |>\n`foldl1` has more general type signatures than `foldl`, so it's\
    \ more flexible.\n<|/ c |>\n<| a tags=string,haskell,functional-programming |>\n\
    The most idiomatic way is to use foldl1:\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = foldl1 (+) . map toUpper . toEnum\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nI like this solution, but I wonder if it would be more efficient to write\
    \ `foldl1 (+) . map toUpper` instead of `foldl1 (+) . map toUpper . toEnum`.\n\
    <|/ c |>\n<| c |>\nI guess it depends on how you define efficiency. `foldl1` will\
    \ probably be faster, but `foldl (+) 0` will probably be more efficient.\n<|/\
    \ c |>\n<| c |>\n`foldl (+) 0` will probably be more efficient than `foldl1 (+)\
    \ . map toUpper` because `foldl (+) 0` will have to traverse the entire list before\
    \ it can start accumulating the result. `foldl1 (+) . map toUpper` will stop accumulating\
    \ as soon as it encounter", "    sum::Int64 = 0\n    for c in s do\n        if\
    \ c >= '0' && c <= '9' then\n            sum += c - '0'\n        else\n      \
    \      sum += c - 'A' + 10\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits only'\n    ASCII codes.", "    sum::Int64\
    \ = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n            sum\
    \ += c - 'A' + 10\n        else\n            sum += c\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    if s == \"\"\n    \
    \    0\n    else\n        sum = 0\n        for c in s\n            if ('A' <=\
    \ c && c <= 'Z')\n                sum += c - 'A' + 1\n            else\n     \
    \           sum += c\n        end\n        sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string. \nThe function should ignore all non-alphabetic characters and\
    \ return 0 if the string contains only alphabetic characters.", "    sum::Int64\
    \ = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n            sum += c\
    \ - 'A' + 1\n        else\n            sum += c\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the digits of that string.", "    digitSum = 0\n    for c\
    \ in s\n        if isUpper(c)\n            digitSum += toUpper(c)\n        end\n\
    \    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the digits of that string.", "    sum::Int64\
    \ = 0\n    for c in s do \n        if c >= '0' && c <= '9' then \n           \
    \ sum += c - '0'\n        else \n            sum += 0\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the numbers in the string.", "    sum::Int64 = 0\n  \
    \  for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    digitSum = 0\n    for c in s\n        if\
    \ ('A' <= c && c <= 'Z')\n            digitSum += c - 'A' + 1\n        else if\
    \ ('a' <= c && c <= 'z')\n            digitSum += c - 'a' + 1\n        else if\
    \ ('0' <= c && c <= '9')\n            digitSum += c - '0'\n    return digitSum\n\
    end\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nThe function should ignore\
    \ all non-alphanumeric characters and return the number of characters in the string.",
  "    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum += toUpper(c)\n\
    \    return sum\nend", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\nend", "    sum::Int64 =\
    \ 0\n    for c in s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n\
    \    return sum\nend", "    if s == \"\"\n        0\n    else\n        sum = 0\n\
    \        for c in s\n            if isUpper(c)\n                sum += toUpper(c)\n\
    \            else\n                sum += toLower(c)\n        end\n        sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits only'\n    ASCII codes.", "    sum::Int64 = 0\n\
    \    for c in s\n        if c >= '0' and c <= '9'\n            sum += c - '0'\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.", "    sum::Int64 = 0\n    for c in s\n      \
    \  if c >= '0' and c <= '9'\n            sum += c - '0'\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    if s == \"\"\n        0\n    else\n        sum = 0\n\
    \        for c in s\n            if ('A' <= c && c <= 'Z')\n                sum\
    \ += c - 'A' + 1\n            else\n                sum += c\n        end\n  \
    \      sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string. \nIf the string\
    \ contains only digits, return 0.", "    digitSum = 0\n    for c in s\n      \
    \  if ('A' <= c && c <= 'Z')\n            digitSum += c - 'A' + 1\n        else\
    \ if ('a' <= c && c <= 'z')\n            digitSum += c - 'a' + 1\n        else\
    \ if ('0' <= c && c <= '9')\n            digitSum += c - '0'\n    end\n    return\
    \ digitSum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.", "  \
    \  sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.", "    sum::Int64 = 0\n    for c in s\n        if c >=\
    \ '0' and c <= '9'\n            sum += c - '0'\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using recursion.\n<|/ c |>\n<| c |>\nI added a solution without recursion.\n\
    <|/ c |>\n<| a |>\nHere's a solution without recursion:\n<code>\nimport Data.Char\
    \ (toUpper)", "    if s == \"\"\n        0\n    else\n        sum = 0\n      \
    \  for c in s\n            if c >= '0' and c <= '9'\n                sum += c\
    \ - '0'\n            else\n                sum += 10\n        end\n        sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.", "    if s == \"\"\n    \
    \    0\n    else\n        digitSum(tail(s))\n            + digit(head(s))\n  \
    \          * (tail(s) == \"\" ? 0 : 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Task\nWrite a function that takes a string as input and returns the sum of the\
    \ lower characters only'\nASCII codes.", "    digitSum = 0\n    for c in s\n \
    \       if c.isUpper\n            digitSum += c.codePointAt(0)\n    return digitSum\n\
    </code>\n<|/ a tags=string,haskell,functional-programming |>\n<| c |>\n`digitSum`\
    \ should probably be `digitSum = sum . filter isUpper`\n<|/ c |>\n<| c |>\n`digitSum\
    \ = sum . filter isUpper` would also work, though `digitSum = sum . filter isUpper`\
    \ is more idiomatic.\n<|/ c |>\n<| c |>\n`digitSum = sum . filter isUpper` would\
    \ also work, though `digitSum = sum . filter isUpper` is more idiomatic.\n<|/\
    \ c |>\n<| c |>\n`digitSum = sum . filter isUpper` would also work, though `digitSum\
    \ = sum . filter isUpper` is more idiomatic.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    sum::Int64 = 0\n    for c in s:\n      \
    \  if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a tags=string,haskell,functional-programming |>\n<| c |>\n`digitSum` can be\
    \ written more concisely as `sum . filter isUpper`\n<|/ c |>\n<| c |>\n`digitSum`\
    \ can be written more concisely as `sum . filter isUpper`\n<|/ c |>\n<| c |>\n\
    `digitSum` can be written more concisely as `sum . filter isUpper`\n<|/ c |>\n\
    <| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List", "    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n\
    \            sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,haskell |>\n<code>\nimport Data.Char", "    sum::Int64\
    \ = 0\n    for i in s\n        if i <> 'A'\n            sum += i\n    return sum\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26859485)\n<|/ c |>\n<| c |>\n\
    I disagree. He asked how to write a function that takes a string as input and\
    \ returns the sum of the upper characters only. He also asked how to do this in\
    \ Haskell. He also asked how to do this in Python. He also asked how to do this\
    \ in R. He also asked how to do this in C. He also asked how to do this in C++.\
    \ He also asked how to do this in Java. He also asked how to do this in C#. He\
    \ also asked how to do this in Haxe. He also asked how to do this in F#. He also\
    \ asked how to do this in OCaml. He also asked how to do this in Rust. He also\
    \ asked how to do this in Scala. He also asked how to do this in Haskell. He also\
    \ asked how to do this in C#. He also asked how to do this in C++. He also asked\
    \ how to do this in C#. He also asked how to do this in C++. He also asked how\
    \ to do this in C++. He also asked how to do this in C#. He also asked how to\
    \ do this in C#. He also asked how to do this in C#. He also asked how to do this\
    \ in C#. He also asked how to do this in C#. He also asked how to do this in C#.\
    \ He also asked how to do this in C#. He also asked how to do this in C#. He also\
    \ asked how to do this in C#. He also asked how to do this in C#. He also asked\
    \ how to do this in C#. He also asked how to do this in C#. He also asked how\
    \ to do this in C#. He also asked how to do this in C#. He also asked how to do\
    \ this in C#. He also asked how to do this in C#. He also asked how to do this\
    \ in C#. He also asked how to do this in C#. ", "    digitSum = 0\n    for c in\
    \ s\n        if isUpper c\n            digitSum += c - 'A' + 1\n        end\n\
    \    end\n    return digitSum\nend", "    sum::Int64 = 0\n    for c in s:\n  \
    \      if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n\
    </code>\n<|/ a tags=string,haskell,functional-programming |>\n<| a dscore=2 |>\n\
    <code>\nimport Data.Char", "    if s == \"\"\n        0\n    else\n        sum(map(ord,\
    \ filter(c => c >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are upper case. For example, the string \"\
    Hello\" has 4 characters that are upper case: \"H\", \"E\", \"L\", \"L\".", " \
    \   sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n       \
    \     sum += c - '0'\n        end\n    end\n    return sum\nend", "    sum::Int64\
    \ = 0\n    for c in s\n        if c.isUpper\n            sum += c.codePointAt(0)\n\
    \    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char", "    if s == \"\"\n        0\n    else\n    \
    \    sum(map(ord, s)) - sum(map(ord, s[1..]))\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters and return the number of alphanumeric characters.", "    sum::Int64\
    \ = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n            sum\
    \ += c - '0'\n        else\n            sum += 10\n        end\n    end\n    return\
    \ sum\nend", "    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c\
    \ <= '9' then\n            sum += c - '0'\n        else\n            sum += c\
    \ - 'A' + 10\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string.", "    sum::Int64 = 0\n    for c in s:\n     \
    \   if c.isUpper():\n            sum += c.codePointAt(0)\n    return sum\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns\
    \ `153` instead of `151`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I\
    \ was too focused on getting the sum of the upper case letters. I've updated my\
    \ answer to fix the problem.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here\
    \ are all great, but I thought I'd add another option that is more efficient than\
    \ converting everything to upper case and summing them up. \n<code>\nimport Data.Char"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
